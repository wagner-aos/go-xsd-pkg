//	Auto-generated by the "go-xsd" package located at:
//		github.com/wagner-aos/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		khronos.org/files/collada_schema_1_5
package go_Collada15

//	COLLADA Schema
//	Version 1.5.0 (August 6, 2008)
//	Copyright (C) 2008 The Khronos Group Inc., Sony Computer Entertainment Inc.
//	All Rights Reserved.
//	Khronos is a trademark of The Khronos Group Inc.
//	COLLADA is a trademark of Sony Computer Entertainment Inc. used by permission by Khronos.
//	Note that this software document is distributed on an "AS IS" basis, with ALL EXPRESS AND
//	IMPLIED WARRANTIES AND CONDITIONS DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED
//	WARRANTIES AND CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A PARTICULAR
//	PURPOSE, AND NON-INFRINGEMENT.

import (
	xml "github.com/wagner-aos/go-xsd-pkg/www.w3.org/2001/xml.xsd_go"
	math "github.com/wagner-aos/go-xsd-pkg/www.w3.org/Math/XMLSchema/mathml2/mathml2.xsd_go"
	xsdt "github.com/wagner-aos/go-xsd/types"
)

//	The COLLADA element declares the root of the document that comprises some of the content
//	in the COLLADA schema.
//	The COLLADA element may contain any
//	number of library_animations elements.
//	The library_animations element declares a module of animation elements.
//	The name attribute is the text string name of this element. Optional attribute.
type XsdGoPkgHasAttr_Name_XsdtToken_ struct {
	//	The name attribute is the text string name of this element. Optional attribute.
	Name xsdt.Token `xml:"http://www.collada.org/2008/03/COLLADASchema name,attr"`
}

//	There must be at least one animation element.
//	The animation element categorizes the declaration of animation information. The animation
//	hierarchy contains elements that describe the animation's key-frame data and sampler functions,
//	ordered in such a way to group together animations that should be executed together.
//	The id attribute is a text string containing the unique identifier of this element.
//	This value must be unique within the instance document. Optional attribute.
type XsdGoPkgHasAttr_Id_XsdtId_ struct {
	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	Id xsdt.Id `xml:"http://www.collada.org/2008/03/COLLADASchema id,attr"`
}

//	The animation may be hierarchical and may contain any number of other animation elements.
type XsdGoPkgHasElems_animationsequencechoicesequencechoicesequenceanimation_typeschema_Animation_TanimationType_ struct {
	//	The animation may be hierarchical and may contain any number of other animation elements.
	Animations []*TanimationType `xml:"http://www.collada.org/2008/03/COLLADASchema animation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_animationsequencechoicesequencechoicesequenceanimation_typeschema_Animation_TanimationType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_animationsequencechoicesequencechoicesequenceanimation_typeschema_Animation_TanimationType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_animationsequencechoicesequencechoicesequenceanimation_typeschema_Animation_TanimationType_ instance.
func (me *XsdGoPkgHasElems_animationsequencechoicesequencechoicesequenceanimation_typeschema_Animation_TanimationType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_animationsequencechoicesequencechoicesequenceanimation_typeschema_Animation_TanimationType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The sampler element declares an N-dimensional function used for animation. Animation function curves
//	are represented by 1-D sampler elements in COLLADA. The sampler defines sampling points and how to
//	interpolate between them.
//	Indicates what the sampled value should be after the last key.
//	An enumerated type specifying the acceptable sampler pre and post behavior attribute types.
type TsamplerBehaviorEnum xsdt.String

//	This convenience method just performs a simple type conversion to TsamplerBehaviorEnum's alias type xsdt.String.
func (me TsamplerBehaviorEnum) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TsamplerBehaviorEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TsamplerBehaviorEnum) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TsamplerBehaviorEnum is "CYCLE".
func (me TsamplerBehaviorEnum) IsCycle() bool { return me == "CYCLE" }

//	Since TsamplerBehaviorEnum is just a simple String type, this merely returns the current string value.
func (me TsamplerBehaviorEnum) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TsamplerBehaviorEnum is "CONSTANT".
func (me TsamplerBehaviorEnum) IsConstant() bool { return me == "CONSTANT" }

//	Returns true if the value of this enumerated TsamplerBehaviorEnum is "OSCILLATE".
func (me TsamplerBehaviorEnum) IsOscillate() bool { return me == "OSCILLATE" }

//	Returns true if the value of this enumerated TsamplerBehaviorEnum is "UNDEFINED".
func (me TsamplerBehaviorEnum) IsUndefined() bool { return me == "UNDEFINED" }

//	Returns true if the value of this enumerated TsamplerBehaviorEnum is "CYCLE_RELATIVE".
func (me TsamplerBehaviorEnum) IsCycleRelative() bool { return me == "CYCLE_RELATIVE" }

//	Returns true if the value of this enumerated TsamplerBehaviorEnum is "GRADIENT".
func (me TsamplerBehaviorEnum) IsGradient() bool { return me == "GRADIENT" }

type XsdGoPkgHasAttr_PostBehavior_TsamplerBehaviorEnum_ struct {
	//	Indicates what the sampled value should be after the last key.
	PostBehavior TsamplerBehaviorEnum `xml:"http://www.collada.org/2008/03/COLLADASchema post_behavior,attr"`
}

//	The input element must occur at least one time. These inputs are local inputs.
//	The input_local_type element is used to represent inputs that can only reference resources declared in the same document.
//	The source attribute indicates the location of the data source. Required attribute.
//	This urifragment_type element is used for URI reference which can only reference a resource declared within it's same document.
type TurifragmentType xsdt.String

//	Since TurifragmentType is just a simple String type, this merely returns the current string value.
func (me TurifragmentType) String() string { return xsdt.String(me).String() }

//	Since TurifragmentType is just a simple String type, this merely sets the current value from the specified string.
func (me *TurifragmentType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TurifragmentType's alias type xsdt.String.
func (me TurifragmentType) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_Source_TurifragmentType_ struct {
	//	The source attribute indicates the location of the data source. Required attribute.
	Source TurifragmentType `xml:"http://www.collada.org/2008/03/COLLADASchema source,attr"`
}

//	The semantic attribute is the user-defined meaning of the input connection. Required attribute.
type XsdGoPkgHasAttr_Semantic_XsdtNmtoken_ struct {
	//	The semantic attribute is the user-defined meaning of the input connection. Required attribute.
	Semantic xsdt.Nmtoken `xml:"http://www.collada.org/2008/03/COLLADASchema semantic,attr"`
}

type TinputLocalType struct {
	//	The source attribute indicates the location of the data source. Required attribute.
	XsdGoPkgHasAttr_Source_TurifragmentType_

	//	The semantic attribute is the user-defined meaning of the input connection. Required attribute.
	XsdGoPkgHasAttr_Semantic_XsdtNmtoken_
}

//	If the WalkHandlers.TinputLocalType function is not nil (ie. was set by outside code), calls it with this TinputLocalType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TinputLocalType instance.
func (me *TinputLocalType) Walk() (err error) {
	if fn := WalkHandlers.TinputLocalType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_inputsequencesampler_typeschema_Input_TinputLocalType_ struct {
	//	The input element must occur at least one time. These inputs are local inputs.
	Inputs []*TinputLocalType `xml:"http://www.collada.org/2008/03/COLLADASchema input"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_inputsequencesampler_typeschema_Input_TinputLocalType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_inputsequencesampler_typeschema_Input_TinputLocalType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_inputsequencesampler_typeschema_Input_TinputLocalType_ instance.
func (me *XsdGoPkgHasElems_inputsequencesampler_typeschema_Input_TinputLocalType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_inputsequencesampler_typeschema_Input_TinputLocalType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Inputs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Indicates what the sampled value should be before the first key.
type XsdGoPkgHasAttr_PreBehavior_TsamplerBehaviorEnum_ struct {
	//	Indicates what the sampled value should be before the first key.
	PreBehavior TsamplerBehaviorEnum `xml:"http://www.collada.org/2008/03/COLLADASchema pre_behavior,attr"`
}

type TsamplerType struct {
	//	The input element must occur at least one time. These inputs are local inputs.
	XsdGoPkgHasElems_inputsequencesampler_typeschema_Input_TinputLocalType_

	//	Indicates what the sampled value should be before the first key.
	XsdGoPkgHasAttr_PreBehavior_TsamplerBehaviorEnum_

	//	Indicates what the sampled value should be after the last key.
	XsdGoPkgHasAttr_PostBehavior_TsamplerBehaviorEnum_

	//	The id attribute is a text string containing the unique identifier of this element. This value
	//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_
}

//	If the WalkHandlers.TsamplerType function is not nil (ie. was set by outside code), calls it with this TsamplerType instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TsamplerType instance.
func (me *TsamplerType) Walk() (err error) {
	if fn := WalkHandlers.TsamplerType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_inputsequencesampler_typeschema_Input_TinputLocalType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_samplersequencechoicesequenceanimation_typeschema_Sampler_TsamplerType_ struct {
	Samplers []*TsamplerType `xml:"http://www.collada.org/2008/03/COLLADASchema sampler"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_samplersequencechoicesequenceanimation_typeschema_Sampler_TsamplerType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_samplersequencechoicesequenceanimation_typeschema_Sampler_TsamplerType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_samplersequencechoicesequenceanimation_typeschema_Sampler_TsamplerType_ instance.
func (me *XsdGoPkgHasElems_samplersequencechoicesequenceanimation_typeschema_Sampler_TsamplerType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_samplersequencechoicesequenceanimation_typeschema_Sampler_TsamplerType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Samplers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The extra element may appear any number of times.
//	The extra element declares additional information regarding its parent element.
//	This element must contain at least one non-common profile technique.
//	The technique element declares the information used to process some portion of the content. Each
//	technique conforms to an associated profile. Techniques generally act as a "switch". If more than
//	one is present for a particular portion of content, on import, one or the other is picked, but
//	usually not both. Selection should be based on which profile the importing application can support.
//	Techniques contain application data and programs, making them assets that can be managed as a unit.
//	The profile attribute indicates the type of profile. This is a vendor defined character
//	string that indicates the platform or capability target for the technique. Required attribute.
type XsdGoPkgHasAttr_Profile_XsdtNmtoken_ struct {
	//	The profile attribute indicates the type of profile. This is a vendor defined character
	//	string that indicates the platform or capability target for the technique. Required attribute.
	Profile xsdt.Nmtoken `xml:"http://www.collada.org/2008/03/COLLADASchema profile,attr"`
}

type TtechniqueType struct {
	//	The profile attribute indicates the type of profile. This is a vendor defined character
	//	string that indicates the platform or capability target for the technique. Required attribute.
	XsdGoPkgHasAttr_Profile_XsdtNmtoken_
}

//	If the WalkHandlers.TtechniqueType function is not nil (ie. was set by outside code), calls it with this TtechniqueType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TtechniqueType instance.
func (me *TtechniqueType) Walk() (err error) {
	if fn := WalkHandlers.TtechniqueType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_ struct {
	//	This element must contain at least one non-common profile technique.
	Techniques []*TtechniqueType `xml:"http://www.collada.org/2008/03/COLLADASchema technique"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_ instance.
func (me *XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Techniques {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The extra element may contain an asset element.
//	The asset element defines asset management information regarding its parent element.
//	The unit element contains descriptive information about unit of measure. It has attributes for
//	the name of the unit and the measurement with respect to the meter. The unit element may appear
//	zero or one time.
//	The meter attribute specifies the measurement with respect to the meter. The default
//	value for the meter attribute is "1.0".
type TfloatType xsdt.Double

//	Since TfloatType is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TfloatType) Set(s string) { (*xsdt.Double)(me).Set(s) }

//	Returns a string representation of this TfloatType's current non-string scalar value.
func (me TfloatType) String() string { return xsdt.Double(me).String() }

//	This convenience method just performs a simple type conversion to TfloatType's alias type xsdt.Double.
func (me TfloatType) ToXsdtDouble() xsdt.Double { return xsdt.Double(me) }

type XsdGoPkgHasAttr_Meter_TfloatType_10 struct {
	//	The meter attribute specifies the measurement with respect to the meter. The default
	//	value for the meter attribute is "1.0".
	Meter TfloatType `xml:"http://www.collada.org/2008/03/COLLADASchema meter,attr"`
}

//	Returns the default value for Meter -- 1.0
func (me XsdGoPkgHasAttr_Meter_TfloatType_10) MeterDefault() TfloatType { return TfloatType(1.0) }

//	The name attribute specifies the name of the unit. The default value for the name
//	attribute is "meter".
type XsdGoPkgHasAttr_Name_XsdtNmtoken_Meter struct {
	//	The name attribute specifies the name of the unit. The default value for the name
	//	attribute is "meter".
	Name xsdt.Nmtoken `xml:"http://www.collada.org/2008/03/COLLADASchema name,attr"`
}

//	Returns the default value for Name -- "meter"
func (me XsdGoPkgHasAttr_Name_XsdtNmtoken_Meter) NameDefault() xsdt.Nmtoken {
	return xsdt.Nmtoken("meter")
}

type TxsdAssetTypeSequenceUnit struct {
	//	The meter attribute specifies the measurement with respect to the meter. The default
	//	value for the meter attribute is "1.0".
	XsdGoPkgHasAttr_Meter_TfloatType_10

	//	The name attribute specifies the name of the unit. The default value for the name
	//	attribute is "meter".
	XsdGoPkgHasAttr_Name_XsdtNmtoken_Meter
}

//	If the WalkHandlers.TxsdAssetTypeSequenceUnit function is not nil (ie. was set by outside code), calls it with this TxsdAssetTypeSequenceUnit instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdAssetTypeSequenceUnit instance.
func (me *TxsdAssetTypeSequenceUnit) Walk() (err error) {
	if fn := WalkHandlers.TxsdAssetTypeSequenceUnit; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_unitsequenceasset_typeschema_Unit_TxsdAssetTypeSequenceUnit_ struct {
	//	The unit element contains descriptive information about unit of measure. It has attributes for
	//	the name of the unit and the measurement with respect to the meter. The unit element may appear
	//	zero or one time.
	Unit *TxsdAssetTypeSequenceUnit `xml:"http://www.collada.org/2008/03/COLLADASchema unit"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_unitsequenceasset_typeschema_Unit_TxsdAssetTypeSequenceUnit_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_unitsequenceasset_typeschema_Unit_TxsdAssetTypeSequenceUnit_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_unitsequenceasset_typeschema_Unit_TxsdAssetTypeSequenceUnit_ instance.
func (me *XsdGoPkgHasElem_unitsequenceasset_typeschema_Unit_TxsdAssetTypeSequenceUnit_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_unitsequenceasset_typeschema_Unit_TxsdAssetTypeSequenceUnit_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Unit.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The modified element contains the date and time that the parent element was last modified and
//	represented in an ISO 8601 format. The modified element may appear zero or one time.
type XsdGoPkgHasElem_modifiedsequenceasset_typeschema_Modified_XsdtDateTime_ struct {
	//	The modified element contains the date and time that the parent element was last modified and
	//	represented in an ISO 8601 format. The modified element may appear zero or one time.
	Modified xsdt.DateTime `xml:"http://www.collada.org/2008/03/COLLADASchema modified"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_modifiedsequenceasset_typeschema_Modified_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_modifiedsequenceasset_typeschema_Modified_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_modifiedsequenceasset_typeschema_Modified_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElem_modifiedsequenceasset_typeschema_Modified_XsdtDateTime_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_modifiedsequenceasset_typeschema_Modified_XsdtDateTime_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_extrasequenceasset_typeschema_Extra_TextraType_ struct {
	Extras []*TextraType `xml:"http://www.collada.org/2008/03/COLLADASchema extra"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_extrasequenceasset_typeschema_Extra_TextraType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_extrasequenceasset_typeschema_Extra_TextraType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_extrasequenceasset_typeschema_Extra_TextraType_ instance.
func (me *XsdGoPkgHasElems_extrasequenceasset_typeschema_Extra_TextraType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_extrasequenceasset_typeschema_Extra_TextraType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The title element contains the title information for the parent element. The title element may
//	appear zero or one time.
type XsdGoPkgHasElem_titlesequenceasset_typeschema_Title_XsdtString_ struct {
	//	The title element contains the title information for the parent element. The title element may
	//	appear zero or one time.
	Title xsdt.String `xml:"http://www.collada.org/2008/03/COLLADASchema title"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_titlesequenceasset_typeschema_Title_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_titlesequenceasset_typeschema_Title_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_titlesequenceasset_typeschema_Title_XsdtString_ instance.
func (me *XsdGoPkgHasElem_titlesequenceasset_typeschema_Title_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_titlesequenceasset_typeschema_Title_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Specifies the location of the asset using the WGS84 coordinate system.
//	Altitude is always given in meters.  If the mode is "absolute", then the value is interpreted as meters from mean sea level.  If the mode is "relativeToGround" then the value is interpreted as meters above the actual ground elevation at that particular location.
//	The legal values for the mode attribute on the altitute element in a
//	geographic_location element.
type TaltitudeModeEnum xsdt.String

//	Since TaltitudeModeEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TaltitudeModeEnum) Set(s string) { (*xsdt.String)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TaltitudeModeEnum's alias type xsdt.String.
func (me TaltitudeModeEnum) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TaltitudeModeEnum is "relativeToGround".
func (me TaltitudeModeEnum) IsRelativeToGround() bool { return me == "relativeToGround" }

//	Since TaltitudeModeEnum is just a simple String type, this merely returns the current string value.
func (me TaltitudeModeEnum) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TaltitudeModeEnum is "absolute".
func (me TaltitudeModeEnum) IsAbsolute() bool { return me == "absolute" }

type XsdGoPkgHasAttr_Mode_TaltitudeModeEnum_RelativeToGround struct {
	Mode TaltitudeModeEnum `xml:"http://www.collada.org/2008/03/COLLADASchema mode,attr"`
}

//	Returns the default value for Mode -- "relativeToGround"
func (me XsdGoPkgHasAttr_Mode_TaltitudeModeEnum_RelativeToGround) ModeDefault() TaltitudeModeEnum {
	return TaltitudeModeEnum("relativeToGround")
}

type TxsdAssetTypeSequenceCoverageSequenceGeographicLocationSequenceAltitude struct {
	XsdGoPkgValue xsdt.Float `xml:",chardata"`

	XsdGoPkgHasAttr_Mode_TaltitudeModeEnum_RelativeToGround
}

//	If the WalkHandlers.TxsdAssetTypeSequenceCoverageSequenceGeographicLocationSequenceAltitude function is not nil (ie. was set by outside code), calls it with this TxsdAssetTypeSequenceCoverageSequenceGeographicLocationSequenceAltitude instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TxsdAssetTypeSequenceCoverageSequenceGeographicLocationSequenceAltitude instance.
func (me *TxsdAssetTypeSequenceCoverageSequenceGeographicLocationSequenceAltitude) Walk() (err error) {
	if fn := WalkHandlers.TxsdAssetTypeSequenceCoverageSequenceGeographicLocationSequenceAltitude; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TxsdAssetTypeSequenceCoverageSequenceGeographicLocationSequenceAltitude) ToXsdtFloat() xsdt.Float {
	return me.XsdGoPkgValue
}

type XsdGoPkgHasElem_altitudesequencegeographic_locationsequencecoveragesequenceasset_typeschema_Altitude_TxsdAssetTypeSequenceCoverageSequenceGeographicLocationSequenceAltitude_ struct {
	//	Altitude is always given in meters.  If the mode is "absolute", then the value is interpreted as meters from mean sea level.  If the mode is "relativeToGround" then the value is interpreted as meters above the actual ground elevation at that particular location.
	Altitude *TxsdAssetTypeSequenceCoverageSequenceGeographicLocationSequenceAltitude `xml:"http://www.collada.org/2008/03/COLLADASchema altitude"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_altitudesequencegeographic_locationsequencecoveragesequenceasset_typeschema_Altitude_TxsdAssetTypeSequenceCoverageSequenceGeographicLocationSequenceAltitude_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_altitudesequencegeographic_locationsequencecoveragesequenceasset_typeschema_Altitude_TxsdAssetTypeSequenceCoverageSequenceGeographicLocationSequenceAltitude_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_altitudesequencegeographic_locationsequencecoveragesequenceasset_typeschema_Altitude_TxsdAssetTypeSequenceCoverageSequenceGeographicLocationSequenceAltitude_ instance.
func (me *XsdGoPkgHasElem_altitudesequencegeographic_locationsequencecoveragesequenceasset_typeschema_Altitude_TxsdAssetTypeSequenceCoverageSequenceGeographicLocationSequenceAltitude_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_altitudesequencegeographic_locationsequencecoveragesequenceasset_typeschema_Altitude_TxsdAssetTypeSequenceCoverageSequenceGeographicLocationSequenceAltitude_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Altitude.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_longitudesequencegeographic_locationsequencecoveragesequenceasset_typeschema_Longitude_XsdtFloat_ struct {
	Longitude xsdt.Float `xml:"http://www.collada.org/2008/03/COLLADASchema longitude"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_longitudesequencegeographic_locationsequencecoveragesequenceasset_typeschema_Longitude_XsdtFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_longitudesequencegeographic_locationsequencecoveragesequenceasset_typeschema_Longitude_XsdtFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_longitudesequencegeographic_locationsequencecoveragesequenceasset_typeschema_Longitude_XsdtFloat_ instance.
func (me *XsdGoPkgHasElem_longitudesequencegeographic_locationsequencecoveragesequenceasset_typeschema_Longitude_XsdtFloat_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_longitudesequencegeographic_locationsequencecoveragesequenceasset_typeschema_Longitude_XsdtFloat_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_latitudesequencegeographic_locationsequencecoveragesequenceasset_typeschema_Latitude_XsdtFloat_ struct {
	Latitude xsdt.Float `xml:"http://www.collada.org/2008/03/COLLADASchema latitude"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_latitudesequencegeographic_locationsequencecoveragesequenceasset_typeschema_Latitude_XsdtFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_latitudesequencegeographic_locationsequencecoveragesequenceasset_typeschema_Latitude_XsdtFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_latitudesequencegeographic_locationsequencecoveragesequenceasset_typeschema_Latitude_XsdtFloat_ instance.
func (me *XsdGoPkgHasElem_latitudesequencegeographic_locationsequencecoveragesequenceasset_typeschema_Latitude_XsdtFloat_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_latitudesequencegeographic_locationsequencecoveragesequenceasset_typeschema_Latitude_XsdtFloat_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAssetTypeSequenceCoverageSequenceGeographicLocation struct {
	XsdGoPkgHasElem_longitudesequencegeographic_locationsequencecoveragesequenceasset_typeschema_Longitude_XsdtFloat_

	XsdGoPkgHasElem_latitudesequencegeographic_locationsequencecoveragesequenceasset_typeschema_Latitude_XsdtFloat_

	//	Altitude is always given in meters.  If the mode is "absolute", then the value is interpreted as meters from mean sea level.  If the mode is "relativeToGround" then the value is interpreted as meters above the actual ground elevation at that particular location.
	XsdGoPkgHasElem_altitudesequencegeographic_locationsequencecoveragesequenceasset_typeschema_Altitude_TxsdAssetTypeSequenceCoverageSequenceGeographicLocationSequenceAltitude_
}

//	If the WalkHandlers.TxsdAssetTypeSequenceCoverageSequenceGeographicLocation function is not nil (ie. was set by outside code), calls it with this TxsdAssetTypeSequenceCoverageSequenceGeographicLocation instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdAssetTypeSequenceCoverageSequenceGeographicLocation instance.
func (me *TxsdAssetTypeSequenceCoverageSequenceGeographicLocation) Walk() (err error) {
	if fn := WalkHandlers.TxsdAssetTypeSequenceCoverageSequenceGeographicLocation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_latitudesequencegeographic_locationsequencecoveragesequenceasset_typeschema_Latitude_XsdtFloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_altitudesequencegeographic_locationsequencecoveragesequenceasset_typeschema_Altitude_TxsdAssetTypeSequenceCoverageSequenceGeographicLocationSequenceAltitude_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_longitudesequencegeographic_locationsequencecoveragesequenceasset_typeschema_Longitude_XsdtFloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_geographic_locationsequencecoveragesequenceasset_typeschema_GeographicLocation_TxsdAssetTypeSequenceCoverageSequenceGeographicLocation_ struct {
	//	Specifies the location of the asset using the WGS84 coordinate system.
	GeographicLocation *TxsdAssetTypeSequenceCoverageSequenceGeographicLocation `xml:"http://www.collada.org/2008/03/COLLADASchema geographic_location"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_geographic_locationsequencecoveragesequenceasset_typeschema_GeographicLocation_TxsdAssetTypeSequenceCoverageSequenceGeographicLocation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_geographic_locationsequencecoveragesequenceasset_typeschema_GeographicLocation_TxsdAssetTypeSequenceCoverageSequenceGeographicLocation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_geographic_locationsequencecoveragesequenceasset_typeschema_GeographicLocation_TxsdAssetTypeSequenceCoverageSequenceGeographicLocation_ instance.
func (me *XsdGoPkgHasElem_geographic_locationsequencecoveragesequenceasset_typeschema_GeographicLocation_TxsdAssetTypeSequenceCoverageSequenceGeographicLocation_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_geographic_locationsequencecoveragesequenceasset_typeschema_GeographicLocation_TxsdAssetTypeSequenceCoverageSequenceGeographicLocation_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GeographicLocation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAssetTypeSequenceCoverage struct {
	//	Specifies the location of the asset using the WGS84 coordinate system.
	XsdGoPkgHasElem_geographic_locationsequencecoveragesequenceasset_typeschema_GeographicLocation_TxsdAssetTypeSequenceCoverageSequenceGeographicLocation_
}

//	If the WalkHandlers.TxsdAssetTypeSequenceCoverage function is not nil (ie. was set by outside code), calls it with this TxsdAssetTypeSequenceCoverage instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdAssetTypeSequenceCoverage instance.
func (me *TxsdAssetTypeSequenceCoverage) Walk() (err error) {
	if fn := WalkHandlers.TxsdAssetTypeSequenceCoverage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_geographic_locationsequencecoveragesequenceasset_typeschema_GeographicLocation_TxsdAssetTypeSequenceCoverageSequenceGeographicLocation_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_coveragesequenceasset_typeschema_Coverage_TxsdAssetTypeSequenceCoverage_ struct {
	Coverage *TxsdAssetTypeSequenceCoverage `xml:"http://www.collada.org/2008/03/COLLADASchema coverage"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_coveragesequenceasset_typeschema_Coverage_TxsdAssetTypeSequenceCoverage_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_coveragesequenceasset_typeschema_Coverage_TxsdAssetTypeSequenceCoverage_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_coveragesequenceasset_typeschema_Coverage_TxsdAssetTypeSequenceCoverage_ instance.
func (me *XsdGoPkgHasElem_coveragesequenceasset_typeschema_Coverage_TxsdAssetTypeSequenceCoverage_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_coveragesequenceasset_typeschema_Coverage_TxsdAssetTypeSequenceCoverage_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Coverage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The subject element contains a description of the topical subject of the parent element. The
//	subject element may appear zero or one time.
type XsdGoPkgHasElem_subjectsequenceasset_typeschema_Subject_XsdtString_ struct {
	//	The subject element contains a description of the topical subject of the parent element. The
	//	subject element may appear zero or one time.
	Subject xsdt.String `xml:"http://www.collada.org/2008/03/COLLADASchema subject"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_subjectsequenceasset_typeschema_Subject_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_subjectsequenceasset_typeschema_Subject_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_subjectsequenceasset_typeschema_Subject_XsdtString_ instance.
func (me *XsdGoPkgHasElem_subjectsequenceasset_typeschema_Subject_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_subjectsequenceasset_typeschema_Subject_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The contributor element defines authoring information for asset management
//	Contains a string with author's email address. String that compliant with RFC 2822 section 3.4. This element has no attributes. There may be only one author email address.
type XsdGoPkgHasElem_author_emailsequencecontributorsequenceasset_typeschema_AuthorEmail_TxsdAssetTypeSequenceContributorSequenceAuthorEmail_ struct {
	//	Contains a string with author's email address. String that compliant with RFC 2822 section 3.4. This element has no attributes. There may be only one author email address.
	AuthorEmail TurifragmentType `xml:"http://www.collada.org/2008/03/COLLADASchema author_email"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_author_emailsequencecontributorsequenceasset_typeschema_AuthorEmail_TxsdAssetTypeSequenceContributorSequenceAuthorEmail_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_author_emailsequencecontributorsequenceasset_typeschema_AuthorEmail_TxsdAssetTypeSequenceContributorSequenceAuthorEmail_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_author_emailsequencecontributorsequenceasset_typeschema_AuthorEmail_TxsdAssetTypeSequenceContributorSequenceAuthorEmail_ instance.
func (me *XsdGoPkgHasElem_author_emailsequencecontributorsequenceasset_typeschema_AuthorEmail_TxsdAssetTypeSequenceContributorSequenceAuthorEmail_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_author_emailsequencecontributorsequenceasset_typeschema_AuthorEmail_TxsdAssetTypeSequenceContributorSequenceAuthorEmail_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The source_data element contains a URI reference to the source data used for this asset.
//	There may be only one source_data element.
type XsdGoPkgHasElem_source_datasequencecontributorsequenceasset_typeschema_SourceData_XsdtAnyURI_ struct {
	//	The source_data element contains a URI reference to the source data used for this asset.
	//	There may be only one source_data element.
	SourceData xsdt.AnyURI `xml:"http://www.collada.org/2008/03/COLLADASchema source_data"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_source_datasequencecontributorsequenceasset_typeschema_SourceData_XsdtAnyURI_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_source_datasequencecontributorsequenceasset_typeschema_SourceData_XsdtAnyURI_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_source_datasequencecontributorsequenceasset_typeschema_SourceData_XsdtAnyURI_ instance.
func (me *XsdGoPkgHasElem_source_datasequencecontributorsequenceasset_typeschema_SourceData_XsdtAnyURI_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_source_datasequencecontributorsequenceasset_typeschema_SourceData_XsdtAnyURI_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Contains a URI reference (xs:anyURI) to author's website.  This element has no attributes.   There may be only one author website.
type XsdGoPkgHasElem_author_websitesequencecontributorsequenceasset_typeschema_AuthorWebsite_XsdtAnyURI_ struct {
	//	Contains a URI reference (xs:anyURI) to author's website.  This element has no attributes.   There may be only one author website.
	AuthorWebsite xsdt.AnyURI `xml:"http://www.collada.org/2008/03/COLLADASchema author_website"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_author_websitesequencecontributorsequenceasset_typeschema_AuthorWebsite_XsdtAnyURI_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_author_websitesequencecontributorsequenceasset_typeschema_AuthorWebsite_XsdtAnyURI_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_author_websitesequencecontributorsequenceasset_typeschema_AuthorWebsite_XsdtAnyURI_ instance.
func (me *XsdGoPkgHasElem_author_websitesequencecontributorsequenceasset_typeschema_AuthorWebsite_XsdtAnyURI_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_author_websitesequencecontributorsequenceasset_typeschema_AuthorWebsite_XsdtAnyURI_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The copyright element contains a string with copyright information.
//	There may be only one copyright element.
type XsdGoPkgHasElem_copyrightsequencecontributorsequenceasset_typeschema_Copyright_XsdtString_ struct {
	//	The copyright element contains a string with copyright information.
	//	There may be only one copyright element.
	Copyright xsdt.String `xml:"http://www.collada.org/2008/03/COLLADASchema copyright"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_copyrightsequencecontributorsequenceasset_typeschema_Copyright_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_copyrightsequencecontributorsequenceasset_typeschema_Copyright_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_copyrightsequencecontributorsequenceasset_typeschema_Copyright_XsdtString_ instance.
func (me *XsdGoPkgHasElem_copyrightsequencecontributorsequenceasset_typeschema_Copyright_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_copyrightsequencecontributorsequenceasset_typeschema_Copyright_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The comments element contains a string with comments from this contributor.
//	There may be only one comments element.
type XsdGoPkgHasElem_commentssequencecontributorsequenceasset_typeschema_Comments_XsdtString_ struct {
	//	The comments element contains a string with comments from this contributor.
	//	There may be only one comments element.
	Comments xsdt.String `xml:"http://www.collada.org/2008/03/COLLADASchema comments"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_commentssequencecontributorsequenceasset_typeschema_Comments_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_commentssequencecontributorsequenceasset_typeschema_Comments_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_commentssequencecontributorsequenceasset_typeschema_Comments_XsdtString_ instance.
func (me *XsdGoPkgHasElem_commentssequencecontributorsequenceasset_typeschema_Comments_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_commentssequencecontributorsequenceasset_typeschema_Comments_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The authoring_tool element contains a string with the authoring tool's name.
//	There may be only one authoring_tool element.
type XsdGoPkgHasElem_authoring_toolsequencecontributorsequenceasset_typeschema_AuthoringTool_XsdtString_ struct {
	//	The authoring_tool element contains a string with the authoring tool's name.
	//	There may be only one authoring_tool element.
	AuthoringTool xsdt.String `xml:"http://www.collada.org/2008/03/COLLADASchema authoring_tool"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_authoring_toolsequencecontributorsequenceasset_typeschema_AuthoringTool_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_authoring_toolsequencecontributorsequenceasset_typeschema_AuthoringTool_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_authoring_toolsequencecontributorsequenceasset_typeschema_AuthoringTool_XsdtString_ instance.
func (me *XsdGoPkgHasElem_authoring_toolsequencecontributorsequenceasset_typeschema_AuthoringTool_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_authoring_toolsequencecontributorsequenceasset_typeschema_AuthoringTool_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The author element contains a string with the author's name.
//	There may be only one author element.
type XsdGoPkgHasElem_authorsequencecontributorsequenceasset_typeschema_Author_XsdtString_ struct {
	//	The author element contains a string with the author's name.
	//	There may be only one author element.
	Author xsdt.String `xml:"http://www.collada.org/2008/03/COLLADASchema author"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_authorsequencecontributorsequenceasset_typeschema_Author_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_authorsequencecontributorsequenceasset_typeschema_Author_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_authorsequencecontributorsequenceasset_typeschema_Author_XsdtString_ instance.
func (me *XsdGoPkgHasElem_authorsequencecontributorsequenceasset_typeschema_Author_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_authorsequencecontributorsequenceasset_typeschema_Author_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAssetTypeSequenceContributor struct {
	//	The copyright element contains a string with copyright information.
	//	There may be only one copyright element.
	XsdGoPkgHasElem_copyrightsequencecontributorsequenceasset_typeschema_Copyright_XsdtString_

	//	The comments element contains a string with comments from this contributor.
	//	There may be only one comments element.
	XsdGoPkgHasElem_commentssequencecontributorsequenceasset_typeschema_Comments_XsdtString_

	//	The authoring_tool element contains a string with the authoring tool's name.
	//	There may be only one authoring_tool element.
	XsdGoPkgHasElem_authoring_toolsequencecontributorsequenceasset_typeschema_AuthoringTool_XsdtString_

	//	The author element contains a string with the author's name.
	//	There may be only one author element.
	XsdGoPkgHasElem_authorsequencecontributorsequenceasset_typeschema_Author_XsdtString_

	//	Contains a string with author's email address. String that compliant with RFC 2822 section 3.4. This element has no attributes. There may be only one author email address.
	XsdGoPkgHasElem_author_emailsequencecontributorsequenceasset_typeschema_AuthorEmail_TxsdAssetTypeSequenceContributorSequenceAuthorEmail_

	//	The source_data element contains a URI reference to the source data used for this asset.
	//	There may be only one source_data element.
	XsdGoPkgHasElem_source_datasequencecontributorsequenceasset_typeschema_SourceData_XsdtAnyURI_

	//	Contains a URI reference (xs:anyURI) to author's website.  This element has no attributes.   There may be only one author website.
	XsdGoPkgHasElem_author_websitesequencecontributorsequenceasset_typeschema_AuthorWebsite_XsdtAnyURI_
}

//	If the WalkHandlers.TxsdAssetTypeSequenceContributor function is not nil (ie. was set by outside code), calls it with this TxsdAssetTypeSequenceContributor instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TxsdAssetTypeSequenceContributor instance.
func (me *TxsdAssetTypeSequenceContributor) Walk() (err error) {
	if fn := WalkHandlers.TxsdAssetTypeSequenceContributor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_author_emailsequencecontributorsequenceasset_typeschema_AuthorEmail_TxsdAssetTypeSequenceContributorSequenceAuthorEmail_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_source_datasequencecontributorsequenceasset_typeschema_SourceData_XsdtAnyURI_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_author_websitesequencecontributorsequenceasset_typeschema_AuthorWebsite_XsdtAnyURI_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_copyrightsequencecontributorsequenceasset_typeschema_Copyright_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_commentssequencecontributorsequenceasset_typeschema_Comments_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_authoring_toolsequencecontributorsequenceasset_typeschema_AuthoringTool_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_authorsequencecontributorsequenceasset_typeschema_Author_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_contributorsequenceasset_typeschema_Contributor_TxsdAssetTypeSequenceContributor_ struct {
	//	The contributor element defines authoring information for asset management
	Contributors []*TxsdAssetTypeSequenceContributor `xml:"http://www.collada.org/2008/03/COLLADASchema contributor"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_contributorsequenceasset_typeschema_Contributor_TxsdAssetTypeSequenceContributor_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_contributorsequenceasset_typeschema_Contributor_TxsdAssetTypeSequenceContributor_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_contributorsequenceasset_typeschema_Contributor_TxsdAssetTypeSequenceContributor_ instance.
func (me *XsdGoPkgHasElems_contributorsequenceasset_typeschema_Contributor_TxsdAssetTypeSequenceContributor_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_contributorsequenceasset_typeschema_Contributor_TxsdAssetTypeSequenceContributor_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Contributors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The revision element contains the revision information for the parent element. The revision
//	element may appear zero or one time.
type XsdGoPkgHasElem_revisionsequenceasset_typeschema_Revision_XsdtString_ struct {
	//	The revision element contains the revision information for the parent element. The revision
	//	element may appear zero or one time.
	Revision xsdt.String `xml:"http://www.collada.org/2008/03/COLLADASchema revision"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_revisionsequenceasset_typeschema_Revision_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_revisionsequenceasset_typeschema_Revision_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_revisionsequenceasset_typeschema_Revision_XsdtString_ instance.
func (me *XsdGoPkgHasElem_revisionsequenceasset_typeschema_Revision_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_revisionsequenceasset_typeschema_Revision_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The created element contains the date and time that the parent element was created and is
//	represented in an ISO 8601 format.  The created element may appear zero or one time.
type XsdGoPkgHasElem_createdsequenceasset_typeschema_Created_XsdtDateTime_ struct {
	//	The created element contains the date and time that the parent element was created and is
	//	represented in an ISO 8601 format.  The created element may appear zero or one time.
	Created xsdt.DateTime `xml:"http://www.collada.org/2008/03/COLLADASchema created"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_createdsequenceasset_typeschema_Created_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_createdsequenceasset_typeschema_Created_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_createdsequenceasset_typeschema_Created_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElem_createdsequenceasset_typeschema_Created_XsdtDateTime_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_createdsequenceasset_typeschema_Created_XsdtDateTime_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The keywords element contains a list of words used as search criteria for the parent element.
//	There may be only one keywords element.
type XsdGoPkgHasElem_keywordssequenceasset_typeschema_Keywords_XsdtToken_ struct {
	//	The keywords element contains a list of words used as search criteria for the parent element.
	//	There may be only one keywords element.
	Keywords xsdt.Token `xml:"http://www.collada.org/2008/03/COLLADASchema keywords"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_keywordssequenceasset_typeschema_Keywords_XsdtToken_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_keywordssequenceasset_typeschema_Keywords_XsdtToken_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_keywordssequenceasset_typeschema_Keywords_XsdtToken_ instance.
func (me *XsdGoPkgHasElem_keywordssequenceasset_typeschema_Keywords_XsdtToken_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_keywordssequenceasset_typeschema_Keywords_XsdtToken_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The up_axis element contains descriptive information about coordinate system of the geometric
//	data. All coordinates are right-handed by definition. This element specifies which axis is
//	considered up. The default is the Y-axis. The up_axis element may appear zero or one time.
//	An enumerated type specifying the acceptable up-axis values.
type TupAxisEnum xsdt.String

//	This convenience method just performs a simple type conversion to TupAxisEnum's alias type xsdt.String.
func (me TupAxisEnum) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TupAxisEnum is just a simple String type, this merely returns the current string value.
func (me TupAxisEnum) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TupAxisEnum is "Y_UP".
func (me TupAxisEnum) IsYUp() bool { return me == "Y_UP" }

//	Returns true if the value of this enumerated TupAxisEnum is "X_UP".
func (me TupAxisEnum) IsXUp() bool { return me == "X_UP" }

//	Returns true if the value of this enumerated TupAxisEnum is "Z_UP".
func (me TupAxisEnum) IsZUp() bool { return me == "Z_UP" }

//	Since TupAxisEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TupAxisEnum) Set(s string) { (*xsdt.String)(me).Set(s) }

type XsdGoPkgHasElem_up_axissequenceasset_typeschema_UpAxis_TupAxisEnum_YUp struct {
	//	The up_axis element contains descriptive information about coordinate system of the geometric
	//	data. All coordinates are right-handed by definition. This element specifies which axis is
	//	considered up. The default is the Y-axis. The up_axis element may appear zero or one time.
	UpAxis TupAxisEnum `xml:"http://www.collada.org/2008/03/COLLADASchema up_axis"`
}

//	Returns the default value for UpAxis -- "Y_UP"
func (me XsdGoPkgHasElem_up_axissequenceasset_typeschema_UpAxis_TupAxisEnum_YUp) UpAxisDefault() TupAxisEnum {
	return TupAxisEnum("Y_UP")
}

//	If the WalkHandlers.XsdGoPkgHasElem_up_axissequenceasset_typeschema_UpAxis_TupAxisEnum_YUp function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_up_axissequenceasset_typeschema_UpAxis_TupAxisEnum_YUp instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_up_axissequenceasset_typeschema_UpAxis_TupAxisEnum_YUp instance.
func (me *XsdGoPkgHasElem_up_axissequenceasset_typeschema_UpAxis_TupAxisEnum_YUp) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_up_axissequenceasset_typeschema_UpAxis_TupAxisEnum_YUp; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TassetType struct {
	//	The revision element contains the revision information for the parent element. The revision
	//	element may appear zero or one time.
	XsdGoPkgHasElem_revisionsequenceasset_typeschema_Revision_XsdtString_

	//	The created element contains the date and time that the parent element was created and is
	//	represented in an ISO 8601 format.  The created element may appear zero or one time.
	XsdGoPkgHasElem_createdsequenceasset_typeschema_Created_XsdtDateTime_

	//	The keywords element contains a list of words used as search criteria for the parent element.
	//	There may be only one keywords element.
	XsdGoPkgHasElem_keywordssequenceasset_typeschema_Keywords_XsdtToken_

	//	The up_axis element contains descriptive information about coordinate system of the geometric
	//	data. All coordinates are right-handed by definition. This element specifies which axis is
	//	considered up. The default is the Y-axis. The up_axis element may appear zero or one time.
	XsdGoPkgHasElem_up_axissequenceasset_typeschema_UpAxis_TupAxisEnum_YUp

	//	The unit element contains descriptive information about unit of measure. It has attributes for
	//	the name of the unit and the measurement with respect to the meter. The unit element may appear
	//	zero or one time.
	XsdGoPkgHasElem_unitsequenceasset_typeschema_Unit_TxsdAssetTypeSequenceUnit_

	//	The modified element contains the date and time that the parent element was last modified and
	//	represented in an ISO 8601 format. The modified element may appear zero or one time.
	XsdGoPkgHasElem_modifiedsequenceasset_typeschema_Modified_XsdtDateTime_

	XsdGoPkgHasElems_extrasequenceasset_typeschema_Extra_TextraType_

	//	The title element contains the title information for the parent element. The title element may
	//	appear zero or one time.
	XsdGoPkgHasElem_titlesequenceasset_typeschema_Title_XsdtString_

	XsdGoPkgHasElem_coveragesequenceasset_typeschema_Coverage_TxsdAssetTypeSequenceCoverage_

	//	The subject element contains a description of the topical subject of the parent element. The
	//	subject element may appear zero or one time.
	XsdGoPkgHasElem_subjectsequenceasset_typeschema_Subject_XsdtString_

	//	The contributor element defines authoring information for asset management
	XsdGoPkgHasElems_contributorsequenceasset_typeschema_Contributor_TxsdAssetTypeSequenceContributor_
}

//	If the WalkHandlers.TassetType function is not nil (ie. was set by outside code), calls it with this TassetType instance as the single argument. Then calls the Walk() method on 11/11 embed(s) and 0/0 field(s) belonging to this TassetType instance.
func (me *TassetType) Walk() (err error) {
	if fn := WalkHandlers.TassetType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_modifiedsequenceasset_typeschema_Modified_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceasset_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_titlesequenceasset_typeschema_Title_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_coveragesequenceasset_typeschema_Coverage_TxsdAssetTypeSequenceCoverage_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_subjectsequenceasset_typeschema_Subject_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_contributorsequenceasset_typeschema_Contributor_TxsdAssetTypeSequenceContributor_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_revisionsequenceasset_typeschema_Revision_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_createdsequenceasset_typeschema_Created_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_keywordssequenceasset_typeschema_Keywords_XsdtToken_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_up_axissequenceasset_typeschema_UpAxis_TupAxisEnum_YUp.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_unitsequenceasset_typeschema_Unit_TxsdAssetTypeSequenceUnit_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_ struct {
	//	The extra element may contain an asset element.
	Asset *TassetType `xml:"http://www.collada.org/2008/03/COLLADASchema asset"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_ instance.
func (me *XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The type attribute indicates the type of the value data. This text string must be understood
//	by the application. Required attribute.
type XsdGoPkgHasAttr_Type_XsdtNmtoken_ struct {
	//	The type attribute indicates the type of the value data. This text string must be understood
	//	by the application. Required attribute.
	Type xsdt.Nmtoken `xml:"http://www.collada.org/2008/03/COLLADASchema type,attr"`
}

type TextraType struct {
	//	The type attribute indicates the type of the value data. This text string must be understood by
	//	the application. Optional attribute.
	XsdGoPkgHasAttr_Type_XsdtNmtoken_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	This element must contain at least one non-common profile technique.
	XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_

	//	The extra element may contain an asset element.
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	//	The id attribute is a text string containing the unique identifier of this element. This value
	//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_
}

//	If the WalkHandlers.TextraType function is not nil (ie. was set by outside code), calls it with this TextraType instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TextraType instance.
func (me *TextraType) Walk() (err error) {
	if fn := WalkHandlers.TextraType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_ struct {
	//	The extra element may appear any number of times.
	Extras []*TextraType `xml:"http://www.collada.org/2008/03/COLLADASchema extra"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_ instance.
func (me *XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Extras {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The animation element may contain any number of source elements.
//	The source element declares a data repository that provides values according to the semantics of an
//	input element that refers to it.
//	The source element may contain a
//	bool_array.
//	The bool_array element declares the storage for a homogenous array of boolean values.
//	The count attribute indicates the number of values in the array. Required attribute.
type TuintType xsdt.UnsignedLong

//	Returns a string representation of this TuintType's current non-string scalar value.
func (me TuintType) String() string { return xsdt.UnsignedLong(me).String() }

//	This convenience method just performs a simple type conversion to TuintType's alias type xsdt.UnsignedLong.
func (me TuintType) ToXsdtUnsignedLong() xsdt.UnsignedLong { return xsdt.UnsignedLong(me) }

//	Since TuintType is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TuintType) Set(s string) { (*xsdt.UnsignedLong)(me).Set(s) }

type XsdGoPkgHasAttr_Count_TuintType_ struct {
	//	The count attribute indicates the number of values in the array. Required attribute.
	Count TuintType `xml:"http://www.collada.org/2008/03/COLLADASchema count,attr"`
}

type TlistOfBoolsType xsdt.String

//	This convenience method just performs a simple type conversion to TlistOfBoolsType's alias type xsdt.String.
func (me TlistOfBoolsType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TlistOfBoolsType declares a String containing a whitespace-separated list of xsdt.Boolean values. This Values() method creates and returns a slice of all elements in that list.
func (me TlistOfBoolsType) Values() (list []xsdt.Boolean) {
	svals := xsdt.ListValues(string(me))
	list = make([]xsdt.Boolean, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	Since TlistOfBoolsType is just a simple String type, this merely returns the current string value.
func (me TlistOfBoolsType) String() string { return xsdt.String(me).String() }

//	Since TlistOfBoolsType is just a simple String type, this merely sets the current value from the specified string.
func (me *TlistOfBoolsType) Set(s string) { (*xsdt.String)(me).Set(s) }

type TboolArrayType struct {
	XsdGoPkgValue TlistOfBoolsType `xml:",chardata"`

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The count attribute indicates the number of values in the array. Required attribute.
	XsdGoPkgHasAttr_Count_TuintType_
}

//	Returns the value of its XsdGoPkgValue field as a xsdt.String (which TlistOfBoolsType is just aliasing).
func (me *TboolArrayType) ToXsdtString() xsdt.String { return me.XsdGoPkgValue.ToXsdtString() }

//	If the WalkHandlers.TboolArrayType function is not nil (ie. was set by outside code), calls it with this TboolArrayType instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/1 field(s) belonging to this TboolArrayType instance.
func (me *TboolArrayType) Walk() (err error) {
	if fn := WalkHandlers.TboolArrayType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TboolArrayType) ToTlistOfBoolsType() TlistOfBoolsType { return me.XsdGoPkgValue }

type XsdGoPkgHasElem_bool_arraychoicesequencesource_typeschema_BoolArray_TboolArrayType_ struct {
	//	The source element may contain a
	//	bool_array.
	BoolArray *TboolArrayType `xml:"http://www.collada.org/2008/03/COLLADASchema bool_array"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool_arraychoicesequencesource_typeschema_BoolArray_TboolArrayType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool_arraychoicesequencesource_typeschema_BoolArray_TboolArrayType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_bool_arraychoicesequencesource_typeschema_BoolArray_TboolArrayType_ instance.
func (me *XsdGoPkgHasElem_bool_arraychoicesequencesource_typeschema_BoolArray_TboolArrayType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool_arraychoicesequencesource_typeschema_BoolArray_TboolArrayType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BoolArray.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The source element may contain a token_array.
//	The token_array_type element declares the storage for a homogenous array of xs:token string values.
type TlistOfTokensType xsdt.String

//	Since TlistOfTokensType is just a simple String type, this merely returns the current string value.
func (me TlistOfTokensType) String() string { return xsdt.String(me).String() }

//	TlistOfTokensType declares a String containing a whitespace-separated list of xsdt.Token values. This Values() method creates and returns a slice of all elements in that list.
func (me TlistOfTokensType) Values() (list []xsdt.Token) {
	svals := xsdt.ListValues(string(me))
	list = make([]xsdt.Token, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	This convenience method just performs a simple type conversion to TlistOfTokensType's alias type xsdt.String.
func (me TlistOfTokensType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TlistOfTokensType is just a simple String type, this merely sets the current value from the specified string.
func (me *TlistOfTokensType) Set(s string) { (*xsdt.String)(me).Set(s) }

type TtokenArrayType struct {
	XsdGoPkgValue TlistOfTokensType `xml:",chardata"`

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The count attribute indicates the number of values in the array. Required attribute.
	XsdGoPkgHasAttr_Count_TuintType_
}

//	If the WalkHandlers.TtokenArrayType function is not nil (ie. was set by outside code), calls it with this TtokenArrayType instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/1 field(s) belonging to this TtokenArrayType instance.
func (me *TtokenArrayType) Walk() (err error) {
	if fn := WalkHandlers.TtokenArrayType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the value of its XsdGoPkgValue field as a xsdt.String (which TlistOfTokensType is just aliasing).
func (me *TtokenArrayType) ToXsdtString() xsdt.String { return me.XsdGoPkgValue.ToXsdtString() }

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TtokenArrayType) ToTlistOfTokensType() TlistOfTokensType { return me.XsdGoPkgValue }

type XsdGoPkgHasElem_token_arraychoicesequencesource_typeschema_TokenArray_TtokenArrayType_ struct {
	//	The source element may contain a token_array.
	TokenArray *TtokenArrayType `xml:"http://www.collada.org/2008/03/COLLADASchema token_array"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_token_arraychoicesequencesource_typeschema_TokenArray_TtokenArrayType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_token_arraychoicesequencesource_typeschema_TokenArray_TtokenArrayType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_token_arraychoicesequencesource_typeschema_TokenArray_TtokenArrayType_ instance.
func (me *XsdGoPkgHasElem_token_arraychoicesequencesource_typeschema_TokenArray_TtokenArrayType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_token_arraychoicesequencesource_typeschema_TokenArray_TtokenArrayType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TokenArray.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The technique common specifies the common method for accessing this source element's data.
//	The source's technique_common must have one and only one accessor.
//	The accessor element declares an access pattern to one of the array elements: float_array,
//	int_array, Name_array, bool_array, token_array, and IDREF_array. The accessor element describes access
//	to arrays that are organized in either an interleaved or non-interleaved manner, depending
//	on the offset and stride attributes.
//	The stride attribute indicates number of values to be considered a unit during each access to
//	the array. The default value is 1, indicating that a single value is accessed. Optional attribute.
type XsdGoPkgHasAttr_Stride_TuintType_1 struct {
	//	The stride attribute indicates number of values to be considered a unit during each access to
	//	the array. The default value is 1, indicating that a single value is accessed. Optional attribute.
	Stride TuintType `xml:"http://www.collada.org/2008/03/COLLADASchema stride,attr"`
}

//	Returns the default value for Stride -- 1
func (me XsdGoPkgHasAttr_Stride_TuintType_1) StrideDefault() TuintType { return TuintType(1) }

//	The accessor element may have any number of param elements.
//	The param element declares parametric information regarding its parent element.
//	The sid attribute is a text string value containing the sub-identifier of this element. This
//	value must be unique within the scope of the parent element. Optional attribute.
type TsidType xsdt.NCName

//	Since TsidType is just a simple String type, this merely returns the current string value.
func (me TsidType) String() string { return xsdt.NCName(me).String() }

//	This convenience method just performs a simple type conversion to TsidType's alias type xsdt.NCName.
func (me TsidType) ToXsdtNCName() xsdt.NCName { return xsdt.NCName(me) }

//	Since TsidType is just a simple String type, this merely sets the current value from the specified string.
func (me *TsidType) Set(s string) { (*xsdt.NCName)(me).Set(s) }

type XsdGoPkgHasAttr_Sid_TsidType_ struct {
	//	The sid attribute is a text string value containing the sub-identifier of this element. This
	//	value must be unique within the scope of the parent element. Optional attribute.
	Sid TsidType `xml:"http://www.collada.org/2008/03/COLLADASchema sid,attr"`
}

type TparamType struct {
	XsdGoPkgValue xsdt.String `xml:",chardata"`

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_TsidType_

	//	The type attribute indicates the type of the value data. This text string must be understood
	//	by the application. Required attribute.
	XsdGoPkgHasAttr_Type_XsdtNmtoken_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The semantic attribute is the user-defined meaning of the parameter. Optional attribute.
	XsdGoPkgHasAttr_Semantic_XsdtNmtoken_
}

//	If the WalkHandlers.TparamType function is not nil (ie. was set by outside code), calls it with this TparamType instance as the single argument. Then calls the Walk() method on 0/4 embed(s) and 0/1 field(s) belonging to this TparamType instance.
func (me *TparamType) Walk() (err error) {
	if fn := WalkHandlers.TparamType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TparamType) ToXsdtString() xsdt.String { return me.XsdGoPkgValue }

type XsdGoPkgHasElems_paramsequenceaccessor_typeschema_Param_TparamType_ struct {
	//	The accessor element may have any number of param elements.
	Params []*TparamType `xml:"http://www.collada.org/2008/03/COLLADASchema param"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_paramsequenceaccessor_typeschema_Param_TparamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_paramsequenceaccessor_typeschema_Param_TparamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_paramsequenceaccessor_typeschema_Param_TparamType_ instance.
func (me *XsdGoPkgHasElems_paramsequenceaccessor_typeschema_Param_TparamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_paramsequenceaccessor_typeschema_Param_TparamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Params {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The source attribute indicates the location of the data source. Required attribute.
type XsdGoPkgHasAttr_Source_XsdtAnyURI_ struct {
	//	The source attribute indicates the location of the data source. Required attribute.
	Source xsdt.AnyURI `xml:"http://www.collada.org/2008/03/COLLADASchema source,attr"`
}

//	The offset attribute indicates the index of the first value to be read from the array.
//	The default value is 0. Optional attribute.
type XsdGoPkgHasAttr_Offset_TuintType_0 struct {
	//	The offset attribute indicates the index of the first value to be read from the array.
	//	The default value is 0. Optional attribute.
	Offset TuintType `xml:"http://www.collada.org/2008/03/COLLADASchema offset,attr"`
}

//	Returns the default value for Offset -- 0
func (me XsdGoPkgHasAttr_Offset_TuintType_0) OffsetDefault() TuintType { return TuintType(0) }

type TaccessorType struct {
	//	The offset attribute indicates the index of the first value to be read from the array.
	//	The default value is 0. Optional attribute.
	XsdGoPkgHasAttr_Offset_TuintType_0

	//	The stride attribute indicates number of values to be considered a unit during each access to
	//	the array. The default value is 1, indicating that a single value is accessed. Optional attribute.
	XsdGoPkgHasAttr_Stride_TuintType_1

	//	The accessor element may have any number of param elements.
	XsdGoPkgHasElems_paramsequenceaccessor_typeschema_Param_TparamType_

	//	The source attribute indicates the location of the array to access using a URL expression. Required attribute.
	XsdGoPkgHasAttr_Source_XsdtAnyURI_

	//	The count attribute indicates the number of times the array is accessed. Required attribute.
	XsdGoPkgHasAttr_Count_TuintType_
}

//	If the WalkHandlers.TaccessorType function is not nil (ie. was set by outside code), calls it with this TaccessorType instance as the single argument. Then calls the Walk() method on 1/5 embed(s) and 0/0 field(s) belonging to this TaccessorType instance.
func (me *TaccessorType) Walk() (err error) {
	if fn := WalkHandlers.TaccessorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_paramsequenceaccessor_typeschema_Param_TparamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_accessorsequencetechnique_commonsequencesource_typeschema_Accessor_TaccessorType_ struct {
	//	The source's technique_common must have one and only one accessor.
	Accessor *TaccessorType `xml:"http://www.collada.org/2008/03/COLLADASchema accessor"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_accessorsequencetechnique_commonsequencesource_typeschema_Accessor_TaccessorType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_accessorsequencetechnique_commonsequencesource_typeschema_Accessor_TaccessorType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_accessorsequencetechnique_commonsequencesource_typeschema_Accessor_TaccessorType_ instance.
func (me *XsdGoPkgHasElem_accessorsequencetechnique_commonsequencesource_typeschema_Accessor_TaccessorType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_accessorsequencetechnique_commonsequencesource_typeschema_Accessor_TaccessorType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Accessor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSourceTypeSequenceTechniqueCommon struct {
	//	The source's technique_common must have one and only one accessor.
	XsdGoPkgHasElem_accessorsequencetechnique_commonsequencesource_typeschema_Accessor_TaccessorType_
}

//	If the WalkHandlers.TxsdSourceTypeSequenceTechniqueCommon function is not nil (ie. was set by outside code), calls it with this TxsdSourceTypeSequenceTechniqueCommon instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdSourceTypeSequenceTechniqueCommon instance.
func (me *TxsdSourceTypeSequenceTechniqueCommon) Walk() (err error) {
	if fn := WalkHandlers.TxsdSourceTypeSequenceTechniqueCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_accessorsequencetechnique_commonsequencesource_typeschema_Accessor_TaccessorType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_technique_commonsequencesource_typeschema_TechniqueCommon_TxsdSourceTypeSequenceTechniqueCommon_ struct {
	//	The technique common specifies the common method for accessing this source element's data.
	TechniqueCommon *TxsdSourceTypeSequenceTechniqueCommon `xml:"http://www.collada.org/2008/03/COLLADASchema technique_common"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_technique_commonsequencesource_typeschema_TechniqueCommon_TxsdSourceTypeSequenceTechniqueCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_technique_commonsequencesource_typeschema_TechniqueCommon_TxsdSourceTypeSequenceTechniqueCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_technique_commonsequencesource_typeschema_TechniqueCommon_TxsdSourceTypeSequenceTechniqueCommon_ instance.
func (me *XsdGoPkgHasElem_technique_commonsequencesource_typeschema_TechniqueCommon_TxsdSourceTypeSequenceTechniqueCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_technique_commonsequencesource_typeschema_TechniqueCommon_TxsdSourceTypeSequenceTechniqueCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TechniqueCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The source element may contain an
//	IDREF_array.
//	The IDREF_array element declares the storage for a homogenous array of ID reference values.
type TidrefArrayType struct {
	XsdGoPkgValue xsdt.Idrefs `xml:",chardata"`

	//	The count attribute indicates the number of values in the array. Required attribute.
	XsdGoPkgHasAttr_Count_TuintType_

	//	The id attribute is a text string containing the unique identifier of this element. This value
	//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TidrefArrayType) ToXsdtIdrefs() xsdt.Idrefs { return me.XsdGoPkgValue }

//	If the WalkHandlers.TidrefArrayType function is not nil (ie. was set by outside code), calls it with this TidrefArrayType instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/1 field(s) belonging to this TidrefArrayType instance.
func (me *TidrefArrayType) Walk() (err error) {
	if fn := WalkHandlers.TidrefArrayType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IDREF_arraychoicesequencesource_typeschema_IdrefArray_TidrefArrayType_ struct {
	//	The source element may contain an
	//	IDREF_array.
	IdrefArray *TidrefArrayType `xml:"http://www.collada.org/2008/03/COLLADASchema IDREF_array"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IDREF_arraychoicesequencesource_typeschema_IdrefArray_TidrefArrayType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IDREF_arraychoicesequencesource_typeschema_IdrefArray_TidrefArrayType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_IDREF_arraychoicesequencesource_typeschema_IdrefArray_TidrefArrayType_ instance.
func (me *XsdGoPkgHasElem_IDREF_arraychoicesequencesource_typeschema_IdrefArray_TidrefArrayType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IDREF_arraychoicesequencesource_typeschema_IdrefArray_TidrefArrayType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IdrefArray.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The source element may contain an
//	int_array.
//	The int_array element declares the storage for a homogenous array of integer values.
//	The maxInclusive attribute indicates the largest integer value that can be contained in
//	the array. The default value is 2147483647. Optional attribute.
type XsdGoPkgHasAttr_MaxInclusive_XsdtInteger_2147483647 struct {
	//	The maxInclusive attribute indicates the largest integer value that can be contained in
	//	the array. The default value is 2147483647. Optional attribute.
	MaxInclusive xsdt.Integer `xml:"http://www.collada.org/2008/03/COLLADASchema maxInclusive,attr"`
}

//	Returns the default value for MaxInclusive -- 2147483647
func (me XsdGoPkgHasAttr_MaxInclusive_XsdtInteger_2147483647) MaxInclusiveDefault() xsdt.Integer {
	return xsdt.Integer(2147483647)
}

//	The minInclusive attribute indicates the smallest integer value that can be contained in
//	the array. The default value is -2147483648. Optional attribute.
type XsdGoPkgHasAttr_MinInclusive_XsdtInteger_2147483648 struct {
	//	The minInclusive attribute indicates the smallest integer value that can be contained in
	//	the array. The default value is -2147483648. Optional attribute.
	MinInclusive xsdt.Integer `xml:"http://www.collada.org/2008/03/COLLADASchema minInclusive,attr"`
}

//	Returns the default value for MinInclusive -- -2147483648
func (me XsdGoPkgHasAttr_MinInclusive_XsdtInteger_2147483648) MinInclusiveDefault() xsdt.Integer {
	return xsdt.Integer(-2147483648)
}

type TintType xsdt.Long

//	Returns a string representation of this TintType's current non-string scalar value.
func (me TintType) String() string { return xsdt.Long(me).String() }

//	This convenience method just performs a simple type conversion to TintType's alias type xsdt.Long.
func (me TintType) ToXsdtLong() xsdt.Long { return xsdt.Long(me) }

//	Since TintType is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TintType) Set(s string) { (*xsdt.Long)(me).Set(s) }

type TlistOfIntsType xsdt.String

//	Since TlistOfIntsType is just a simple String type, this merely sets the current value from the specified string.
func (me *TlistOfIntsType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TlistOfIntsType is just a simple String type, this merely returns the current string value.
func (me TlistOfIntsType) String() string { return xsdt.String(me).String() }

//	TlistOfIntsType declares a String containing a whitespace-separated list of TintType values. This Values() method creates and returns a slice of all elements in that list, typed as xsdt.Long.
func (me TlistOfIntsType) ValuesXsdtLong() (list []xsdt.Long) {
	svals := xsdt.ListValues(string(me))
	list = make([]xsdt.Long, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	This convenience method just performs a simple type conversion to TlistOfIntsType's alias type xsdt.String.
func (me TlistOfIntsType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TlistOfIntsType declares a String containing a whitespace-separated list of TintType values. This Values() method creates and returns a slice of all elements in that list.
func (me TlistOfIntsType) Values() (list []TintType) {
	svals := xsdt.ListValues(string(me))
	list = make([]TintType, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

type TintArrayType struct {
	XsdGoPkgValue TlistOfIntsType `xml:",chardata"`

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The count attribute indicates the number of values in the array. Required attribute.
	XsdGoPkgHasAttr_Count_TuintType_

	//	The maxInclusive attribute indicates the largest integer value that can be contained in
	//	the array. The default value is 2147483647. Optional attribute.
	XsdGoPkgHasAttr_MaxInclusive_XsdtInteger_2147483647

	//	The minInclusive attribute indicates the smallest integer value that can be contained in
	//	the array. The default value is -2147483648. Optional attribute.
	XsdGoPkgHasAttr_MinInclusive_XsdtInteger_2147483648
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TintArrayType) ToTlistOfIntsType() TlistOfIntsType { return me.XsdGoPkgValue }

//	If the WalkHandlers.TintArrayType function is not nil (ie. was set by outside code), calls it with this TintArrayType instance as the single argument. Then calls the Walk() method on 0/5 embed(s) and 0/1 field(s) belonging to this TintArrayType instance.
func (me *TintArrayType) Walk() (err error) {
	if fn := WalkHandlers.TintArrayType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the value of its XsdGoPkgValue field as a xsdt.String (which TlistOfIntsType is just aliasing).
func (me *TintArrayType) ToXsdtString() xsdt.String { return me.XsdGoPkgValue.ToXsdtString() }

type XsdGoPkgHasElem_int_arraychoicesequencesource_typeschema_IntArray_TintArrayType_ struct {
	//	The source element may contain an
	//	int_array.
	IntArray *TintArrayType `xml:"http://www.collada.org/2008/03/COLLADASchema int_array"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int_arraychoicesequencesource_typeschema_IntArray_TintArrayType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int_arraychoicesequencesource_typeschema_IntArray_TintArrayType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_int_arraychoicesequencesource_typeschema_IntArray_TintArrayType_ instance.
func (me *XsdGoPkgHasElem_int_arraychoicesequencesource_typeschema_IntArray_TintArrayType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int_arraychoicesequencesource_typeschema_IntArray_TintArrayType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IntArray.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The source element may contain a
//	Name_array.
//	The Name_array element declares the storage for a homogenous array of Name string values.
type TlistOfNamesType xsdt.String

//	TlistOfNamesType declares a String containing a whitespace-separated list of xsdt.Name values. This Values() method creates and returns a slice of all elements in that list.
func (me TlistOfNamesType) Values() (list []xsdt.Name) {
	svals := xsdt.ListValues(string(me))
	list = make([]xsdt.Name, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	Since TlistOfNamesType is just a simple String type, this merely returns the current string value.
func (me TlistOfNamesType) String() string { return xsdt.String(me).String() }

//	Since TlistOfNamesType is just a simple String type, this merely sets the current value from the specified string.
func (me *TlistOfNamesType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TlistOfNamesType's alias type xsdt.String.
func (me TlistOfNamesType) ToXsdtString() xsdt.String { return xsdt.String(me) }

type TnameArrayType struct {
	XsdGoPkgValue TlistOfNamesType `xml:",chardata"`

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The count attribute indicates the number of values in the array. Required attribute.
	XsdGoPkgHasAttr_Count_TuintType_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TnameArrayType) ToTlistOfNamesType() TlistOfNamesType { return me.XsdGoPkgValue }

//	If the WalkHandlers.TnameArrayType function is not nil (ie. was set by outside code), calls it with this TnameArrayType instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/1 field(s) belonging to this TnameArrayType instance.
func (me *TnameArrayType) Walk() (err error) {
	if fn := WalkHandlers.TnameArrayType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the value of its XsdGoPkgValue field as a xsdt.String (which TlistOfNamesType is just aliasing).
func (me *TnameArrayType) ToXsdtString() xsdt.String { return me.XsdGoPkgValue.ToXsdtString() }

type XsdGoPkgHasElem_Name_arraychoicesequencesource_typeschema_NameArray_TnameArrayType_ struct {
	//	The source element may contain a
	//	Name_array.
	NameArray *TnameArrayType `xml:"http://www.collada.org/2008/03/COLLADASchema Name_array"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Name_arraychoicesequencesource_typeschema_NameArray_TnameArrayType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Name_arraychoicesequencesource_typeschema_NameArray_TnameArrayType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Name_arraychoicesequencesource_typeschema_NameArray_TnameArrayType_ instance.
func (me *XsdGoPkgHasElem_Name_arraychoicesequencesource_typeschema_NameArray_TnameArrayType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Name_arraychoicesequencesource_typeschema_NameArray_TnameArrayType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.NameArray.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The SIDREF_array element declares the storage for a homogenous array of SID reference values.
type TsidrefType xsdt.String

//	This convenience method just performs a simple type conversion to TsidrefType's alias type xsdt.String.
func (me TsidrefType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TsidrefType is just a simple String type, this merely returns the current string value.
func (me TsidrefType) String() string { return xsdt.String(me).String() }

//	Since TsidrefType is just a simple String type, this merely sets the current value from the specified string.
func (me *TsidrefType) Set(s string) { (*xsdt.String)(me).Set(s) }

type TlistOfSidrefsType xsdt.String

//	Since TlistOfSidrefsType is just a simple String type, this merely returns the current string value.
func (me TlistOfSidrefsType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TlistOfSidrefsType's alias type xsdt.String.
func (me TlistOfSidrefsType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TlistOfSidrefsType declares a String containing a whitespace-separated list of TsidrefType values. This Values() method creates and returns a slice of all elements in that list, typed as xsdt.String.
func (me TlistOfSidrefsType) ValuesXsdtString() (list []xsdt.String) {
	svals := xsdt.ListValues(string(me))
	list = make([]xsdt.String, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	TlistOfSidrefsType declares a String containing a whitespace-separated list of TsidrefType values. This Values() method creates and returns a slice of all elements in that list.
func (me TlistOfSidrefsType) Values() (list []TsidrefType) {
	svals := xsdt.ListValues(string(me))
	list = make([]TsidrefType, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	Since TlistOfSidrefsType is just a simple String type, this merely sets the current value from the specified string.
func (me *TlistOfSidrefsType) Set(s string) { (*xsdt.String)(me).Set(s) }

type TsidrefArrayType struct {
	XsdGoPkgValue TlistOfSidrefsType `xml:",chardata"`

	//	The name attribute is the text string
	//	name of this element. Optional
	//	attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The id attribute is a text string
	//	containing the unique identifier of this
	//	element. This value must be unique
	//	within the instance document. Optional
	//	attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The count attribute indicates the number
	//	of values in the array. Required
	//	attribute.
	XsdGoPkgHasAttr_Count_TuintType_
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TsidrefArrayType) ToTlistOfSidrefsType() TlistOfSidrefsType { return me.XsdGoPkgValue }

//	If the WalkHandlers.TsidrefArrayType function is not nil (ie. was set by outside code), calls it with this TsidrefArrayType instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/1 field(s) belonging to this TsidrefArrayType instance.
func (me *TsidrefArrayType) Walk() (err error) {
	if fn := WalkHandlers.TsidrefArrayType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the value of its XsdGoPkgValue field as a xsdt.String (which TlistOfSidrefsType is just aliasing).
func (me *TsidrefArrayType) ToXsdtString() xsdt.String { return me.XsdGoPkgValue.ToXsdtString() }

type XsdGoPkgHasElem_SIDREF_arraychoicesequencesource_typeschema_SidrefArray_TsidrefArrayType_ struct {
	SidrefArray *TsidrefArrayType `xml:"http://www.collada.org/2008/03/COLLADASchema SIDREF_array"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SIDREF_arraychoicesequencesource_typeschema_SidrefArray_TsidrefArrayType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SIDREF_arraychoicesequencesource_typeschema_SidrefArray_TsidrefArrayType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SIDREF_arraychoicesequencesource_typeschema_SidrefArray_TsidrefArrayType_ instance.
func (me *XsdGoPkgHasElem_SIDREF_arraychoicesequencesource_typeschema_SidrefArray_TsidrefArrayType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SIDREF_arraychoicesequencesource_typeschema_SidrefArray_TsidrefArrayType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SidrefArray.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The source element may contain a
//	float_array.
//	The float_array element declares the storage for a homogenous array of floating point values.
//	The digits attribute indicates the number of significant decimal digits of the float values that
//	can be contained in the array. The default value is 6. Optional attribute.
type TdigitsType xsdt.UnsignedByte

//	This convenience method just performs a simple type conversion to TdigitsType's alias type xsdt.UnsignedByte.
func (me TdigitsType) ToXsdtUnsignedByte() xsdt.UnsignedByte { return xsdt.UnsignedByte(me) }

//	Since TdigitsType is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TdigitsType) Set(s string) { (*xsdt.UnsignedByte)(me).Set(s) }

//	Returns a string representation of this TdigitsType's current non-string scalar value.
func (me TdigitsType) String() string { return xsdt.UnsignedByte(me).String() }

type XsdGoPkgHasAttr_Digits_TdigitsType_6 struct {
	//	The digits attribute indicates the number of significant decimal digits of the float values that
	//	can be contained in the array. The default value is 6. Optional attribute.
	Digits TdigitsType `xml:"http://www.collada.org/2008/03/COLLADASchema digits,attr"`
}

//	Returns the default value for Digits -- 6
func (me XsdGoPkgHasAttr_Digits_TdigitsType_6) DigitsDefault() TdigitsType { return TdigitsType(6) }

//	The magnitude attribute indicates the largest exponent of the float values that can be contained
//	in the array. The default value is 38. Optional attribute.
type TmagnitudeType xsdt.Short

//	Returns a string representation of this TmagnitudeType's current non-string scalar value.
func (me TmagnitudeType) String() string { return xsdt.Short(me).String() }

//	Since TmagnitudeType is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TmagnitudeType) Set(s string) { (*xsdt.Short)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TmagnitudeType's alias type xsdt.Short.
func (me TmagnitudeType) ToXsdtShort() xsdt.Short { return xsdt.Short(me) }

type XsdGoPkgHasAttr_Magnitude_TmagnitudeType_38 struct {
	//	The magnitude attribute indicates the largest exponent of the float values that can be contained
	//	in the array. The default value is 38. Optional attribute.
	Magnitude TmagnitudeType `xml:"http://www.collada.org/2008/03/COLLADASchema magnitude,attr"`
}

//	Returns the default value for Magnitude -- 38
func (me XsdGoPkgHasAttr_Magnitude_TmagnitudeType_38) MagnitudeDefault() TmagnitudeType {
	return TmagnitudeType(38)
}

type TlistOfFloatsType xsdt.String

//	Since TlistOfFloatsType is just a simple String type, this merely sets the current value from the specified string.
func (me *TlistOfFloatsType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	TlistOfFloatsType declares a String containing a whitespace-separated list of TfloatType values. This Values() method creates and returns a slice of all elements in that list.
func (me TlistOfFloatsType) Values() (list []TfloatType) {
	svals := xsdt.ListValues(string(me))
	list = make([]TfloatType, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	TlistOfFloatsType declares a String containing a whitespace-separated list of TfloatType values. This Values() method creates and returns a slice of all elements in that list, typed as xsdt.Double.
func (me TlistOfFloatsType) ValuesXsdtDouble() (list []xsdt.Double) {
	svals := xsdt.ListValues(string(me))
	list = make([]xsdt.Double, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	This convenience method just performs a simple type conversion to TlistOfFloatsType's alias type xsdt.String.
func (me TlistOfFloatsType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TlistOfFloatsType is just a simple String type, this merely returns the current string value.
func (me TlistOfFloatsType) String() string { return xsdt.String(me).String() }

type TfloatArrayType struct {
	XsdGoPkgValue TlistOfFloatsType `xml:",chardata"`

	//	The magnitude attribute indicates the largest exponent of the float values that can be contained
	//	in the array. The default value is 38. Optional attribute.
	XsdGoPkgHasAttr_Magnitude_TmagnitudeType_38

	//	The id attribute is a text string containing the unique identifier of this element. This value
	//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The count attribute indicates the number of values in the array. Required attribute.
	XsdGoPkgHasAttr_Count_TuintType_

	//	The digits attribute indicates the number of significant decimal digits of the float values that
	//	can be contained in the array. The default value is 6. Optional attribute.
	XsdGoPkgHasAttr_Digits_TdigitsType_6
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TfloatArrayType) ToTlistOfFloatsType() TlistOfFloatsType { return me.XsdGoPkgValue }

//	Returns the value of its XsdGoPkgValue field as a xsdt.String (which TlistOfFloatsType is just aliasing).
func (me *TfloatArrayType) ToXsdtString() xsdt.String { return me.XsdGoPkgValue.ToXsdtString() }

//	If the WalkHandlers.TfloatArrayType function is not nil (ie. was set by outside code), calls it with this TfloatArrayType instance as the single argument. Then calls the Walk() method on 0/5 embed(s) and 0/1 field(s) belonging to this TfloatArrayType instance.
func (me *TfloatArrayType) Walk() (err error) {
	if fn := WalkHandlers.TfloatArrayType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_float_arraychoicesequencesource_typeschema_FloatArray_TfloatArrayType_ struct {
	//	The source element may contain a
	//	float_array.
	FloatArray *TfloatArrayType `xml:"http://www.collada.org/2008/03/COLLADASchema float_array"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float_arraychoicesequencesource_typeschema_FloatArray_TfloatArrayType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float_arraychoicesequencesource_typeschema_FloatArray_TfloatArrayType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_float_arraychoicesequencesource_typeschema_FloatArray_TfloatArrayType_ instance.
func (me *XsdGoPkgHasElem_float_arraychoicesequencesource_typeschema_FloatArray_TfloatArrayType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float_arraychoicesequencesource_typeschema_FloatArray_TfloatArrayType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FloatArray.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TsourceType struct {
	//	The source element may contain a
	//	bool_array.
	XsdGoPkgHasElem_bool_arraychoicesequencesource_typeschema_BoolArray_TboolArrayType_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The source element may contain a token_array.
	XsdGoPkgHasElem_token_arraychoicesequencesource_typeschema_TokenArray_TtokenArrayType_

	//	The technique common specifies the common method for accessing this source element's data.
	XsdGoPkgHasElem_technique_commonsequencesource_typeschema_TechniqueCommon_TxsdSourceTypeSequenceTechniqueCommon_

	//	This element may contain any number of non-common profile techniques.
	XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_

	//	The source element may contain an
	//	IDREF_array.
	XsdGoPkgHasElem_IDREF_arraychoicesequencesource_typeschema_IdrefArray_TidrefArrayType_

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Required attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The source element may contain an
	//	int_array.
	XsdGoPkgHasElem_int_arraychoicesequencesource_typeschema_IntArray_TintArrayType_

	//	The source element may contain a
	//	Name_array.
	XsdGoPkgHasElem_Name_arraychoicesequencesource_typeschema_NameArray_TnameArrayType_

	XsdGoPkgHasElem_SIDREF_arraychoicesequencesource_typeschema_SidrefArray_TsidrefArrayType_

	//	The source element may contain a
	//	float_array.
	XsdGoPkgHasElem_float_arraychoicesequencesource_typeschema_FloatArray_TfloatArrayType_

	//	The source element may contain an asset element.
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_
}

//	If the WalkHandlers.TsourceType function is not nil (ie. was set by outside code), calls it with this TsourceType instance as the single argument. Then calls the Walk() method on 10/12 embed(s) and 0/0 field(s) belonging to this TsourceType instance.
func (me *TsourceType) Walk() (err error) {
	if fn := WalkHandlers.TsourceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Name_arraychoicesequencesource_typeschema_NameArray_TnameArrayType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SIDREF_arraychoicesequencesource_typeschema_SidrefArray_TsidrefArrayType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float_arraychoicesequencesource_typeschema_FloatArray_TfloatArrayType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool_arraychoicesequencesource_typeschema_BoolArray_TboolArrayType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_token_arraychoicesequencesource_typeschema_TokenArray_TtokenArrayType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_technique_commonsequencesource_typeschema_TechniqueCommon_TxsdSourceTypeSequenceTechniqueCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_IDREF_arraychoicesequencesource_typeschema_IdrefArray_TidrefArrayType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int_arraychoicesequencesource_typeschema_IntArray_TintArrayType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_sourcesequencechoicesequenceanimation_typeschema_Source_TsourceType_ struct {
	//	The animation element may contain any number of source elements.
	Sources []*TsourceType `xml:"http://www.collada.org/2008/03/COLLADASchema source"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_sourcesequencechoicesequenceanimation_typeschema_Source_TsourceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_sourcesequencechoicesequenceanimation_typeschema_Source_TsourceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_sourcesequencechoicesequenceanimation_typeschema_Source_TsourceType_ instance.
func (me *XsdGoPkgHasElems_sourcesequencechoicesequenceanimation_typeschema_Source_TsourceType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_sourcesequencechoicesequenceanimation_typeschema_Source_TsourceType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Sources {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The animation element may contain any number of channel elements.
//	The channel element declares an output channel of an animation.
//	The target attribute indicates the location of the element bound to the output of the sampler.
//	This text string is a path-name following a simple syntax described in Address Syntax.
//	Required attribute.
type XsdGoPkgHasAttr_Target_XsdtToken_ struct {
	//	The target attribute indicates the location of the element bound to the output of the sampler.
	//	This text string is a path-name following a simple syntax described in Address Syntax.
	//	Required attribute.
	Target xsdt.Token `xml:"http://www.collada.org/2008/03/COLLADASchema target,attr"`
}

type TchannelType struct {
	//	The target attribute indicates the location of the element bound to the output of the sampler.
	//	This text string is a path-name following a simple syntax described in Address Syntax.
	//	Required attribute.
	XsdGoPkgHasAttr_Target_XsdtToken_

	//	The source attribute indicates the location of the sampler using a URL expression.
	//	The sampler must be declared within the same document. Required attribute.
	XsdGoPkgHasAttr_Source_TurifragmentType_
}

//	If the WalkHandlers.TchannelType function is not nil (ie. was set by outside code), calls it with this TchannelType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TchannelType instance.
func (me *TchannelType) Walk() (err error) {
	if fn := WalkHandlers.TchannelType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_channelsequencechoicesequencechoicesequenceanimation_typeschema_Channel_TchannelType_ struct {
	//	The animation element may contain any number of channel elements.
	Channels []*TchannelType `xml:"http://www.collada.org/2008/03/COLLADASchema channel"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_channelsequencechoicesequencechoicesequenceanimation_typeschema_Channel_TchannelType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_channelsequencechoicesequencechoicesequenceanimation_typeschema_Channel_TchannelType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_channelsequencechoicesequencechoicesequenceanimation_typeschema_Channel_TchannelType_ instance.
func (me *XsdGoPkgHasElems_channelsequencechoicesequencechoicesequenceanimation_typeschema_Channel_TchannelType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_channelsequencechoicesequencechoicesequenceanimation_typeschema_Channel_TchannelType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Channels {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TanimationType struct {
	//	The id attribute is a text string containing the unique identifier of this element. This value
	//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The animation may be hierarchical and may contain any number of other animation elements.
	XsdGoPkgHasElems_animationsequencechoicesequencechoicesequenceanimation_typeschema_Animation_TanimationType_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	XsdGoPkgHasElems_samplersequencechoicesequenceanimation_typeschema_Sampler_TsamplerType_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The animation element may contain any number of source elements.
	XsdGoPkgHasElems_sourcesequencechoicesequenceanimation_typeschema_Source_TsourceType_

	//	The animation element may contain an asset element.
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	//	The animation element may contain any number of channel elements.
	XsdGoPkgHasElems_channelsequencechoicesequencechoicesequenceanimation_typeschema_Channel_TchannelType_
}

//	If the WalkHandlers.TanimationType function is not nil (ie. was set by outside code), calls it with this TanimationType instance as the single argument. Then calls the Walk() method on 6/13 embed(s) and 0/0 field(s) belonging to this TanimationType instance.
func (me *TanimationType) Walk() (err error) {
	if fn := WalkHandlers.TanimationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_animationsequencechoicesequencechoicesequenceanimation_typeschema_Animation_TanimationType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_samplersequencechoicesequenceanimation_typeschema_Sampler_TsamplerType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_sourcesequencechoicesequenceanimation_typeschema_Source_TsourceType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_channelsequencechoicesequencechoicesequenceanimation_typeschema_Channel_TchannelType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_animationsequencelibrary_animations_typeschema_Animation_TanimationType_ struct {
	//	There must be at least one animation element.
	Animations []*TanimationType `xml:"http://www.collada.org/2008/03/COLLADASchema animation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_animationsequencelibrary_animations_typeschema_Animation_TanimationType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_animationsequencelibrary_animations_typeschema_Animation_TanimationType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_animationsequencelibrary_animations_typeschema_Animation_TanimationType_ instance.
func (me *XsdGoPkgHasElems_animationsequencelibrary_animations_typeschema_Animation_TanimationType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_animationsequencelibrary_animations_typeschema_Animation_TanimationType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Animations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TlibraryAnimationsType struct {
	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	There must be at least one animation element.
	XsdGoPkgHasElems_animationsequencelibrary_animations_typeschema_Animation_TanimationType_

	//	The library_animations element may contain an asset element.
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_
}

//	If the WalkHandlers.TlibraryAnimationsType function is not nil (ie. was set by outside code), calls it with this TlibraryAnimationsType instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TlibraryAnimationsType instance.
func (me *TlibraryAnimationsType) Walk() (err error) {
	if fn := WalkHandlers.TlibraryAnimationsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_animationsequencelibrary_animations_typeschema_Animation_TanimationType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_library_animationschoicesequenceCOLLADAschema_LibraryAnimations_TlibraryAnimationsType_ struct {
	//	The COLLADA element may contain any
	//	number of library_animations elements.
	AnimationsLibraries []*TlibraryAnimationsType `xml:"http://www.collada.org/2008/03/COLLADASchema library_animations"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_library_animationschoicesequenceCOLLADAschema_LibraryAnimations_TlibraryAnimationsType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_library_animationschoicesequenceCOLLADAschema_LibraryAnimations_TlibraryAnimationsType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_library_animationschoicesequenceCOLLADAschema_LibraryAnimations_TlibraryAnimationsType_ instance.
func (me *XsdGoPkgHasElems_library_animationschoicesequenceCOLLADAschema_LibraryAnimations_TlibraryAnimationsType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_library_animationschoicesequenceCOLLADAschema_LibraryAnimations_TlibraryAnimationsType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AnimationsLibraries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The instance_with_extra_type element is used for all generic instance elements. A generic instance element
//	is one which does not have any specific child elements declared.
//	The url attribute refers to resource to instantiate. This may refer to a local resource using a
//	relative URL fragment identifier that begins with the "#" character. The url attribute may refer
//	to an external resource using an absolute or relative URL.
type XsdGoPkgHasAttr_Url_XsdtAnyURI_ struct {
	//	The url attribute refers to resource to instantiate. This may refer to a local resource using a
	//	relative URL fragment identifier that begins with the "#" character. The url attribute may refer
	//	to an external resource using an absolute or relative URL.
	Url xsdt.AnyURI `xml:"http://www.collada.org/2008/03/COLLADASchema url,attr"`
}

type TinstanceWithExtraType struct {
	//	The url attribute refers to resource to instantiate. This may refer to a local resource using a
	//	relative URL fragment identifier that begins with the "#" character. The url attribute may refer
	//	to an external resource using an absolute or relative URL.
	XsdGoPkgHasAttr_Url_XsdtAnyURI_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The extra element may occur any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The sid attribute is a text string value containing the sub-identifier of this element. This
	//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_TsidType_
}

//	If the WalkHandlers.TinstanceWithExtraType function is not nil (ie. was set by outside code), calls it with this TinstanceWithExtraType instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TinstanceWithExtraType instance.
func (me *TinstanceWithExtraType) Walk() (err error) {
	if fn := WalkHandlers.TinstanceWithExtraType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TinstanceJointType struct {
	TinstanceWithExtraType
}

//	If the WalkHandlers.TinstanceJointType function is not nil (ie. was set by outside code), calls it with this TinstanceJointType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TinstanceJointType instance.
func (me *TinstanceJointType) Walk() (err error) {
	if fn := WalkHandlers.TinstanceJointType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TinstanceWithExtraType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_instance_jointchoicesequencekinematics_model_technique_typeschema_InstanceJoint_TinstanceJointType_ struct {
	JointInstances []*TinstanceJointType `xml:"http://www.collada.org/2008/03/COLLADASchema instance_joint"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_instance_jointchoicesequencekinematics_model_technique_typeschema_InstanceJoint_TinstanceJointType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_instance_jointchoicesequencekinematics_model_technique_typeschema_InstanceJoint_TinstanceJointType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_instance_jointchoicesequencekinematics_model_technique_typeschema_InstanceJoint_TinstanceJointType_ instance.
func (me *XsdGoPkgHasElems_instance_jointchoicesequencekinematics_model_technique_typeschema_InstanceJoint_TinstanceJointType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_instance_jointchoicesequencekinematics_model_technique_typeschema_InstanceJoint_TinstanceJointType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.JointInstances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_intchoicekinematics_newparam_typeschema_Int_TintType_ struct {
	Int *TintType `xml:"http://www.collada.org/2008/03/COLLADASchema int"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_intchoicekinematics_newparam_typeschema_Int_TintType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_intchoicekinematics_newparam_typeschema_Int_TintType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_intchoicekinematics_newparam_typeschema_Int_TintType_ instance.
func (me *XsdGoPkgHasElem_intchoicekinematics_newparam_typeschema_Int_TintType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_intchoicekinematics_newparam_typeschema_Int_TintType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_boolchoicekinematics_newparam_typeschema_Bool_XsdtBoolean_ struct {
	Bool *xsdt.Boolean `xml:"http://www.collada.org/2008/03/COLLADASchema bool"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_boolchoicekinematics_newparam_typeschema_Bool_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_boolchoicekinematics_newparam_typeschema_Bool_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_boolchoicekinematics_newparam_typeschema_Bool_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElem_boolchoicekinematics_newparam_typeschema_Bool_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_boolchoicekinematics_newparam_typeschema_Bool_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SIDREFchoicekinematics_newparam_typeschema_Sidref_TsidrefType_ struct {
	Sidref TsidrefType `xml:"http://www.collada.org/2008/03/COLLADASchema SIDREF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SIDREFchoicekinematics_newparam_typeschema_Sidref_TsidrefType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SIDREFchoicekinematics_newparam_typeschema_Sidref_TsidrefType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SIDREFchoicekinematics_newparam_typeschema_Sidref_TsidrefType_ instance.
func (me *XsdGoPkgHasElem_SIDREFchoicekinematics_newparam_typeschema_Sidref_TsidrefType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SIDREFchoicekinematics_newparam_typeschema_Sidref_TsidrefType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_floatchoicekinematics_newparam_typeschema_Float_TfloatType_ struct {
	Float *TfloatType `xml:"http://www.collada.org/2008/03/COLLADASchema float"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_floatchoicekinematics_newparam_typeschema_Float_TfloatType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_floatchoicekinematics_newparam_typeschema_Float_TfloatType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_floatchoicekinematics_newparam_typeschema_Float_TfloatType_ instance.
func (me *XsdGoPkgHasElem_floatchoicekinematics_newparam_typeschema_Float_TfloatType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_floatchoicekinematics_newparam_typeschema_Float_TfloatType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TkinematicsNewparamType struct {
	XsdGoPkgHasElem_boolchoicekinematics_newparam_typeschema_Bool_XsdtBoolean_

	XsdGoPkgHasElem_SIDREFchoicekinematics_newparam_typeschema_Sidref_TsidrefType_

	XsdGoPkgHasAttr_Sid_TsidType_

	XsdGoPkgHasElem_floatchoicekinematics_newparam_typeschema_Float_TfloatType_

	XsdGoPkgHasElem_intchoicekinematics_newparam_typeschema_Int_TintType_
}

//	If the WalkHandlers.TkinematicsNewparamType function is not nil (ie. was set by outside code), calls it with this TkinematicsNewparamType instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TkinematicsNewparamType instance.
func (me *TkinematicsNewparamType) Walk() (err error) {
	if fn := WalkHandlers.TkinematicsNewparamType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_intchoicekinematics_newparam_typeschema_Int_TintType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_boolchoicekinematics_newparam_typeschema_Bool_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SIDREFchoicekinematics_newparam_typeschema_Sidref_TsidrefType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_floatchoicekinematics_newparam_typeschema_Float_TfloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_newparamsequencekinematics_model_technique_typeschema_Newparam_TkinematicsNewparamType_ struct {
	Newparams []*TkinematicsNewparamType `xml:"http://www.collada.org/2008/03/COLLADASchema newparam"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_newparamsequencekinematics_model_technique_typeschema_Newparam_TkinematicsNewparamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_newparamsequencekinematics_model_technique_typeschema_Newparam_TkinematicsNewparamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_newparamsequencekinematics_model_technique_typeschema_Newparam_TkinematicsNewparamType_ instance.
func (me *XsdGoPkgHasElems_newparamsequencekinematics_model_technique_typeschema_Newparam_TkinematicsNewparamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_newparamsequencekinematics_model_technique_typeschema_Newparam_TkinematicsNewparamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Newparams {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TminmaxType struct {
	XsdGoPkgValue TfloatType `xml:",chardata"`

	XsdGoPkgHasAttr_Name_XsdtToken_

	XsdGoPkgHasAttr_Sid_TsidType_
}

//	If the WalkHandlers.TminmaxType function is not nil (ie. was set by outside code), calls it with this TminmaxType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/1 field(s) belonging to this TminmaxType instance.
func (me *TminmaxType) Walk() (err error) {
	if fn := WalkHandlers.TminmaxType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TminmaxType) ToTfloatType() TfloatType { return me.XsdGoPkgValue }

//	Returns the value of its XsdGoPkgValue field as a xsdt.Double (which TfloatType is just aliasing).
func (me *TminmaxType) ToXsdtDouble() xsdt.Double { return me.XsdGoPkgValue.ToXsdtDouble() }

type XsdGoPkgHasElem_minsequencejoint_limits_typeschema_Min_TminmaxType_ struct {
	Min *TminmaxType `xml:"http://www.collada.org/2008/03/COLLADASchema min"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_minsequencejoint_limits_typeschema_Min_TminmaxType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_minsequencejoint_limits_typeschema_Min_TminmaxType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_minsequencejoint_limits_typeschema_Min_TminmaxType_ instance.
func (me *XsdGoPkgHasElem_minsequencejoint_limits_typeschema_Min_TminmaxType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_minsequencejoint_limits_typeschema_Min_TminmaxType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Min.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_maxsequencejoint_limits_typeschema_Max_TminmaxType_ struct {
	Max *TminmaxType `xml:"http://www.collada.org/2008/03/COLLADASchema max"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_maxsequencejoint_limits_typeschema_Max_TminmaxType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_maxsequencejoint_limits_typeschema_Max_TminmaxType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_maxsequencejoint_limits_typeschema_Max_TminmaxType_ instance.
func (me *XsdGoPkgHasElem_maxsequencejoint_limits_typeschema_Max_TminmaxType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_maxsequencejoint_limits_typeschema_Max_TminmaxType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Max.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TjointLimitsType struct {
	XsdGoPkgHasElem_minsequencejoint_limits_typeschema_Min_TminmaxType_

	XsdGoPkgHasElem_maxsequencejoint_limits_typeschema_Max_TminmaxType_
}

//	If the WalkHandlers.TjointLimitsType function is not nil (ie. was set by outside code), calls it with this TjointLimitsType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TjointLimitsType instance.
func (me *TjointLimitsType) Walk() (err error) {
	if fn := WalkHandlers.TjointLimitsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_minsequencejoint_limits_typeschema_Min_TminmaxType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_maxsequencejoint_limits_typeschema_Max_TminmaxType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_limitssequenceaxis_constraint_typeschema_Limits_TjointLimitsType_ struct {
	Limits *TjointLimitsType `xml:"http://www.collada.org/2008/03/COLLADASchema limits"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_limitssequenceaxis_constraint_typeschema_Limits_TjointLimitsType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_limitssequenceaxis_constraint_typeschema_Limits_TjointLimitsType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_limitssequenceaxis_constraint_typeschema_Limits_TjointLimitsType_ instance.
func (me *XsdGoPkgHasElem_limitssequenceaxis_constraint_typeschema_Limits_TjointLimitsType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_limitssequenceaxis_constraint_typeschema_Limits_TjointLimitsType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Limits.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tfloat3Type TlistOfFloatsType

//	This convenience method just performs a simple type conversion to Tfloat3Type's alias type TlistOfFloatsType.
func (me Tfloat3Type) ToTlistOfFloatsType() TlistOfFloatsType { return TlistOfFloatsType(me) }

//	Since Tfloat3Type is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat3Type) Set(s string) { (*TlistOfFloatsType)(me).Set(s) }

//	Since Tfloat3Type is just a simple String type, this merely returns the current string value.
func (me Tfloat3Type) String() string { return TlistOfFloatsType(me).String() }

type TaxisType struct {
	XsdGoPkgValue Tfloat3Type `xml:",chardata"`

	XsdGoPkgHasAttr_Sid_TsidType_

	XsdGoPkgHasAttr_Name_XsdtToken_
}

//	If the WalkHandlers.TaxisType function is not nil (ie. was set by outside code), calls it with this TaxisType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/1 field(s) belonging to this TaxisType instance.
func (me *TaxisType) Walk() (err error) {
	if fn := WalkHandlers.TaxisType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the value of its XsdGoPkgValue field as a xsdt.String (which Tfloat3Type is just aliasing).
func (me *TaxisType) ToXsdtString() xsdt.String {
	return me.XsdGoPkgValue.ToTlistOfFloatsType().ToXsdtString()
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TaxisType) ToTfloat3Type() Tfloat3Type { return me.XsdGoPkgValue }

//	Returns the value of its XsdGoPkgValue field as a TlistOfFloatsType (which Tfloat3Type is just aliasing).
func (me *TaxisType) ToTlistOfFloatsType() TlistOfFloatsType {
	return me.XsdGoPkgValue.ToTlistOfFloatsType()
}

type XsdGoPkgHasElem_axissequenceaxis_constraint_typeschema_Axis_TaxisType_ struct {
	Axis *TaxisType `xml:"http://www.collada.org/2008/03/COLLADASchema axis"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_axissequenceaxis_constraint_typeschema_Axis_TaxisType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_axissequenceaxis_constraint_typeschema_Axis_TaxisType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_axissequenceaxis_constraint_typeschema_Axis_TaxisType_ instance.
func (me *XsdGoPkgHasElem_axissequenceaxis_constraint_typeschema_Axis_TaxisType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_axissequenceaxis_constraint_typeschema_Axis_TaxisType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Axis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TaxisConstraintType struct {
	XsdGoPkgHasElem_axissequenceaxis_constraint_typeschema_Axis_TaxisType_

	XsdGoPkgHasAttr_Sid_TsidType_

	XsdGoPkgHasElem_limitssequenceaxis_constraint_typeschema_Limits_TjointLimitsType_
}

//	If the WalkHandlers.TaxisConstraintType function is not nil (ie. was set by outside code), calls it with this TaxisConstraintType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TaxisConstraintType instance.
func (me *TaxisConstraintType) Walk() (err error) {
	if fn := WalkHandlers.TaxisConstraintType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_axissequenceaxis_constraint_typeschema_Axis_TaxisType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_limitssequenceaxis_constraint_typeschema_Limits_TjointLimitsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_revolutechoicesequencejoint_typeschema_Revolute_TaxisConstraintType_ struct {
	Revolutes []*TaxisConstraintType `xml:"http://www.collada.org/2008/03/COLLADASchema revolute"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_revolutechoicesequencejoint_typeschema_Revolute_TaxisConstraintType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_revolutechoicesequencejoint_typeschema_Revolute_TaxisConstraintType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_revolutechoicesequencejoint_typeschema_Revolute_TaxisConstraintType_ instance.
func (me *XsdGoPkgHasElems_revolutechoicesequencejoint_typeschema_Revolute_TaxisConstraintType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_revolutechoicesequencejoint_typeschema_Revolute_TaxisConstraintType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Revolutes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_prismaticchoicesequencejoint_typeschema_Prismatic_TaxisConstraintType_ struct {
	Prismatics []*TaxisConstraintType `xml:"http://www.collada.org/2008/03/COLLADASchema prismatic"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_prismaticchoicesequencejoint_typeschema_Prismatic_TaxisConstraintType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_prismaticchoicesequencejoint_typeschema_Prismatic_TaxisConstraintType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_prismaticchoicesequencejoint_typeschema_Prismatic_TaxisConstraintType_ instance.
func (me *XsdGoPkgHasElems_prismaticchoicesequencejoint_typeschema_Prismatic_TaxisConstraintType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_prismaticchoicesequencejoint_typeschema_Prismatic_TaxisConstraintType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Prismatics {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TjointType struct {
	XsdGoPkgHasElems_revolutechoicesequencejoint_typeschema_Revolute_TaxisConstraintType_

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	XsdGoPkgHasElems_prismaticchoicesequencejoint_typeschema_Prismatic_TaxisConstraintType_

	XsdGoPkgHasAttr_Sid_TsidType_

	XsdGoPkgHasAttr_Name_XsdtToken_
}

//	If the WalkHandlers.TjointType function is not nil (ie. was set by outside code), calls it with this TjointType instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TjointType instance.
func (me *TjointType) Walk() (err error) {
	if fn := WalkHandlers.TjointType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_revolutechoicesequencejoint_typeschema_Revolute_TaxisConstraintType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_prismaticchoicesequencejoint_typeschema_Prismatic_TaxisConstraintType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_jointchoicesequencekinematics_model_technique_typeschema_Joint_TjointType_ struct {
	Joints []*TjointType `xml:"http://www.collada.org/2008/03/COLLADASchema joint"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_jointchoicesequencekinematics_model_technique_typeschema_Joint_TjointType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_jointchoicesequencekinematics_model_technique_typeschema_Joint_TjointType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_jointchoicesequencekinematics_model_technique_typeschema_Joint_TjointType_ instance.
func (me *XsdGoPkgHasElems_jointchoicesequencekinematics_model_technique_typeschema_Joint_TjointType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_jointchoicesequencekinematics_model_technique_typeschema_Joint_TjointType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Joints {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The rotate element contains an angle and a mathematical vector that represents the axis of rotation.
type Tfloat4Type TlistOfFloatsType

//	Since Tfloat4Type is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat4Type) Set(s string) { (*TlistOfFloatsType)(me).Set(s) }

//	This convenience method just performs a simple type conversion to Tfloat4Type's alias type TlistOfFloatsType.
func (me Tfloat4Type) ToTlistOfFloatsType() TlistOfFloatsType { return TlistOfFloatsType(me) }

//	Since Tfloat4Type is just a simple String type, this merely returns the current string value.
func (me Tfloat4Type) String() string { return TlistOfFloatsType(me).String() }

type TtargetableFloat4Type struct {
	XsdGoPkgValue Tfloat4Type `xml:",chardata"`

	XsdGoPkgHasAttr_Sid_TsidType_
}

//	If the WalkHandlers.TtargetableFloat4Type function is not nil (ie. was set by outside code), calls it with this TtargetableFloat4Type instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TtargetableFloat4Type instance.
func (me *TtargetableFloat4Type) Walk() (err error) {
	if fn := WalkHandlers.TtargetableFloat4Type; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the value of its XsdGoPkgValue field as a TlistOfFloatsType (which Tfloat4Type is just aliasing).
func (me *TtargetableFloat4Type) ToTlistOfFloatsType() TlistOfFloatsType {
	return me.XsdGoPkgValue.ToTlistOfFloatsType()
}

//	Returns the value of its XsdGoPkgValue field as a xsdt.String (which Tfloat4Type is just aliasing).
func (me *TtargetableFloat4Type) ToXsdtString() xsdt.String {
	return me.XsdGoPkgValue.ToTlistOfFloatsType().ToXsdtString()
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TtargetableFloat4Type) ToTfloat4Type() Tfloat4Type { return me.XsdGoPkgValue }

type TrotateType struct {
	XsdGoPkgValue TtargetableFloat4Type `xml:",chardata"`
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TrotateType) ToTtargetableFloat4Type() TtargetableFloat4Type { return me.XsdGoPkgValue }

//	If the WalkHandlers.TrotateType function is not nil (ie. was set by outside code), calls it with this TrotateType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this TrotateType instance.
func (me *TrotateType) Walk() (err error) {
	if fn := WalkHandlers.TrotateType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_rotatechoiceattachment_endchoicesequencelink_typeschema_Rotate_TrotateType_ struct {
	Rotates []*TrotateType `xml:"http://www.collada.org/2008/03/COLLADASchema rotate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_rotatechoiceattachment_endchoicesequencelink_typeschema_Rotate_TrotateType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_rotatechoiceattachment_endchoicesequencelink_typeschema_Rotate_TrotateType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_rotatechoiceattachment_endchoicesequencelink_typeschema_Rotate_TrotateType_ instance.
func (me *XsdGoPkgHasElems_rotatechoiceattachment_endchoicesequencelink_typeschema_Rotate_TrotateType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_rotatechoiceattachment_endchoicesequencelink_typeschema_Rotate_TrotateType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Rotates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The translate element contains a mathematical vector that represents the distance along the
//	X, Y and Z-axes.
//	The targetable_float3_type element is used to represent elements which contain a float3 value which can
//	be targeted for animation.
type TtargetableFloat3Type struct {
	XsdGoPkgValue Tfloat3Type `xml:",chardata"`

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_TsidType_
}

//	Returns the value of its XsdGoPkgValue field as a xsdt.String (which Tfloat3Type is just aliasing).
func (me *TtargetableFloat3Type) ToXsdtString() xsdt.String {
	return me.XsdGoPkgValue.ToTlistOfFloatsType().ToXsdtString()
}

//	Returns the value of its XsdGoPkgValue field as a TlistOfFloatsType (which Tfloat3Type is just aliasing).
func (me *TtargetableFloat3Type) ToTlistOfFloatsType() TlistOfFloatsType {
	return me.XsdGoPkgValue.ToTlistOfFloatsType()
}

//	If the WalkHandlers.TtargetableFloat3Type function is not nil (ie. was set by outside code), calls it with this TtargetableFloat3Type instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TtargetableFloat3Type instance.
func (me *TtargetableFloat3Type) Walk() (err error) {
	if fn := WalkHandlers.TtargetableFloat3Type; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TtargetableFloat3Type) ToTfloat3Type() Tfloat3Type { return me.XsdGoPkgValue }

type TtranslateType struct {
	XsdGoPkgValue TtargetableFloat3Type `xml:",chardata"`
}

//	If the WalkHandlers.TtranslateType function is not nil (ie. was set by outside code), calls it with this TtranslateType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this TtranslateType instance.
func (me *TtranslateType) Walk() (err error) {
	if fn := WalkHandlers.TtranslateType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TtranslateType) ToTtargetableFloat3Type() TtargetableFloat3Type { return me.XsdGoPkgValue }

type XsdGoPkgHasElems_translatechoiceattachment_endchoicesequencelink_typeschema_Translate_TtranslateType_ struct {
	Translates []*TtranslateType `xml:"http://www.collada.org/2008/03/COLLADASchema translate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_translatechoiceattachment_endchoicesequencelink_typeschema_Translate_TtranslateType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_translatechoiceattachment_endchoicesequencelink_typeschema_Translate_TtranslateType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_translatechoiceattachment_endchoicesequencelink_typeschema_Translate_TtranslateType_ instance.
func (me *XsdGoPkgHasElems_translatechoiceattachment_endchoicesequencelink_typeschema_Translate_TtranslateType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_translatechoiceattachment_endchoicesequencelink_typeschema_Translate_TtranslateType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Translates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Joint_XsdtToken_ struct {
	Joint xsdt.Token `xml:"http://www.collada.org/2008/03/COLLADASchema joint,attr"`
}

type TxsdLinkTypeSequenceChoiceAttachmentEnd struct {
	XsdGoPkgHasElems_rotatechoiceattachment_endchoicesequencelink_typeschema_Rotate_TrotateType_

	XsdGoPkgHasElems_translatechoiceattachment_endchoicesequencelink_typeschema_Translate_TtranslateType_

	XsdGoPkgHasAttr_Joint_XsdtToken_
}

//	If the WalkHandlers.TxsdLinkTypeSequenceChoiceAttachmentEnd function is not nil (ie. was set by outside code), calls it with this TxsdLinkTypeSequenceChoiceAttachmentEnd instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TxsdLinkTypeSequenceChoiceAttachmentEnd instance.
func (me *TxsdLinkTypeSequenceChoiceAttachmentEnd) Walk() (err error) {
	if fn := WalkHandlers.TxsdLinkTypeSequenceChoiceAttachmentEnd; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_rotatechoiceattachment_endchoicesequencelink_typeschema_Rotate_TrotateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_translatechoiceattachment_endchoicesequencelink_typeschema_Translate_TtranslateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_attachment_endchoicesequencelink_typeschema_AttachmentEnd_TxsdLinkTypeSequenceChoiceAttachmentEnd_ struct {
	AttachmentEnds []*TxsdLinkTypeSequenceChoiceAttachmentEnd `xml:"http://www.collada.org/2008/03/COLLADASchema attachment_end"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_attachment_endchoicesequencelink_typeschema_AttachmentEnd_TxsdLinkTypeSequenceChoiceAttachmentEnd_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_attachment_endchoicesequencelink_typeschema_AttachmentEnd_TxsdLinkTypeSequenceChoiceAttachmentEnd_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_attachment_endchoicesequencelink_typeschema_AttachmentEnd_TxsdLinkTypeSequenceChoiceAttachmentEnd_ instance.
func (me *XsdGoPkgHasElems_attachment_endchoicesequencelink_typeschema_AttachmentEnd_TxsdLinkTypeSequenceChoiceAttachmentEnd_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_attachment_endchoicesequencelink_typeschema_AttachmentEnd_TxsdLinkTypeSequenceChoiceAttachmentEnd_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AttachmentEnds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_linksequenceattachment_fullchoicesequencelink_typeschema_Link_TlinkType_ struct {
	Link *TlinkType `xml:"http://www.collada.org/2008/03/COLLADASchema link"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_linksequenceattachment_fullchoicesequencelink_typeschema_Link_TlinkType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_linksequenceattachment_fullchoicesequencelink_typeschema_Link_TlinkType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_linksequenceattachment_fullchoicesequencelink_typeschema_Link_TlinkType_ instance.
func (me *XsdGoPkgHasElem_linksequenceattachment_fullchoicesequencelink_typeschema_Link_TlinkType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_linksequenceattachment_fullchoicesequencelink_typeschema_Link_TlinkType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdLinkTypeSequenceChoiceAttachmentFull struct {
	XsdGoPkgHasElems_rotatechoiceattachment_endchoicesequencelink_typeschema_Rotate_TrotateType_

	XsdGoPkgHasAttr_Joint_XsdtToken_

	XsdGoPkgHasElems_translatechoiceattachment_endchoicesequencelink_typeschema_Translate_TtranslateType_

	XsdGoPkgHasElem_linksequenceattachment_fullchoicesequencelink_typeschema_Link_TlinkType_
}

//	If the WalkHandlers.TxsdLinkTypeSequenceChoiceAttachmentFull function is not nil (ie. was set by outside code), calls it with this TxsdLinkTypeSequenceChoiceAttachmentFull instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TxsdLinkTypeSequenceChoiceAttachmentFull instance.
func (me *TxsdLinkTypeSequenceChoiceAttachmentFull) Walk() (err error) {
	if fn := WalkHandlers.TxsdLinkTypeSequenceChoiceAttachmentFull; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_linksequenceattachment_fullchoicesequencelink_typeschema_Link_TlinkType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_rotatechoiceattachment_endchoicesequencelink_typeschema_Rotate_TrotateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_translatechoiceattachment_endchoicesequencelink_typeschema_Translate_TtranslateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_attachment_fullchoicesequencelink_typeschema_AttachmentFull_TxsdLinkTypeSequenceChoiceAttachmentFull_ struct {
	AttachmentFulls []*TxsdLinkTypeSequenceChoiceAttachmentFull `xml:"http://www.collada.org/2008/03/COLLADASchema attachment_full"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_attachment_fullchoicesequencelink_typeschema_AttachmentFull_TxsdLinkTypeSequenceChoiceAttachmentFull_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_attachment_fullchoicesequencelink_typeschema_AttachmentFull_TxsdLinkTypeSequenceChoiceAttachmentFull_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_attachment_fullchoicesequencelink_typeschema_AttachmentFull_TxsdLinkTypeSequenceChoiceAttachmentFull_ instance.
func (me *XsdGoPkgHasElems_attachment_fullchoicesequencelink_typeschema_AttachmentFull_TxsdLinkTypeSequenceChoiceAttachmentFull_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_attachment_fullchoicesequencelink_typeschema_AttachmentFull_TxsdLinkTypeSequenceChoiceAttachmentFull_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AttachmentFulls {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdLinkTypeSequenceChoiceAttachmentStart struct {
	XsdGoPkgHasElems_translatechoiceattachment_endchoicesequencelink_typeschema_Translate_TtranslateType_

	XsdGoPkgHasAttr_Joint_XsdtToken_

	XsdGoPkgHasElems_rotatechoiceattachment_endchoicesequencelink_typeschema_Rotate_TrotateType_
}

//	If the WalkHandlers.TxsdLinkTypeSequenceChoiceAttachmentStart function is not nil (ie. was set by outside code), calls it with this TxsdLinkTypeSequenceChoiceAttachmentStart instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TxsdLinkTypeSequenceChoiceAttachmentStart instance.
func (me *TxsdLinkTypeSequenceChoiceAttachmentStart) Walk() (err error) {
	if fn := WalkHandlers.TxsdLinkTypeSequenceChoiceAttachmentStart; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_rotatechoiceattachment_endchoicesequencelink_typeschema_Rotate_TrotateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_translatechoiceattachment_endchoicesequencelink_typeschema_Translate_TtranslateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_attachment_startchoicesequencelink_typeschema_AttachmentStart_TxsdLinkTypeSequenceChoiceAttachmentStart_ struct {
	AttachmentStarts []*TxsdLinkTypeSequenceChoiceAttachmentStart `xml:"http://www.collada.org/2008/03/COLLADASchema attachment_start"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_attachment_startchoicesequencelink_typeschema_AttachmentStart_TxsdLinkTypeSequenceChoiceAttachmentStart_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_attachment_startchoicesequencelink_typeschema_AttachmentStart_TxsdLinkTypeSequenceChoiceAttachmentStart_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_attachment_startchoicesequencelink_typeschema_AttachmentStart_TxsdLinkTypeSequenceChoiceAttachmentStart_ instance.
func (me *XsdGoPkgHasElems_attachment_startchoicesequencelink_typeschema_AttachmentStart_TxsdLinkTypeSequenceChoiceAttachmentStart_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_attachment_startchoicesequencelink_typeschema_AttachmentStart_TxsdLinkTypeSequenceChoiceAttachmentStart_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AttachmentStarts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TlinkType struct {
	XsdGoPkgHasElems_attachment_endchoicesequencelink_typeschema_AttachmentEnd_TxsdLinkTypeSequenceChoiceAttachmentEnd_

	XsdGoPkgHasAttr_Name_XsdtToken_

	XsdGoPkgHasElems_attachment_fullchoicesequencelink_typeschema_AttachmentFull_TxsdLinkTypeSequenceChoiceAttachmentFull_

	XsdGoPkgHasElems_translatechoiceattachment_endchoicesequencelink_typeschema_Translate_TtranslateType_

	XsdGoPkgHasElems_rotatechoiceattachment_endchoicesequencelink_typeschema_Rotate_TrotateType_

	XsdGoPkgHasElems_attachment_startchoicesequencelink_typeschema_AttachmentStart_TxsdLinkTypeSequenceChoiceAttachmentStart_

	XsdGoPkgHasAttr_Sid_TsidType_
}

//	If the WalkHandlers.TlinkType function is not nil (ie. was set by outside code), calls it with this TlinkType instance as the single argument. Then calls the Walk() method on 5/7 embed(s) and 0/0 field(s) belonging to this TlinkType instance.
func (me *TlinkType) Walk() (err error) {
	if fn := WalkHandlers.TlinkType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_attachment_endchoicesequencelink_typeschema_AttachmentEnd_TxsdLinkTypeSequenceChoiceAttachmentEnd_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_attachment_fullchoicesequencelink_typeschema_AttachmentFull_TxsdLinkTypeSequenceChoiceAttachmentFull_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_translatechoiceattachment_endchoicesequencelink_typeschema_Translate_TtranslateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_rotatechoiceattachment_endchoicesequencelink_typeschema_Rotate_TrotateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_attachment_startchoicesequencelink_typeschema_AttachmentStart_TxsdLinkTypeSequenceChoiceAttachmentStart_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_linksequencekinematics_model_technique_typeschema_Link_TlinkType_ struct {
	Links []*TlinkType `xml:"http://www.collada.org/2008/03/COLLADASchema link"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_linksequencekinematics_model_technique_typeschema_Link_TlinkType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_linksequencekinematics_model_technique_typeschema_Link_TlinkType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_linksequencekinematics_model_technique_typeschema_Link_TlinkType_ instance.
func (me *XsdGoPkgHasElems_linksequencekinematics_model_technique_typeschema_Link_TlinkType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_linksequencekinematics_model_technique_typeschema_Link_TlinkType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Links {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcommonParamType struct {
	XsdGoPkgValue xsdt.Token `xml:",chardata"`
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TcommonParamType) ToXsdtToken() xsdt.Token { return me.XsdGoPkgValue }

//	If the WalkHandlers.TcommonParamType function is not nil (ie. was set by outside code), calls it with this TcommonParamType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this TcommonParamType instance.
func (me *TcommonParamType) Walk() (err error) {
	if fn := WalkHandlers.TcommonParamType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TcommonParamType_ struct {
	Param *TcommonParamType `xml:"http://www.collada.org/2008/03/COLLADASchema param"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TcommonParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TcommonParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TcommonParamType_ instance.
func (me *XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TcommonParamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TcommonParamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Param.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcommonFloatOrParamType struct {
	XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TcommonParamType_

	XsdGoPkgHasElem_floatchoicekinematics_newparam_typeschema_Float_TfloatType_
}

//	If the WalkHandlers.TcommonFloatOrParamType function is not nil (ie. was set by outside code), calls it with this TcommonFloatOrParamType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TcommonFloatOrParamType instance.
func (me *TcommonFloatOrParamType) Walk() (err error) {
	if fn := WalkHandlers.TcommonFloatOrParamType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TcommonParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_floatchoicekinematics_newparam_typeschema_Float_TfloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_targetsequenceformula_typeschema_Target_TcommonFloatOrParamType_ struct {
	Target *TcommonFloatOrParamType `xml:"http://www.collada.org/2008/03/COLLADASchema target"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_targetsequenceformula_typeschema_Target_TcommonFloatOrParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_targetsequenceformula_typeschema_Target_TcommonFloatOrParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_targetsequenceformula_typeschema_Target_TcommonFloatOrParamType_ instance.
func (me *XsdGoPkgHasElem_targetsequenceformula_typeschema_Target_TcommonFloatOrParamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_targetsequenceformula_typeschema_Target_TcommonFloatOrParamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Target.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TformulaNewparamType struct {
	XsdGoPkgHasElem_boolchoicekinematics_newparam_typeschema_Bool_XsdtBoolean_

	XsdGoPkgHasElem_SIDREFchoicekinematics_newparam_typeschema_Sidref_TsidrefType_

	XsdGoPkgHasElem_floatchoicekinematics_newparam_typeschema_Float_TfloatType_

	XsdGoPkgHasElem_intchoicekinematics_newparam_typeschema_Int_TintType_

	XsdGoPkgHasAttr_Sid_TsidType_
}

//	If the WalkHandlers.TformulaNewparamType function is not nil (ie. was set by outside code), calls it with this TformulaNewparamType instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TformulaNewparamType instance.
func (me *TformulaNewparamType) Walk() (err error) {
	if fn := WalkHandlers.TformulaNewparamType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_boolchoicekinematics_newparam_typeschema_Bool_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SIDREFchoicekinematics_newparam_typeschema_Sidref_TsidrefType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_floatchoicekinematics_newparam_typeschema_Float_TfloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_intchoicekinematics_newparam_typeschema_Int_TintType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_newparamsequenceformula_typeschema_Newparam_TformulaNewparamType_ struct {
	Newparams []*TformulaNewparamType `xml:"http://www.collada.org/2008/03/COLLADASchema newparam"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_newparamsequenceformula_typeschema_Newparam_TformulaNewparamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_newparamsequenceformula_typeschema_Newparam_TformulaNewparamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_newparamsequenceformula_typeschema_Newparam_TformulaNewparamType_ instance.
func (me *XsdGoPkgHasElems_newparamsequenceformula_typeschema_Newparam_TformulaNewparamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_newparamsequenceformula_typeschema_Newparam_TformulaNewparamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Newparams {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TformulaTechniqueType struct {
	math.XsdGoPkgHasElem_Math
}

//	If the WalkHandlers.TformulaTechniqueType function is not nil (ie. was set by outside code), calls it with this TformulaTechniqueType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TformulaTechniqueType instance.
func (me *TformulaTechniqueType) Walk() (err error) {
	if fn := WalkHandlers.TformulaTechniqueType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_technique_commonsequenceformula_typeschema_TechniqueCommon_TformulaTechniqueType_ struct {
	TechniqueCommon *TformulaTechniqueType `xml:"http://www.collada.org/2008/03/COLLADASchema technique_common"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_technique_commonsequenceformula_typeschema_TechniqueCommon_TformulaTechniqueType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_technique_commonsequenceformula_typeschema_TechniqueCommon_TformulaTechniqueType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_technique_commonsequenceformula_typeschema_TechniqueCommon_TformulaTechniqueType_ instance.
func (me *XsdGoPkgHasElem_technique_commonsequenceformula_typeschema_TechniqueCommon_TformulaTechniqueType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_technique_commonsequenceformula_typeschema_TechniqueCommon_TformulaTechniqueType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TechniqueCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TformulaType struct {
	XsdGoPkgHasAttr_Name_XsdtToken_

	XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_

	XsdGoPkgHasAttr_Sid_TsidType_

	XsdGoPkgHasElem_targetsequenceformula_typeschema_Target_TcommonFloatOrParamType_

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElems_newparamsequenceformula_typeschema_Newparam_TformulaNewparamType_

	XsdGoPkgHasElem_technique_commonsequenceformula_typeschema_TechniqueCommon_TformulaTechniqueType_
}

//	If the WalkHandlers.TformulaType function is not nil (ie. was set by outside code), calls it with this TformulaType instance as the single argument. Then calls the Walk() method on 4/7 embed(s) and 0/0 field(s) belonging to this TformulaType instance.
func (me *TformulaType) Walk() (err error) {
	if fn := WalkHandlers.TformulaType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_newparamsequenceformula_typeschema_Newparam_TformulaNewparamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_technique_commonsequenceformula_typeschema_TechniqueCommon_TformulaTechniqueType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_targetsequenceformula_typeschema_Target_TcommonFloatOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_formulachoicesequencekinematics_model_technique_typeschema_Formula_TformulaType_ struct {
	Formulas []*TformulaType `xml:"http://www.collada.org/2008/03/COLLADASchema formula"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_formulachoicesequencekinematics_model_technique_typeschema_Formula_TformulaType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_formulachoicesequencekinematics_model_technique_typeschema_Formula_TformulaType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_formulachoicesequencekinematics_model_technique_typeschema_Formula_TformulaType_ instance.
func (me *XsdGoPkgHasElems_formulachoicesequencekinematics_model_technique_typeschema_Formula_TformulaType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_formulachoicesequencekinematics_model_technique_typeschema_Formula_TformulaType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Formulas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Ref_XsdtToken_ struct {
	Ref xsdt.Token `xml:"http://www.collada.org/2008/03/COLLADASchema ref,attr"`
}

type TkinematicsConnectParamType struct {
	XsdGoPkgHasAttr_Ref_XsdtToken_
}

//	If the WalkHandlers.TkinematicsConnectParamType function is not nil (ie. was set by outside code), calls it with this TkinematicsConnectParamType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TkinematicsConnectParamType instance.
func (me *TkinematicsConnectParamType) Walk() (err error) {
	if fn := WalkHandlers.TkinematicsConnectParamType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_connect_paramchoiceformula_setparam_typeschema_ConnectParam_TkinematicsConnectParamType_ struct {
	ConnectParam *TkinematicsConnectParamType `xml:"http://www.collada.org/2008/03/COLLADASchema connect_param"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_connect_paramchoiceformula_setparam_typeschema_ConnectParam_TkinematicsConnectParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_connect_paramchoiceformula_setparam_typeschema_ConnectParam_TkinematicsConnectParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_connect_paramchoiceformula_setparam_typeschema_ConnectParam_TkinematicsConnectParamType_ instance.
func (me *XsdGoPkgHasElem_connect_paramchoiceformula_setparam_typeschema_ConnectParam_TkinematicsConnectParamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_connect_paramchoiceformula_setparam_typeschema_ConnectParam_TkinematicsConnectParamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ConnectParam.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TformulaSetparamType struct {
	XsdGoPkgHasElem_connect_paramchoiceformula_setparam_typeschema_ConnectParam_TkinematicsConnectParamType_

	XsdGoPkgHasElem_intchoicekinematics_newparam_typeschema_Int_TintType_

	XsdGoPkgHasElem_boolchoicekinematics_newparam_typeschema_Bool_XsdtBoolean_

	XsdGoPkgHasAttr_Ref_XsdtToken_

	XsdGoPkgHasElem_floatchoicekinematics_newparam_typeschema_Float_TfloatType_

	XsdGoPkgHasElem_SIDREFchoicekinematics_newparam_typeschema_Sidref_TsidrefType_
}

//	If the WalkHandlers.TformulaSetparamType function is not nil (ie. was set by outside code), calls it with this TformulaSetparamType instance as the single argument. Then calls the Walk() method on 5/6 embed(s) and 0/0 field(s) belonging to this TformulaSetparamType instance.
func (me *TformulaSetparamType) Walk() (err error) {
	if fn := WalkHandlers.TformulaSetparamType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_boolchoicekinematics_newparam_typeschema_Bool_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_floatchoicekinematics_newparam_typeschema_Float_TfloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SIDREFchoicekinematics_newparam_typeschema_Sidref_TsidrefType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_connect_paramchoiceformula_setparam_typeschema_ConnectParam_TkinematicsConnectParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_intchoicekinematics_newparam_typeschema_Int_TintType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_setparamsequenceinstance_formula_typeschema_Setparam_TformulaSetparamType_ struct {
	Setparams []*TformulaSetparamType `xml:"http://www.collada.org/2008/03/COLLADASchema setparam"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_setparamsequenceinstance_formula_typeschema_Setparam_TformulaSetparamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_setparamsequenceinstance_formula_typeschema_Setparam_TformulaSetparamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_setparamsequenceinstance_formula_typeschema_Setparam_TformulaSetparamType_ instance.
func (me *XsdGoPkgHasElems_setparamsequenceinstance_formula_typeschema_Setparam_TformulaSetparamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_setparamsequenceinstance_formula_typeschema_Setparam_TformulaSetparamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Setparams {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TinstanceFormulaType struct {
	XsdGoPkgHasAttr_Name_XsdtToken_

	XsdGoPkgHasAttr_Sid_TsidType_

	XsdGoPkgHasElems_setparamsequenceinstance_formula_typeschema_Setparam_TformulaSetparamType_

	XsdGoPkgHasAttr_Url_XsdtAnyURI_
}

//	If the WalkHandlers.TinstanceFormulaType function is not nil (ie. was set by outside code), calls it with this TinstanceFormulaType instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TinstanceFormulaType instance.
func (me *TinstanceFormulaType) Walk() (err error) {
	if fn := WalkHandlers.TinstanceFormulaType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_setparamsequenceinstance_formula_typeschema_Setparam_TformulaSetparamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_instance_formulachoicesequencekinematics_model_technique_typeschema_InstanceFormula_TinstanceFormulaType_ struct {
	FormulaInstances []*TinstanceFormulaType `xml:"http://www.collada.org/2008/03/COLLADASchema instance_formula"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_instance_formulachoicesequencekinematics_model_technique_typeschema_InstanceFormula_TinstanceFormulaType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_instance_formulachoicesequencekinematics_model_technique_typeschema_InstanceFormula_TinstanceFormulaType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_instance_formulachoicesequencekinematics_model_technique_typeschema_InstanceFormula_TinstanceFormulaType_ instance.
func (me *XsdGoPkgHasElems_instance_formulachoicesequencekinematics_model_technique_typeschema_InstanceFormula_TinstanceFormulaType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_instance_formulachoicesequencekinematics_model_technique_typeschema_InstanceFormula_TinstanceFormulaType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FormulaInstances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TkinematicsModelTechniqueType struct {
	XsdGoPkgHasElems_instance_formulachoicesequencekinematics_model_technique_typeschema_InstanceFormula_TinstanceFormulaType_

	XsdGoPkgHasElems_instance_jointchoicesequencekinematics_model_technique_typeschema_InstanceJoint_TinstanceJointType_

	XsdGoPkgHasElems_newparamsequencekinematics_model_technique_typeschema_Newparam_TkinematicsNewparamType_

	XsdGoPkgHasElems_jointchoicesequencekinematics_model_technique_typeschema_Joint_TjointType_

	XsdGoPkgHasElems_linksequencekinematics_model_technique_typeschema_Link_TlinkType_

	XsdGoPkgHasElems_formulachoicesequencekinematics_model_technique_typeschema_Formula_TformulaType_
}

//	If the WalkHandlers.TkinematicsModelTechniqueType function is not nil (ie. was set by outside code), calls it with this TkinematicsModelTechniqueType instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TkinematicsModelTechniqueType instance.
func (me *TkinematicsModelTechniqueType) Walk() (err error) {
	if fn := WalkHandlers.TkinematicsModelTechniqueType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_instance_jointchoicesequencekinematics_model_technique_typeschema_InstanceJoint_TinstanceJointType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_newparamsequencekinematics_model_technique_typeschema_Newparam_TkinematicsNewparamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_jointchoicesequencekinematics_model_technique_typeschema_Joint_TjointType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_linksequencekinematics_model_technique_typeschema_Link_TlinkType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_formulachoicesequencekinematics_model_technique_typeschema_Formula_TformulaType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_instance_formulachoicesequencekinematics_model_technique_typeschema_InstanceFormula_TinstanceFormulaType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_technique_commonsequencekinematics_model_typeschema_TechniqueCommon_TkinematicsModelTechniqueType_ struct {
	TechniqueCommon *TkinematicsModelTechniqueType `xml:"http://www.collada.org/2008/03/COLLADASchema technique_common"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_technique_commonsequencekinematics_model_typeschema_TechniqueCommon_TkinematicsModelTechniqueType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_technique_commonsequencekinematics_model_typeschema_TechniqueCommon_TkinematicsModelTechniqueType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_technique_commonsequencekinematics_model_typeschema_TechniqueCommon_TkinematicsModelTechniqueType_ instance.
func (me *XsdGoPkgHasElem_technique_commonsequencekinematics_model_typeschema_TechniqueCommon_TkinematicsModelTechniqueType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_technique_commonsequencekinematics_model_typeschema_TechniqueCommon_TkinematicsModelTechniqueType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TechniqueCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TkinematicsModelType struct {
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	XsdGoPkgHasAttr_Name_XsdtToken_

	XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_

	XsdGoPkgHasElem_technique_commonsequencekinematics_model_typeschema_TechniqueCommon_TkinematicsModelTechniqueType_

	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	XsdGoPkgHasAttr_Id_XsdtId_
}

//	If the WalkHandlers.TkinematicsModelType function is not nil (ie. was set by outside code), calls it with this TkinematicsModelType instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TkinematicsModelType instance.
func (me *TkinematicsModelType) Walk() (err error) {
	if fn := WalkHandlers.TkinematicsModelType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_technique_commonsequencekinematics_model_typeschema_TechniqueCommon_TkinematicsModelTechniqueType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_kinematics_modelsequencelibrary_kinematics_models_typeschema_KinematicsModel_TkinematicsModelType_ struct {
	KinematicsModels []*TkinematicsModelType `xml:"http://www.collada.org/2008/03/COLLADASchema kinematics_model"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_kinematics_modelsequencelibrary_kinematics_models_typeschema_KinematicsModel_TkinematicsModelType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_kinematics_modelsequencelibrary_kinematics_models_typeschema_KinematicsModel_TkinematicsModelType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_kinematics_modelsequencelibrary_kinematics_models_typeschema_KinematicsModel_TkinematicsModelType_ instance.
func (me *XsdGoPkgHasElems_kinematics_modelsequencelibrary_kinematics_models_typeschema_KinematicsModel_TkinematicsModelType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_kinematics_modelsequencelibrary_kinematics_models_typeschema_KinematicsModel_TkinematicsModelType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.KinematicsModels {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TlibraryKinematicsModelsType struct {
	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	XsdGoPkgHasAttr_Name_XsdtToken_

	XsdGoPkgHasElems_kinematics_modelsequencelibrary_kinematics_models_typeschema_KinematicsModel_TkinematicsModelType_
}

//	If the WalkHandlers.TlibraryKinematicsModelsType function is not nil (ie. was set by outside code), calls it with this TlibraryKinematicsModelsType instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TlibraryKinematicsModelsType instance.
func (me *TlibraryKinematicsModelsType) Walk() (err error) {
	if fn := WalkHandlers.TlibraryKinematicsModelsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_kinematics_modelsequencelibrary_kinematics_models_typeschema_KinematicsModel_TkinematicsModelType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_library_kinematics_modelschoicesequenceCOLLADAschema_LibraryKinematicsModels_TlibraryKinematicsModelsType_ struct {
	KinematicsModelsLibraries []*TlibraryKinematicsModelsType `xml:"http://www.collada.org/2008/03/COLLADASchema library_kinematics_models"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_library_kinematics_modelschoicesequenceCOLLADAschema_LibraryKinematicsModels_TlibraryKinematicsModelsType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_library_kinematics_modelschoicesequenceCOLLADAschema_LibraryKinematicsModels_TlibraryKinematicsModelsType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_library_kinematics_modelschoicesequenceCOLLADAschema_LibraryKinematicsModels_TlibraryKinematicsModelsType_ instance.
func (me *XsdGoPkgHasElems_library_kinematics_modelschoicesequenceCOLLADAschema_LibraryKinematicsModels_TlibraryKinematicsModelsType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_library_kinematics_modelschoicesequenceCOLLADAschema_LibraryKinematicsModels_TlibraryKinematicsModelsType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.KinematicsModelsLibraries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The COLLADA element may contain any
//	number of library_effects elements.
//	The library_effects element declares a module of effect elements.
//	There must be at least one effect element.
//	A self contained description of a shader effect.
//	A group that  specifies the allowable COLLADA FX profiles.
//	Opens a block of GLSL platform-specific data types and technique declarations.
//	A group that specifies the allowable types for an annotation.
type Tfloat2Type TlistOfFloatsType

//	Since Tfloat2Type is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat2Type) Set(s string) { (*TlistOfFloatsType)(me).Set(s) }

//	This convenience method just performs a simple type conversion to Tfloat2Type's alias type TlistOfFloatsType.
func (me Tfloat2Type) ToTlistOfFloatsType() TlistOfFloatsType { return TlistOfFloatsType(me) }

//	Since Tfloat2Type is just a simple String type, this merely returns the current string value.
func (me Tfloat2Type) String() string { return TlistOfFloatsType(me).String() }

type XsdGoPkgHasElem_float2choicefx_annotate_groupschema_Float2_Tfloat2Type_ struct {
	Float2 Tfloat2Type `xml:"http://www.collada.org/2008/03/COLLADASchema float2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float2choicefx_annotate_groupschema_Float2_Tfloat2Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float2choicefx_annotate_groupschema_Float2_Tfloat2Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float2choicefx_annotate_groupschema_Float2_Tfloat2Type_ instance.
func (me *XsdGoPkgHasElem_float2choicefx_annotate_groupschema_Float2_Tfloat2Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float2choicefx_annotate_groupschema_Float2_Tfloat2Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tfloat3X3Type TlistOfFloatsType

//	Since Tfloat3X3Type is just a simple String type, this merely returns the current string value.
func (me Tfloat3X3Type) String() string { return TlistOfFloatsType(me).String() }

//	This convenience method just performs a simple type conversion to Tfloat3X3Type's alias type TlistOfFloatsType.
func (me Tfloat3X3Type) ToTlistOfFloatsType() TlistOfFloatsType { return TlistOfFloatsType(me) }

//	Since Tfloat3X3Type is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat3X3Type) Set(s string) { (*TlistOfFloatsType)(me).Set(s) }

type XsdGoPkgHasElem_float3x3choicefx_annotate_groupschema_Float3X3_Tfloat3X3Type_ struct {
	Float3X3 Tfloat3X3Type `xml:"http://www.collada.org/2008/03/COLLADASchema float3x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float3x3choicefx_annotate_groupschema_Float3X3_Tfloat3X3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float3x3choicefx_annotate_groupschema_Float3X3_Tfloat3X3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float3x3choicefx_annotate_groupschema_Float3X3_Tfloat3X3Type_ instance.
func (me *XsdGoPkgHasElem_float3x3choicefx_annotate_groupschema_Float3X3_Tfloat3X3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float3x3choicefx_annotate_groupschema_Float3X3_Tfloat3X3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tint4Type TlistOfIntsType

//	This convenience method just performs a simple type conversion to Tint4Type's alias type TlistOfIntsType.
func (me Tint4Type) ToTlistOfIntsType() TlistOfIntsType { return TlistOfIntsType(me) }

//	Since Tint4Type is just a simple String type, this merely returns the current string value.
func (me Tint4Type) String() string { return TlistOfIntsType(me).String() }

//	Since Tint4Type is just a simple String type, this merely sets the current value from the specified string.
func (me *Tint4Type) Set(s string) { (*TlistOfIntsType)(me).Set(s) }

type XsdGoPkgHasElem_int4choicefx_annotate_groupschema_Int4_Tint4Type_ struct {
	Int4 Tint4Type `xml:"http://www.collada.org/2008/03/COLLADASchema int4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int4choicefx_annotate_groupschema_Int4_Tint4Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int4choicefx_annotate_groupschema_Int4_Tint4Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int4choicefx_annotate_groupschema_Int4_Tint4Type_ instance.
func (me *XsdGoPkgHasElem_int4choicefx_annotate_groupschema_Int4_Tint4Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int4choicefx_annotate_groupschema_Int4_Tint4Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tfloat4X4Type TlistOfFloatsType

//	Since Tfloat4X4Type is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat4X4Type) Set(s string) { (*TlistOfFloatsType)(me).Set(s) }

//	This convenience method just performs a simple type conversion to Tfloat4X4Type's alias type TlistOfFloatsType.
func (me Tfloat4X4Type) ToTlistOfFloatsType() TlistOfFloatsType { return TlistOfFloatsType(me) }

//	Since Tfloat4X4Type is just a simple String type, this merely returns the current string value.
func (me Tfloat4X4Type) String() string { return TlistOfFloatsType(me).String() }

type XsdGoPkgHasElem_float4x4choicefx_annotate_groupschema_Float4X4_Tfloat4X4Type_ struct {
	Float4X4 Tfloat4X4Type `xml:"http://www.collada.org/2008/03/COLLADASchema float4x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float4x4choicefx_annotate_groupschema_Float4X4_Tfloat4X4Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float4x4choicefx_annotate_groupschema_Float4X4_Tfloat4X4Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float4x4choicefx_annotate_groupschema_Float4X4_Tfloat4X4Type_ instance.
func (me *XsdGoPkgHasElem_float4x4choicefx_annotate_groupschema_Float4X4_Tfloat4X4Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float4x4choicefx_annotate_groupschema_Float4X4_Tfloat4X4Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_float3choicefx_annotate_groupschema_Float3_Tfloat3Type_ struct {
	Float3 Tfloat3Type `xml:"http://www.collada.org/2008/03/COLLADASchema float3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float3choicefx_annotate_groupschema_Float3_Tfloat3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float3choicefx_annotate_groupschema_Float3_Tfloat3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float3choicefx_annotate_groupschema_Float3_Tfloat3Type_ instance.
func (me *XsdGoPkgHasElem_float3choicefx_annotate_groupschema_Float3_Tfloat3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float3choicefx_annotate_groupschema_Float3_Tfloat3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tbool2Type TlistOfBoolsType

//	Since Tbool2Type is just a simple String type, this merely sets the current value from the specified string.
func (me *Tbool2Type) Set(s string) { (*TlistOfBoolsType)(me).Set(s) }

//	Since Tbool2Type is just a simple String type, this merely returns the current string value.
func (me Tbool2Type) String() string { return TlistOfBoolsType(me).String() }

//	This convenience method just performs a simple type conversion to Tbool2Type's alias type TlistOfBoolsType.
func (me Tbool2Type) ToTlistOfBoolsType() TlistOfBoolsType { return TlistOfBoolsType(me) }

type XsdGoPkgHasElem_bool2choicefx_annotate_groupschema_Bool2_Tbool2Type_ struct {
	Bool2 Tbool2Type `xml:"http://www.collada.org/2008/03/COLLADASchema bool2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool2choicefx_annotate_groupschema_Bool2_Tbool2Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool2choicefx_annotate_groupschema_Bool2_Tbool2Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool2choicefx_annotate_groupschema_Bool2_Tbool2Type_ instance.
func (me *XsdGoPkgHasElem_bool2choicefx_annotate_groupschema_Bool2_Tbool2Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool2choicefx_annotate_groupschema_Bool2_Tbool2Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_stringchoicefx_annotate_groupschema_String_XsdtString_ struct {
	String xsdt.String `xml:"http://www.collada.org/2008/03/COLLADASchema string"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_stringchoicefx_annotate_groupschema_String_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stringchoicefx_annotate_groupschema_String_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_stringchoicefx_annotate_groupschema_String_XsdtString_ instance.
func (me *XsdGoPkgHasElem_stringchoicefx_annotate_groupschema_String_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_stringchoicefx_annotate_groupschema_String_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tint2Type TlistOfIntsType

//	Since Tint2Type is just a simple String type, this merely sets the current value from the specified string.
func (me *Tint2Type) Set(s string) { (*TlistOfIntsType)(me).Set(s) }

//	Since Tint2Type is just a simple String type, this merely returns the current string value.
func (me Tint2Type) String() string { return TlistOfIntsType(me).String() }

//	This convenience method just performs a simple type conversion to Tint2Type's alias type TlistOfIntsType.
func (me Tint2Type) ToTlistOfIntsType() TlistOfIntsType { return TlistOfIntsType(me) }

type XsdGoPkgHasElem_int2choicefx_annotate_groupschema_Int2_Tint2Type_ struct {
	Int2 Tint2Type `xml:"http://www.collada.org/2008/03/COLLADASchema int2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int2choicefx_annotate_groupschema_Int2_Tint2Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int2choicefx_annotate_groupschema_Int2_Tint2Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int2choicefx_annotate_groupschema_Int2_Tint2Type_ instance.
func (me *XsdGoPkgHasElem_int2choicefx_annotate_groupschema_Int2_Tint2Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int2choicefx_annotate_groupschema_Int2_Tint2Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tfloat2X2Type TlistOfFloatsType

//	Since Tfloat2X2Type is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat2X2Type) Set(s string) { (*TlistOfFloatsType)(me).Set(s) }

//	This convenience method just performs a simple type conversion to Tfloat2X2Type's alias type TlistOfFloatsType.
func (me Tfloat2X2Type) ToTlistOfFloatsType() TlistOfFloatsType { return TlistOfFloatsType(me) }

//	Since Tfloat2X2Type is just a simple String type, this merely returns the current string value.
func (me Tfloat2X2Type) String() string { return TlistOfFloatsType(me).String() }

type XsdGoPkgHasElem_float2x2choicefx_annotate_groupschema_Float2X2_Tfloat2X2Type_ struct {
	Float2X2 Tfloat2X2Type `xml:"http://www.collada.org/2008/03/COLLADASchema float2x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float2x2choicefx_annotate_groupschema_Float2X2_Tfloat2X2Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float2x2choicefx_annotate_groupschema_Float2X2_Tfloat2X2Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float2x2choicefx_annotate_groupschema_Float2X2_Tfloat2X2Type_ instance.
func (me *XsdGoPkgHasElem_float2x2choicefx_annotate_groupschema_Float2X2_Tfloat2X2Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float2x2choicefx_annotate_groupschema_Float2X2_Tfloat2X2Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tint3Type TlistOfIntsType

//	Since Tint3Type is just a simple String type, this merely returns the current string value.
func (me Tint3Type) String() string { return TlistOfIntsType(me).String() }

//	This convenience method just performs a simple type conversion to Tint3Type's alias type TlistOfIntsType.
func (me Tint3Type) ToTlistOfIntsType() TlistOfIntsType { return TlistOfIntsType(me) }

//	Since Tint3Type is just a simple String type, this merely sets the current value from the specified string.
func (me *Tint3Type) Set(s string) { (*TlistOfIntsType)(me).Set(s) }

type XsdGoPkgHasElem_int3choicefx_annotate_groupschema_Int3_Tint3Type_ struct {
	Int3 Tint3Type `xml:"http://www.collada.org/2008/03/COLLADASchema int3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int3choicefx_annotate_groupschema_Int3_Tint3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int3choicefx_annotate_groupschema_Int3_Tint3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int3choicefx_annotate_groupschema_Int3_Tint3Type_ instance.
func (me *XsdGoPkgHasElem_int3choicefx_annotate_groupschema_Int3_Tint3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int3choicefx_annotate_groupschema_Int3_Tint3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tbool4Type TlistOfBoolsType

//	This convenience method just performs a simple type conversion to Tbool4Type's alias type TlistOfBoolsType.
func (me Tbool4Type) ToTlistOfBoolsType() TlistOfBoolsType { return TlistOfBoolsType(me) }

//	Since Tbool4Type is just a simple String type, this merely sets the current value from the specified string.
func (me *Tbool4Type) Set(s string) { (*TlistOfBoolsType)(me).Set(s) }

//	Since Tbool4Type is just a simple String type, this merely returns the current string value.
func (me Tbool4Type) String() string { return TlistOfBoolsType(me).String() }

type XsdGoPkgHasElem_bool4choicefx_annotate_groupschema_Bool4_Tbool4Type_ struct {
	Bool4 Tbool4Type `xml:"http://www.collada.org/2008/03/COLLADASchema bool4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool4choicefx_annotate_groupschema_Bool4_Tbool4Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool4choicefx_annotate_groupschema_Bool4_Tbool4Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool4choicefx_annotate_groupschema_Bool4_Tbool4Type_ instance.
func (me *XsdGoPkgHasElem_bool4choicefx_annotate_groupschema_Bool4_Tbool4Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool4choicefx_annotate_groupschema_Bool4_Tbool4Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_float4choicefx_annotate_groupschema_Float4_Tfloat4Type_ struct {
	Float4 Tfloat4Type `xml:"http://www.collada.org/2008/03/COLLADASchema float4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float4choicefx_annotate_groupschema_Float4_Tfloat4Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float4choicefx_annotate_groupschema_Float4_Tfloat4Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float4choicefx_annotate_groupschema_Float4_Tfloat4Type_ instance.
func (me *XsdGoPkgHasElem_float4choicefx_annotate_groupschema_Float4_Tfloat4Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float4choicefx_annotate_groupschema_Float4_Tfloat4Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tbool3Type TlistOfBoolsType

//	This convenience method just performs a simple type conversion to Tbool3Type's alias type TlistOfBoolsType.
func (me Tbool3Type) ToTlistOfBoolsType() TlistOfBoolsType { return TlistOfBoolsType(me) }

//	Since Tbool3Type is just a simple String type, this merely sets the current value from the specified string.
func (me *Tbool3Type) Set(s string) { (*TlistOfBoolsType)(me).Set(s) }

//	Since Tbool3Type is just a simple String type, this merely returns the current string value.
func (me Tbool3Type) String() string { return TlistOfBoolsType(me).String() }

type XsdGoPkgHasElem_bool3choicefx_annotate_groupschema_Bool3_Tbool3Type_ struct {
	Bool3 Tbool3Type `xml:"http://www.collada.org/2008/03/COLLADASchema bool3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool3choicefx_annotate_groupschema_Bool3_Tbool3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool3choicefx_annotate_groupschema_Bool3_Tbool3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool3choicefx_annotate_groupschema_Bool3_Tbool3Type_ instance.
func (me *XsdGoPkgHasElem_bool3choicefx_annotate_groupschema_Bool3_Tbool3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool3choicefx_annotate_groupschema_Bool3_Tbool3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasGroup_FxAnnotateGroup struct {
	XsdGoPkgHasElem_int2choicefx_annotate_groupschema_Int2_Tint2Type_

	XsdGoPkgHasElem_float2x2choicefx_annotate_groupschema_Float2X2_Tfloat2X2Type_

	XsdGoPkgHasElem_int3choicefx_annotate_groupschema_Int3_Tint3Type_

	XsdGoPkgHasElem_bool4choicefx_annotate_groupschema_Bool4_Tbool4Type_

	XsdGoPkgHasElem_float4choicefx_annotate_groupschema_Float4_Tfloat4Type_

	XsdGoPkgHasElem_bool3choicefx_annotate_groupschema_Bool3_Tbool3Type_

	XsdGoPkgHasElem_float2choicefx_annotate_groupschema_Float2_Tfloat2Type_

	XsdGoPkgHasElem_boolchoicekinematics_newparam_typeschema_Bool_XsdtBoolean_

	XsdGoPkgHasElem_float3x3choicefx_annotate_groupschema_Float3X3_Tfloat3X3Type_

	XsdGoPkgHasElem_int4choicefx_annotate_groupschema_Int4_Tint4Type_

	XsdGoPkgHasElem_float4x4choicefx_annotate_groupschema_Float4X4_Tfloat4X4Type_

	XsdGoPkgHasElem_float3choicefx_annotate_groupschema_Float3_Tfloat3Type_

	XsdGoPkgHasElem_bool2choicefx_annotate_groupschema_Bool2_Tbool2Type_

	XsdGoPkgHasElem_floatchoicekinematics_newparam_typeschema_Float_TfloatType_

	XsdGoPkgHasElem_intchoicekinematics_newparam_typeschema_Int_TintType_

	XsdGoPkgHasElem_stringchoicefx_annotate_groupschema_String_XsdtString_
}

//	If the WalkHandlers.XsdGoPkgHasGroup_FxAnnotateGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_FxAnnotateGroup instance as the single argument. Then calls the Walk() method on 16/16 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_FxAnnotateGroup instance.
func (me *XsdGoPkgHasGroup_FxAnnotateGroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasGroup_FxAnnotateGroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_float2choicefx_annotate_groupschema_Float2_Tfloat2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_boolchoicekinematics_newparam_typeschema_Bool_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3x3choicefx_annotate_groupschema_Float3X3_Tfloat3X3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int4choicefx_annotate_groupschema_Int4_Tint4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4x4choicefx_annotate_groupschema_Float4X4_Tfloat4X4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3choicefx_annotate_groupschema_Float3_Tfloat3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool2choicefx_annotate_groupschema_Bool2_Tbool2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_floatchoicekinematics_newparam_typeschema_Float_TfloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_intchoicekinematics_newparam_typeschema_Int_TintType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stringchoicefx_annotate_groupschema_String_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int2choicefx_annotate_groupschema_Int2_Tint2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2x2choicefx_annotate_groupschema_Float2X2_Tfloat2X2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int3choicefx_annotate_groupschema_Int3_Tint3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool4choicefx_annotate_groupschema_Bool4_Tbool4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4choicefx_annotate_groupschema_Float4_Tfloat4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool3choicefx_annotate_groupschema_Bool3_Tbool3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TfxAnnotateType struct {
	XsdGoPkgHasAttr_Name_XsdtToken_

	XsdGoPkgHasGroup_FxAnnotateGroup
}

//	If the WalkHandlers.TfxAnnotateType function is not nil (ie. was set by outside code), calls it with this TfxAnnotateType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TfxAnnotateType instance.
func (me *TfxAnnotateType) Walk() (err error) {
	if fn := WalkHandlers.TfxAnnotateType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasGroup_FxAnnotateGroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_annotatesequenceglsl_newparam_typeschema_Annotate_TfxAnnotateType_ struct {
	Annotates []*TfxAnnotateType `xml:"http://www.collada.org/2008/03/COLLADASchema annotate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_annotatesequenceglsl_newparam_typeschema_Annotate_TfxAnnotateType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_annotatesequenceglsl_newparam_typeschema_Annotate_TfxAnnotateType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_annotatesequenceglsl_newparam_typeschema_Annotate_TfxAnnotateType_ instance.
func (me *XsdGoPkgHasElems_annotatesequenceglsl_newparam_typeschema_Annotate_TfxAnnotateType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_annotatesequenceglsl_newparam_typeschema_Annotate_TfxAnnotateType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Annotates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_semanticsequenceglsl_newparam_typeschema_Semantic_XsdtNCName_ struct {
	Semantic xsdt.NCName `xml:"http://www.collada.org/2008/03/COLLADASchema semantic"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_semanticsequenceglsl_newparam_typeschema_Semantic_XsdtNCName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_semanticsequenceglsl_newparam_typeschema_Semantic_XsdtNCName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_semanticsequenceglsl_newparam_typeschema_Semantic_XsdtNCName_ instance.
func (me *XsdGoPkgHasElem_semanticsequenceglsl_newparam_typeschema_Semantic_XsdtNCName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_semanticsequenceglsl_newparam_typeschema_Semantic_XsdtNCName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A group that specifies the allowable types for GLSL profile parameters.
type TglBlendEnum xsdt.String

//	Returns true if the value of this enumerated TglBlendEnum is "ZERO".
func (me TglBlendEnum) IsZero() bool { return me == "ZERO" }

//	This convenience method just performs a simple type conversion to TglBlendEnum's alias type xsdt.String.
func (me TglBlendEnum) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TglBlendEnum is just a simple String type, this merely returns the current string value.
func (me TglBlendEnum) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TglBlendEnum is "SRC_COLOR".
func (me TglBlendEnum) IsSrcColor() bool { return me == "SRC_COLOR" }

//	Returns true if the value of this enumerated TglBlendEnum is "ONE_MINUS_DEST_COLOR".
func (me TglBlendEnum) IsOneMinusDestColor() bool { return me == "ONE_MINUS_DEST_COLOR" }

//	Returns true if the value of this enumerated TglBlendEnum is "ONE_MINUS_CONSTANT_ALPHA".
func (me TglBlendEnum) IsOneMinusConstantAlpha() bool { return me == "ONE_MINUS_CONSTANT_ALPHA" }

//	Returns true if the value of this enumerated TglBlendEnum is "ONE_MINUS_DST_ALPHA".
func (me TglBlendEnum) IsOneMinusDstAlpha() bool { return me == "ONE_MINUS_DST_ALPHA" }

//	Returns true if the value of this enumerated TglBlendEnum is "ONE_MINUS_SRC_ALPHA".
func (me TglBlendEnum) IsOneMinusSrcAlpha() bool { return me == "ONE_MINUS_SRC_ALPHA" }

//	Returns true if the value of this enumerated TglBlendEnum is "DEST_COLOR".
func (me TglBlendEnum) IsDestColor() bool { return me == "DEST_COLOR" }

//	Returns true if the value of this enumerated TglBlendEnum is "CONSTANT_COLOR".
func (me TglBlendEnum) IsConstantColor() bool { return me == "CONSTANT_COLOR" }

//	Returns true if the value of this enumerated TglBlendEnum is "ONE".
func (me TglBlendEnum) IsOne() bool { return me == "ONE" }

//	Returns true if the value of this enumerated TglBlendEnum is "DST_ALPHA".
func (me TglBlendEnum) IsDstAlpha() bool { return me == "DST_ALPHA" }

//	Returns true if the value of this enumerated TglBlendEnum is "ONE_MINUS_CONSTANT_COLOR".
func (me TglBlendEnum) IsOneMinusConstantColor() bool { return me == "ONE_MINUS_CONSTANT_COLOR" }

//	Returns true if the value of this enumerated TglBlendEnum is "CONSTANT_ALPHA".
func (me TglBlendEnum) IsConstantAlpha() bool { return me == "CONSTANT_ALPHA" }

//	Returns true if the value of this enumerated TglBlendEnum is "ONE_MINUS_SRC_COLOR".
func (me TglBlendEnum) IsOneMinusSrcColor() bool { return me == "ONE_MINUS_SRC_COLOR" }

//	Since TglBlendEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TglBlendEnum) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TglBlendEnum is "SRC_ALPHA".
func (me TglBlendEnum) IsSrcAlpha() bool { return me == "SRC_ALPHA" }

//	Returns true if the value of this enumerated TglBlendEnum is "SRC_ALPHA_SATURATE".
func (me TglBlendEnum) IsSrcAlphaSaturate() bool { return me == "SRC_ALPHA_SATURATE" }

type TglFuncEnum xsdt.String

//	Since TglFuncEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TglFuncEnum) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TglFuncEnum is "NOTEQUAL".
func (me TglFuncEnum) IsNotequal() bool { return me == "NOTEQUAL" }

//	Returns true if the value of this enumerated TglFuncEnum is "GEQUAL".
func (me TglFuncEnum) IsGequal() bool { return me == "GEQUAL" }

//	This convenience method just performs a simple type conversion to TglFuncEnum's alias type xsdt.String.
func (me TglFuncEnum) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TglFuncEnum is "ALWAYS".
func (me TglFuncEnum) IsAlways() bool { return me == "ALWAYS" }

//	Returns true if the value of this enumerated TglFuncEnum is "NEVER".
func (me TglFuncEnum) IsNever() bool { return me == "NEVER" }

//	Returns true if the value of this enumerated TglFuncEnum is "GREATER".
func (me TglFuncEnum) IsGreater() bool { return me == "GREATER" }

//	Since TglFuncEnum is just a simple String type, this merely returns the current string value.
func (me TglFuncEnum) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TglFuncEnum is "EQUAL".
func (me TglFuncEnum) IsEqual() bool { return me == "EQUAL" }

//	Returns true if the value of this enumerated TglFuncEnum is "LESS".
func (me TglFuncEnum) IsLess() bool { return me == "LESS" }

//	Returns true if the value of this enumerated TglFuncEnum is "LEQUAL".
func (me TglFuncEnum) IsLequal() bool { return me == "LEQUAL" }

type TglFogCoordSrcEnum xsdt.String

//	Since TglFogCoordSrcEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TglFogCoordSrcEnum) Set(s string) { (*xsdt.String)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TglFogCoordSrcEnum's alias type xsdt.String.
func (me TglFogCoordSrcEnum) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TglFogCoordSrcEnum is "FRAGMENT_DEPTH".
func (me TglFogCoordSrcEnum) IsFragmentDepth() bool { return me == "FRAGMENT_DEPTH" }

//	Since TglFogCoordSrcEnum is just a simple String type, this merely returns the current string value.
func (me TglFogCoordSrcEnum) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TglFogCoordSrcEnum is "FOG_COORDINATE".
func (me TglFogCoordSrcEnum) IsFogCoordinate() bool { return me == "FOG_COORDINATE" }

type TglBlendEquationEnum xsdt.String

//	Returns true if the value of this enumerated TglBlendEquationEnum is "FUNC_ADD".
func (me TglBlendEquationEnum) IsFuncAdd() bool { return me == "FUNC_ADD" }

//	Returns true if the value of this enumerated TglBlendEquationEnum is "FUNC_REVERSE_SUBTRACT".
func (me TglBlendEquationEnum) IsFuncReverseSubtract() bool { return me == "FUNC_REVERSE_SUBTRACT" }

//	Returns true if the value of this enumerated TglBlendEquationEnum is "MAX".
func (me TglBlendEquationEnum) IsMax() bool { return me == "MAX" }

//	Returns true if the value of this enumerated TglBlendEquationEnum is "FUNC_SUBTRACT".
func (me TglBlendEquationEnum) IsFuncSubtract() bool { return me == "FUNC_SUBTRACT" }

//	Since TglBlendEquationEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TglBlendEquationEnum) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TglBlendEquationEnum is "MIN".
func (me TglBlendEquationEnum) IsMin() bool { return me == "MIN" }

//	This convenience method just performs a simple type conversion to TglBlendEquationEnum's alias type xsdt.String.
func (me TglBlendEquationEnum) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TglBlendEquationEnum is just a simple String type, this merely returns the current string value.
func (me TglBlendEquationEnum) String() string { return xsdt.String(me).String() }

type TglFrontFaceEnum xsdt.String

//	Since TglFrontFaceEnum is just a simple String type, this merely returns the current string value.
func (me TglFrontFaceEnum) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TglFrontFaceEnum is "CW".
func (me TglFrontFaceEnum) IsCw() bool { return me == "CW" }

//	Returns true if the value of this enumerated TglFrontFaceEnum is "CCW".
func (me TglFrontFaceEnum) IsCcw() bool { return me == "CCW" }

//	Since TglFrontFaceEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TglFrontFaceEnum) Set(s string) { (*xsdt.String)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TglFrontFaceEnum's alias type xsdt.String.
func (me TglFrontFaceEnum) ToXsdtString() xsdt.String { return xsdt.String(me) }

type TglLogicOpEnum xsdt.String

//	Returns true if the value of this enumerated TglLogicOpEnum is "NOOP".
func (me TglLogicOpEnum) IsNoop() bool { return me == "NOOP" }

//	Returns true if the value of this enumerated TglLogicOpEnum is "NOR".
func (me TglLogicOpEnum) IsNor() bool { return me == "NOR" }

//	Returns true if the value of this enumerated TglLogicOpEnum is "INVERT".
func (me TglLogicOpEnum) IsInvert() bool { return me == "INVERT" }

//	Returns true if the value of this enumerated TglLogicOpEnum is "COPY_INVERTED".
func (me TglLogicOpEnum) IsCopyInverted() bool { return me == "COPY_INVERTED" }

//	Returns true if the value of this enumerated TglLogicOpEnum is "OR".
func (me TglLogicOpEnum) IsOr() bool { return me == "OR" }

//	Returns true if the value of this enumerated TglLogicOpEnum is "EQUIV".
func (me TglLogicOpEnum) IsEquiv() bool { return me == "EQUIV" }

//	Returns true if the value of this enumerated TglLogicOpEnum is "AND_REVERSE".
func (me TglLogicOpEnum) IsAndReverse() bool { return me == "AND_REVERSE" }

//	Since TglLogicOpEnum is just a simple String type, this merely returns the current string value.
func (me TglLogicOpEnum) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TglLogicOpEnum is "AND".
func (me TglLogicOpEnum) IsAnd() bool { return me == "AND" }

//	This convenience method just performs a simple type conversion to TglLogicOpEnum's alias type xsdt.String.
func (me TglLogicOpEnum) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TglLogicOpEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TglLogicOpEnum) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TglLogicOpEnum is "SET".
func (me TglLogicOpEnum) IsSet() bool { return me == "SET" }

//	Returns true if the value of this enumerated TglLogicOpEnum is "CLEAR".
func (me TglLogicOpEnum) IsClear() bool { return me == "CLEAR" }

//	Returns true if the value of this enumerated TglLogicOpEnum is "COPY".
func (me TglLogicOpEnum) IsCopy() bool { return me == "COPY" }

//	Returns true if the value of this enumerated TglLogicOpEnum is "NAND".
func (me TglLogicOpEnum) IsNand() bool { return me == "NAND" }

//	Returns true if the value of this enumerated TglLogicOpEnum is "XOR".
func (me TglLogicOpEnum) IsXor() bool { return me == "XOR" }

//	Returns true if the value of this enumerated TglLogicOpEnum is "OR_REVERSE".
func (me TglLogicOpEnum) IsOrReverse() bool { return me == "OR_REVERSE" }

//	Returns true if the value of this enumerated TglLogicOpEnum is "AND_INVERTED".
func (me TglLogicOpEnum) IsAndInverted() bool { return me == "AND_INVERTED" }

type TglPolygonModeEnum xsdt.String

//	Returns true if the value of this enumerated TglPolygonModeEnum is "LINE".
func (me TglPolygonModeEnum) IsLine() bool { return me == "LINE" }

//	Returns true if the value of this enumerated TglPolygonModeEnum is "POINT".
func (me TglPolygonModeEnum) IsPoint() bool { return me == "POINT" }

//	Since TglPolygonModeEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TglPolygonModeEnum) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TglPolygonModeEnum is "FILL".
func (me TglPolygonModeEnum) IsFill() bool { return me == "FILL" }

//	Since TglPolygonModeEnum is just a simple String type, this merely returns the current string value.
func (me TglPolygonModeEnum) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TglPolygonModeEnum's alias type xsdt.String.
func (me TglPolygonModeEnum) ToXsdtString() xsdt.String { return xsdt.String(me) }

type TglShadeModelEnum xsdt.String

//	Since TglShadeModelEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TglShadeModelEnum) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TglShadeModelEnum is "SMOOTH".
func (me TglShadeModelEnum) IsSmooth() bool { return me == "SMOOTH" }

//	Since TglShadeModelEnum is just a simple String type, this merely returns the current string value.
func (me TglShadeModelEnum) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TglShadeModelEnum's alias type xsdt.String.
func (me TglShadeModelEnum) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TglShadeModelEnum is "FLAT".
func (me TglShadeModelEnum) IsFlat() bool { return me == "FLAT" }

type TglFaceEnum xsdt.String

//	Returns true if the value of this enumerated TglFaceEnum is "FRONT".
func (me TglFaceEnum) IsFront() bool { return me == "FRONT" }

//	Returns true if the value of this enumerated TglFaceEnum is "FRONT_AND_BACK".
func (me TglFaceEnum) IsFrontAndBack() bool { return me == "FRONT_AND_BACK" }

//	Returns true if the value of this enumerated TglFaceEnum is "BACK".
func (me TglFaceEnum) IsBack() bool { return me == "BACK" }

//	Since TglFaceEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TglFaceEnum) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TglFaceEnum is just a simple String type, this merely returns the current string value.
func (me TglFaceEnum) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TglFaceEnum's alias type xsdt.String.
func (me TglFaceEnum) ToXsdtString() xsdt.String { return xsdt.String(me) }

type TglFogEnum xsdt.String

//	Since TglFogEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TglFogEnum) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TglFogEnum is "EXP".
func (me TglFogEnum) IsExp() bool { return me == "EXP" }

//	Returns true if the value of this enumerated TglFogEnum is "EXP2".
func (me TglFogEnum) IsExp2() bool { return me == "EXP2" }

//	This convenience method just performs a simple type conversion to TglFogEnum's alias type xsdt.String.
func (me TglFogEnum) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TglFogEnum is just a simple String type, this merely returns the current string value.
func (me TglFogEnum) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TglFogEnum is "LINEAR".
func (me TglFogEnum) IsLinear() bool { return me == "LINEAR" }

type TglStencilOpEnum xsdt.String

//	Since TglStencilOpEnum is just a simple String type, this merely returns the current string value.
func (me TglStencilOpEnum) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TglStencilOpEnum's alias type xsdt.String.
func (me TglStencilOpEnum) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TglStencilOpEnum is "ZERO".
func (me TglStencilOpEnum) IsZero() bool { return me == "ZERO" }

//	Returns true if the value of this enumerated TglStencilOpEnum is "INCR_WRAP".
func (me TglStencilOpEnum) IsIncrWrap() bool { return me == "INCR_WRAP" }

//	Returns true if the value of this enumerated TglStencilOpEnum is "REPLACE".
func (me TglStencilOpEnum) IsReplace() bool { return me == "REPLACE" }

//	Returns true if the value of this enumerated TglStencilOpEnum is "KEEP".
func (me TglStencilOpEnum) IsKeep() bool { return me == "KEEP" }

//	Returns true if the value of this enumerated TglStencilOpEnum is "INVERT".
func (me TglStencilOpEnum) IsInvert() bool { return me == "INVERT" }

//	Returns true if the value of this enumerated TglStencilOpEnum is "INCR".
func (me TglStencilOpEnum) IsIncr() bool { return me == "INCR" }

//	Since TglStencilOpEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TglStencilOpEnum) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TglStencilOpEnum is "DECR".
func (me TglStencilOpEnum) IsDecr() bool { return me == "DECR" }

//	Returns true if the value of this enumerated TglStencilOpEnum is "DECR_WRAP".
func (me TglStencilOpEnum) IsDecrWrap() bool { return me == "DECR_WRAP" }

type TglMaterialEnum xsdt.String

//	Since TglMaterialEnum is just a simple String type, this merely returns the current string value.
func (me TglMaterialEnum) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TglMaterialEnum is "DIFFUSE".
func (me TglMaterialEnum) IsDiffuse() bool { return me == "DIFFUSE" }

//	Returns true if the value of this enumerated TglMaterialEnum is "AMBIENT_AND_DIFFUSE".
func (me TglMaterialEnum) IsAmbientAndDiffuse() bool { return me == "AMBIENT_AND_DIFFUSE" }

//	Returns true if the value of this enumerated TglMaterialEnum is "AMBIENT".
func (me TglMaterialEnum) IsAmbient() bool { return me == "AMBIENT" }

//	Returns true if the value of this enumerated TglMaterialEnum is "SPECULAR".
func (me TglMaterialEnum) IsSpecular() bool { return me == "SPECULAR" }

//	Returns true if the value of this enumerated TglMaterialEnum is "EMISSION".
func (me TglMaterialEnum) IsEmission() bool { return me == "EMISSION" }

//	This convenience method just performs a simple type conversion to TglMaterialEnum's alias type xsdt.String.
func (me TglMaterialEnum) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TglMaterialEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TglMaterialEnum) Set(s string) { (*xsdt.String)(me).Set(s) }

type TglLightModelColorControlEnum xsdt.String

//	Since TglLightModelColorControlEnum is just a simple String type, this merely returns the current string value.
func (me TglLightModelColorControlEnum) String() string { return xsdt.String(me).String() }

//	Since TglLightModelColorControlEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TglLightModelColorControlEnum) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TglLightModelColorControlEnum is "SINGLE_COLOR".
func (me TglLightModelColorControlEnum) IsSingleColor() bool { return me == "SINGLE_COLOR" }

//	This convenience method just performs a simple type conversion to TglLightModelColorControlEnum's alias type xsdt.String.
func (me TglLightModelColorControlEnum) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TglLightModelColorControlEnum is "SEPARATE_SPECULAR_COLOR".
func (me TglLightModelColorControlEnum) IsSeparateSpecularColor() bool {
	return me == "SEPARATE_SPECULAR_COLOR"
}

type TglEnumerationType xsdt.String

//	TglEnumerationType is an XSD union-type of several types. This is a simple type conversion to TglFrontFaceEnum, but keep in mind the actual value may or may not be a valid TglFrontFaceEnum value.
func (me TglEnumerationType) ToTglFrontFaceEnum() TglFrontFaceEnum { return TglFrontFaceEnum(me) }

//	TglEnumerationType is an XSD union-type of several types. This is a simple type conversion to TglLogicOpEnum, but keep in mind the actual value may or may not be a valid TglLogicOpEnum value.
func (me TglEnumerationType) ToTglLogicOpEnum() TglLogicOpEnum { return TglLogicOpEnum(me) }

//	Since TglEnumerationType is just a simple String type, this merely returns the current string value.
func (me TglEnumerationType) String() string { return xsdt.String(me).String() }

//	TglEnumerationType is an XSD union-type of several types. This is a simple type conversion to TglPolygonModeEnum, but keep in mind the actual value may or may not be a valid TglPolygonModeEnum value.
func (me TglEnumerationType) ToTglPolygonModeEnum() TglPolygonModeEnum { return TglPolygonModeEnum(me) }

//	TglEnumerationType is an XSD union-type of several types. This is a simple type conversion to TglShadeModelEnum, but keep in mind the actual value may or may not be a valid TglShadeModelEnum value.
func (me TglEnumerationType) ToTglShadeModelEnum() TglShadeModelEnum { return TglShadeModelEnum(me) }

//	Since TglEnumerationType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglEnumerationType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	TglEnumerationType is an XSD union-type of several types. This is a simple type conversion to TglFaceEnum, but keep in mind the actual value may or may not be a valid TglFaceEnum value.
func (me TglEnumerationType) ToTglFaceEnum() TglFaceEnum { return TglFaceEnum(me) }

//	TglEnumerationType is an XSD union-type of several types. This is a simple type conversion to TglFogEnum, but keep in mind the actual value may or may not be a valid TglFogEnum value.
func (me TglEnumerationType) ToTglFogEnum() TglFogEnum { return TglFogEnum(me) }

//	TglEnumerationType is an XSD union-type of several types. This is a simple type conversion to TglStencilOpEnum, but keep in mind the actual value may or may not be a valid TglStencilOpEnum value.
func (me TglEnumerationType) ToTglStencilOpEnum() TglStencilOpEnum { return TglStencilOpEnum(me) }

//	TglEnumerationType is an XSD union-type of several types. This is a simple type conversion to TglMaterialEnum, but keep in mind the actual value may or may not be a valid TglMaterialEnum value.
func (me TglEnumerationType) ToTglMaterialEnum() TglMaterialEnum { return TglMaterialEnum(me) }

//	TglEnumerationType is an XSD union-type of several types. This is a simple type conversion to TglLightModelColorControlEnum, but keep in mind the actual value may or may not be a valid TglLightModelColorControlEnum value.
func (me TglEnumerationType) ToTglLightModelColorControlEnum() TglLightModelColorControlEnum {
	return TglLightModelColorControlEnum(me)
}

//	TglEnumerationType is an XSD union-type of several types. This is a simple type conversion to TglBlendEnum, but keep in mind the actual value may or may not be a valid TglBlendEnum value.
func (me TglEnumerationType) ToTglBlendEnum() TglBlendEnum { return TglBlendEnum(me) }

//	TglEnumerationType is an XSD union-type of several types. This is a simple type conversion to TglFuncEnum, but keep in mind the actual value may or may not be a valid TglFuncEnum value.
func (me TglEnumerationType) ToTglFuncEnum() TglFuncEnum { return TglFuncEnum(me) }

//	TglEnumerationType is an XSD union-type of several types. This is a simple type conversion to TglFogCoordSrcEnum, but keep in mind the actual value may or may not be a valid TglFogCoordSrcEnum value.
func (me TglEnumerationType) ToTglFogCoordSrcEnum() TglFogCoordSrcEnum { return TglFogCoordSrcEnum(me) }

//	TglEnumerationType is an XSD union-type of several types. This is a simple type conversion to TglBlendEquationEnum, but keep in mind the actual value may or may not be a valid TglBlendEquationEnum value.
func (me TglEnumerationType) ToTglBlendEquationEnum() TglBlendEquationEnum {
	return TglBlendEquationEnum(me)
}

//	This convenience method just performs a simple type conversion to TglEnumerationType's alias type xsdt.String.
func (me TglEnumerationType) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_enumchoiceglsl_value_groupschema_Enum_TglEnumerationType_ struct {
	Enum TglEnumerationType `xml:"http://www.collada.org/2008/03/COLLADASchema enum"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_enumchoiceglsl_value_groupschema_Enum_TglEnumerationType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_enumchoiceglsl_value_groupschema_Enum_TglEnumerationType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_enumchoiceglsl_value_groupschema_Enum_TglEnumerationType_ instance.
func (me *XsdGoPkgHasElem_enumchoiceglsl_value_groupschema_Enum_TglEnumerationType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_enumchoiceglsl_value_groupschema_Enum_TglEnumerationType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A three-dimensional texture sampler.
//	Sampling state that can be sharable between samplers because there is often heavy re-use
//	level-of-detail index of largest map to use. Values range from 0 to (n - 1) where 0 is the largest. The default value is zero
type XsdGoPkgHasElem_mip_max_levelsequencefx_sampler_states_groupschema_MipMaxLevel_XsdtUnsignedByte_0 struct {
	//	level-of-detail index of largest map to use. Values range from 0 to (n - 1) where 0 is the largest. The default value is zero
	MipMaxLevel xsdt.UnsignedByte `xml:"http://www.collada.org/2008/03/COLLADASchema mip_max_level"`
}

//	Returns the default value for MipMaxLevel -- 0
func (me XsdGoPkgHasElem_mip_max_levelsequencefx_sampler_states_groupschema_MipMaxLevel_XsdtUnsignedByte_0) MipMaxLevelDefault() xsdt.UnsignedByte {
	return xsdt.UnsignedByte(0)
}

//	If the WalkHandlers.XsdGoPkgHasElem_mip_max_levelsequencefx_sampler_states_groupschema_MipMaxLevel_XsdtUnsignedByte_0 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mip_max_levelsequencefx_sampler_states_groupschema_MipMaxLevel_XsdtUnsignedByte_0 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_mip_max_levelsequencefx_sampler_states_groupschema_MipMaxLevel_XsdtUnsignedByte_0 instance.
func (me *XsdGoPkgHasElem_mip_max_levelsequencefx_sampler_states_groupschema_MipMaxLevel_XsdtUnsignedByte_0) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_mip_max_levelsequencefx_sampler_states_groupschema_MipMaxLevel_XsdtUnsignedByte_0; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TfxSamplerWrapEnum xsdt.Nmtoken

//	Returns true if the value of this enumerated TfxSamplerWrapEnum is "BORDER".
func (me TfxSamplerWrapEnum) IsBorder() bool { return me == "BORDER" }

//	Since TfxSamplerWrapEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxSamplerWrapEnum) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TfxSamplerWrapEnum is just a simple String type, this merely returns the current string value.
func (me TfxSamplerWrapEnum) String() string { return xsdt.Nmtoken(me).String() }

//	Returns true if the value of this enumerated TfxSamplerWrapEnum is "WRAP".
func (me TfxSamplerWrapEnum) IsWrap() bool { return me == "WRAP" }

//	This convenience method just performs a simple type conversion to TfxSamplerWrapEnum's alias type xsdt.Nmtoken.
func (me TfxSamplerWrapEnum) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TfxSamplerWrapEnum is "MIRROR_ONCE".
func (me TfxSamplerWrapEnum) IsMirrorOnce() bool { return me == "MIRROR_ONCE" }

//	Returns true if the value of this enumerated TfxSamplerWrapEnum is "CLAMP".
func (me TfxSamplerWrapEnum) IsClamp() bool { return me == "CLAMP" }

//	Returns true if the value of this enumerated TfxSamplerWrapEnum is "MIRROR".
func (me TfxSamplerWrapEnum) IsMirror() bool { return me == "MIRROR" }

type XsdGoPkgHasElem_wrap_psequencefx_sampler_states_groupschema_WrapP_TfxSamplerWrapEnum_Wrap struct {
	WrapP TfxSamplerWrapEnum `xml:"http://www.collada.org/2008/03/COLLADASchema wrap_p"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_wrap_psequencefx_sampler_states_groupschema_WrapP_TfxSamplerWrapEnum_Wrap function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_wrap_psequencefx_sampler_states_groupschema_WrapP_TfxSamplerWrapEnum_Wrap instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_wrap_psequencefx_sampler_states_groupschema_WrapP_TfxSamplerWrapEnum_Wrap instance.
func (me *XsdGoPkgHasElem_wrap_psequencefx_sampler_states_groupschema_WrapP_TfxSamplerWrapEnum_Wrap) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_wrap_psequencefx_sampler_states_groupschema_WrapP_TfxSamplerWrapEnum_Wrap; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for WrapP -- "WRAP"
func (me XsdGoPkgHasElem_wrap_psequencefx_sampler_states_groupschema_WrapP_TfxSamplerWrapEnum_Wrap) WrapPDefault() TfxSamplerWrapEnum {
	return TfxSamplerWrapEnum("WRAP")
}

//	number of samples that may be used durring anisotropic filtering
type XsdGoPkgHasElem_max_anisotropysequencefx_sampler_states_groupschema_MaxAnisotropy_XsdtUnsignedInt_1 struct {
	//	number of samples that may be used durring anisotropic filtering
	MaxAnisotropy xsdt.UnsignedInt `xml:"http://www.collada.org/2008/03/COLLADASchema max_anisotropy"`
}

//	Returns the default value for MaxAnisotropy -- 1
func (me XsdGoPkgHasElem_max_anisotropysequencefx_sampler_states_groupschema_MaxAnisotropy_XsdtUnsignedInt_1) MaxAnisotropyDefault() xsdt.UnsignedInt {
	return xsdt.UnsignedInt(1)
}

//	If the WalkHandlers.XsdGoPkgHasElem_max_anisotropysequencefx_sampler_states_groupschema_MaxAnisotropy_XsdtUnsignedInt_1 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_max_anisotropysequencefx_sampler_states_groupschema_MaxAnisotropy_XsdtUnsignedInt_1 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_max_anisotropysequencefx_sampler_states_groupschema_MaxAnisotropy_XsdtUnsignedInt_1 instance.
func (me *XsdGoPkgHasElem_max_anisotropysequencefx_sampler_states_groupschema_MaxAnisotropy_XsdtUnsignedInt_1) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_max_anisotropysequencefx_sampler_states_groupschema_MaxAnisotropy_XsdtUnsignedInt_1; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_wrap_tsequencefx_sampler_states_groupschema_WrapT_TfxSamplerWrapEnum_Wrap struct {
	WrapT TfxSamplerWrapEnum `xml:"http://www.collada.org/2008/03/COLLADASchema wrap_t"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_wrap_tsequencefx_sampler_states_groupschema_WrapT_TfxSamplerWrapEnum_Wrap function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_wrap_tsequencefx_sampler_states_groupschema_WrapT_TfxSamplerWrapEnum_Wrap instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_wrap_tsequencefx_sampler_states_groupschema_WrapT_TfxSamplerWrapEnum_Wrap instance.
func (me *XsdGoPkgHasElem_wrap_tsequencefx_sampler_states_groupschema_WrapT_TfxSamplerWrapEnum_Wrap) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_wrap_tsequencefx_sampler_states_groupschema_WrapT_TfxSamplerWrapEnum_Wrap; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for WrapT -- "WRAP"
func (me XsdGoPkgHasElem_wrap_tsequencefx_sampler_states_groupschema_WrapT_TfxSamplerWrapEnum_Wrap) WrapTDefault() TfxSamplerWrapEnum {
	return TfxSamplerWrapEnum("WRAP")
}

//	magnification
type TfxSamplerMagFilterEnum xsdt.Nmtoken

//	Returns true if the value of this enumerated TfxSamplerMagFilterEnum is "NEAREST".
func (me TfxSamplerMagFilterEnum) IsNearest() bool { return me == "NEAREST" }

//	Since TfxSamplerMagFilterEnum is just a simple String type, this merely returns the current string value.
func (me TfxSamplerMagFilterEnum) String() string { return xsdt.Nmtoken(me).String() }

//	Since TfxSamplerMagFilterEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxSamplerMagFilterEnum) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TfxSamplerMagFilterEnum's alias type xsdt.Nmtoken.
func (me TfxSamplerMagFilterEnum) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TfxSamplerMagFilterEnum is "LINEAR".
func (me TfxSamplerMagFilterEnum) IsLinear() bool { return me == "LINEAR" }

type XsdGoPkgHasElem_magfiltersequencefx_sampler_states_groupschema_Magfilter_TfxSamplerMagFilterEnum_Linear struct {
	//	magnification
	Magfilter TfxSamplerMagFilterEnum `xml:"http://www.collada.org/2008/03/COLLADASchema magfilter"`
}

//	Returns the default value for Magfilter -- "LINEAR"
func (me XsdGoPkgHasElem_magfiltersequencefx_sampler_states_groupschema_Magfilter_TfxSamplerMagFilterEnum_Linear) MagfilterDefault() TfxSamplerMagFilterEnum {
	return TfxSamplerMagFilterEnum("LINEAR")
}

//	If the WalkHandlers.XsdGoPkgHasElem_magfiltersequencefx_sampler_states_groupschema_Magfilter_TfxSamplerMagFilterEnum_Linear function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_magfiltersequencefx_sampler_states_groupschema_Magfilter_TfxSamplerMagFilterEnum_Linear instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_magfiltersequencefx_sampler_states_groupschema_Magfilter_TfxSamplerMagFilterEnum_Linear instance.
func (me *XsdGoPkgHasElem_magfiltersequencefx_sampler_states_groupschema_Magfilter_TfxSamplerMagFilterEnum_Linear) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_magfiltersequencefx_sampler_states_groupschema_Magfilter_TfxSamplerMagFilterEnum_Linear; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TfxColorType Tfloat4Type

//	Since TfxColorType is just a simple String type, this merely returns the current string value.
func (me TfxColorType) String() string { return Tfloat4Type(me).String() }

//	This convenience method just performs a simple type conversion to TfxColorType's alias type Tfloat4Type.
func (me TfxColorType) ToTfloat4Type() Tfloat4Type { return Tfloat4Type(me) }

//	Since TfxColorType is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxColorType) Set(s string) { (*Tfloat4Type)(me).Set(s) }

type XsdGoPkgHasElem_border_colorsequencefx_sampler_states_groupschema_BorderColor_TfxColorType_ struct {
	BorderColor TfxColorType `xml:"http://www.collada.org/2008/03/COLLADASchema border_color"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_border_colorsequencefx_sampler_states_groupschema_BorderColor_TfxColorType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_border_colorsequencefx_sampler_states_groupschema_BorderColor_TfxColorType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_border_colorsequencefx_sampler_states_groupschema_BorderColor_TfxColorType_ instance.
func (me *XsdGoPkgHasElem_border_colorsequencefx_sampler_states_groupschema_BorderColor_TfxColorType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_border_colorsequencefx_sampler_states_groupschema_BorderColor_TfxColorType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	minification
type TfxSamplerMinFilterEnum xsdt.Nmtoken

//	Since TfxSamplerMinFilterEnum is just a simple String type, this merely returns the current string value.
func (me TfxSamplerMinFilterEnum) String() string { return xsdt.Nmtoken(me).String() }

//	Since TfxSamplerMinFilterEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxSamplerMinFilterEnum) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Returns true if the value of this enumerated TfxSamplerMinFilterEnum is "NEAREST".
func (me TfxSamplerMinFilterEnum) IsNearest() bool { return me == "NEAREST" }

//	Returns true if the value of this enumerated TfxSamplerMinFilterEnum is "LINEAR".
func (me TfxSamplerMinFilterEnum) IsLinear() bool { return me == "LINEAR" }

//	This convenience method just performs a simple type conversion to TfxSamplerMinFilterEnum's alias type xsdt.Nmtoken.
func (me TfxSamplerMinFilterEnum) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TfxSamplerMinFilterEnum is "ANISOTROPIC".
func (me TfxSamplerMinFilterEnum) IsAnisotropic() bool { return me == "ANISOTROPIC" }

type XsdGoPkgHasElem_minfiltersequencefx_sampler_states_groupschema_Minfilter_TfxSamplerMinFilterEnum_Linear struct {
	//	minification
	Minfilter TfxSamplerMinFilterEnum `xml:"http://www.collada.org/2008/03/COLLADASchema minfilter"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_minfiltersequencefx_sampler_states_groupschema_Minfilter_TfxSamplerMinFilterEnum_Linear function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_minfiltersequencefx_sampler_states_groupschema_Minfilter_TfxSamplerMinFilterEnum_Linear instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_minfiltersequencefx_sampler_states_groupschema_Minfilter_TfxSamplerMinFilterEnum_Linear instance.
func (me *XsdGoPkgHasElem_minfiltersequencefx_sampler_states_groupschema_Minfilter_TfxSamplerMinFilterEnum_Linear) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_minfiltersequencefx_sampler_states_groupschema_Minfilter_TfxSamplerMinFilterEnum_Linear; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for Minfilter -- "LINEAR"
func (me XsdGoPkgHasElem_minfiltersequencefx_sampler_states_groupschema_Minfilter_TfxSamplerMinFilterEnum_Linear) MinfilterDefault() TfxSamplerMinFilterEnum {
	return TfxSamplerMinFilterEnum("LINEAR")
}

//	Mipmap level-of-detail bias. The default value is zero
type XsdGoPkgHasElem_mip_biassequencefx_sampler_states_groupschema_MipBias_XsdtFloat_00 struct {
	//	Mipmap level-of-detail bias. The default value is zero
	MipBias xsdt.Float `xml:"http://www.collada.org/2008/03/COLLADASchema mip_bias"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_mip_biassequencefx_sampler_states_groupschema_MipBias_XsdtFloat_00 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mip_biassequencefx_sampler_states_groupschema_MipBias_XsdtFloat_00 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_mip_biassequencefx_sampler_states_groupschema_MipBias_XsdtFloat_00 instance.
func (me *XsdGoPkgHasElem_mip_biassequencefx_sampler_states_groupschema_MipBias_XsdtFloat_00) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_mip_biassequencefx_sampler_states_groupschema_MipBias_XsdtFloat_00; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for MipBias -- 0.0
func (me XsdGoPkgHasElem_mip_biassequencefx_sampler_states_groupschema_MipBias_XsdtFloat_00) MipBiasDefault() xsdt.Float {
	return xsdt.Float(0.0)
}

type XsdGoPkgHasElem_wrap_ssequencefx_sampler_states_groupschema_WrapS_TfxSamplerWrapEnum_Wrap struct {
	WrapS TfxSamplerWrapEnum `xml:"http://www.collada.org/2008/03/COLLADASchema wrap_s"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_wrap_ssequencefx_sampler_states_groupschema_WrapS_TfxSamplerWrapEnum_Wrap function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_wrap_ssequencefx_sampler_states_groupschema_WrapS_TfxSamplerWrapEnum_Wrap instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_wrap_ssequencefx_sampler_states_groupschema_WrapS_TfxSamplerWrapEnum_Wrap instance.
func (me *XsdGoPkgHasElem_wrap_ssequencefx_sampler_states_groupschema_WrapS_TfxSamplerWrapEnum_Wrap) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_wrap_ssequencefx_sampler_states_groupschema_WrapS_TfxSamplerWrapEnum_Wrap; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for WrapS -- "WRAP"
func (me XsdGoPkgHasElem_wrap_ssequencefx_sampler_states_groupschema_WrapS_TfxSamplerWrapEnum_Wrap) WrapSDefault() TfxSamplerWrapEnum {
	return TfxSamplerWrapEnum("WRAP")
}

//	filtering across mips.
//	NONE = no minification
//	NEAREST = bilinear
//	LINEAR = trilinear
//	ANISOTROPIC =  Compensates for distortion caused by the difference in angle between the polygon and the plane of the screen.  Relies on max_anisotropy
type TfxSamplerMipFilterEnum xsdt.Nmtoken

//	Returns true if the value of this enumerated TfxSamplerMipFilterEnum is "LINEAR".
func (me TfxSamplerMipFilterEnum) IsLinear() bool { return me == "LINEAR" }

//	Since TfxSamplerMipFilterEnum is just a simple String type, this merely returns the current string value.
func (me TfxSamplerMipFilterEnum) String() string { return xsdt.Nmtoken(me).String() }

//	Returns true if the value of this enumerated TfxSamplerMipFilterEnum is "NONE".
func (me TfxSamplerMipFilterEnum) IsNone() bool { return me == "NONE" }

//	Returns true if the value of this enumerated TfxSamplerMipFilterEnum is "NEAREST".
func (me TfxSamplerMipFilterEnum) IsNearest() bool { return me == "NEAREST" }

//	Since TfxSamplerMipFilterEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxSamplerMipFilterEnum) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TfxSamplerMipFilterEnum's alias type xsdt.Nmtoken.
func (me TfxSamplerMipFilterEnum) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

type XsdGoPkgHasElem_mipfiltersequencefx_sampler_states_groupschema_Mipfilter_TfxSamplerMipFilterEnum_Linear struct {
	//	filtering across mips.
	//	NONE = no minification
	//	NEAREST = bilinear
	//	LINEAR = trilinear
	//	ANISOTROPIC =  Compensates for distortion caused by the difference in angle between the polygon and the plane of the screen.  Relies on max_anisotropy
	Mipfilter TfxSamplerMipFilterEnum `xml:"http://www.collada.org/2008/03/COLLADASchema mipfilter"`
}

//	Returns the default value for Mipfilter -- "LINEAR"
func (me XsdGoPkgHasElem_mipfiltersequencefx_sampler_states_groupschema_Mipfilter_TfxSamplerMipFilterEnum_Linear) MipfilterDefault() TfxSamplerMipFilterEnum {
	return TfxSamplerMipFilterEnum("LINEAR")
}

//	If the WalkHandlers.XsdGoPkgHasElem_mipfiltersequencefx_sampler_states_groupschema_Mipfilter_TfxSamplerMipFilterEnum_Linear function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mipfiltersequencefx_sampler_states_groupschema_Mipfilter_TfxSamplerMipFilterEnum_Linear instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_mipfiltersequencefx_sampler_states_groupschema_Mipfilter_TfxSamplerMipFilterEnum_Linear instance.
func (me *XsdGoPkgHasElem_mipfiltersequencefx_sampler_states_groupschema_Mipfilter_TfxSamplerMipFilterEnum_Linear) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_mipfiltersequencefx_sampler_states_groupschema_Mipfilter_TfxSamplerMipFilterEnum_Linear; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	level-of-detail index of smallest map to use. Values range from 0 to (n - 1) where 0 is the smallest. The default value is zero
type XsdGoPkgHasElem_mip_min_levelsequencefx_sampler_states_groupschema_MipMinLevel_XsdtUnsignedByte_0 struct {
	//	level-of-detail index of smallest map to use. Values range from 0 to (n - 1) where 0 is the smallest. The default value is zero
	MipMinLevel xsdt.UnsignedByte `xml:"http://www.collada.org/2008/03/COLLADASchema mip_min_level"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_mip_min_levelsequencefx_sampler_states_groupschema_MipMinLevel_XsdtUnsignedByte_0 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mip_min_levelsequencefx_sampler_states_groupschema_MipMinLevel_XsdtUnsignedByte_0 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_mip_min_levelsequencefx_sampler_states_groupschema_MipMinLevel_XsdtUnsignedByte_0 instance.
func (me *XsdGoPkgHasElem_mip_min_levelsequencefx_sampler_states_groupschema_MipMinLevel_XsdtUnsignedByte_0) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_mip_min_levelsequencefx_sampler_states_groupschema_MipMinLevel_XsdtUnsignedByte_0; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for MipMinLevel -- 0
func (me XsdGoPkgHasElem_mip_min_levelsequencefx_sampler_states_groupschema_MipMinLevel_XsdtUnsignedByte_0) MipMinLevelDefault() xsdt.UnsignedByte {
	return xsdt.UnsignedByte(0)
}

type XsdGoPkgHasGroup_FxSamplerStatesGroup struct {
	//	level-of-detail index of largest map to use. Values range from 0 to (n - 1) where 0 is the largest. The default value is zero
	XsdGoPkgHasElem_mip_max_levelsequencefx_sampler_states_groupschema_MipMaxLevel_XsdtUnsignedByte_0

	XsdGoPkgHasElem_wrap_psequencefx_sampler_states_groupschema_WrapP_TfxSamplerWrapEnum_Wrap

	//	number of samples that may be used durring anisotropic filtering
	XsdGoPkgHasElem_max_anisotropysequencefx_sampler_states_groupschema_MaxAnisotropy_XsdtUnsignedInt_1

	XsdGoPkgHasElem_wrap_tsequencefx_sampler_states_groupschema_WrapT_TfxSamplerWrapEnum_Wrap

	//	magnification
	XsdGoPkgHasElem_magfiltersequencefx_sampler_states_groupschema_Magfilter_TfxSamplerMagFilterEnum_Linear

	XsdGoPkgHasElem_border_colorsequencefx_sampler_states_groupschema_BorderColor_TfxColorType_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	minification
	XsdGoPkgHasElem_minfiltersequencefx_sampler_states_groupschema_Minfilter_TfxSamplerMinFilterEnum_Linear

	//	Mipmap level-of-detail bias. The default value is zero
	XsdGoPkgHasElem_mip_biassequencefx_sampler_states_groupschema_MipBias_XsdtFloat_00

	XsdGoPkgHasElem_wrap_ssequencefx_sampler_states_groupschema_WrapS_TfxSamplerWrapEnum_Wrap

	//	filtering across mips.
	//	NONE = no minification
	//	NEAREST = bilinear
	//	LINEAR = trilinear
	//	ANISOTROPIC =  Compensates for distortion caused by the difference in angle between the polygon and the plane of the screen.  Relies on max_anisotropy
	XsdGoPkgHasElem_mipfiltersequencefx_sampler_states_groupschema_Mipfilter_TfxSamplerMipFilterEnum_Linear

	//	level-of-detail index of smallest map to use. Values range from 0 to (n - 1) where 0 is the smallest. The default value is zero
	XsdGoPkgHasElem_mip_min_levelsequencefx_sampler_states_groupschema_MipMinLevel_XsdtUnsignedByte_0
}

//	If the WalkHandlers.XsdGoPkgHasGroup_FxSamplerStatesGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_FxSamplerStatesGroup instance as the single argument. Then calls the Walk() method on 12/12 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_FxSamplerStatesGroup instance.
func (me *XsdGoPkgHasGroup_FxSamplerStatesGroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasGroup_FxSamplerStatesGroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_mipfiltersequencefx_sampler_states_groupschema_Mipfilter_TfxSamplerMipFilterEnum_Linear.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_mip_min_levelsequencefx_sampler_states_groupschema_MipMinLevel_XsdtUnsignedByte_0.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_mip_max_levelsequencefx_sampler_states_groupschema_MipMaxLevel_XsdtUnsignedByte_0.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_wrap_psequencefx_sampler_states_groupschema_WrapP_TfxSamplerWrapEnum_Wrap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_max_anisotropysequencefx_sampler_states_groupschema_MaxAnisotropy_XsdtUnsignedInt_1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_wrap_tsequencefx_sampler_states_groupschema_WrapT_TfxSamplerWrapEnum_Wrap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_magfiltersequencefx_sampler_states_groupschema_Magfilter_TfxSamplerMagFilterEnum_Linear.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_border_colorsequencefx_sampler_states_groupschema_BorderColor_TfxColorType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_minfiltersequencefx_sampler_states_groupschema_Minfilter_TfxSamplerMinFilterEnum_Linear.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_mip_biassequencefx_sampler_states_groupschema_MipBias_XsdtFloat_00.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_wrap_ssequencefx_sampler_states_groupschema_WrapS_TfxSamplerWrapEnum_Wrap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TinstanceImageType struct {
	TinstanceWithExtraType
}

//	If the WalkHandlers.TinstanceImageType function is not nil (ie. was set by outside code), calls it with this TinstanceImageType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TinstanceImageType instance.
func (me *TinstanceImageType) Walk() (err error) {
	if fn := WalkHandlers.TinstanceImageType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TinstanceWithExtraType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_instance_imagesequencefx_sampler_typeschema_InstanceImage_TinstanceImageType_ struct {
	InstanceImage *TinstanceImageType `xml:"http://www.collada.org/2008/03/COLLADASchema instance_image"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_instance_imagesequencefx_sampler_typeschema_InstanceImage_TinstanceImageType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_instance_imagesequencefx_sampler_typeschema_InstanceImage_TinstanceImageType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_instance_imagesequencefx_sampler_typeschema_InstanceImage_TinstanceImageType_ instance.
func (me *XsdGoPkgHasElem_instance_imagesequencefx_sampler_typeschema_InstanceImage_TinstanceImageType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_instance_imagesequencefx_sampler_typeschema_InstanceImage_TinstanceImageType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.InstanceImage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TfxSamplerType struct {
	XsdGoPkgHasGroup_FxSamplerStatesGroup

	XsdGoPkgHasElem_instance_imagesequencefx_sampler_typeschema_InstanceImage_TinstanceImageType_
}

//	If the WalkHandlers.TfxSamplerType function is not nil (ie. was set by outside code), calls it with this TfxSamplerType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TfxSamplerType instance.
func (me *TfxSamplerType) Walk() (err error) {
	if fn := WalkHandlers.TfxSamplerType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasGroup_FxSamplerStatesGroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_instance_imagesequencefx_sampler_typeschema_InstanceImage_TinstanceImageType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TfxSampler3DType struct {
	TfxSamplerType
}

//	If the WalkHandlers.TfxSampler3DType function is not nil (ie. was set by outside code), calls it with this TfxSampler3DType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TfxSampler3DType instance.
func (me *TfxSampler3DType) Walk() (err error) {
	if fn := WalkHandlers.TfxSampler3DType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TfxSamplerType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_sampler3Dchoiceglsl_value_groupschema_Sampler3D_TfxSampler3DType_ struct {
	Sampler3D *TfxSampler3DType `xml:"http://www.collada.org/2008/03/COLLADASchema sampler3D"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sampler3Dchoiceglsl_value_groupschema_Sampler3D_TfxSampler3DType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sampler3Dchoiceglsl_value_groupschema_Sampler3D_TfxSampler3DType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sampler3Dchoiceglsl_value_groupschema_Sampler3D_TfxSampler3DType_ instance.
func (me *XsdGoPkgHasElem_sampler3Dchoiceglsl_value_groupschema_Sampler3D_TfxSampler3DType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sampler3Dchoiceglsl_value_groupschema_Sampler3D_TfxSampler3DType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Sampler3D.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A texture sampler for cube maps.
type TfxSamplerCUBEType struct {
	TfxSamplerType
}

//	If the WalkHandlers.TfxSamplerCUBEType function is not nil (ie. was set by outside code), calls it with this TfxSamplerCUBEType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TfxSamplerCUBEType instance.
func (me *TfxSamplerCUBEType) Walk() (err error) {
	if fn := WalkHandlers.TfxSamplerCUBEType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TfxSamplerType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_samplerCUBEchoiceglsl_value_groupschema_SamplerCUBE_TfxSamplerCUBEType_ struct {
	SamplerCUBE *TfxSamplerCUBEType `xml:"http://www.collada.org/2008/03/COLLADASchema samplerCUBE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_samplerCUBEchoiceglsl_value_groupschema_SamplerCUBE_TfxSamplerCUBEType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_samplerCUBEchoiceglsl_value_groupschema_SamplerCUBE_TfxSamplerCUBEType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_samplerCUBEchoiceglsl_value_groupschema_SamplerCUBE_TfxSamplerCUBEType_ instance.
func (me *XsdGoPkgHasElem_samplerCUBEchoiceglsl_value_groupschema_SamplerCUBE_TfxSamplerCUBEType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_samplerCUBEchoiceglsl_value_groupschema_SamplerCUBE_TfxSamplerCUBEType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SamplerCUBE.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A texture sampler for depth maps.
type TfxSamplerDEPTHType struct {
	TfxSamplerType
}

//	If the WalkHandlers.TfxSamplerDEPTHType function is not nil (ie. was set by outside code), calls it with this TfxSamplerDEPTHType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TfxSamplerDEPTHType instance.
func (me *TfxSamplerDEPTHType) Walk() (err error) {
	if fn := WalkHandlers.TfxSamplerDEPTHType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TfxSamplerType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_samplerDEPTHchoiceglsl_value_groupschema_SamplerDEPTH_TfxSamplerDEPTHType_ struct {
	SamplerDEPTH *TfxSamplerDEPTHType `xml:"http://www.collada.org/2008/03/COLLADASchema samplerDEPTH"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_samplerDEPTHchoiceglsl_value_groupschema_SamplerDEPTH_TfxSamplerDEPTHType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_samplerDEPTHchoiceglsl_value_groupschema_SamplerDEPTH_TfxSamplerDEPTHType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_samplerDEPTHchoiceglsl_value_groupschema_SamplerDEPTH_TfxSamplerDEPTHType_ instance.
func (me *XsdGoPkgHasElem_samplerDEPTHchoiceglsl_value_groupschema_SamplerDEPTH_TfxSamplerDEPTHType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_samplerDEPTHchoiceglsl_value_groupschema_SamplerDEPTH_TfxSamplerDEPTHType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SamplerDEPTH.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The glsl_newarray_type element is used to creates a parameter of a one-dimensional array type.
type XsdGoPkgHasAttr_Length_XsdtPositiveInteger_ struct {
	Length xsdt.PositiveInteger `xml:"http://www.collada.org/2008/03/COLLADASchema length,attr"`
}

type TglslArrayType struct {
	//	The length attribute specifies the length of the array.
	XsdGoPkgHasAttr_Length_XsdtPositiveInteger_

	//	First element types the array.  If more than one then init entire array and must match length attribute.  If only one then repeat based on length attribute.
	XsdGoPkgHasGroup_GlslValueGroup
}

//	If the WalkHandlers.TglslArrayType function is not nil (ie. was set by outside code), calls it with this TglslArrayType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TglslArrayType instance.
func (me *TglslArrayType) Walk() (err error) {
	if fn := WalkHandlers.TglslArrayType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_arraychoiceglsl_value_groupschema_Array_TglslArrayType_ struct {
	Array *TglslArrayType `xml:"http://www.collada.org/2008/03/COLLADASchema array"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_arraychoiceglsl_value_groupschema_Array_TglslArrayType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_arraychoiceglsl_value_groupschema_Array_TglslArrayType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_arraychoiceglsl_value_groupschema_Array_TglslArrayType_ instance.
func (me *XsdGoPkgHasElem_arraychoiceglsl_value_groupschema_Array_TglslArrayType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_arraychoiceglsl_value_groupschema_Array_TglslArrayType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Array.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A two-dimensional texture sampler.
type TfxSampler2DType struct {
	TfxSamplerType
}

//	If the WalkHandlers.TfxSampler2DType function is not nil (ie. was set by outside code), calls it with this TfxSampler2DType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TfxSampler2DType instance.
func (me *TfxSampler2DType) Walk() (err error) {
	if fn := WalkHandlers.TfxSampler2DType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TfxSamplerType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_sampler2Dchoiceglsl_value_groupschema_Sampler2D_TfxSampler2DType_ struct {
	Sampler2D *TfxSampler2DType `xml:"http://www.collada.org/2008/03/COLLADASchema sampler2D"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sampler2Dchoiceglsl_value_groupschema_Sampler2D_TfxSampler2DType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sampler2Dchoiceglsl_value_groupschema_Sampler2D_TfxSampler2DType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sampler2Dchoiceglsl_value_groupschema_Sampler2D_TfxSampler2DType_ instance.
func (me *XsdGoPkgHasElem_sampler2Dchoiceglsl_value_groupschema_Sampler2D_TfxSampler2DType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sampler2Dchoiceglsl_value_groupschema_Sampler2D_TfxSampler2DType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Sampler2D.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A two-dimensional texture sampler.
type TfxSamplerRECTType struct {
	TfxSamplerType
}

//	If the WalkHandlers.TfxSamplerRECTType function is not nil (ie. was set by outside code), calls it with this TfxSamplerRECTType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TfxSamplerRECTType instance.
func (me *TfxSamplerRECTType) Walk() (err error) {
	if fn := WalkHandlers.TfxSamplerRECTType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TfxSamplerType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_samplerRECTchoiceglsl_value_groupschema_SamplerRECT_TfxSamplerRECTType_ struct {
	SamplerRECT *TfxSamplerRECTType `xml:"http://www.collada.org/2008/03/COLLADASchema samplerRECT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_samplerRECTchoiceglsl_value_groupschema_SamplerRECT_TfxSamplerRECTType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_samplerRECTchoiceglsl_value_groupschema_SamplerRECT_TfxSamplerRECTType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_samplerRECTchoiceglsl_value_groupschema_SamplerRECT_TfxSamplerRECTType_ instance.
func (me *XsdGoPkgHasElem_samplerRECTchoiceglsl_value_groupschema_SamplerRECT_TfxSamplerRECTType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_samplerRECTchoiceglsl_value_groupschema_SamplerRECT_TfxSamplerRECTType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SamplerRECT.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A one-dimensional texture sampler.
type TfxSampler1DType struct {
	TfxSamplerType
}

//	If the WalkHandlers.TfxSampler1DType function is not nil (ie. was set by outside code), calls it with this TfxSampler1DType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TfxSampler1DType instance.
func (me *TfxSampler1DType) Walk() (err error) {
	if fn := WalkHandlers.TfxSampler1DType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TfxSamplerType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_sampler1Dchoiceglsl_value_groupschema_Sampler1D_TfxSampler1DType_ struct {
	Sampler1D *TfxSampler1DType `xml:"http://www.collada.org/2008/03/COLLADASchema sampler1D"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sampler1Dchoiceglsl_value_groupschema_Sampler1D_TfxSampler1DType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sampler1Dchoiceglsl_value_groupschema_Sampler1D_TfxSampler1DType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sampler1Dchoiceglsl_value_groupschema_Sampler1D_TfxSampler1DType_ instance.
func (me *XsdGoPkgHasElem_sampler1Dchoiceglsl_value_groupschema_Sampler1D_TfxSampler1DType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sampler1Dchoiceglsl_value_groupschema_Sampler1D_TfxSampler1DType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Sampler1D.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasGroup_GlslValueGroup struct {
	XsdGoPkgHasElem_samplerCUBEchoiceglsl_value_groupschema_SamplerCUBE_TfxSamplerCUBEType_

	XsdGoPkgHasElem_float3choicefx_annotate_groupschema_Float3_Tfloat3Type_

	XsdGoPkgHasElem_bool2choicefx_annotate_groupschema_Bool2_Tbool2Type_

	XsdGoPkgHasElem_samplerDEPTHchoiceglsl_value_groupschema_SamplerDEPTH_TfxSamplerDEPTHType_

	XsdGoPkgHasElem_bool4choicefx_annotate_groupschema_Bool4_Tbool4Type_

	XsdGoPkgHasElem_arraychoiceglsl_value_groupschema_Array_TglslArrayType_

	XsdGoPkgHasElem_sampler2Dchoiceglsl_value_groupschema_Sampler2D_TfxSampler2DType_

	XsdGoPkgHasElem_bool3choicefx_annotate_groupschema_Bool3_Tbool3Type_

	XsdGoPkgHasElem_boolchoicekinematics_newparam_typeschema_Bool_XsdtBoolean_

	XsdGoPkgHasElem_floatchoicekinematics_newparam_typeschema_Float_TfloatType_

	XsdGoPkgHasElem_samplerRECTchoiceglsl_value_groupschema_SamplerRECT_TfxSamplerRECTType_

	XsdGoPkgHasElem_intchoicekinematics_newparam_typeschema_Int_TintType_

	XsdGoPkgHasElem_sampler1Dchoiceglsl_value_groupschema_Sampler1D_TfxSampler1DType_

	XsdGoPkgHasElem_enumchoiceglsl_value_groupschema_Enum_TglEnumerationType_

	XsdGoPkgHasElem_float4x4choicefx_annotate_groupschema_Float4X4_Tfloat4X4Type_

	XsdGoPkgHasElem_float4choicefx_annotate_groupschema_Float4_Tfloat4Type_

	XsdGoPkgHasElem_sampler3Dchoiceglsl_value_groupschema_Sampler3D_TfxSampler3DType_

	XsdGoPkgHasElem_float2x2choicefx_annotate_groupschema_Float2X2_Tfloat2X2Type_

	XsdGoPkgHasElem_float2choicefx_annotate_groupschema_Float2_Tfloat2Type_

	XsdGoPkgHasElem_int4choicefx_annotate_groupschema_Int4_Tint4Type_

	XsdGoPkgHasElem_int3choicefx_annotate_groupschema_Int3_Tint3Type_

	XsdGoPkgHasElem_float3x3choicefx_annotate_groupschema_Float3X3_Tfloat3X3Type_

	XsdGoPkgHasElem_int2choicefx_annotate_groupschema_Int2_Tint2Type_
}

//	If the WalkHandlers.XsdGoPkgHasGroup_GlslValueGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_GlslValueGroup instance as the single argument. Then calls the Walk() method on 23/23 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_GlslValueGroup instance.
func (me *XsdGoPkgHasGroup_GlslValueGroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasGroup_GlslValueGroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_float4x4choicefx_annotate_groupschema_Float4X4_Tfloat4X4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4choicefx_annotate_groupschema_Float4_Tfloat4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sampler3Dchoiceglsl_value_groupschema_Sampler3D_TfxSampler3DType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2x2choicefx_annotate_groupschema_Float2X2_Tfloat2X2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2choicefx_annotate_groupschema_Float2_Tfloat2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int4choicefx_annotate_groupschema_Int4_Tint4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int3choicefx_annotate_groupschema_Int3_Tint3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3x3choicefx_annotate_groupschema_Float3X3_Tfloat3X3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int2choicefx_annotate_groupschema_Int2_Tint2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_samplerCUBEchoiceglsl_value_groupschema_SamplerCUBE_TfxSamplerCUBEType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3choicefx_annotate_groupschema_Float3_Tfloat3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool2choicefx_annotate_groupschema_Bool2_Tbool2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_samplerDEPTHchoiceglsl_value_groupschema_SamplerDEPTH_TfxSamplerDEPTHType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool4choicefx_annotate_groupschema_Bool4_Tbool4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_arraychoiceglsl_value_groupschema_Array_TglslArrayType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sampler2Dchoiceglsl_value_groupschema_Sampler2D_TfxSampler2DType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool3choicefx_annotate_groupschema_Bool3_Tbool3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_boolchoicekinematics_newparam_typeschema_Bool_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_floatchoicekinematics_newparam_typeschema_Float_TfloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_samplerRECTchoiceglsl_value_groupschema_SamplerRECT_TfxSamplerRECTType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_intchoicekinematics_newparam_typeschema_Int_TintType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sampler1Dchoiceglsl_value_groupschema_Sampler1D_TfxSampler1DType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_enumchoiceglsl_value_groupschema_Enum_TglEnumerationType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TfxModifierEnum xsdt.Nmtoken

//	Returns true if the value of this enumerated TfxModifierEnum is "VARYING".
func (me TfxModifierEnum) IsVarying() bool { return me == "VARYING" }

//	Returns true if the value of this enumerated TfxModifierEnum is "VOLATILE".
func (me TfxModifierEnum) IsVolatile() bool { return me == "VOLATILE" }

//	Returns true if the value of this enumerated TfxModifierEnum is "EXTERN".
func (me TfxModifierEnum) IsExtern() bool { return me == "EXTERN" }

//	Since TfxModifierEnum is just a simple String type, this merely returns the current string value.
func (me TfxModifierEnum) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TfxModifierEnum's alias type xsdt.Nmtoken.
func (me TfxModifierEnum) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TfxModifierEnum is "SHARED".
func (me TfxModifierEnum) IsShared() bool { return me == "SHARED" }

//	Since TfxModifierEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxModifierEnum) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Returns true if the value of this enumerated TfxModifierEnum is "UNIFORM".
func (me TfxModifierEnum) IsUniform() bool { return me == "UNIFORM" }

//	Returns true if the value of this enumerated TfxModifierEnum is "CONST".
func (me TfxModifierEnum) IsConst() bool { return me == "CONST" }

//	Returns true if the value of this enumerated TfxModifierEnum is "STATIC".
func (me TfxModifierEnum) IsStatic() bool { return me == "STATIC" }

type XsdGoPkgHasElem_modifiersequenceglsl_newparam_typeschema_Modifier_TfxModifierEnum_ struct {
	Modifier TfxModifierEnum `xml:"http://www.collada.org/2008/03/COLLADASchema modifier"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_modifiersequenceglsl_newparam_typeschema_Modifier_TfxModifierEnum_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_modifiersequenceglsl_newparam_typeschema_Modifier_TfxModifierEnum_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_modifiersequenceglsl_newparam_typeschema_Modifier_TfxModifierEnum_ instance.
func (me *XsdGoPkgHasElem_modifiersequenceglsl_newparam_typeschema_Modifier_TfxModifierEnum_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_modifiersequenceglsl_newparam_typeschema_Modifier_TfxModifierEnum_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglslNewparamType struct {
	XsdGoPkgHasElems_annotatesequenceglsl_newparam_typeschema_Annotate_TfxAnnotateType_

	XsdGoPkgHasElem_semanticsequenceglsl_newparam_typeschema_Semantic_XsdtNCName_

	XsdGoPkgHasGroup_GlslValueGroup

	XsdGoPkgHasElem_modifiersequenceglsl_newparam_typeschema_Modifier_TfxModifierEnum_

	XsdGoPkgHasAttr_Sid_TsidType_
}

//	If the WalkHandlers.TglslNewparamType function is not nil (ie. was set by outside code), calls it with this TglslNewparamType instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TglslNewparamType instance.
func (me *TglslNewparamType) Walk() (err error) {
	if fn := WalkHandlers.TglslNewparamType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_semanticsequenceglsl_newparam_typeschema_Semantic_XsdtNCName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroup_GlslValueGroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_modifiersequenceglsl_newparam_typeschema_Modifier_TfxModifierEnum_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_annotatesequenceglsl_newparam_typeschema_Annotate_TfxAnnotateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_newparamsequenceprofile_glsl_typeschema_Newparam_TglslNewparamType_ struct {
	Newparams []*TglslNewparamType `xml:"http://www.collada.org/2008/03/COLLADASchema newparam"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_newparamsequenceprofile_glsl_typeschema_Newparam_TglslNewparamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_newparamsequenceprofile_glsl_typeschema_Newparam_TglslNewparamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_newparamsequenceprofile_glsl_typeschema_Newparam_TglslNewparamType_ instance.
func (me *XsdGoPkgHasElems_newparamsequenceprofile_glsl_typeschema_Newparam_TglslNewparamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_newparamsequenceprofile_glsl_typeschema_Newparam_TglslNewparamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Newparams {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
//	array index
type XsdGoPkgHasAttr_Index_XsdtNonNegativeInteger_0 struct {
	//	array index
	Index xsdt.NonNegativeInteger `xml:"http://www.collada.org/2008/03/COLLADASchema index,attr"`
}

//	Returns the default value for Index -- 0
func (me XsdGoPkgHasAttr_Index_XsdtNonNegativeInteger_0) IndexDefault() xsdt.NonNegativeInteger {
	return xsdt.NonNegativeInteger(0)
}

type TfxClearcolorType struct {
	XsdGoPkgValue TfxColorType `xml:",chardata"`

	XsdGoPkgHasAttr_Index_XsdtNonNegativeInteger_0
}

//	If the WalkHandlers.TfxClearcolorType function is not nil (ie. was set by outside code), calls it with this TfxClearcolorType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TfxClearcolorType instance.
func (me *TfxClearcolorType) Walk() (err error) {
	if fn := WalkHandlers.TfxClearcolorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TfxClearcolorType) ToTfxColorType() TfxColorType { return me.XsdGoPkgValue }

//	Returns the value of its XsdGoPkgValue field as a Tfloat4Type (which TfxColorType is just aliasing).
func (me *TfxClearcolorType) ToTfloat4Type() Tfloat4Type { return me.XsdGoPkgValue.ToTfloat4Type() }

//	Returns the value of its XsdGoPkgValue field as a TlistOfFloatsType (which TfxColorType is just aliasing).
func (me *TfxClearcolorType) ToTlistOfFloatsType() TlistOfFloatsType {
	return me.XsdGoPkgValue.ToTfloat4Type().ToTlistOfFloatsType()
}

//	Returns the value of its XsdGoPkgValue field as a xsdt.String (which TfxColorType is just aliasing).
func (me *TfxClearcolorType) ToXsdtString() xsdt.String {
	return me.XsdGoPkgValue.ToTfloat4Type().ToTlistOfFloatsType().ToXsdtString()
}

type XsdGoPkgHasElems_color_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_ColorClear_TfxClearcolorType_ struct {
	ColorClears []*TfxClearcolorType `xml:"http://www.collada.org/2008/03/COLLADASchema color_clear"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_color_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_ColorClear_TfxClearcolorType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_color_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_ColorClear_TfxClearcolorType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_color_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_ColorClear_TfxClearcolorType_ instance.
func (me *XsdGoPkgHasElems_color_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_ColorClear_TfxClearcolorType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_color_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_ColorClear_TfxClearcolorType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ColorClears {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	? GEOMETRY: [default] The geometry associated with this instance_geometry or nstance_material.
//	? SCENE_GEOMETRY: Draw the entire scene's geometry but with this effect, not the effects or
//	materials already associated with the geometry. This is for techniques such as shadow-buffer
//	generation, where you might be interested only in extracting the Z value from the light. This is
//	without regard to ordering on the assumption that ZBuffer handles order.
//	? SCENE_IMAGE: Draw the entire scene naturally into the render targets. Hense producing an image
//	of the scene.  When used more then once, the later uses must include what has been rendered so far
//	to the backbuffer since the first render.  This is for effects that need an accurate image of the scene
//	to work on for effects such as postprocessing blurs.
//	? FULL_SCREEN_QUAD: Positions are 0,0 to 1,1 and the UVs match.
type TfxDrawType xsdt.String

//	This convenience method just performs a simple type conversion to TfxDrawType's alias type xsdt.String.
func (me TfxDrawType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TfxDrawType is just a simple String type, this merely returns the current string value.
func (me TfxDrawType) String() string { return xsdt.String(me).String() }

//	Since TfxDrawType is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxDrawType) Set(s string) { (*xsdt.String)(me).Set(s) }

type XsdGoPkgHasElem_drawsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_Draw_TfxDrawType_ struct {
	Draw TfxDrawType `xml:"http://www.collada.org/2008/03/COLLADASchema draw"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_drawsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_Draw_TfxDrawType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_drawsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_Draw_TfxDrawType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_drawsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_Draw_TfxDrawType_ instance.
func (me *XsdGoPkgHasElem_drawsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_Draw_TfxDrawType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_drawsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_Draw_TfxDrawType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	cube face
type TimageFaceEnum xsdt.String

//	Since TimageFaceEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TimageFaceEnum) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TimageFaceEnum is "POSITIVE_Z".
func (me TimageFaceEnum) IsPositiveZ() bool { return me == "POSITIVE_Z" }

//	Returns true if the value of this enumerated TimageFaceEnum is "NEGATIVE_Y".
func (me TimageFaceEnum) IsNegativeY() bool { return me == "NEGATIVE_Y" }

//	Returns true if the value of this enumerated TimageFaceEnum is "NEGATIVE_X".
func (me TimageFaceEnum) IsNegativeX() bool { return me == "NEGATIVE_X" }

//	Since TimageFaceEnum is just a simple String type, this merely returns the current string value.
func (me TimageFaceEnum) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TimageFaceEnum is "POSITIVE_Y".
func (me TimageFaceEnum) IsPositiveY() bool { return me == "POSITIVE_Y" }

//	This convenience method just performs a simple type conversion to TimageFaceEnum's alias type xsdt.String.
func (me TimageFaceEnum) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TimageFaceEnum is "POSITIVE_X".
func (me TimageFaceEnum) IsPositiveX() bool { return me == "POSITIVE_X" }

//	Returns true if the value of this enumerated TimageFaceEnum is "NEGATIVE_Z".
func (me TimageFaceEnum) IsNegativeZ() bool { return me == "NEGATIVE_Z" }

type XsdGoPkgHasAttr_Face_TimageFaceEnum_PositiveX struct {
	//	cube face
	Face TimageFaceEnum `xml:"http://www.collada.org/2008/03/COLLADASchema face,attr"`
}

//	Returns the default value for Face -- "POSITIVE_X"
func (me XsdGoPkgHasAttr_Face_TimageFaceEnum_PositiveX) FaceDefault() TimageFaceEnum {
	return TimageFaceEnum("POSITIVE_X")
}

//	mip level
type XsdGoPkgHasAttr_Mip_XsdtNonNegativeInteger_0 struct {
	//	mip level
	Mip xsdt.NonNegativeInteger `xml:"http://www.collada.org/2008/03/COLLADASchema mip,attr"`
}

//	Returns the default value for Mip -- 0
func (me XsdGoPkgHasAttr_Mip_XsdtNonNegativeInteger_0) MipDefault() xsdt.NonNegativeInteger {
	return xsdt.NonNegativeInteger(0)
}

type XsdGoPkgHasElem_paramchoicefx_rendertarget_typeschema_Param_TxsdFxRendertargetTypeChoiceParam_ struct {
	Param *TkinematicsConnectParamType `xml:"http://www.collada.org/2008/03/COLLADASchema param"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_paramchoicefx_rendertarget_typeschema_Param_TxsdFxRendertargetTypeChoiceParam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_paramchoicefx_rendertarget_typeschema_Param_TxsdFxRendertargetTypeChoiceParam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_paramchoicefx_rendertarget_typeschema_Param_TxsdFxRendertargetTypeChoiceParam_ instance.
func (me *XsdGoPkgHasElem_paramchoicefx_rendertarget_typeschema_Param_TxsdFxRendertargetTypeChoiceParam_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_paramchoicefx_rendertarget_typeschema_Param_TxsdFxRendertargetTypeChoiceParam_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Param.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	volume depth
type XsdGoPkgHasAttr_Slice_XsdtNonNegativeInteger_0 struct {
	//	volume depth
	Slice xsdt.NonNegativeInteger `xml:"http://www.collada.org/2008/03/COLLADASchema slice,attr"`
}

//	Returns the default value for Slice -- 0
func (me XsdGoPkgHasAttr_Slice_XsdtNonNegativeInteger_0) SliceDefault() xsdt.NonNegativeInteger {
	return xsdt.NonNegativeInteger(0)
}

type TfxRendertargetType struct {
	//	cube face
	XsdGoPkgHasAttr_Face_TimageFaceEnum_PositiveX

	//	mip level
	XsdGoPkgHasAttr_Mip_XsdtNonNegativeInteger_0

	XsdGoPkgHasElem_paramchoicefx_rendertarget_typeschema_Param_TxsdFxRendertargetTypeChoiceParam_

	//	volume depth
	XsdGoPkgHasAttr_Slice_XsdtNonNegativeInteger_0

	XsdGoPkgHasElem_instance_imagesequencefx_sampler_typeschema_InstanceImage_TinstanceImageType_

	//	array index
	XsdGoPkgHasAttr_Index_XsdtNonNegativeInteger_0
}

//	If the WalkHandlers.TfxRendertargetType function is not nil (ie. was set by outside code), calls it with this TfxRendertargetType instance as the single argument. Then calls the Walk() method on 2/6 embed(s) and 0/0 field(s) belonging to this TfxRendertargetType instance.
func (me *TfxRendertargetType) Walk() (err error) {
	if fn := WalkHandlers.TfxRendertargetType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_paramchoicefx_rendertarget_typeschema_Param_TxsdFxRendertargetTypeChoiceParam_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_instance_imagesequencefx_sampler_typeschema_InstanceImage_TinstanceImageType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TfxDepthtargetType struct {
	TfxRendertargetType
}

//	If the WalkHandlers.TfxDepthtargetType function is not nil (ie. was set by outside code), calls it with this TfxDepthtargetType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TfxDepthtargetType instance.
func (me *TfxDepthtargetType) Walk() (err error) {
	if fn := WalkHandlers.TfxDepthtargetType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TfxRendertargetType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_depth_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_DepthTarget_TfxDepthtargetType_ struct {
	DepthTargets []*TfxDepthtargetType `xml:"http://www.collada.org/2008/03/COLLADASchema depth_target"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_depth_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_DepthTarget_TfxDepthtargetType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_depth_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_DepthTarget_TfxDepthtargetType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_depth_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_DepthTarget_TfxDepthtargetType_ instance.
func (me *XsdGoPkgHasElems_depth_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_DepthTarget_TfxDepthtargetType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_depth_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_DepthTarget_TfxDepthtargetType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DepthTargets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TfxCleardepthType struct {
	XsdGoPkgValue TfloatType `xml:",chardata"`

	XsdGoPkgHasAttr_Index_XsdtNonNegativeInteger_0
}

//	If the WalkHandlers.TfxCleardepthType function is not nil (ie. was set by outside code), calls it with this TfxCleardepthType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TfxCleardepthType instance.
func (me *TfxCleardepthType) Walk() (err error) {
	if fn := WalkHandlers.TfxCleardepthType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TfxCleardepthType) ToTfloatType() TfloatType { return me.XsdGoPkgValue }

//	Returns the value of its XsdGoPkgValue field as a xsdt.Double (which TfloatType is just aliasing).
func (me *TfxCleardepthType) ToXsdtDouble() xsdt.Double { return me.XsdGoPkgValue.ToXsdtDouble() }

type XsdGoPkgHasElems_depth_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_DepthClear_TfxCleardepthType_ struct {
	DepthClears []*TfxCleardepthType `xml:"http://www.collada.org/2008/03/COLLADASchema depth_clear"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_depth_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_DepthClear_TfxCleardepthType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_depth_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_DepthClear_TfxCleardepthType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_depth_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_DepthClear_TfxCleardepthType_ instance.
func (me *XsdGoPkgHasElems_depth_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_DepthClear_TfxCleardepthType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_depth_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_DepthClear_TfxCleardepthType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DepthClears {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TfxColortargetType struct {
	TfxRendertargetType
}

//	If the WalkHandlers.TfxColortargetType function is not nil (ie. was set by outside code), calls it with this TfxColortargetType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TfxColortargetType instance.
func (me *TfxColortargetType) Walk() (err error) {
	if fn := WalkHandlers.TfxColortargetType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TfxRendertargetType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_color_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_ColorTarget_TfxColortargetType_ struct {
	ColorTargets []*TfxColortargetType `xml:"http://www.collada.org/2008/03/COLLADASchema color_target"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_color_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_ColorTarget_TfxColortargetType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_color_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_ColorTarget_TfxColortargetType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_color_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_ColorTarget_TfxColortargetType_ instance.
func (me *XsdGoPkgHasElems_color_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_ColorTarget_TfxColortargetType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_color_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_ColorTarget_TfxColortargetType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ColorTargets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TfxStenciltargetType struct {
	TfxRendertargetType
}

//	If the WalkHandlers.TfxStenciltargetType function is not nil (ie. was set by outside code), calls it with this TfxStenciltargetType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TfxStenciltargetType instance.
func (me *TfxStenciltargetType) Walk() (err error) {
	if fn := WalkHandlers.TfxStenciltargetType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TfxRendertargetType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_stencil_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_StencilTarget_TfxStenciltargetType_ struct {
	StencilTargets []*TfxStenciltargetType `xml:"http://www.collada.org/2008/03/COLLADASchema stencil_target"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_stencil_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_StencilTarget_TfxStenciltargetType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_stencil_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_StencilTarget_TfxStenciltargetType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_stencil_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_StencilTarget_TfxStenciltargetType_ instance.
func (me *XsdGoPkgHasElems_stencil_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_StencilTarget_TfxStenciltargetType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_stencil_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_StencilTarget_TfxStenciltargetType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.StencilTargets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TfxClearstencilType struct {
	XsdGoPkgValue xsdt.Byte `xml:",chardata"`

	XsdGoPkgHasAttr_Index_XsdtNonNegativeInteger_0
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TfxClearstencilType) ToXsdtByte() xsdt.Byte { return me.XsdGoPkgValue }

//	If the WalkHandlers.TfxClearstencilType function is not nil (ie. was set by outside code), calls it with this TfxClearstencilType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TfxClearstencilType instance.
func (me *TfxClearstencilType) Walk() (err error) {
	if fn := WalkHandlers.TfxClearstencilType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_stencil_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_StencilClear_TfxClearstencilType_ struct {
	StencilClears []*TfxClearstencilType `xml:"http://www.collada.org/2008/03/COLLADASchema stencil_clear"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_stencil_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_StencilClear_TfxClearstencilType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_stencil_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_StencilClear_TfxClearstencilType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_stencil_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_StencilClear_TfxClearstencilType_ instance.
func (me *XsdGoPkgHasElems_stencil_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_StencilClear_TfxClearstencilType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_stencil_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_StencilClear_TfxClearstencilType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.StencilClears {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceEvaluate struct {
	XsdGoPkgHasElems_stencil_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_StencilTarget_TfxStenciltargetType_

	XsdGoPkgHasElems_stencil_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_StencilClear_TfxClearstencilType_

	XsdGoPkgHasElems_color_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_ColorClear_TfxClearcolorType_

	XsdGoPkgHasElem_drawsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_Draw_TfxDrawType_

	XsdGoPkgHasElems_depth_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_DepthTarget_TfxDepthtargetType_

	XsdGoPkgHasElems_depth_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_DepthClear_TfxCleardepthType_

	XsdGoPkgHasElems_color_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_ColorTarget_TfxColortargetType_
}

//	If the WalkHandlers.TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceEvaluate function is not nil (ie. was set by outside code), calls it with this TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceEvaluate instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceEvaluate instance.
func (me *TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceEvaluate) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceEvaluate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_stencil_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_StencilTarget_TfxStenciltargetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_stencil_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_StencilClear_TfxClearstencilType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_color_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_ColorClear_TfxClearcolorType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_drawsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_Draw_TfxDrawType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_depth_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_DepthTarget_TfxDepthtargetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_depth_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_DepthClear_TfxCleardepthType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_color_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_ColorTarget_TfxColortargetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_evaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_Evaluate_TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceEvaluate_ struct {
	Evaluate *TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceEvaluate `xml:"http://www.collada.org/2008/03/COLLADASchema evaluate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_evaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_Evaluate_TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceEvaluate_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_evaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_Evaluate_TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceEvaluate_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_evaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_Evaluate_TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceEvaluate_ instance.
func (me *XsdGoPkgHasElem_evaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_Evaluate_TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceEvaluate_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_evaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_Evaluate_TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceEvaluate_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Evaluate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A group that defines all of the renderstates used for the CG and GLSL profiles.
type XsdGoPkgHasAttr_Param_XsdtNCName_ struct {
	Param xsdt.NCName `xml:"http://www.collada.org/2008/03/COLLADASchema param,attr"`
}

type XsdGoPkgHasAttr_Value_XsdtUnsignedByte_255 struct {
	Value xsdt.UnsignedByte `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- 255
func (me XsdGoPkgHasAttr_Value_XsdtUnsignedByte_255) ValueDefault() xsdt.UnsignedByte {
	return xsdt.UnsignedByte(255)
}

type TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceMask struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_XsdtUnsignedByte_255
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceMask function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceMask instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceMask instance.
func (me *TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceMask) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceMask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegl_pipeline_settings_groupschema_Mask_TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceMask_ struct {
	Mask *TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceMask `xml:"http://www.collada.org/2008/03/COLLADASchema mask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegl_pipeline_settings_groupschema_Mask_TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceMask_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegl_pipeline_settings_groupschema_Mask_TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceMask_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegl_pipeline_settings_groupschema_Mask_TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceMask_ instance.
func (me *XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegl_pipeline_settings_groupschema_Mask_TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceMask_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegl_pipeline_settings_groupschema_Mask_TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceMask_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Mask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_TglFaceEnum_FrontAndBack struct {
	Value TglFaceEnum `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "FRONT_AND_BACK"
func (me XsdGoPkgHasAttr_Value_TglFaceEnum_FrontAndBack) ValueDefault() TglFaceEnum {
	return TglFaceEnum("FRONT_AND_BACK")
}

type TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglFaceEnum_FrontAndBack
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace instance.
func (me *TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace_ struct {
	Face *TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace `xml:"http://www.collada.org/2008/03/COLLADASchema face"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace_ instance.
func (me *XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Face.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparate struct {
	XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegl_pipeline_settings_groupschema_Mask_TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceMask_

	XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparate function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparate instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparate instance.
func (me *TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparate) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegl_pipeline_settings_groupschema_Mask_TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceMask_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_stencil_mask_separatechoicegl_pipeline_settings_groupschema_StencilMaskSeparate_TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparate_ struct {
	StencilMaskSeparate *TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparate `xml:"http://www.collada.org/2008/03/COLLADASchema stencil_mask_separate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_stencil_mask_separatechoicegl_pipeline_settings_groupschema_StencilMaskSeparate_TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparate_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_mask_separatechoicegl_pipeline_settings_groupschema_StencilMaskSeparate_TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparate_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_mask_separatechoicegl_pipeline_settings_groupschema_StencilMaskSeparate_TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparate_ instance.
func (me *XsdGoPkgHasElem_stencil_mask_separatechoicegl_pipeline_settings_groupschema_StencilMaskSeparate_TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparate_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_stencil_mask_separatechoicegl_pipeline_settings_groupschema_StencilMaskSeparate_TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparate_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StencilMaskSeparate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_TfloatType_1 struct {
	Value TfloatType `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- 1
func (me XsdGoPkgHasAttr_Value_TfloatType_1) ValueDefault() TfloatType { return TfloatType(1) }

type TxsdGlPipelineSettingsGroupChoiceFogEnd struct {
	XsdGoPkgHasAttr_Value_TfloatType_1

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceFogEnd function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceFogEnd instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceFogEnd instance.
func (me *TxsdGlPipelineSettingsGroupChoiceFogEnd) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceFogEnd; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fog_endchoicegl_pipeline_settings_groupschema_FogEnd_TxsdGlPipelineSettingsGroupChoiceFogEnd_ struct {
	FogEnd *TxsdGlPipelineSettingsGroupChoiceFogEnd `xml:"http://www.collada.org/2008/03/COLLADASchema fog_end"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fog_endchoicegl_pipeline_settings_groupschema_FogEnd_TxsdGlPipelineSettingsGroupChoiceFogEnd_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_endchoicegl_pipeline_settings_groupschema_FogEnd_TxsdGlPipelineSettingsGroupChoiceFogEnd_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_endchoicegl_pipeline_settings_groupschema_FogEnd_TxsdGlPipelineSettingsGroupChoiceFogEnd_ instance.
func (me *XsdGoPkgHasElem_fog_endchoicegl_pipeline_settings_groupschema_FogEnd_TxsdGlPipelineSettingsGroupChoiceFogEnd_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fog_endchoicegl_pipeline_settings_groupschema_FogEnd_TxsdGlPipelineSettingsGroupChoiceFogEnd_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FogEnd.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_XsdtBoolean_False struct {
	Value xsdt.Boolean `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- false
func (me XsdGoPkgHasAttr_Value_XsdtBoolean_False) ValueDefault() xsdt.Boolean {
	return xsdt.Boolean(false)
}

type TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_XsdtBoolean_False
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable instance.
func (me *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_rescale_normal_enablechoicegl_pipeline_settings_groupschema_RescaleNormalEnable_TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable_ struct {
	RescaleNormalEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema rescale_normal_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_rescale_normal_enablechoicegl_pipeline_settings_groupschema_RescaleNormalEnable_TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_rescale_normal_enablechoicegl_pipeline_settings_groupschema_RescaleNormalEnable_TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_rescale_normal_enablechoicegl_pipeline_settings_groupschema_RescaleNormalEnable_TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable_ instance.
func (me *XsdGoPkgHasElem_rescale_normal_enablechoicegl_pipeline_settings_groupschema_RescaleNormalEnable_TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_rescale_normal_enablechoicegl_pipeline_settings_groupschema_RescaleNormalEnable_TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RescaleNormalEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_TglBlendEquationEnum_FuncAdd struct {
	Value TglBlendEquationEnum `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "FUNC_ADD"
func (me XsdGoPkgHasAttr_Value_TglBlendEquationEnum_FuncAdd) ValueDefault() TglBlendEquationEnum {
	return TglBlendEquationEnum("FUNC_ADD")
}

type TxsdGlPipelineSettingsGroupChoiceBlendEquation struct {
	XsdGoPkgHasAttr_Value_TglBlendEquationEnum_FuncAdd

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceBlendEquation function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceBlendEquation instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceBlendEquation instance.
func (me *TxsdGlPipelineSettingsGroupChoiceBlendEquation) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceBlendEquation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_blend_equationchoicegl_pipeline_settings_groupschema_BlendEquation_TxsdGlPipelineSettingsGroupChoiceBlendEquation_ struct {
	BlendEquation *TxsdGlPipelineSettingsGroupChoiceBlendEquation `xml:"http://www.collada.org/2008/03/COLLADASchema blend_equation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_blend_equationchoicegl_pipeline_settings_groupschema_BlendEquation_TxsdGlPipelineSettingsGroupChoiceBlendEquation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_blend_equationchoicegl_pipeline_settings_groupschema_BlendEquation_TxsdGlPipelineSettingsGroupChoiceBlendEquation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_blend_equationchoicegl_pipeline_settings_groupschema_BlendEquation_TxsdGlPipelineSettingsGroupChoiceBlendEquation_ instance.
func (me *XsdGoPkgHasElem_blend_equationchoicegl_pipeline_settings_groupschema_BlendEquation_TxsdGlPipelineSettingsGroupChoiceBlendEquation_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_blend_equationchoicegl_pipeline_settings_groupschema_BlendEquation_TxsdGlPipelineSettingsGroupChoiceBlendEquation_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BlendEquation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tfloat3Type_100 struct {
	Value Tfloat3Type `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "1 0 0"
func (me XsdGoPkgHasAttr_Value_Tfloat3Type_100) ValueDefault() Tfloat3Type {
	return Tfloat3Type("1 0 0")
}

type TxsdGlPipelineSettingsGroupChoicePointDistanceAttenuation struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat3Type_100
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoicePointDistanceAttenuation function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoicePointDistanceAttenuation instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoicePointDistanceAttenuation instance.
func (me *TxsdGlPipelineSettingsGroupChoicePointDistanceAttenuation) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoicePointDistanceAttenuation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_point_distance_attenuationchoicegl_pipeline_settings_groupschema_PointDistanceAttenuation_TxsdGlPipelineSettingsGroupChoicePointDistanceAttenuation_ struct {
	PointDistanceAttenuation *TxsdGlPipelineSettingsGroupChoicePointDistanceAttenuation `xml:"http://www.collada.org/2008/03/COLLADASchema point_distance_attenuation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_point_distance_attenuationchoicegl_pipeline_settings_groupschema_PointDistanceAttenuation_TxsdGlPipelineSettingsGroupChoicePointDistanceAttenuation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_distance_attenuationchoicegl_pipeline_settings_groupschema_PointDistanceAttenuation_TxsdGlPipelineSettingsGroupChoicePointDistanceAttenuation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_distance_attenuationchoicegl_pipeline_settings_groupschema_PointDistanceAttenuation_TxsdGlPipelineSettingsGroupChoicePointDistanceAttenuation_ instance.
func (me *XsdGoPkgHasElem_point_distance_attenuationchoicegl_pipeline_settings_groupschema_PointDistanceAttenuation_TxsdGlPipelineSettingsGroupChoicePointDistanceAttenuation_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_point_distance_attenuationchoicegl_pipeline_settings_groupschema_PointDistanceAttenuation_TxsdGlPipelineSettingsGroupChoicePointDistanceAttenuation_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PointDistanceAttenuation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_TglFrontFaceEnum_Ccw struct {
	Value TglFrontFaceEnum `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "CCW"
func (me XsdGoPkgHasAttr_Value_TglFrontFaceEnum_Ccw) ValueDefault() TglFrontFaceEnum {
	return TglFrontFaceEnum("CCW")
}

type TxsdGlPipelineSettingsGroupChoiceFrontFace struct {
	XsdGoPkgHasAttr_Value_TglFrontFaceEnum_Ccw

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceFrontFace function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceFrontFace instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceFrontFace instance.
func (me *TxsdGlPipelineSettingsGroupChoiceFrontFace) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceFrontFace; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_front_facechoicegl_pipeline_settings_groupschema_FrontFace_TxsdGlPipelineSettingsGroupChoiceFrontFace_ struct {
	FrontFace *TxsdGlPipelineSettingsGroupChoiceFrontFace `xml:"http://www.collada.org/2008/03/COLLADASchema front_face"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_front_facechoicegl_pipeline_settings_groupschema_FrontFace_TxsdGlPipelineSettingsGroupChoiceFrontFace_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_front_facechoicegl_pipeline_settings_groupschema_FrontFace_TxsdGlPipelineSettingsGroupChoiceFrontFace_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_front_facechoicegl_pipeline_settings_groupschema_FrontFace_TxsdGlPipelineSettingsGroupChoiceFrontFace_ instance.
func (me *XsdGoPkgHasElem_front_facechoicegl_pipeline_settings_groupschema_FrontFace_TxsdGlPipelineSettingsGroupChoiceFrontFace_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_front_facechoicegl_pipeline_settings_groupschema_FrontFace_TxsdGlPipelineSettingsGroupChoiceFrontFace_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FrontFace.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_TglFuncEnum_Always struct {
	Value TglFuncEnum `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "ALWAYS"
func (me XsdGoPkgHasAttr_Value_TglFuncEnum_Always) ValueDefault() TglFuncEnum {
	return TglFuncEnum("ALWAYS")
}

type TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceFunc struct {
	XsdGoPkgHasAttr_Value_TglFuncEnum_Always

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceFunc function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceFunc instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceFunc instance.
func (me *TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceFunc) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceFunc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_funcsequencealpha_funcchoicegl_pipeline_settings_groupschema_Func_TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceFunc_ struct {
	Func *TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceFunc `xml:"http://www.collada.org/2008/03/COLLADASchema func"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_funcsequencealpha_funcchoicegl_pipeline_settings_groupschema_Func_TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_funcsequencealpha_funcchoicegl_pipeline_settings_groupschema_Func_TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_funcsequencealpha_funcchoicegl_pipeline_settings_groupschema_Func_TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceFunc_ instance.
func (me *XsdGoPkgHasElem_funcsequencealpha_funcchoicegl_pipeline_settings_groupschema_Func_TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceFunc_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_funcsequencealpha_funcchoicegl_pipeline_settings_groupschema_Func_TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceFunc_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Func.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglAlphaValueType xsdt.Float

//	This convenience method just performs a simple type conversion to TglAlphaValueType's alias type xsdt.Float.
func (me TglAlphaValueType) ToXsdtFloat() xsdt.Float { return xsdt.Float(me) }

//	Returns a string representation of this TglAlphaValueType's current non-string scalar value.
func (me TglAlphaValueType) String() string { return xsdt.Float(me).String() }

//	Since TglAlphaValueType is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TglAlphaValueType) Set(s string) { (*xsdt.Float)(me).Set(s) }

type XsdGoPkgHasAttr_Value_TglAlphaValueType_00 struct {
	Value TglAlphaValueType `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- 0.0
func (me XsdGoPkgHasAttr_Value_TglAlphaValueType_00) ValueDefault() TglAlphaValueType {
	return TglAlphaValueType(0.0)
}

type TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceValue struct {
	XsdGoPkgHasAttr_Value_TglAlphaValueType_00

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceValue function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceValue instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceValue instance.
func (me *TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceValue) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_valuesequencealpha_funcchoicegl_pipeline_settings_groupschema_Value_TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceValue_ struct {
	Value *TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceValue `xml:"http://www.collada.org/2008/03/COLLADASchema value"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_valuesequencealpha_funcchoicegl_pipeline_settings_groupschema_Value_TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceValue_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_valuesequencealpha_funcchoicegl_pipeline_settings_groupschema_Value_TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceValue_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_valuesequencealpha_funcchoicegl_pipeline_settings_groupschema_Value_TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceValue_ instance.
func (me *XsdGoPkgHasElem_valuesequencealpha_funcchoicegl_pipeline_settings_groupschema_Value_TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceValue_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_valuesequencealpha_funcchoicegl_pipeline_settings_groupschema_Value_TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceValue_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Value.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsGroupChoiceAlphaFunc struct {
	XsdGoPkgHasElem_funcsequencealpha_funcchoicegl_pipeline_settings_groupschema_Func_TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceFunc_

	XsdGoPkgHasElem_valuesequencealpha_funcchoicegl_pipeline_settings_groupschema_Value_TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceValue_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceAlphaFunc function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceAlphaFunc instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceAlphaFunc instance.
func (me *TxsdGlPipelineSettingsGroupChoiceAlphaFunc) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceAlphaFunc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_funcsequencealpha_funcchoicegl_pipeline_settings_groupschema_Func_TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceFunc_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_valuesequencealpha_funcchoicegl_pipeline_settings_groupschema_Value_TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceValue_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_alpha_funcchoicegl_pipeline_settings_groupschema_AlphaFunc_TxsdGlPipelineSettingsGroupChoiceAlphaFunc_ struct {
	AlphaFunc *TxsdGlPipelineSettingsGroupChoiceAlphaFunc `xml:"http://www.collada.org/2008/03/COLLADASchema alpha_func"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_alpha_funcchoicegl_pipeline_settings_groupschema_AlphaFunc_TxsdGlPipelineSettingsGroupChoiceAlphaFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_alpha_funcchoicegl_pipeline_settings_groupschema_AlphaFunc_TxsdGlPipelineSettingsGroupChoiceAlphaFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_alpha_funcchoicegl_pipeline_settings_groupschema_AlphaFunc_TxsdGlPipelineSettingsGroupChoiceAlphaFunc_ instance.
func (me *XsdGoPkgHasElem_alpha_funcchoicegl_pipeline_settings_groupschema_AlphaFunc_TxsdGlPipelineSettingsGroupChoiceAlphaFunc_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_alpha_funcchoicegl_pipeline_settings_groupschema_AlphaFunc_TxsdGlPipelineSettingsGroupChoiceAlphaFunc_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AlphaFunc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tint4Type_ struct {
	Value Tint4Type `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

type TxsdGlPipelineSettingsGroupChoiceScissor struct {
	XsdGoPkgHasAttr_Value_Tint4Type_

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceScissor function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceScissor instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceScissor instance.
func (me *TxsdGlPipelineSettingsGroupChoiceScissor) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceScissor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_scissorchoicegl_pipeline_settings_groupschema_Scissor_TxsdGlPipelineSettingsGroupChoiceScissor_ struct {
	Scissor *TxsdGlPipelineSettingsGroupChoiceScissor `xml:"http://www.collada.org/2008/03/COLLADASchema scissor"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_scissorchoicegl_pipeline_settings_groupschema_Scissor_TxsdGlPipelineSettingsGroupChoiceScissor_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_scissorchoicegl_pipeline_settings_groupschema_Scissor_TxsdGlPipelineSettingsGroupChoiceScissor_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_scissorchoicegl_pipeline_settings_groupschema_Scissor_TxsdGlPipelineSettingsGroupChoiceScissor_ instance.
func (me *XsdGoPkgHasElem_scissorchoicegl_pipeline_settings_groupschema_Scissor_TxsdGlPipelineSettingsGroupChoiceScissor_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_scissorchoicegl_pipeline_settings_groupschema_Scissor_TxsdGlPipelineSettingsGroupChoiceScissor_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Scissor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_TfloatType_0 struct {
	Value TfloatType `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- 0
func (me XsdGoPkgHasAttr_Value_TfloatType_0) ValueDefault() TfloatType { return TfloatType(0) }

type TxsdGlPipelineSettingsGroupChoicePointSizeMin struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TfloatType_0
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoicePointSizeMin function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoicePointSizeMin instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoicePointSizeMin instance.
func (me *TxsdGlPipelineSettingsGroupChoicePointSizeMin) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoicePointSizeMin; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_point_size_minchoicegl_pipeline_settings_groupschema_PointSizeMin_TxsdGlPipelineSettingsGroupChoicePointSizeMin_ struct {
	PointSizeMin *TxsdGlPipelineSettingsGroupChoicePointSizeMin `xml:"http://www.collada.org/2008/03/COLLADASchema point_size_min"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_point_size_minchoicegl_pipeline_settings_groupschema_PointSizeMin_TxsdGlPipelineSettingsGroupChoicePointSizeMin_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_size_minchoicegl_pipeline_settings_groupschema_PointSizeMin_TxsdGlPipelineSettingsGroupChoicePointSizeMin_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_size_minchoicegl_pipeline_settings_groupschema_PointSizeMin_TxsdGlPipelineSettingsGroupChoicePointSizeMin_ instance.
func (me *XsdGoPkgHasElem_point_size_minchoicegl_pipeline_settings_groupschema_PointSizeMin_TxsdGlPipelineSettingsGroupChoicePointSizeMin_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_point_size_minchoicegl_pipeline_settings_groupschema_PointSizeMin_TxsdGlPipelineSettingsGroupChoicePointSizeMin_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PointSizeMin.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_depth_bounds_enablechoicegl_pipeline_settings_groupschema_DepthBoundsEnable_TxsdGlPipelineSettingsGroupChoiceDepthBoundsEnable_ struct {
	DepthBoundsEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema depth_bounds_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_depth_bounds_enablechoicegl_pipeline_settings_groupschema_DepthBoundsEnable_TxsdGlPipelineSettingsGroupChoiceDepthBoundsEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_bounds_enablechoicegl_pipeline_settings_groupschema_DepthBoundsEnable_TxsdGlPipelineSettingsGroupChoiceDepthBoundsEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_depth_bounds_enablechoicegl_pipeline_settings_groupschema_DepthBoundsEnable_TxsdGlPipelineSettingsGroupChoiceDepthBoundsEnable_ instance.
func (me *XsdGoPkgHasElem_depth_bounds_enablechoicegl_pipeline_settings_groupschema_DepthBoundsEnable_TxsdGlPipelineSettingsGroupChoiceDepthBoundsEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_depth_bounds_enablechoicegl_pipeline_settings_groupschema_DepthBoundsEnable_TxsdGlPipelineSettingsGroupChoiceDepthBoundsEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DepthBoundsEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tfloat4Type_02020210 struct {
	Value Tfloat4Type `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "0.2 0.2 0.2 1.0"
func (me XsdGoPkgHasAttr_Value_Tfloat4Type_02020210) ValueDefault() Tfloat4Type {
	return Tfloat4Type("0.2 0.2 0.2 1.0")
}

type TxsdGlPipelineSettingsGroupChoiceMaterialAmbient struct {
	XsdGoPkgHasAttr_Value_Tfloat4Type_02020210

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceMaterialAmbient function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceMaterialAmbient instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceMaterialAmbient instance.
func (me *TxsdGlPipelineSettingsGroupChoiceMaterialAmbient) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceMaterialAmbient; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_material_ambientchoicegl_pipeline_settings_groupschema_MaterialAmbient_TxsdGlPipelineSettingsGroupChoiceMaterialAmbient_ struct {
	MaterialAmbient *TxsdGlPipelineSettingsGroupChoiceMaterialAmbient `xml:"http://www.collada.org/2008/03/COLLADASchema material_ambient"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_material_ambientchoicegl_pipeline_settings_groupschema_MaterialAmbient_TxsdGlPipelineSettingsGroupChoiceMaterialAmbient_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_material_ambientchoicegl_pipeline_settings_groupschema_MaterialAmbient_TxsdGlPipelineSettingsGroupChoiceMaterialAmbient_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_material_ambientchoicegl_pipeline_settings_groupschema_MaterialAmbient_TxsdGlPipelineSettingsGroupChoiceMaterialAmbient_ instance.
func (me *XsdGoPkgHasElem_material_ambientchoicegl_pipeline_settings_groupschema_MaterialAmbient_TxsdGlPipelineSettingsGroupChoiceMaterialAmbient_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_material_ambientchoicegl_pipeline_settings_groupschema_MaterialAmbient_TxsdGlPipelineSettingsGroupChoiceMaterialAmbient_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MaterialAmbient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_scissor_test_enablechoicegl_pipeline_settings_groupschema_ScissorTestEnable_TxsdGlPipelineSettingsGroupChoiceScissorTestEnable_ struct {
	ScissorTestEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema scissor_test_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_scissor_test_enablechoicegl_pipeline_settings_groupschema_ScissorTestEnable_TxsdGlPipelineSettingsGroupChoiceScissorTestEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_scissor_test_enablechoicegl_pipeline_settings_groupschema_ScissorTestEnable_TxsdGlPipelineSettingsGroupChoiceScissorTestEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_scissor_test_enablechoicegl_pipeline_settings_groupschema_ScissorTestEnable_TxsdGlPipelineSettingsGroupChoiceScissorTestEnable_ instance.
func (me *XsdGoPkgHasElem_scissor_test_enablechoicegl_pipeline_settings_groupschema_ScissorTestEnable_TxsdGlPipelineSettingsGroupChoiceScissorTestEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_scissor_test_enablechoicegl_pipeline_settings_groupschema_ScissorTestEnable_TxsdGlPipelineSettingsGroupChoiceScissorTestEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ScissorTestEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglMaxTextureImageUnitsIndexType xsdt.NonNegativeInteger

//	Returns a string representation of this TglMaxTextureImageUnitsIndexType's current non-string scalar value.
func (me TglMaxTextureImageUnitsIndexType) String() string {
	return xsdt.NonNegativeInteger(me).String()
}

//	This convenience method just performs a simple type conversion to TglMaxTextureImageUnitsIndexType's alias type xsdt.NonNegativeInteger.
func (me TglMaxTextureImageUnitsIndexType) ToXsdtNonNegativeInteger() xsdt.NonNegativeInteger {
	return xsdt.NonNegativeInteger(me)
}

//	Since TglMaxTextureImageUnitsIndexType is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TglMaxTextureImageUnitsIndexType) Set(s string) { (*xsdt.NonNegativeInteger)(me).Set(s) }

type XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndexType_ struct {
	Index TglMaxTextureImageUnitsIndexType `xml:"http://www.collada.org/2008/03/COLLADASchema index,attr"`
}

type TxsdGlPipelineSettingsGroupChoiceTextureRECTEnable struct {
	XsdGoPkgHasAttr_Value_XsdtBoolean_False

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndexType_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceTextureRECTEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceTextureRECTEnable instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceTextureRECTEnable instance.
func (me *TxsdGlPipelineSettingsGroupChoiceTextureRECTEnable) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceTextureRECTEnable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_textureRECT_enablechoicegl_pipeline_settings_groupschema_TextureRECTEnable_TxsdGlPipelineSettingsGroupChoiceTextureRECTEnable_ struct {
	TextureRECTEnable *TxsdGlPipelineSettingsGroupChoiceTextureRECTEnable `xml:"http://www.collada.org/2008/03/COLLADASchema textureRECT_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_textureRECT_enablechoicegl_pipeline_settings_groupschema_TextureRECTEnable_TxsdGlPipelineSettingsGroupChoiceTextureRECTEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_textureRECT_enablechoicegl_pipeline_settings_groupschema_TextureRECTEnable_TxsdGlPipelineSettingsGroupChoiceTextureRECTEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_textureRECT_enablechoicegl_pipeline_settings_groupschema_TextureRECTEnable_TxsdGlPipelineSettingsGroupChoiceTextureRECTEnable_ instance.
func (me *XsdGoPkgHasElem_textureRECT_enablechoicegl_pipeline_settings_groupschema_TextureRECTEnable_TxsdGlPipelineSettingsGroupChoiceTextureRECTEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_textureRECT_enablechoicegl_pipeline_settings_groupschema_TextureRECTEnable_TxsdGlPipelineSettingsGroupChoiceTextureRECTEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TextureRECTEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_TglLogicOpEnum_Copy struct {
	Value TglLogicOpEnum `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "COPY"
func (me XsdGoPkgHasAttr_Value_TglLogicOpEnum_Copy) ValueDefault() TglLogicOpEnum {
	return TglLogicOpEnum("COPY")
}

type TxsdGlPipelineSettingsGroupChoiceLogicOp struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglLogicOpEnum_Copy
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceLogicOp function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceLogicOp instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceLogicOp instance.
func (me *TxsdGlPipelineSettingsGroupChoiceLogicOp) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceLogicOp; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_logic_opchoicegl_pipeline_settings_groupschema_LogicOp_TxsdGlPipelineSettingsGroupChoiceLogicOp_ struct {
	LogicOp *TxsdGlPipelineSettingsGroupChoiceLogicOp `xml:"http://www.collada.org/2008/03/COLLADASchema logic_op"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_logic_opchoicegl_pipeline_settings_groupschema_LogicOp_TxsdGlPipelineSettingsGroupChoiceLogicOp_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_logic_opchoicegl_pipeline_settings_groupschema_LogicOp_TxsdGlPipelineSettingsGroupChoiceLogicOp_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_logic_opchoicegl_pipeline_settings_groupschema_LogicOp_TxsdGlPipelineSettingsGroupChoiceLogicOp_ instance.
func (me *XsdGoPkgHasElem_logic_opchoicegl_pipeline_settings_groupschema_LogicOp_TxsdGlPipelineSettingsGroupChoiceLogicOp_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_logic_opchoicegl_pipeline_settings_groupschema_LogicOp_TxsdGlPipelineSettingsGroupChoiceLogicOp_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LogicOp.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_cull_face_enablechoicegl_pipeline_settings_groupschema_CullFaceEnable_TxsdGlPipelineSettingsGroupChoiceCullFaceEnable_ struct {
	CullFaceEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema cull_face_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_cull_face_enablechoicegl_pipeline_settings_groupschema_CullFaceEnable_TxsdGlPipelineSettingsGroupChoiceCullFaceEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_cull_face_enablechoicegl_pipeline_settings_groupschema_CullFaceEnable_TxsdGlPipelineSettingsGroupChoiceCullFaceEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_cull_face_enablechoicegl_pipeline_settings_groupschema_CullFaceEnable_TxsdGlPipelineSettingsGroupChoiceCullFaceEnable_ instance.
func (me *XsdGoPkgHasElem_cull_face_enablechoicegl_pipeline_settings_groupschema_CullFaceEnable_TxsdGlPipelineSettingsGroupChoiceCullFaceEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_cull_face_enablechoicegl_pipeline_settings_groupschema_CullFaceEnable_TxsdGlPipelineSettingsGroupChoiceCullFaceEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CullFaceEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_XsdtBoolean_True struct {
	Value xsdt.Boolean `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- true
func (me XsdGoPkgHasAttr_Value_XsdtBoolean_True) ValueDefault() xsdt.Boolean {
	return xsdt.Boolean(true)
}

type TxsdGlPipelineSettingsGroupChoiceDepthMask struct {
	XsdGoPkgHasAttr_Value_XsdtBoolean_True

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceDepthMask function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceDepthMask instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceDepthMask instance.
func (me *TxsdGlPipelineSettingsGroupChoiceDepthMask) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceDepthMask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_depth_maskchoicegl_pipeline_settings_groupschema_DepthMask_TxsdGlPipelineSettingsGroupChoiceDepthMask_ struct {
	DepthMask *TxsdGlPipelineSettingsGroupChoiceDepthMask `xml:"http://www.collada.org/2008/03/COLLADASchema depth_mask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_depth_maskchoicegl_pipeline_settings_groupschema_DepthMask_TxsdGlPipelineSettingsGroupChoiceDepthMask_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_maskchoicegl_pipeline_settings_groupschema_DepthMask_TxsdGlPipelineSettingsGroupChoiceDepthMask_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_depth_maskchoicegl_pipeline_settings_groupschema_DepthMask_TxsdGlPipelineSettingsGroupChoiceDepthMask_ instance.
func (me *XsdGoPkgHasElem_depth_maskchoicegl_pipeline_settings_groupschema_DepthMask_TxsdGlPipelineSettingsGroupChoiceDepthMask_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_depth_maskchoicegl_pipeline_settings_groupschema_DepthMask_TxsdGlPipelineSettingsGroupChoiceDepthMask_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DepthMask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_material_shininesschoicegl_pipeline_settings_groupschema_MaterialShininess_TxsdGlPipelineSettingsGroupChoiceMaterialShininess_ struct {
	MaterialShininess *TxsdGlPipelineSettingsGroupChoicePointSizeMin `xml:"http://www.collada.org/2008/03/COLLADASchema material_shininess"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_material_shininesschoicegl_pipeline_settings_groupschema_MaterialShininess_TxsdGlPipelineSettingsGroupChoiceMaterialShininess_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_material_shininesschoicegl_pipeline_settings_groupschema_MaterialShininess_TxsdGlPipelineSettingsGroupChoiceMaterialShininess_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_material_shininesschoicegl_pipeline_settings_groupschema_MaterialShininess_TxsdGlPipelineSettingsGroupChoiceMaterialShininess_ instance.
func (me *XsdGoPkgHasElem_material_shininesschoicegl_pipeline_settings_groupschema_MaterialShininess_TxsdGlPipelineSettingsGroupChoiceMaterialShininess_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_material_shininesschoicegl_pipeline_settings_groupschema_MaterialShininess_TxsdGlPipelineSettingsGroupChoiceMaterialShininess_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MaterialShininess.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tbool4Type_TrueTrueTrueTrue struct {
	Value Tbool4Type `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "true true true true"
func (me XsdGoPkgHasAttr_Value_Tbool4Type_TrueTrueTrueTrue) ValueDefault() Tbool4Type {
	return Tbool4Type("true true true true")
}

type TxsdGlPipelineSettingsGroupChoiceColorMask struct {
	XsdGoPkgHasAttr_Value_Tbool4Type_TrueTrueTrueTrue

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceColorMask function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceColorMask instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceColorMask instance.
func (me *TxsdGlPipelineSettingsGroupChoiceColorMask) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceColorMask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_color_maskchoicegl_pipeline_settings_groupschema_ColorMask_TxsdGlPipelineSettingsGroupChoiceColorMask_ struct {
	ColorMask *TxsdGlPipelineSettingsGroupChoiceColorMask `xml:"http://www.collada.org/2008/03/COLLADASchema color_mask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_color_maskchoicegl_pipeline_settings_groupschema_ColorMask_TxsdGlPipelineSettingsGroupChoiceColorMask_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_color_maskchoicegl_pipeline_settings_groupschema_ColorMask_TxsdGlPipelineSettingsGroupChoiceColorMask_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_color_maskchoicegl_pipeline_settings_groupschema_ColorMask_TxsdGlPipelineSettingsGroupChoiceColorMask_ instance.
func (me *XsdGoPkgHasElem_color_maskchoicegl_pipeline_settings_groupschema_ColorMask_TxsdGlPipelineSettingsGroupChoiceColorMask_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_color_maskchoicegl_pipeline_settings_groupschema_ColorMask_TxsdGlPipelineSettingsGroupChoiceColorMask_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ColorMask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tfloat4X4Type_1000010000100001 struct {
	Value Tfloat4X4Type `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1"
func (me XsdGoPkgHasAttr_Value_Tfloat4X4Type_1000010000100001) ValueDefault() Tfloat4X4Type {
	return Tfloat4X4Type("1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1")
}

type TxsdGlPipelineSettingsGroupChoiceModelViewMatrix struct {
	XsdGoPkgHasAttr_Value_Tfloat4X4Type_1000010000100001

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceModelViewMatrix function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceModelViewMatrix instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceModelViewMatrix instance.
func (me *TxsdGlPipelineSettingsGroupChoiceModelViewMatrix) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceModelViewMatrix; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_model_view_matrixchoicegl_pipeline_settings_groupschema_ModelViewMatrix_TxsdGlPipelineSettingsGroupChoiceModelViewMatrix_ struct {
	ModelViewMatrix *TxsdGlPipelineSettingsGroupChoiceModelViewMatrix `xml:"http://www.collada.org/2008/03/COLLADASchema model_view_matrix"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_model_view_matrixchoicegl_pipeline_settings_groupschema_ModelViewMatrix_TxsdGlPipelineSettingsGroupChoiceModelViewMatrix_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_model_view_matrixchoicegl_pipeline_settings_groupschema_ModelViewMatrix_TxsdGlPipelineSettingsGroupChoiceModelViewMatrix_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_model_view_matrixchoicegl_pipeline_settings_groupschema_ModelViewMatrix_TxsdGlPipelineSettingsGroupChoiceModelViewMatrix_ instance.
func (me *XsdGoPkgHasElem_model_view_matrixchoicegl_pipeline_settings_groupschema_ModelViewMatrix_TxsdGlPipelineSettingsGroupChoiceModelViewMatrix_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_model_view_matrixchoicegl_pipeline_settings_groupschema_ModelViewMatrix_TxsdGlPipelineSettingsGroupChoiceModelViewMatrix_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ModelViewMatrix.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tfloat2Type_00 struct {
	Value Tfloat2Type `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "0 0"
func (me XsdGoPkgHasAttr_Value_Tfloat2Type_00) ValueDefault() Tfloat2Type { return Tfloat2Type("0 0") }

type TxsdGlPipelineSettingsGroupChoicePolygonOffset struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat2Type_00
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoicePolygonOffset function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoicePolygonOffset instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoicePolygonOffset instance.
func (me *TxsdGlPipelineSettingsGroupChoicePolygonOffset) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoicePolygonOffset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_polygon_offsetchoicegl_pipeline_settings_groupschema_PolygonOffset_TxsdGlPipelineSettingsGroupChoicePolygonOffset_ struct {
	PolygonOffset *TxsdGlPipelineSettingsGroupChoicePolygonOffset `xml:"http://www.collada.org/2008/03/COLLADASchema polygon_offset"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_polygon_offsetchoicegl_pipeline_settings_groupschema_PolygonOffset_TxsdGlPipelineSettingsGroupChoicePolygonOffset_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_polygon_offsetchoicegl_pipeline_settings_groupschema_PolygonOffset_TxsdGlPipelineSettingsGroupChoicePolygonOffset_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_polygon_offsetchoicegl_pipeline_settings_groupschema_PolygonOffset_TxsdGlPipelineSettingsGroupChoicePolygonOffset_ instance.
func (me *XsdGoPkgHasElem_polygon_offsetchoicegl_pipeline_settings_groupschema_PolygonOffset_TxsdGlPipelineSettingsGroupChoicePolygonOffset_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_polygon_offsetchoicegl_pipeline_settings_groupschema_PolygonOffset_TxsdGlPipelineSettingsGroupChoicePolygonOffset_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PolygonOffset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_texture2D_enablechoicegl_pipeline_settings_groupschema_Texture2DEnable_TxsdGlPipelineSettingsGroupChoiceTexture2DEnable_ struct {
	Texture2DEnable *TxsdGlPipelineSettingsGroupChoiceTextureRECTEnable `xml:"http://www.collada.org/2008/03/COLLADASchema texture2D_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_texture2D_enablechoicegl_pipeline_settings_groupschema_Texture2DEnable_TxsdGlPipelineSettingsGroupChoiceTexture2DEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texture2D_enablechoicegl_pipeline_settings_groupschema_Texture2DEnable_TxsdGlPipelineSettingsGroupChoiceTexture2DEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texture2D_enablechoicegl_pipeline_settings_groupschema_Texture2DEnable_TxsdGlPipelineSettingsGroupChoiceTexture2DEnable_ instance.
func (me *XsdGoPkgHasElem_texture2D_enablechoicegl_pipeline_settings_groupschema_Texture2DEnable_TxsdGlPipelineSettingsGroupChoiceTexture2DEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_texture2D_enablechoicegl_pipeline_settings_groupschema_Texture2DEnable_TxsdGlPipelineSettingsGroupChoiceTexture2DEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Texture2DEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_TfloatType_180 struct {
	Value TfloatType `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- 180
func (me XsdGoPkgHasAttr_Value_TfloatType_180) ValueDefault() TfloatType { return TfloatType(180) }

type TglMaxLightsIndexType xsdt.NonNegativeInteger

//	Since TglMaxLightsIndexType is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TglMaxLightsIndexType) Set(s string) { (*xsdt.NonNegativeInteger)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TglMaxLightsIndexType's alias type xsdt.NonNegativeInteger.
func (me TglMaxLightsIndexType) ToXsdtNonNegativeInteger() xsdt.NonNegativeInteger {
	return xsdt.NonNegativeInteger(me)
}

//	Returns a string representation of this TglMaxLightsIndexType's current non-string scalar value.
func (me TglMaxLightsIndexType) String() string { return xsdt.NonNegativeInteger(me).String() }

type XsdGoPkgHasAttr_Index_TglMaxLightsIndexType_ struct {
	Index TglMaxLightsIndexType `xml:"http://www.collada.org/2008/03/COLLADASchema index,attr"`
}

type TxsdGlPipelineSettingsGroupChoiceLightSpotCutoff struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TfloatType_180

	XsdGoPkgHasAttr_Index_TglMaxLightsIndexType_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceLightSpotCutoff function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceLightSpotCutoff instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceLightSpotCutoff instance.
func (me *TxsdGlPipelineSettingsGroupChoiceLightSpotCutoff) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceLightSpotCutoff; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_spot_cutoffchoicegl_pipeline_settings_groupschema_LightSpotCutoff_TxsdGlPipelineSettingsGroupChoiceLightSpotCutoff_ struct {
	LightSpotCutoff *TxsdGlPipelineSettingsGroupChoiceLightSpotCutoff `xml:"http://www.collada.org/2008/03/COLLADASchema light_spot_cutoff"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_spot_cutoffchoicegl_pipeline_settings_groupschema_LightSpotCutoff_TxsdGlPipelineSettingsGroupChoiceLightSpotCutoff_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_spot_cutoffchoicegl_pipeline_settings_groupschema_LightSpotCutoff_TxsdGlPipelineSettingsGroupChoiceLightSpotCutoff_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_spot_cutoffchoicegl_pipeline_settings_groupschema_LightSpotCutoff_TxsdGlPipelineSettingsGroupChoiceLightSpotCutoff_ instance.
func (me *XsdGoPkgHasElem_light_spot_cutoffchoicegl_pipeline_settings_groupschema_LightSpotCutoff_TxsdGlPipelineSettingsGroupChoiceLightSpotCutoff_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_spot_cutoffchoicegl_pipeline_settings_groupschema_LightSpotCutoff_TxsdGlPipelineSettingsGroupChoiceLightSpotCutoff_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightSpotCutoff.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_TglShadeModelEnum_Smooth struct {
	Value TglShadeModelEnum `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "SMOOTH"
func (me XsdGoPkgHasAttr_Value_TglShadeModelEnum_Smooth) ValueDefault() TglShadeModelEnum {
	return TglShadeModelEnum("SMOOTH")
}

type TxsdGlPipelineSettingsGroupChoiceShadeModel struct {
	XsdGoPkgHasAttr_Value_TglShadeModelEnum_Smooth

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceShadeModel function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceShadeModel instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceShadeModel instance.
func (me *TxsdGlPipelineSettingsGroupChoiceShadeModel) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceShadeModel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_shade_modelchoicegl_pipeline_settings_groupschema_ShadeModel_TxsdGlPipelineSettingsGroupChoiceShadeModel_ struct {
	ShadeModel *TxsdGlPipelineSettingsGroupChoiceShadeModel `xml:"http://www.collada.org/2008/03/COLLADASchema shade_model"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_shade_modelchoicegl_pipeline_settings_groupschema_ShadeModel_TxsdGlPipelineSettingsGroupChoiceShadeModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_shade_modelchoicegl_pipeline_settings_groupschema_ShadeModel_TxsdGlPipelineSettingsGroupChoiceShadeModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_shade_modelchoicegl_pipeline_settings_groupschema_ShadeModel_TxsdGlPipelineSettingsGroupChoiceShadeModel_ instance.
func (me *XsdGoPkgHasElem_shade_modelchoicegl_pipeline_settings_groupschema_ShadeModel_TxsdGlPipelineSettingsGroupChoiceShadeModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_shade_modelchoicegl_pipeline_settings_groupschema_ShadeModel_TxsdGlPipelineSettingsGroupChoiceShadeModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ShadeModel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_TglBlendEnum_Zero struct {
	Value TglBlendEnum `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "ZERO"
func (me XsdGoPkgHasAttr_Value_TglBlendEnum_Zero) ValueDefault() TglBlendEnum {
	return TglBlendEnum("ZERO")
}

type TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceDest struct {
	XsdGoPkgHasAttr_Value_TglBlendEnum_Zero

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceDest function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceDest instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceDest instance.
func (me *TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceDest) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceDest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_destsequenceblend_funcchoicegl_pipeline_settings_groupschema_Dest_TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceDest_ struct {
	Dest *TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceDest `xml:"http://www.collada.org/2008/03/COLLADASchema dest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_destsequenceblend_funcchoicegl_pipeline_settings_groupschema_Dest_TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceDest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_destsequenceblend_funcchoicegl_pipeline_settings_groupschema_Dest_TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceDest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_destsequenceblend_funcchoicegl_pipeline_settings_groupschema_Dest_TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceDest_ instance.
func (me *XsdGoPkgHasElem_destsequenceblend_funcchoicegl_pipeline_settings_groupschema_Dest_TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceDest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_destsequenceblend_funcchoicegl_pipeline_settings_groupschema_Dest_TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceDest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Dest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_TglBlendEnum_One struct {
	Value TglBlendEnum `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "ONE"
func (me XsdGoPkgHasAttr_Value_TglBlendEnum_One) ValueDefault() TglBlendEnum {
	return TglBlendEnum("ONE")
}

type TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceSrc struct {
	XsdGoPkgHasAttr_Value_TglBlendEnum_One

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceSrc function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceSrc instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceSrc instance.
func (me *TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceSrc) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceSrc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_srcsequenceblend_funcchoicegl_pipeline_settings_groupschema_Src_TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceSrc_ struct {
	Src *TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceSrc `xml:"http://www.collada.org/2008/03/COLLADASchema src"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_srcsequenceblend_funcchoicegl_pipeline_settings_groupschema_Src_TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceSrc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_srcsequenceblend_funcchoicegl_pipeline_settings_groupschema_Src_TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceSrc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_srcsequenceblend_funcchoicegl_pipeline_settings_groupschema_Src_TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceSrc_ instance.
func (me *XsdGoPkgHasElem_srcsequenceblend_funcchoicegl_pipeline_settings_groupschema_Src_TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceSrc_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_srcsequenceblend_funcchoicegl_pipeline_settings_groupschema_Src_TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceSrc_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Src.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsGroupChoiceBlendFunc struct {
	XsdGoPkgHasElem_destsequenceblend_funcchoicegl_pipeline_settings_groupschema_Dest_TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceDest_

	XsdGoPkgHasElem_srcsequenceblend_funcchoicegl_pipeline_settings_groupschema_Src_TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceSrc_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceBlendFunc function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceBlendFunc instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceBlendFunc instance.
func (me *TxsdGlPipelineSettingsGroupChoiceBlendFunc) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceBlendFunc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_destsequenceblend_funcchoicegl_pipeline_settings_groupschema_Dest_TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceDest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_srcsequenceblend_funcchoicegl_pipeline_settings_groupschema_Src_TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceSrc_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_blend_funcchoicegl_pipeline_settings_groupschema_BlendFunc_TxsdGlPipelineSettingsGroupChoiceBlendFunc_ struct {
	BlendFunc *TxsdGlPipelineSettingsGroupChoiceBlendFunc `xml:"http://www.collada.org/2008/03/COLLADASchema blend_func"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_blend_funcchoicegl_pipeline_settings_groupschema_BlendFunc_TxsdGlPipelineSettingsGroupChoiceBlendFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_blend_funcchoicegl_pipeline_settings_groupschema_BlendFunc_TxsdGlPipelineSettingsGroupChoiceBlendFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_blend_funcchoicegl_pipeline_settings_groupschema_BlendFunc_TxsdGlPipelineSettingsGroupChoiceBlendFunc_ instance.
func (me *XsdGoPkgHasElem_blend_funcchoicegl_pipeline_settings_groupschema_BlendFunc_TxsdGlPipelineSettingsGroupChoiceBlendFunc_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_blend_funcchoicegl_pipeline_settings_groupschema_BlendFunc_TxsdGlPipelineSettingsGroupChoiceBlendFunc_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BlendFunc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fog_densitychoicegl_pipeline_settings_groupschema_FogDensity_TxsdGlPipelineSettingsGroupChoiceFogDensity_ struct {
	FogDensity *TxsdGlPipelineSettingsGroupChoiceFogEnd `xml:"http://www.collada.org/2008/03/COLLADASchema fog_density"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fog_densitychoicegl_pipeline_settings_groupschema_FogDensity_TxsdGlPipelineSettingsGroupChoiceFogDensity_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_densitychoicegl_pipeline_settings_groupschema_FogDensity_TxsdGlPipelineSettingsGroupChoiceFogDensity_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_densitychoicegl_pipeline_settings_groupschema_FogDensity_TxsdGlPipelineSettingsGroupChoiceFogDensity_ instance.
func (me *XsdGoPkgHasElem_fog_densitychoicegl_pipeline_settings_groupschema_FogDensity_TxsdGlPipelineSettingsGroupChoiceFogDensity_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fog_densitychoicegl_pipeline_settings_groupschema_FogDensity_TxsdGlPipelineSettingsGroupChoiceFogDensity_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FogDensity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_sample_coverage_enablechoicegl_pipeline_settings_groupschema_SampleCoverageEnable_TxsdGlPipelineSettingsGroupChoiceSampleCoverageEnable_ struct {
	SampleCoverageEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema sample_coverage_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sample_coverage_enablechoicegl_pipeline_settings_groupschema_SampleCoverageEnable_TxsdGlPipelineSettingsGroupChoiceSampleCoverageEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sample_coverage_enablechoicegl_pipeline_settings_groupschema_SampleCoverageEnable_TxsdGlPipelineSettingsGroupChoiceSampleCoverageEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sample_coverage_enablechoicegl_pipeline_settings_groupschema_SampleCoverageEnable_TxsdGlPipelineSettingsGroupChoiceSampleCoverageEnable_ instance.
func (me *XsdGoPkgHasElem_sample_coverage_enablechoicegl_pipeline_settings_groupschema_SampleCoverageEnable_TxsdGlPipelineSettingsGroupChoiceSampleCoverageEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sample_coverage_enablechoicegl_pipeline_settings_groupschema_SampleCoverageEnable_TxsdGlPipelineSettingsGroupChoiceSampleCoverageEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SampleCoverageEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsGroupChoiceLightQuadraticAttenuation struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TfloatType_0

	XsdGoPkgHasAttr_Index_TglMaxLightsIndexType_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceLightQuadraticAttenuation function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceLightQuadraticAttenuation instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceLightQuadraticAttenuation instance.
func (me *TxsdGlPipelineSettingsGroupChoiceLightQuadraticAttenuation) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceLightQuadraticAttenuation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_quadratic_attenuationchoicegl_pipeline_settings_groupschema_LightQuadraticAttenuation_TxsdGlPipelineSettingsGroupChoiceLightQuadraticAttenuation_ struct {
	LightQuadraticAttenuation *TxsdGlPipelineSettingsGroupChoiceLightQuadraticAttenuation `xml:"http://www.collada.org/2008/03/COLLADASchema light_quadratic_attenuation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_quadratic_attenuationchoicegl_pipeline_settings_groupschema_LightQuadraticAttenuation_TxsdGlPipelineSettingsGroupChoiceLightQuadraticAttenuation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_quadratic_attenuationchoicegl_pipeline_settings_groupschema_LightQuadraticAttenuation_TxsdGlPipelineSettingsGroupChoiceLightQuadraticAttenuation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_quadratic_attenuationchoicegl_pipeline_settings_groupschema_LightQuadraticAttenuation_TxsdGlPipelineSettingsGroupChoiceLightQuadraticAttenuation_ instance.
func (me *XsdGoPkgHasElem_light_quadratic_attenuationchoicegl_pipeline_settings_groupschema_LightQuadraticAttenuation_TxsdGlPipelineSettingsGroupChoiceLightQuadraticAttenuation_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_quadratic_attenuationchoicegl_pipeline_settings_groupschema_LightQuadraticAttenuation_TxsdGlPipelineSettingsGroupChoiceLightQuadraticAttenuation_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightQuadraticAttenuation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tfloat4Type_0000 struct {
	Value Tfloat4Type `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "0 0 0 0"
func (me XsdGoPkgHasAttr_Value_Tfloat4Type_0000) ValueDefault() Tfloat4Type {
	return Tfloat4Type("0 0 0 0")
}

type TxsdGlPipelineSettingsGroupChoiceLightDiffuse struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglMaxLightsIndexType_

	XsdGoPkgHasAttr_Value_Tfloat4Type_0000
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceLightDiffuse function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceLightDiffuse instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceLightDiffuse instance.
func (me *TxsdGlPipelineSettingsGroupChoiceLightDiffuse) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceLightDiffuse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_diffusechoicegl_pipeline_settings_groupschema_LightDiffuse_TxsdGlPipelineSettingsGroupChoiceLightDiffuse_ struct {
	LightDiffuse *TxsdGlPipelineSettingsGroupChoiceLightDiffuse `xml:"http://www.collada.org/2008/03/COLLADASchema light_diffuse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_diffusechoicegl_pipeline_settings_groupschema_LightDiffuse_TxsdGlPipelineSettingsGroupChoiceLightDiffuse_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_diffusechoicegl_pipeline_settings_groupschema_LightDiffuse_TxsdGlPipelineSettingsGroupChoiceLightDiffuse_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_diffusechoicegl_pipeline_settings_groupschema_LightDiffuse_TxsdGlPipelineSettingsGroupChoiceLightDiffuse_ instance.
func (me *XsdGoPkgHasElem_light_diffusechoicegl_pipeline_settings_groupschema_LightDiffuse_TxsdGlPipelineSettingsGroupChoiceLightDiffuse_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_diffusechoicegl_pipeline_settings_groupschema_LightDiffuse_TxsdGlPipelineSettingsGroupChoiceLightDiffuse_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightDiffuse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_model_local_viewer_enablechoicegl_pipeline_settings_groupschema_LightModelLocalViewerEnable_TxsdGlPipelineSettingsGroupChoiceLightModelLocalViewerEnable_ struct {
	LightModelLocalViewerEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema light_model_local_viewer_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_model_local_viewer_enablechoicegl_pipeline_settings_groupschema_LightModelLocalViewerEnable_TxsdGlPipelineSettingsGroupChoiceLightModelLocalViewerEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_model_local_viewer_enablechoicegl_pipeline_settings_groupschema_LightModelLocalViewerEnable_TxsdGlPipelineSettingsGroupChoiceLightModelLocalViewerEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_model_local_viewer_enablechoicegl_pipeline_settings_groupschema_LightModelLocalViewerEnable_TxsdGlPipelineSettingsGroupChoiceLightModelLocalViewerEnable_ instance.
func (me *XsdGoPkgHasElem_light_model_local_viewer_enablechoicegl_pipeline_settings_groupschema_LightModelLocalViewerEnable_TxsdGlPipelineSettingsGroupChoiceLightModelLocalViewerEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_model_local_viewer_enablechoicegl_pipeline_settings_groupschema_LightModelLocalViewerEnable_TxsdGlPipelineSettingsGroupChoiceLightModelLocalViewerEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightModelLocalViewerEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_dither_enablechoicegl_pipeline_settings_groupschema_DitherEnable_TxsdGlPipelineSettingsGroupChoiceDitherEnable_ struct {
	DitherEnable *TxsdGlPipelineSettingsGroupChoiceDepthMask `xml:"http://www.collada.org/2008/03/COLLADASchema dither_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_dither_enablechoicegl_pipeline_settings_groupschema_DitherEnable_TxsdGlPipelineSettingsGroupChoiceDitherEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_dither_enablechoicegl_pipeline_settings_groupschema_DitherEnable_TxsdGlPipelineSettingsGroupChoiceDitherEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_dither_enablechoicegl_pipeline_settings_groupschema_DitherEnable_TxsdGlPipelineSettingsGroupChoiceDitherEnable_ instance.
func (me *XsdGoPkgHasElem_dither_enablechoicegl_pipeline_settings_groupschema_DitherEnable_TxsdGlPipelineSettingsGroupChoiceDitherEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_dither_enablechoicegl_pipeline_settings_groupschema_DitherEnable_TxsdGlPipelineSettingsGroupChoiceDitherEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DitherEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tint2Type_165536 struct {
	Value Tint2Type `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "1 65536"
func (me XsdGoPkgHasAttr_Value_Tint2Type_165536) ValueDefault() Tint2Type {
	return Tint2Type("1 65536")
}

type TxsdGlPipelineSettingsGroupChoiceLineStipple struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tint2Type_165536
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceLineStipple function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceLineStipple instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceLineStipple instance.
func (me *TxsdGlPipelineSettingsGroupChoiceLineStipple) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceLineStipple; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_line_stipplechoicegl_pipeline_settings_groupschema_LineStipple_TxsdGlPipelineSettingsGroupChoiceLineStipple_ struct {
	LineStipple *TxsdGlPipelineSettingsGroupChoiceLineStipple `xml:"http://www.collada.org/2008/03/COLLADASchema line_stipple"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_line_stipplechoicegl_pipeline_settings_groupschema_LineStipple_TxsdGlPipelineSettingsGroupChoiceLineStipple_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_line_stipplechoicegl_pipeline_settings_groupschema_LineStipple_TxsdGlPipelineSettingsGroupChoiceLineStipple_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_line_stipplechoicegl_pipeline_settings_groupschema_LineStipple_TxsdGlPipelineSettingsGroupChoiceLineStipple_ instance.
func (me *XsdGoPkgHasElem_line_stipplechoicegl_pipeline_settings_groupschema_LineStipple_TxsdGlPipelineSettingsGroupChoiceLineStipple_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_line_stipplechoicegl_pipeline_settings_groupschema_LineStipple_TxsdGlPipelineSettingsGroupChoiceLineStipple_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LineStipple.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_polygon_stipple_enablechoicegl_pipeline_settings_groupschema_PolygonStippleEnable_TxsdGlPipelineSettingsGroupChoicePolygonStippleEnable_ struct {
	PolygonStippleEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema polygon_stipple_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_polygon_stipple_enablechoicegl_pipeline_settings_groupschema_PolygonStippleEnable_TxsdGlPipelineSettingsGroupChoicePolygonStippleEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_polygon_stipple_enablechoicegl_pipeline_settings_groupschema_PolygonStippleEnable_TxsdGlPipelineSettingsGroupChoicePolygonStippleEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_polygon_stipple_enablechoicegl_pipeline_settings_groupschema_PolygonStippleEnable_TxsdGlPipelineSettingsGroupChoicePolygonStippleEnable_ instance.
func (me *XsdGoPkgHasElem_polygon_stipple_enablechoicegl_pipeline_settings_groupschema_PolygonStippleEnable_TxsdGlPipelineSettingsGroupChoicePolygonStippleEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_polygon_stipple_enablechoicegl_pipeline_settings_groupschema_PolygonStippleEnable_TxsdGlPipelineSettingsGroupChoicePolygonStippleEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PolygonStippleEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_TglStencilOpEnum_Keep struct {
	Value TglStencilOpEnum `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "KEEP"
func (me XsdGoPkgHasAttr_Value_TglStencilOpEnum_Keep) ValueDefault() TglStencilOpEnum {
	return TglStencilOpEnum("KEEP")
}

type TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceZpass struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglStencilOpEnum_Keep
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceZpass function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceZpass instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceZpass instance.
func (me *TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceZpass) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceZpass; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Zpass_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceZpass_ struct {
	Zpass *TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceZpass `xml:"http://www.collada.org/2008/03/COLLADASchema zpass"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Zpass_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceZpass_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Zpass_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceZpass_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Zpass_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceZpass_ instance.
func (me *XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Zpass_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceZpass_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Zpass_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceZpass_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Zpass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_failsequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Fail_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceFail_ struct {
	Fail *TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceZpass `xml:"http://www.collada.org/2008/03/COLLADASchema fail"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_failsequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Fail_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceFail_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_failsequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Fail_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceFail_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_failsequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Fail_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceFail_ instance.
func (me *XsdGoPkgHasElem_failsequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Fail_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceFail_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_failsequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Fail_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceFail_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Fail.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Zfail_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceZfail_ struct {
	Zfail *TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceZpass `xml:"http://www.collada.org/2008/03/COLLADASchema zfail"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Zfail_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceZfail_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Zfail_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceZfail_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Zfail_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceZfail_ instance.
func (me *XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Zfail_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceZfail_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Zfail_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceZfail_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Zfail.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_facesequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceFace_ struct {
	Face *TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace `xml:"http://www.collada.org/2008/03/COLLADASchema face"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_facesequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceFace_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_facesequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceFace_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_facesequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceFace_ instance.
func (me *XsdGoPkgHasElem_facesequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceFace_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_facesequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceFace_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Face.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsGroupChoiceStencilOpSeparate struct {
	XsdGoPkgHasElem_failsequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Fail_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceFail_

	XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Zfail_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceZfail_

	XsdGoPkgHasElem_facesequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceFace_

	XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Zpass_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceZpass_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceStencilOpSeparate function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceStencilOpSeparate instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceStencilOpSeparate instance.
func (me *TxsdGlPipelineSettingsGroupChoiceStencilOpSeparate) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceStencilOpSeparate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Zpass_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceZpass_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_failsequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Fail_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceFail_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Zfail_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceZfail_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_facesequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceFace_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_stencil_op_separatechoicegl_pipeline_settings_groupschema_StencilOpSeparate_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparate_ struct {
	StencilOpSeparate *TxsdGlPipelineSettingsGroupChoiceStencilOpSeparate `xml:"http://www.collada.org/2008/03/COLLADASchema stencil_op_separate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_stencil_op_separatechoicegl_pipeline_settings_groupschema_StencilOpSeparate_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparate_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_op_separatechoicegl_pipeline_settings_groupschema_StencilOpSeparate_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparate_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_op_separatechoicegl_pipeline_settings_groupschema_StencilOpSeparate_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparate_ instance.
func (me *XsdGoPkgHasElem_stencil_op_separatechoicegl_pipeline_settings_groupschema_StencilOpSeparate_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparate_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_stencil_op_separatechoicegl_pipeline_settings_groupschema_StencilOpSeparate_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparate_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StencilOpSeparate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_TglFogEnum_Exp struct {
	Value TglFogEnum `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "EXP"
func (me XsdGoPkgHasAttr_Value_TglFogEnum_Exp) ValueDefault() TglFogEnum { return TglFogEnum("EXP") }

type TxsdGlPipelineSettingsGroupChoiceFogMode struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglFogEnum_Exp
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceFogMode function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceFogMode instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceFogMode instance.
func (me *TxsdGlPipelineSettingsGroupChoiceFogMode) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceFogMode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fog_modechoicegl_pipeline_settings_groupschema_FogMode_TxsdGlPipelineSettingsGroupChoiceFogMode_ struct {
	FogMode *TxsdGlPipelineSettingsGroupChoiceFogMode `xml:"http://www.collada.org/2008/03/COLLADASchema fog_mode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fog_modechoicegl_pipeline_settings_groupschema_FogMode_TxsdGlPipelineSettingsGroupChoiceFogMode_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_modechoicegl_pipeline_settings_groupschema_FogMode_TxsdGlPipelineSettingsGroupChoiceFogMode_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_modechoicegl_pipeline_settings_groupschema_FogMode_TxsdGlPipelineSettingsGroupChoiceFogMode_ instance.
func (me *XsdGoPkgHasElem_fog_modechoicegl_pipeline_settings_groupschema_FogMode_TxsdGlPipelineSettingsGroupChoiceFogMode_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fog_modechoicegl_pipeline_settings_groupschema_FogMode_TxsdGlPipelineSettingsGroupChoiceFogMode_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FogMode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_color_material_enablechoicegl_pipeline_settings_groupschema_ColorMaterialEnable_TxsdGlPipelineSettingsGroupChoiceColorMaterialEnable_ struct {
	ColorMaterialEnable *TxsdGlPipelineSettingsGroupChoiceDepthMask `xml:"http://www.collada.org/2008/03/COLLADASchema color_material_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_color_material_enablechoicegl_pipeline_settings_groupschema_ColorMaterialEnable_TxsdGlPipelineSettingsGroupChoiceColorMaterialEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_color_material_enablechoicegl_pipeline_settings_groupschema_ColorMaterialEnable_TxsdGlPipelineSettingsGroupChoiceColorMaterialEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_color_material_enablechoicegl_pipeline_settings_groupschema_ColorMaterialEnable_TxsdGlPipelineSettingsGroupChoiceColorMaterialEnable_ instance.
func (me *XsdGoPkgHasElem_color_material_enablechoicegl_pipeline_settings_groupschema_ColorMaterialEnable_TxsdGlPipelineSettingsGroupChoiceColorMaterialEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_color_material_enablechoicegl_pipeline_settings_groupschema_ColorMaterialEnable_TxsdGlPipelineSettingsGroupChoiceColorMaterialEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ColorMaterialEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tfloat4Type_08080810 struct {
	Value Tfloat4Type `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "0.8 0.8 0.8 1.0"
func (me XsdGoPkgHasAttr_Value_Tfloat4Type_08080810) ValueDefault() Tfloat4Type {
	return Tfloat4Type("0.8 0.8 0.8 1.0")
}

type TxsdGlPipelineSettingsGroupChoiceMaterialDiffuse struct {
	XsdGoPkgHasAttr_Value_Tfloat4Type_08080810

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceMaterialDiffuse function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceMaterialDiffuse instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceMaterialDiffuse instance.
func (me *TxsdGlPipelineSettingsGroupChoiceMaterialDiffuse) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceMaterialDiffuse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_material_diffusechoicegl_pipeline_settings_groupschema_MaterialDiffuse_TxsdGlPipelineSettingsGroupChoiceMaterialDiffuse_ struct {
	MaterialDiffuse *TxsdGlPipelineSettingsGroupChoiceMaterialDiffuse `xml:"http://www.collada.org/2008/03/COLLADASchema material_diffuse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_material_diffusechoicegl_pipeline_settings_groupschema_MaterialDiffuse_TxsdGlPipelineSettingsGroupChoiceMaterialDiffuse_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_material_diffusechoicegl_pipeline_settings_groupschema_MaterialDiffuse_TxsdGlPipelineSettingsGroupChoiceMaterialDiffuse_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_material_diffusechoicegl_pipeline_settings_groupschema_MaterialDiffuse_TxsdGlPipelineSettingsGroupChoiceMaterialDiffuse_ instance.
func (me *XsdGoPkgHasElem_material_diffusechoicegl_pipeline_settings_groupschema_MaterialDiffuse_TxsdGlPipelineSettingsGroupChoiceMaterialDiffuse_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_material_diffusechoicegl_pipeline_settings_groupschema_MaterialDiffuse_TxsdGlPipelineSettingsGroupChoiceMaterialDiffuse_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MaterialDiffuse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_texture1D_enablechoicegl_pipeline_settings_groupschema_Texture1DEnable_TxsdGlPipelineSettingsGroupChoiceTexture1DEnable_ struct {
	Texture1DEnable *TxsdGlPipelineSettingsGroupChoiceTextureRECTEnable `xml:"http://www.collada.org/2008/03/COLLADASchema texture1D_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_texture1D_enablechoicegl_pipeline_settings_groupschema_Texture1DEnable_TxsdGlPipelineSettingsGroupChoiceTexture1DEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texture1D_enablechoicegl_pipeline_settings_groupschema_Texture1DEnable_TxsdGlPipelineSettingsGroupChoiceTexture1DEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texture1D_enablechoicegl_pipeline_settings_groupschema_Texture1DEnable_TxsdGlPipelineSettingsGroupChoiceTexture1DEnable_ instance.
func (me *XsdGoPkgHasElem_texture1D_enablechoicegl_pipeline_settings_groupschema_Texture1DEnable_TxsdGlPipelineSettingsGroupChoiceTexture1DEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_texture1D_enablechoicegl_pipeline_settings_groupschema_Texture1DEnable_TxsdGlPipelineSettingsGroupChoiceTexture1DEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Texture1DEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tfloat4Type_0001 struct {
	Value Tfloat4Type `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "0 0 0 1"
func (me XsdGoPkgHasAttr_Value_Tfloat4Type_0001) ValueDefault() Tfloat4Type {
	return Tfloat4Type("0 0 0 1")
}

type TxsdGlPipelineSettingsGroupChoiceLightAmbient struct {
	XsdGoPkgHasAttr_Index_TglMaxLightsIndexType_

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat4Type_0001
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceLightAmbient function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceLightAmbient instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceLightAmbient instance.
func (me *TxsdGlPipelineSettingsGroupChoiceLightAmbient) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceLightAmbient; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_ambientchoicegl_pipeline_settings_groupschema_LightAmbient_TxsdGlPipelineSettingsGroupChoiceLightAmbient_ struct {
	LightAmbient *TxsdGlPipelineSettingsGroupChoiceLightAmbient `xml:"http://www.collada.org/2008/03/COLLADASchema light_ambient"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_ambientchoicegl_pipeline_settings_groupschema_LightAmbient_TxsdGlPipelineSettingsGroupChoiceLightAmbient_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_ambientchoicegl_pipeline_settings_groupschema_LightAmbient_TxsdGlPipelineSettingsGroupChoiceLightAmbient_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_ambientchoicegl_pipeline_settings_groupschema_LightAmbient_TxsdGlPipelineSettingsGroupChoiceLightAmbient_ instance.
func (me *XsdGoPkgHasElem_light_ambientchoicegl_pipeline_settings_groupschema_LightAmbient_TxsdGlPipelineSettingsGroupChoiceLightAmbient_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_ambientchoicegl_pipeline_settings_groupschema_LightAmbient_TxsdGlPipelineSettingsGroupChoiceLightAmbient_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightAmbient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsGroupChoiceFogColor struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat4Type_0000
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceFogColor function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceFogColor instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceFogColor instance.
func (me *TxsdGlPipelineSettingsGroupChoiceFogColor) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceFogColor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fog_colorchoicegl_pipeline_settings_groupschema_FogColor_TxsdGlPipelineSettingsGroupChoiceFogColor_ struct {
	FogColor *TxsdGlPipelineSettingsGroupChoiceFogColor `xml:"http://www.collada.org/2008/03/COLLADASchema fog_color"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fog_colorchoicegl_pipeline_settings_groupschema_FogColor_TxsdGlPipelineSettingsGroupChoiceFogColor_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_colorchoicegl_pipeline_settings_groupschema_FogColor_TxsdGlPipelineSettingsGroupChoiceFogColor_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_colorchoicegl_pipeline_settings_groupschema_FogColor_TxsdGlPipelineSettingsGroupChoiceFogColor_ instance.
func (me *XsdGoPkgHasElem_fog_colorchoicegl_pipeline_settings_groupschema_FogColor_TxsdGlPipelineSettingsGroupChoiceFogColor_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fog_colorchoicegl_pipeline_settings_groupschema_FogColor_TxsdGlPipelineSettingsGroupChoiceFogColor_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FogColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_polygon_offset_point_enablechoicegl_pipeline_settings_groupschema_PolygonOffsetPointEnable_TxsdGlPipelineSettingsGroupChoicePolygonOffsetPointEnable_ struct {
	PolygonOffsetPointEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema polygon_offset_point_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_polygon_offset_point_enablechoicegl_pipeline_settings_groupschema_PolygonOffsetPointEnable_TxsdGlPipelineSettingsGroupChoicePolygonOffsetPointEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_polygon_offset_point_enablechoicegl_pipeline_settings_groupschema_PolygonOffsetPointEnable_TxsdGlPipelineSettingsGroupChoicePolygonOffsetPointEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_polygon_offset_point_enablechoicegl_pipeline_settings_groupschema_PolygonOffsetPointEnable_TxsdGlPipelineSettingsGroupChoicePolygonOffsetPointEnable_ instance.
func (me *XsdGoPkgHasElem_polygon_offset_point_enablechoicegl_pipeline_settings_groupschema_PolygonOffsetPointEnable_TxsdGlPipelineSettingsGroupChoicePolygonOffsetPointEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_polygon_offset_point_enablechoicegl_pipeline_settings_groupschema_PolygonOffsetPointEnable_TxsdGlPipelineSettingsGroupChoicePolygonOffsetPointEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PolygonOffsetPointEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_facesequencepolygon_modechoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoicePolygonModeSequenceFace_ struct {
	Face *TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace `xml:"http://www.collada.org/2008/03/COLLADASchema face"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_facesequencepolygon_modechoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoicePolygonModeSequenceFace_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_facesequencepolygon_modechoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoicePolygonModeSequenceFace_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_facesequencepolygon_modechoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoicePolygonModeSequenceFace_ instance.
func (me *XsdGoPkgHasElem_facesequencepolygon_modechoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoicePolygonModeSequenceFace_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_facesequencepolygon_modechoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoicePolygonModeSequenceFace_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Face.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_TglPolygonModeEnum_Fill struct {
	Value TglPolygonModeEnum `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "FILL"
func (me XsdGoPkgHasAttr_Value_TglPolygonModeEnum_Fill) ValueDefault() TglPolygonModeEnum {
	return TglPolygonModeEnum("FILL")
}

type TxsdGlPipelineSettingsGroupChoicePolygonModeSequenceMode struct {
	XsdGoPkgHasAttr_Value_TglPolygonModeEnum_Fill

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoicePolygonModeSequenceMode function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoicePolygonModeSequenceMode instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoicePolygonModeSequenceMode instance.
func (me *TxsdGlPipelineSettingsGroupChoicePolygonModeSequenceMode) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoicePolygonModeSequenceMode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_modesequencepolygon_modechoicegl_pipeline_settings_groupschema_Mode_TxsdGlPipelineSettingsGroupChoicePolygonModeSequenceMode_ struct {
	Mode *TxsdGlPipelineSettingsGroupChoicePolygonModeSequenceMode `xml:"http://www.collada.org/2008/03/COLLADASchema mode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_modesequencepolygon_modechoicegl_pipeline_settings_groupschema_Mode_TxsdGlPipelineSettingsGroupChoicePolygonModeSequenceMode_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_modesequencepolygon_modechoicegl_pipeline_settings_groupschema_Mode_TxsdGlPipelineSettingsGroupChoicePolygonModeSequenceMode_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_modesequencepolygon_modechoicegl_pipeline_settings_groupschema_Mode_TxsdGlPipelineSettingsGroupChoicePolygonModeSequenceMode_ instance.
func (me *XsdGoPkgHasElem_modesequencepolygon_modechoicegl_pipeline_settings_groupschema_Mode_TxsdGlPipelineSettingsGroupChoicePolygonModeSequenceMode_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_modesequencepolygon_modechoicegl_pipeline_settings_groupschema_Mode_TxsdGlPipelineSettingsGroupChoicePolygonModeSequenceMode_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Mode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsGroupChoicePolygonMode struct {
	XsdGoPkgHasElem_facesequencepolygon_modechoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoicePolygonModeSequenceFace_

	XsdGoPkgHasElem_modesequencepolygon_modechoicegl_pipeline_settings_groupschema_Mode_TxsdGlPipelineSettingsGroupChoicePolygonModeSequenceMode_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoicePolygonMode function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoicePolygonMode instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoicePolygonMode instance.
func (me *TxsdGlPipelineSettingsGroupChoicePolygonMode) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoicePolygonMode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_modesequencepolygon_modechoicegl_pipeline_settings_groupschema_Mode_TxsdGlPipelineSettingsGroupChoicePolygonModeSequenceMode_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_facesequencepolygon_modechoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoicePolygonModeSequenceFace_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_polygon_modechoicegl_pipeline_settings_groupschema_PolygonMode_TxsdGlPipelineSettingsGroupChoicePolygonMode_ struct {
	PolygonMode *TxsdGlPipelineSettingsGroupChoicePolygonMode `xml:"http://www.collada.org/2008/03/COLLADASchema polygon_mode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_polygon_modechoicegl_pipeline_settings_groupschema_PolygonMode_TxsdGlPipelineSettingsGroupChoicePolygonMode_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_polygon_modechoicegl_pipeline_settings_groupschema_PolygonMode_TxsdGlPipelineSettingsGroupChoicePolygonMode_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_polygon_modechoicegl_pipeline_settings_groupschema_PolygonMode_TxsdGlPipelineSettingsGroupChoicePolygonMode_ instance.
func (me *XsdGoPkgHasElem_polygon_modechoicegl_pipeline_settings_groupschema_PolygonMode_TxsdGlPipelineSettingsGroupChoicePolygonMode_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_polygon_modechoicegl_pipeline_settings_groupschema_PolygonMode_TxsdGlPipelineSettingsGroupChoicePolygonMode_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PolygonMode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_point_sizechoicegl_pipeline_settings_groupschema_PointSize_TxsdGlPipelineSettingsGroupChoicePointSize_ struct {
	PointSize *TxsdGlPipelineSettingsGroupChoiceFogEnd `xml:"http://www.collada.org/2008/03/COLLADASchema point_size"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_point_sizechoicegl_pipeline_settings_groupschema_PointSize_TxsdGlPipelineSettingsGroupChoicePointSize_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_sizechoicegl_pipeline_settings_groupschema_PointSize_TxsdGlPipelineSettingsGroupChoicePointSize_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_sizechoicegl_pipeline_settings_groupschema_PointSize_TxsdGlPipelineSettingsGroupChoicePointSize_ instance.
func (me *XsdGoPkgHasElem_point_sizechoicegl_pipeline_settings_groupschema_PointSize_TxsdGlPipelineSettingsGroupChoicePointSize_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_point_sizechoicegl_pipeline_settings_groupschema_PointSize_TxsdGlPipelineSettingsGroupChoicePointSize_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PointSize.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_line_widthchoicegl_pipeline_settings_groupschema_LineWidth_TxsdGlPipelineSettingsGroupChoiceLineWidth_ struct {
	LineWidth *TxsdGlPipelineSettingsGroupChoiceFogEnd `xml:"http://www.collada.org/2008/03/COLLADASchema line_width"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_line_widthchoicegl_pipeline_settings_groupschema_LineWidth_TxsdGlPipelineSettingsGroupChoiceLineWidth_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_line_widthchoicegl_pipeline_settings_groupschema_LineWidth_TxsdGlPipelineSettingsGroupChoiceLineWidth_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_line_widthchoicegl_pipeline_settings_groupschema_LineWidth_TxsdGlPipelineSettingsGroupChoiceLineWidth_ instance.
func (me *XsdGoPkgHasElem_line_widthchoicegl_pipeline_settings_groupschema_LineWidth_TxsdGlPipelineSettingsGroupChoiceLineWidth_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_line_widthchoicegl_pipeline_settings_groupschema_LineWidth_TxsdGlPipelineSettingsGroupChoiceLineWidth_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LineWidth.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegl_pipeline_settings_groupschema_DestRgb_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestRgb_ struct {
	DestRgb *TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceDest `xml:"http://www.collada.org/2008/03/COLLADASchema dest_rgb"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegl_pipeline_settings_groupschema_DestRgb_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestRgb_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegl_pipeline_settings_groupschema_DestRgb_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestRgb_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegl_pipeline_settings_groupschema_DestRgb_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestRgb_ instance.
func (me *XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegl_pipeline_settings_groupschema_DestRgb_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestRgb_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegl_pipeline_settings_groupschema_DestRgb_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestRgb_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DestRgb.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegl_pipeline_settings_groupschema_SrcRgb_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcRgb_ struct {
	SrcRgb *TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceSrc `xml:"http://www.collada.org/2008/03/COLLADASchema src_rgb"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegl_pipeline_settings_groupschema_SrcRgb_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcRgb_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegl_pipeline_settings_groupschema_SrcRgb_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcRgb_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegl_pipeline_settings_groupschema_SrcRgb_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcRgb_ instance.
func (me *XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegl_pipeline_settings_groupschema_SrcRgb_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcRgb_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegl_pipeline_settings_groupschema_SrcRgb_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcRgb_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SrcRgb.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegl_pipeline_settings_groupschema_DestAlpha_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestAlpha_ struct {
	DestAlpha *TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceDest `xml:"http://www.collada.org/2008/03/COLLADASchema dest_alpha"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegl_pipeline_settings_groupschema_DestAlpha_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestAlpha_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegl_pipeline_settings_groupschema_DestAlpha_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestAlpha_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegl_pipeline_settings_groupschema_DestAlpha_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestAlpha_ instance.
func (me *XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegl_pipeline_settings_groupschema_DestAlpha_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestAlpha_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegl_pipeline_settings_groupschema_DestAlpha_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestAlpha_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DestAlpha.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegl_pipeline_settings_groupschema_SrcAlpha_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcAlpha_ struct {
	SrcAlpha *TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceSrc `xml:"http://www.collada.org/2008/03/COLLADASchema src_alpha"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegl_pipeline_settings_groupschema_SrcAlpha_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcAlpha_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegl_pipeline_settings_groupschema_SrcAlpha_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcAlpha_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegl_pipeline_settings_groupschema_SrcAlpha_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcAlpha_ instance.
func (me *XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegl_pipeline_settings_groupschema_SrcAlpha_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcAlpha_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegl_pipeline_settings_groupschema_SrcAlpha_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcAlpha_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SrcAlpha.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparate struct {
	XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegl_pipeline_settings_groupschema_DestAlpha_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestAlpha_

	XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegl_pipeline_settings_groupschema_SrcAlpha_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcAlpha_

	XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegl_pipeline_settings_groupschema_DestRgb_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestRgb_

	XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegl_pipeline_settings_groupschema_SrcRgb_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcRgb_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparate function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparate instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparate instance.
func (me *TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparate) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegl_pipeline_settings_groupschema_SrcRgb_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcRgb_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegl_pipeline_settings_groupschema_DestAlpha_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestAlpha_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegl_pipeline_settings_groupschema_SrcAlpha_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcAlpha_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegl_pipeline_settings_groupschema_DestRgb_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestRgb_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_blend_func_separatechoicegl_pipeline_settings_groupschema_BlendFuncSeparate_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparate_ struct {
	BlendFuncSeparate *TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparate `xml:"http://www.collada.org/2008/03/COLLADASchema blend_func_separate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_blend_func_separatechoicegl_pipeline_settings_groupschema_BlendFuncSeparate_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparate_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_blend_func_separatechoicegl_pipeline_settings_groupschema_BlendFuncSeparate_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparate_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_blend_func_separatechoicegl_pipeline_settings_groupschema_BlendFuncSeparate_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparate_ instance.
func (me *XsdGoPkgHasElem_blend_func_separatechoicegl_pipeline_settings_groupschema_BlendFuncSeparate_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparate_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_blend_func_separatechoicegl_pipeline_settings_groupschema_BlendFuncSeparate_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparate_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BlendFuncSeparate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tfloat4Type_0010 struct {
	Value Tfloat4Type `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "0 0 1 0"
func (me XsdGoPkgHasAttr_Value_Tfloat4Type_0010) ValueDefault() Tfloat4Type {
	return Tfloat4Type("0 0 1 0")
}

type TxsdGlPipelineSettingsGroupChoiceLightPosition struct {
	XsdGoPkgHasAttr_Index_TglMaxLightsIndexType_

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat4Type_0010
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceLightPosition function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceLightPosition instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceLightPosition instance.
func (me *TxsdGlPipelineSettingsGroupChoiceLightPosition) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceLightPosition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_positionchoicegl_pipeline_settings_groupschema_LightPosition_TxsdGlPipelineSettingsGroupChoiceLightPosition_ struct {
	LightPosition *TxsdGlPipelineSettingsGroupChoiceLightPosition `xml:"http://www.collada.org/2008/03/COLLADASchema light_position"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_positionchoicegl_pipeline_settings_groupschema_LightPosition_TxsdGlPipelineSettingsGroupChoiceLightPosition_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_positionchoicegl_pipeline_settings_groupschema_LightPosition_TxsdGlPipelineSettingsGroupChoiceLightPosition_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_positionchoicegl_pipeline_settings_groupschema_LightPosition_TxsdGlPipelineSettingsGroupChoiceLightPosition_ instance.
func (me *XsdGoPkgHasElem_light_positionchoicegl_pipeline_settings_groupschema_LightPosition_TxsdGlPipelineSettingsGroupChoiceLightPosition_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_positionchoicegl_pipeline_settings_groupschema_LightPosition_TxsdGlPipelineSettingsGroupChoiceLightPosition_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightPosition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_XsdtUnsignedByte_0 struct {
	Value xsdt.UnsignedByte `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- 0
func (me XsdGoPkgHasAttr_Value_XsdtUnsignedByte_0) ValueDefault() xsdt.UnsignedByte {
	return xsdt.UnsignedByte(0)
}

type TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_XsdtUnsignedByte_0
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef instance.
func (me *TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_refsequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Ref_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef_ struct {
	Ref *TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef `xml:"http://www.collada.org/2008/03/COLLADASchema ref"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_refsequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Ref_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_refsequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Ref_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_refsequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Ref_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef_ instance.
func (me *XsdGoPkgHasElem_refsequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Ref_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_refsequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Ref_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_masksequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Mask_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceMask_ struct {
	Mask *TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceMask `xml:"http://www.collada.org/2008/03/COLLADASchema mask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_masksequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Mask_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceMask_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_masksequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Mask_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceMask_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_masksequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Mask_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceMask_ instance.
func (me *XsdGoPkgHasElem_masksequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Mask_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceMask_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_masksequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Mask_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceMask_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Mask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_backsequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Back_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceBack_ struct {
	Back *TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceFunc `xml:"http://www.collada.org/2008/03/COLLADASchema back"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_backsequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Back_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceBack_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_backsequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Back_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceBack_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_backsequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Back_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceBack_ instance.
func (me *XsdGoPkgHasElem_backsequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Back_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceBack_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_backsequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Back_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceBack_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Back.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Front_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceFront_ struct {
	Front *TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceFunc `xml:"http://www.collada.org/2008/03/COLLADASchema front"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Front_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceFront_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Front_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceFront_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Front_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceFront_ instance.
func (me *XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Front_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceFront_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Front_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceFront_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Front.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparate struct {
	XsdGoPkgHasElem_backsequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Back_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceBack_

	XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Front_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceFront_

	XsdGoPkgHasElem_refsequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Ref_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef_

	XsdGoPkgHasElem_masksequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Mask_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceMask_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparate function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparate instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparate instance.
func (me *TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparate) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_backsequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Back_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceBack_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Front_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceFront_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_refsequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Ref_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_masksequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Mask_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceMask_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_stencil_func_separatechoicegl_pipeline_settings_groupschema_StencilFuncSeparate_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparate_ struct {
	StencilFuncSeparate *TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparate `xml:"http://www.collada.org/2008/03/COLLADASchema stencil_func_separate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_stencil_func_separatechoicegl_pipeline_settings_groupschema_StencilFuncSeparate_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparate_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_func_separatechoicegl_pipeline_settings_groupschema_StencilFuncSeparate_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparate_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_func_separatechoicegl_pipeline_settings_groupschema_StencilFuncSeparate_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparate_ instance.
func (me *XsdGoPkgHasElem_stencil_func_separatechoicegl_pipeline_settings_groupschema_StencilFuncSeparate_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparate_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_stencil_func_separatechoicegl_pipeline_settings_groupschema_StencilFuncSeparate_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparate_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StencilFuncSeparate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_depth_clamp_enablechoicegl_pipeline_settings_groupschema_DepthClampEnable_TxsdGlPipelineSettingsGroupChoiceDepthClampEnable_ struct {
	DepthClampEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema depth_clamp_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_depth_clamp_enablechoicegl_pipeline_settings_groupschema_DepthClampEnable_TxsdGlPipelineSettingsGroupChoiceDepthClampEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_clamp_enablechoicegl_pipeline_settings_groupschema_DepthClampEnable_TxsdGlPipelineSettingsGroupChoiceDepthClampEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_depth_clamp_enablechoicegl_pipeline_settings_groupschema_DepthClampEnable_TxsdGlPipelineSettingsGroupChoiceDepthClampEnable_ instance.
func (me *XsdGoPkgHasElem_depth_clamp_enablechoicegl_pipeline_settings_groupschema_DepthClampEnable_TxsdGlPipelineSettingsGroupChoiceDepthClampEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_depth_clamp_enablechoicegl_pipeline_settings_groupschema_DepthClampEnable_TxsdGlPipelineSettingsGroupChoiceDepthClampEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DepthClampEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_valuechoicetextureCUBEchoicegl_pipeline_settings_groupschema_Value_TfxSamplerCUBEType_ struct {
	Value *TfxSamplerCUBEType `xml:"http://www.collada.org/2008/03/COLLADASchema value"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_valuechoicetextureCUBEchoicegl_pipeline_settings_groupschema_Value_TfxSamplerCUBEType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_valuechoicetextureCUBEchoicegl_pipeline_settings_groupschema_Value_TfxSamplerCUBEType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_valuechoicetextureCUBEchoicegl_pipeline_settings_groupschema_Value_TfxSamplerCUBEType_ instance.
func (me *XsdGoPkgHasElem_valuechoicetextureCUBEchoicegl_pipeline_settings_groupschema_Value_TfxSamplerCUBEType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_valuechoicetextureCUBEchoicegl_pipeline_settings_groupschema_Value_TfxSamplerCUBEType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Value.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_paramchoicetextureCUBEchoicegl_pipeline_settings_groupschema_Param_XsdtNCName_ struct {
	Param xsdt.NCName `xml:"http://www.collada.org/2008/03/COLLADASchema param"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_paramchoicetextureCUBEchoicegl_pipeline_settings_groupschema_Param_XsdtNCName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_paramchoicetextureCUBEchoicegl_pipeline_settings_groupschema_Param_XsdtNCName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_paramchoicetextureCUBEchoicegl_pipeline_settings_groupschema_Param_XsdtNCName_ instance.
func (me *XsdGoPkgHasElem_paramchoicetextureCUBEchoicegl_pipeline_settings_groupschema_Param_XsdtNCName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_paramchoicetextureCUBEchoicegl_pipeline_settings_groupschema_Param_XsdtNCName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsGroupChoiceTextureCUBE struct {
	XsdGoPkgHasElem_valuechoicetextureCUBEchoicegl_pipeline_settings_groupschema_Value_TfxSamplerCUBEType_

	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndexType_

	XsdGoPkgHasElem_paramchoicetextureCUBEchoicegl_pipeline_settings_groupschema_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceTextureCUBE function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceTextureCUBE instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceTextureCUBE instance.
func (me *TxsdGlPipelineSettingsGroupChoiceTextureCUBE) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceTextureCUBE; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_paramchoicetextureCUBEchoicegl_pipeline_settings_groupschema_Param_XsdtNCName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_valuechoicetextureCUBEchoicegl_pipeline_settings_groupschema_Value_TfxSamplerCUBEType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_textureCUBEchoicegl_pipeline_settings_groupschema_TextureCUBE_TxsdGlPipelineSettingsGroupChoiceTextureCUBE_ struct {
	TextureCUBE *TxsdGlPipelineSettingsGroupChoiceTextureCUBE `xml:"http://www.collada.org/2008/03/COLLADASchema textureCUBE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_textureCUBEchoicegl_pipeline_settings_groupschema_TextureCUBE_TxsdGlPipelineSettingsGroupChoiceTextureCUBE_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_textureCUBEchoicegl_pipeline_settings_groupschema_TextureCUBE_TxsdGlPipelineSettingsGroupChoiceTextureCUBE_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_textureCUBEchoicegl_pipeline_settings_groupschema_TextureCUBE_TxsdGlPipelineSettingsGroupChoiceTextureCUBE_ instance.
func (me *XsdGoPkgHasElem_textureCUBEchoicegl_pipeline_settings_groupschema_TextureCUBE_TxsdGlPipelineSettingsGroupChoiceTextureCUBE_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_textureCUBEchoicegl_pipeline_settings_groupschema_TextureCUBE_TxsdGlPipelineSettingsGroupChoiceTextureCUBE_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TextureCUBE.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_multisample_enablechoicegl_pipeline_settings_groupschema_MultisampleEnable_TxsdGlPipelineSettingsGroupChoiceMultisampleEnable_ struct {
	MultisampleEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema multisample_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_multisample_enablechoicegl_pipeline_settings_groupschema_MultisampleEnable_TxsdGlPipelineSettingsGroupChoiceMultisampleEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_multisample_enablechoicegl_pipeline_settings_groupschema_MultisampleEnable_TxsdGlPipelineSettingsGroupChoiceMultisampleEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_multisample_enablechoicegl_pipeline_settings_groupschema_MultisampleEnable_TxsdGlPipelineSettingsGroupChoiceMultisampleEnable_ instance.
func (me *XsdGoPkgHasElem_multisample_enablechoicegl_pipeline_settings_groupschema_MultisampleEnable_TxsdGlPipelineSettingsGroupChoiceMultisampleEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_multisample_enablechoicegl_pipeline_settings_groupschema_MultisampleEnable_TxsdGlPipelineSettingsGroupChoiceMultisampleEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MultisampleEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_textureCUBE_enablechoicegl_pipeline_settings_groupschema_TextureCUBEEnable_TxsdGlPipelineSettingsGroupChoiceTextureCUBEEnable_ struct {
	TextureCUBEEnable *TxsdGlPipelineSettingsGroupChoiceTextureRECTEnable `xml:"http://www.collada.org/2008/03/COLLADASchema textureCUBE_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_textureCUBE_enablechoicegl_pipeline_settings_groupschema_TextureCUBEEnable_TxsdGlPipelineSettingsGroupChoiceTextureCUBEEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_textureCUBE_enablechoicegl_pipeline_settings_groupschema_TextureCUBEEnable_TxsdGlPipelineSettingsGroupChoiceTextureCUBEEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_textureCUBE_enablechoicegl_pipeline_settings_groupschema_TextureCUBEEnable_TxsdGlPipelineSettingsGroupChoiceTextureCUBEEnable_ instance.
func (me *XsdGoPkgHasElem_textureCUBE_enablechoicegl_pipeline_settings_groupschema_TextureCUBEEnable_TxsdGlPipelineSettingsGroupChoiceTextureCUBEEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_textureCUBE_enablechoicegl_pipeline_settings_groupschema_TextureCUBEEnable_TxsdGlPipelineSettingsGroupChoiceTextureCUBEEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TextureCUBEEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_valuechoicetextureDEPTHchoicegl_pipeline_settings_groupschema_Value_TfxSamplerDEPTHType_ struct {
	Value *TfxSamplerDEPTHType `xml:"http://www.collada.org/2008/03/COLLADASchema value"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_valuechoicetextureDEPTHchoicegl_pipeline_settings_groupschema_Value_TfxSamplerDEPTHType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_valuechoicetextureDEPTHchoicegl_pipeline_settings_groupschema_Value_TfxSamplerDEPTHType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_valuechoicetextureDEPTHchoicegl_pipeline_settings_groupschema_Value_TfxSamplerDEPTHType_ instance.
func (me *XsdGoPkgHasElem_valuechoicetextureDEPTHchoicegl_pipeline_settings_groupschema_Value_TfxSamplerDEPTHType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_valuechoicetextureDEPTHchoicegl_pipeline_settings_groupschema_Value_TfxSamplerDEPTHType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Value.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsGroupChoiceTextureDEPTH struct {
	XsdGoPkgHasElem_paramchoicetextureCUBEchoicegl_pipeline_settings_groupschema_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndexType_

	XsdGoPkgHasElem_valuechoicetextureDEPTHchoicegl_pipeline_settings_groupschema_Value_TfxSamplerDEPTHType_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceTextureDEPTH function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceTextureDEPTH instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceTextureDEPTH instance.
func (me *TxsdGlPipelineSettingsGroupChoiceTextureDEPTH) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceTextureDEPTH; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_paramchoicetextureCUBEchoicegl_pipeline_settings_groupschema_Param_XsdtNCName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_valuechoicetextureDEPTHchoicegl_pipeline_settings_groupschema_Value_TfxSamplerDEPTHType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_textureDEPTHchoicegl_pipeline_settings_groupschema_TextureDEPTH_TxsdGlPipelineSettingsGroupChoiceTextureDEPTH_ struct {
	TextureDEPTH *TxsdGlPipelineSettingsGroupChoiceTextureDEPTH `xml:"http://www.collada.org/2008/03/COLLADASchema textureDEPTH"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_textureDEPTHchoicegl_pipeline_settings_groupschema_TextureDEPTH_TxsdGlPipelineSettingsGroupChoiceTextureDEPTH_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_textureDEPTHchoicegl_pipeline_settings_groupschema_TextureDEPTH_TxsdGlPipelineSettingsGroupChoiceTextureDEPTH_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_textureDEPTHchoicegl_pipeline_settings_groupschema_TextureDEPTH_TxsdGlPipelineSettingsGroupChoiceTextureDEPTH_ instance.
func (me *XsdGoPkgHasElem_textureDEPTHchoicegl_pipeline_settings_groupschema_TextureDEPTH_TxsdGlPipelineSettingsGroupChoiceTextureDEPTH_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_textureDEPTHchoicegl_pipeline_settings_groupschema_TextureDEPTH_TxsdGlPipelineSettingsGroupChoiceTextureDEPTH_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TextureDEPTH.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_linear_attenuationchoicegl_pipeline_settings_groupschema_LightLinearAttenuation_TxsdGlPipelineSettingsGroupChoiceLightLinearAttenuation_ struct {
	LightLinearAttenuation *TxsdGlPipelineSettingsGroupChoiceLightQuadraticAttenuation `xml:"http://www.collada.org/2008/03/COLLADASchema light_linear_attenuation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_linear_attenuationchoicegl_pipeline_settings_groupschema_LightLinearAttenuation_TxsdGlPipelineSettingsGroupChoiceLightLinearAttenuation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_linear_attenuationchoicegl_pipeline_settings_groupschema_LightLinearAttenuation_TxsdGlPipelineSettingsGroupChoiceLightLinearAttenuation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_linear_attenuationchoicegl_pipeline_settings_groupschema_LightLinearAttenuation_TxsdGlPipelineSettingsGroupChoiceLightLinearAttenuation_ instance.
func (me *XsdGoPkgHasElem_light_linear_attenuationchoicegl_pipeline_settings_groupschema_LightLinearAttenuation_TxsdGlPipelineSettingsGroupChoiceLightLinearAttenuation_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_linear_attenuationchoicegl_pipeline_settings_groupschema_LightLinearAttenuation_TxsdGlPipelineSettingsGroupChoiceLightLinearAttenuation_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightLinearAttenuation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tfloat2Type_01 struct {
	Value Tfloat2Type `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "0 1"
func (me XsdGoPkgHasAttr_Value_Tfloat2Type_01) ValueDefault() Tfloat2Type { return Tfloat2Type("0 1") }

type TxsdGlPipelineSettingsGroupChoiceDepthRange struct {
	XsdGoPkgHasAttr_Value_Tfloat2Type_01

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceDepthRange function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceDepthRange instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceDepthRange instance.
func (me *TxsdGlPipelineSettingsGroupChoiceDepthRange) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceDepthRange; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_depth_rangechoicegl_pipeline_settings_groupschema_DepthRange_TxsdGlPipelineSettingsGroupChoiceDepthRange_ struct {
	DepthRange *TxsdGlPipelineSettingsGroupChoiceDepthRange `xml:"http://www.collada.org/2008/03/COLLADASchema depth_range"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_depth_rangechoicegl_pipeline_settings_groupschema_DepthRange_TxsdGlPipelineSettingsGroupChoiceDepthRange_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_rangechoicegl_pipeline_settings_groupschema_DepthRange_TxsdGlPipelineSettingsGroupChoiceDepthRange_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_depth_rangechoicegl_pipeline_settings_groupschema_DepthRange_TxsdGlPipelineSettingsGroupChoiceDepthRange_ instance.
func (me *XsdGoPkgHasElem_depth_rangechoicegl_pipeline_settings_groupschema_DepthRange_TxsdGlPipelineSettingsGroupChoiceDepthRange_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_depth_rangechoicegl_pipeline_settings_groupschema_DepthRange_TxsdGlPipelineSettingsGroupChoiceDepthRange_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DepthRange.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegl_pipeline_settings_groupschema_SampleAlphaToOneEnable_TxsdGlPipelineSettingsGroupChoiceSampleAlphaToOneEnable_ struct {
	SampleAlphaToOneEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema sample_alpha_to_one_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegl_pipeline_settings_groupschema_SampleAlphaToOneEnable_TxsdGlPipelineSettingsGroupChoiceSampleAlphaToOneEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegl_pipeline_settings_groupschema_SampleAlphaToOneEnable_TxsdGlPipelineSettingsGroupChoiceSampleAlphaToOneEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegl_pipeline_settings_groupschema_SampleAlphaToOneEnable_TxsdGlPipelineSettingsGroupChoiceSampleAlphaToOneEnable_ instance.
func (me *XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegl_pipeline_settings_groupschema_SampleAlphaToOneEnable_TxsdGlPipelineSettingsGroupChoiceSampleAlphaToOneEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegl_pipeline_settings_groupschema_SampleAlphaToOneEnable_TxsdGlPipelineSettingsGroupChoiceSampleAlphaToOneEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SampleAlphaToOneEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_specularchoicegl_pipeline_settings_groupschema_LightSpecular_TxsdGlPipelineSettingsGroupChoiceLightSpecular_ struct {
	LightSpecular *TxsdGlPipelineSettingsGroupChoiceLightDiffuse `xml:"http://www.collada.org/2008/03/COLLADASchema light_specular"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_specularchoicegl_pipeline_settings_groupschema_LightSpecular_TxsdGlPipelineSettingsGroupChoiceLightSpecular_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_specularchoicegl_pipeline_settings_groupschema_LightSpecular_TxsdGlPipelineSettingsGroupChoiceLightSpecular_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_specularchoicegl_pipeline_settings_groupschema_LightSpecular_TxsdGlPipelineSettingsGroupChoiceLightSpecular_ instance.
func (me *XsdGoPkgHasElem_light_specularchoicegl_pipeline_settings_groupschema_LightSpecular_TxsdGlPipelineSettingsGroupChoiceLightSpecular_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_specularchoicegl_pipeline_settings_groupschema_LightSpecular_TxsdGlPipelineSettingsGroupChoiceLightSpecular_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightSpecular.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_valuechoicetexture1Dchoicegl_pipeline_settings_groupschema_Value_TfxSampler1DType_ struct {
	Value *TfxSampler1DType `xml:"http://www.collada.org/2008/03/COLLADASchema value"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_valuechoicetexture1Dchoicegl_pipeline_settings_groupschema_Value_TfxSampler1DType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_valuechoicetexture1Dchoicegl_pipeline_settings_groupschema_Value_TfxSampler1DType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_valuechoicetexture1Dchoicegl_pipeline_settings_groupschema_Value_TfxSampler1DType_ instance.
func (me *XsdGoPkgHasElem_valuechoicetexture1Dchoicegl_pipeline_settings_groupschema_Value_TfxSampler1DType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_valuechoicetexture1Dchoicegl_pipeline_settings_groupschema_Value_TfxSampler1DType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Value.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsGroupChoiceTexture1D struct {
	XsdGoPkgHasElem_valuechoicetexture1Dchoicegl_pipeline_settings_groupschema_Value_TfxSampler1DType_

	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndexType_

	XsdGoPkgHasElem_paramchoicetextureCUBEchoicegl_pipeline_settings_groupschema_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceTexture1D function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceTexture1D instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceTexture1D instance.
func (me *TxsdGlPipelineSettingsGroupChoiceTexture1D) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceTexture1D; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_valuechoicetexture1Dchoicegl_pipeline_settings_groupschema_Value_TfxSampler1DType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_paramchoicetextureCUBEchoicegl_pipeline_settings_groupschema_Param_XsdtNCName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_texture1Dchoicegl_pipeline_settings_groupschema_Texture1D_TxsdGlPipelineSettingsGroupChoiceTexture1D_ struct {
	Texture1D *TxsdGlPipelineSettingsGroupChoiceTexture1D `xml:"http://www.collada.org/2008/03/COLLADASchema texture1D"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_texture1Dchoicegl_pipeline_settings_groupschema_Texture1D_TxsdGlPipelineSettingsGroupChoiceTexture1D_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texture1Dchoicegl_pipeline_settings_groupschema_Texture1D_TxsdGlPipelineSettingsGroupChoiceTexture1D_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texture1Dchoicegl_pipeline_settings_groupschema_Texture1D_TxsdGlPipelineSettingsGroupChoiceTexture1D_ instance.
func (me *XsdGoPkgHasElem_texture1Dchoicegl_pipeline_settings_groupschema_Texture1D_TxsdGlPipelineSettingsGroupChoiceTexture1D_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_texture1Dchoicegl_pipeline_settings_groupschema_Texture1D_TxsdGlPipelineSettingsGroupChoiceTexture1D_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Texture1D.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_point_smooth_enablechoicegl_pipeline_settings_groupschema_PointSmoothEnable_TxsdGlPipelineSettingsGroupChoicePointSmoothEnable_ struct {
	PointSmoothEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema point_smooth_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_point_smooth_enablechoicegl_pipeline_settings_groupschema_PointSmoothEnable_TxsdGlPipelineSettingsGroupChoicePointSmoothEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_smooth_enablechoicegl_pipeline_settings_groupschema_PointSmoothEnable_TxsdGlPipelineSettingsGroupChoicePointSmoothEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_smooth_enablechoicegl_pipeline_settings_groupschema_PointSmoothEnable_TxsdGlPipelineSettingsGroupChoicePointSmoothEnable_ instance.
func (me *XsdGoPkgHasElem_point_smooth_enablechoicegl_pipeline_settings_groupschema_PointSmoothEnable_TxsdGlPipelineSettingsGroupChoicePointSmoothEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_point_smooth_enablechoicegl_pipeline_settings_groupschema_PointSmoothEnable_TxsdGlPipelineSettingsGroupChoicePointSmoothEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PointSmoothEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegl_pipeline_settings_groupschema_SampleAlphaToCoverageEnable_TxsdGlPipelineSettingsGroupChoiceSampleAlphaToCoverageEnable_ struct {
	SampleAlphaToCoverageEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema sample_alpha_to_coverage_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegl_pipeline_settings_groupschema_SampleAlphaToCoverageEnable_TxsdGlPipelineSettingsGroupChoiceSampleAlphaToCoverageEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegl_pipeline_settings_groupschema_SampleAlphaToCoverageEnable_TxsdGlPipelineSettingsGroupChoiceSampleAlphaToCoverageEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegl_pipeline_settings_groupschema_SampleAlphaToCoverageEnable_TxsdGlPipelineSettingsGroupChoiceSampleAlphaToCoverageEnable_ instance.
func (me *XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegl_pipeline_settings_groupschema_SampleAlphaToCoverageEnable_TxsdGlPipelineSettingsGroupChoiceSampleAlphaToCoverageEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegl_pipeline_settings_groupschema_SampleAlphaToCoverageEnable_TxsdGlPipelineSettingsGroupChoiceSampleAlphaToCoverageEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SampleAlphaToCoverageEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_lighting_enablechoicegl_pipeline_settings_groupschema_LightingEnable_TxsdGlPipelineSettingsGroupChoiceLightingEnable_ struct {
	LightingEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema lighting_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_lighting_enablechoicegl_pipeline_settings_groupschema_LightingEnable_TxsdGlPipelineSettingsGroupChoiceLightingEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_lighting_enablechoicegl_pipeline_settings_groupschema_LightingEnable_TxsdGlPipelineSettingsGroupChoiceLightingEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_lighting_enablechoicegl_pipeline_settings_groupschema_LightingEnable_TxsdGlPipelineSettingsGroupChoiceLightingEnable_ instance.
func (me *XsdGoPkgHasElem_lighting_enablechoicegl_pipeline_settings_groupschema_LightingEnable_TxsdGlPipelineSettingsGroupChoiceLightingEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_lighting_enablechoicegl_pipeline_settings_groupschema_LightingEnable_TxsdGlPipelineSettingsGroupChoiceLightingEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightingEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_TglFogCoordSrcEnum_FogCoordinate struct {
	Value TglFogCoordSrcEnum `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "FOG_COORDINATE"
func (me XsdGoPkgHasAttr_Value_TglFogCoordSrcEnum_FogCoordinate) ValueDefault() TglFogCoordSrcEnum {
	return TglFogCoordSrcEnum("FOG_COORDINATE")
}

type TxsdGlPipelineSettingsGroupChoiceFogCoordSrc struct {
	XsdGoPkgHasAttr_Value_TglFogCoordSrcEnum_FogCoordinate

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceFogCoordSrc function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceFogCoordSrc instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceFogCoordSrc instance.
func (me *TxsdGlPipelineSettingsGroupChoiceFogCoordSrc) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceFogCoordSrc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fog_coord_srcchoicegl_pipeline_settings_groupschema_FogCoordSrc_TxsdGlPipelineSettingsGroupChoiceFogCoordSrc_ struct {
	FogCoordSrc *TxsdGlPipelineSettingsGroupChoiceFogCoordSrc `xml:"http://www.collada.org/2008/03/COLLADASchema fog_coord_src"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fog_coord_srcchoicegl_pipeline_settings_groupschema_FogCoordSrc_TxsdGlPipelineSettingsGroupChoiceFogCoordSrc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_coord_srcchoicegl_pipeline_settings_groupschema_FogCoordSrc_TxsdGlPipelineSettingsGroupChoiceFogCoordSrc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_coord_srcchoicegl_pipeline_settings_groupschema_FogCoordSrc_TxsdGlPipelineSettingsGroupChoiceFogCoordSrc_ instance.
func (me *XsdGoPkgHasElem_fog_coord_srcchoicegl_pipeline_settings_groupschema_FogCoordSrc_TxsdGlPipelineSettingsGroupChoiceFogCoordSrc_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fog_coord_srcchoicegl_pipeline_settings_groupschema_FogCoordSrc_TxsdGlPipelineSettingsGroupChoiceFogCoordSrc_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FogCoordSrc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_TglLightModelColorControlEnum_SingleColor struct {
	Value TglLightModelColorControlEnum `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "SINGLE_COLOR"
func (me XsdGoPkgHasAttr_Value_TglLightModelColorControlEnum_SingleColor) ValueDefault() TglLightModelColorControlEnum {
	return TglLightModelColorControlEnum("SINGLE_COLOR")
}

type TxsdGlPipelineSettingsGroupChoiceLightModelColorControl struct {
	XsdGoPkgHasAttr_Value_TglLightModelColorControlEnum_SingleColor

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceLightModelColorControl function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceLightModelColorControl instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceLightModelColorControl instance.
func (me *TxsdGlPipelineSettingsGroupChoiceLightModelColorControl) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceLightModelColorControl; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_model_color_controlchoicegl_pipeline_settings_groupschema_LightModelColorControl_TxsdGlPipelineSettingsGroupChoiceLightModelColorControl_ struct {
	LightModelColorControl *TxsdGlPipelineSettingsGroupChoiceLightModelColorControl `xml:"http://www.collada.org/2008/03/COLLADASchema light_model_color_control"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_model_color_controlchoicegl_pipeline_settings_groupschema_LightModelColorControl_TxsdGlPipelineSettingsGroupChoiceLightModelColorControl_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_model_color_controlchoicegl_pipeline_settings_groupschema_LightModelColorControl_TxsdGlPipelineSettingsGroupChoiceLightModelColorControl_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_model_color_controlchoicegl_pipeline_settings_groupschema_LightModelColorControl_TxsdGlPipelineSettingsGroupChoiceLightModelColorControl_ instance.
func (me *XsdGoPkgHasElem_light_model_color_controlchoicegl_pipeline_settings_groupschema_LightModelColorControl_TxsdGlPipelineSettingsGroupChoiceLightModelColorControl_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_model_color_controlchoicegl_pipeline_settings_groupschema_LightModelColorControl_TxsdGlPipelineSettingsGroupChoiceLightModelColorControl_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightModelColorControl.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_normalize_enablechoicegl_pipeline_settings_groupschema_NormalizeEnable_TxsdGlPipelineSettingsGroupChoiceNormalizeEnable_ struct {
	NormalizeEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema normalize_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_normalize_enablechoicegl_pipeline_settings_groupschema_NormalizeEnable_TxsdGlPipelineSettingsGroupChoiceNormalizeEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_normalize_enablechoicegl_pipeline_settings_groupschema_NormalizeEnable_TxsdGlPipelineSettingsGroupChoiceNormalizeEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_normalize_enablechoicegl_pipeline_settings_groupschema_NormalizeEnable_TxsdGlPipelineSettingsGroupChoiceNormalizeEnable_ instance.
func (me *XsdGoPkgHasElem_normalize_enablechoicegl_pipeline_settings_groupschema_NormalizeEnable_TxsdGlPipelineSettingsGroupChoiceNormalizeEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_normalize_enablechoicegl_pipeline_settings_groupschema_NormalizeEnable_TxsdGlPipelineSettingsGroupChoiceNormalizeEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.NormalizeEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_texture3D_enablechoicegl_pipeline_settings_groupschema_Texture3DEnable_TxsdGlPipelineSettingsGroupChoiceTexture3DEnable_ struct {
	Texture3DEnable *TxsdGlPipelineSettingsGroupChoiceTextureRECTEnable `xml:"http://www.collada.org/2008/03/COLLADASchema texture3D_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_texture3D_enablechoicegl_pipeline_settings_groupschema_Texture3DEnable_TxsdGlPipelineSettingsGroupChoiceTexture3DEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texture3D_enablechoicegl_pipeline_settings_groupschema_Texture3DEnable_TxsdGlPipelineSettingsGroupChoiceTexture3DEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texture3D_enablechoicegl_pipeline_settings_groupschema_Texture3DEnable_TxsdGlPipelineSettingsGroupChoiceTexture3DEnable_ instance.
func (me *XsdGoPkgHasElem_texture3D_enablechoicegl_pipeline_settings_groupschema_Texture3DEnable_TxsdGlPipelineSettingsGroupChoiceTexture3DEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_texture3D_enablechoicegl_pipeline_settings_groupschema_Texture3DEnable_TxsdGlPipelineSettingsGroupChoiceTexture3DEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Texture3DEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fog_startchoicegl_pipeline_settings_groupschema_FogStart_TxsdGlPipelineSettingsGroupChoiceFogStart_ struct {
	FogStart *TxsdGlPipelineSettingsGroupChoicePointSizeMin `xml:"http://www.collada.org/2008/03/COLLADASchema fog_start"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fog_startchoicegl_pipeline_settings_groupschema_FogStart_TxsdGlPipelineSettingsGroupChoiceFogStart_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_startchoicegl_pipeline_settings_groupschema_FogStart_TxsdGlPipelineSettingsGroupChoiceFogStart_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_startchoicegl_pipeline_settings_groupschema_FogStart_TxsdGlPipelineSettingsGroupChoiceFogStart_ instance.
func (me *XsdGoPkgHasElem_fog_startchoicegl_pipeline_settings_groupschema_FogStart_TxsdGlPipelineSettingsGroupChoiceFogStart_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fog_startchoicegl_pipeline_settings_groupschema_FogStart_TxsdGlPipelineSettingsGroupChoiceFogStart_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FogStart.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_depth_test_enablechoicegl_pipeline_settings_groupschema_DepthTestEnable_TxsdGlPipelineSettingsGroupChoiceDepthTestEnable_ struct {
	DepthTestEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema depth_test_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_depth_test_enablechoicegl_pipeline_settings_groupschema_DepthTestEnable_TxsdGlPipelineSettingsGroupChoiceDepthTestEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_test_enablechoicegl_pipeline_settings_groupschema_DepthTestEnable_TxsdGlPipelineSettingsGroupChoiceDepthTestEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_depth_test_enablechoicegl_pipeline_settings_groupschema_DepthTestEnable_TxsdGlPipelineSettingsGroupChoiceDepthTestEnable_ instance.
func (me *XsdGoPkgHasElem_depth_test_enablechoicegl_pipeline_settings_groupschema_DepthTestEnable_TxsdGlPipelineSettingsGroupChoiceDepthTestEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_depth_test_enablechoicegl_pipeline_settings_groupschema_DepthTestEnable_TxsdGlPipelineSettingsGroupChoiceDepthTestEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DepthTestEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tfloat2Type_ struct {
	Value Tfloat2Type `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

type TxsdGlPipelineSettingsGroupChoiceDepthBounds struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat2Type_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceDepthBounds function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceDepthBounds instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceDepthBounds instance.
func (me *TxsdGlPipelineSettingsGroupChoiceDepthBounds) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceDepthBounds; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_depth_boundschoicegl_pipeline_settings_groupschema_DepthBounds_TxsdGlPipelineSettingsGroupChoiceDepthBounds_ struct {
	DepthBounds *TxsdGlPipelineSettingsGroupChoiceDepthBounds `xml:"http://www.collada.org/2008/03/COLLADASchema depth_bounds"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_depth_boundschoicegl_pipeline_settings_groupschema_DepthBounds_TxsdGlPipelineSettingsGroupChoiceDepthBounds_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_boundschoicegl_pipeline_settings_groupschema_DepthBounds_TxsdGlPipelineSettingsGroupChoiceDepthBounds_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_depth_boundschoicegl_pipeline_settings_groupschema_DepthBounds_TxsdGlPipelineSettingsGroupChoiceDepthBounds_ instance.
func (me *XsdGoPkgHasElem_depth_boundschoicegl_pipeline_settings_groupschema_DepthBounds_TxsdGlPipelineSettingsGroupChoiceDepthBounds_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_depth_boundschoicegl_pipeline_settings_groupschema_DepthBounds_TxsdGlPipelineSettingsGroupChoiceDepthBounds_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DepthBounds.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_valuechoicetexture2Dchoicegl_pipeline_settings_groupschema_Value_TfxSampler2DType_ struct {
	Value *TfxSampler2DType `xml:"http://www.collada.org/2008/03/COLLADASchema value"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_valuechoicetexture2Dchoicegl_pipeline_settings_groupschema_Value_TfxSampler2DType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_valuechoicetexture2Dchoicegl_pipeline_settings_groupschema_Value_TfxSampler2DType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_valuechoicetexture2Dchoicegl_pipeline_settings_groupschema_Value_TfxSampler2DType_ instance.
func (me *XsdGoPkgHasElem_valuechoicetexture2Dchoicegl_pipeline_settings_groupschema_Value_TfxSampler2DType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_valuechoicetexture2Dchoicegl_pipeline_settings_groupschema_Value_TfxSampler2DType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Value.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsGroupChoiceTexture2D struct {
	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndexType_

	XsdGoPkgHasElem_paramchoicetextureCUBEchoicegl_pipeline_settings_groupschema_Param_XsdtNCName_

	XsdGoPkgHasElem_valuechoicetexture2Dchoicegl_pipeline_settings_groupschema_Value_TfxSampler2DType_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceTexture2D function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceTexture2D instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceTexture2D instance.
func (me *TxsdGlPipelineSettingsGroupChoiceTexture2D) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceTexture2D; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_paramchoicetextureCUBEchoicegl_pipeline_settings_groupschema_Param_XsdtNCName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_valuechoicetexture2Dchoicegl_pipeline_settings_groupschema_Value_TfxSampler2DType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_texture2Dchoicegl_pipeline_settings_groupschema_Texture2D_TxsdGlPipelineSettingsGroupChoiceTexture2D_ struct {
	Texture2D *TxsdGlPipelineSettingsGroupChoiceTexture2D `xml:"http://www.collada.org/2008/03/COLLADASchema texture2D"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_texture2Dchoicegl_pipeline_settings_groupschema_Texture2D_TxsdGlPipelineSettingsGroupChoiceTexture2D_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texture2Dchoicegl_pipeline_settings_groupschema_Texture2D_TxsdGlPipelineSettingsGroupChoiceTexture2D_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texture2Dchoicegl_pipeline_settings_groupschema_Texture2D_TxsdGlPipelineSettingsGroupChoiceTexture2D_ instance.
func (me *XsdGoPkgHasElem_texture2Dchoicegl_pipeline_settings_groupschema_Texture2D_TxsdGlPipelineSettingsGroupChoiceTexture2D_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_texture2Dchoicegl_pipeline_settings_groupschema_Texture2D_TxsdGlPipelineSettingsGroupChoiceTexture2D_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Texture2D.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_projection_matrixchoicegl_pipeline_settings_groupschema_ProjectionMatrix_TxsdGlPipelineSettingsGroupChoiceProjectionMatrix_ struct {
	ProjectionMatrix *TxsdGlPipelineSettingsGroupChoiceModelViewMatrix `xml:"http://www.collada.org/2008/03/COLLADASchema projection_matrix"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_projection_matrixchoicegl_pipeline_settings_groupschema_ProjectionMatrix_TxsdGlPipelineSettingsGroupChoiceProjectionMatrix_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_projection_matrixchoicegl_pipeline_settings_groupschema_ProjectionMatrix_TxsdGlPipelineSettingsGroupChoiceProjectionMatrix_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_projection_matrixchoicegl_pipeline_settings_groupschema_ProjectionMatrix_TxsdGlPipelineSettingsGroupChoiceProjectionMatrix_ instance.
func (me *XsdGoPkgHasElem_projection_matrixchoicegl_pipeline_settings_groupschema_ProjectionMatrix_TxsdGlPipelineSettingsGroupChoiceProjectionMatrix_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_projection_matrixchoicegl_pipeline_settings_groupschema_ProjectionMatrix_TxsdGlPipelineSettingsGroupChoiceProjectionMatrix_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ProjectionMatrix.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fog_enablechoicegl_pipeline_settings_groupschema_FogEnable_TxsdGlPipelineSettingsGroupChoiceFogEnable_ struct {
	FogEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema fog_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fog_enablechoicegl_pipeline_settings_groupschema_FogEnable_TxsdGlPipelineSettingsGroupChoiceFogEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_enablechoicegl_pipeline_settings_groupschema_FogEnable_TxsdGlPipelineSettingsGroupChoiceFogEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_enablechoicegl_pipeline_settings_groupschema_FogEnable_TxsdGlPipelineSettingsGroupChoiceFogEnable_ instance.
func (me *XsdGoPkgHasElem_fog_enablechoicegl_pipeline_settings_groupschema_FogEnable_TxsdGlPipelineSettingsGroupChoiceFogEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fog_enablechoicegl_pipeline_settings_groupschema_FogEnable_TxsdGlPipelineSettingsGroupChoiceFogEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FogEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsGroupChoiceMaterialSpecular struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat4Type_0001
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceMaterialSpecular function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceMaterialSpecular instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceMaterialSpecular instance.
func (me *TxsdGlPipelineSettingsGroupChoiceMaterialSpecular) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceMaterialSpecular; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_material_specularchoicegl_pipeline_settings_groupschema_MaterialSpecular_TxsdGlPipelineSettingsGroupChoiceMaterialSpecular_ struct {
	MaterialSpecular *TxsdGlPipelineSettingsGroupChoiceMaterialSpecular `xml:"http://www.collada.org/2008/03/COLLADASchema material_specular"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_material_specularchoicegl_pipeline_settings_groupschema_MaterialSpecular_TxsdGlPipelineSettingsGroupChoiceMaterialSpecular_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_material_specularchoicegl_pipeline_settings_groupschema_MaterialSpecular_TxsdGlPipelineSettingsGroupChoiceMaterialSpecular_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_material_specularchoicegl_pipeline_settings_groupschema_MaterialSpecular_TxsdGlPipelineSettingsGroupChoiceMaterialSpecular_ instance.
func (me *XsdGoPkgHasElem_material_specularchoicegl_pipeline_settings_groupschema_MaterialSpecular_TxsdGlPipelineSettingsGroupChoiceMaterialSpecular_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_material_specularchoicegl_pipeline_settings_groupschema_MaterialSpecular_TxsdGlPipelineSettingsGroupChoiceMaterialSpecular_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MaterialSpecular.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_blend_enablechoicegl_pipeline_settings_groupschema_BlendEnable_TxsdGlPipelineSettingsGroupChoiceBlendEnable_ struct {
	BlendEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema blend_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_blend_enablechoicegl_pipeline_settings_groupschema_BlendEnable_TxsdGlPipelineSettingsGroupChoiceBlendEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_blend_enablechoicegl_pipeline_settings_groupschema_BlendEnable_TxsdGlPipelineSettingsGroupChoiceBlendEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_blend_enablechoicegl_pipeline_settings_groupschema_BlendEnable_TxsdGlPipelineSettingsGroupChoiceBlendEnable_ instance.
func (me *XsdGoPkgHasElem_blend_enablechoicegl_pipeline_settings_groupschema_BlendEnable_TxsdGlPipelineSettingsGroupChoiceBlendEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_blend_enablechoicegl_pipeline_settings_groupschema_BlendEnable_TxsdGlPipelineSettingsGroupChoiceBlendEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BlendEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_polygon_smooth_enablechoicegl_pipeline_settings_groupschema_PolygonSmoothEnable_TxsdGlPipelineSettingsGroupChoicePolygonSmoothEnable_ struct {
	PolygonSmoothEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema polygon_smooth_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_polygon_smooth_enablechoicegl_pipeline_settings_groupschema_PolygonSmoothEnable_TxsdGlPipelineSettingsGroupChoicePolygonSmoothEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_polygon_smooth_enablechoicegl_pipeline_settings_groupschema_PolygonSmoothEnable_TxsdGlPipelineSettingsGroupChoicePolygonSmoothEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_polygon_smooth_enablechoicegl_pipeline_settings_groupschema_PolygonSmoothEnable_TxsdGlPipelineSettingsGroupChoicePolygonSmoothEnable_ instance.
func (me *XsdGoPkgHasElem_polygon_smooth_enablechoicegl_pipeline_settings_groupschema_PolygonSmoothEnable_TxsdGlPipelineSettingsGroupChoicePolygonSmoothEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_polygon_smooth_enablechoicegl_pipeline_settings_groupschema_PolygonSmoothEnable_TxsdGlPipelineSettingsGroupChoicePolygonSmoothEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PolygonSmoothEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_line_stipple_enablechoicegl_pipeline_settings_groupschema_LineStippleEnable_TxsdGlPipelineSettingsGroupChoiceLineStippleEnable_ struct {
	LineStippleEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema line_stipple_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_line_stipple_enablechoicegl_pipeline_settings_groupschema_LineStippleEnable_TxsdGlPipelineSettingsGroupChoiceLineStippleEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_line_stipple_enablechoicegl_pipeline_settings_groupschema_LineStippleEnable_TxsdGlPipelineSettingsGroupChoiceLineStippleEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_line_stipple_enablechoicegl_pipeline_settings_groupschema_LineStippleEnable_TxsdGlPipelineSettingsGroupChoiceLineStippleEnable_ instance.
func (me *XsdGoPkgHasElem_line_stipple_enablechoicegl_pipeline_settings_groupschema_LineStippleEnable_TxsdGlPipelineSettingsGroupChoiceLineStippleEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_line_stipple_enablechoicegl_pipeline_settings_groupschema_LineStippleEnable_TxsdGlPipelineSettingsGroupChoiceLineStippleEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LineStippleEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_color_logic_op_enablechoicegl_pipeline_settings_groupschema_ColorLogicOpEnable_TxsdGlPipelineSettingsGroupChoiceColorLogicOpEnable_ struct {
	ColorLogicOpEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema color_logic_op_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_color_logic_op_enablechoicegl_pipeline_settings_groupschema_ColorLogicOpEnable_TxsdGlPipelineSettingsGroupChoiceColorLogicOpEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_color_logic_op_enablechoicegl_pipeline_settings_groupschema_ColorLogicOpEnable_TxsdGlPipelineSettingsGroupChoiceColorLogicOpEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_color_logic_op_enablechoicegl_pipeline_settings_groupschema_ColorLogicOpEnable_TxsdGlPipelineSettingsGroupChoiceColorLogicOpEnable_ instance.
func (me *XsdGoPkgHasElem_color_logic_op_enablechoicegl_pipeline_settings_groupschema_ColorLogicOpEnable_TxsdGlPipelineSettingsGroupChoiceColorLogicOpEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_color_logic_op_enablechoicegl_pipeline_settings_groupschema_ColorLogicOpEnable_TxsdGlPipelineSettingsGroupChoiceColorLogicOpEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ColorLogicOpEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglMaxClipPlanesIndexType xsdt.NonNegativeInteger

//	This convenience method just performs a simple type conversion to TglMaxClipPlanesIndexType's alias type xsdt.NonNegativeInteger.
func (me TglMaxClipPlanesIndexType) ToXsdtNonNegativeInteger() xsdt.NonNegativeInteger {
	return xsdt.NonNegativeInteger(me)
}

//	Since TglMaxClipPlanesIndexType is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TglMaxClipPlanesIndexType) Set(s string) { (*xsdt.NonNegativeInteger)(me).Set(s) }

//	Returns a string representation of this TglMaxClipPlanesIndexType's current non-string scalar value.
func (me TglMaxClipPlanesIndexType) String() string { return xsdt.NonNegativeInteger(me).String() }

type XsdGoPkgHasAttr_Index_TglMaxClipPlanesIndexType_ struct {
	Index TglMaxClipPlanesIndexType `xml:"http://www.collada.org/2008/03/COLLADASchema index,attr"`
}

type TxsdGlPipelineSettingsGroupChoiceClipPlaneEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglMaxClipPlanesIndexType_

	XsdGoPkgHasAttr_Value_XsdtBoolean_False
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceClipPlaneEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceClipPlaneEnable instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceClipPlaneEnable instance.
func (me *TxsdGlPipelineSettingsGroupChoiceClipPlaneEnable) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceClipPlaneEnable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_clip_plane_enablechoicegl_pipeline_settings_groupschema_ClipPlaneEnable_TxsdGlPipelineSettingsGroupChoiceClipPlaneEnable_ struct {
	ClipPlaneEnable *TxsdGlPipelineSettingsGroupChoiceClipPlaneEnable `xml:"http://www.collada.org/2008/03/COLLADASchema clip_plane_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_clip_plane_enablechoicegl_pipeline_settings_groupschema_ClipPlaneEnable_TxsdGlPipelineSettingsGroupChoiceClipPlaneEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_clip_plane_enablechoicegl_pipeline_settings_groupschema_ClipPlaneEnable_TxsdGlPipelineSettingsGroupChoiceClipPlaneEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_clip_plane_enablechoicegl_pipeline_settings_groupschema_ClipPlaneEnable_TxsdGlPipelineSettingsGroupChoiceClipPlaneEnable_ instance.
func (me *XsdGoPkgHasElem_clip_plane_enablechoicegl_pipeline_settings_groupschema_ClipPlaneEnable_TxsdGlPipelineSettingsGroupChoiceClipPlaneEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_clip_plane_enablechoicegl_pipeline_settings_groupschema_ClipPlaneEnable_TxsdGlPipelineSettingsGroupChoiceClipPlaneEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ClipPlaneEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_material_emissionchoicegl_pipeline_settings_groupschema_MaterialEmission_TxsdGlPipelineSettingsGroupChoiceMaterialEmission_ struct {
	MaterialEmission *TxsdGlPipelineSettingsGroupChoiceMaterialSpecular `xml:"http://www.collada.org/2008/03/COLLADASchema material_emission"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_material_emissionchoicegl_pipeline_settings_groupschema_MaterialEmission_TxsdGlPipelineSettingsGroupChoiceMaterialEmission_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_material_emissionchoicegl_pipeline_settings_groupschema_MaterialEmission_TxsdGlPipelineSettingsGroupChoiceMaterialEmission_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_material_emissionchoicegl_pipeline_settings_groupschema_MaterialEmission_TxsdGlPipelineSettingsGroupChoiceMaterialEmission_ instance.
func (me *XsdGoPkgHasElem_material_emissionchoicegl_pipeline_settings_groupschema_MaterialEmission_TxsdGlPipelineSettingsGroupChoiceMaterialEmission_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_material_emissionchoicegl_pipeline_settings_groupschema_MaterialEmission_TxsdGlPipelineSettingsGroupChoiceMaterialEmission_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MaterialEmission.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_model_ambientchoicegl_pipeline_settings_groupschema_LightModelAmbient_TxsdGlPipelineSettingsGroupChoiceLightModelAmbient_ struct {
	LightModelAmbient *TxsdGlPipelineSettingsGroupChoiceMaterialAmbient `xml:"http://www.collada.org/2008/03/COLLADASchema light_model_ambient"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_model_ambientchoicegl_pipeline_settings_groupschema_LightModelAmbient_TxsdGlPipelineSettingsGroupChoiceLightModelAmbient_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_model_ambientchoicegl_pipeline_settings_groupschema_LightModelAmbient_TxsdGlPipelineSettingsGroupChoiceLightModelAmbient_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_model_ambientchoicegl_pipeline_settings_groupschema_LightModelAmbient_TxsdGlPipelineSettingsGroupChoiceLightModelAmbient_ instance.
func (me *XsdGoPkgHasElem_light_model_ambientchoicegl_pipeline_settings_groupschema_LightModelAmbient_TxsdGlPipelineSettingsGroupChoiceLightModelAmbient_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_model_ambientchoicegl_pipeline_settings_groupschema_LightModelAmbient_TxsdGlPipelineSettingsGroupChoiceLightModelAmbient_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightModelAmbient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_TglFaceEnum_Back struct {
	Value TglFaceEnum `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "BACK"
func (me XsdGoPkgHasAttr_Value_TglFaceEnum_Back) ValueDefault() TglFaceEnum {
	return TglFaceEnum("BACK")
}

type TxsdGlPipelineSettingsGroupChoiceCullFace struct {
	XsdGoPkgHasAttr_Value_TglFaceEnum_Back

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceCullFace function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceCullFace instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceCullFace instance.
func (me *TxsdGlPipelineSettingsGroupChoiceCullFace) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceCullFace; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_cull_facechoicegl_pipeline_settings_groupschema_CullFace_TxsdGlPipelineSettingsGroupChoiceCullFace_ struct {
	CullFace *TxsdGlPipelineSettingsGroupChoiceCullFace `xml:"http://www.collada.org/2008/03/COLLADASchema cull_face"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_cull_facechoicegl_pipeline_settings_groupschema_CullFace_TxsdGlPipelineSettingsGroupChoiceCullFace_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_cull_facechoicegl_pipeline_settings_groupschema_CullFace_TxsdGlPipelineSettingsGroupChoiceCullFace_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_cull_facechoicegl_pipeline_settings_groupschema_CullFace_TxsdGlPipelineSettingsGroupChoiceCullFace_ instance.
func (me *XsdGoPkgHasElem_cull_facechoicegl_pipeline_settings_groupschema_CullFace_TxsdGlPipelineSettingsGroupChoiceCullFace_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_cull_facechoicegl_pipeline_settings_groupschema_CullFace_TxsdGlPipelineSettingsGroupChoiceCullFace_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CullFace.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_blend_colorchoicegl_pipeline_settings_groupschema_BlendColor_TxsdGlPipelineSettingsGroupChoiceBlendColor_ struct {
	BlendColor *TxsdGlPipelineSettingsGroupChoiceFogColor `xml:"http://www.collada.org/2008/03/COLLADASchema blend_color"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_blend_colorchoicegl_pipeline_settings_groupschema_BlendColor_TxsdGlPipelineSettingsGroupChoiceBlendColor_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_blend_colorchoicegl_pipeline_settings_groupschema_BlendColor_TxsdGlPipelineSettingsGroupChoiceBlendColor_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_blend_colorchoicegl_pipeline_settings_groupschema_BlendColor_TxsdGlPipelineSettingsGroupChoiceBlendColor_ instance.
func (me *XsdGoPkgHasElem_blend_colorchoicegl_pipeline_settings_groupschema_BlendColor_TxsdGlPipelineSettingsGroupChoiceBlendColor_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_blend_colorchoicegl_pipeline_settings_groupschema_BlendColor_TxsdGlPipelineSettingsGroupChoiceBlendColor_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BlendColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_model_two_side_enablechoicegl_pipeline_settings_groupschema_LightModelTwoSideEnable_TxsdGlPipelineSettingsGroupChoiceLightModelTwoSideEnable_ struct {
	LightModelTwoSideEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema light_model_two_side_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_model_two_side_enablechoicegl_pipeline_settings_groupschema_LightModelTwoSideEnable_TxsdGlPipelineSettingsGroupChoiceLightModelTwoSideEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_model_two_side_enablechoicegl_pipeline_settings_groupschema_LightModelTwoSideEnable_TxsdGlPipelineSettingsGroupChoiceLightModelTwoSideEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_model_two_side_enablechoicegl_pipeline_settings_groupschema_LightModelTwoSideEnable_TxsdGlPipelineSettingsGroupChoiceLightModelTwoSideEnable_ instance.
func (me *XsdGoPkgHasElem_light_model_two_side_enablechoicegl_pipeline_settings_groupschema_LightModelTwoSideEnable_TxsdGlPipelineSettingsGroupChoiceLightModelTwoSideEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_model_two_side_enablechoicegl_pipeline_settings_groupschema_LightModelTwoSideEnable_TxsdGlPipelineSettingsGroupChoiceLightModelTwoSideEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightModelTwoSideEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_stencil_test_enablechoicegl_pipeline_settings_groupschema_StencilTestEnable_TxsdGlPipelineSettingsGroupChoiceStencilTestEnable_ struct {
	StencilTestEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema stencil_test_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_stencil_test_enablechoicegl_pipeline_settings_groupschema_StencilTestEnable_TxsdGlPipelineSettingsGroupChoiceStencilTestEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_test_enablechoicegl_pipeline_settings_groupschema_StencilTestEnable_TxsdGlPipelineSettingsGroupChoiceStencilTestEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_test_enablechoicegl_pipeline_settings_groupschema_StencilTestEnable_TxsdGlPipelineSettingsGroupChoiceStencilTestEnable_ instance.
func (me *XsdGoPkgHasElem_stencil_test_enablechoicegl_pipeline_settings_groupschema_StencilTestEnable_TxsdGlPipelineSettingsGroupChoiceStencilTestEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_stencil_test_enablechoicegl_pipeline_settings_groupschema_StencilTestEnable_TxsdGlPipelineSettingsGroupChoiceStencilTestEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StencilTestEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_polygon_offset_line_enablechoicegl_pipeline_settings_groupschema_PolygonOffsetLineEnable_TxsdGlPipelineSettingsGroupChoicePolygonOffsetLineEnable_ struct {
	PolygonOffsetLineEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema polygon_offset_line_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_polygon_offset_line_enablechoicegl_pipeline_settings_groupschema_PolygonOffsetLineEnable_TxsdGlPipelineSettingsGroupChoicePolygonOffsetLineEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_polygon_offset_line_enablechoicegl_pipeline_settings_groupschema_PolygonOffsetLineEnable_TxsdGlPipelineSettingsGroupChoicePolygonOffsetLineEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_polygon_offset_line_enablechoicegl_pipeline_settings_groupschema_PolygonOffsetLineEnable_TxsdGlPipelineSettingsGroupChoicePolygonOffsetLineEnable_ instance.
func (me *XsdGoPkgHasElem_polygon_offset_line_enablechoicegl_pipeline_settings_groupschema_PolygonOffsetLineEnable_TxsdGlPipelineSettingsGroupChoicePolygonOffsetLineEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_polygon_offset_line_enablechoicegl_pipeline_settings_groupschema_PolygonOffsetLineEnable_TxsdGlPipelineSettingsGroupChoicePolygonOffsetLineEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PolygonOffsetLineEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tfloat3Type_001 struct {
	Value Tfloat3Type `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "0 0 -1"
func (me XsdGoPkgHasAttr_Value_Tfloat3Type_001) ValueDefault() Tfloat3Type {
	return Tfloat3Type("0 0 -1")
}

type TxsdGlPipelineSettingsGroupChoiceLightSpotDirection struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat3Type_001

	XsdGoPkgHasAttr_Index_TglMaxLightsIndexType_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceLightSpotDirection function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceLightSpotDirection instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceLightSpotDirection instance.
func (me *TxsdGlPipelineSettingsGroupChoiceLightSpotDirection) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceLightSpotDirection; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_spot_directionchoicegl_pipeline_settings_groupschema_LightSpotDirection_TxsdGlPipelineSettingsGroupChoiceLightSpotDirection_ struct {
	LightSpotDirection *TxsdGlPipelineSettingsGroupChoiceLightSpotDirection `xml:"http://www.collada.org/2008/03/COLLADASchema light_spot_direction"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_spot_directionchoicegl_pipeline_settings_groupschema_LightSpotDirection_TxsdGlPipelineSettingsGroupChoiceLightSpotDirection_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_spot_directionchoicegl_pipeline_settings_groupschema_LightSpotDirection_TxsdGlPipelineSettingsGroupChoiceLightSpotDirection_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_spot_directionchoicegl_pipeline_settings_groupschema_LightSpotDirection_TxsdGlPipelineSettingsGroupChoiceLightSpotDirection_ instance.
func (me *XsdGoPkgHasElem_light_spot_directionchoicegl_pipeline_settings_groupschema_LightSpotDirection_TxsdGlPipelineSettingsGroupChoiceLightSpotDirection_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_spot_directionchoicegl_pipeline_settings_groupschema_LightSpotDirection_TxsdGlPipelineSettingsGroupChoiceLightSpotDirection_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightSpotDirection.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsGroupChoiceClipPlane struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglMaxClipPlanesIndexType_

	XsdGoPkgHasAttr_Value_Tfloat4Type_0000
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceClipPlane function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceClipPlane instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceClipPlane instance.
func (me *TxsdGlPipelineSettingsGroupChoiceClipPlane) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceClipPlane; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_clip_planechoicegl_pipeline_settings_groupschema_ClipPlane_TxsdGlPipelineSettingsGroupChoiceClipPlane_ struct {
	ClipPlane *TxsdGlPipelineSettingsGroupChoiceClipPlane `xml:"http://www.collada.org/2008/03/COLLADASchema clip_plane"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_clip_planechoicegl_pipeline_settings_groupschema_ClipPlane_TxsdGlPipelineSettingsGroupChoiceClipPlane_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_clip_planechoicegl_pipeline_settings_groupschema_ClipPlane_TxsdGlPipelineSettingsGroupChoiceClipPlane_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_clip_planechoicegl_pipeline_settings_groupschema_ClipPlane_TxsdGlPipelineSettingsGroupChoiceClipPlane_ instance.
func (me *XsdGoPkgHasElem_clip_planechoicegl_pipeline_settings_groupschema_ClipPlane_TxsdGlPipelineSettingsGroupChoiceClipPlane_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_clip_planechoicegl_pipeline_settings_groupschema_ClipPlane_TxsdGlPipelineSettingsGroupChoiceClipPlane_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ClipPlane.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_refsequencestencil_funcchoicegl_pipeline_settings_groupschema_Ref_TxsdGlPipelineSettingsGroupChoiceStencilFuncSequenceRef_ struct {
	Ref *TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef `xml:"http://www.collada.org/2008/03/COLLADASchema ref"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_refsequencestencil_funcchoicegl_pipeline_settings_groupschema_Ref_TxsdGlPipelineSettingsGroupChoiceStencilFuncSequenceRef_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_refsequencestencil_funcchoicegl_pipeline_settings_groupschema_Ref_TxsdGlPipelineSettingsGroupChoiceStencilFuncSequenceRef_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_refsequencestencil_funcchoicegl_pipeline_settings_groupschema_Ref_TxsdGlPipelineSettingsGroupChoiceStencilFuncSequenceRef_ instance.
func (me *XsdGoPkgHasElem_refsequencestencil_funcchoicegl_pipeline_settings_groupschema_Ref_TxsdGlPipelineSettingsGroupChoiceStencilFuncSequenceRef_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_refsequencestencil_funcchoicegl_pipeline_settings_groupschema_Ref_TxsdGlPipelineSettingsGroupChoiceStencilFuncSequenceRef_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_funcsequencestencil_funcchoicegl_pipeline_settings_groupschema_Func_TxsdGlPipelineSettingsGroupChoiceStencilFuncSequenceFunc_ struct {
	Func *TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceFunc `xml:"http://www.collada.org/2008/03/COLLADASchema func"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_funcsequencestencil_funcchoicegl_pipeline_settings_groupschema_Func_TxsdGlPipelineSettingsGroupChoiceStencilFuncSequenceFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_funcsequencestencil_funcchoicegl_pipeline_settings_groupschema_Func_TxsdGlPipelineSettingsGroupChoiceStencilFuncSequenceFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_funcsequencestencil_funcchoicegl_pipeline_settings_groupschema_Func_TxsdGlPipelineSettingsGroupChoiceStencilFuncSequenceFunc_ instance.
func (me *XsdGoPkgHasElem_funcsequencestencil_funcchoicegl_pipeline_settings_groupschema_Func_TxsdGlPipelineSettingsGroupChoiceStencilFuncSequenceFunc_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_funcsequencestencil_funcchoicegl_pipeline_settings_groupschema_Func_TxsdGlPipelineSettingsGroupChoiceStencilFuncSequenceFunc_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Func.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_masksequencestencil_funcchoicegl_pipeline_settings_groupschema_Mask_TxsdGlPipelineSettingsGroupChoiceStencilFuncSequenceMask_ struct {
	Mask *TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceMask `xml:"http://www.collada.org/2008/03/COLLADASchema mask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_masksequencestencil_funcchoicegl_pipeline_settings_groupschema_Mask_TxsdGlPipelineSettingsGroupChoiceStencilFuncSequenceMask_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_masksequencestencil_funcchoicegl_pipeline_settings_groupschema_Mask_TxsdGlPipelineSettingsGroupChoiceStencilFuncSequenceMask_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_masksequencestencil_funcchoicegl_pipeline_settings_groupschema_Mask_TxsdGlPipelineSettingsGroupChoiceStencilFuncSequenceMask_ instance.
func (me *XsdGoPkgHasElem_masksequencestencil_funcchoicegl_pipeline_settings_groupschema_Mask_TxsdGlPipelineSettingsGroupChoiceStencilFuncSequenceMask_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_masksequencestencil_funcchoicegl_pipeline_settings_groupschema_Mask_TxsdGlPipelineSettingsGroupChoiceStencilFuncSequenceMask_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Mask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsGroupChoiceStencilFunc struct {
	XsdGoPkgHasElem_refsequencestencil_funcchoicegl_pipeline_settings_groupschema_Ref_TxsdGlPipelineSettingsGroupChoiceStencilFuncSequenceRef_

	XsdGoPkgHasElem_funcsequencestencil_funcchoicegl_pipeline_settings_groupschema_Func_TxsdGlPipelineSettingsGroupChoiceStencilFuncSequenceFunc_

	XsdGoPkgHasElem_masksequencestencil_funcchoicegl_pipeline_settings_groupschema_Mask_TxsdGlPipelineSettingsGroupChoiceStencilFuncSequenceMask_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceStencilFunc function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceStencilFunc instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceStencilFunc instance.
func (me *TxsdGlPipelineSettingsGroupChoiceStencilFunc) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceStencilFunc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_funcsequencestencil_funcchoicegl_pipeline_settings_groupschema_Func_TxsdGlPipelineSettingsGroupChoiceStencilFuncSequenceFunc_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_masksequencestencil_funcchoicegl_pipeline_settings_groupschema_Mask_TxsdGlPipelineSettingsGroupChoiceStencilFuncSequenceMask_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_refsequencestencil_funcchoicegl_pipeline_settings_groupschema_Ref_TxsdGlPipelineSettingsGroupChoiceStencilFuncSequenceRef_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_stencil_funcchoicegl_pipeline_settings_groupschema_StencilFunc_TxsdGlPipelineSettingsGroupChoiceStencilFunc_ struct {
	StencilFunc *TxsdGlPipelineSettingsGroupChoiceStencilFunc `xml:"http://www.collada.org/2008/03/COLLADASchema stencil_func"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_stencil_funcchoicegl_pipeline_settings_groupschema_StencilFunc_TxsdGlPipelineSettingsGroupChoiceStencilFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_funcchoicegl_pipeline_settings_groupschema_StencilFunc_TxsdGlPipelineSettingsGroupChoiceStencilFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_funcchoicegl_pipeline_settings_groupschema_StencilFunc_TxsdGlPipelineSettingsGroupChoiceStencilFunc_ instance.
func (me *XsdGoPkgHasElem_stencil_funcchoicegl_pipeline_settings_groupschema_StencilFunc_TxsdGlPipelineSettingsGroupChoiceStencilFunc_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_stencil_funcchoicegl_pipeline_settings_groupschema_StencilFunc_TxsdGlPipelineSettingsGroupChoiceStencilFunc_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StencilFunc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_point_size_maxchoicegl_pipeline_settings_groupschema_PointSizeMax_TxsdGlPipelineSettingsGroupChoicePointSizeMax_ struct {
	PointSizeMax *TxsdGlPipelineSettingsGroupChoiceFogEnd `xml:"http://www.collada.org/2008/03/COLLADASchema point_size_max"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_point_size_maxchoicegl_pipeline_settings_groupschema_PointSizeMax_TxsdGlPipelineSettingsGroupChoicePointSizeMax_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_size_maxchoicegl_pipeline_settings_groupschema_PointSizeMax_TxsdGlPipelineSettingsGroupChoicePointSizeMax_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_size_maxchoicegl_pipeline_settings_groupschema_PointSizeMax_TxsdGlPipelineSettingsGroupChoicePointSizeMax_ instance.
func (me *XsdGoPkgHasElem_point_size_maxchoicegl_pipeline_settings_groupschema_PointSizeMax_TxsdGlPipelineSettingsGroupChoicePointSizeMax_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_point_size_maxchoicegl_pipeline_settings_groupschema_PointSizeMax_TxsdGlPipelineSettingsGroupChoicePointSizeMax_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PointSizeMax.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsGroupChoiceLightEnable struct {
	XsdGoPkgHasAttr_Index_TglMaxLightsIndexType_

	XsdGoPkgHasAttr_Value_XsdtBoolean_False

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceLightEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceLightEnable instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceLightEnable instance.
func (me *TxsdGlPipelineSettingsGroupChoiceLightEnable) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceLightEnable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_enablechoicegl_pipeline_settings_groupschema_LightEnable_TxsdGlPipelineSettingsGroupChoiceLightEnable_ struct {
	LightEnable *TxsdGlPipelineSettingsGroupChoiceLightEnable `xml:"http://www.collada.org/2008/03/COLLADASchema light_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_enablechoicegl_pipeline_settings_groupschema_LightEnable_TxsdGlPipelineSettingsGroupChoiceLightEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_enablechoicegl_pipeline_settings_groupschema_LightEnable_TxsdGlPipelineSettingsGroupChoiceLightEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_enablechoicegl_pipeline_settings_groupschema_LightEnable_TxsdGlPipelineSettingsGroupChoiceLightEnable_ instance.
func (me *XsdGoPkgHasElem_light_enablechoicegl_pipeline_settings_groupschema_LightEnable_TxsdGlPipelineSettingsGroupChoiceLightEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_enablechoicegl_pipeline_settings_groupschema_LightEnable_TxsdGlPipelineSettingsGroupChoiceLightEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_point_fade_threshold_sizechoicegl_pipeline_settings_groupschema_PointFadeThresholdSize_TxsdGlPipelineSettingsGroupChoicePointFadeThresholdSize_ struct {
	PointFadeThresholdSize *TxsdGlPipelineSettingsGroupChoiceFogEnd `xml:"http://www.collada.org/2008/03/COLLADASchema point_fade_threshold_size"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_point_fade_threshold_sizechoicegl_pipeline_settings_groupschema_PointFadeThresholdSize_TxsdGlPipelineSettingsGroupChoicePointFadeThresholdSize_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_fade_threshold_sizechoicegl_pipeline_settings_groupschema_PointFadeThresholdSize_TxsdGlPipelineSettingsGroupChoicePointFadeThresholdSize_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_fade_threshold_sizechoicegl_pipeline_settings_groupschema_PointFadeThresholdSize_TxsdGlPipelineSettingsGroupChoicePointFadeThresholdSize_ instance.
func (me *XsdGoPkgHasElem_point_fade_threshold_sizechoicegl_pipeline_settings_groupschema_PointFadeThresholdSize_TxsdGlPipelineSettingsGroupChoicePointFadeThresholdSize_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_point_fade_threshold_sizechoicegl_pipeline_settings_groupschema_PointFadeThresholdSize_TxsdGlPipelineSettingsGroupChoicePointFadeThresholdSize_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PointFadeThresholdSize.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_line_smooth_enablechoicegl_pipeline_settings_groupschema_LineSmoothEnable_TxsdGlPipelineSettingsGroupChoiceLineSmoothEnable_ struct {
	LineSmoothEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema line_smooth_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_line_smooth_enablechoicegl_pipeline_settings_groupschema_LineSmoothEnable_TxsdGlPipelineSettingsGroupChoiceLineSmoothEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_line_smooth_enablechoicegl_pipeline_settings_groupschema_LineSmoothEnable_TxsdGlPipelineSettingsGroupChoiceLineSmoothEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_line_smooth_enablechoicegl_pipeline_settings_groupschema_LineSmoothEnable_TxsdGlPipelineSettingsGroupChoiceLineSmoothEnable_ instance.
func (me *XsdGoPkgHasElem_line_smooth_enablechoicegl_pipeline_settings_groupschema_LineSmoothEnable_TxsdGlPipelineSettingsGroupChoiceLineSmoothEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_line_smooth_enablechoicegl_pipeline_settings_groupschema_LineSmoothEnable_TxsdGlPipelineSettingsGroupChoiceLineSmoothEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LineSmoothEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_textureDEPTH_enablechoicegl_pipeline_settings_groupschema_TextureDEPTHEnable_TxsdGlPipelineSettingsGroupChoiceTextureDEPTHEnable_ struct {
	TextureDEPTHEnable *TxsdGlPipelineSettingsGroupChoiceTextureRECTEnable `xml:"http://www.collada.org/2008/03/COLLADASchema textureDEPTH_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_textureDEPTH_enablechoicegl_pipeline_settings_groupschema_TextureDEPTHEnable_TxsdGlPipelineSettingsGroupChoiceTextureDEPTHEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_textureDEPTH_enablechoicegl_pipeline_settings_groupschema_TextureDEPTHEnable_TxsdGlPipelineSettingsGroupChoiceTextureDEPTHEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_textureDEPTH_enablechoicegl_pipeline_settings_groupschema_TextureDEPTHEnable_TxsdGlPipelineSettingsGroupChoiceTextureDEPTHEnable_ instance.
func (me *XsdGoPkgHasElem_textureDEPTH_enablechoicegl_pipeline_settings_groupschema_TextureDEPTHEnable_TxsdGlPipelineSettingsGroupChoiceTextureDEPTHEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_textureDEPTH_enablechoicegl_pipeline_settings_groupschema_TextureDEPTHEnable_TxsdGlPipelineSettingsGroupChoiceTextureDEPTHEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TextureDEPTHEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_logic_op_enablechoicegl_pipeline_settings_groupschema_LogicOpEnable_TxsdGlPipelineSettingsGroupChoiceLogicOpEnable_ struct {
	LogicOpEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema logic_op_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_logic_op_enablechoicegl_pipeline_settings_groupschema_LogicOpEnable_TxsdGlPipelineSettingsGroupChoiceLogicOpEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_logic_op_enablechoicegl_pipeline_settings_groupschema_LogicOpEnable_TxsdGlPipelineSettingsGroupChoiceLogicOpEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_logic_op_enablechoicegl_pipeline_settings_groupschema_LogicOpEnable_TxsdGlPipelineSettingsGroupChoiceLogicOpEnable_ instance.
func (me *XsdGoPkgHasElem_logic_op_enablechoicegl_pipeline_settings_groupschema_LogicOpEnable_TxsdGlPipelineSettingsGroupChoiceLogicOpEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_logic_op_enablechoicegl_pipeline_settings_groupschema_LogicOpEnable_TxsdGlPipelineSettingsGroupChoiceLogicOpEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LogicOpEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsGroupChoiceLightConstantAttenuation struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglMaxLightsIndexType_

	XsdGoPkgHasAttr_Value_TfloatType_1
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceLightConstantAttenuation function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceLightConstantAttenuation instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceLightConstantAttenuation instance.
func (me *TxsdGlPipelineSettingsGroupChoiceLightConstantAttenuation) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceLightConstantAttenuation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_constant_attenuationchoicegl_pipeline_settings_groupschema_LightConstantAttenuation_TxsdGlPipelineSettingsGroupChoiceLightConstantAttenuation_ struct {
	LightConstantAttenuation *TxsdGlPipelineSettingsGroupChoiceLightConstantAttenuation `xml:"http://www.collada.org/2008/03/COLLADASchema light_constant_attenuation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_constant_attenuationchoicegl_pipeline_settings_groupschema_LightConstantAttenuation_TxsdGlPipelineSettingsGroupChoiceLightConstantAttenuation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_constant_attenuationchoicegl_pipeline_settings_groupschema_LightConstantAttenuation_TxsdGlPipelineSettingsGroupChoiceLightConstantAttenuation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_constant_attenuationchoicegl_pipeline_settings_groupschema_LightConstantAttenuation_TxsdGlPipelineSettingsGroupChoiceLightConstantAttenuation_ instance.
func (me *XsdGoPkgHasElem_light_constant_attenuationchoicegl_pipeline_settings_groupschema_LightConstantAttenuation_TxsdGlPipelineSettingsGroupChoiceLightConstantAttenuation_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_constant_attenuationchoicegl_pipeline_settings_groupschema_LightConstantAttenuation_TxsdGlPipelineSettingsGroupChoiceLightConstantAttenuation_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightConstantAttenuation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegl_pipeline_settings_groupschema_Alpha_TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparateSequenceAlpha_ struct {
	Alpha *TxsdGlPipelineSettingsGroupChoiceBlendEquation `xml:"http://www.collada.org/2008/03/COLLADASchema alpha"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegl_pipeline_settings_groupschema_Alpha_TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparateSequenceAlpha_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegl_pipeline_settings_groupschema_Alpha_TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparateSequenceAlpha_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegl_pipeline_settings_groupschema_Alpha_TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparateSequenceAlpha_ instance.
func (me *XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegl_pipeline_settings_groupschema_Alpha_TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparateSequenceAlpha_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegl_pipeline_settings_groupschema_Alpha_TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparateSequenceAlpha_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Alpha.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegl_pipeline_settings_groupschema_Rgb_TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparateSequenceRgb_ struct {
	Rgb *TxsdGlPipelineSettingsGroupChoiceBlendEquation `xml:"http://www.collada.org/2008/03/COLLADASchema rgb"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegl_pipeline_settings_groupschema_Rgb_TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparateSequenceRgb_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegl_pipeline_settings_groupschema_Rgb_TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparateSequenceRgb_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegl_pipeline_settings_groupschema_Rgb_TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparateSequenceRgb_ instance.
func (me *XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegl_pipeline_settings_groupschema_Rgb_TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparateSequenceRgb_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegl_pipeline_settings_groupschema_Rgb_TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparateSequenceRgb_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Rgb.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparate struct {
	XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegl_pipeline_settings_groupschema_Rgb_TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparateSequenceRgb_

	XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegl_pipeline_settings_groupschema_Alpha_TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparateSequenceAlpha_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparate function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparate instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparate instance.
func (me *TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparate) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegl_pipeline_settings_groupschema_Alpha_TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparateSequenceAlpha_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegl_pipeline_settings_groupschema_Rgb_TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparateSequenceRgb_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_blend_equation_separatechoicegl_pipeline_settings_groupschema_BlendEquationSeparate_TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparate_ struct {
	BlendEquationSeparate *TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparate `xml:"http://www.collada.org/2008/03/COLLADASchema blend_equation_separate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_blend_equation_separatechoicegl_pipeline_settings_groupschema_BlendEquationSeparate_TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparate_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_blend_equation_separatechoicegl_pipeline_settings_groupschema_BlendEquationSeparate_TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparate_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_blend_equation_separatechoicegl_pipeline_settings_groupschema_BlendEquationSeparate_TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparate_ instance.
func (me *XsdGoPkgHasElem_blend_equation_separatechoicegl_pipeline_settings_groupschema_BlendEquationSeparate_TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparate_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_blend_equation_separatechoicegl_pipeline_settings_groupschema_BlendEquationSeparate_TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparate_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BlendEquationSeparate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_failsequencestencil_opchoicegl_pipeline_settings_groupschema_Fail_TxsdGlPipelineSettingsGroupChoiceStencilOpSequenceFail_ struct {
	Fail *TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceZpass `xml:"http://www.collada.org/2008/03/COLLADASchema fail"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_failsequencestencil_opchoicegl_pipeline_settings_groupschema_Fail_TxsdGlPipelineSettingsGroupChoiceStencilOpSequenceFail_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_failsequencestencil_opchoicegl_pipeline_settings_groupschema_Fail_TxsdGlPipelineSettingsGroupChoiceStencilOpSequenceFail_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_failsequencestencil_opchoicegl_pipeline_settings_groupschema_Fail_TxsdGlPipelineSettingsGroupChoiceStencilOpSequenceFail_ instance.
func (me *XsdGoPkgHasElem_failsequencestencil_opchoicegl_pipeline_settings_groupschema_Fail_TxsdGlPipelineSettingsGroupChoiceStencilOpSequenceFail_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_failsequencestencil_opchoicegl_pipeline_settings_groupschema_Fail_TxsdGlPipelineSettingsGroupChoiceStencilOpSequenceFail_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Fail.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_zpasssequencestencil_opchoicegl_pipeline_settings_groupschema_Zpass_TxsdGlPipelineSettingsGroupChoiceStencilOpSequenceZpass_ struct {
	Zpass *TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceZpass `xml:"http://www.collada.org/2008/03/COLLADASchema zpass"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_zpasssequencestencil_opchoicegl_pipeline_settings_groupschema_Zpass_TxsdGlPipelineSettingsGroupChoiceStencilOpSequenceZpass_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_zpasssequencestencil_opchoicegl_pipeline_settings_groupschema_Zpass_TxsdGlPipelineSettingsGroupChoiceStencilOpSequenceZpass_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_zpasssequencestencil_opchoicegl_pipeline_settings_groupschema_Zpass_TxsdGlPipelineSettingsGroupChoiceStencilOpSequenceZpass_ instance.
func (me *XsdGoPkgHasElem_zpasssequencestencil_opchoicegl_pipeline_settings_groupschema_Zpass_TxsdGlPipelineSettingsGroupChoiceStencilOpSequenceZpass_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_zpasssequencestencil_opchoicegl_pipeline_settings_groupschema_Zpass_TxsdGlPipelineSettingsGroupChoiceStencilOpSequenceZpass_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Zpass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_zfailsequencestencil_opchoicegl_pipeline_settings_groupschema_Zfail_TxsdGlPipelineSettingsGroupChoiceStencilOpSequenceZfail_ struct {
	Zfail *TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceZpass `xml:"http://www.collada.org/2008/03/COLLADASchema zfail"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_zfailsequencestencil_opchoicegl_pipeline_settings_groupschema_Zfail_TxsdGlPipelineSettingsGroupChoiceStencilOpSequenceZfail_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_zfailsequencestencil_opchoicegl_pipeline_settings_groupschema_Zfail_TxsdGlPipelineSettingsGroupChoiceStencilOpSequenceZfail_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_zfailsequencestencil_opchoicegl_pipeline_settings_groupschema_Zfail_TxsdGlPipelineSettingsGroupChoiceStencilOpSequenceZfail_ instance.
func (me *XsdGoPkgHasElem_zfailsequencestencil_opchoicegl_pipeline_settings_groupschema_Zfail_TxsdGlPipelineSettingsGroupChoiceStencilOpSequenceZfail_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_zfailsequencestencil_opchoicegl_pipeline_settings_groupschema_Zfail_TxsdGlPipelineSettingsGroupChoiceStencilOpSequenceZfail_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Zfail.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsGroupChoiceStencilOp struct {
	XsdGoPkgHasElem_failsequencestencil_opchoicegl_pipeline_settings_groupschema_Fail_TxsdGlPipelineSettingsGroupChoiceStencilOpSequenceFail_

	XsdGoPkgHasElem_zpasssequencestencil_opchoicegl_pipeline_settings_groupschema_Zpass_TxsdGlPipelineSettingsGroupChoiceStencilOpSequenceZpass_

	XsdGoPkgHasElem_zfailsequencestencil_opchoicegl_pipeline_settings_groupschema_Zfail_TxsdGlPipelineSettingsGroupChoiceStencilOpSequenceZfail_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceStencilOp function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceStencilOp instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceStencilOp instance.
func (me *TxsdGlPipelineSettingsGroupChoiceStencilOp) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceStencilOp; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_failsequencestencil_opchoicegl_pipeline_settings_groupschema_Fail_TxsdGlPipelineSettingsGroupChoiceStencilOpSequenceFail_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_zpasssequencestencil_opchoicegl_pipeline_settings_groupschema_Zpass_TxsdGlPipelineSettingsGroupChoiceStencilOpSequenceZpass_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_zfailsequencestencil_opchoicegl_pipeline_settings_groupschema_Zfail_TxsdGlPipelineSettingsGroupChoiceStencilOpSequenceZfail_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_stencil_opchoicegl_pipeline_settings_groupschema_StencilOp_TxsdGlPipelineSettingsGroupChoiceStencilOp_ struct {
	StencilOp *TxsdGlPipelineSettingsGroupChoiceStencilOp `xml:"http://www.collada.org/2008/03/COLLADASchema stencil_op"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_stencil_opchoicegl_pipeline_settings_groupschema_StencilOp_TxsdGlPipelineSettingsGroupChoiceStencilOp_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_opchoicegl_pipeline_settings_groupschema_StencilOp_TxsdGlPipelineSettingsGroupChoiceStencilOp_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_opchoicegl_pipeline_settings_groupschema_StencilOp_TxsdGlPipelineSettingsGroupChoiceStencilOp_ instance.
func (me *XsdGoPkgHasElem_stencil_opchoicegl_pipeline_settings_groupschema_StencilOp_TxsdGlPipelineSettingsGroupChoiceStencilOp_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_stencil_opchoicegl_pipeline_settings_groupschema_StencilOp_TxsdGlPipelineSettingsGroupChoiceStencilOp_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StencilOp.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tfloat4Type_ struct {
	Value Tfloat4Type `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

type TxsdGlPipelineSettingsGroupChoiceTextureEnvColor struct {
	XsdGoPkgHasAttr_Value_Tfloat4Type_

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndexType_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceTextureEnvColor function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceTextureEnvColor instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceTextureEnvColor instance.
func (me *TxsdGlPipelineSettingsGroupChoiceTextureEnvColor) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceTextureEnvColor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_texture_env_colorchoicegl_pipeline_settings_groupschema_TextureEnvColor_TxsdGlPipelineSettingsGroupChoiceTextureEnvColor_ struct {
	TextureEnvColor *TxsdGlPipelineSettingsGroupChoiceTextureEnvColor `xml:"http://www.collada.org/2008/03/COLLADASchema texture_env_color"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_texture_env_colorchoicegl_pipeline_settings_groupschema_TextureEnvColor_TxsdGlPipelineSettingsGroupChoiceTextureEnvColor_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texture_env_colorchoicegl_pipeline_settings_groupschema_TextureEnvColor_TxsdGlPipelineSettingsGroupChoiceTextureEnvColor_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texture_env_colorchoicegl_pipeline_settings_groupschema_TextureEnvColor_TxsdGlPipelineSettingsGroupChoiceTextureEnvColor_ instance.
func (me *XsdGoPkgHasElem_texture_env_colorchoicegl_pipeline_settings_groupschema_TextureEnvColor_TxsdGlPipelineSettingsGroupChoiceTextureEnvColor_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_texture_env_colorchoicegl_pipeline_settings_groupschema_TextureEnvColor_TxsdGlPipelineSettingsGroupChoiceTextureEnvColor_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TextureEnvColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_facesequencecolor_materialchoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoiceColorMaterialSequenceFace_ struct {
	Face *TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace `xml:"http://www.collada.org/2008/03/COLLADASchema face"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_facesequencecolor_materialchoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoiceColorMaterialSequenceFace_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_facesequencecolor_materialchoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoiceColorMaterialSequenceFace_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_facesequencecolor_materialchoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoiceColorMaterialSequenceFace_ instance.
func (me *XsdGoPkgHasElem_facesequencecolor_materialchoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoiceColorMaterialSequenceFace_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_facesequencecolor_materialchoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoiceColorMaterialSequenceFace_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Face.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_TglMaterialEnum_AmbientAndDiffuse struct {
	Value TglMaterialEnum `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "AMBIENT_AND_DIFFUSE"
func (me XsdGoPkgHasAttr_Value_TglMaterialEnum_AmbientAndDiffuse) ValueDefault() TglMaterialEnum {
	return TglMaterialEnum("AMBIENT_AND_DIFFUSE")
}

type TxsdGlPipelineSettingsGroupChoiceColorMaterialSequenceMode struct {
	XsdGoPkgHasAttr_Value_TglMaterialEnum_AmbientAndDiffuse

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceColorMaterialSequenceMode function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceColorMaterialSequenceMode instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceColorMaterialSequenceMode instance.
func (me *TxsdGlPipelineSettingsGroupChoiceColorMaterialSequenceMode) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceColorMaterialSequenceMode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_modesequencecolor_materialchoicegl_pipeline_settings_groupschema_Mode_TxsdGlPipelineSettingsGroupChoiceColorMaterialSequenceMode_ struct {
	Mode *TxsdGlPipelineSettingsGroupChoiceColorMaterialSequenceMode `xml:"http://www.collada.org/2008/03/COLLADASchema mode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_modesequencecolor_materialchoicegl_pipeline_settings_groupschema_Mode_TxsdGlPipelineSettingsGroupChoiceColorMaterialSequenceMode_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_modesequencecolor_materialchoicegl_pipeline_settings_groupschema_Mode_TxsdGlPipelineSettingsGroupChoiceColorMaterialSequenceMode_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_modesequencecolor_materialchoicegl_pipeline_settings_groupschema_Mode_TxsdGlPipelineSettingsGroupChoiceColorMaterialSequenceMode_ instance.
func (me *XsdGoPkgHasElem_modesequencecolor_materialchoicegl_pipeline_settings_groupschema_Mode_TxsdGlPipelineSettingsGroupChoiceColorMaterialSequenceMode_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_modesequencecolor_materialchoicegl_pipeline_settings_groupschema_Mode_TxsdGlPipelineSettingsGroupChoiceColorMaterialSequenceMode_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Mode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsGroupChoiceColorMaterial struct {
	XsdGoPkgHasElem_facesequencecolor_materialchoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoiceColorMaterialSequenceFace_

	XsdGoPkgHasElem_modesequencecolor_materialchoicegl_pipeline_settings_groupschema_Mode_TxsdGlPipelineSettingsGroupChoiceColorMaterialSequenceMode_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceColorMaterial function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceColorMaterial instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceColorMaterial instance.
func (me *TxsdGlPipelineSettingsGroupChoiceColorMaterial) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceColorMaterial; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_modesequencecolor_materialchoicegl_pipeline_settings_groupschema_Mode_TxsdGlPipelineSettingsGroupChoiceColorMaterialSequenceMode_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_facesequencecolor_materialchoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoiceColorMaterialSequenceFace_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_color_materialchoicegl_pipeline_settings_groupschema_ColorMaterial_TxsdGlPipelineSettingsGroupChoiceColorMaterial_ struct {
	ColorMaterial *TxsdGlPipelineSettingsGroupChoiceColorMaterial `xml:"http://www.collada.org/2008/03/COLLADASchema color_material"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_color_materialchoicegl_pipeline_settings_groupschema_ColorMaterial_TxsdGlPipelineSettingsGroupChoiceColorMaterial_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_color_materialchoicegl_pipeline_settings_groupschema_ColorMaterial_TxsdGlPipelineSettingsGroupChoiceColorMaterial_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_color_materialchoicegl_pipeline_settings_groupschema_ColorMaterial_TxsdGlPipelineSettingsGroupChoiceColorMaterial_ instance.
func (me *XsdGoPkgHasElem_color_materialchoicegl_pipeline_settings_groupschema_ColorMaterial_TxsdGlPipelineSettingsGroupChoiceColorMaterial_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_color_materialchoicegl_pipeline_settings_groupschema_ColorMaterial_TxsdGlPipelineSettingsGroupChoiceColorMaterial_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ColorMaterial.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_valuechoicetextureRECTchoicegl_pipeline_settings_groupschema_Value_TfxSamplerRECTType_ struct {
	Value *TfxSamplerRECTType `xml:"http://www.collada.org/2008/03/COLLADASchema value"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_valuechoicetextureRECTchoicegl_pipeline_settings_groupschema_Value_TfxSamplerRECTType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_valuechoicetextureRECTchoicegl_pipeline_settings_groupschema_Value_TfxSamplerRECTType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_valuechoicetextureRECTchoicegl_pipeline_settings_groupschema_Value_TfxSamplerRECTType_ instance.
func (me *XsdGoPkgHasElem_valuechoicetextureRECTchoicegl_pipeline_settings_groupschema_Value_TfxSamplerRECTType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_valuechoicetextureRECTchoicegl_pipeline_settings_groupschema_Value_TfxSamplerRECTType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Value.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsGroupChoiceTextureRECT struct {
	XsdGoPkgHasElem_paramchoicetextureCUBEchoicegl_pipeline_settings_groupschema_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndexType_

	XsdGoPkgHasElem_valuechoicetextureRECTchoicegl_pipeline_settings_groupschema_Value_TfxSamplerRECTType_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceTextureRECT function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceTextureRECT instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceTextureRECT instance.
func (me *TxsdGlPipelineSettingsGroupChoiceTextureRECT) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceTextureRECT; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_valuechoicetextureRECTchoicegl_pipeline_settings_groupschema_Value_TfxSamplerRECTType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_paramchoicetextureCUBEchoicegl_pipeline_settings_groupschema_Param_XsdtNCName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_textureRECTchoicegl_pipeline_settings_groupschema_TextureRECT_TxsdGlPipelineSettingsGroupChoiceTextureRECT_ struct {
	TextureRECT *TxsdGlPipelineSettingsGroupChoiceTextureRECT `xml:"http://www.collada.org/2008/03/COLLADASchema textureRECT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_textureRECTchoicegl_pipeline_settings_groupschema_TextureRECT_TxsdGlPipelineSettingsGroupChoiceTextureRECT_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_textureRECTchoicegl_pipeline_settings_groupschema_TextureRECT_TxsdGlPipelineSettingsGroupChoiceTextureRECT_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_textureRECTchoicegl_pipeline_settings_groupschema_TextureRECT_TxsdGlPipelineSettingsGroupChoiceTextureRECT_ instance.
func (me *XsdGoPkgHasElem_textureRECTchoicegl_pipeline_settings_groupschema_TextureRECT_TxsdGlPipelineSettingsGroupChoiceTextureRECT_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_textureRECTchoicegl_pipeline_settings_groupschema_TextureRECT_TxsdGlPipelineSettingsGroupChoiceTextureRECT_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TextureRECT.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_spot_exponentchoicegl_pipeline_settings_groupschema_LightSpotExponent_TxsdGlPipelineSettingsGroupChoiceLightSpotExponent_ struct {
	LightSpotExponent *TxsdGlPipelineSettingsGroupChoiceLightQuadraticAttenuation `xml:"http://www.collada.org/2008/03/COLLADASchema light_spot_exponent"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_spot_exponentchoicegl_pipeline_settings_groupschema_LightSpotExponent_TxsdGlPipelineSettingsGroupChoiceLightSpotExponent_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_spot_exponentchoicegl_pipeline_settings_groupschema_LightSpotExponent_TxsdGlPipelineSettingsGroupChoiceLightSpotExponent_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_spot_exponentchoicegl_pipeline_settings_groupschema_LightSpotExponent_TxsdGlPipelineSettingsGroupChoiceLightSpotExponent_ instance.
func (me *XsdGoPkgHasElem_light_spot_exponentchoicegl_pipeline_settings_groupschema_LightSpotExponent_TxsdGlPipelineSettingsGroupChoiceLightSpotExponent_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_spot_exponentchoicegl_pipeline_settings_groupschema_LightSpotExponent_TxsdGlPipelineSettingsGroupChoiceLightSpotExponent_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightSpotExponent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_valuechoicetexture3Dchoicegl_pipeline_settings_groupschema_Value_TfxSampler3DType_ struct {
	Value *TfxSampler3DType `xml:"http://www.collada.org/2008/03/COLLADASchema value"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_valuechoicetexture3Dchoicegl_pipeline_settings_groupschema_Value_TfxSampler3DType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_valuechoicetexture3Dchoicegl_pipeline_settings_groupschema_Value_TfxSampler3DType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_valuechoicetexture3Dchoicegl_pipeline_settings_groupschema_Value_TfxSampler3DType_ instance.
func (me *XsdGoPkgHasElem_valuechoicetexture3Dchoicegl_pipeline_settings_groupschema_Value_TfxSampler3DType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_valuechoicetexture3Dchoicegl_pipeline_settings_groupschema_Value_TfxSampler3DType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Value.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsGroupChoiceTexture3D struct {
	XsdGoPkgHasElem_valuechoicetexture3Dchoicegl_pipeline_settings_groupschema_Value_TfxSampler3DType_

	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndexType_

	XsdGoPkgHasElem_paramchoicetextureCUBEchoicegl_pipeline_settings_groupschema_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceTexture3D function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceTexture3D instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceTexture3D instance.
func (me *TxsdGlPipelineSettingsGroupChoiceTexture3D) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceTexture3D; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_valuechoicetexture3Dchoicegl_pipeline_settings_groupschema_Value_TfxSampler3DType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_paramchoicetextureCUBEchoicegl_pipeline_settings_groupschema_Param_XsdtNCName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_texture3Dchoicegl_pipeline_settings_groupschema_Texture3D_TxsdGlPipelineSettingsGroupChoiceTexture3D_ struct {
	Texture3D *TxsdGlPipelineSettingsGroupChoiceTexture3D `xml:"http://www.collada.org/2008/03/COLLADASchema texture3D"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_texture3Dchoicegl_pipeline_settings_groupschema_Texture3D_TxsdGlPipelineSettingsGroupChoiceTexture3D_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texture3Dchoicegl_pipeline_settings_groupschema_Texture3D_TxsdGlPipelineSettingsGroupChoiceTexture3D_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texture3Dchoicegl_pipeline_settings_groupschema_Texture3D_TxsdGlPipelineSettingsGroupChoiceTexture3D_ instance.
func (me *XsdGoPkgHasElem_texture3Dchoicegl_pipeline_settings_groupschema_Texture3D_TxsdGlPipelineSettingsGroupChoiceTexture3D_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_texture3Dchoicegl_pipeline_settings_groupschema_Texture3D_TxsdGlPipelineSettingsGroupChoiceTexture3D_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Texture3D.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_polygon_offset_fill_enablechoicegl_pipeline_settings_groupschema_PolygonOffsetFillEnable_TxsdGlPipelineSettingsGroupChoicePolygonOffsetFillEnable_ struct {
	PolygonOffsetFillEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema polygon_offset_fill_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_polygon_offset_fill_enablechoicegl_pipeline_settings_groupschema_PolygonOffsetFillEnable_TxsdGlPipelineSettingsGroupChoicePolygonOffsetFillEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_polygon_offset_fill_enablechoicegl_pipeline_settings_groupschema_PolygonOffsetFillEnable_TxsdGlPipelineSettingsGroupChoicePolygonOffsetFillEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_polygon_offset_fill_enablechoicegl_pipeline_settings_groupschema_PolygonOffsetFillEnable_TxsdGlPipelineSettingsGroupChoicePolygonOffsetFillEnable_ instance.
func (me *XsdGoPkgHasElem_polygon_offset_fill_enablechoicegl_pipeline_settings_groupschema_PolygonOffsetFillEnable_TxsdGlPipelineSettingsGroupChoicePolygonOffsetFillEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_polygon_offset_fill_enablechoicegl_pipeline_settings_groupschema_PolygonOffsetFillEnable_TxsdGlPipelineSettingsGroupChoicePolygonOffsetFillEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PolygonOffsetFillEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_depth_funcchoicegl_pipeline_settings_groupschema_DepthFunc_TxsdGlPipelineSettingsGroupChoiceDepthFunc_ struct {
	DepthFunc *TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceFunc `xml:"http://www.collada.org/2008/03/COLLADASchema depth_func"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_depth_funcchoicegl_pipeline_settings_groupschema_DepthFunc_TxsdGlPipelineSettingsGroupChoiceDepthFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_funcchoicegl_pipeline_settings_groupschema_DepthFunc_TxsdGlPipelineSettingsGroupChoiceDepthFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_depth_funcchoicegl_pipeline_settings_groupschema_DepthFunc_TxsdGlPipelineSettingsGroupChoiceDepthFunc_ instance.
func (me *XsdGoPkgHasElem_depth_funcchoicegl_pipeline_settings_groupschema_DepthFunc_TxsdGlPipelineSettingsGroupChoiceDepthFunc_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_depth_funcchoicegl_pipeline_settings_groupschema_DepthFunc_TxsdGlPipelineSettingsGroupChoiceDepthFunc_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DepthFunc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_TintType_4294967295 struct {
	Value TintType `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- 4294967295
func (me XsdGoPkgHasAttr_Value_TintType_4294967295) ValueDefault() TintType {
	return TintType(4294967295)
}

type TxsdGlPipelineSettingsGroupChoiceStencilMask struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TintType_4294967295
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceStencilMask function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceStencilMask instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceStencilMask instance.
func (me *TxsdGlPipelineSettingsGroupChoiceStencilMask) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceStencilMask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_stencil_maskchoicegl_pipeline_settings_groupschema_StencilMask_TxsdGlPipelineSettingsGroupChoiceStencilMask_ struct {
	StencilMask *TxsdGlPipelineSettingsGroupChoiceStencilMask `xml:"http://www.collada.org/2008/03/COLLADASchema stencil_mask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_stencil_maskchoicegl_pipeline_settings_groupschema_StencilMask_TxsdGlPipelineSettingsGroupChoiceStencilMask_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_maskchoicegl_pipeline_settings_groupschema_StencilMask_TxsdGlPipelineSettingsGroupChoiceStencilMask_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_maskchoicegl_pipeline_settings_groupschema_StencilMask_TxsdGlPipelineSettingsGroupChoiceStencilMask_ instance.
func (me *XsdGoPkgHasElem_stencil_maskchoicegl_pipeline_settings_groupschema_StencilMask_TxsdGlPipelineSettingsGroupChoiceStencilMask_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_stencil_maskchoicegl_pipeline_settings_groupschema_StencilMask_TxsdGlPipelineSettingsGroupChoiceStencilMask_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StencilMask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_XsdtString_ struct {
	Value xsdt.String `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

type TxsdGlPipelineSettingsGroupChoiceTextureEnvMode struct {
	XsdGoPkgHasAttr_Value_XsdtString_

	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndexType_

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsGroupChoiceTextureEnvMode function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsGroupChoiceTextureEnvMode instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsGroupChoiceTextureEnvMode instance.
func (me *TxsdGlPipelineSettingsGroupChoiceTextureEnvMode) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsGroupChoiceTextureEnvMode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_texture_env_modechoicegl_pipeline_settings_groupschema_TextureEnvMode_TxsdGlPipelineSettingsGroupChoiceTextureEnvMode_ struct {
	TextureEnvMode *TxsdGlPipelineSettingsGroupChoiceTextureEnvMode `xml:"http://www.collada.org/2008/03/COLLADASchema texture_env_mode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_texture_env_modechoicegl_pipeline_settings_groupschema_TextureEnvMode_TxsdGlPipelineSettingsGroupChoiceTextureEnvMode_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texture_env_modechoicegl_pipeline_settings_groupschema_TextureEnvMode_TxsdGlPipelineSettingsGroupChoiceTextureEnvMode_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texture_env_modechoicegl_pipeline_settings_groupschema_TextureEnvMode_TxsdGlPipelineSettingsGroupChoiceTextureEnvMode_ instance.
func (me *XsdGoPkgHasElem_texture_env_modechoicegl_pipeline_settings_groupschema_TextureEnvMode_TxsdGlPipelineSettingsGroupChoiceTextureEnvMode_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_texture_env_modechoicegl_pipeline_settings_groupschema_TextureEnvMode_TxsdGlPipelineSettingsGroupChoiceTextureEnvMode_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TextureEnvMode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_alpha_test_enablechoicegl_pipeline_settings_groupschema_AlphaTestEnable_TxsdGlPipelineSettingsGroupChoiceAlphaTestEnable_ struct {
	AlphaTestEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema alpha_test_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_alpha_test_enablechoicegl_pipeline_settings_groupschema_AlphaTestEnable_TxsdGlPipelineSettingsGroupChoiceAlphaTestEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_alpha_test_enablechoicegl_pipeline_settings_groupschema_AlphaTestEnable_TxsdGlPipelineSettingsGroupChoiceAlphaTestEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_alpha_test_enablechoicegl_pipeline_settings_groupschema_AlphaTestEnable_TxsdGlPipelineSettingsGroupChoiceAlphaTestEnable_ instance.
func (me *XsdGoPkgHasElem_alpha_test_enablechoicegl_pipeline_settings_groupschema_AlphaTestEnable_TxsdGlPipelineSettingsGroupChoiceAlphaTestEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_alpha_test_enablechoicegl_pipeline_settings_groupschema_AlphaTestEnable_TxsdGlPipelineSettingsGroupChoiceAlphaTestEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AlphaTestEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasGroup_GlPipelineSettingsGroup struct {
	XsdGoPkgHasElem_projection_matrixchoicegl_pipeline_settings_groupschema_ProjectionMatrix_TxsdGlPipelineSettingsGroupChoiceProjectionMatrix_

	XsdGoPkgHasElem_fog_enablechoicegl_pipeline_settings_groupschema_FogEnable_TxsdGlPipelineSettingsGroupChoiceFogEnable_

	XsdGoPkgHasElem_material_specularchoicegl_pipeline_settings_groupschema_MaterialSpecular_TxsdGlPipelineSettingsGroupChoiceMaterialSpecular_

	XsdGoPkgHasElem_blend_enablechoicegl_pipeline_settings_groupschema_BlendEnable_TxsdGlPipelineSettingsGroupChoiceBlendEnable_

	XsdGoPkgHasElem_polygon_smooth_enablechoicegl_pipeline_settings_groupschema_PolygonSmoothEnable_TxsdGlPipelineSettingsGroupChoicePolygonSmoothEnable_

	XsdGoPkgHasElem_line_stipple_enablechoicegl_pipeline_settings_groupschema_LineStippleEnable_TxsdGlPipelineSettingsGroupChoiceLineStippleEnable_

	XsdGoPkgHasElem_color_logic_op_enablechoicegl_pipeline_settings_groupschema_ColorLogicOpEnable_TxsdGlPipelineSettingsGroupChoiceColorLogicOpEnable_

	XsdGoPkgHasElem_clip_plane_enablechoicegl_pipeline_settings_groupschema_ClipPlaneEnable_TxsdGlPipelineSettingsGroupChoiceClipPlaneEnable_

	XsdGoPkgHasElem_material_emissionchoicegl_pipeline_settings_groupschema_MaterialEmission_TxsdGlPipelineSettingsGroupChoiceMaterialEmission_

	XsdGoPkgHasElem_light_model_ambientchoicegl_pipeline_settings_groupschema_LightModelAmbient_TxsdGlPipelineSettingsGroupChoiceLightModelAmbient_

	XsdGoPkgHasElem_cull_facechoicegl_pipeline_settings_groupschema_CullFace_TxsdGlPipelineSettingsGroupChoiceCullFace_

	XsdGoPkgHasElem_blend_colorchoicegl_pipeline_settings_groupschema_BlendColor_TxsdGlPipelineSettingsGroupChoiceBlendColor_

	XsdGoPkgHasElem_light_model_two_side_enablechoicegl_pipeline_settings_groupschema_LightModelTwoSideEnable_TxsdGlPipelineSettingsGroupChoiceLightModelTwoSideEnable_

	XsdGoPkgHasElem_stencil_test_enablechoicegl_pipeline_settings_groupschema_StencilTestEnable_TxsdGlPipelineSettingsGroupChoiceStencilTestEnable_

	XsdGoPkgHasElem_polygon_offset_line_enablechoicegl_pipeline_settings_groupschema_PolygonOffsetLineEnable_TxsdGlPipelineSettingsGroupChoicePolygonOffsetLineEnable_

	XsdGoPkgHasElem_light_spot_directionchoicegl_pipeline_settings_groupschema_LightSpotDirection_TxsdGlPipelineSettingsGroupChoiceLightSpotDirection_

	XsdGoPkgHasElem_clip_planechoicegl_pipeline_settings_groupschema_ClipPlane_TxsdGlPipelineSettingsGroupChoiceClipPlane_

	XsdGoPkgHasElem_stencil_funcchoicegl_pipeline_settings_groupschema_StencilFunc_TxsdGlPipelineSettingsGroupChoiceStencilFunc_

	XsdGoPkgHasElem_point_size_maxchoicegl_pipeline_settings_groupschema_PointSizeMax_TxsdGlPipelineSettingsGroupChoicePointSizeMax_

	XsdGoPkgHasElem_light_enablechoicegl_pipeline_settings_groupschema_LightEnable_TxsdGlPipelineSettingsGroupChoiceLightEnable_

	XsdGoPkgHasElem_point_fade_threshold_sizechoicegl_pipeline_settings_groupschema_PointFadeThresholdSize_TxsdGlPipelineSettingsGroupChoicePointFadeThresholdSize_

	XsdGoPkgHasElem_line_smooth_enablechoicegl_pipeline_settings_groupschema_LineSmoothEnable_TxsdGlPipelineSettingsGroupChoiceLineSmoothEnable_

	XsdGoPkgHasElem_textureDEPTH_enablechoicegl_pipeline_settings_groupschema_TextureDEPTHEnable_TxsdGlPipelineSettingsGroupChoiceTextureDEPTHEnable_

	XsdGoPkgHasElem_logic_op_enablechoicegl_pipeline_settings_groupschema_LogicOpEnable_TxsdGlPipelineSettingsGroupChoiceLogicOpEnable_

	XsdGoPkgHasElem_light_constant_attenuationchoicegl_pipeline_settings_groupschema_LightConstantAttenuation_TxsdGlPipelineSettingsGroupChoiceLightConstantAttenuation_

	XsdGoPkgHasElem_blend_equation_separatechoicegl_pipeline_settings_groupschema_BlendEquationSeparate_TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparate_

	XsdGoPkgHasElem_stencil_opchoicegl_pipeline_settings_groupschema_StencilOp_TxsdGlPipelineSettingsGroupChoiceStencilOp_

	XsdGoPkgHasElem_texture_env_colorchoicegl_pipeline_settings_groupschema_TextureEnvColor_TxsdGlPipelineSettingsGroupChoiceTextureEnvColor_

	XsdGoPkgHasElem_color_materialchoicegl_pipeline_settings_groupschema_ColorMaterial_TxsdGlPipelineSettingsGroupChoiceColorMaterial_

	XsdGoPkgHasElem_textureRECTchoicegl_pipeline_settings_groupschema_TextureRECT_TxsdGlPipelineSettingsGroupChoiceTextureRECT_

	XsdGoPkgHasElem_light_spot_exponentchoicegl_pipeline_settings_groupschema_LightSpotExponent_TxsdGlPipelineSettingsGroupChoiceLightSpotExponent_

	XsdGoPkgHasElem_texture3Dchoicegl_pipeline_settings_groupschema_Texture3D_TxsdGlPipelineSettingsGroupChoiceTexture3D_

	XsdGoPkgHasElem_polygon_offset_fill_enablechoicegl_pipeline_settings_groupschema_PolygonOffsetFillEnable_TxsdGlPipelineSettingsGroupChoicePolygonOffsetFillEnable_

	XsdGoPkgHasElem_depth_funcchoicegl_pipeline_settings_groupschema_DepthFunc_TxsdGlPipelineSettingsGroupChoiceDepthFunc_

	XsdGoPkgHasElem_stencil_maskchoicegl_pipeline_settings_groupschema_StencilMask_TxsdGlPipelineSettingsGroupChoiceStencilMask_

	XsdGoPkgHasElem_texture_env_modechoicegl_pipeline_settings_groupschema_TextureEnvMode_TxsdGlPipelineSettingsGroupChoiceTextureEnvMode_

	XsdGoPkgHasElem_alpha_test_enablechoicegl_pipeline_settings_groupschema_AlphaTestEnable_TxsdGlPipelineSettingsGroupChoiceAlphaTestEnable_

	XsdGoPkgHasElem_stencil_mask_separatechoicegl_pipeline_settings_groupschema_StencilMaskSeparate_TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparate_

	XsdGoPkgHasElem_fog_endchoicegl_pipeline_settings_groupschema_FogEnd_TxsdGlPipelineSettingsGroupChoiceFogEnd_

	XsdGoPkgHasElem_rescale_normal_enablechoicegl_pipeline_settings_groupschema_RescaleNormalEnable_TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable_

	XsdGoPkgHasElem_blend_equationchoicegl_pipeline_settings_groupschema_BlendEquation_TxsdGlPipelineSettingsGroupChoiceBlendEquation_

	XsdGoPkgHasElem_point_distance_attenuationchoicegl_pipeline_settings_groupschema_PointDistanceAttenuation_TxsdGlPipelineSettingsGroupChoicePointDistanceAttenuation_

	XsdGoPkgHasElem_front_facechoicegl_pipeline_settings_groupschema_FrontFace_TxsdGlPipelineSettingsGroupChoiceFrontFace_

	XsdGoPkgHasElem_alpha_funcchoicegl_pipeline_settings_groupschema_AlphaFunc_TxsdGlPipelineSettingsGroupChoiceAlphaFunc_

	XsdGoPkgHasElem_scissorchoicegl_pipeline_settings_groupschema_Scissor_TxsdGlPipelineSettingsGroupChoiceScissor_

	XsdGoPkgHasElem_point_size_minchoicegl_pipeline_settings_groupschema_PointSizeMin_TxsdGlPipelineSettingsGroupChoicePointSizeMin_

	XsdGoPkgHasElem_depth_bounds_enablechoicegl_pipeline_settings_groupschema_DepthBoundsEnable_TxsdGlPipelineSettingsGroupChoiceDepthBoundsEnable_

	XsdGoPkgHasElem_material_ambientchoicegl_pipeline_settings_groupschema_MaterialAmbient_TxsdGlPipelineSettingsGroupChoiceMaterialAmbient_

	XsdGoPkgHasElem_scissor_test_enablechoicegl_pipeline_settings_groupschema_ScissorTestEnable_TxsdGlPipelineSettingsGroupChoiceScissorTestEnable_

	XsdGoPkgHasElem_textureRECT_enablechoicegl_pipeline_settings_groupschema_TextureRECTEnable_TxsdGlPipelineSettingsGroupChoiceTextureRECTEnable_

	XsdGoPkgHasElem_logic_opchoicegl_pipeline_settings_groupschema_LogicOp_TxsdGlPipelineSettingsGroupChoiceLogicOp_

	XsdGoPkgHasElem_cull_face_enablechoicegl_pipeline_settings_groupschema_CullFaceEnable_TxsdGlPipelineSettingsGroupChoiceCullFaceEnable_

	XsdGoPkgHasElem_depth_maskchoicegl_pipeline_settings_groupschema_DepthMask_TxsdGlPipelineSettingsGroupChoiceDepthMask_

	XsdGoPkgHasElem_material_shininesschoicegl_pipeline_settings_groupschema_MaterialShininess_TxsdGlPipelineSettingsGroupChoiceMaterialShininess_

	XsdGoPkgHasElem_color_maskchoicegl_pipeline_settings_groupschema_ColorMask_TxsdGlPipelineSettingsGroupChoiceColorMask_

	XsdGoPkgHasElem_model_view_matrixchoicegl_pipeline_settings_groupschema_ModelViewMatrix_TxsdGlPipelineSettingsGroupChoiceModelViewMatrix_

	XsdGoPkgHasElem_polygon_offsetchoicegl_pipeline_settings_groupschema_PolygonOffset_TxsdGlPipelineSettingsGroupChoicePolygonOffset_

	XsdGoPkgHasElem_texture2D_enablechoicegl_pipeline_settings_groupschema_Texture2DEnable_TxsdGlPipelineSettingsGroupChoiceTexture2DEnable_

	XsdGoPkgHasElem_light_spot_cutoffchoicegl_pipeline_settings_groupschema_LightSpotCutoff_TxsdGlPipelineSettingsGroupChoiceLightSpotCutoff_

	XsdGoPkgHasElem_shade_modelchoicegl_pipeline_settings_groupschema_ShadeModel_TxsdGlPipelineSettingsGroupChoiceShadeModel_

	XsdGoPkgHasElem_blend_funcchoicegl_pipeline_settings_groupschema_BlendFunc_TxsdGlPipelineSettingsGroupChoiceBlendFunc_

	XsdGoPkgHasElem_fog_densitychoicegl_pipeline_settings_groupschema_FogDensity_TxsdGlPipelineSettingsGroupChoiceFogDensity_

	XsdGoPkgHasElem_sample_coverage_enablechoicegl_pipeline_settings_groupschema_SampleCoverageEnable_TxsdGlPipelineSettingsGroupChoiceSampleCoverageEnable_

	XsdGoPkgHasElem_light_quadratic_attenuationchoicegl_pipeline_settings_groupschema_LightQuadraticAttenuation_TxsdGlPipelineSettingsGroupChoiceLightQuadraticAttenuation_

	XsdGoPkgHasElem_light_diffusechoicegl_pipeline_settings_groupschema_LightDiffuse_TxsdGlPipelineSettingsGroupChoiceLightDiffuse_

	XsdGoPkgHasElem_light_model_local_viewer_enablechoicegl_pipeline_settings_groupschema_LightModelLocalViewerEnable_TxsdGlPipelineSettingsGroupChoiceLightModelLocalViewerEnable_

	XsdGoPkgHasElem_dither_enablechoicegl_pipeline_settings_groupschema_DitherEnable_TxsdGlPipelineSettingsGroupChoiceDitherEnable_

	XsdGoPkgHasElem_line_stipplechoicegl_pipeline_settings_groupschema_LineStipple_TxsdGlPipelineSettingsGroupChoiceLineStipple_

	XsdGoPkgHasElem_polygon_stipple_enablechoicegl_pipeline_settings_groupschema_PolygonStippleEnable_TxsdGlPipelineSettingsGroupChoicePolygonStippleEnable_

	XsdGoPkgHasElem_stencil_op_separatechoicegl_pipeline_settings_groupschema_StencilOpSeparate_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparate_

	XsdGoPkgHasElem_fog_modechoicegl_pipeline_settings_groupschema_FogMode_TxsdGlPipelineSettingsGroupChoiceFogMode_

	XsdGoPkgHasElem_color_material_enablechoicegl_pipeline_settings_groupschema_ColorMaterialEnable_TxsdGlPipelineSettingsGroupChoiceColorMaterialEnable_

	XsdGoPkgHasElem_material_diffusechoicegl_pipeline_settings_groupschema_MaterialDiffuse_TxsdGlPipelineSettingsGroupChoiceMaterialDiffuse_

	XsdGoPkgHasElem_texture1D_enablechoicegl_pipeline_settings_groupschema_Texture1DEnable_TxsdGlPipelineSettingsGroupChoiceTexture1DEnable_

	XsdGoPkgHasElem_light_ambientchoicegl_pipeline_settings_groupschema_LightAmbient_TxsdGlPipelineSettingsGroupChoiceLightAmbient_

	XsdGoPkgHasElem_fog_colorchoicegl_pipeline_settings_groupschema_FogColor_TxsdGlPipelineSettingsGroupChoiceFogColor_

	XsdGoPkgHasElem_polygon_offset_point_enablechoicegl_pipeline_settings_groupschema_PolygonOffsetPointEnable_TxsdGlPipelineSettingsGroupChoicePolygonOffsetPointEnable_

	XsdGoPkgHasElem_polygon_modechoicegl_pipeline_settings_groupschema_PolygonMode_TxsdGlPipelineSettingsGroupChoicePolygonMode_

	XsdGoPkgHasElem_point_sizechoicegl_pipeline_settings_groupschema_PointSize_TxsdGlPipelineSettingsGroupChoicePointSize_

	XsdGoPkgHasElem_line_widthchoicegl_pipeline_settings_groupschema_LineWidth_TxsdGlPipelineSettingsGroupChoiceLineWidth_

	XsdGoPkgHasElem_blend_func_separatechoicegl_pipeline_settings_groupschema_BlendFuncSeparate_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparate_

	XsdGoPkgHasElem_light_positionchoicegl_pipeline_settings_groupschema_LightPosition_TxsdGlPipelineSettingsGroupChoiceLightPosition_

	XsdGoPkgHasElem_stencil_func_separatechoicegl_pipeline_settings_groupschema_StencilFuncSeparate_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparate_

	XsdGoPkgHasElem_depth_clamp_enablechoicegl_pipeline_settings_groupschema_DepthClampEnable_TxsdGlPipelineSettingsGroupChoiceDepthClampEnable_

	XsdGoPkgHasElem_textureCUBEchoicegl_pipeline_settings_groupschema_TextureCUBE_TxsdGlPipelineSettingsGroupChoiceTextureCUBE_

	XsdGoPkgHasElem_multisample_enablechoicegl_pipeline_settings_groupschema_MultisampleEnable_TxsdGlPipelineSettingsGroupChoiceMultisampleEnable_

	XsdGoPkgHasElem_textureCUBE_enablechoicegl_pipeline_settings_groupschema_TextureCUBEEnable_TxsdGlPipelineSettingsGroupChoiceTextureCUBEEnable_

	XsdGoPkgHasElem_textureDEPTHchoicegl_pipeline_settings_groupschema_TextureDEPTH_TxsdGlPipelineSettingsGroupChoiceTextureDEPTH_

	XsdGoPkgHasElem_light_linear_attenuationchoicegl_pipeline_settings_groupschema_LightLinearAttenuation_TxsdGlPipelineSettingsGroupChoiceLightLinearAttenuation_

	XsdGoPkgHasElem_depth_rangechoicegl_pipeline_settings_groupschema_DepthRange_TxsdGlPipelineSettingsGroupChoiceDepthRange_

	XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegl_pipeline_settings_groupschema_SampleAlphaToOneEnable_TxsdGlPipelineSettingsGroupChoiceSampleAlphaToOneEnable_

	XsdGoPkgHasElem_light_specularchoicegl_pipeline_settings_groupschema_LightSpecular_TxsdGlPipelineSettingsGroupChoiceLightSpecular_

	XsdGoPkgHasElem_texture1Dchoicegl_pipeline_settings_groupschema_Texture1D_TxsdGlPipelineSettingsGroupChoiceTexture1D_

	XsdGoPkgHasElem_point_smooth_enablechoicegl_pipeline_settings_groupschema_PointSmoothEnable_TxsdGlPipelineSettingsGroupChoicePointSmoothEnable_

	XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegl_pipeline_settings_groupschema_SampleAlphaToCoverageEnable_TxsdGlPipelineSettingsGroupChoiceSampleAlphaToCoverageEnable_

	XsdGoPkgHasElem_lighting_enablechoicegl_pipeline_settings_groupschema_LightingEnable_TxsdGlPipelineSettingsGroupChoiceLightingEnable_

	XsdGoPkgHasElem_fog_coord_srcchoicegl_pipeline_settings_groupschema_FogCoordSrc_TxsdGlPipelineSettingsGroupChoiceFogCoordSrc_

	XsdGoPkgHasElem_light_model_color_controlchoicegl_pipeline_settings_groupschema_LightModelColorControl_TxsdGlPipelineSettingsGroupChoiceLightModelColorControl_

	XsdGoPkgHasElem_normalize_enablechoicegl_pipeline_settings_groupschema_NormalizeEnable_TxsdGlPipelineSettingsGroupChoiceNormalizeEnable_

	XsdGoPkgHasElem_texture3D_enablechoicegl_pipeline_settings_groupschema_Texture3DEnable_TxsdGlPipelineSettingsGroupChoiceTexture3DEnable_

	XsdGoPkgHasElem_fog_startchoicegl_pipeline_settings_groupschema_FogStart_TxsdGlPipelineSettingsGroupChoiceFogStart_

	XsdGoPkgHasElem_depth_test_enablechoicegl_pipeline_settings_groupschema_DepthTestEnable_TxsdGlPipelineSettingsGroupChoiceDepthTestEnable_

	XsdGoPkgHasElem_depth_boundschoicegl_pipeline_settings_groupschema_DepthBounds_TxsdGlPipelineSettingsGroupChoiceDepthBounds_

	XsdGoPkgHasElem_texture2Dchoicegl_pipeline_settings_groupschema_Texture2D_TxsdGlPipelineSettingsGroupChoiceTexture2D_
}

//	If the WalkHandlers.XsdGoPkgHasGroup_GlPipelineSettingsGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_GlPipelineSettingsGroup instance as the single argument. Then calls the Walk() method on 104/104 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_GlPipelineSettingsGroup instance.
func (me *XsdGoPkgHasGroup_GlPipelineSettingsGroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasGroup_GlPipelineSettingsGroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_textureRECTchoicegl_pipeline_settings_groupschema_TextureRECT_TxsdGlPipelineSettingsGroupChoiceTextureRECT_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_spot_exponentchoicegl_pipeline_settings_groupschema_LightSpotExponent_TxsdGlPipelineSettingsGroupChoiceLightSpotExponent_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_texture3Dchoicegl_pipeline_settings_groupschema_Texture3D_TxsdGlPipelineSettingsGroupChoiceTexture3D_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_polygon_offset_fill_enablechoicegl_pipeline_settings_groupschema_PolygonOffsetFillEnable_TxsdGlPipelineSettingsGroupChoicePolygonOffsetFillEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_depth_funcchoicegl_pipeline_settings_groupschema_DepthFunc_TxsdGlPipelineSettingsGroupChoiceDepthFunc_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stencil_maskchoicegl_pipeline_settings_groupschema_StencilMask_TxsdGlPipelineSettingsGroupChoiceStencilMask_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_texture_env_modechoicegl_pipeline_settings_groupschema_TextureEnvMode_TxsdGlPipelineSettingsGroupChoiceTextureEnvMode_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_alpha_test_enablechoicegl_pipeline_settings_groupschema_AlphaTestEnable_TxsdGlPipelineSettingsGroupChoiceAlphaTestEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stencil_mask_separatechoicegl_pipeline_settings_groupschema_StencilMaskSeparate_TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparate_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fog_endchoicegl_pipeline_settings_groupschema_FogEnd_TxsdGlPipelineSettingsGroupChoiceFogEnd_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_rescale_normal_enablechoicegl_pipeline_settings_groupschema_RescaleNormalEnable_TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_blend_equationchoicegl_pipeline_settings_groupschema_BlendEquation_TxsdGlPipelineSettingsGroupChoiceBlendEquation_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_point_distance_attenuationchoicegl_pipeline_settings_groupschema_PointDistanceAttenuation_TxsdGlPipelineSettingsGroupChoicePointDistanceAttenuation_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_front_facechoicegl_pipeline_settings_groupschema_FrontFace_TxsdGlPipelineSettingsGroupChoiceFrontFace_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_alpha_funcchoicegl_pipeline_settings_groupschema_AlphaFunc_TxsdGlPipelineSettingsGroupChoiceAlphaFunc_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_scissorchoicegl_pipeline_settings_groupschema_Scissor_TxsdGlPipelineSettingsGroupChoiceScissor_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_point_size_minchoicegl_pipeline_settings_groupschema_PointSizeMin_TxsdGlPipelineSettingsGroupChoicePointSizeMin_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_depth_bounds_enablechoicegl_pipeline_settings_groupschema_DepthBoundsEnable_TxsdGlPipelineSettingsGroupChoiceDepthBoundsEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_material_ambientchoicegl_pipeline_settings_groupschema_MaterialAmbient_TxsdGlPipelineSettingsGroupChoiceMaterialAmbient_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_scissor_test_enablechoicegl_pipeline_settings_groupschema_ScissorTestEnable_TxsdGlPipelineSettingsGroupChoiceScissorTestEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_textureRECT_enablechoicegl_pipeline_settings_groupschema_TextureRECTEnable_TxsdGlPipelineSettingsGroupChoiceTextureRECTEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_logic_opchoicegl_pipeline_settings_groupschema_LogicOp_TxsdGlPipelineSettingsGroupChoiceLogicOp_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_cull_face_enablechoicegl_pipeline_settings_groupschema_CullFaceEnable_TxsdGlPipelineSettingsGroupChoiceCullFaceEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_depth_maskchoicegl_pipeline_settings_groupschema_DepthMask_TxsdGlPipelineSettingsGroupChoiceDepthMask_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_material_shininesschoicegl_pipeline_settings_groupschema_MaterialShininess_TxsdGlPipelineSettingsGroupChoiceMaterialShininess_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_color_maskchoicegl_pipeline_settings_groupschema_ColorMask_TxsdGlPipelineSettingsGroupChoiceColorMask_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_model_view_matrixchoicegl_pipeline_settings_groupschema_ModelViewMatrix_TxsdGlPipelineSettingsGroupChoiceModelViewMatrix_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_polygon_offsetchoicegl_pipeline_settings_groupschema_PolygonOffset_TxsdGlPipelineSettingsGroupChoicePolygonOffset_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_texture2D_enablechoicegl_pipeline_settings_groupschema_Texture2DEnable_TxsdGlPipelineSettingsGroupChoiceTexture2DEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_spot_cutoffchoicegl_pipeline_settings_groupschema_LightSpotCutoff_TxsdGlPipelineSettingsGroupChoiceLightSpotCutoff_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_shade_modelchoicegl_pipeline_settings_groupschema_ShadeModel_TxsdGlPipelineSettingsGroupChoiceShadeModel_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_blend_funcchoicegl_pipeline_settings_groupschema_BlendFunc_TxsdGlPipelineSettingsGroupChoiceBlendFunc_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fog_densitychoicegl_pipeline_settings_groupschema_FogDensity_TxsdGlPipelineSettingsGroupChoiceFogDensity_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sample_coverage_enablechoicegl_pipeline_settings_groupschema_SampleCoverageEnable_TxsdGlPipelineSettingsGroupChoiceSampleCoverageEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_quadratic_attenuationchoicegl_pipeline_settings_groupschema_LightQuadraticAttenuation_TxsdGlPipelineSettingsGroupChoiceLightQuadraticAttenuation_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_diffusechoicegl_pipeline_settings_groupschema_LightDiffuse_TxsdGlPipelineSettingsGroupChoiceLightDiffuse_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_model_local_viewer_enablechoicegl_pipeline_settings_groupschema_LightModelLocalViewerEnable_TxsdGlPipelineSettingsGroupChoiceLightModelLocalViewerEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_dither_enablechoicegl_pipeline_settings_groupschema_DitherEnable_TxsdGlPipelineSettingsGroupChoiceDitherEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_line_stipplechoicegl_pipeline_settings_groupschema_LineStipple_TxsdGlPipelineSettingsGroupChoiceLineStipple_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_polygon_stipple_enablechoicegl_pipeline_settings_groupschema_PolygonStippleEnable_TxsdGlPipelineSettingsGroupChoicePolygonStippleEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stencil_op_separatechoicegl_pipeline_settings_groupschema_StencilOpSeparate_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparate_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fog_modechoicegl_pipeline_settings_groupschema_FogMode_TxsdGlPipelineSettingsGroupChoiceFogMode_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_color_material_enablechoicegl_pipeline_settings_groupschema_ColorMaterialEnable_TxsdGlPipelineSettingsGroupChoiceColorMaterialEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_material_diffusechoicegl_pipeline_settings_groupschema_MaterialDiffuse_TxsdGlPipelineSettingsGroupChoiceMaterialDiffuse_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_texture1D_enablechoicegl_pipeline_settings_groupschema_Texture1DEnable_TxsdGlPipelineSettingsGroupChoiceTexture1DEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_ambientchoicegl_pipeline_settings_groupschema_LightAmbient_TxsdGlPipelineSettingsGroupChoiceLightAmbient_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fog_colorchoicegl_pipeline_settings_groupschema_FogColor_TxsdGlPipelineSettingsGroupChoiceFogColor_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_polygon_offset_point_enablechoicegl_pipeline_settings_groupschema_PolygonOffsetPointEnable_TxsdGlPipelineSettingsGroupChoicePolygonOffsetPointEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_polygon_modechoicegl_pipeline_settings_groupschema_PolygonMode_TxsdGlPipelineSettingsGroupChoicePolygonMode_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_point_sizechoicegl_pipeline_settings_groupschema_PointSize_TxsdGlPipelineSettingsGroupChoicePointSize_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_line_widthchoicegl_pipeline_settings_groupschema_LineWidth_TxsdGlPipelineSettingsGroupChoiceLineWidth_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_blend_func_separatechoicegl_pipeline_settings_groupschema_BlendFuncSeparate_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparate_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_positionchoicegl_pipeline_settings_groupschema_LightPosition_TxsdGlPipelineSettingsGroupChoiceLightPosition_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stencil_func_separatechoicegl_pipeline_settings_groupschema_StencilFuncSeparate_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparate_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_depth_clamp_enablechoicegl_pipeline_settings_groupschema_DepthClampEnable_TxsdGlPipelineSettingsGroupChoiceDepthClampEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_textureCUBEchoicegl_pipeline_settings_groupschema_TextureCUBE_TxsdGlPipelineSettingsGroupChoiceTextureCUBE_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_multisample_enablechoicegl_pipeline_settings_groupschema_MultisampleEnable_TxsdGlPipelineSettingsGroupChoiceMultisampleEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_textureCUBE_enablechoicegl_pipeline_settings_groupschema_TextureCUBEEnable_TxsdGlPipelineSettingsGroupChoiceTextureCUBEEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_textureDEPTHchoicegl_pipeline_settings_groupschema_TextureDEPTH_TxsdGlPipelineSettingsGroupChoiceTextureDEPTH_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_linear_attenuationchoicegl_pipeline_settings_groupschema_LightLinearAttenuation_TxsdGlPipelineSettingsGroupChoiceLightLinearAttenuation_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_depth_rangechoicegl_pipeline_settings_groupschema_DepthRange_TxsdGlPipelineSettingsGroupChoiceDepthRange_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegl_pipeline_settings_groupschema_SampleAlphaToOneEnable_TxsdGlPipelineSettingsGroupChoiceSampleAlphaToOneEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_specularchoicegl_pipeline_settings_groupschema_LightSpecular_TxsdGlPipelineSettingsGroupChoiceLightSpecular_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_texture1Dchoicegl_pipeline_settings_groupschema_Texture1D_TxsdGlPipelineSettingsGroupChoiceTexture1D_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_point_smooth_enablechoicegl_pipeline_settings_groupschema_PointSmoothEnable_TxsdGlPipelineSettingsGroupChoicePointSmoothEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegl_pipeline_settings_groupschema_SampleAlphaToCoverageEnable_TxsdGlPipelineSettingsGroupChoiceSampleAlphaToCoverageEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_lighting_enablechoicegl_pipeline_settings_groupschema_LightingEnable_TxsdGlPipelineSettingsGroupChoiceLightingEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fog_coord_srcchoicegl_pipeline_settings_groupschema_FogCoordSrc_TxsdGlPipelineSettingsGroupChoiceFogCoordSrc_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_model_color_controlchoicegl_pipeline_settings_groupschema_LightModelColorControl_TxsdGlPipelineSettingsGroupChoiceLightModelColorControl_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_normalize_enablechoicegl_pipeline_settings_groupschema_NormalizeEnable_TxsdGlPipelineSettingsGroupChoiceNormalizeEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_texture3D_enablechoicegl_pipeline_settings_groupschema_Texture3DEnable_TxsdGlPipelineSettingsGroupChoiceTexture3DEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fog_startchoicegl_pipeline_settings_groupschema_FogStart_TxsdGlPipelineSettingsGroupChoiceFogStart_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_depth_test_enablechoicegl_pipeline_settings_groupschema_DepthTestEnable_TxsdGlPipelineSettingsGroupChoiceDepthTestEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_depth_boundschoicegl_pipeline_settings_groupschema_DepthBounds_TxsdGlPipelineSettingsGroupChoiceDepthBounds_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_texture2Dchoicegl_pipeline_settings_groupschema_Texture2D_TxsdGlPipelineSettingsGroupChoiceTexture2D_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_projection_matrixchoicegl_pipeline_settings_groupschema_ProjectionMatrix_TxsdGlPipelineSettingsGroupChoiceProjectionMatrix_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fog_enablechoicegl_pipeline_settings_groupschema_FogEnable_TxsdGlPipelineSettingsGroupChoiceFogEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_material_specularchoicegl_pipeline_settings_groupschema_MaterialSpecular_TxsdGlPipelineSettingsGroupChoiceMaterialSpecular_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_blend_enablechoicegl_pipeline_settings_groupschema_BlendEnable_TxsdGlPipelineSettingsGroupChoiceBlendEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_polygon_smooth_enablechoicegl_pipeline_settings_groupschema_PolygonSmoothEnable_TxsdGlPipelineSettingsGroupChoicePolygonSmoothEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_line_stipple_enablechoicegl_pipeline_settings_groupschema_LineStippleEnable_TxsdGlPipelineSettingsGroupChoiceLineStippleEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_color_logic_op_enablechoicegl_pipeline_settings_groupschema_ColorLogicOpEnable_TxsdGlPipelineSettingsGroupChoiceColorLogicOpEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_clip_plane_enablechoicegl_pipeline_settings_groupschema_ClipPlaneEnable_TxsdGlPipelineSettingsGroupChoiceClipPlaneEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_material_emissionchoicegl_pipeline_settings_groupschema_MaterialEmission_TxsdGlPipelineSettingsGroupChoiceMaterialEmission_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_model_ambientchoicegl_pipeline_settings_groupschema_LightModelAmbient_TxsdGlPipelineSettingsGroupChoiceLightModelAmbient_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_cull_facechoicegl_pipeline_settings_groupschema_CullFace_TxsdGlPipelineSettingsGroupChoiceCullFace_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_blend_colorchoicegl_pipeline_settings_groupschema_BlendColor_TxsdGlPipelineSettingsGroupChoiceBlendColor_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_model_two_side_enablechoicegl_pipeline_settings_groupschema_LightModelTwoSideEnable_TxsdGlPipelineSettingsGroupChoiceLightModelTwoSideEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stencil_test_enablechoicegl_pipeline_settings_groupschema_StencilTestEnable_TxsdGlPipelineSettingsGroupChoiceStencilTestEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_polygon_offset_line_enablechoicegl_pipeline_settings_groupschema_PolygonOffsetLineEnable_TxsdGlPipelineSettingsGroupChoicePolygonOffsetLineEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_spot_directionchoicegl_pipeline_settings_groupschema_LightSpotDirection_TxsdGlPipelineSettingsGroupChoiceLightSpotDirection_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_clip_planechoicegl_pipeline_settings_groupschema_ClipPlane_TxsdGlPipelineSettingsGroupChoiceClipPlane_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stencil_funcchoicegl_pipeline_settings_groupschema_StencilFunc_TxsdGlPipelineSettingsGroupChoiceStencilFunc_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_point_size_maxchoicegl_pipeline_settings_groupschema_PointSizeMax_TxsdGlPipelineSettingsGroupChoicePointSizeMax_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_enablechoicegl_pipeline_settings_groupschema_LightEnable_TxsdGlPipelineSettingsGroupChoiceLightEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_point_fade_threshold_sizechoicegl_pipeline_settings_groupschema_PointFadeThresholdSize_TxsdGlPipelineSettingsGroupChoicePointFadeThresholdSize_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_line_smooth_enablechoicegl_pipeline_settings_groupschema_LineSmoothEnable_TxsdGlPipelineSettingsGroupChoiceLineSmoothEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_textureDEPTH_enablechoicegl_pipeline_settings_groupschema_TextureDEPTHEnable_TxsdGlPipelineSettingsGroupChoiceTextureDEPTHEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_logic_op_enablechoicegl_pipeline_settings_groupschema_LogicOpEnable_TxsdGlPipelineSettingsGroupChoiceLogicOpEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_constant_attenuationchoicegl_pipeline_settings_groupschema_LightConstantAttenuation_TxsdGlPipelineSettingsGroupChoiceLightConstantAttenuation_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_blend_equation_separatechoicegl_pipeline_settings_groupschema_BlendEquationSeparate_TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparate_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stencil_opchoicegl_pipeline_settings_groupschema_StencilOp_TxsdGlPipelineSettingsGroupChoiceStencilOp_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_texture_env_colorchoicegl_pipeline_settings_groupschema_TextureEnvColor_TxsdGlPipelineSettingsGroupChoiceTextureEnvColor_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_color_materialchoicegl_pipeline_settings_groupschema_ColorMaterial_TxsdGlPipelineSettingsGroupChoiceColorMaterial_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceStates struct {
	XsdGoPkgHasGroup_GlPipelineSettingsGroup
}

//	If the WalkHandlers.TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceStates function is not nil (ie. was set by outside code), calls it with this TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceStates instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceStates instance.
func (me *TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceStates) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceStates; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasGroup_GlPipelineSettingsGroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_statessequencepasssequencetechniquesequenceprofile_glsl_typeschema_States_TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceStates_ struct {
	States *TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceStates `xml:"http://www.collada.org/2008/03/COLLADASchema states"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_statessequencepasssequencetechniquesequenceprofile_glsl_typeschema_States_TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceStates_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_statessequencepasssequencetechniquesequenceprofile_glsl_typeschema_States_TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceStates_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_statessequencepasssequencetechniquesequenceprofile_glsl_typeschema_States_TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceStates_ instance.
func (me *XsdGoPkgHasElem_statessequencepasssequencetechniquesequenceprofile_glsl_typeschema_States_TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceStates_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_statessequencepasssequencetechniquesequenceprofile_glsl_typeschema_States_TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceStates_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.States.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	a program is one or more shaders linked together
//	Bind attributes.  If not bound then it is assumed to be the same semantic as the variable name.  If the variable name is prefixed with "gl_" or "sv_" then the prefix may be ignored.
//	shader variable name
type XsdGoPkgHasAttr_Symbol_XsdtToken_ struct {
	//	shader variable name
	Symbol xsdt.Token `xml:"http://www.collada.org/2008/03/COLLADASchema symbol,attr"`
}

//	Bind attributes to semantics to enable semantic association to attributes that are not redeclared as parameters.  Without this, the semantic is the same as the attribute's name.
type XsdGoPkgHasElem_semanticchoicebind_attributesequenceglsl_program_typeschema_Semantic_XsdtToken_ struct {
	//	Bind attributes to semantics to enable semantic association to attributes that are not redeclared as parameters.  Without this, the semantic is the same as the attribute's name.
	Semantic xsdt.Token `xml:"http://www.collada.org/2008/03/COLLADASchema semantic"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_semanticchoicebind_attributesequenceglsl_program_typeschema_Semantic_XsdtToken_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_semanticchoicebind_attributesequenceglsl_program_typeschema_Semantic_XsdtToken_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_semanticchoicebind_attributesequenceglsl_program_typeschema_Semantic_XsdtToken_ instance.
func (me *XsdGoPkgHasElem_semanticchoicebind_attributesequenceglsl_program_typeschema_Semantic_XsdtToken_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_semanticchoicebind_attributesequenceglsl_program_typeschema_Semantic_XsdtToken_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlslProgramTypeSequenceBindAttribute struct {
	//	shader variable name
	XsdGoPkgHasAttr_Symbol_XsdtToken_

	//	Bind attributes to semantics to enable semantic association to attributes that are not redeclared as parameters.  Without this, the semantic is the same as the attribute's name.
	XsdGoPkgHasElem_semanticchoicebind_attributesequenceglsl_program_typeschema_Semantic_XsdtToken_
}

//	If the WalkHandlers.TxsdGlslProgramTypeSequenceBindAttribute function is not nil (ie. was set by outside code), calls it with this TxsdGlslProgramTypeSequenceBindAttribute instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TxsdGlslProgramTypeSequenceBindAttribute instance.
func (me *TxsdGlslProgramTypeSequenceBindAttribute) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlslProgramTypeSequenceBindAttribute; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_semanticchoicebind_attributesequenceglsl_program_typeschema_Semantic_XsdtToken_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_bind_attributesequenceglsl_program_typeschema_BindAttribute_TxsdGlslProgramTypeSequenceBindAttribute_ struct {
	//	Bind attributes.  If not bound then it is assumed to be the same semantic as the variable name.  If the variable name is prefixed with "gl_" or "sv_" then the prefix may be ignored.
	BindAttributes []*TxsdGlslProgramTypeSequenceBindAttribute `xml:"http://www.collada.org/2008/03/COLLADASchema bind_attribute"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_bind_attributesequenceglsl_program_typeschema_BindAttribute_TxsdGlslProgramTypeSequenceBindAttribute_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_bind_attributesequenceglsl_program_typeschema_BindAttribute_TxsdGlslProgramTypeSequenceBindAttribute_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_bind_attributesequenceglsl_program_typeschema_BindAttribute_TxsdGlslProgramTypeSequenceBindAttribute_ instance.
func (me *XsdGoPkgHasElems_bind_attributesequenceglsl_program_typeschema_BindAttribute_TxsdGlslProgramTypeSequenceBindAttribute_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_bind_attributesequenceglsl_program_typeschema_BindAttribute_TxsdGlslProgramTypeSequenceBindAttribute_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BindAttributes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	compile shader stages
//	Identify code fragments and bind their parameters to effect parameters to identify how their values will be filled in
//	sid of the code or include element which provides the source for this shader.  Code may come from local or library_code.
//	this is allows you to include some code right here....like a #define for an uber shader that is imported
type XsdGoPkgHasElems_inlinechoicesequencefx_sources_typeschema_Inline_XsdtString_ struct {
	//	this is allows you to include some code right here....like a #define for an uber shader that is imported
	Inlines []xsdt.String `xml:"http://www.collada.org/2008/03/COLLADASchema inline"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_inlinechoicesequencefx_sources_typeschema_Inline_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_inlinechoicesequencefx_sources_typeschema_Inline_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_inlinechoicesequencefx_sources_typeschema_Inline_XsdtString_ instance.
func (me *XsdGoPkgHasElems_inlinechoicesequencefx_sources_typeschema_Inline_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_inlinechoicesequencefx_sources_typeschema_Inline_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Ref attribute identifies the sid of a code or include element
type XsdGoPkgHasElems_importchoicesequencefx_sources_typeschema_Import_TxsdFxSourcesTypeSequenceChoiceImport_ struct {
	//	Ref attribute identifies the sid of a code or include element
	Imports []*TkinematicsConnectParamType `xml:"http://www.collada.org/2008/03/COLLADASchema import"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_importchoicesequencefx_sources_typeschema_Import_TxsdFxSourcesTypeSequenceChoiceImport_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_importchoicesequencefx_sources_typeschema_Import_TxsdFxSourcesTypeSequenceChoiceImport_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_importchoicesequencefx_sources_typeschema_Import_TxsdFxSourcesTypeSequenceChoiceImport_ instance.
func (me *XsdGoPkgHasElems_importchoicesequencefx_sources_typeschema_Import_TxsdFxSourcesTypeSequenceChoiceImport_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_importchoicesequencefx_sources_typeschema_Import_TxsdFxSourcesTypeSequenceChoiceImport_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Imports {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TfxSourcesType struct {
	//	this is allows you to include some code right here....like a #define for an uber shader that is imported
	XsdGoPkgHasElems_inlinechoicesequencefx_sources_typeschema_Inline_XsdtString_

	//	Ref attribute identifies the sid of a code or include element
	XsdGoPkgHasElems_importchoicesequencefx_sources_typeschema_Import_TxsdFxSourcesTypeSequenceChoiceImport_
}

//	If the WalkHandlers.TfxSourcesType function is not nil (ie. was set by outside code), calls it with this TfxSourcesType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TfxSourcesType instance.
func (me *TfxSourcesType) Walk() (err error) {
	if fn := WalkHandlers.TfxSourcesType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_inlinechoicesequencefx_sources_typeschema_Inline_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_importchoicesequencefx_sources_typeschema_Import_TxsdFxSourcesTypeSequenceChoiceImport_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_sourcessequenceglsl_shader_typeschema_Sources_TfxSourcesType_ struct {
	//	sid of the code or include element which provides the source for this shader.  Code may come from local or library_code.
	Sources *TfxSourcesType `xml:"http://www.collada.org/2008/03/COLLADASchema sources"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sourcessequenceglsl_shader_typeschema_Sources_TfxSourcesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sourcessequenceglsl_shader_typeschema_Sources_TfxSourcesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sourcessequenceglsl_shader_typeschema_Sources_TfxSourcesType_ instance.
func (me *XsdGoPkgHasElem_sourcessequenceglsl_shader_typeschema_Sources_TfxSourcesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sourcessequenceglsl_shader_typeschema_Sources_TfxSourcesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Sources.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	GPU Pipeline stage for this programmable shader. Current standards are VERTEX (vertex shader), FRAGMENT (pixel or fragment shader).  These are recognized by both GLSL and CG
type TfxPipelineStageEnum xsdt.String

//	This convenience method just performs a simple type conversion to TfxPipelineStageEnum's alias type xsdt.String.
func (me TfxPipelineStageEnum) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TfxPipelineStageEnum is "GEOMETRY".
func (me TfxPipelineStageEnum) IsGeometry() bool { return me == "GEOMETRY" }

//	Returns true if the value of this enumerated TfxPipelineStageEnum is "TESSELLATION".
func (me TfxPipelineStageEnum) IsTessellation() bool { return me == "TESSELLATION" }

//	Returns true if the value of this enumerated TfxPipelineStageEnum is "VERTEX".
func (me TfxPipelineStageEnum) IsVertex() bool { return me == "VERTEX" }

//	Returns true if the value of this enumerated TfxPipelineStageEnum is "FRAGMENT".
func (me TfxPipelineStageEnum) IsFragment() bool { return me == "FRAGMENT" }

//	Since TfxPipelineStageEnum is just a simple String type, this merely returns the current string value.
func (me TfxPipelineStageEnum) String() string { return xsdt.String(me).String() }

//	Since TfxPipelineStageEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxPipelineStageEnum) Set(s string) { (*xsdt.String)(me).Set(s) }

type XsdGoPkgHasAttr_Stage_TfxPipelineStageEnum_ struct {
	//	GPU Pipeline stage for this programmable shader. Current standards are VERTEX (vertex shader), FRAGMENT (pixel or fragment shader).  These are recognized by both GLSL and CG
	Stage TfxPipelineStageEnum `xml:"http://www.collada.org/2008/03/COLLADASchema stage,attr"`
}

type TglslShaderType struct {
	//	sid of the code or include element which provides the source for this shader.  Code may come from local or library_code.
	XsdGoPkgHasElem_sourcessequenceglsl_shader_typeschema_Sources_TfxSourcesType_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	GPU Pipeline stage for this programmable shader. Current standards are VERTEX (vertex shader), FRAGMENT (pixel or fragment shader).  These are recognized by both GLSL and CG
	XsdGoPkgHasAttr_Stage_TfxPipelineStageEnum_
}

//	If the WalkHandlers.TglslShaderType function is not nil (ie. was set by outside code), calls it with this TglslShaderType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TglslShaderType instance.
func (me *TglslShaderType) Walk() (err error) {
	if fn := WalkHandlers.TglslShaderType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sourcessequenceglsl_shader_typeschema_Sources_TfxSourcesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_shadersequenceglsl_program_typeschema_Shader_TglslShaderType_ struct {
	//	compile shader stages
	Shaders []*TglslShaderType `xml:"http://www.collada.org/2008/03/COLLADASchema shader"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_shadersequenceglsl_program_typeschema_Shader_TglslShaderType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_shadersequenceglsl_program_typeschema_Shader_TglslShaderType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_shadersequenceglsl_program_typeschema_Shader_TglslShaderType_ instance.
func (me *XsdGoPkgHasElems_shadersequenceglsl_program_typeschema_Shader_TglslShaderType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_shadersequenceglsl_program_typeschema_Shader_TglslShaderType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Shaders {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Bind uniforms and samplers
//	Bind uniforms to parameters
//	A reference to the technique to use for the specified platform.
type XsdGoPkgHasAttr_Ref_XsdtNCName_ struct {
	//	A reference to the technique to use for the specified platform.
	Ref xsdt.NCName `xml:"http://www.collada.org/2008/03/COLLADASchema ref,attr"`
}

type TxsdGlslProgramTypeSequenceBindUniformChoiceParam struct {
	//	SID of parameter
	XsdGoPkgHasAttr_Ref_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlslProgramTypeSequenceBindUniformChoiceParam function is not nil (ie. was set by outside code), calls it with this TxsdGlslProgramTypeSequenceBindUniformChoiceParam instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TxsdGlslProgramTypeSequenceBindUniformChoiceParam instance.
func (me *TxsdGlslProgramTypeSequenceBindUniformChoiceParam) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlslProgramTypeSequenceBindUniformChoiceParam; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_paramchoicebind_uniformsequenceglsl_program_typeschema_Param_TxsdGlslProgramTypeSequenceBindUniformChoiceParam_ struct {
	//	Bind uniforms to parameters
	Param *TxsdGlslProgramTypeSequenceBindUniformChoiceParam `xml:"http://www.collada.org/2008/03/COLLADASchema param"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_paramchoicebind_uniformsequenceglsl_program_typeschema_Param_TxsdGlslProgramTypeSequenceBindUniformChoiceParam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_paramchoicebind_uniformsequenceglsl_program_typeschema_Param_TxsdGlslProgramTypeSequenceBindUniformChoiceParam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_paramchoicebind_uniformsequenceglsl_program_typeschema_Param_TxsdGlslProgramTypeSequenceBindUniformChoiceParam_ instance.
func (me *XsdGoPkgHasElem_paramchoicebind_uniformsequenceglsl_program_typeschema_Param_TxsdGlslProgramTypeSequenceBindUniformChoiceParam_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_paramchoicebind_uniformsequenceglsl_program_typeschema_Param_TxsdGlslProgramTypeSequenceBindUniformChoiceParam_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Param.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlslProgramTypeSequenceBindUniform struct {
	//	Bind uniforms to parameters
	XsdGoPkgHasElem_paramchoicebind_uniformsequenceglsl_program_typeschema_Param_TxsdGlslProgramTypeSequenceBindUniformChoiceParam_

	XsdGoPkgHasGroup_GlslValueGroup

	//	shader variable name
	XsdGoPkgHasAttr_Symbol_XsdtToken_
}

//	If the WalkHandlers.TxsdGlslProgramTypeSequenceBindUniform function is not nil (ie. was set by outside code), calls it with this TxsdGlslProgramTypeSequenceBindUniform instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TxsdGlslProgramTypeSequenceBindUniform instance.
func (me *TxsdGlslProgramTypeSequenceBindUniform) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlslProgramTypeSequenceBindUniform; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_paramchoicebind_uniformsequenceglsl_program_typeschema_Param_TxsdGlslProgramTypeSequenceBindUniformChoiceParam_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroup_GlslValueGroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_bind_uniformsequenceglsl_program_typeschema_BindUniform_TxsdGlslProgramTypeSequenceBindUniform_ struct {
	//	Bind uniforms and samplers
	BindUniforms []*TxsdGlslProgramTypeSequenceBindUniform `xml:"http://www.collada.org/2008/03/COLLADASchema bind_uniform"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_bind_uniformsequenceglsl_program_typeschema_BindUniform_TxsdGlslProgramTypeSequenceBindUniform_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_bind_uniformsequenceglsl_program_typeschema_BindUniform_TxsdGlslProgramTypeSequenceBindUniform_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_bind_uniformsequenceglsl_program_typeschema_BindUniform_TxsdGlslProgramTypeSequenceBindUniform_ instance.
func (me *XsdGoPkgHasElems_bind_uniformsequenceglsl_program_typeschema_BindUniform_TxsdGlslProgramTypeSequenceBindUniform_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_bind_uniformsequenceglsl_program_typeschema_BindUniform_TxsdGlslProgramTypeSequenceBindUniform_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BindUniforms {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglslProgramType struct {
	//	Bind uniforms and samplers
	XsdGoPkgHasElems_bind_uniformsequenceglsl_program_typeschema_BindUniform_TxsdGlslProgramTypeSequenceBindUniform_

	//	Bind attributes.  If not bound then it is assumed to be the same semantic as the variable name.  If the variable name is prefixed with "gl_" or "sv_" then the prefix may be ignored.
	XsdGoPkgHasElems_bind_attributesequenceglsl_program_typeschema_BindAttribute_TxsdGlslProgramTypeSequenceBindAttribute_

	//	compile shader stages
	XsdGoPkgHasElems_shadersequenceglsl_program_typeschema_Shader_TglslShaderType_
}

//	If the WalkHandlers.TglslProgramType function is not nil (ie. was set by outside code), calls it with this TglslProgramType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TglslProgramType instance.
func (me *TglslProgramType) Walk() (err error) {
	if fn := WalkHandlers.TglslProgramType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_shadersequenceglsl_program_typeschema_Shader_TglslShaderType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_bind_uniformsequenceglsl_program_typeschema_BindUniform_TxsdGlslProgramTypeSequenceBindUniform_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_bind_attributesequenceglsl_program_typeschema_BindAttribute_TxsdGlslProgramTypeSequenceBindAttribute_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_programsequencepasssequencetechniquesequenceprofile_glsl_typeschema_Program_TglslProgramType_ struct {
	Program *TglslProgramType `xml:"http://www.collada.org/2008/03/COLLADASchema program"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_programsequencepasssequencetechniquesequenceprofile_glsl_typeschema_Program_TglslProgramType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_programsequencepasssequencetechniquesequenceprofile_glsl_typeschema_Program_TglslProgramType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_programsequencepasssequencetechniquesequenceprofile_glsl_typeschema_Program_TglslProgramType_ instance.
func (me *XsdGoPkgHasElem_programsequencepasssequencetechniquesequenceprofile_glsl_typeschema_Program_TglslProgramType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_programsequencepasssequencetechniquesequenceprofile_glsl_typeschema_Program_TglslProgramType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Program.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProfileGlslTypeSequenceTechniqueSequencePass struct {
	XsdGoPkgHasElems_annotatesequenceglsl_newparam_typeschema_Annotate_TfxAnnotateType_

	XsdGoPkgHasElem_statessequencepasssequencetechniquesequenceprofile_glsl_typeschema_States_TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceStates_

	XsdGoPkgHasElem_programsequencepasssequencetechniquesequenceprofile_glsl_typeschema_Program_TglslProgramType_

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_TsidType_

	XsdGoPkgHasElem_evaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_Evaluate_TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceEvaluate_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_
}

//	If the WalkHandlers.TxsdProfileGlslTypeSequenceTechniqueSequencePass function is not nil (ie. was set by outside code), calls it with this TxsdProfileGlslTypeSequenceTechniqueSequencePass instance as the single argument. Then calls the Walk() method on 5/6 embed(s) and 0/0 field(s) belonging to this TxsdProfileGlslTypeSequenceTechniqueSequencePass instance.
func (me *TxsdProfileGlslTypeSequenceTechniqueSequencePass) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileGlslTypeSequenceTechniqueSequencePass; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_annotatesequenceglsl_newparam_typeschema_Annotate_TfxAnnotateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_statessequencepasssequencetechniquesequenceprofile_glsl_typeschema_States_TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceStates_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_programsequencepasssequencetechniquesequenceprofile_glsl_typeschema_Program_TglslProgramType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_evaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_Evaluate_TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceEvaluate_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_passsequencetechniquesequenceprofile_glsl_typeschema_Pass_TxsdProfileGlslTypeSequenceTechniqueSequencePass_ struct {
	//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
	Passes []*TxsdProfileGlslTypeSequenceTechniqueSequencePass `xml:"http://www.collada.org/2008/03/COLLADASchema pass"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_passsequencetechniquesequenceprofile_glsl_typeschema_Pass_TxsdProfileGlslTypeSequenceTechniqueSequencePass_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_passsequencetechniquesequenceprofile_glsl_typeschema_Pass_TxsdProfileGlslTypeSequenceTechniqueSequencePass_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_passsequencetechniquesequenceprofile_glsl_typeschema_Pass_TxsdProfileGlslTypeSequenceTechniqueSequencePass_ instance.
func (me *XsdGoPkgHasElems_passsequencetechniquesequenceprofile_glsl_typeschema_Pass_TxsdProfileGlslTypeSequenceTechniqueSequencePass_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_passsequencetechniquesequenceprofile_glsl_typeschema_Pass_TxsdProfileGlslTypeSequenceTechniqueSequencePass_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Passes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProfileGlslTypeSequenceTechnique struct {
	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_TsidType_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	XsdGoPkgHasElems_annotatesequenceglsl_newparam_typeschema_Annotate_TfxAnnotateType_

	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
	XsdGoPkgHasElems_passsequencetechniquesequenceprofile_glsl_typeschema_Pass_TxsdProfileGlslTypeSequenceTechniqueSequencePass_
}

//	If the WalkHandlers.TxsdProfileGlslTypeSequenceTechnique function is not nil (ie. was set by outside code), calls it with this TxsdProfileGlslTypeSequenceTechnique instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TxsdProfileGlslTypeSequenceTechnique instance.
func (me *TxsdProfileGlslTypeSequenceTechnique) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileGlslTypeSequenceTechnique; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_annotatesequenceglsl_newparam_typeschema_Annotate_TfxAnnotateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_passsequencetechniquesequenceprofile_glsl_typeschema_Pass_TxsdProfileGlslTypeSequenceTechniqueSequencePass_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_techniquesequenceprofile_glsl_typeschema_Technique_TxsdProfileGlslTypeSequenceTechnique_ struct {
	//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
	Techniques []*TxsdProfileGlslTypeSequenceTechnique `xml:"http://www.collada.org/2008/03/COLLADASchema technique"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_techniquesequenceprofile_glsl_typeschema_Technique_TxsdProfileGlslTypeSequenceTechnique_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_techniquesequenceprofile_glsl_typeschema_Technique_TxsdProfileGlslTypeSequenceTechnique_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_techniquesequenceprofile_glsl_typeschema_Technique_TxsdProfileGlslTypeSequenceTechnique_ instance.
func (me *XsdGoPkgHasElems_techniquesequenceprofile_glsl_typeschema_Technique_TxsdProfileGlslTypeSequenceTechnique_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_techniquesequenceprofile_glsl_typeschema_Technique_TxsdProfileGlslTypeSequenceTechnique_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Techniques {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The fx_code_common type allows you to specify an inline block of source code.
type TfxCodeType struct {
	XsdGoPkgValue xsdt.String `xml:",chardata"`

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_TsidType_
}

//	If the WalkHandlers.TfxCodeType function is not nil (ie. was set by outside code), calls it with this TfxCodeType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TfxCodeType instance.
func (me *TfxCodeType) Walk() (err error) {
	if fn := WalkHandlers.TfxCodeType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TfxCodeType) ToXsdtString() xsdt.String { return me.XsdGoPkgValue }

type XsdGoPkgHasElems_codechoicesequenceprofile_glsl_typeschema_Code_TfxCodeType_ struct {
	Codes []*TfxCodeType `xml:"http://www.collada.org/2008/03/COLLADASchema code"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_codechoicesequenceprofile_glsl_typeschema_Code_TfxCodeType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_codechoicesequenceprofile_glsl_typeschema_Code_TfxCodeType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_codechoicesequenceprofile_glsl_typeschema_Code_TfxCodeType_ instance.
func (me *XsdGoPkgHasElems_codechoicesequenceprofile_glsl_typeschema_Code_TfxCodeType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_codechoicesequenceprofile_glsl_typeschema_Code_TfxCodeType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Codes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The type of platform. This is a vendor-defined character string that indicates the platform or capability target for the technique. Optional
type XsdGoPkgHasAttr_Platform_XsdtNCName_Pc struct {
	//	The type of platform. This is a vendor-defined character string that indicates the platform or capability target for the technique. Optional
	Platform xsdt.NCName `xml:"http://www.collada.org/2008/03/COLLADASchema platform,attr"`
}

//	Returns the default value for Platform -- "PC"
func (me XsdGoPkgHasAttr_Platform_XsdtNCName_Pc) PlatformDefault() xsdt.NCName {
	return xsdt.NCName("PC")
}

//	The include element is used to import source code or precompiled binary shaders into the FX Runtime by referencing an external resource.
type TfxIncludeType struct {
	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_TsidType_

	//	The url attribute refers to resource.  This may refer to a local resource using a relative URL
	//	fragment identifier that begins with the "#" character. The url attribute may refer to an external
	//	resource using an absolute or relative URL.
	XsdGoPkgHasAttr_Url_XsdtAnyURI_
}

//	If the WalkHandlers.TfxIncludeType function is not nil (ie. was set by outside code), calls it with this TfxIncludeType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TfxIncludeType instance.
func (me *TfxIncludeType) Walk() (err error) {
	if fn := WalkHandlers.TfxIncludeType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_includechoicesequenceprofile_glsl_typeschema_Include_TfxIncludeType_ struct {
	Includes []*TfxIncludeType `xml:"http://www.collada.org/2008/03/COLLADASchema include"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_includechoicesequenceprofile_glsl_typeschema_Include_TfxIncludeType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_includechoicesequenceprofile_glsl_typeschema_Include_TfxIncludeType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_includechoicesequenceprofile_glsl_typeschema_Include_TfxIncludeType_ instance.
func (me *XsdGoPkgHasElems_includechoicesequenceprofile_glsl_typeschema_Include_TfxIncludeType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_includechoicesequenceprofile_glsl_typeschema_Include_TfxIncludeType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Includes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TprofileGlslType struct {
	XsdGoPkgHasElems_newparamsequenceprofile_glsl_typeschema_Newparam_TglslNewparamType_

	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
	XsdGoPkgHasElems_techniquesequenceprofile_glsl_typeschema_Technique_TxsdProfileGlslTypeSequenceTechnique_

	XsdGoPkgHasElems_codechoicesequenceprofile_glsl_typeschema_Code_TfxCodeType_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The type of platform. This is a vendor-defined character string that indicates the platform or capability target for the technique. Optional
	XsdGoPkgHasAttr_Platform_XsdtNCName_Pc

	XsdGoPkgHasElems_includechoicesequenceprofile_glsl_typeschema_Include_TfxIncludeType_
}

//	If the WalkHandlers.TprofileGlslType function is not nil (ie. was set by outside code), calls it with this TprofileGlslType instance as the single argument. Then calls the Walk() method on 6/8 embed(s) and 0/0 field(s) belonging to this TprofileGlslType instance.
func (me *TprofileGlslType) Walk() (err error) {
	if fn := WalkHandlers.TprofileGlslType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_includechoicesequenceprofile_glsl_typeschema_Include_TfxIncludeType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_newparamsequenceprofile_glsl_typeschema_Newparam_TglslNewparamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_techniquesequenceprofile_glsl_typeschema_Technique_TxsdProfileGlslTypeSequenceTechnique_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_codechoicesequenceprofile_glsl_typeschema_Code_TfxCodeType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_profile_GLSLchoicefx_profile_groupschema_ProfileGlsl_TprofileGlslType_ struct {
	ProfileGlsl *TprofileGlslType `xml:"http://www.collada.org/2008/03/COLLADASchema profile_GLSL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_profile_GLSLchoicefx_profile_groupschema_ProfileGlsl_TprofileGlslType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_profile_GLSLchoicefx_profile_groupschema_ProfileGlsl_TprofileGlslType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_profile_GLSLchoicefx_profile_groupschema_ProfileGlsl_TprofileGlslType_ instance.
func (me *XsdGoPkgHasElem_profile_GLSLchoicefx_profile_groupschema_ProfileGlsl_TprofileGlslType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_profile_GLSLchoicefx_profile_groupschema_ProfileGlsl_TprofileGlslType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ProfileGlsl.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Opens a block of COMMON platform-specific data types and technique declarations.
type TfxCommonNewparamType struct {
	XsdGoPkgHasElem_float2choicefx_annotate_groupschema_Float2_Tfloat2Type_

	XsdGoPkgHasElem_semanticsequenceglsl_newparam_typeschema_Semantic_XsdtNCName_

	XsdGoPkgHasElem_floatchoicekinematics_newparam_typeschema_Float_TfloatType_

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_TsidType_

	XsdGoPkgHasElem_float3choicefx_annotate_groupschema_Float3_Tfloat3Type_

	XsdGoPkgHasElem_float4choicefx_annotate_groupschema_Float4_Tfloat4Type_

	XsdGoPkgHasElem_sampler2Dchoiceglsl_value_groupschema_Sampler2D_TfxSampler2DType_
}

//	If the WalkHandlers.TfxCommonNewparamType function is not nil (ie. was set by outside code), calls it with this TfxCommonNewparamType instance as the single argument. Then calls the Walk() method on 6/7 embed(s) and 0/0 field(s) belonging to this TfxCommonNewparamType instance.
func (me *TfxCommonNewparamType) Walk() (err error) {
	if fn := WalkHandlers.TfxCommonNewparamType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_sampler2Dchoiceglsl_value_groupschema_Sampler2D_TfxSampler2DType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2choicefx_annotate_groupschema_Float2_Tfloat2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_semanticsequenceglsl_newparam_typeschema_Semantic_XsdtNCName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_floatchoicekinematics_newparam_typeschema_Float_TfloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3choicefx_annotate_groupschema_Float3_Tfloat3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4choicefx_annotate_groupschema_Float4_Tfloat4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_newparamsequenceprofile_common_typeschema_Newparam_TfxCommonNewparamType_ struct {
	Newparams []*TfxCommonNewparamType `xml:"http://www.collada.org/2008/03/COLLADASchema newparam"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_newparamsequenceprofile_common_typeschema_Newparam_TfxCommonNewparamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_newparamsequenceprofile_common_typeschema_Newparam_TfxCommonNewparamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_newparamsequenceprofile_common_typeschema_Newparam_TfxCommonNewparamType_ instance.
func (me *XsdGoPkgHasElems_newparamsequenceprofile_common_typeschema_Newparam_TfxCommonNewparamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_newparamsequenceprofile_common_typeschema_Newparam_TfxCommonNewparamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Newparams {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
type TxsdFxCommonFloatOrParamTypeChoiceFloat struct {
	XsdGoPkgValue TfloatType `xml:",chardata"`

	XsdGoPkgHasAttr_Sid_TsidType_
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TxsdFxCommonFloatOrParamTypeChoiceFloat) ToTfloatType() TfloatType { return me.XsdGoPkgValue }

//	Returns the value of its XsdGoPkgValue field as a xsdt.Double (which TfloatType is just aliasing).
func (me *TxsdFxCommonFloatOrParamTypeChoiceFloat) ToXsdtDouble() xsdt.Double {
	return me.XsdGoPkgValue.ToXsdtDouble()
}

//	If the WalkHandlers.TxsdFxCommonFloatOrParamTypeChoiceFloat function is not nil (ie. was set by outside code), calls it with this TxsdFxCommonFloatOrParamTypeChoiceFloat instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TxsdFxCommonFloatOrParamTypeChoiceFloat instance.
func (me *TxsdFxCommonFloatOrParamTypeChoiceFloat) Walk() (err error) {
	if fn := WalkHandlers.TxsdFxCommonFloatOrParamTypeChoiceFloat; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_floatchoicefx_common_float_or_param_typeschema_Float_TxsdFxCommonFloatOrParamTypeChoiceFloat_ struct {
	Float *TxsdFxCommonFloatOrParamTypeChoiceFloat `xml:"http://www.collada.org/2008/03/COLLADASchema float"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_floatchoicefx_common_float_or_param_typeschema_Float_TxsdFxCommonFloatOrParamTypeChoiceFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_floatchoicefx_common_float_or_param_typeschema_Float_TxsdFxCommonFloatOrParamTypeChoiceFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_floatchoicefx_common_float_or_param_typeschema_Float_TxsdFxCommonFloatOrParamTypeChoiceFloat_ instance.
func (me *XsdGoPkgHasElem_floatchoicefx_common_float_or_param_typeschema_Float_TxsdFxCommonFloatOrParamTypeChoiceFloat_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_floatchoicefx_common_float_or_param_typeschema_Float_TxsdFxCommonFloatOrParamTypeChoiceFloat_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Float.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_paramchoicefx_common_float_or_param_typeschema_Param_TxsdFxCommonFloatOrParamTypeChoiceParam_ struct {
	Param *TxsdGlslProgramTypeSequenceBindUniformChoiceParam `xml:"http://www.collada.org/2008/03/COLLADASchema param"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_paramchoicefx_common_float_or_param_typeschema_Param_TxsdFxCommonFloatOrParamTypeChoiceParam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_paramchoicefx_common_float_or_param_typeschema_Param_TxsdFxCommonFloatOrParamTypeChoiceParam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_paramchoicefx_common_float_or_param_typeschema_Param_TxsdFxCommonFloatOrParamTypeChoiceParam_ instance.
func (me *XsdGoPkgHasElem_paramchoicefx_common_float_or_param_typeschema_Param_TxsdFxCommonFloatOrParamTypeChoiceParam_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_paramchoicefx_common_float_or_param_typeschema_Param_TxsdFxCommonFloatOrParamTypeChoiceParam_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Param.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TfxCommonFloatOrParamType struct {
	XsdGoPkgHasElem_floatchoicefx_common_float_or_param_typeschema_Float_TxsdFxCommonFloatOrParamTypeChoiceFloat_

	XsdGoPkgHasElem_paramchoicefx_common_float_or_param_typeschema_Param_TxsdFxCommonFloatOrParamTypeChoiceParam_
}

//	If the WalkHandlers.TfxCommonFloatOrParamType function is not nil (ie. was set by outside code), calls it with this TfxCommonFloatOrParamType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TfxCommonFloatOrParamType instance.
func (me *TfxCommonFloatOrParamType) Walk() (err error) {
	if fn := WalkHandlers.TfxCommonFloatOrParamType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_floatchoicefx_common_float_or_param_typeschema_Float_TxsdFxCommonFloatOrParamTypeChoiceFloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_paramchoicefx_common_float_or_param_typeschema_Param_TxsdFxCommonFloatOrParamTypeChoiceParam_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_reflectivitysequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Reflectivity_TfxCommonFloatOrParamType_ struct {
	Reflectivity *TfxCommonFloatOrParamType `xml:"http://www.collada.org/2008/03/COLLADASchema reflectivity"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_reflectivitysequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Reflectivity_TfxCommonFloatOrParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_reflectivitysequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Reflectivity_TfxCommonFloatOrParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_reflectivitysequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Reflectivity_TfxCommonFloatOrParamType_ instance.
func (me *XsdGoPkgHasElem_reflectivitysequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Reflectivity_TfxCommonFloatOrParamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_reflectivitysequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Reflectivity_TfxCommonFloatOrParamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Reflectivity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_paramchoicefx_common_color_or_texture_typeschema_Param_TxsdFxCommonColorOrTextureTypeChoiceParam_ struct {
	Param *TxsdGlslProgramTypeSequenceBindUniformChoiceParam `xml:"http://www.collada.org/2008/03/COLLADASchema param"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_paramchoicefx_common_color_or_texture_typeschema_Param_TxsdFxCommonColorOrTextureTypeChoiceParam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_paramchoicefx_common_color_or_texture_typeschema_Param_TxsdFxCommonColorOrTextureTypeChoiceParam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_paramchoicefx_common_color_or_texture_typeschema_Param_TxsdFxCommonColorOrTextureTypeChoiceParam_ instance.
func (me *XsdGoPkgHasElem_paramchoicefx_common_color_or_texture_typeschema_Param_TxsdFxCommonColorOrTextureTypeChoiceParam_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_paramchoicefx_common_color_or_texture_typeschema_Param_TxsdFxCommonColorOrTextureTypeChoiceParam_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Param.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Texture_XsdtNCName_ struct {
	Texture xsdt.NCName `xml:"http://www.collada.org/2008/03/COLLADASchema texture,attr"`
}

type XsdGoPkgHasAttr_Texcoord_XsdtNCName_ struct {
	Texcoord xsdt.NCName `xml:"http://www.collada.org/2008/03/COLLADASchema texcoord,attr"`
}

type TxsdFxCommonColorOrTextureTypeChoiceTexture struct {
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	XsdGoPkgHasAttr_Texture_XsdtNCName_

	XsdGoPkgHasAttr_Texcoord_XsdtNCName_
}

//	If the WalkHandlers.TxsdFxCommonColorOrTextureTypeChoiceTexture function is not nil (ie. was set by outside code), calls it with this TxsdFxCommonColorOrTextureTypeChoiceTexture instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TxsdFxCommonColorOrTextureTypeChoiceTexture instance.
func (me *TxsdFxCommonColorOrTextureTypeChoiceTexture) Walk() (err error) {
	if fn := WalkHandlers.TxsdFxCommonColorOrTextureTypeChoiceTexture; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_texturechoicefx_common_color_or_texture_typeschema_Texture_TxsdFxCommonColorOrTextureTypeChoiceTexture_ struct {
	Texture *TxsdFxCommonColorOrTextureTypeChoiceTexture `xml:"http://www.collada.org/2008/03/COLLADASchema texture"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_texturechoicefx_common_color_or_texture_typeschema_Texture_TxsdFxCommonColorOrTextureTypeChoiceTexture_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texturechoicefx_common_color_or_texture_typeschema_Texture_TxsdFxCommonColorOrTextureTypeChoiceTexture_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texturechoicefx_common_color_or_texture_typeschema_Texture_TxsdFxCommonColorOrTextureTypeChoiceTexture_ instance.
func (me *XsdGoPkgHasElem_texturechoicefx_common_color_or_texture_typeschema_Texture_TxsdFxCommonColorOrTextureTypeChoiceTexture_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_texturechoicefx_common_color_or_texture_typeschema_Texture_TxsdFxCommonColorOrTextureTypeChoiceTexture_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Texture.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFxCommonColorOrTextureTypeChoiceColor struct {
	XsdGoPkgValue TfxColorType `xml:",chardata"`

	XsdGoPkgHasAttr_Sid_TsidType_
}

//	Returns the value of its XsdGoPkgValue field as a TlistOfFloatsType (which TfxColorType is just aliasing).
func (me *TxsdFxCommonColorOrTextureTypeChoiceColor) ToTlistOfFloatsType() TlistOfFloatsType {
	return me.XsdGoPkgValue.ToTfloat4Type().ToTlistOfFloatsType()
}

//	Returns the value of its XsdGoPkgValue field as a xsdt.String (which TfxColorType is just aliasing).
func (me *TxsdFxCommonColorOrTextureTypeChoiceColor) ToXsdtString() xsdt.String {
	return me.XsdGoPkgValue.ToTfloat4Type().ToTlistOfFloatsType().ToXsdtString()
}

//	Returns the value of its XsdGoPkgValue field as a Tfloat4Type (which TfxColorType is just aliasing).
func (me *TxsdFxCommonColorOrTextureTypeChoiceColor) ToTfloat4Type() Tfloat4Type {
	return me.XsdGoPkgValue.ToTfloat4Type()
}

//	If the WalkHandlers.TxsdFxCommonColorOrTextureTypeChoiceColor function is not nil (ie. was set by outside code), calls it with this TxsdFxCommonColorOrTextureTypeChoiceColor instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TxsdFxCommonColorOrTextureTypeChoiceColor instance.
func (me *TxsdFxCommonColorOrTextureTypeChoiceColor) Walk() (err error) {
	if fn := WalkHandlers.TxsdFxCommonColorOrTextureTypeChoiceColor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TxsdFxCommonColorOrTextureTypeChoiceColor) ToTfxColorType() TfxColorType {
	return me.XsdGoPkgValue
}

type XsdGoPkgHasElem_colorchoicefx_common_color_or_texture_typeschema_Color_TxsdFxCommonColorOrTextureTypeChoiceColor_ struct {
	Color *TxsdFxCommonColorOrTextureTypeChoiceColor `xml:"http://www.collada.org/2008/03/COLLADASchema color"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_colorchoicefx_common_color_or_texture_typeschema_Color_TxsdFxCommonColorOrTextureTypeChoiceColor_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_colorchoicefx_common_color_or_texture_typeschema_Color_TxsdFxCommonColorOrTextureTypeChoiceColor_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_colorchoicefx_common_color_or_texture_typeschema_Color_TxsdFxCommonColorOrTextureTypeChoiceColor_ instance.
func (me *XsdGoPkgHasElem_colorchoicefx_common_color_or_texture_typeschema_Color_TxsdFxCommonColorOrTextureTypeChoiceColor_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_colorchoicefx_common_color_or_texture_typeschema_Color_TxsdFxCommonColorOrTextureTypeChoiceColor_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Color.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TfxCommonColorOrTextureType struct {
	XsdGoPkgHasElem_paramchoicefx_common_color_or_texture_typeschema_Param_TxsdFxCommonColorOrTextureTypeChoiceParam_

	XsdGoPkgHasElem_texturechoicefx_common_color_or_texture_typeschema_Texture_TxsdFxCommonColorOrTextureTypeChoiceTexture_

	XsdGoPkgHasElem_colorchoicefx_common_color_or_texture_typeschema_Color_TxsdFxCommonColorOrTextureTypeChoiceColor_
}

//	If the WalkHandlers.TfxCommonColorOrTextureType function is not nil (ie. was set by outside code), calls it with this TfxCommonColorOrTextureType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TfxCommonColorOrTextureType instance.
func (me *TfxCommonColorOrTextureType) Walk() (err error) {
	if fn := WalkHandlers.TfxCommonColorOrTextureType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_paramchoicefx_common_color_or_texture_typeschema_Param_TxsdFxCommonColorOrTextureTypeChoiceParam_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_texturechoicefx_common_color_or_texture_typeschema_Texture_TxsdFxCommonColorOrTextureTypeChoiceTexture_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_colorchoicefx_common_color_or_texture_typeschema_Color_TxsdFxCommonColorOrTextureTypeChoiceColor_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_diffusesequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Diffuse_TfxCommonColorOrTextureType_ struct {
	Diffuse *TfxCommonColorOrTextureType `xml:"http://www.collada.org/2008/03/COLLADASchema diffuse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_diffusesequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Diffuse_TfxCommonColorOrTextureType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_diffusesequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Diffuse_TfxCommonColorOrTextureType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_diffusesequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Diffuse_TfxCommonColorOrTextureType_ instance.
func (me *XsdGoPkgHasElem_diffusesequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Diffuse_TfxCommonColorOrTextureType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_diffusesequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Diffuse_TfxCommonColorOrTextureType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Diffuse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_index_of_refractionsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_IndexOfRefraction_TfxCommonFloatOrParamType_ struct {
	IndexOfRefraction *TfxCommonFloatOrParamType `xml:"http://www.collada.org/2008/03/COLLADASchema index_of_refraction"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_index_of_refractionsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_IndexOfRefraction_TfxCommonFloatOrParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_index_of_refractionsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_IndexOfRefraction_TfxCommonFloatOrParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_index_of_refractionsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_IndexOfRefraction_TfxCommonFloatOrParamType_ instance.
func (me *XsdGoPkgHasElem_index_of_refractionsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_IndexOfRefraction_TfxCommonFloatOrParamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_index_of_refractionsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_IndexOfRefraction_TfxCommonFloatOrParamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IndexOfRefraction.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_emissionsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Emission_TfxCommonColorOrTextureType_ struct {
	Emission *TfxCommonColorOrTextureType `xml:"http://www.collada.org/2008/03/COLLADASchema emission"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_emissionsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Emission_TfxCommonColorOrTextureType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_emissionsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Emission_TfxCommonColorOrTextureType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_emissionsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Emission_TfxCommonColorOrTextureType_ instance.
func (me *XsdGoPkgHasElem_emissionsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Emission_TfxCommonColorOrTextureType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_emissionsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Emission_TfxCommonColorOrTextureType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Emission.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ambientsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Ambient_TfxCommonColorOrTextureType_ struct {
	Ambient *TfxCommonColorOrTextureType `xml:"http://www.collada.org/2008/03/COLLADASchema ambient"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ambientsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Ambient_TfxCommonColorOrTextureType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ambientsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Ambient_TfxCommonColorOrTextureType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ambientsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Ambient_TfxCommonColorOrTextureType_ instance.
func (me *XsdGoPkgHasElem_ambientsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Ambient_TfxCommonColorOrTextureType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ambientsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Ambient_TfxCommonColorOrTextureType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ambient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TfxOpaqueEnum xsdt.String

//	Since TfxOpaqueEnum is just a simple String type, this merely returns the current string value.
func (me TfxOpaqueEnum) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TfxOpaqueEnum's alias type xsdt.String.
func (me TfxOpaqueEnum) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TfxOpaqueEnum is "A_ONE".
func (me TfxOpaqueEnum) IsAOne() bool { return me == "A_ONE" }

//	Returns true if the value of this enumerated TfxOpaqueEnum is "A_ZERO".
func (me TfxOpaqueEnum) IsAZero() bool { return me == "A_ZERO" }

//	Returns true if the value of this enumerated TfxOpaqueEnum is "RGB_ONE".
func (me TfxOpaqueEnum) IsRgbOne() bool { return me == "RGB_ONE" }

//	Returns true if the value of this enumerated TfxOpaqueEnum is "RGB_ZERO".
func (me TfxOpaqueEnum) IsRgbZero() bool { return me == "RGB_ZERO" }

//	Since TfxOpaqueEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxOpaqueEnum) Set(s string) { (*xsdt.String)(me).Set(s) }

type XsdGoPkgHasAttr_Opaque_TfxOpaqueEnum_AOne struct {
	Opaque TfxOpaqueEnum `xml:"http://www.collada.org/2008/03/COLLADASchema opaque,attr"`
}

//	Returns the default value for Opaque -- "A_ONE"
func (me XsdGoPkgHasAttr_Opaque_TfxOpaqueEnum_AOne) OpaqueDefault() TfxOpaqueEnum {
	return TfxOpaqueEnum("A_ONE")
}

type TfxCommonTransparentType struct {
	TfxCommonColorOrTextureType

	XsdGoPkgHasAttr_Opaque_TfxOpaqueEnum_AOne
}

//	If the WalkHandlers.TfxCommonTransparentType function is not nil (ie. was set by outside code), calls it with this TfxCommonTransparentType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TfxCommonTransparentType instance.
func (me *TfxCommonTransparentType) Walk() (err error) {
	if fn := WalkHandlers.TfxCommonTransparentType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TfxCommonColorOrTextureType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_transparentsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Transparent_TfxCommonTransparentType_ struct {
	Transparent *TfxCommonTransparentType `xml:"http://www.collada.org/2008/03/COLLADASchema transparent"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_transparentsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Transparent_TfxCommonTransparentType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_transparentsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Transparent_TfxCommonTransparentType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_transparentsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Transparent_TfxCommonTransparentType_ instance.
func (me *XsdGoPkgHasElem_transparentsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Transparent_TfxCommonTransparentType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_transparentsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Transparent_TfxCommonTransparentType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Transparent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_transparencysequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Transparency_TfxCommonFloatOrParamType_ struct {
	Transparency *TfxCommonFloatOrParamType `xml:"http://www.collada.org/2008/03/COLLADASchema transparency"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_transparencysequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Transparency_TfxCommonFloatOrParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_transparencysequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Transparency_TfxCommonFloatOrParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_transparencysequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Transparency_TfxCommonFloatOrParamType_ instance.
func (me *XsdGoPkgHasElem_transparencysequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Transparency_TfxCommonFloatOrParamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_transparencysequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Transparency_TfxCommonFloatOrParamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Transparency.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_reflectivesequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Reflective_TfxCommonColorOrTextureType_ struct {
	Reflective *TfxCommonColorOrTextureType `xml:"http://www.collada.org/2008/03/COLLADASchema reflective"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_reflectivesequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Reflective_TfxCommonColorOrTextureType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_reflectivesequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Reflective_TfxCommonColorOrTextureType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_reflectivesequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Reflective_TfxCommonColorOrTextureType_ instance.
func (me *XsdGoPkgHasElem_reflectivesequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Reflective_TfxCommonColorOrTextureType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_reflectivesequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Reflective_TfxCommonColorOrTextureType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Reflective.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceLambert struct {
	XsdGoPkgHasElem_diffusesequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Diffuse_TfxCommonColorOrTextureType_

	XsdGoPkgHasElem_index_of_refractionsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_IndexOfRefraction_TfxCommonFloatOrParamType_

	XsdGoPkgHasElem_emissionsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Emission_TfxCommonColorOrTextureType_

	XsdGoPkgHasElem_ambientsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Ambient_TfxCommonColorOrTextureType_

	XsdGoPkgHasElem_transparentsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Transparent_TfxCommonTransparentType_

	XsdGoPkgHasElem_transparencysequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Transparency_TfxCommonFloatOrParamType_

	XsdGoPkgHasElem_reflectivesequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Reflective_TfxCommonColorOrTextureType_

	XsdGoPkgHasElem_reflectivitysequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Reflectivity_TfxCommonFloatOrParamType_
}

//	If the WalkHandlers.TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceLambert function is not nil (ie. was set by outside code), calls it with this TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceLambert instance as the single argument. Then calls the Walk() method on 8/8 embed(s) and 0/0 field(s) belonging to this TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceLambert instance.
func (me *TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceLambert) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceLambert; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_index_of_refractionsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_IndexOfRefraction_TfxCommonFloatOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_emissionsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Emission_TfxCommonColorOrTextureType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ambientsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Ambient_TfxCommonColorOrTextureType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_transparentsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Transparent_TfxCommonTransparentType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_transparencysequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Transparency_TfxCommonFloatOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_reflectivesequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Reflective_TfxCommonColorOrTextureType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_reflectivitysequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Reflectivity_TfxCommonFloatOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_diffusesequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Diffuse_TfxCommonColorOrTextureType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_lambertchoicesequencetechniquesequenceprofile_common_typeschema_Lambert_TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceLambert_ struct {
	Lambert *TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceLambert `xml:"http://www.collada.org/2008/03/COLLADASchema lambert"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_lambertchoicesequencetechniquesequenceprofile_common_typeschema_Lambert_TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceLambert_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_lambertchoicesequencetechniquesequenceprofile_common_typeschema_Lambert_TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceLambert_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_lambertchoicesequencetechniquesequenceprofile_common_typeschema_Lambert_TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceLambert_ instance.
func (me *XsdGoPkgHasElem_lambertchoicesequencetechniquesequenceprofile_common_typeschema_Lambert_TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceLambert_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_lambertchoicesequencetechniquesequenceprofile_common_typeschema_Lambert_TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceLambert_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Lambert.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_shininesssequenceblinnchoicesequencetechniquesequenceprofile_common_typeschema_Shininess_TfxCommonFloatOrParamType_ struct {
	Shininess *TfxCommonFloatOrParamType `xml:"http://www.collada.org/2008/03/COLLADASchema shininess"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_shininesssequenceblinnchoicesequencetechniquesequenceprofile_common_typeschema_Shininess_TfxCommonFloatOrParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_shininesssequenceblinnchoicesequencetechniquesequenceprofile_common_typeschema_Shininess_TfxCommonFloatOrParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_shininesssequenceblinnchoicesequencetechniquesequenceprofile_common_typeschema_Shininess_TfxCommonFloatOrParamType_ instance.
func (me *XsdGoPkgHasElem_shininesssequenceblinnchoicesequencetechniquesequenceprofile_common_typeschema_Shininess_TfxCommonFloatOrParamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_shininesssequenceblinnchoicesequencetechniquesequenceprofile_common_typeschema_Shininess_TfxCommonFloatOrParamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Shininess.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_specularsequenceblinnchoicesequencetechniquesequenceprofile_common_typeschema_Specular_TfxCommonColorOrTextureType_ struct {
	Specular *TfxCommonColorOrTextureType `xml:"http://www.collada.org/2008/03/COLLADASchema specular"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_specularsequenceblinnchoicesequencetechniquesequenceprofile_common_typeschema_Specular_TfxCommonColorOrTextureType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_specularsequenceblinnchoicesequencetechniquesequenceprofile_common_typeschema_Specular_TfxCommonColorOrTextureType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_specularsequenceblinnchoicesequencetechniquesequenceprofile_common_typeschema_Specular_TfxCommonColorOrTextureType_ instance.
func (me *XsdGoPkgHasElem_specularsequenceblinnchoicesequencetechniquesequenceprofile_common_typeschema_Specular_TfxCommonColorOrTextureType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_specularsequenceblinnchoicesequencetechniquesequenceprofile_common_typeschema_Specular_TfxCommonColorOrTextureType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Specular.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceBlinn struct {
	XsdGoPkgHasElem_index_of_refractionsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_IndexOfRefraction_TfxCommonFloatOrParamType_

	XsdGoPkgHasElem_specularsequenceblinnchoicesequencetechniquesequenceprofile_common_typeschema_Specular_TfxCommonColorOrTextureType_

	XsdGoPkgHasElem_transparentsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Transparent_TfxCommonTransparentType_

	XsdGoPkgHasElem_diffusesequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Diffuse_TfxCommonColorOrTextureType_

	XsdGoPkgHasElem_emissionsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Emission_TfxCommonColorOrTextureType_

	XsdGoPkgHasElem_ambientsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Ambient_TfxCommonColorOrTextureType_

	XsdGoPkgHasElem_reflectivesequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Reflective_TfxCommonColorOrTextureType_

	XsdGoPkgHasElem_shininesssequenceblinnchoicesequencetechniquesequenceprofile_common_typeschema_Shininess_TfxCommonFloatOrParamType_

	XsdGoPkgHasElem_reflectivitysequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Reflectivity_TfxCommonFloatOrParamType_

	XsdGoPkgHasElem_transparencysequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Transparency_TfxCommonFloatOrParamType_
}

//	If the WalkHandlers.TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceBlinn function is not nil (ie. was set by outside code), calls it with this TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceBlinn instance as the single argument. Then calls the Walk() method on 10/10 embed(s) and 0/0 field(s) belonging to this TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceBlinn instance.
func (me *TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceBlinn) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceBlinn; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_transparentsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Transparent_TfxCommonTransparentType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_diffusesequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Diffuse_TfxCommonColorOrTextureType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_emissionsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Emission_TfxCommonColorOrTextureType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ambientsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Ambient_TfxCommonColorOrTextureType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_reflectivesequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Reflective_TfxCommonColorOrTextureType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_shininesssequenceblinnchoicesequencetechniquesequenceprofile_common_typeschema_Shininess_TfxCommonFloatOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_reflectivitysequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Reflectivity_TfxCommonFloatOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_transparencysequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Transparency_TfxCommonFloatOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_index_of_refractionsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_IndexOfRefraction_TfxCommonFloatOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_specularsequenceblinnchoicesequencetechniquesequenceprofile_common_typeschema_Specular_TfxCommonColorOrTextureType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_blinnchoicesequencetechniquesequenceprofile_common_typeschema_Blinn_TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceBlinn_ struct {
	Blinn *TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceBlinn `xml:"http://www.collada.org/2008/03/COLLADASchema blinn"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_blinnchoicesequencetechniquesequenceprofile_common_typeschema_Blinn_TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceBlinn_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_blinnchoicesequencetechniquesequenceprofile_common_typeschema_Blinn_TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceBlinn_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_blinnchoicesequencetechniquesequenceprofile_common_typeschema_Blinn_TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceBlinn_ instance.
func (me *XsdGoPkgHasElem_blinnchoicesequencetechniquesequenceprofile_common_typeschema_Blinn_TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceBlinn_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_blinnchoicesequencetechniquesequenceprofile_common_typeschema_Blinn_TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceBlinn_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Blinn.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProfileCommonTypeSequenceTechniqueSequenceChoicePhong struct {
	XsdGoPkgHasElem_transparencysequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Transparency_TfxCommonFloatOrParamType_

	XsdGoPkgHasElem_specularsequenceblinnchoicesequencetechniquesequenceprofile_common_typeschema_Specular_TfxCommonColorOrTextureType_

	XsdGoPkgHasElem_reflectivesequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Reflective_TfxCommonColorOrTextureType_

	XsdGoPkgHasElem_emissionsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Emission_TfxCommonColorOrTextureType_

	XsdGoPkgHasElem_ambientsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Ambient_TfxCommonColorOrTextureType_

	XsdGoPkgHasElem_reflectivitysequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Reflectivity_TfxCommonFloatOrParamType_

	XsdGoPkgHasElem_shininesssequenceblinnchoicesequencetechniquesequenceprofile_common_typeschema_Shininess_TfxCommonFloatOrParamType_

	XsdGoPkgHasElem_diffusesequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Diffuse_TfxCommonColorOrTextureType_

	XsdGoPkgHasElem_transparentsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Transparent_TfxCommonTransparentType_

	XsdGoPkgHasElem_index_of_refractionsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_IndexOfRefraction_TfxCommonFloatOrParamType_
}

//	If the WalkHandlers.TxsdProfileCommonTypeSequenceTechniqueSequenceChoicePhong function is not nil (ie. was set by outside code), calls it with this TxsdProfileCommonTypeSequenceTechniqueSequenceChoicePhong instance as the single argument. Then calls the Walk() method on 10/10 embed(s) and 0/0 field(s) belonging to this TxsdProfileCommonTypeSequenceTechniqueSequenceChoicePhong instance.
func (me *TxsdProfileCommonTypeSequenceTechniqueSequenceChoicePhong) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileCommonTypeSequenceTechniqueSequenceChoicePhong; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ambientsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Ambient_TfxCommonColorOrTextureType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_reflectivitysequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Reflectivity_TfxCommonFloatOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_shininesssequenceblinnchoicesequencetechniquesequenceprofile_common_typeschema_Shininess_TfxCommonFloatOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_diffusesequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Diffuse_TfxCommonColorOrTextureType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_transparentsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Transparent_TfxCommonTransparentType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_index_of_refractionsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_IndexOfRefraction_TfxCommonFloatOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_transparencysequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Transparency_TfxCommonFloatOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_specularsequenceblinnchoicesequencetechniquesequenceprofile_common_typeschema_Specular_TfxCommonColorOrTextureType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_reflectivesequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Reflective_TfxCommonColorOrTextureType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_emissionsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Emission_TfxCommonColorOrTextureType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_phongchoicesequencetechniquesequenceprofile_common_typeschema_Phong_TxsdProfileCommonTypeSequenceTechniqueSequenceChoicePhong_ struct {
	Phong *TxsdProfileCommonTypeSequenceTechniqueSequenceChoicePhong `xml:"http://www.collada.org/2008/03/COLLADASchema phong"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_phongchoicesequencetechniquesequenceprofile_common_typeschema_Phong_TxsdProfileCommonTypeSequenceTechniqueSequenceChoicePhong_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_phongchoicesequencetechniquesequenceprofile_common_typeschema_Phong_TxsdProfileCommonTypeSequenceTechniqueSequenceChoicePhong_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_phongchoicesequencetechniquesequenceprofile_common_typeschema_Phong_TxsdProfileCommonTypeSequenceTechniqueSequenceChoicePhong_ instance.
func (me *XsdGoPkgHasElem_phongchoicesequencetechniquesequenceprofile_common_typeschema_Phong_TxsdProfileCommonTypeSequenceTechniqueSequenceChoicePhong_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_phongchoicesequencetechniquesequenceprofile_common_typeschema_Phong_TxsdProfileCommonTypeSequenceTechniqueSequenceChoicePhong_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Phong.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceConstant struct {
	XsdGoPkgHasElem_reflectivitysequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Reflectivity_TfxCommonFloatOrParamType_

	XsdGoPkgHasElem_reflectivesequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Reflective_TfxCommonColorOrTextureType_

	XsdGoPkgHasElem_emissionsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Emission_TfxCommonColorOrTextureType_

	XsdGoPkgHasElem_index_of_refractionsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_IndexOfRefraction_TfxCommonFloatOrParamType_

	XsdGoPkgHasElem_transparentsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Transparent_TfxCommonTransparentType_

	XsdGoPkgHasElem_transparencysequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Transparency_TfxCommonFloatOrParamType_
}

//	If the WalkHandlers.TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceConstant function is not nil (ie. was set by outside code), calls it with this TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceConstant instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceConstant instance.
func (me *TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceConstant) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceConstant; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_emissionsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Emission_TfxCommonColorOrTextureType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_index_of_refractionsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_IndexOfRefraction_TfxCommonFloatOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_transparentsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Transparent_TfxCommonTransparentType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_transparencysequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Transparency_TfxCommonFloatOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_reflectivitysequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Reflectivity_TfxCommonFloatOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_reflectivesequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Reflective_TfxCommonColorOrTextureType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_constantchoicesequencetechniquesequenceprofile_common_typeschema_Constant_TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceConstant_ struct {
	Constant *TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceConstant `xml:"http://www.collada.org/2008/03/COLLADASchema constant"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_constantchoicesequencetechniquesequenceprofile_common_typeschema_Constant_TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceConstant_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_constantchoicesequencetechniquesequenceprofile_common_typeschema_Constant_TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceConstant_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_constantchoicesequencetechniquesequenceprofile_common_typeschema_Constant_TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceConstant_ instance.
func (me *XsdGoPkgHasElem_constantchoicesequencetechniquesequenceprofile_common_typeschema_Constant_TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceConstant_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_constantchoicesequencetechniquesequenceprofile_common_typeschema_Constant_TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceConstant_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Constant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProfileCommonTypeSequenceTechnique struct {
	XsdGoPkgHasElem_blinnchoicesequencetechniquesequenceprofile_common_typeschema_Blinn_TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceBlinn_

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_TsidType_

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	XsdGoPkgHasElem_phongchoicesequencetechniquesequenceprofile_common_typeschema_Phong_TxsdProfileCommonTypeSequenceTechniqueSequenceChoicePhong_

	XsdGoPkgHasElem_constantchoicesequencetechniquesequenceprofile_common_typeschema_Constant_TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceConstant_

	//	The technique element may contain an asset element.
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	XsdGoPkgHasElem_lambertchoicesequencetechniquesequenceprofile_common_typeschema_Lambert_TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceLambert_
}

//	If the WalkHandlers.TxsdProfileCommonTypeSequenceTechnique function is not nil (ie. was set by outside code), calls it with this TxsdProfileCommonTypeSequenceTechnique instance as the single argument. Then calls the Walk() method on 6/8 embed(s) and 0/0 field(s) belonging to this TxsdProfileCommonTypeSequenceTechnique instance.
func (me *TxsdProfileCommonTypeSequenceTechnique) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileCommonTypeSequenceTechnique; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_phongchoicesequencetechniquesequenceprofile_common_typeschema_Phong_TxsdProfileCommonTypeSequenceTechniqueSequenceChoicePhong_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_constantchoicesequencetechniquesequenceprofile_common_typeschema_Constant_TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceConstant_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_lambertchoicesequencetechniquesequenceprofile_common_typeschema_Lambert_TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceLambert_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_blinnchoicesequencetechniquesequenceprofile_common_typeschema_Blinn_TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceBlinn_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_techniquesequenceprofile_common_typeschema_Technique_TxsdProfileCommonTypeSequenceTechnique_ struct {
	//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
	Technique *TxsdProfileCommonTypeSequenceTechnique `xml:"http://www.collada.org/2008/03/COLLADASchema technique"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_techniquesequenceprofile_common_typeschema_Technique_TxsdProfileCommonTypeSequenceTechnique_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_techniquesequenceprofile_common_typeschema_Technique_TxsdProfileCommonTypeSequenceTechnique_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_techniquesequenceprofile_common_typeschema_Technique_TxsdProfileCommonTypeSequenceTechnique_ instance.
func (me *XsdGoPkgHasElem_techniquesequenceprofile_common_typeschema_Technique_TxsdProfileCommonTypeSequenceTechnique_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_techniquesequenceprofile_common_typeschema_Technique_TxsdProfileCommonTypeSequenceTechnique_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Technique.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TprofileCommonType struct {
	XsdGoPkgHasElems_newparamsequenceprofile_common_typeschema_Newparam_TfxCommonNewparamType_

	//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
	XsdGoPkgHasElem_techniquesequenceprofile_common_typeschema_Technique_TxsdProfileCommonTypeSequenceTechnique_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_
}

//	If the WalkHandlers.TprofileCommonType function is not nil (ie. was set by outside code), calls it with this TprofileCommonType instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TprofileCommonType instance.
func (me *TprofileCommonType) Walk() (err error) {
	if fn := WalkHandlers.TprofileCommonType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_newparamsequenceprofile_common_typeschema_Newparam_TfxCommonNewparamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_techniquesequenceprofile_common_typeschema_Technique_TxsdProfileCommonTypeSequenceTechnique_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_profile_COMMONchoicefx_profile_groupschema_ProfileCommon_TprofileCommonType_ struct {
	ProfileCommon *TprofileCommonType `xml:"http://www.collada.org/2008/03/COLLADASchema profile_COMMON"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_profile_COMMONchoicefx_profile_groupschema_ProfileCommon_TprofileCommonType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_profile_COMMONchoicefx_profile_groupschema_ProfileCommon_TprofileCommonType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_profile_COMMONchoicefx_profile_groupschema_ProfileCommon_TprofileCommonType_ instance.
func (me *XsdGoPkgHasElem_profile_COMMONchoicefx_profile_groupschema_ProfileCommon_TprofileCommonType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_profile_COMMONchoicefx_profile_groupschema_ProfileCommon_TprofileCommonType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ProfileCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Bridge COLLADA FX to an external FX framework such as NVIDIA's CgFX or Microsoft's Direct3D FX
//	A platform defines a string that specifies which platform this is hint is aimed for.
type XsdGoPkgHasAttr_Platform_XsdtNCName_ struct {
	//	A platform defines a string that specifies which platform this is hint is aimed for.
	Platform xsdt.NCName `xml:"http://www.collada.org/2008/03/COLLADASchema platform,attr"`
}

type TprofileBridgeType struct {
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The type of platform. This is a vendor-defined character string that indicates the platform or capability target for the technique. Optional
	XsdGoPkgHasAttr_Platform_XsdtNCName_

	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	XsdGoPkgHasAttr_Id_XsdtId_

	//	The url to the file which we are bridging too
	XsdGoPkgHasAttr_Url_XsdtAnyURI_
}

//	If the WalkHandlers.TprofileBridgeType function is not nil (ie. was set by outside code), calls it with this TprofileBridgeType instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TprofileBridgeType instance.
func (me *TprofileBridgeType) Walk() (err error) {
	if fn := WalkHandlers.TprofileBridgeType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_profile_BRIDGEchoicefx_profile_groupschema_ProfileBridge_TprofileBridgeType_ struct {
	ProfileBridge *TprofileBridgeType `xml:"http://www.collada.org/2008/03/COLLADASchema profile_BRIDGE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_profile_BRIDGEchoicefx_profile_groupschema_ProfileBridge_TprofileBridgeType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_profile_BRIDGEchoicefx_profile_groupschema_ProfileBridge_TprofileBridgeType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_profile_BRIDGEchoicefx_profile_groupschema_ProfileBridge_TprofileBridgeType_ instance.
func (me *XsdGoPkgHasElem_profile_BRIDGEchoicefx_profile_groupschema_ProfileBridge_TprofileBridgeType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_profile_BRIDGEchoicefx_profile_groupschema_ProfileBridge_TprofileBridgeType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ProfileBridge.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Opens a block of GLES platform-specific data types and technique declarations.
//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
//	A group that contains the renderstates available for the GLES profile.
type XsdGoPkgHasElem_alpha_test_enablechoicegles_pipeline_settings_groupschema_AlphaTestEnable_TxsdGlesPipelineSettingsGroupChoiceAlphaTestEnable_ struct {
	AlphaTestEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema alpha_test_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_alpha_test_enablechoicegles_pipeline_settings_groupschema_AlphaTestEnable_TxsdGlesPipelineSettingsGroupChoiceAlphaTestEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_alpha_test_enablechoicegles_pipeline_settings_groupschema_AlphaTestEnable_TxsdGlesPipelineSettingsGroupChoiceAlphaTestEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_alpha_test_enablechoicegles_pipeline_settings_groupschema_AlphaTestEnable_TxsdGlesPipelineSettingsGroupChoiceAlphaTestEnable_ instance.
func (me *XsdGoPkgHasElem_alpha_test_enablechoicegles_pipeline_settings_groupschema_AlphaTestEnable_TxsdGlesPipelineSettingsGroupChoiceAlphaTestEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_alpha_test_enablechoicegles_pipeline_settings_groupschema_AlphaTestEnable_TxsdGlesPipelineSettingsGroupChoiceAlphaTestEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AlphaTestEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_material_ambientchoicegles_pipeline_settings_groupschema_MaterialAmbient_TxsdGlesPipelineSettingsGroupChoiceMaterialAmbient_ struct {
	MaterialAmbient *TxsdGlPipelineSettingsGroupChoiceMaterialAmbient `xml:"http://www.collada.org/2008/03/COLLADASchema material_ambient"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_material_ambientchoicegles_pipeline_settings_groupschema_MaterialAmbient_TxsdGlesPipelineSettingsGroupChoiceMaterialAmbient_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_material_ambientchoicegles_pipeline_settings_groupschema_MaterialAmbient_TxsdGlesPipelineSettingsGroupChoiceMaterialAmbient_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_material_ambientchoicegles_pipeline_settings_groupschema_MaterialAmbient_TxsdGlesPipelineSettingsGroupChoiceMaterialAmbient_ instance.
func (me *XsdGoPkgHasElem_material_ambientchoicegles_pipeline_settings_groupschema_MaterialAmbient_TxsdGlesPipelineSettingsGroupChoiceMaterialAmbient_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_material_ambientchoicegles_pipeline_settings_groupschema_MaterialAmbient_TxsdGlesPipelineSettingsGroupChoiceMaterialAmbient_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MaterialAmbient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tbool4Type_ struct {
	Value Tbool4Type `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

type TglesMaxClipPlanesIndexType xsdt.NonNegativeInteger

//	This convenience method just performs a simple type conversion to TglesMaxClipPlanesIndexType's alias type xsdt.NonNegativeInteger.
func (me TglesMaxClipPlanesIndexType) ToXsdtNonNegativeInteger() xsdt.NonNegativeInteger {
	return xsdt.NonNegativeInteger(me)
}

//	Returns a string representation of this TglesMaxClipPlanesIndexType's current non-string scalar value.
func (me TglesMaxClipPlanesIndexType) String() string { return xsdt.NonNegativeInteger(me).String() }

//	Since TglesMaxClipPlanesIndexType is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TglesMaxClipPlanesIndexType) Set(s string) { (*xsdt.NonNegativeInteger)(me).Set(s) }

type XsdGoPkgHasAttr_Index_TglesMaxClipPlanesIndexType_ struct {
	Index TglesMaxClipPlanesIndexType `xml:"http://www.collada.org/2008/03/COLLADASchema index,attr"`
}

type TxsdGlesPipelineSettingsGroupChoiceClipPlane struct {
	XsdGoPkgHasAttr_Value_Tbool4Type_

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglesMaxClipPlanesIndexType_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsGroupChoiceClipPlane function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsGroupChoiceClipPlane instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsGroupChoiceClipPlane instance.
func (me *TxsdGlesPipelineSettingsGroupChoiceClipPlane) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsGroupChoiceClipPlane; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_clip_planechoicegles_pipeline_settings_groupschema_ClipPlane_TxsdGlesPipelineSettingsGroupChoiceClipPlane_ struct {
	ClipPlane *TxsdGlesPipelineSettingsGroupChoiceClipPlane `xml:"http://www.collada.org/2008/03/COLLADASchema clip_plane"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_clip_planechoicegles_pipeline_settings_groupschema_ClipPlane_TxsdGlesPipelineSettingsGroupChoiceClipPlane_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_clip_planechoicegles_pipeline_settings_groupschema_ClipPlane_TxsdGlesPipelineSettingsGroupChoiceClipPlane_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_clip_planechoicegles_pipeline_settings_groupschema_ClipPlane_TxsdGlesPipelineSettingsGroupChoiceClipPlane_ instance.
func (me *XsdGoPkgHasElem_clip_planechoicegles_pipeline_settings_groupschema_ClipPlane_TxsdGlesPipelineSettingsGroupChoiceClipPlane_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_clip_planechoicegles_pipeline_settings_groupschema_ClipPlane_TxsdGlesPipelineSettingsGroupChoiceClipPlane_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ClipPlane.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglesMaxLightsIndexType xsdt.NonNegativeInteger

//	Since TglesMaxLightsIndexType is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TglesMaxLightsIndexType) Set(s string) { (*xsdt.NonNegativeInteger)(me).Set(s) }

//	Returns a string representation of this TglesMaxLightsIndexType's current non-string scalar value.
func (me TglesMaxLightsIndexType) String() string { return xsdt.NonNegativeInteger(me).String() }

//	This convenience method just performs a simple type conversion to TglesMaxLightsIndexType's alias type xsdt.NonNegativeInteger.
func (me TglesMaxLightsIndexType) ToXsdtNonNegativeInteger() xsdt.NonNegativeInteger {
	return xsdt.NonNegativeInteger(me)
}

type XsdGoPkgHasAttr_Index_TglesMaxLightsIndexType_ struct {
	Index TglesMaxLightsIndexType `xml:"http://www.collada.org/2008/03/COLLADASchema index,attr"`
}

type TxsdGlesPipelineSettingsGroupChoiceLightEnable struct {
	XsdGoPkgHasAttr_Value_XsdtBoolean_False

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglesMaxLightsIndexType_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsGroupChoiceLightEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsGroupChoiceLightEnable instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsGroupChoiceLightEnable instance.
func (me *TxsdGlesPipelineSettingsGroupChoiceLightEnable) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsGroupChoiceLightEnable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_enablechoicegles_pipeline_settings_groupschema_LightEnable_TxsdGlesPipelineSettingsGroupChoiceLightEnable_ struct {
	LightEnable *TxsdGlesPipelineSettingsGroupChoiceLightEnable `xml:"http://www.collada.org/2008/03/COLLADASchema light_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_enablechoicegles_pipeline_settings_groupschema_LightEnable_TxsdGlesPipelineSettingsGroupChoiceLightEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_enablechoicegles_pipeline_settings_groupschema_LightEnable_TxsdGlesPipelineSettingsGroupChoiceLightEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_enablechoicegles_pipeline_settings_groupschema_LightEnable_TxsdGlesPipelineSettingsGroupChoiceLightEnable_ instance.
func (me *XsdGoPkgHasElem_light_enablechoicegles_pipeline_settings_groupschema_LightEnable_TxsdGlesPipelineSettingsGroupChoiceLightEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_enablechoicegles_pipeline_settings_groupschema_LightEnable_TxsdGlesPipelineSettingsGroupChoiceLightEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlesPipelineSettingsGroupChoiceColorMask struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool4Type_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsGroupChoiceColorMask function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsGroupChoiceColorMask instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsGroupChoiceColorMask instance.
func (me *TxsdGlesPipelineSettingsGroupChoiceColorMask) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsGroupChoiceColorMask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_color_maskchoicegles_pipeline_settings_groupschema_ColorMask_TxsdGlesPipelineSettingsGroupChoiceColorMask_ struct {
	ColorMask *TxsdGlesPipelineSettingsGroupChoiceColorMask `xml:"http://www.collada.org/2008/03/COLLADASchema color_mask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_color_maskchoicegles_pipeline_settings_groupschema_ColorMask_TxsdGlesPipelineSettingsGroupChoiceColorMask_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_color_maskchoicegles_pipeline_settings_groupschema_ColorMask_TxsdGlesPipelineSettingsGroupChoiceColorMask_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_color_maskchoicegles_pipeline_settings_groupschema_ColorMask_TxsdGlesPipelineSettingsGroupChoiceColorMask_ instance.
func (me *XsdGoPkgHasElem_color_maskchoicegles_pipeline_settings_groupschema_ColorMask_TxsdGlesPipelineSettingsGroupChoiceColorMask_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_color_maskchoicegles_pipeline_settings_groupschema_ColorMask_TxsdGlesPipelineSettingsGroupChoiceColorMask_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ColorMask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlesPipelineSettingsGroupChoiceLightPosition struct {
	XsdGoPkgHasAttr_Value_Tfloat4Type_0010

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglesMaxLightsIndexType_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsGroupChoiceLightPosition function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsGroupChoiceLightPosition instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsGroupChoiceLightPosition instance.
func (me *TxsdGlesPipelineSettingsGroupChoiceLightPosition) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsGroupChoiceLightPosition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_positionchoicegles_pipeline_settings_groupschema_LightPosition_TxsdGlesPipelineSettingsGroupChoiceLightPosition_ struct {
	LightPosition *TxsdGlesPipelineSettingsGroupChoiceLightPosition `xml:"http://www.collada.org/2008/03/COLLADASchema light_position"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_positionchoicegles_pipeline_settings_groupschema_LightPosition_TxsdGlesPipelineSettingsGroupChoiceLightPosition_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_positionchoicegles_pipeline_settings_groupschema_LightPosition_TxsdGlesPipelineSettingsGroupChoiceLightPosition_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_positionchoicegles_pipeline_settings_groupschema_LightPosition_TxsdGlesPipelineSettingsGroupChoiceLightPosition_ instance.
func (me *XsdGoPkgHasElem_light_positionchoicegles_pipeline_settings_groupschema_LightPosition_TxsdGlesPipelineSettingsGroupChoiceLightPosition_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_positionchoicegles_pipeline_settings_groupschema_LightPosition_TxsdGlesPipelineSettingsGroupChoiceLightPosition_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightPosition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_projection_matrixchoicegles_pipeline_settings_groupschema_ProjectionMatrix_TxsdGlesPipelineSettingsGroupChoiceProjectionMatrix_ struct {
	ProjectionMatrix *TxsdGlPipelineSettingsGroupChoiceModelViewMatrix `xml:"http://www.collada.org/2008/03/COLLADASchema projection_matrix"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_projection_matrixchoicegles_pipeline_settings_groupschema_ProjectionMatrix_TxsdGlesPipelineSettingsGroupChoiceProjectionMatrix_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_projection_matrixchoicegles_pipeline_settings_groupschema_ProjectionMatrix_TxsdGlesPipelineSettingsGroupChoiceProjectionMatrix_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_projection_matrixchoicegles_pipeline_settings_groupschema_ProjectionMatrix_TxsdGlesPipelineSettingsGroupChoiceProjectionMatrix_ instance.
func (me *XsdGoPkgHasElem_projection_matrixchoicegles_pipeline_settings_groupschema_ProjectionMatrix_TxsdGlesPipelineSettingsGroupChoiceProjectionMatrix_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_projection_matrixchoicegles_pipeline_settings_groupschema_ProjectionMatrix_TxsdGlesPipelineSettingsGroupChoiceProjectionMatrix_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ProjectionMatrix.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_stencil_test_enablechoicegles_pipeline_settings_groupschema_StencilTestEnable_TxsdGlesPipelineSettingsGroupChoiceStencilTestEnable_ struct {
	StencilTestEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema stencil_test_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_stencil_test_enablechoicegles_pipeline_settings_groupschema_StencilTestEnable_TxsdGlesPipelineSettingsGroupChoiceStencilTestEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_test_enablechoicegles_pipeline_settings_groupschema_StencilTestEnable_TxsdGlesPipelineSettingsGroupChoiceStencilTestEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_test_enablechoicegles_pipeline_settings_groupschema_StencilTestEnable_TxsdGlesPipelineSettingsGroupChoiceStencilTestEnable_ instance.
func (me *XsdGoPkgHasElem_stencil_test_enablechoicegles_pipeline_settings_groupschema_StencilTestEnable_TxsdGlesPipelineSettingsGroupChoiceStencilTestEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_stencil_test_enablechoicegles_pipeline_settings_groupschema_StencilTestEnable_TxsdGlesPipelineSettingsGroupChoiceStencilTestEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StencilTestEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_depth_test_enablechoicegles_pipeline_settings_groupschema_DepthTestEnable_TxsdGlesPipelineSettingsGroupChoiceDepthTestEnable_ struct {
	DepthTestEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema depth_test_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_depth_test_enablechoicegles_pipeline_settings_groupschema_DepthTestEnable_TxsdGlesPipelineSettingsGroupChoiceDepthTestEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_test_enablechoicegles_pipeline_settings_groupschema_DepthTestEnable_TxsdGlesPipelineSettingsGroupChoiceDepthTestEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_depth_test_enablechoicegles_pipeline_settings_groupschema_DepthTestEnable_TxsdGlesPipelineSettingsGroupChoiceDepthTestEnable_ instance.
func (me *XsdGoPkgHasElem_depth_test_enablechoicegles_pipeline_settings_groupschema_DepthTestEnable_TxsdGlesPipelineSettingsGroupChoiceDepthTestEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_depth_test_enablechoicegles_pipeline_settings_groupschema_DepthTestEnable_TxsdGlesPipelineSettingsGroupChoiceDepthTestEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DepthTestEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fog_modechoicegles_pipeline_settings_groupschema_FogMode_TxsdGlesPipelineSettingsGroupChoiceFogMode_ struct {
	FogMode *TxsdGlPipelineSettingsGroupChoiceFogMode `xml:"http://www.collada.org/2008/03/COLLADASchema fog_mode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fog_modechoicegles_pipeline_settings_groupschema_FogMode_TxsdGlesPipelineSettingsGroupChoiceFogMode_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_modechoicegles_pipeline_settings_groupschema_FogMode_TxsdGlesPipelineSettingsGroupChoiceFogMode_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_modechoicegles_pipeline_settings_groupschema_FogMode_TxsdGlesPipelineSettingsGroupChoiceFogMode_ instance.
func (me *XsdGoPkgHasElem_fog_modechoicegles_pipeline_settings_groupschema_FogMode_TxsdGlesPipelineSettingsGroupChoiceFogMode_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fog_modechoicegles_pipeline_settings_groupschema_FogMode_TxsdGlesPipelineSettingsGroupChoiceFogMode_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FogMode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_model_ambientchoicegles_pipeline_settings_groupschema_LightModelAmbient_TxsdGlesPipelineSettingsGroupChoiceLightModelAmbient_ struct {
	LightModelAmbient *TxsdGlPipelineSettingsGroupChoiceMaterialAmbient `xml:"http://www.collada.org/2008/03/COLLADASchema light_model_ambient"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_model_ambientchoicegles_pipeline_settings_groupschema_LightModelAmbient_TxsdGlesPipelineSettingsGroupChoiceLightModelAmbient_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_model_ambientchoicegles_pipeline_settings_groupschema_LightModelAmbient_TxsdGlesPipelineSettingsGroupChoiceLightModelAmbient_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_model_ambientchoicegles_pipeline_settings_groupschema_LightModelAmbient_TxsdGlesPipelineSettingsGroupChoiceLightModelAmbient_ instance.
func (me *XsdGoPkgHasElem_light_model_ambientchoicegles_pipeline_settings_groupschema_LightModelAmbient_TxsdGlesPipelineSettingsGroupChoiceLightModelAmbient_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_model_ambientchoicegles_pipeline_settings_groupschema_LightModelAmbient_TxsdGlesPipelineSettingsGroupChoiceLightModelAmbient_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightModelAmbient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_depth_maskchoicegles_pipeline_settings_groupschema_DepthMask_TxsdGlesPipelineSettingsGroupChoiceDepthMask_ struct {
	DepthMask *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema depth_mask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_depth_maskchoicegles_pipeline_settings_groupschema_DepthMask_TxsdGlesPipelineSettingsGroupChoiceDepthMask_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_maskchoicegles_pipeline_settings_groupschema_DepthMask_TxsdGlesPipelineSettingsGroupChoiceDepthMask_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_depth_maskchoicegles_pipeline_settings_groupschema_DepthMask_TxsdGlesPipelineSettingsGroupChoiceDepthMask_ instance.
func (me *XsdGoPkgHasElem_depth_maskchoicegles_pipeline_settings_groupschema_DepthMask_TxsdGlesPipelineSettingsGroupChoiceDepthMask_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_depth_maskchoicegles_pipeline_settings_groupschema_DepthMask_TxsdGlesPipelineSettingsGroupChoiceDepthMask_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DepthMask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_multisample_enablechoicegles_pipeline_settings_groupschema_MultisampleEnable_TxsdGlesPipelineSettingsGroupChoiceMultisampleEnable_ struct {
	MultisampleEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema multisample_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_multisample_enablechoicegles_pipeline_settings_groupschema_MultisampleEnable_TxsdGlesPipelineSettingsGroupChoiceMultisampleEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_multisample_enablechoicegles_pipeline_settings_groupschema_MultisampleEnable_TxsdGlesPipelineSettingsGroupChoiceMultisampleEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_multisample_enablechoicegles_pipeline_settings_groupschema_MultisampleEnable_TxsdGlesPipelineSettingsGroupChoiceMultisampleEnable_ instance.
func (me *XsdGoPkgHasElem_multisample_enablechoicegles_pipeline_settings_groupschema_MultisampleEnable_TxsdGlesPipelineSettingsGroupChoiceMultisampleEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_multisample_enablechoicegles_pipeline_settings_groupschema_MultisampleEnable_TxsdGlesPipelineSettingsGroupChoiceMultisampleEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MultisampleEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fog_colorchoicegles_pipeline_settings_groupschema_FogColor_TxsdGlesPipelineSettingsGroupChoiceFogColor_ struct {
	FogColor *TxsdGlPipelineSettingsGroupChoiceFogColor `xml:"http://www.collada.org/2008/03/COLLADASchema fog_color"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fog_colorchoicegles_pipeline_settings_groupschema_FogColor_TxsdGlesPipelineSettingsGroupChoiceFogColor_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_colorchoicegles_pipeline_settings_groupschema_FogColor_TxsdGlesPipelineSettingsGroupChoiceFogColor_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_colorchoicegles_pipeline_settings_groupschema_FogColor_TxsdGlesPipelineSettingsGroupChoiceFogColor_ instance.
func (me *XsdGoPkgHasElem_fog_colorchoicegles_pipeline_settings_groupschema_FogColor_TxsdGlesPipelineSettingsGroupChoiceFogColor_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fog_colorchoicegles_pipeline_settings_groupschema_FogColor_TxsdGlesPipelineSettingsGroupChoiceFogColor_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FogColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_point_distance_attenuationchoicegles_pipeline_settings_groupschema_PointDistanceAttenuation_TxsdGlesPipelineSettingsGroupChoicePointDistanceAttenuation_ struct {
	PointDistanceAttenuation *TxsdGlPipelineSettingsGroupChoicePointDistanceAttenuation `xml:"http://www.collada.org/2008/03/COLLADASchema point_distance_attenuation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_point_distance_attenuationchoicegles_pipeline_settings_groupschema_PointDistanceAttenuation_TxsdGlesPipelineSettingsGroupChoicePointDistanceAttenuation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_distance_attenuationchoicegles_pipeline_settings_groupschema_PointDistanceAttenuation_TxsdGlesPipelineSettingsGroupChoicePointDistanceAttenuation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_distance_attenuationchoicegles_pipeline_settings_groupschema_PointDistanceAttenuation_TxsdGlesPipelineSettingsGroupChoicePointDistanceAttenuation_ instance.
func (me *XsdGoPkgHasElem_point_distance_attenuationchoicegles_pipeline_settings_groupschema_PointDistanceAttenuation_TxsdGlesPipelineSettingsGroupChoicePointDistanceAttenuation_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_point_distance_attenuationchoicegles_pipeline_settings_groupschema_PointDistanceAttenuation_TxsdGlesPipelineSettingsGroupChoicePointDistanceAttenuation_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PointDistanceAttenuation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_lighting_enablechoicegles_pipeline_settings_groupschema_LightingEnable_TxsdGlesPipelineSettingsGroupChoiceLightingEnable_ struct {
	LightingEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema lighting_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_lighting_enablechoicegles_pipeline_settings_groupschema_LightingEnable_TxsdGlesPipelineSettingsGroupChoiceLightingEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_lighting_enablechoicegles_pipeline_settings_groupschema_LightingEnable_TxsdGlesPipelineSettingsGroupChoiceLightingEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_lighting_enablechoicegles_pipeline_settings_groupschema_LightingEnable_TxsdGlesPipelineSettingsGroupChoiceLightingEnable_ instance.
func (me *XsdGoPkgHasElem_lighting_enablechoicegles_pipeline_settings_groupschema_LightingEnable_TxsdGlesPipelineSettingsGroupChoiceLightingEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_lighting_enablechoicegles_pipeline_settings_groupschema_LightingEnable_TxsdGlesPipelineSettingsGroupChoiceLightingEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightingEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_material_diffusechoicegles_pipeline_settings_groupschema_MaterialDiffuse_TxsdGlesPipelineSettingsGroupChoiceMaterialDiffuse_ struct {
	MaterialDiffuse *TxsdGlPipelineSettingsGroupChoiceMaterialDiffuse `xml:"http://www.collada.org/2008/03/COLLADASchema material_diffuse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_material_diffusechoicegles_pipeline_settings_groupschema_MaterialDiffuse_TxsdGlesPipelineSettingsGroupChoiceMaterialDiffuse_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_material_diffusechoicegles_pipeline_settings_groupschema_MaterialDiffuse_TxsdGlesPipelineSettingsGroupChoiceMaterialDiffuse_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_material_diffusechoicegles_pipeline_settings_groupschema_MaterialDiffuse_TxsdGlesPipelineSettingsGroupChoiceMaterialDiffuse_ instance.
func (me *XsdGoPkgHasElem_material_diffusechoicegles_pipeline_settings_groupschema_MaterialDiffuse_TxsdGlesPipelineSettingsGroupChoiceMaterialDiffuse_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_material_diffusechoicegles_pipeline_settings_groupschema_MaterialDiffuse_TxsdGlesPipelineSettingsGroupChoiceMaterialDiffuse_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MaterialDiffuse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fog_endchoicegles_pipeline_settings_groupschema_FogEnd_TxsdGlesPipelineSettingsGroupChoiceFogEnd_ struct {
	FogEnd *TxsdGlPipelineSettingsGroupChoiceFogEnd `xml:"http://www.collada.org/2008/03/COLLADASchema fog_end"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fog_endchoicegles_pipeline_settings_groupschema_FogEnd_TxsdGlesPipelineSettingsGroupChoiceFogEnd_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_endchoicegles_pipeline_settings_groupschema_FogEnd_TxsdGlesPipelineSettingsGroupChoiceFogEnd_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_endchoicegles_pipeline_settings_groupschema_FogEnd_TxsdGlesPipelineSettingsGroupChoiceFogEnd_ instance.
func (me *XsdGoPkgHasElem_fog_endchoicegles_pipeline_settings_groupschema_FogEnd_TxsdGlesPipelineSettingsGroupChoiceFogEnd_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fog_endchoicegles_pipeline_settings_groupschema_FogEnd_TxsdGlesPipelineSettingsGroupChoiceFogEnd_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FogEnd.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_point_size_minchoicegles_pipeline_settings_groupschema_PointSizeMin_TxsdGlesPipelineSettingsGroupChoicePointSizeMin_ struct {
	PointSizeMin *TxsdGlPipelineSettingsGroupChoicePointSizeMin `xml:"http://www.collada.org/2008/03/COLLADASchema point_size_min"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_point_size_minchoicegles_pipeline_settings_groupschema_PointSizeMin_TxsdGlesPipelineSettingsGroupChoicePointSizeMin_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_size_minchoicegles_pipeline_settings_groupschema_PointSizeMin_TxsdGlesPipelineSettingsGroupChoicePointSizeMin_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_size_minchoicegles_pipeline_settings_groupschema_PointSizeMin_TxsdGlesPipelineSettingsGroupChoicePointSizeMin_ instance.
func (me *XsdGoPkgHasElem_point_size_minchoicegles_pipeline_settings_groupschema_PointSizeMin_TxsdGlesPipelineSettingsGroupChoicePointSizeMin_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_point_size_minchoicegles_pipeline_settings_groupschema_PointSizeMin_TxsdGlesPipelineSettingsGroupChoicePointSizeMin_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PointSizeMin.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlesPipelineSettingsGroupChoiceLightSpotDirection struct {
	XsdGoPkgHasAttr_Index_TglesMaxLightsIndexType_

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat3Type_001
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsGroupChoiceLightSpotDirection function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsGroupChoiceLightSpotDirection instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsGroupChoiceLightSpotDirection instance.
func (me *TxsdGlesPipelineSettingsGroupChoiceLightSpotDirection) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsGroupChoiceLightSpotDirection; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_spot_directionchoicegles_pipeline_settings_groupschema_LightSpotDirection_TxsdGlesPipelineSettingsGroupChoiceLightSpotDirection_ struct {
	LightSpotDirection *TxsdGlesPipelineSettingsGroupChoiceLightSpotDirection `xml:"http://www.collada.org/2008/03/COLLADASchema light_spot_direction"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_spot_directionchoicegles_pipeline_settings_groupschema_LightSpotDirection_TxsdGlesPipelineSettingsGroupChoiceLightSpotDirection_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_spot_directionchoicegles_pipeline_settings_groupschema_LightSpotDirection_TxsdGlesPipelineSettingsGroupChoiceLightSpotDirection_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_spot_directionchoicegles_pipeline_settings_groupschema_LightSpotDirection_TxsdGlesPipelineSettingsGroupChoiceLightSpotDirection_ instance.
func (me *XsdGoPkgHasElem_light_spot_directionchoicegles_pipeline_settings_groupschema_LightSpotDirection_TxsdGlesPipelineSettingsGroupChoiceLightSpotDirection_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_spot_directionchoicegles_pipeline_settings_groupschema_LightSpotDirection_TxsdGlesPipelineSettingsGroupChoiceLightSpotDirection_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightSpotDirection.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_shade_modelchoicegles_pipeline_settings_groupschema_ShadeModel_TxsdGlesPipelineSettingsGroupChoiceShadeModel_ struct {
	ShadeModel *TxsdGlPipelineSettingsGroupChoiceShadeModel `xml:"http://www.collada.org/2008/03/COLLADASchema shade_model"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_shade_modelchoicegles_pipeline_settings_groupschema_ShadeModel_TxsdGlesPipelineSettingsGroupChoiceShadeModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_shade_modelchoicegles_pipeline_settings_groupschema_ShadeModel_TxsdGlesPipelineSettingsGroupChoiceShadeModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_shade_modelchoicegles_pipeline_settings_groupschema_ShadeModel_TxsdGlesPipelineSettingsGroupChoiceShadeModel_ instance.
func (me *XsdGoPkgHasElem_shade_modelchoicegles_pipeline_settings_groupschema_ShadeModel_TxsdGlesPipelineSettingsGroupChoiceShadeModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_shade_modelchoicegles_pipeline_settings_groupschema_ShadeModel_TxsdGlesPipelineSettingsGroupChoiceShadeModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ShadeModel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlesPipelineSettingsGroupChoiceLightQuadraticAttenuation struct {
	XsdGoPkgHasAttr_Value_TfloatType_1

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglesMaxLightsIndexType_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsGroupChoiceLightQuadraticAttenuation function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsGroupChoiceLightQuadraticAttenuation instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsGroupChoiceLightQuadraticAttenuation instance.
func (me *TxsdGlesPipelineSettingsGroupChoiceLightQuadraticAttenuation) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsGroupChoiceLightQuadraticAttenuation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_quadratic_attenuationchoicegles_pipeline_settings_groupschema_LightQuadraticAttenuation_TxsdGlesPipelineSettingsGroupChoiceLightQuadraticAttenuation_ struct {
	LightQuadraticAttenuation *TxsdGlesPipelineSettingsGroupChoiceLightQuadraticAttenuation `xml:"http://www.collada.org/2008/03/COLLADASchema light_quadratic_attenuation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_quadratic_attenuationchoicegles_pipeline_settings_groupschema_LightQuadraticAttenuation_TxsdGlesPipelineSettingsGroupChoiceLightQuadraticAttenuation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_quadratic_attenuationchoicegles_pipeline_settings_groupschema_LightQuadraticAttenuation_TxsdGlesPipelineSettingsGroupChoiceLightQuadraticAttenuation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_quadratic_attenuationchoicegles_pipeline_settings_groupschema_LightQuadraticAttenuation_TxsdGlesPipelineSettingsGroupChoiceLightQuadraticAttenuation_ instance.
func (me *XsdGoPkgHasElem_light_quadratic_attenuationchoicegles_pipeline_settings_groupschema_LightQuadraticAttenuation_TxsdGlesPipelineSettingsGroupChoiceLightQuadraticAttenuation_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_quadratic_attenuationchoicegles_pipeline_settings_groupschema_LightQuadraticAttenuation_TxsdGlesPipelineSettingsGroupChoiceLightQuadraticAttenuation_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightQuadraticAttenuation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_polygon_offsetchoicegles_pipeline_settings_groupschema_PolygonOffset_TxsdGlesPipelineSettingsGroupChoicePolygonOffset_ struct {
	PolygonOffset *TxsdGlPipelineSettingsGroupChoicePolygonOffset `xml:"http://www.collada.org/2008/03/COLLADASchema polygon_offset"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_polygon_offsetchoicegles_pipeline_settings_groupschema_PolygonOffset_TxsdGlesPipelineSettingsGroupChoicePolygonOffset_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_polygon_offsetchoicegles_pipeline_settings_groupschema_PolygonOffset_TxsdGlesPipelineSettingsGroupChoicePolygonOffset_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_polygon_offsetchoicegles_pipeline_settings_groupschema_PolygonOffset_TxsdGlesPipelineSettingsGroupChoicePolygonOffset_ instance.
func (me *XsdGoPkgHasElem_polygon_offsetchoicegles_pipeline_settings_groupschema_PolygonOffset_TxsdGlesPipelineSettingsGroupChoicePolygonOffset_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_polygon_offsetchoicegles_pipeline_settings_groupschema_PolygonOffset_TxsdGlesPipelineSettingsGroupChoicePolygonOffset_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PolygonOffset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_blend_enablechoicegles_pipeline_settings_groupschema_BlendEnable_TxsdGlesPipelineSettingsGroupChoiceBlendEnable_ struct {
	BlendEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema blend_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_blend_enablechoicegles_pipeline_settings_groupschema_BlendEnable_TxsdGlesPipelineSettingsGroupChoiceBlendEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_blend_enablechoicegles_pipeline_settings_groupschema_BlendEnable_TxsdGlesPipelineSettingsGroupChoiceBlendEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_blend_enablechoicegles_pipeline_settings_groupschema_BlendEnable_TxsdGlesPipelineSettingsGroupChoiceBlendEnable_ instance.
func (me *XsdGoPkgHasElem_blend_enablechoicegles_pipeline_settings_groupschema_BlendEnable_TxsdGlesPipelineSettingsGroupChoiceBlendEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_blend_enablechoicegles_pipeline_settings_groupschema_BlendEnable_TxsdGlesPipelineSettingsGroupChoiceBlendEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BlendEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_destsequenceblend_funcchoicegles_pipeline_settings_groupschema_Dest_TxsdGlesPipelineSettingsGroupChoiceBlendFuncSequenceDest_ struct {
	Dest *TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceDest `xml:"http://www.collada.org/2008/03/COLLADASchema dest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_destsequenceblend_funcchoicegles_pipeline_settings_groupschema_Dest_TxsdGlesPipelineSettingsGroupChoiceBlendFuncSequenceDest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_destsequenceblend_funcchoicegles_pipeline_settings_groupschema_Dest_TxsdGlesPipelineSettingsGroupChoiceBlendFuncSequenceDest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_destsequenceblend_funcchoicegles_pipeline_settings_groupschema_Dest_TxsdGlesPipelineSettingsGroupChoiceBlendFuncSequenceDest_ instance.
func (me *XsdGoPkgHasElem_destsequenceblend_funcchoicegles_pipeline_settings_groupschema_Dest_TxsdGlesPipelineSettingsGroupChoiceBlendFuncSequenceDest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_destsequenceblend_funcchoicegles_pipeline_settings_groupschema_Dest_TxsdGlesPipelineSettingsGroupChoiceBlendFuncSequenceDest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Dest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_srcsequenceblend_funcchoicegles_pipeline_settings_groupschema_Src_TxsdGlesPipelineSettingsGroupChoiceBlendFuncSequenceSrc_ struct {
	Src *TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceSrc `xml:"http://www.collada.org/2008/03/COLLADASchema src"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_srcsequenceblend_funcchoicegles_pipeline_settings_groupschema_Src_TxsdGlesPipelineSettingsGroupChoiceBlendFuncSequenceSrc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_srcsequenceblend_funcchoicegles_pipeline_settings_groupschema_Src_TxsdGlesPipelineSettingsGroupChoiceBlendFuncSequenceSrc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_srcsequenceblend_funcchoicegles_pipeline_settings_groupschema_Src_TxsdGlesPipelineSettingsGroupChoiceBlendFuncSequenceSrc_ instance.
func (me *XsdGoPkgHasElem_srcsequenceblend_funcchoicegles_pipeline_settings_groupschema_Src_TxsdGlesPipelineSettingsGroupChoiceBlendFuncSequenceSrc_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_srcsequenceblend_funcchoicegles_pipeline_settings_groupschema_Src_TxsdGlesPipelineSettingsGroupChoiceBlendFuncSequenceSrc_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Src.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlesPipelineSettingsGroupChoiceBlendFunc struct {
	XsdGoPkgHasElem_destsequenceblend_funcchoicegles_pipeline_settings_groupschema_Dest_TxsdGlesPipelineSettingsGroupChoiceBlendFuncSequenceDest_

	XsdGoPkgHasElem_srcsequenceblend_funcchoicegles_pipeline_settings_groupschema_Src_TxsdGlesPipelineSettingsGroupChoiceBlendFuncSequenceSrc_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsGroupChoiceBlendFunc function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsGroupChoiceBlendFunc instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsGroupChoiceBlendFunc instance.
func (me *TxsdGlesPipelineSettingsGroupChoiceBlendFunc) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsGroupChoiceBlendFunc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_destsequenceblend_funcchoicegles_pipeline_settings_groupschema_Dest_TxsdGlesPipelineSettingsGroupChoiceBlendFuncSequenceDest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_srcsequenceblend_funcchoicegles_pipeline_settings_groupschema_Src_TxsdGlesPipelineSettingsGroupChoiceBlendFuncSequenceSrc_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_blend_funcchoicegles_pipeline_settings_groupschema_BlendFunc_TxsdGlesPipelineSettingsGroupChoiceBlendFunc_ struct {
	BlendFunc *TxsdGlesPipelineSettingsGroupChoiceBlendFunc `xml:"http://www.collada.org/2008/03/COLLADASchema blend_func"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_blend_funcchoicegles_pipeline_settings_groupschema_BlendFunc_TxsdGlesPipelineSettingsGroupChoiceBlendFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_blend_funcchoicegles_pipeline_settings_groupschema_BlendFunc_TxsdGlesPipelineSettingsGroupChoiceBlendFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_blend_funcchoicegles_pipeline_settings_groupschema_BlendFunc_TxsdGlesPipelineSettingsGroupChoiceBlendFunc_ instance.
func (me *XsdGoPkgHasElem_blend_funcchoicegles_pipeline_settings_groupschema_BlendFunc_TxsdGlesPipelineSettingsGroupChoiceBlendFunc_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_blend_funcchoicegles_pipeline_settings_groupschema_BlendFunc_TxsdGlesPipelineSettingsGroupChoiceBlendFunc_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BlendFunc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_depth_funcchoicegles_pipeline_settings_groupschema_DepthFunc_TxsdGlesPipelineSettingsGroupChoiceDepthFunc_ struct {
	DepthFunc *TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceFunc `xml:"http://www.collada.org/2008/03/COLLADASchema depth_func"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_depth_funcchoicegles_pipeline_settings_groupschema_DepthFunc_TxsdGlesPipelineSettingsGroupChoiceDepthFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_funcchoicegles_pipeline_settings_groupschema_DepthFunc_TxsdGlesPipelineSettingsGroupChoiceDepthFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_depth_funcchoicegles_pipeline_settings_groupschema_DepthFunc_TxsdGlesPipelineSettingsGroupChoiceDepthFunc_ instance.
func (me *XsdGoPkgHasElem_depth_funcchoicegles_pipeline_settings_groupschema_DepthFunc_TxsdGlesPipelineSettingsGroupChoiceDepthFunc_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_depth_funcchoicegles_pipeline_settings_groupschema_DepthFunc_TxsdGlesPipelineSettingsGroupChoiceDepthFunc_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DepthFunc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglesStencilOpEnum xsdt.String

//	Since TglesStencilOpEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesStencilOpEnum) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TglesStencilOpEnum is "DECR".
func (me TglesStencilOpEnum) IsDecr() bool { return me == "DECR" }

//	Since TglesStencilOpEnum is just a simple String type, this merely returns the current string value.
func (me TglesStencilOpEnum) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TglesStencilOpEnum is "INVERT".
func (me TglesStencilOpEnum) IsInvert() bool { return me == "INVERT" }

//	Returns true if the value of this enumerated TglesStencilOpEnum is "KEEP".
func (me TglesStencilOpEnum) IsKeep() bool { return me == "KEEP" }

//	Returns true if the value of this enumerated TglesStencilOpEnum is "REPLACE".
func (me TglesStencilOpEnum) IsReplace() bool { return me == "REPLACE" }

//	This convenience method just performs a simple type conversion to TglesStencilOpEnum's alias type xsdt.String.
func (me TglesStencilOpEnum) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TglesStencilOpEnum is "INCR".
func (me TglesStencilOpEnum) IsIncr() bool { return me == "INCR" }

//	Returns true if the value of this enumerated TglesStencilOpEnum is "ZERO".
func (me TglesStencilOpEnum) IsZero() bool { return me == "ZERO" }

type XsdGoPkgHasAttr_Value_TglesStencilOpEnum_Keep struct {
	Value TglesStencilOpEnum `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "KEEP"
func (me XsdGoPkgHasAttr_Value_TglesStencilOpEnum_Keep) ValueDefault() TglesStencilOpEnum {
	return TglesStencilOpEnum("KEEP")
}

type TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceFail struct {
	XsdGoPkgHasAttr_Value_TglesStencilOpEnum_Keep

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceFail function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceFail instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceFail instance.
func (me *TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceFail) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceFail; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_failsequencestencil_opchoicegles_pipeline_settings_groupschema_Fail_TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceFail_ struct {
	Fail *TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceFail `xml:"http://www.collada.org/2008/03/COLLADASchema fail"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_failsequencestencil_opchoicegles_pipeline_settings_groupschema_Fail_TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceFail_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_failsequencestencil_opchoicegles_pipeline_settings_groupschema_Fail_TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceFail_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_failsequencestencil_opchoicegles_pipeline_settings_groupschema_Fail_TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceFail_ instance.
func (me *XsdGoPkgHasElem_failsequencestencil_opchoicegles_pipeline_settings_groupschema_Fail_TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceFail_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_failsequencestencil_opchoicegles_pipeline_settings_groupschema_Fail_TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceFail_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Fail.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_zfailsequencestencil_opchoicegles_pipeline_settings_groupschema_Zfail_TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceZfail_ struct {
	Zfail *TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceFail `xml:"http://www.collada.org/2008/03/COLLADASchema zfail"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_zfailsequencestencil_opchoicegles_pipeline_settings_groupschema_Zfail_TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceZfail_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_zfailsequencestencil_opchoicegles_pipeline_settings_groupschema_Zfail_TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceZfail_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_zfailsequencestencil_opchoicegles_pipeline_settings_groupschema_Zfail_TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceZfail_ instance.
func (me *XsdGoPkgHasElem_zfailsequencestencil_opchoicegles_pipeline_settings_groupschema_Zfail_TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceZfail_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_zfailsequencestencil_opchoicegles_pipeline_settings_groupschema_Zfail_TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceZfail_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Zfail.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_zpasssequencestencil_opchoicegles_pipeline_settings_groupschema_Zpass_TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceZpass_ struct {
	Zpass *TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceFail `xml:"http://www.collada.org/2008/03/COLLADASchema zpass"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_zpasssequencestencil_opchoicegles_pipeline_settings_groupschema_Zpass_TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceZpass_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_zpasssequencestencil_opchoicegles_pipeline_settings_groupschema_Zpass_TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceZpass_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_zpasssequencestencil_opchoicegles_pipeline_settings_groupschema_Zpass_TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceZpass_ instance.
func (me *XsdGoPkgHasElem_zpasssequencestencil_opchoicegles_pipeline_settings_groupschema_Zpass_TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceZpass_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_zpasssequencestencil_opchoicegles_pipeline_settings_groupschema_Zpass_TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceZpass_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Zpass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlesPipelineSettingsGroupChoiceStencilOp struct {
	XsdGoPkgHasElem_zfailsequencestencil_opchoicegles_pipeline_settings_groupschema_Zfail_TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceZfail_

	XsdGoPkgHasElem_zpasssequencestencil_opchoicegles_pipeline_settings_groupschema_Zpass_TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceZpass_

	XsdGoPkgHasElem_failsequencestencil_opchoicegles_pipeline_settings_groupschema_Fail_TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceFail_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsGroupChoiceStencilOp function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsGroupChoiceStencilOp instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsGroupChoiceStencilOp instance.
func (me *TxsdGlesPipelineSettingsGroupChoiceStencilOp) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsGroupChoiceStencilOp; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_zpasssequencestencil_opchoicegles_pipeline_settings_groupschema_Zpass_TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceZpass_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_failsequencestencil_opchoicegles_pipeline_settings_groupschema_Fail_TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceFail_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_zfailsequencestencil_opchoicegles_pipeline_settings_groupschema_Zfail_TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceZfail_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_stencil_opchoicegles_pipeline_settings_groupschema_StencilOp_TxsdGlesPipelineSettingsGroupChoiceStencilOp_ struct {
	StencilOp *TxsdGlesPipelineSettingsGroupChoiceStencilOp `xml:"http://www.collada.org/2008/03/COLLADASchema stencil_op"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_stencil_opchoicegles_pipeline_settings_groupschema_StencilOp_TxsdGlesPipelineSettingsGroupChoiceStencilOp_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_opchoicegles_pipeline_settings_groupschema_StencilOp_TxsdGlesPipelineSettingsGroupChoiceStencilOp_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_opchoicegles_pipeline_settings_groupschema_StencilOp_TxsdGlesPipelineSettingsGroupChoiceStencilOp_ instance.
func (me *XsdGoPkgHasElem_stencil_opchoicegles_pipeline_settings_groupschema_StencilOp_TxsdGlesPipelineSettingsGroupChoiceStencilOp_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_stencil_opchoicegles_pipeline_settings_groupschema_StencilOp_TxsdGlesPipelineSettingsGroupChoiceStencilOp_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StencilOp.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fog_enablechoicegles_pipeline_settings_groupschema_FogEnable_TxsdGlesPipelineSettingsGroupChoiceFogEnable_ struct {
	FogEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema fog_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fog_enablechoicegles_pipeline_settings_groupschema_FogEnable_TxsdGlesPipelineSettingsGroupChoiceFogEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_enablechoicegles_pipeline_settings_groupschema_FogEnable_TxsdGlesPipelineSettingsGroupChoiceFogEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_enablechoicegles_pipeline_settings_groupschema_FogEnable_TxsdGlesPipelineSettingsGroupChoiceFogEnable_ instance.
func (me *XsdGoPkgHasElem_fog_enablechoicegles_pipeline_settings_groupschema_FogEnable_TxsdGlesPipelineSettingsGroupChoiceFogEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fog_enablechoicegles_pipeline_settings_groupschema_FogEnable_TxsdGlesPipelineSettingsGroupChoiceFogEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FogEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_cull_face_enablechoicegles_pipeline_settings_groupschema_CullFaceEnable_TxsdGlesPipelineSettingsGroupChoiceCullFaceEnable_ struct {
	CullFaceEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema cull_face_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_cull_face_enablechoicegles_pipeline_settings_groupschema_CullFaceEnable_TxsdGlesPipelineSettingsGroupChoiceCullFaceEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_cull_face_enablechoicegles_pipeline_settings_groupschema_CullFaceEnable_TxsdGlesPipelineSettingsGroupChoiceCullFaceEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_cull_face_enablechoicegles_pipeline_settings_groupschema_CullFaceEnable_TxsdGlesPipelineSettingsGroupChoiceCullFaceEnable_ instance.
func (me *XsdGoPkgHasElem_cull_face_enablechoicegles_pipeline_settings_groupschema_CullFaceEnable_TxsdGlesPipelineSettingsGroupChoiceCullFaceEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_cull_face_enablechoicegles_pipeline_settings_groupschema_CullFaceEnable_TxsdGlesPipelineSettingsGroupChoiceCullFaceEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CullFaceEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_line_widthchoicegles_pipeline_settings_groupschema_LineWidth_TxsdGlesPipelineSettingsGroupChoiceLineWidth_ struct {
	LineWidth *TxsdGlPipelineSettingsGroupChoiceFogEnd `xml:"http://www.collada.org/2008/03/COLLADASchema line_width"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_line_widthchoicegles_pipeline_settings_groupschema_LineWidth_TxsdGlesPipelineSettingsGroupChoiceLineWidth_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_line_widthchoicegles_pipeline_settings_groupschema_LineWidth_TxsdGlesPipelineSettingsGroupChoiceLineWidth_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_line_widthchoicegles_pipeline_settings_groupschema_LineWidth_TxsdGlesPipelineSettingsGroupChoiceLineWidth_ instance.
func (me *XsdGoPkgHasElem_line_widthchoicegles_pipeline_settings_groupschema_LineWidth_TxsdGlesPipelineSettingsGroupChoiceLineWidth_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_line_widthchoicegles_pipeline_settings_groupschema_LineWidth_TxsdGlesPipelineSettingsGroupChoiceLineWidth_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LineWidth.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_point_size_maxchoicegles_pipeline_settings_groupschema_PointSizeMax_TxsdGlesPipelineSettingsGroupChoicePointSizeMax_ struct {
	PointSizeMax *TxsdGlPipelineSettingsGroupChoiceFogEnd `xml:"http://www.collada.org/2008/03/COLLADASchema point_size_max"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_point_size_maxchoicegles_pipeline_settings_groupschema_PointSizeMax_TxsdGlesPipelineSettingsGroupChoicePointSizeMax_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_size_maxchoicegles_pipeline_settings_groupschema_PointSizeMax_TxsdGlesPipelineSettingsGroupChoicePointSizeMax_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_size_maxchoicegles_pipeline_settings_groupschema_PointSizeMax_TxsdGlesPipelineSettingsGroupChoicePointSizeMax_ instance.
func (me *XsdGoPkgHasElem_point_size_maxchoicegles_pipeline_settings_groupschema_PointSizeMax_TxsdGlesPipelineSettingsGroupChoicePointSizeMax_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_point_size_maxchoicegles_pipeline_settings_groupschema_PointSizeMax_TxsdGlesPipelineSettingsGroupChoicePointSizeMax_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PointSizeMax.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_scissorchoicegles_pipeline_settings_groupschema_Scissor_TxsdGlesPipelineSettingsGroupChoiceScissor_ struct {
	Scissor *TxsdGlPipelineSettingsGroupChoiceScissor `xml:"http://www.collada.org/2008/03/COLLADASchema scissor"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_scissorchoicegles_pipeline_settings_groupschema_Scissor_TxsdGlesPipelineSettingsGroupChoiceScissor_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_scissorchoicegles_pipeline_settings_groupschema_Scissor_TxsdGlesPipelineSettingsGroupChoiceScissor_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_scissorchoicegles_pipeline_settings_groupschema_Scissor_TxsdGlesPipelineSettingsGroupChoiceScissor_ instance.
func (me *XsdGoPkgHasElem_scissorchoicegles_pipeline_settings_groupschema_Scissor_TxsdGlesPipelineSettingsGroupChoiceScissor_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_scissorchoicegles_pipeline_settings_groupschema_Scissor_TxsdGlesPipelineSettingsGroupChoiceScissor_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Scissor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_sample_coverage_enablechoicegles_pipeline_settings_groupschema_SampleCoverageEnable_TxsdGlesPipelineSettingsGroupChoiceSampleCoverageEnable_ struct {
	SampleCoverageEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema sample_coverage_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sample_coverage_enablechoicegles_pipeline_settings_groupschema_SampleCoverageEnable_TxsdGlesPipelineSettingsGroupChoiceSampleCoverageEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sample_coverage_enablechoicegles_pipeline_settings_groupschema_SampleCoverageEnable_TxsdGlesPipelineSettingsGroupChoiceSampleCoverageEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sample_coverage_enablechoicegles_pipeline_settings_groupschema_SampleCoverageEnable_TxsdGlesPipelineSettingsGroupChoiceSampleCoverageEnable_ instance.
func (me *XsdGoPkgHasElem_sample_coverage_enablechoicegles_pipeline_settings_groupschema_SampleCoverageEnable_TxsdGlesPipelineSettingsGroupChoiceSampleCoverageEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sample_coverage_enablechoicegles_pipeline_settings_groupschema_SampleCoverageEnable_TxsdGlesPipelineSettingsGroupChoiceSampleCoverageEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SampleCoverageEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_cull_facechoicegles_pipeline_settings_groupschema_CullFace_TxsdGlesPipelineSettingsGroupChoiceCullFace_ struct {
	CullFace *TxsdGlPipelineSettingsGroupChoiceCullFace `xml:"http://www.collada.org/2008/03/COLLADASchema cull_face"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_cull_facechoicegles_pipeline_settings_groupschema_CullFace_TxsdGlesPipelineSettingsGroupChoiceCullFace_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_cull_facechoicegles_pipeline_settings_groupschema_CullFace_TxsdGlesPipelineSettingsGroupChoiceCullFace_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_cull_facechoicegles_pipeline_settings_groupschema_CullFace_TxsdGlesPipelineSettingsGroupChoiceCullFace_ instance.
func (me *XsdGoPkgHasElem_cull_facechoicegles_pipeline_settings_groupschema_CullFace_TxsdGlesPipelineSettingsGroupChoiceCullFace_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_cull_facechoicegles_pipeline_settings_groupschema_CullFace_TxsdGlesPipelineSettingsGroupChoiceCullFace_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CullFace.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegles_pipeline_settings_groupschema_SampleAlphaToOneEnable_TxsdGlesPipelineSettingsGroupChoiceSampleAlphaToOneEnable_ struct {
	SampleAlphaToOneEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema sample_alpha_to_one_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegles_pipeline_settings_groupschema_SampleAlphaToOneEnable_TxsdGlesPipelineSettingsGroupChoiceSampleAlphaToOneEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegles_pipeline_settings_groupschema_SampleAlphaToOneEnable_TxsdGlesPipelineSettingsGroupChoiceSampleAlphaToOneEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegles_pipeline_settings_groupschema_SampleAlphaToOneEnable_TxsdGlesPipelineSettingsGroupChoiceSampleAlphaToOneEnable_ instance.
func (me *XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegles_pipeline_settings_groupschema_SampleAlphaToOneEnable_TxsdGlesPipelineSettingsGroupChoiceSampleAlphaToOneEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegles_pipeline_settings_groupschema_SampleAlphaToOneEnable_TxsdGlesPipelineSettingsGroupChoiceSampleAlphaToOneEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SampleAlphaToOneEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_scissor_test_enablechoicegles_pipeline_settings_groupschema_ScissorTestEnable_TxsdGlesPipelineSettingsGroupChoiceScissorTestEnable_ struct {
	ScissorTestEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema scissor_test_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_scissor_test_enablechoicegles_pipeline_settings_groupschema_ScissorTestEnable_TxsdGlesPipelineSettingsGroupChoiceScissorTestEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_scissor_test_enablechoicegles_pipeline_settings_groupschema_ScissorTestEnable_TxsdGlesPipelineSettingsGroupChoiceScissorTestEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_scissor_test_enablechoicegles_pipeline_settings_groupschema_ScissorTestEnable_TxsdGlesPipelineSettingsGroupChoiceScissorTestEnable_ instance.
func (me *XsdGoPkgHasElem_scissor_test_enablechoicegles_pipeline_settings_groupschema_ScissorTestEnable_TxsdGlesPipelineSettingsGroupChoiceScissorTestEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_scissor_test_enablechoicegles_pipeline_settings_groupschema_ScissorTestEnable_TxsdGlesPipelineSettingsGroupChoiceScissorTestEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ScissorTestEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlesPipelineSettingsGroupChoiceLightSpotExponent struct {
	XsdGoPkgHasAttr_Value_TfloatType_0

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglesMaxLightsIndexType_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsGroupChoiceLightSpotExponent function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsGroupChoiceLightSpotExponent instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsGroupChoiceLightSpotExponent instance.
func (me *TxsdGlesPipelineSettingsGroupChoiceLightSpotExponent) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsGroupChoiceLightSpotExponent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_spot_exponentchoicegles_pipeline_settings_groupschema_LightSpotExponent_TxsdGlesPipelineSettingsGroupChoiceLightSpotExponent_ struct {
	LightSpotExponent *TxsdGlesPipelineSettingsGroupChoiceLightSpotExponent `xml:"http://www.collada.org/2008/03/COLLADASchema light_spot_exponent"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_spot_exponentchoicegles_pipeline_settings_groupschema_LightSpotExponent_TxsdGlesPipelineSettingsGroupChoiceLightSpotExponent_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_spot_exponentchoicegles_pipeline_settings_groupschema_LightSpotExponent_TxsdGlesPipelineSettingsGroupChoiceLightSpotExponent_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_spot_exponentchoicegles_pipeline_settings_groupschema_LightSpotExponent_TxsdGlesPipelineSettingsGroupChoiceLightSpotExponent_ instance.
func (me *XsdGoPkgHasElem_light_spot_exponentchoicegles_pipeline_settings_groupschema_LightSpotExponent_TxsdGlesPipelineSettingsGroupChoiceLightSpotExponent_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_spot_exponentchoicegles_pipeline_settings_groupschema_LightSpotExponent_TxsdGlesPipelineSettingsGroupChoiceLightSpotExponent_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightSpotExponent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_rescale_normal_enablechoicegles_pipeline_settings_groupschema_RescaleNormalEnable_TxsdGlesPipelineSettingsGroupChoiceRescaleNormalEnable_ struct {
	RescaleNormalEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema rescale_normal_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_rescale_normal_enablechoicegles_pipeline_settings_groupschema_RescaleNormalEnable_TxsdGlesPipelineSettingsGroupChoiceRescaleNormalEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_rescale_normal_enablechoicegles_pipeline_settings_groupschema_RescaleNormalEnable_TxsdGlesPipelineSettingsGroupChoiceRescaleNormalEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_rescale_normal_enablechoicegles_pipeline_settings_groupschema_RescaleNormalEnable_TxsdGlesPipelineSettingsGroupChoiceRescaleNormalEnable_ instance.
func (me *XsdGoPkgHasElem_rescale_normal_enablechoicegles_pipeline_settings_groupschema_RescaleNormalEnable_TxsdGlesPipelineSettingsGroupChoiceRescaleNormalEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_rescale_normal_enablechoicegles_pipeline_settings_groupschema_RescaleNormalEnable_TxsdGlesPipelineSettingsGroupChoiceRescaleNormalEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RescaleNormalEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_model_two_side_enablechoicegles_pipeline_settings_groupschema_LightModelTwoSideEnable_TxsdGlesPipelineSettingsGroupChoiceLightModelTwoSideEnable_ struct {
	LightModelTwoSideEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema light_model_two_side_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_model_two_side_enablechoicegles_pipeline_settings_groupschema_LightModelTwoSideEnable_TxsdGlesPipelineSettingsGroupChoiceLightModelTwoSideEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_model_two_side_enablechoicegles_pipeline_settings_groupschema_LightModelTwoSideEnable_TxsdGlesPipelineSettingsGroupChoiceLightModelTwoSideEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_model_two_side_enablechoicegles_pipeline_settings_groupschema_LightModelTwoSideEnable_TxsdGlesPipelineSettingsGroupChoiceLightModelTwoSideEnable_ instance.
func (me *XsdGoPkgHasElem_light_model_two_side_enablechoicegles_pipeline_settings_groupschema_LightModelTwoSideEnable_TxsdGlesPipelineSettingsGroupChoiceLightModelTwoSideEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_model_two_side_enablechoicegles_pipeline_settings_groupschema_LightModelTwoSideEnable_TxsdGlesPipelineSettingsGroupChoiceLightModelTwoSideEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightModelTwoSideEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlesPipelineSettingsGroupChoiceLightSpecular struct {
	XsdGoPkgHasAttr_Value_Tfloat4Type_0000

	XsdGoPkgHasAttr_Index_TglesMaxLightsIndexType_

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsGroupChoiceLightSpecular function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsGroupChoiceLightSpecular instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsGroupChoiceLightSpecular instance.
func (me *TxsdGlesPipelineSettingsGroupChoiceLightSpecular) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsGroupChoiceLightSpecular; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_specularchoicegles_pipeline_settings_groupschema_LightSpecular_TxsdGlesPipelineSettingsGroupChoiceLightSpecular_ struct {
	LightSpecular *TxsdGlesPipelineSettingsGroupChoiceLightSpecular `xml:"http://www.collada.org/2008/03/COLLADASchema light_specular"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_specularchoicegles_pipeline_settings_groupschema_LightSpecular_TxsdGlesPipelineSettingsGroupChoiceLightSpecular_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_specularchoicegles_pipeline_settings_groupschema_LightSpecular_TxsdGlesPipelineSettingsGroupChoiceLightSpecular_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_specularchoicegles_pipeline_settings_groupschema_LightSpecular_TxsdGlesPipelineSettingsGroupChoiceLightSpecular_ instance.
func (me *XsdGoPkgHasElem_light_specularchoicegles_pipeline_settings_groupschema_LightSpecular_TxsdGlesPipelineSettingsGroupChoiceLightSpecular_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_specularchoicegles_pipeline_settings_groupschema_LightSpecular_TxsdGlesPipelineSettingsGroupChoiceLightSpecular_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightSpecular.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_diffusechoicegles_pipeline_settings_groupschema_LightDiffuse_TxsdGlesPipelineSettingsGroupChoiceLightDiffuse_ struct {
	LightDiffuse *TxsdGlesPipelineSettingsGroupChoiceLightSpecular `xml:"http://www.collada.org/2008/03/COLLADASchema light_diffuse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_diffusechoicegles_pipeline_settings_groupschema_LightDiffuse_TxsdGlesPipelineSettingsGroupChoiceLightDiffuse_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_diffusechoicegles_pipeline_settings_groupschema_LightDiffuse_TxsdGlesPipelineSettingsGroupChoiceLightDiffuse_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_diffusechoicegles_pipeline_settings_groupschema_LightDiffuse_TxsdGlesPipelineSettingsGroupChoiceLightDiffuse_ instance.
func (me *XsdGoPkgHasElem_light_diffusechoicegles_pipeline_settings_groupschema_LightDiffuse_TxsdGlesPipelineSettingsGroupChoiceLightDiffuse_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_diffusechoicegles_pipeline_settings_groupschema_LightDiffuse_TxsdGlesPipelineSettingsGroupChoiceLightDiffuse_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightDiffuse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_valuesequencealpha_funcchoicegles_pipeline_settings_groupschema_Value_TxsdGlesPipelineSettingsGroupChoiceAlphaFuncSequenceValue_ struct {
	Value *TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceValue `xml:"http://www.collada.org/2008/03/COLLADASchema value"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_valuesequencealpha_funcchoicegles_pipeline_settings_groupschema_Value_TxsdGlesPipelineSettingsGroupChoiceAlphaFuncSequenceValue_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_valuesequencealpha_funcchoicegles_pipeline_settings_groupschema_Value_TxsdGlesPipelineSettingsGroupChoiceAlphaFuncSequenceValue_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_valuesequencealpha_funcchoicegles_pipeline_settings_groupschema_Value_TxsdGlesPipelineSettingsGroupChoiceAlphaFuncSequenceValue_ instance.
func (me *XsdGoPkgHasElem_valuesequencealpha_funcchoicegles_pipeline_settings_groupschema_Value_TxsdGlesPipelineSettingsGroupChoiceAlphaFuncSequenceValue_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_valuesequencealpha_funcchoicegles_pipeline_settings_groupschema_Value_TxsdGlesPipelineSettingsGroupChoiceAlphaFuncSequenceValue_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Value.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_funcsequencealpha_funcchoicegles_pipeline_settings_groupschema_Func_TxsdGlesPipelineSettingsGroupChoiceAlphaFuncSequenceFunc_ struct {
	Func *TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceFunc `xml:"http://www.collada.org/2008/03/COLLADASchema func"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_funcsequencealpha_funcchoicegles_pipeline_settings_groupschema_Func_TxsdGlesPipelineSettingsGroupChoiceAlphaFuncSequenceFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_funcsequencealpha_funcchoicegles_pipeline_settings_groupschema_Func_TxsdGlesPipelineSettingsGroupChoiceAlphaFuncSequenceFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_funcsequencealpha_funcchoicegles_pipeline_settings_groupschema_Func_TxsdGlesPipelineSettingsGroupChoiceAlphaFuncSequenceFunc_ instance.
func (me *XsdGoPkgHasElem_funcsequencealpha_funcchoicegles_pipeline_settings_groupschema_Func_TxsdGlesPipelineSettingsGroupChoiceAlphaFuncSequenceFunc_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_funcsequencealpha_funcchoicegles_pipeline_settings_groupschema_Func_TxsdGlesPipelineSettingsGroupChoiceAlphaFuncSequenceFunc_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Func.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlesPipelineSettingsGroupChoiceAlphaFunc struct {
	XsdGoPkgHasElem_funcsequencealpha_funcchoicegles_pipeline_settings_groupschema_Func_TxsdGlesPipelineSettingsGroupChoiceAlphaFuncSequenceFunc_

	XsdGoPkgHasElem_valuesequencealpha_funcchoicegles_pipeline_settings_groupschema_Value_TxsdGlesPipelineSettingsGroupChoiceAlphaFuncSequenceValue_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsGroupChoiceAlphaFunc function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsGroupChoiceAlphaFunc instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsGroupChoiceAlphaFunc instance.
func (me *TxsdGlesPipelineSettingsGroupChoiceAlphaFunc) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsGroupChoiceAlphaFunc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_valuesequencealpha_funcchoicegles_pipeline_settings_groupschema_Value_TxsdGlesPipelineSettingsGroupChoiceAlphaFuncSequenceValue_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_funcsequencealpha_funcchoicegles_pipeline_settings_groupschema_Func_TxsdGlesPipelineSettingsGroupChoiceAlphaFuncSequenceFunc_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_alpha_funcchoicegles_pipeline_settings_groupschema_AlphaFunc_TxsdGlesPipelineSettingsGroupChoiceAlphaFunc_ struct {
	AlphaFunc *TxsdGlesPipelineSettingsGroupChoiceAlphaFunc `xml:"http://www.collada.org/2008/03/COLLADASchema alpha_func"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_alpha_funcchoicegles_pipeline_settings_groupschema_AlphaFunc_TxsdGlesPipelineSettingsGroupChoiceAlphaFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_alpha_funcchoicegles_pipeline_settings_groupschema_AlphaFunc_TxsdGlesPipelineSettingsGroupChoiceAlphaFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_alpha_funcchoicegles_pipeline_settings_groupschema_AlphaFunc_TxsdGlesPipelineSettingsGroupChoiceAlphaFunc_ instance.
func (me *XsdGoPkgHasElem_alpha_funcchoicegles_pipeline_settings_groupschema_AlphaFunc_TxsdGlesPipelineSettingsGroupChoiceAlphaFunc_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_alpha_funcchoicegles_pipeline_settings_groupschema_AlphaFunc_TxsdGlesPipelineSettingsGroupChoiceAlphaFunc_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AlphaFunc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles_pipeline_settings_groupschema_SampleAlphaToCoverageEnable_TxsdGlesPipelineSettingsGroupChoiceSampleAlphaToCoverageEnable_ struct {
	SampleAlphaToCoverageEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema sample_alpha_to_coverage_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles_pipeline_settings_groupschema_SampleAlphaToCoverageEnable_TxsdGlesPipelineSettingsGroupChoiceSampleAlphaToCoverageEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles_pipeline_settings_groupschema_SampleAlphaToCoverageEnable_TxsdGlesPipelineSettingsGroupChoiceSampleAlphaToCoverageEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles_pipeline_settings_groupschema_SampleAlphaToCoverageEnable_TxsdGlesPipelineSettingsGroupChoiceSampleAlphaToCoverageEnable_ instance.
func (me *XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles_pipeline_settings_groupschema_SampleAlphaToCoverageEnable_TxsdGlesPipelineSettingsGroupChoiceSampleAlphaToCoverageEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles_pipeline_settings_groupschema_SampleAlphaToCoverageEnable_TxsdGlesPipelineSettingsGroupChoiceSampleAlphaToCoverageEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SampleAlphaToCoverageEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_depth_rangechoicegles_pipeline_settings_groupschema_DepthRange_TxsdGlesPipelineSettingsGroupChoiceDepthRange_ struct {
	DepthRange *TxsdGlPipelineSettingsGroupChoiceDepthRange `xml:"http://www.collada.org/2008/03/COLLADASchema depth_range"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_depth_rangechoicegles_pipeline_settings_groupschema_DepthRange_TxsdGlesPipelineSettingsGroupChoiceDepthRange_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_rangechoicegles_pipeline_settings_groupschema_DepthRange_TxsdGlesPipelineSettingsGroupChoiceDepthRange_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_depth_rangechoicegles_pipeline_settings_groupschema_DepthRange_TxsdGlesPipelineSettingsGroupChoiceDepthRange_ instance.
func (me *XsdGoPkgHasElem_depth_rangechoicegles_pipeline_settings_groupschema_DepthRange_TxsdGlesPipelineSettingsGroupChoiceDepthRange_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_depth_rangechoicegles_pipeline_settings_groupschema_DepthRange_TxsdGlesPipelineSettingsGroupChoiceDepthRange_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DepthRange.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_dither_enablechoicegles_pipeline_settings_groupschema_DitherEnable_TxsdGlesPipelineSettingsGroupChoiceDitherEnable_ struct {
	DitherEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema dither_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_dither_enablechoicegles_pipeline_settings_groupschema_DitherEnable_TxsdGlesPipelineSettingsGroupChoiceDitherEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_dither_enablechoicegles_pipeline_settings_groupschema_DitherEnable_TxsdGlesPipelineSettingsGroupChoiceDitherEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_dither_enablechoicegles_pipeline_settings_groupschema_DitherEnable_TxsdGlesPipelineSettingsGroupChoiceDitherEnable_ instance.
func (me *XsdGoPkgHasElem_dither_enablechoicegles_pipeline_settings_groupschema_DitherEnable_TxsdGlesPipelineSettingsGroupChoiceDitherEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_dither_enablechoicegles_pipeline_settings_groupschema_DitherEnable_TxsdGlesPipelineSettingsGroupChoiceDitherEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DitherEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_constant_attenuationchoicegles_pipeline_settings_groupschema_LightConstantAttenuation_TxsdGlesPipelineSettingsGroupChoiceLightConstantAttenuation_ struct {
	LightConstantAttenuation *TxsdGlesPipelineSettingsGroupChoiceLightQuadraticAttenuation `xml:"http://www.collada.org/2008/03/COLLADASchema light_constant_attenuation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_constant_attenuationchoicegles_pipeline_settings_groupschema_LightConstantAttenuation_TxsdGlesPipelineSettingsGroupChoiceLightConstantAttenuation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_constant_attenuationchoicegles_pipeline_settings_groupschema_LightConstantAttenuation_TxsdGlesPipelineSettingsGroupChoiceLightConstantAttenuation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_constant_attenuationchoicegles_pipeline_settings_groupschema_LightConstantAttenuation_TxsdGlesPipelineSettingsGroupChoiceLightConstantAttenuation_ instance.
func (me *XsdGoPkgHasElem_light_constant_attenuationchoicegles_pipeline_settings_groupschema_LightConstantAttenuation_TxsdGlesPipelineSettingsGroupChoiceLightConstantAttenuation_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_constant_attenuationchoicegles_pipeline_settings_groupschema_LightConstantAttenuation_TxsdGlesPipelineSettingsGroupChoiceLightConstantAttenuation_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightConstantAttenuation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_material_emissionchoicegles_pipeline_settings_groupschema_MaterialEmission_TxsdGlesPipelineSettingsGroupChoiceMaterialEmission_ struct {
	MaterialEmission *TxsdGlPipelineSettingsGroupChoiceMaterialSpecular `xml:"http://www.collada.org/2008/03/COLLADASchema material_emission"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_material_emissionchoicegles_pipeline_settings_groupschema_MaterialEmission_TxsdGlesPipelineSettingsGroupChoiceMaterialEmission_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_material_emissionchoicegles_pipeline_settings_groupschema_MaterialEmission_TxsdGlesPipelineSettingsGroupChoiceMaterialEmission_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_material_emissionchoicegles_pipeline_settings_groupschema_MaterialEmission_TxsdGlesPipelineSettingsGroupChoiceMaterialEmission_ instance.
func (me *XsdGoPkgHasElem_material_emissionchoicegles_pipeline_settings_groupschema_MaterialEmission_TxsdGlesPipelineSettingsGroupChoiceMaterialEmission_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_material_emissionchoicegles_pipeline_settings_groupschema_MaterialEmission_TxsdGlesPipelineSettingsGroupChoiceMaterialEmission_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MaterialEmission.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_linear_attenuationchoicegles_pipeline_settings_groupschema_LightLinearAttenuation_TxsdGlesPipelineSettingsGroupChoiceLightLinearAttenuation_ struct {
	LightLinearAttenuation *TxsdGlesPipelineSettingsGroupChoiceLightQuadraticAttenuation `xml:"http://www.collada.org/2008/03/COLLADASchema light_linear_attenuation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_linear_attenuationchoicegles_pipeline_settings_groupschema_LightLinearAttenuation_TxsdGlesPipelineSettingsGroupChoiceLightLinearAttenuation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_linear_attenuationchoicegles_pipeline_settings_groupschema_LightLinearAttenuation_TxsdGlesPipelineSettingsGroupChoiceLightLinearAttenuation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_linear_attenuationchoicegles_pipeline_settings_groupschema_LightLinearAttenuation_TxsdGlesPipelineSettingsGroupChoiceLightLinearAttenuation_ instance.
func (me *XsdGoPkgHasElem_light_linear_attenuationchoicegles_pipeline_settings_groupschema_LightLinearAttenuation_TxsdGlesPipelineSettingsGroupChoiceLightLinearAttenuation_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_linear_attenuationchoicegles_pipeline_settings_groupschema_LightLinearAttenuation_TxsdGlesPipelineSettingsGroupChoiceLightLinearAttenuation_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightLinearAttenuation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_material_specularchoicegles_pipeline_settings_groupschema_MaterialSpecular_TxsdGlesPipelineSettingsGroupChoiceMaterialSpecular_ struct {
	MaterialSpecular *TxsdGlPipelineSettingsGroupChoiceMaterialSpecular `xml:"http://www.collada.org/2008/03/COLLADASchema material_specular"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_material_specularchoicegles_pipeline_settings_groupschema_MaterialSpecular_TxsdGlesPipelineSettingsGroupChoiceMaterialSpecular_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_material_specularchoicegles_pipeline_settings_groupschema_MaterialSpecular_TxsdGlesPipelineSettingsGroupChoiceMaterialSpecular_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_material_specularchoicegles_pipeline_settings_groupschema_MaterialSpecular_TxsdGlesPipelineSettingsGroupChoiceMaterialSpecular_ instance.
func (me *XsdGoPkgHasElem_material_specularchoicegles_pipeline_settings_groupschema_MaterialSpecular_TxsdGlesPipelineSettingsGroupChoiceMaterialSpecular_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_material_specularchoicegles_pipeline_settings_groupschema_MaterialSpecular_TxsdGlesPipelineSettingsGroupChoiceMaterialSpecular_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MaterialSpecular.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlesPipelineSettingsGroupChoiceLightSpotCutoff struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglesMaxLightsIndexType_

	XsdGoPkgHasAttr_Value_TfloatType_180
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsGroupChoiceLightSpotCutoff function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsGroupChoiceLightSpotCutoff instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsGroupChoiceLightSpotCutoff instance.
func (me *TxsdGlesPipelineSettingsGroupChoiceLightSpotCutoff) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsGroupChoiceLightSpotCutoff; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_spot_cutoffchoicegles_pipeline_settings_groupschema_LightSpotCutoff_TxsdGlesPipelineSettingsGroupChoiceLightSpotCutoff_ struct {
	LightSpotCutoff *TxsdGlesPipelineSettingsGroupChoiceLightSpotCutoff `xml:"http://www.collada.org/2008/03/COLLADASchema light_spot_cutoff"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_spot_cutoffchoicegles_pipeline_settings_groupschema_LightSpotCutoff_TxsdGlesPipelineSettingsGroupChoiceLightSpotCutoff_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_spot_cutoffchoicegles_pipeline_settings_groupschema_LightSpotCutoff_TxsdGlesPipelineSettingsGroupChoiceLightSpotCutoff_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_spot_cutoffchoicegles_pipeline_settings_groupschema_LightSpotCutoff_TxsdGlesPipelineSettingsGroupChoiceLightSpotCutoff_ instance.
func (me *XsdGoPkgHasElem_light_spot_cutoffchoicegles_pipeline_settings_groupschema_LightSpotCutoff_TxsdGlesPipelineSettingsGroupChoiceLightSpotCutoff_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_spot_cutoffchoicegles_pipeline_settings_groupschema_LightSpotCutoff_TxsdGlesPipelineSettingsGroupChoiceLightSpotCutoff_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightSpotCutoff.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_model_view_matrixchoicegles_pipeline_settings_groupschema_ModelViewMatrix_TxsdGlesPipelineSettingsGroupChoiceModelViewMatrix_ struct {
	ModelViewMatrix *TxsdGlPipelineSettingsGroupChoiceModelViewMatrix `xml:"http://www.collada.org/2008/03/COLLADASchema model_view_matrix"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_model_view_matrixchoicegles_pipeline_settings_groupschema_ModelViewMatrix_TxsdGlesPipelineSettingsGroupChoiceModelViewMatrix_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_model_view_matrixchoicegles_pipeline_settings_groupschema_ModelViewMatrix_TxsdGlesPipelineSettingsGroupChoiceModelViewMatrix_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_model_view_matrixchoicegles_pipeline_settings_groupschema_ModelViewMatrix_TxsdGlesPipelineSettingsGroupChoiceModelViewMatrix_ instance.
func (me *XsdGoPkgHasElem_model_view_matrixchoicegles_pipeline_settings_groupschema_ModelViewMatrix_TxsdGlesPipelineSettingsGroupChoiceModelViewMatrix_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_model_view_matrixchoicegles_pipeline_settings_groupschema_ModelViewMatrix_TxsdGlesPipelineSettingsGroupChoiceModelViewMatrix_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ModelViewMatrix.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fog_densitychoicegles_pipeline_settings_groupschema_FogDensity_TxsdGlesPipelineSettingsGroupChoiceFogDensity_ struct {
	FogDensity *TxsdGlPipelineSettingsGroupChoiceFogEnd `xml:"http://www.collada.org/2008/03/COLLADASchema fog_density"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fog_densitychoicegles_pipeline_settings_groupschema_FogDensity_TxsdGlesPipelineSettingsGroupChoiceFogDensity_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_densitychoicegles_pipeline_settings_groupschema_FogDensity_TxsdGlesPipelineSettingsGroupChoiceFogDensity_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_densitychoicegles_pipeline_settings_groupschema_FogDensity_TxsdGlesPipelineSettingsGroupChoiceFogDensity_ instance.
func (me *XsdGoPkgHasElem_fog_densitychoicegles_pipeline_settings_groupschema_FogDensity_TxsdGlesPipelineSettingsGroupChoiceFogDensity_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fog_densitychoicegles_pipeline_settings_groupschema_FogDensity_TxsdGlesPipelineSettingsGroupChoiceFogDensity_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FogDensity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_point_smooth_enablechoicegles_pipeline_settings_groupschema_PointSmoothEnable_TxsdGlesPipelineSettingsGroupChoicePointSmoothEnable_ struct {
	PointSmoothEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema point_smooth_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_point_smooth_enablechoicegles_pipeline_settings_groupschema_PointSmoothEnable_TxsdGlesPipelineSettingsGroupChoicePointSmoothEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_smooth_enablechoicegles_pipeline_settings_groupschema_PointSmoothEnable_TxsdGlesPipelineSettingsGroupChoicePointSmoothEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_smooth_enablechoicegles_pipeline_settings_groupschema_PointSmoothEnable_TxsdGlesPipelineSettingsGroupChoicePointSmoothEnable_ instance.
func (me *XsdGoPkgHasElem_point_smooth_enablechoicegles_pipeline_settings_groupschema_PointSmoothEnable_TxsdGlesPipelineSettingsGroupChoicePointSmoothEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_point_smooth_enablechoicegles_pipeline_settings_groupschema_PointSmoothEnable_TxsdGlesPipelineSettingsGroupChoicePointSmoothEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PointSmoothEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlesPipelineSettingsGroupChoiceLightAmbient struct {
	XsdGoPkgHasAttr_Value_Tfloat4Type_0001

	XsdGoPkgHasAttr_Index_TglesMaxLightsIndexType_

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsGroupChoiceLightAmbient function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsGroupChoiceLightAmbient instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsGroupChoiceLightAmbient instance.
func (me *TxsdGlesPipelineSettingsGroupChoiceLightAmbient) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsGroupChoiceLightAmbient; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_ambientchoicegles_pipeline_settings_groupschema_LightAmbient_TxsdGlesPipelineSettingsGroupChoiceLightAmbient_ struct {
	LightAmbient *TxsdGlesPipelineSettingsGroupChoiceLightAmbient `xml:"http://www.collada.org/2008/03/COLLADASchema light_ambient"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_ambientchoicegles_pipeline_settings_groupschema_LightAmbient_TxsdGlesPipelineSettingsGroupChoiceLightAmbient_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_ambientchoicegles_pipeline_settings_groupschema_LightAmbient_TxsdGlesPipelineSettingsGroupChoiceLightAmbient_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_ambientchoicegles_pipeline_settings_groupschema_LightAmbient_TxsdGlesPipelineSettingsGroupChoiceLightAmbient_ instance.
func (me *XsdGoPkgHasElem_light_ambientchoicegles_pipeline_settings_groupschema_LightAmbient_TxsdGlesPipelineSettingsGroupChoiceLightAmbient_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_ambientchoicegles_pipeline_settings_groupschema_LightAmbient_TxsdGlesPipelineSettingsGroupChoiceLightAmbient_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightAmbient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fog_startchoicegles_pipeline_settings_groupschema_FogStart_TxsdGlesPipelineSettingsGroupChoiceFogStart_ struct {
	FogStart *TxsdGlPipelineSettingsGroupChoicePointSizeMin `xml:"http://www.collada.org/2008/03/COLLADASchema fog_start"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fog_startchoicegles_pipeline_settings_groupschema_FogStart_TxsdGlesPipelineSettingsGroupChoiceFogStart_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_startchoicegles_pipeline_settings_groupschema_FogStart_TxsdGlesPipelineSettingsGroupChoiceFogStart_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_startchoicegles_pipeline_settings_groupschema_FogStart_TxsdGlesPipelineSettingsGroupChoiceFogStart_ instance.
func (me *XsdGoPkgHasElem_fog_startchoicegles_pipeline_settings_groupschema_FogStart_TxsdGlesPipelineSettingsGroupChoiceFogStart_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fog_startchoicegles_pipeline_settings_groupschema_FogStart_TxsdGlesPipelineSettingsGroupChoiceFogStart_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FogStart.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_front_facechoicegles_pipeline_settings_groupschema_FrontFace_TxsdGlesPipelineSettingsGroupChoiceFrontFace_ struct {
	FrontFace *TxsdGlPipelineSettingsGroupChoiceFrontFace `xml:"http://www.collada.org/2008/03/COLLADASchema front_face"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_front_facechoicegles_pipeline_settings_groupschema_FrontFace_TxsdGlesPipelineSettingsGroupChoiceFrontFace_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_front_facechoicegles_pipeline_settings_groupschema_FrontFace_TxsdGlesPipelineSettingsGroupChoiceFrontFace_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_front_facechoicegles_pipeline_settings_groupschema_FrontFace_TxsdGlesPipelineSettingsGroupChoiceFrontFace_ instance.
func (me *XsdGoPkgHasElem_front_facechoicegles_pipeline_settings_groupschema_FrontFace_TxsdGlesPipelineSettingsGroupChoiceFrontFace_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_front_facechoicegles_pipeline_settings_groupschema_FrontFace_TxsdGlesPipelineSettingsGroupChoiceFrontFace_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FrontFace.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles_pipeline_settings_groupschema_PolygonOffsetFillEnable_TxsdGlesPipelineSettingsGroupChoicePolygonOffsetFillEnable_ struct {
	PolygonOffsetFillEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema polygon_offset_fill_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles_pipeline_settings_groupschema_PolygonOffsetFillEnable_TxsdGlesPipelineSettingsGroupChoicePolygonOffsetFillEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles_pipeline_settings_groupschema_PolygonOffsetFillEnable_TxsdGlesPipelineSettingsGroupChoicePolygonOffsetFillEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles_pipeline_settings_groupschema_PolygonOffsetFillEnable_TxsdGlesPipelineSettingsGroupChoicePolygonOffsetFillEnable_ instance.
func (me *XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles_pipeline_settings_groupschema_PolygonOffsetFillEnable_TxsdGlesPipelineSettingsGroupChoicePolygonOffsetFillEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles_pipeline_settings_groupschema_PolygonOffsetFillEnable_TxsdGlesPipelineSettingsGroupChoicePolygonOffsetFillEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PolygonOffsetFillEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Defines a set of texturing commands that will be converted into multitexturing operations using glTexEnv in regular and combiner mode.
//	Defines a texture_pipeline command. This is a combiner-mode texturing operation.
//	Defines the RGB portion of a texture_pipeline command. This is a combiner-mode texturing operation.
type TglesTexcombinerOperandRgbEnum TglBlendEnum

//	This convenience method just performs a simple type conversion to TglesTexcombinerOperandRgbEnum's alias type TglBlendEnum.
func (me TglesTexcombinerOperandRgbEnum) ToTglBlendEnum() TglBlendEnum { return TglBlendEnum(me) }

//	Returns true if the value of this enumerated TglesTexcombinerOperandRgbEnum is "ONE_MINUS_SRC_COLOR".
func (me TglesTexcombinerOperandRgbEnum) IsOneMinusSrcColor() bool {
	return me == "ONE_MINUS_SRC_COLOR"
}

//	Returns true if the value of this enumerated TglesTexcombinerOperandRgbEnum is "SRC_COLOR".
func (me TglesTexcombinerOperandRgbEnum) IsSrcColor() bool { return me == "SRC_COLOR" }

//	Since TglesTexcombinerOperandRgbEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesTexcombinerOperandRgbEnum) Set(s string) { (*TglBlendEnum)(me).Set(s) }

//	Returns true if the value of this enumerated TglesTexcombinerOperandRgbEnum is "SRC_ALPHA".
func (me TglesTexcombinerOperandRgbEnum) IsSrcAlpha() bool { return me == "SRC_ALPHA" }

//	Returns true if the value of this enumerated TglesTexcombinerOperandRgbEnum is "ONE_MINUS_SRC_ALPHA".
func (me TglesTexcombinerOperandRgbEnum) IsOneMinusSrcAlpha() bool {
	return me == "ONE_MINUS_SRC_ALPHA"
}

//	Since TglesTexcombinerOperandRgbEnum is just a simple String type, this merely returns the current string value.
func (me TglesTexcombinerOperandRgbEnum) String() string { return TglBlendEnum(me).String() }

type XsdGoPkgHasAttr_Operand_TglesTexcombinerOperandRgbEnum_SrcColor struct {
	Operand TglesTexcombinerOperandRgbEnum `xml:"http://www.collada.org/2008/03/COLLADASchema operand,attr"`
}

//	Returns the default value for Operand -- "SRC_COLOR"
func (me XsdGoPkgHasAttr_Operand_TglesTexcombinerOperandRgbEnum_SrcColor) OperandDefault() TglesTexcombinerOperandRgbEnum {
	return TglesTexcombinerOperandRgbEnum("SRC_COLOR")
}

type TglesTexcombinerSourceEnum xsdt.Token

//	Since TglesTexcombinerSourceEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesTexcombinerSourceEnum) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Returns true if the value of this enumerated TglesTexcombinerSourceEnum is "TEXTURE".
func (me TglesTexcombinerSourceEnum) IsTexture() bool { return me == "TEXTURE" }

//	This convenience method just performs a simple type conversion to TglesTexcombinerSourceEnum's alias type xsdt.Token.
func (me TglesTexcombinerSourceEnum) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TglesTexcombinerSourceEnum is "PREVIOUS".
func (me TglesTexcombinerSourceEnum) IsPrevious() bool { return me == "PREVIOUS" }

//	Returns true if the value of this enumerated TglesTexcombinerSourceEnum is "PRIMARY".
func (me TglesTexcombinerSourceEnum) IsPrimary() bool { return me == "PRIMARY" }

//	Returns true if the value of this enumerated TglesTexcombinerSourceEnum is "CONSTANT".
func (me TglesTexcombinerSourceEnum) IsConstant() bool { return me == "CONSTANT" }

//	Since TglesTexcombinerSourceEnum is just a simple String type, this merely returns the current string value.
func (me TglesTexcombinerSourceEnum) String() string { return xsdt.Token(me).String() }

type XsdGoPkgHasAttr_Source_TglesTexcombinerSourceEnum_ struct {
	Source TglesTexcombinerSourceEnum `xml:"http://www.collada.org/2008/03/COLLADASchema source,attr"`
}

type XsdGoPkgHasAttr_Sampler_XsdtNCName_ struct {
	Sampler xsdt.NCName `xml:"http://www.collada.org/2008/03/COLLADASchema sampler,attr"`
}

type TglesTexcombinerArgumentRgbType struct {
	XsdGoPkgHasAttr_Sampler_XsdtNCName_

	XsdGoPkgHasAttr_Operand_TglesTexcombinerOperandRgbEnum_SrcColor

	XsdGoPkgHasAttr_Source_TglesTexcombinerSourceEnum_
}

//	If the WalkHandlers.TglesTexcombinerArgumentRgbType function is not nil (ie. was set by outside code), calls it with this TglesTexcombinerArgumentRgbType instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TglesTexcombinerArgumentRgbType instance.
func (me *TglesTexcombinerArgumentRgbType) Walk() (err error) {
	if fn := WalkHandlers.TglesTexcombinerArgumentRgbType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_argumentsequencegles_texcombiner_command_rgb_typeschema_Argument_TglesTexcombinerArgumentRgbType_ struct {
	Arguments []*TglesTexcombinerArgumentRgbType `xml:"http://www.collada.org/2008/03/COLLADASchema argument"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_argumentsequencegles_texcombiner_command_rgb_typeschema_Argument_TglesTexcombinerArgumentRgbType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_argumentsequencegles_texcombiner_command_rgb_typeschema_Argument_TglesTexcombinerArgumentRgbType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_argumentsequencegles_texcombiner_command_rgb_typeschema_Argument_TglesTexcombinerArgumentRgbType_ instance.
func (me *XsdGoPkgHasElems_argumentsequencegles_texcombiner_command_rgb_typeschema_Argument_TglesTexcombinerArgumentRgbType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_argumentsequencegles_texcombiner_command_rgb_typeschema_Argument_TglesTexcombinerArgumentRgbType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Arguments {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglesTexcombinerOperatorRgbEnum xsdt.Token

//	Since TglesTexcombinerOperatorRgbEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesTexcombinerOperatorRgbEnum) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorRgbEnum is "MODULATE".
func (me TglesTexcombinerOperatorRgbEnum) IsModulate() bool { return me == "MODULATE" }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorRgbEnum is "REPLACE".
func (me TglesTexcombinerOperatorRgbEnum) IsReplace() bool { return me == "REPLACE" }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorRgbEnum is "SUBTRACT".
func (me TglesTexcombinerOperatorRgbEnum) IsSubtract() bool { return me == "SUBTRACT" }

//	This convenience method just performs a simple type conversion to TglesTexcombinerOperatorRgbEnum's alias type xsdt.Token.
func (me TglesTexcombinerOperatorRgbEnum) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorRgbEnum is "DOT3_RGBA".
func (me TglesTexcombinerOperatorRgbEnum) IsDot3Rgba() bool { return me == "DOT3_RGBA" }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorRgbEnum is "INTERPOLATE".
func (me TglesTexcombinerOperatorRgbEnum) IsInterpolate() bool { return me == "INTERPOLATE" }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorRgbEnum is "ADD".
func (me TglesTexcombinerOperatorRgbEnum) IsAdd() bool { return me == "ADD" }

//	Since TglesTexcombinerOperatorRgbEnum is just a simple String type, this merely returns the current string value.
func (me TglesTexcombinerOperatorRgbEnum) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorRgbEnum is "DOT3_RGB".
func (me TglesTexcombinerOperatorRgbEnum) IsDot3Rgb() bool { return me == "DOT3_RGB" }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorRgbEnum is "ADD_SIGNED".
func (me TglesTexcombinerOperatorRgbEnum) IsAddSigned() bool { return me == "ADD_SIGNED" }

type XsdGoPkgHasAttr_Operator_TglesTexcombinerOperatorRgbEnum_ struct {
	Operator TglesTexcombinerOperatorRgbEnum `xml:"http://www.collada.org/2008/03/COLLADASchema operator,attr"`
}

type XsdGoPkgHasAttr_Scale_XsdtFloat_ struct {
	Scale xsdt.Float `xml:"http://www.collada.org/2008/03/COLLADASchema scale,attr"`
}

type TglesTexcombinerCommandRgbType struct {
	XsdGoPkgHasElems_argumentsequencegles_texcombiner_command_rgb_typeschema_Argument_TglesTexcombinerArgumentRgbType_

	XsdGoPkgHasAttr_Operator_TglesTexcombinerOperatorRgbEnum_

	XsdGoPkgHasAttr_Scale_XsdtFloat_
}

//	If the WalkHandlers.TglesTexcombinerCommandRgbType function is not nil (ie. was set by outside code), calls it with this TglesTexcombinerCommandRgbType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TglesTexcombinerCommandRgbType instance.
func (me *TglesTexcombinerCommandRgbType) Walk() (err error) {
	if fn := WalkHandlers.TglesTexcombinerCommandRgbType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_argumentsequencegles_texcombiner_command_rgb_typeschema_Argument_TglesTexcombinerArgumentRgbType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RGBsequencegles_texcombiner_command_typeschema_Rgb_TglesTexcombinerCommandRgbType_ struct {
	Rgb *TglesTexcombinerCommandRgbType `xml:"http://www.collada.org/2008/03/COLLADASchema RGB"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RGBsequencegles_texcombiner_command_typeschema_Rgb_TglesTexcombinerCommandRgbType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RGBsequencegles_texcombiner_command_typeschema_Rgb_TglesTexcombinerCommandRgbType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RGBsequencegles_texcombiner_command_typeschema_Rgb_TglesTexcombinerCommandRgbType_ instance.
func (me *XsdGoPkgHasElem_RGBsequencegles_texcombiner_command_typeschema_Rgb_TglesTexcombinerCommandRgbType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RGBsequencegles_texcombiner_command_typeschema_Rgb_TglesTexcombinerCommandRgbType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Rgb.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglesTextureConstantType struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat4Type_
}

//	If the WalkHandlers.TglesTextureConstantType function is not nil (ie. was set by outside code), calls it with this TglesTextureConstantType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TglesTextureConstantType instance.
func (me *TglesTextureConstantType) Walk() (err error) {
	if fn := WalkHandlers.TglesTextureConstantType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_constantsequencegles_texcombiner_command_typeschema_Constant_TglesTextureConstantType_ struct {
	Constant *TglesTextureConstantType `xml:"http://www.collada.org/2008/03/COLLADASchema constant"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_constantsequencegles_texcombiner_command_typeschema_Constant_TglesTextureConstantType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_constantsequencegles_texcombiner_command_typeschema_Constant_TglesTextureConstantType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_constantsequencegles_texcombiner_command_typeschema_Constant_TglesTextureConstantType_ instance.
func (me *XsdGoPkgHasElem_constantsequencegles_texcombiner_command_typeschema_Constant_TglesTextureConstantType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_constantsequencegles_texcombiner_command_typeschema_Constant_TglesTextureConstantType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Constant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglesTexcombinerOperandAlphaEnum TglBlendEnum

//	Returns true if the value of this enumerated TglesTexcombinerOperandAlphaEnum is "SRC_ALPHA".
func (me TglesTexcombinerOperandAlphaEnum) IsSrcAlpha() bool { return me == "SRC_ALPHA" }

//	Since TglesTexcombinerOperandAlphaEnum is just a simple String type, this merely returns the current string value.
func (me TglesTexcombinerOperandAlphaEnum) String() string { return TglBlendEnum(me).String() }

//	This convenience method just performs a simple type conversion to TglesTexcombinerOperandAlphaEnum's alias type TglBlendEnum.
func (me TglesTexcombinerOperandAlphaEnum) ToTglBlendEnum() TglBlendEnum { return TglBlendEnum(me) }

//	Since TglesTexcombinerOperandAlphaEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesTexcombinerOperandAlphaEnum) Set(s string) { (*TglBlendEnum)(me).Set(s) }

//	Returns true if the value of this enumerated TglesTexcombinerOperandAlphaEnum is "ONE_MINUS_SRC_ALPHA".
func (me TglesTexcombinerOperandAlphaEnum) IsOneMinusSrcAlpha() bool {
	return me == "ONE_MINUS_SRC_ALPHA"
}

type XsdGoPkgHasAttr_Operand_TglesTexcombinerOperandAlphaEnum_SrcAlpha struct {
	Operand TglesTexcombinerOperandAlphaEnum `xml:"http://www.collada.org/2008/03/COLLADASchema operand,attr"`
}

//	Returns the default value for Operand -- "SRC_ALPHA"
func (me XsdGoPkgHasAttr_Operand_TglesTexcombinerOperandAlphaEnum_SrcAlpha) OperandDefault() TglesTexcombinerOperandAlphaEnum {
	return TglesTexcombinerOperandAlphaEnum("SRC_ALPHA")
}

type TglesTexcombinerArgumentAlphaType struct {
	XsdGoPkgHasAttr_Source_TglesTexcombinerSourceEnum_

	XsdGoPkgHasAttr_Operand_TglesTexcombinerOperandAlphaEnum_SrcAlpha

	XsdGoPkgHasAttr_Sampler_XsdtNCName_
}

//	If the WalkHandlers.TglesTexcombinerArgumentAlphaType function is not nil (ie. was set by outside code), calls it with this TglesTexcombinerArgumentAlphaType instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TglesTexcombinerArgumentAlphaType instance.
func (me *TglesTexcombinerArgumentAlphaType) Walk() (err error) {
	if fn := WalkHandlers.TglesTexcombinerArgumentAlphaType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_argumentsequencegles_texcombiner_command_alpha_typeschema_Argument_TglesTexcombinerArgumentAlphaType_ struct {
	Arguments []*TglesTexcombinerArgumentAlphaType `xml:"http://www.collada.org/2008/03/COLLADASchema argument"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_argumentsequencegles_texcombiner_command_alpha_typeschema_Argument_TglesTexcombinerArgumentAlphaType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_argumentsequencegles_texcombiner_command_alpha_typeschema_Argument_TglesTexcombinerArgumentAlphaType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_argumentsequencegles_texcombiner_command_alpha_typeschema_Argument_TglesTexcombinerArgumentAlphaType_ instance.
func (me *XsdGoPkgHasElems_argumentsequencegles_texcombiner_command_alpha_typeschema_Argument_TglesTexcombinerArgumentAlphaType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_argumentsequencegles_texcombiner_command_alpha_typeschema_Argument_TglesTexcombinerArgumentAlphaType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Arguments {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglesTexcombinerOperatorAlphaEnum xsdt.Token

//	Returns true if the value of this enumerated TglesTexcombinerOperatorAlphaEnum is "MODULATE".
func (me TglesTexcombinerOperatorAlphaEnum) IsModulate() bool { return me == "MODULATE" }

//	Since TglesTexcombinerOperatorAlphaEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesTexcombinerOperatorAlphaEnum) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorAlphaEnum is "REPLACE".
func (me TglesTexcombinerOperatorAlphaEnum) IsReplace() bool { return me == "REPLACE" }

//	Since TglesTexcombinerOperatorAlphaEnum is just a simple String type, this merely returns the current string value.
func (me TglesTexcombinerOperatorAlphaEnum) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorAlphaEnum is "INTERPOLATE".
func (me TglesTexcombinerOperatorAlphaEnum) IsInterpolate() bool { return me == "INTERPOLATE" }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorAlphaEnum is "ADD_SIGNED".
func (me TglesTexcombinerOperatorAlphaEnum) IsAddSigned() bool { return me == "ADD_SIGNED" }

//	This convenience method just performs a simple type conversion to TglesTexcombinerOperatorAlphaEnum's alias type xsdt.Token.
func (me TglesTexcombinerOperatorAlphaEnum) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorAlphaEnum is "SUBTRACT".
func (me TglesTexcombinerOperatorAlphaEnum) IsSubtract() bool { return me == "SUBTRACT" }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorAlphaEnum is "ADD".
func (me TglesTexcombinerOperatorAlphaEnum) IsAdd() bool { return me == "ADD" }

type XsdGoPkgHasAttr_Operator_TglesTexcombinerOperatorAlphaEnum_ struct {
	Operator TglesTexcombinerOperatorAlphaEnum `xml:"http://www.collada.org/2008/03/COLLADASchema operator,attr"`
}

type TglesTexcombinerCommandAlphaType struct {
	XsdGoPkgHasElems_argumentsequencegles_texcombiner_command_alpha_typeschema_Argument_TglesTexcombinerArgumentAlphaType_

	XsdGoPkgHasAttr_Scale_XsdtFloat_

	XsdGoPkgHasAttr_Operator_TglesTexcombinerOperatorAlphaEnum_
}

//	If the WalkHandlers.TglesTexcombinerCommandAlphaType function is not nil (ie. was set by outside code), calls it with this TglesTexcombinerCommandAlphaType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TglesTexcombinerCommandAlphaType instance.
func (me *TglesTexcombinerCommandAlphaType) Walk() (err error) {
	if fn := WalkHandlers.TglesTexcombinerCommandAlphaType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_argumentsequencegles_texcombiner_command_alpha_typeschema_Argument_TglesTexcombinerArgumentAlphaType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_alphasequencegles_texcombiner_command_typeschema_Alpha_TglesTexcombinerCommandAlphaType_ struct {
	Alpha *TglesTexcombinerCommandAlphaType `xml:"http://www.collada.org/2008/03/COLLADASchema alpha"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_alphasequencegles_texcombiner_command_typeschema_Alpha_TglesTexcombinerCommandAlphaType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_alphasequencegles_texcombiner_command_typeschema_Alpha_TglesTexcombinerCommandAlphaType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_alphasequencegles_texcombiner_command_typeschema_Alpha_TglesTexcombinerCommandAlphaType_ instance.
func (me *XsdGoPkgHasElem_alphasequencegles_texcombiner_command_typeschema_Alpha_TglesTexcombinerCommandAlphaType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_alphasequencegles_texcombiner_command_typeschema_Alpha_TglesTexcombinerCommandAlphaType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Alpha.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglesTexcombinerCommandType struct {
	XsdGoPkgHasElem_alphasequencegles_texcombiner_command_typeschema_Alpha_TglesTexcombinerCommandAlphaType_

	XsdGoPkgHasElem_RGBsequencegles_texcombiner_command_typeschema_Rgb_TglesTexcombinerCommandRgbType_

	XsdGoPkgHasElem_constantsequencegles_texcombiner_command_typeschema_Constant_TglesTextureConstantType_
}

//	If the WalkHandlers.TglesTexcombinerCommandType function is not nil (ie. was set by outside code), calls it with this TglesTexcombinerCommandType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TglesTexcombinerCommandType instance.
func (me *TglesTexcombinerCommandType) Walk() (err error) {
	if fn := WalkHandlers.TglesTexcombinerCommandType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_RGBsequencegles_texcombiner_command_typeschema_Rgb_TglesTexcombinerCommandRgbType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_constantsequencegles_texcombiner_command_typeschema_Constant_TglesTextureConstantType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_alphasequencegles_texcombiner_command_typeschema_Alpha_TglesTexcombinerCommandAlphaType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_texcombinerchoicegles_texture_pipeline_typeschema_Texcombiner_TglesTexcombinerCommandType_ struct {
	//	Defines a texture_pipeline command. This is a combiner-mode texturing operation.
	Texcombiners []*TglesTexcombinerCommandType `xml:"http://www.collada.org/2008/03/COLLADASchema texcombiner"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_texcombinerchoicegles_texture_pipeline_typeschema_Texcombiner_TglesTexcombinerCommandType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_texcombinerchoicegles_texture_pipeline_typeschema_Texcombiner_TglesTexcombinerCommandType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_texcombinerchoicegles_texture_pipeline_typeschema_Texcombiner_TglesTexcombinerCommandType_ instance.
func (me *XsdGoPkgHasElems_texcombinerchoicegles_texture_pipeline_typeschema_Texcombiner_TglesTexcombinerCommandType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_texcombinerchoicegles_texture_pipeline_typeschema_Texcombiner_TglesTexcombinerCommandType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Texcombiners {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Defines a texture_pipeline command. It is a simple noncombiner mode of texturing operations.
type TglesTexenvModeEnum xsdt.Token

//	Returns true if the value of this enumerated TglesTexenvModeEnum is "BLEND".
func (me TglesTexenvModeEnum) IsBlend() bool { return me == "BLEND" }

//	Returns true if the value of this enumerated TglesTexenvModeEnum is "REPLACE".
func (me TglesTexenvModeEnum) IsReplace() bool { return me == "REPLACE" }

//	Returns true if the value of this enumerated TglesTexenvModeEnum is "ADD".
func (me TglesTexenvModeEnum) IsAdd() bool { return me == "ADD" }

//	Returns true if the value of this enumerated TglesTexenvModeEnum is "DECAL".
func (me TglesTexenvModeEnum) IsDecal() bool { return me == "DECAL" }

//	This convenience method just performs a simple type conversion to TglesTexenvModeEnum's alias type xsdt.Token.
func (me TglesTexenvModeEnum) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Since TglesTexenvModeEnum is just a simple String type, this merely returns the current string value.
func (me TglesTexenvModeEnum) String() string { return xsdt.Token(me).String() }

//	Returns true if the value of this enumerated TglesTexenvModeEnum is "MODULATE".
func (me TglesTexenvModeEnum) IsModulate() bool { return me == "MODULATE" }

//	Since TglesTexenvModeEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesTexenvModeEnum) Set(s string) { (*xsdt.Token)(me).Set(s) }

type XsdGoPkgHasAttr_Operator_TglesTexenvModeEnum_ struct {
	Operator TglesTexenvModeEnum `xml:"http://www.collada.org/2008/03/COLLADASchema operator,attr"`
}

type TglesTexenvCommandType struct {
	XsdGoPkgHasElem_constantsequencegles_texcombiner_command_typeschema_Constant_TglesTextureConstantType_

	XsdGoPkgHasAttr_Sampler_XsdtNCName_

	XsdGoPkgHasAttr_Operator_TglesTexenvModeEnum_
}

//	If the WalkHandlers.TglesTexenvCommandType function is not nil (ie. was set by outside code), calls it with this TglesTexenvCommandType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TglesTexenvCommandType instance.
func (me *TglesTexenvCommandType) Walk() (err error) {
	if fn := WalkHandlers.TglesTexenvCommandType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_constantsequencegles_texcombiner_command_typeschema_Constant_TglesTextureConstantType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_texenvchoicegles_texture_pipeline_typeschema_Texenv_TglesTexenvCommandType_ struct {
	//	Defines a texture_pipeline command. It is a simple noncombiner mode of texturing operations.
	Texenvs []*TglesTexenvCommandType `xml:"http://www.collada.org/2008/03/COLLADASchema texenv"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_texenvchoicegles_texture_pipeline_typeschema_Texenv_TglesTexenvCommandType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_texenvchoicegles_texture_pipeline_typeschema_Texenv_TglesTexenvCommandType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_texenvchoicegles_texture_pipeline_typeschema_Texenv_TglesTexenvCommandType_ instance.
func (me *XsdGoPkgHasElems_texenvchoicegles_texture_pipeline_typeschema_Texenv_TglesTexenvCommandType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_texenvchoicegles_texture_pipeline_typeschema_Texenv_TglesTexenvCommandType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Texenvs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglesTexturePipelineType struct {
	//	The extra element may appear any number of times.
	//	OpenGL ES extensions may be used here.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	Defines a texture_pipeline command. This is a combiner-mode texturing operation.
	XsdGoPkgHasElems_texcombinerchoicegles_texture_pipeline_typeschema_Texcombiner_TglesTexcombinerCommandType_

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_TsidType_

	//	Defines a texture_pipeline command. It is a simple noncombiner mode of texturing operations.
	XsdGoPkgHasElems_texenvchoicegles_texture_pipeline_typeschema_Texenv_TglesTexenvCommandType_
}

//	If the WalkHandlers.TglesTexturePipelineType function is not nil (ie. was set by outside code), calls it with this TglesTexturePipelineType instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TglesTexturePipelineType instance.
func (me *TglesTexturePipelineType) Walk() (err error) {
	if fn := WalkHandlers.TglesTexturePipelineType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_texcombinerchoicegles_texture_pipeline_typeschema_Texcombiner_TglesTexcombinerCommandType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_texenvchoicegles_texture_pipeline_typeschema_Texenv_TglesTexenvCommandType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_valuesequencetexture_pipelinechoicegles_pipeline_settings_groupschema_Value_TglesTexturePipelineType_ struct {
	Value *TglesTexturePipelineType `xml:"http://www.collada.org/2008/03/COLLADASchema value"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_valuesequencetexture_pipelinechoicegles_pipeline_settings_groupschema_Value_TglesTexturePipelineType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_valuesequencetexture_pipelinechoicegles_pipeline_settings_groupschema_Value_TglesTexturePipelineType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_valuesequencetexture_pipelinechoicegles_pipeline_settings_groupschema_Value_TglesTexturePipelineType_ instance.
func (me *XsdGoPkgHasElem_valuesequencetexture_pipelinechoicegles_pipeline_settings_groupschema_Value_TglesTexturePipelineType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_valuesequencetexture_pipelinechoicegles_pipeline_settings_groupschema_Value_TglesTexturePipelineType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Value.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlesPipelineSettingsGroupChoiceTexturePipeline struct {
	XsdGoPkgHasElem_valuesequencetexture_pipelinechoicegles_pipeline_settings_groupschema_Value_TglesTexturePipelineType_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsGroupChoiceTexturePipeline function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsGroupChoiceTexturePipeline instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsGroupChoiceTexturePipeline instance.
func (me *TxsdGlesPipelineSettingsGroupChoiceTexturePipeline) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsGroupChoiceTexturePipeline; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_valuesequencetexture_pipelinechoicegles_pipeline_settings_groupschema_Value_TglesTexturePipelineType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_texture_pipelinechoicegles_pipeline_settings_groupschema_TexturePipeline_TxsdGlesPipelineSettingsGroupChoiceTexturePipeline_ struct {
	TexturePipeline *TxsdGlesPipelineSettingsGroupChoiceTexturePipeline `xml:"http://www.collada.org/2008/03/COLLADASchema texture_pipeline"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_texture_pipelinechoicegles_pipeline_settings_groupschema_TexturePipeline_TxsdGlesPipelineSettingsGroupChoiceTexturePipeline_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texture_pipelinechoicegles_pipeline_settings_groupschema_TexturePipeline_TxsdGlesPipelineSettingsGroupChoiceTexturePipeline_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texture_pipelinechoicegles_pipeline_settings_groupschema_TexturePipeline_TxsdGlesPipelineSettingsGroupChoiceTexturePipeline_ instance.
func (me *XsdGoPkgHasElem_texture_pipelinechoicegles_pipeline_settings_groupschema_TexturePipeline_TxsdGlesPipelineSettingsGroupChoiceTexturePipeline_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_texture_pipelinechoicegles_pipeline_settings_groupschema_TexturePipeline_TxsdGlesPipelineSettingsGroupChoiceTexturePipeline_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TexturePipeline.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_stencil_maskchoicegles_pipeline_settings_groupschema_StencilMask_TxsdGlesPipelineSettingsGroupChoiceStencilMask_ struct {
	StencilMask *TxsdGlPipelineSettingsGroupChoiceStencilMask `xml:"http://www.collada.org/2008/03/COLLADASchema stencil_mask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_stencil_maskchoicegles_pipeline_settings_groupschema_StencilMask_TxsdGlesPipelineSettingsGroupChoiceStencilMask_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_maskchoicegles_pipeline_settings_groupschema_StencilMask_TxsdGlesPipelineSettingsGroupChoiceStencilMask_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_maskchoicegles_pipeline_settings_groupschema_StencilMask_TxsdGlesPipelineSettingsGroupChoiceStencilMask_ instance.
func (me *XsdGoPkgHasElem_stencil_maskchoicegles_pipeline_settings_groupschema_StencilMask_TxsdGlesPipelineSettingsGroupChoiceStencilMask_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_stencil_maskchoicegles_pipeline_settings_groupschema_StencilMask_TxsdGlesPipelineSettingsGroupChoiceStencilMask_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StencilMask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_normalize_enablechoicegles_pipeline_settings_groupschema_NormalizeEnable_TxsdGlesPipelineSettingsGroupChoiceNormalizeEnable_ struct {
	NormalizeEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema normalize_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_normalize_enablechoicegles_pipeline_settings_groupschema_NormalizeEnable_TxsdGlesPipelineSettingsGroupChoiceNormalizeEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_normalize_enablechoicegles_pipeline_settings_groupschema_NormalizeEnable_TxsdGlesPipelineSettingsGroupChoiceNormalizeEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_normalize_enablechoicegles_pipeline_settings_groupschema_NormalizeEnable_TxsdGlesPipelineSettingsGroupChoiceNormalizeEnable_ instance.
func (me *XsdGoPkgHasElem_normalize_enablechoicegles_pipeline_settings_groupschema_NormalizeEnable_TxsdGlesPipelineSettingsGroupChoiceNormalizeEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_normalize_enablechoicegles_pipeline_settings_groupschema_NormalizeEnable_TxsdGlesPipelineSettingsGroupChoiceNormalizeEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.NormalizeEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_line_smooth_enablechoicegles_pipeline_settings_groupschema_LineSmoothEnable_TxsdGlesPipelineSettingsGroupChoiceLineSmoothEnable_ struct {
	LineSmoothEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema line_smooth_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_line_smooth_enablechoicegles_pipeline_settings_groupschema_LineSmoothEnable_TxsdGlesPipelineSettingsGroupChoiceLineSmoothEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_line_smooth_enablechoicegles_pipeline_settings_groupschema_LineSmoothEnable_TxsdGlesPipelineSettingsGroupChoiceLineSmoothEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_line_smooth_enablechoicegles_pipeline_settings_groupschema_LineSmoothEnable_TxsdGlesPipelineSettingsGroupChoiceLineSmoothEnable_ instance.
func (me *XsdGoPkgHasElem_line_smooth_enablechoicegles_pipeline_settings_groupschema_LineSmoothEnable_TxsdGlesPipelineSettingsGroupChoiceLineSmoothEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_line_smooth_enablechoicegles_pipeline_settings_groupschema_LineSmoothEnable_TxsdGlesPipelineSettingsGroupChoiceLineSmoothEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LineSmoothEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_material_shininesschoicegles_pipeline_settings_groupschema_MaterialShininess_TxsdGlesPipelineSettingsGroupChoiceMaterialShininess_ struct {
	MaterialShininess *TxsdGlPipelineSettingsGroupChoicePointSizeMin `xml:"http://www.collada.org/2008/03/COLLADASchema material_shininess"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_material_shininesschoicegles_pipeline_settings_groupschema_MaterialShininess_TxsdGlesPipelineSettingsGroupChoiceMaterialShininess_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_material_shininesschoicegles_pipeline_settings_groupschema_MaterialShininess_TxsdGlesPipelineSettingsGroupChoiceMaterialShininess_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_material_shininesschoicegles_pipeline_settings_groupschema_MaterialShininess_TxsdGlesPipelineSettingsGroupChoiceMaterialShininess_ instance.
func (me *XsdGoPkgHasElem_material_shininesschoicegles_pipeline_settings_groupschema_MaterialShininess_TxsdGlesPipelineSettingsGroupChoiceMaterialShininess_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_material_shininesschoicegles_pipeline_settings_groupschema_MaterialShininess_TxsdGlesPipelineSettingsGroupChoiceMaterialShininess_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MaterialShininess.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_masksequencestencil_funcchoicegles_pipeline_settings_groupschema_Mask_TxsdGlesPipelineSettingsGroupChoiceStencilFuncSequenceMask_ struct {
	Mask *TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceMask `xml:"http://www.collada.org/2008/03/COLLADASchema mask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_masksequencestencil_funcchoicegles_pipeline_settings_groupschema_Mask_TxsdGlesPipelineSettingsGroupChoiceStencilFuncSequenceMask_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_masksequencestencil_funcchoicegles_pipeline_settings_groupschema_Mask_TxsdGlesPipelineSettingsGroupChoiceStencilFuncSequenceMask_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_masksequencestencil_funcchoicegles_pipeline_settings_groupschema_Mask_TxsdGlesPipelineSettingsGroupChoiceStencilFuncSequenceMask_ instance.
func (me *XsdGoPkgHasElem_masksequencestencil_funcchoicegles_pipeline_settings_groupschema_Mask_TxsdGlesPipelineSettingsGroupChoiceStencilFuncSequenceMask_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_masksequencestencil_funcchoicegles_pipeline_settings_groupschema_Mask_TxsdGlesPipelineSettingsGroupChoiceStencilFuncSequenceMask_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Mask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_refsequencestencil_funcchoicegles_pipeline_settings_groupschema_Ref_TxsdGlesPipelineSettingsGroupChoiceStencilFuncSequenceRef_ struct {
	Ref *TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef `xml:"http://www.collada.org/2008/03/COLLADASchema ref"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_refsequencestencil_funcchoicegles_pipeline_settings_groupschema_Ref_TxsdGlesPipelineSettingsGroupChoiceStencilFuncSequenceRef_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_refsequencestencil_funcchoicegles_pipeline_settings_groupschema_Ref_TxsdGlesPipelineSettingsGroupChoiceStencilFuncSequenceRef_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_refsequencestencil_funcchoicegles_pipeline_settings_groupschema_Ref_TxsdGlesPipelineSettingsGroupChoiceStencilFuncSequenceRef_ instance.
func (me *XsdGoPkgHasElem_refsequencestencil_funcchoicegles_pipeline_settings_groupschema_Ref_TxsdGlesPipelineSettingsGroupChoiceStencilFuncSequenceRef_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_refsequencestencil_funcchoicegles_pipeline_settings_groupschema_Ref_TxsdGlesPipelineSettingsGroupChoiceStencilFuncSequenceRef_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_funcsequencestencil_funcchoicegles_pipeline_settings_groupschema_Func_TxsdGlesPipelineSettingsGroupChoiceStencilFuncSequenceFunc_ struct {
	Func *TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceFunc `xml:"http://www.collada.org/2008/03/COLLADASchema func"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_funcsequencestencil_funcchoicegles_pipeline_settings_groupschema_Func_TxsdGlesPipelineSettingsGroupChoiceStencilFuncSequenceFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_funcsequencestencil_funcchoicegles_pipeline_settings_groupschema_Func_TxsdGlesPipelineSettingsGroupChoiceStencilFuncSequenceFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_funcsequencestencil_funcchoicegles_pipeline_settings_groupschema_Func_TxsdGlesPipelineSettingsGroupChoiceStencilFuncSequenceFunc_ instance.
func (me *XsdGoPkgHasElem_funcsequencestencil_funcchoicegles_pipeline_settings_groupschema_Func_TxsdGlesPipelineSettingsGroupChoiceStencilFuncSequenceFunc_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_funcsequencestencil_funcchoicegles_pipeline_settings_groupschema_Func_TxsdGlesPipelineSettingsGroupChoiceStencilFuncSequenceFunc_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Func.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlesPipelineSettingsGroupChoiceStencilFunc struct {
	XsdGoPkgHasElem_funcsequencestencil_funcchoicegles_pipeline_settings_groupschema_Func_TxsdGlesPipelineSettingsGroupChoiceStencilFuncSequenceFunc_

	XsdGoPkgHasElem_masksequencestencil_funcchoicegles_pipeline_settings_groupschema_Mask_TxsdGlesPipelineSettingsGroupChoiceStencilFuncSequenceMask_

	XsdGoPkgHasElem_refsequencestencil_funcchoicegles_pipeline_settings_groupschema_Ref_TxsdGlesPipelineSettingsGroupChoiceStencilFuncSequenceRef_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsGroupChoiceStencilFunc function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsGroupChoiceStencilFunc instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsGroupChoiceStencilFunc instance.
func (me *TxsdGlesPipelineSettingsGroupChoiceStencilFunc) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsGroupChoiceStencilFunc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_funcsequencestencil_funcchoicegles_pipeline_settings_groupschema_Func_TxsdGlesPipelineSettingsGroupChoiceStencilFuncSequenceFunc_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_masksequencestencil_funcchoicegles_pipeline_settings_groupschema_Mask_TxsdGlesPipelineSettingsGroupChoiceStencilFuncSequenceMask_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_refsequencestencil_funcchoicegles_pipeline_settings_groupschema_Ref_TxsdGlesPipelineSettingsGroupChoiceStencilFuncSequenceRef_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_stencil_funcchoicegles_pipeline_settings_groupschema_StencilFunc_TxsdGlesPipelineSettingsGroupChoiceStencilFunc_ struct {
	StencilFunc *TxsdGlesPipelineSettingsGroupChoiceStencilFunc `xml:"http://www.collada.org/2008/03/COLLADASchema stencil_func"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_stencil_funcchoicegles_pipeline_settings_groupschema_StencilFunc_TxsdGlesPipelineSettingsGroupChoiceStencilFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_funcchoicegles_pipeline_settings_groupschema_StencilFunc_TxsdGlesPipelineSettingsGroupChoiceStencilFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_funcchoicegles_pipeline_settings_groupschema_StencilFunc_TxsdGlesPipelineSettingsGroupChoiceStencilFunc_ instance.
func (me *XsdGoPkgHasElem_stencil_funcchoicegles_pipeline_settings_groupschema_StencilFunc_TxsdGlesPipelineSettingsGroupChoiceStencilFunc_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_stencil_funcchoicegles_pipeline_settings_groupschema_StencilFunc_TxsdGlesPipelineSettingsGroupChoiceStencilFunc_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StencilFunc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlesPipelineSettingsGroupChoiceClipPlaneEnable struct {
	XsdGoPkgHasAttr_Value_XsdtBoolean_False

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglesMaxClipPlanesIndexType_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsGroupChoiceClipPlaneEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsGroupChoiceClipPlaneEnable instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsGroupChoiceClipPlaneEnable instance.
func (me *TxsdGlesPipelineSettingsGroupChoiceClipPlaneEnable) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsGroupChoiceClipPlaneEnable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_clip_plane_enablechoicegles_pipeline_settings_groupschema_ClipPlaneEnable_TxsdGlesPipelineSettingsGroupChoiceClipPlaneEnable_ struct {
	ClipPlaneEnable *TxsdGlesPipelineSettingsGroupChoiceClipPlaneEnable `xml:"http://www.collada.org/2008/03/COLLADASchema clip_plane_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_clip_plane_enablechoicegles_pipeline_settings_groupschema_ClipPlaneEnable_TxsdGlesPipelineSettingsGroupChoiceClipPlaneEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_clip_plane_enablechoicegles_pipeline_settings_groupschema_ClipPlaneEnable_TxsdGlesPipelineSettingsGroupChoiceClipPlaneEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_clip_plane_enablechoicegles_pipeline_settings_groupschema_ClipPlaneEnable_TxsdGlesPipelineSettingsGroupChoiceClipPlaneEnable_ instance.
func (me *XsdGoPkgHasElem_clip_plane_enablechoicegles_pipeline_settings_groupschema_ClipPlaneEnable_TxsdGlesPipelineSettingsGroupChoiceClipPlaneEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_clip_plane_enablechoicegles_pipeline_settings_groupschema_ClipPlaneEnable_TxsdGlesPipelineSettingsGroupChoiceClipPlaneEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ClipPlaneEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_point_fade_threshold_sizechoicegles_pipeline_settings_groupschema_PointFadeThresholdSize_TxsdGlesPipelineSettingsGroupChoicePointFadeThresholdSize_ struct {
	PointFadeThresholdSize *TxsdGlPipelineSettingsGroupChoiceFogEnd `xml:"http://www.collada.org/2008/03/COLLADASchema point_fade_threshold_size"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_point_fade_threshold_sizechoicegles_pipeline_settings_groupschema_PointFadeThresholdSize_TxsdGlesPipelineSettingsGroupChoicePointFadeThresholdSize_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_fade_threshold_sizechoicegles_pipeline_settings_groupschema_PointFadeThresholdSize_TxsdGlesPipelineSettingsGroupChoicePointFadeThresholdSize_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_fade_threshold_sizechoicegles_pipeline_settings_groupschema_PointFadeThresholdSize_TxsdGlesPipelineSettingsGroupChoicePointFadeThresholdSize_ instance.
func (me *XsdGoPkgHasElem_point_fade_threshold_sizechoicegles_pipeline_settings_groupschema_PointFadeThresholdSize_TxsdGlesPipelineSettingsGroupChoicePointFadeThresholdSize_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_point_fade_threshold_sizechoicegles_pipeline_settings_groupschema_PointFadeThresholdSize_TxsdGlesPipelineSettingsGroupChoicePointFadeThresholdSize_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PointFadeThresholdSize.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_color_logic_op_enablechoicegles_pipeline_settings_groupschema_ColorLogicOpEnable_TxsdGlesPipelineSettingsGroupChoiceColorLogicOpEnable_ struct {
	ColorLogicOpEnable *TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable `xml:"http://www.collada.org/2008/03/COLLADASchema color_logic_op_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_color_logic_op_enablechoicegles_pipeline_settings_groupschema_ColorLogicOpEnable_TxsdGlesPipelineSettingsGroupChoiceColorLogicOpEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_color_logic_op_enablechoicegles_pipeline_settings_groupschema_ColorLogicOpEnable_TxsdGlesPipelineSettingsGroupChoiceColorLogicOpEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_color_logic_op_enablechoicegles_pipeline_settings_groupschema_ColorLogicOpEnable_TxsdGlesPipelineSettingsGroupChoiceColorLogicOpEnable_ instance.
func (me *XsdGoPkgHasElem_color_logic_op_enablechoicegles_pipeline_settings_groupschema_ColorLogicOpEnable_TxsdGlesPipelineSettingsGroupChoiceColorLogicOpEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_color_logic_op_enablechoicegles_pipeline_settings_groupschema_ColorLogicOpEnable_TxsdGlesPipelineSettingsGroupChoiceColorLogicOpEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ColorLogicOpEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_point_sizechoicegles_pipeline_settings_groupschema_PointSize_TxsdGlesPipelineSettingsGroupChoicePointSize_ struct {
	PointSize *TxsdGlPipelineSettingsGroupChoiceFogEnd `xml:"http://www.collada.org/2008/03/COLLADASchema point_size"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_point_sizechoicegles_pipeline_settings_groupschema_PointSize_TxsdGlesPipelineSettingsGroupChoicePointSize_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_sizechoicegles_pipeline_settings_groupschema_PointSize_TxsdGlesPipelineSettingsGroupChoicePointSize_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_sizechoicegles_pipeline_settings_groupschema_PointSize_TxsdGlesPipelineSettingsGroupChoicePointSize_ instance.
func (me *XsdGoPkgHasElem_point_sizechoicegles_pipeline_settings_groupschema_PointSize_TxsdGlesPipelineSettingsGroupChoicePointSize_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_point_sizechoicegles_pipeline_settings_groupschema_PointSize_TxsdGlesPipelineSettingsGroupChoicePointSize_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PointSize.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_color_material_enablechoicegles_pipeline_settings_groupschema_ColorMaterialEnable_TxsdGlesPipelineSettingsGroupChoiceColorMaterialEnable_ struct {
	ColorMaterialEnable *TxsdGlPipelineSettingsGroupChoiceDepthMask `xml:"http://www.collada.org/2008/03/COLLADASchema color_material_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_color_material_enablechoicegles_pipeline_settings_groupschema_ColorMaterialEnable_TxsdGlesPipelineSettingsGroupChoiceColorMaterialEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_color_material_enablechoicegles_pipeline_settings_groupschema_ColorMaterialEnable_TxsdGlesPipelineSettingsGroupChoiceColorMaterialEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_color_material_enablechoicegles_pipeline_settings_groupschema_ColorMaterialEnable_TxsdGlesPipelineSettingsGroupChoiceColorMaterialEnable_ instance.
func (me *XsdGoPkgHasElem_color_material_enablechoicegles_pipeline_settings_groupschema_ColorMaterialEnable_TxsdGlesPipelineSettingsGroupChoiceColorMaterialEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_color_material_enablechoicegles_pipeline_settings_groupschema_ColorMaterialEnable_TxsdGlesPipelineSettingsGroupChoiceColorMaterialEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ColorMaterialEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_logic_opchoicegles_pipeline_settings_groupschema_LogicOp_TxsdGlesPipelineSettingsGroupChoiceLogicOp_ struct {
	LogicOp *TxsdGlPipelineSettingsGroupChoiceLogicOp `xml:"http://www.collada.org/2008/03/COLLADASchema logic_op"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_logic_opchoicegles_pipeline_settings_groupschema_LogicOp_TxsdGlesPipelineSettingsGroupChoiceLogicOp_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_logic_opchoicegles_pipeline_settings_groupschema_LogicOp_TxsdGlesPipelineSettingsGroupChoiceLogicOp_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_logic_opchoicegles_pipeline_settings_groupschema_LogicOp_TxsdGlesPipelineSettingsGroupChoiceLogicOp_ instance.
func (me *XsdGoPkgHasElem_logic_opchoicegles_pipeline_settings_groupschema_LogicOp_TxsdGlesPipelineSettingsGroupChoiceLogicOp_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_logic_opchoicegles_pipeline_settings_groupschema_LogicOp_TxsdGlesPipelineSettingsGroupChoiceLogicOp_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LogicOp.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasGroup_GlesPipelineSettingsGroup struct {
	XsdGoPkgHasElem_light_spot_exponentchoicegles_pipeline_settings_groupschema_LightSpotExponent_TxsdGlesPipelineSettingsGroupChoiceLightSpotExponent_

	XsdGoPkgHasElem_rescale_normal_enablechoicegles_pipeline_settings_groupschema_RescaleNormalEnable_TxsdGlesPipelineSettingsGroupChoiceRescaleNormalEnable_

	XsdGoPkgHasElem_light_model_two_side_enablechoicegles_pipeline_settings_groupschema_LightModelTwoSideEnable_TxsdGlesPipelineSettingsGroupChoiceLightModelTwoSideEnable_

	XsdGoPkgHasElem_light_specularchoicegles_pipeline_settings_groupschema_LightSpecular_TxsdGlesPipelineSettingsGroupChoiceLightSpecular_

	XsdGoPkgHasElem_light_diffusechoicegles_pipeline_settings_groupschema_LightDiffuse_TxsdGlesPipelineSettingsGroupChoiceLightDiffuse_

	XsdGoPkgHasElem_alpha_funcchoicegles_pipeline_settings_groupschema_AlphaFunc_TxsdGlesPipelineSettingsGroupChoiceAlphaFunc_

	XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles_pipeline_settings_groupschema_SampleAlphaToCoverageEnable_TxsdGlesPipelineSettingsGroupChoiceSampleAlphaToCoverageEnable_

	XsdGoPkgHasElem_depth_rangechoicegles_pipeline_settings_groupschema_DepthRange_TxsdGlesPipelineSettingsGroupChoiceDepthRange_

	XsdGoPkgHasElem_dither_enablechoicegles_pipeline_settings_groupschema_DitherEnable_TxsdGlesPipelineSettingsGroupChoiceDitherEnable_

	XsdGoPkgHasElem_light_constant_attenuationchoicegles_pipeline_settings_groupschema_LightConstantAttenuation_TxsdGlesPipelineSettingsGroupChoiceLightConstantAttenuation_

	XsdGoPkgHasElem_material_emissionchoicegles_pipeline_settings_groupschema_MaterialEmission_TxsdGlesPipelineSettingsGroupChoiceMaterialEmission_

	XsdGoPkgHasElem_light_linear_attenuationchoicegles_pipeline_settings_groupschema_LightLinearAttenuation_TxsdGlesPipelineSettingsGroupChoiceLightLinearAttenuation_

	XsdGoPkgHasElem_material_specularchoicegles_pipeline_settings_groupschema_MaterialSpecular_TxsdGlesPipelineSettingsGroupChoiceMaterialSpecular_

	XsdGoPkgHasElem_light_spot_cutoffchoicegles_pipeline_settings_groupschema_LightSpotCutoff_TxsdGlesPipelineSettingsGroupChoiceLightSpotCutoff_

	XsdGoPkgHasElem_model_view_matrixchoicegles_pipeline_settings_groupschema_ModelViewMatrix_TxsdGlesPipelineSettingsGroupChoiceModelViewMatrix_

	XsdGoPkgHasElem_fog_densitychoicegles_pipeline_settings_groupschema_FogDensity_TxsdGlesPipelineSettingsGroupChoiceFogDensity_

	XsdGoPkgHasElem_point_smooth_enablechoicegles_pipeline_settings_groupschema_PointSmoothEnable_TxsdGlesPipelineSettingsGroupChoicePointSmoothEnable_

	XsdGoPkgHasElem_light_ambientchoicegles_pipeline_settings_groupschema_LightAmbient_TxsdGlesPipelineSettingsGroupChoiceLightAmbient_

	XsdGoPkgHasElem_fog_startchoicegles_pipeline_settings_groupschema_FogStart_TxsdGlesPipelineSettingsGroupChoiceFogStart_

	XsdGoPkgHasElem_front_facechoicegles_pipeline_settings_groupschema_FrontFace_TxsdGlesPipelineSettingsGroupChoiceFrontFace_

	XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles_pipeline_settings_groupschema_PolygonOffsetFillEnable_TxsdGlesPipelineSettingsGroupChoicePolygonOffsetFillEnable_

	XsdGoPkgHasElem_texture_pipelinechoicegles_pipeline_settings_groupschema_TexturePipeline_TxsdGlesPipelineSettingsGroupChoiceTexturePipeline_

	XsdGoPkgHasElem_stencil_maskchoicegles_pipeline_settings_groupschema_StencilMask_TxsdGlesPipelineSettingsGroupChoiceStencilMask_

	XsdGoPkgHasElem_normalize_enablechoicegles_pipeline_settings_groupschema_NormalizeEnable_TxsdGlesPipelineSettingsGroupChoiceNormalizeEnable_

	XsdGoPkgHasElem_line_smooth_enablechoicegles_pipeline_settings_groupschema_LineSmoothEnable_TxsdGlesPipelineSettingsGroupChoiceLineSmoothEnable_

	XsdGoPkgHasElem_material_shininesschoicegles_pipeline_settings_groupschema_MaterialShininess_TxsdGlesPipelineSettingsGroupChoiceMaterialShininess_

	XsdGoPkgHasElem_stencil_funcchoicegles_pipeline_settings_groupschema_StencilFunc_TxsdGlesPipelineSettingsGroupChoiceStencilFunc_

	XsdGoPkgHasElem_clip_plane_enablechoicegles_pipeline_settings_groupschema_ClipPlaneEnable_TxsdGlesPipelineSettingsGroupChoiceClipPlaneEnable_

	XsdGoPkgHasElem_point_fade_threshold_sizechoicegles_pipeline_settings_groupschema_PointFadeThresholdSize_TxsdGlesPipelineSettingsGroupChoicePointFadeThresholdSize_

	XsdGoPkgHasElem_color_logic_op_enablechoicegles_pipeline_settings_groupschema_ColorLogicOpEnable_TxsdGlesPipelineSettingsGroupChoiceColorLogicOpEnable_

	XsdGoPkgHasElem_point_sizechoicegles_pipeline_settings_groupschema_PointSize_TxsdGlesPipelineSettingsGroupChoicePointSize_

	XsdGoPkgHasElem_color_material_enablechoicegles_pipeline_settings_groupschema_ColorMaterialEnable_TxsdGlesPipelineSettingsGroupChoiceColorMaterialEnable_

	XsdGoPkgHasElem_logic_opchoicegles_pipeline_settings_groupschema_LogicOp_TxsdGlesPipelineSettingsGroupChoiceLogicOp_

	XsdGoPkgHasElem_alpha_test_enablechoicegles_pipeline_settings_groupschema_AlphaTestEnable_TxsdGlesPipelineSettingsGroupChoiceAlphaTestEnable_

	XsdGoPkgHasElem_material_ambientchoicegles_pipeline_settings_groupschema_MaterialAmbient_TxsdGlesPipelineSettingsGroupChoiceMaterialAmbient_

	XsdGoPkgHasElem_clip_planechoicegles_pipeline_settings_groupschema_ClipPlane_TxsdGlesPipelineSettingsGroupChoiceClipPlane_

	XsdGoPkgHasElem_light_enablechoicegles_pipeline_settings_groupschema_LightEnable_TxsdGlesPipelineSettingsGroupChoiceLightEnable_

	XsdGoPkgHasElem_color_maskchoicegles_pipeline_settings_groupschema_ColorMask_TxsdGlesPipelineSettingsGroupChoiceColorMask_

	XsdGoPkgHasElem_light_positionchoicegles_pipeline_settings_groupschema_LightPosition_TxsdGlesPipelineSettingsGroupChoiceLightPosition_

	XsdGoPkgHasElem_projection_matrixchoicegles_pipeline_settings_groupschema_ProjectionMatrix_TxsdGlesPipelineSettingsGroupChoiceProjectionMatrix_

	XsdGoPkgHasElem_stencil_test_enablechoicegles_pipeline_settings_groupschema_StencilTestEnable_TxsdGlesPipelineSettingsGroupChoiceStencilTestEnable_

	XsdGoPkgHasElem_depth_test_enablechoicegles_pipeline_settings_groupschema_DepthTestEnable_TxsdGlesPipelineSettingsGroupChoiceDepthTestEnable_

	XsdGoPkgHasElem_fog_modechoicegles_pipeline_settings_groupschema_FogMode_TxsdGlesPipelineSettingsGroupChoiceFogMode_

	XsdGoPkgHasElem_light_model_ambientchoicegles_pipeline_settings_groupschema_LightModelAmbient_TxsdGlesPipelineSettingsGroupChoiceLightModelAmbient_

	XsdGoPkgHasElem_depth_maskchoicegles_pipeline_settings_groupschema_DepthMask_TxsdGlesPipelineSettingsGroupChoiceDepthMask_

	XsdGoPkgHasElem_multisample_enablechoicegles_pipeline_settings_groupschema_MultisampleEnable_TxsdGlesPipelineSettingsGroupChoiceMultisampleEnable_

	XsdGoPkgHasElem_fog_colorchoicegles_pipeline_settings_groupschema_FogColor_TxsdGlesPipelineSettingsGroupChoiceFogColor_

	XsdGoPkgHasElem_point_distance_attenuationchoicegles_pipeline_settings_groupschema_PointDistanceAttenuation_TxsdGlesPipelineSettingsGroupChoicePointDistanceAttenuation_

	XsdGoPkgHasElem_lighting_enablechoicegles_pipeline_settings_groupschema_LightingEnable_TxsdGlesPipelineSettingsGroupChoiceLightingEnable_

	XsdGoPkgHasElem_material_diffusechoicegles_pipeline_settings_groupschema_MaterialDiffuse_TxsdGlesPipelineSettingsGroupChoiceMaterialDiffuse_

	XsdGoPkgHasElem_fog_endchoicegles_pipeline_settings_groupschema_FogEnd_TxsdGlesPipelineSettingsGroupChoiceFogEnd_

	XsdGoPkgHasElem_point_size_minchoicegles_pipeline_settings_groupschema_PointSizeMin_TxsdGlesPipelineSettingsGroupChoicePointSizeMin_

	XsdGoPkgHasElem_light_spot_directionchoicegles_pipeline_settings_groupschema_LightSpotDirection_TxsdGlesPipelineSettingsGroupChoiceLightSpotDirection_

	XsdGoPkgHasElem_shade_modelchoicegles_pipeline_settings_groupschema_ShadeModel_TxsdGlesPipelineSettingsGroupChoiceShadeModel_

	XsdGoPkgHasElem_light_quadratic_attenuationchoicegles_pipeline_settings_groupschema_LightQuadraticAttenuation_TxsdGlesPipelineSettingsGroupChoiceLightQuadraticAttenuation_

	XsdGoPkgHasElem_polygon_offsetchoicegles_pipeline_settings_groupschema_PolygonOffset_TxsdGlesPipelineSettingsGroupChoicePolygonOffset_

	XsdGoPkgHasElem_blend_enablechoicegles_pipeline_settings_groupschema_BlendEnable_TxsdGlesPipelineSettingsGroupChoiceBlendEnable_

	XsdGoPkgHasElem_blend_funcchoicegles_pipeline_settings_groupschema_BlendFunc_TxsdGlesPipelineSettingsGroupChoiceBlendFunc_

	XsdGoPkgHasElem_depth_funcchoicegles_pipeline_settings_groupschema_DepthFunc_TxsdGlesPipelineSettingsGroupChoiceDepthFunc_

	XsdGoPkgHasElem_stencil_opchoicegles_pipeline_settings_groupschema_StencilOp_TxsdGlesPipelineSettingsGroupChoiceStencilOp_

	XsdGoPkgHasElem_fog_enablechoicegles_pipeline_settings_groupschema_FogEnable_TxsdGlesPipelineSettingsGroupChoiceFogEnable_

	XsdGoPkgHasElem_cull_face_enablechoicegles_pipeline_settings_groupschema_CullFaceEnable_TxsdGlesPipelineSettingsGroupChoiceCullFaceEnable_

	XsdGoPkgHasElem_line_widthchoicegles_pipeline_settings_groupschema_LineWidth_TxsdGlesPipelineSettingsGroupChoiceLineWidth_

	XsdGoPkgHasElem_point_size_maxchoicegles_pipeline_settings_groupschema_PointSizeMax_TxsdGlesPipelineSettingsGroupChoicePointSizeMax_

	XsdGoPkgHasElem_scissorchoicegles_pipeline_settings_groupschema_Scissor_TxsdGlesPipelineSettingsGroupChoiceScissor_

	XsdGoPkgHasElem_sample_coverage_enablechoicegles_pipeline_settings_groupschema_SampleCoverageEnable_TxsdGlesPipelineSettingsGroupChoiceSampleCoverageEnable_

	XsdGoPkgHasElem_cull_facechoicegles_pipeline_settings_groupschema_CullFace_TxsdGlesPipelineSettingsGroupChoiceCullFace_

	XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegles_pipeline_settings_groupschema_SampleAlphaToOneEnable_TxsdGlesPipelineSettingsGroupChoiceSampleAlphaToOneEnable_

	XsdGoPkgHasElem_scissor_test_enablechoicegles_pipeline_settings_groupschema_ScissorTestEnable_TxsdGlesPipelineSettingsGroupChoiceScissorTestEnable_
}

//	If the WalkHandlers.XsdGoPkgHasGroup_GlesPipelineSettingsGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_GlesPipelineSettingsGroup instance as the single argument. Then calls the Walk() method on 69/69 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_GlesPipelineSettingsGroup instance.
func (me *XsdGoPkgHasGroup_GlesPipelineSettingsGroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasGroup_GlesPipelineSettingsGroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_point_size_maxchoicegles_pipeline_settings_groupschema_PointSizeMax_TxsdGlesPipelineSettingsGroupChoicePointSizeMax_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_scissorchoicegles_pipeline_settings_groupschema_Scissor_TxsdGlesPipelineSettingsGroupChoiceScissor_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sample_coverage_enablechoicegles_pipeline_settings_groupschema_SampleCoverageEnable_TxsdGlesPipelineSettingsGroupChoiceSampleCoverageEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_cull_facechoicegles_pipeline_settings_groupschema_CullFace_TxsdGlesPipelineSettingsGroupChoiceCullFace_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegles_pipeline_settings_groupschema_SampleAlphaToOneEnable_TxsdGlesPipelineSettingsGroupChoiceSampleAlphaToOneEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_scissor_test_enablechoicegles_pipeline_settings_groupschema_ScissorTestEnable_TxsdGlesPipelineSettingsGroupChoiceScissorTestEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_spot_exponentchoicegles_pipeline_settings_groupschema_LightSpotExponent_TxsdGlesPipelineSettingsGroupChoiceLightSpotExponent_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_rescale_normal_enablechoicegles_pipeline_settings_groupschema_RescaleNormalEnable_TxsdGlesPipelineSettingsGroupChoiceRescaleNormalEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_model_two_side_enablechoicegles_pipeline_settings_groupschema_LightModelTwoSideEnable_TxsdGlesPipelineSettingsGroupChoiceLightModelTwoSideEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_specularchoicegles_pipeline_settings_groupschema_LightSpecular_TxsdGlesPipelineSettingsGroupChoiceLightSpecular_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_diffusechoicegles_pipeline_settings_groupschema_LightDiffuse_TxsdGlesPipelineSettingsGroupChoiceLightDiffuse_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_alpha_funcchoicegles_pipeline_settings_groupschema_AlphaFunc_TxsdGlesPipelineSettingsGroupChoiceAlphaFunc_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles_pipeline_settings_groupschema_SampleAlphaToCoverageEnable_TxsdGlesPipelineSettingsGroupChoiceSampleAlphaToCoverageEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_depth_rangechoicegles_pipeline_settings_groupschema_DepthRange_TxsdGlesPipelineSettingsGroupChoiceDepthRange_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_dither_enablechoicegles_pipeline_settings_groupschema_DitherEnable_TxsdGlesPipelineSettingsGroupChoiceDitherEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_constant_attenuationchoicegles_pipeline_settings_groupschema_LightConstantAttenuation_TxsdGlesPipelineSettingsGroupChoiceLightConstantAttenuation_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_material_emissionchoicegles_pipeline_settings_groupschema_MaterialEmission_TxsdGlesPipelineSettingsGroupChoiceMaterialEmission_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_linear_attenuationchoicegles_pipeline_settings_groupschema_LightLinearAttenuation_TxsdGlesPipelineSettingsGroupChoiceLightLinearAttenuation_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_material_specularchoicegles_pipeline_settings_groupschema_MaterialSpecular_TxsdGlesPipelineSettingsGroupChoiceMaterialSpecular_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_spot_cutoffchoicegles_pipeline_settings_groupschema_LightSpotCutoff_TxsdGlesPipelineSettingsGroupChoiceLightSpotCutoff_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_model_view_matrixchoicegles_pipeline_settings_groupschema_ModelViewMatrix_TxsdGlesPipelineSettingsGroupChoiceModelViewMatrix_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fog_densitychoicegles_pipeline_settings_groupschema_FogDensity_TxsdGlesPipelineSettingsGroupChoiceFogDensity_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_point_smooth_enablechoicegles_pipeline_settings_groupschema_PointSmoothEnable_TxsdGlesPipelineSettingsGroupChoicePointSmoothEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_ambientchoicegles_pipeline_settings_groupschema_LightAmbient_TxsdGlesPipelineSettingsGroupChoiceLightAmbient_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fog_startchoicegles_pipeline_settings_groupschema_FogStart_TxsdGlesPipelineSettingsGroupChoiceFogStart_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_front_facechoicegles_pipeline_settings_groupschema_FrontFace_TxsdGlesPipelineSettingsGroupChoiceFrontFace_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles_pipeline_settings_groupschema_PolygonOffsetFillEnable_TxsdGlesPipelineSettingsGroupChoicePolygonOffsetFillEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_texture_pipelinechoicegles_pipeline_settings_groupschema_TexturePipeline_TxsdGlesPipelineSettingsGroupChoiceTexturePipeline_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stencil_maskchoicegles_pipeline_settings_groupschema_StencilMask_TxsdGlesPipelineSettingsGroupChoiceStencilMask_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_normalize_enablechoicegles_pipeline_settings_groupschema_NormalizeEnable_TxsdGlesPipelineSettingsGroupChoiceNormalizeEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_line_smooth_enablechoicegles_pipeline_settings_groupschema_LineSmoothEnable_TxsdGlesPipelineSettingsGroupChoiceLineSmoothEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_material_shininesschoicegles_pipeline_settings_groupschema_MaterialShininess_TxsdGlesPipelineSettingsGroupChoiceMaterialShininess_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stencil_funcchoicegles_pipeline_settings_groupschema_StencilFunc_TxsdGlesPipelineSettingsGroupChoiceStencilFunc_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_clip_plane_enablechoicegles_pipeline_settings_groupschema_ClipPlaneEnable_TxsdGlesPipelineSettingsGroupChoiceClipPlaneEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_point_fade_threshold_sizechoicegles_pipeline_settings_groupschema_PointFadeThresholdSize_TxsdGlesPipelineSettingsGroupChoicePointFadeThresholdSize_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_color_logic_op_enablechoicegles_pipeline_settings_groupschema_ColorLogicOpEnable_TxsdGlesPipelineSettingsGroupChoiceColorLogicOpEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_point_sizechoicegles_pipeline_settings_groupschema_PointSize_TxsdGlesPipelineSettingsGroupChoicePointSize_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_color_material_enablechoicegles_pipeline_settings_groupschema_ColorMaterialEnable_TxsdGlesPipelineSettingsGroupChoiceColorMaterialEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_logic_opchoicegles_pipeline_settings_groupschema_LogicOp_TxsdGlesPipelineSettingsGroupChoiceLogicOp_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_alpha_test_enablechoicegles_pipeline_settings_groupschema_AlphaTestEnable_TxsdGlesPipelineSettingsGroupChoiceAlphaTestEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_material_ambientchoicegles_pipeline_settings_groupschema_MaterialAmbient_TxsdGlesPipelineSettingsGroupChoiceMaterialAmbient_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_clip_planechoicegles_pipeline_settings_groupschema_ClipPlane_TxsdGlesPipelineSettingsGroupChoiceClipPlane_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_enablechoicegles_pipeline_settings_groupschema_LightEnable_TxsdGlesPipelineSettingsGroupChoiceLightEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_color_maskchoicegles_pipeline_settings_groupschema_ColorMask_TxsdGlesPipelineSettingsGroupChoiceColorMask_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_positionchoicegles_pipeline_settings_groupschema_LightPosition_TxsdGlesPipelineSettingsGroupChoiceLightPosition_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_projection_matrixchoicegles_pipeline_settings_groupschema_ProjectionMatrix_TxsdGlesPipelineSettingsGroupChoiceProjectionMatrix_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stencil_test_enablechoicegles_pipeline_settings_groupschema_StencilTestEnable_TxsdGlesPipelineSettingsGroupChoiceStencilTestEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_depth_test_enablechoicegles_pipeline_settings_groupschema_DepthTestEnable_TxsdGlesPipelineSettingsGroupChoiceDepthTestEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fog_modechoicegles_pipeline_settings_groupschema_FogMode_TxsdGlesPipelineSettingsGroupChoiceFogMode_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_model_ambientchoicegles_pipeline_settings_groupschema_LightModelAmbient_TxsdGlesPipelineSettingsGroupChoiceLightModelAmbient_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_depth_maskchoicegles_pipeline_settings_groupschema_DepthMask_TxsdGlesPipelineSettingsGroupChoiceDepthMask_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_multisample_enablechoicegles_pipeline_settings_groupschema_MultisampleEnable_TxsdGlesPipelineSettingsGroupChoiceMultisampleEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fog_colorchoicegles_pipeline_settings_groupschema_FogColor_TxsdGlesPipelineSettingsGroupChoiceFogColor_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_point_distance_attenuationchoicegles_pipeline_settings_groupschema_PointDistanceAttenuation_TxsdGlesPipelineSettingsGroupChoicePointDistanceAttenuation_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_lighting_enablechoicegles_pipeline_settings_groupschema_LightingEnable_TxsdGlesPipelineSettingsGroupChoiceLightingEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_material_diffusechoicegles_pipeline_settings_groupschema_MaterialDiffuse_TxsdGlesPipelineSettingsGroupChoiceMaterialDiffuse_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fog_endchoicegles_pipeline_settings_groupschema_FogEnd_TxsdGlesPipelineSettingsGroupChoiceFogEnd_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_point_size_minchoicegles_pipeline_settings_groupschema_PointSizeMin_TxsdGlesPipelineSettingsGroupChoicePointSizeMin_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_spot_directionchoicegles_pipeline_settings_groupschema_LightSpotDirection_TxsdGlesPipelineSettingsGroupChoiceLightSpotDirection_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_shade_modelchoicegles_pipeline_settings_groupschema_ShadeModel_TxsdGlesPipelineSettingsGroupChoiceShadeModel_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_quadratic_attenuationchoicegles_pipeline_settings_groupschema_LightQuadraticAttenuation_TxsdGlesPipelineSettingsGroupChoiceLightQuadraticAttenuation_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_polygon_offsetchoicegles_pipeline_settings_groupschema_PolygonOffset_TxsdGlesPipelineSettingsGroupChoicePolygonOffset_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_blend_enablechoicegles_pipeline_settings_groupschema_BlendEnable_TxsdGlesPipelineSettingsGroupChoiceBlendEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_blend_funcchoicegles_pipeline_settings_groupschema_BlendFunc_TxsdGlesPipelineSettingsGroupChoiceBlendFunc_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_depth_funcchoicegles_pipeline_settings_groupschema_DepthFunc_TxsdGlesPipelineSettingsGroupChoiceDepthFunc_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stencil_opchoicegles_pipeline_settings_groupschema_StencilOp_TxsdGlesPipelineSettingsGroupChoiceStencilOp_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fog_enablechoicegles_pipeline_settings_groupschema_FogEnable_TxsdGlesPipelineSettingsGroupChoiceFogEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_cull_face_enablechoicegles_pipeline_settings_groupschema_CullFaceEnable_TxsdGlesPipelineSettingsGroupChoiceCullFaceEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_line_widthchoicegles_pipeline_settings_groupschema_LineWidth_TxsdGlesPipelineSettingsGroupChoiceLineWidth_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceStates struct {
	XsdGoPkgHasGroup_GlesPipelineSettingsGroup
}

//	If the WalkHandlers.TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceStates function is not nil (ie. was set by outside code), calls it with this TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceStates instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceStates instance.
func (me *TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceStates) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceStates; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasGroup_GlesPipelineSettingsGroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_statessequencepasssequencetechniquesequenceprofile_gles_typeschema_States_TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceStates_ struct {
	States *TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceStates `xml:"http://www.collada.org/2008/03/COLLADASchema states"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_statessequencepasssequencetechniquesequenceprofile_gles_typeschema_States_TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceStates_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_statessequencepasssequencetechniquesequenceprofile_gles_typeschema_States_TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceStates_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_statessequencepasssequencetechniquesequenceprofile_gles_typeschema_States_TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceStates_ instance.
func (me *XsdGoPkgHasElem_statessequencepasssequencetechniquesequenceprofile_gles_typeschema_States_TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceStates_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_statessequencepasssequencetechniquesequenceprofile_gles_typeschema_States_TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceStates_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.States.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceEvaluate struct {
	XsdGoPkgHasElems_depth_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_DepthClear_TfxCleardepthType_

	XsdGoPkgHasElem_drawsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_Draw_TfxDrawType_

	XsdGoPkgHasElems_color_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_ColorClear_TfxClearcolorType_

	XsdGoPkgHasElems_color_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_ColorTarget_TfxColortargetType_

	XsdGoPkgHasElems_stencil_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_StencilClear_TfxClearstencilType_

	XsdGoPkgHasElems_stencil_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_StencilTarget_TfxStenciltargetType_

	XsdGoPkgHasElems_depth_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_DepthTarget_TfxDepthtargetType_
}

//	If the WalkHandlers.TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceEvaluate function is not nil (ie. was set by outside code), calls it with this TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceEvaluate instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceEvaluate instance.
func (me *TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceEvaluate) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceEvaluate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_depth_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_DepthClear_TfxCleardepthType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_drawsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_Draw_TfxDrawType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_color_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_ColorClear_TfxClearcolorType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_color_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_ColorTarget_TfxColortargetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_stencil_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_StencilClear_TfxClearstencilType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_stencil_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_StencilTarget_TfxStenciltargetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_depth_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_DepthTarget_TfxDepthtargetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_evaluatesequencepasssequencetechniquesequenceprofile_gles_typeschema_Evaluate_TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceEvaluate_ struct {
	Evaluate *TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceEvaluate `xml:"http://www.collada.org/2008/03/COLLADASchema evaluate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_evaluatesequencepasssequencetechniquesequenceprofile_gles_typeschema_Evaluate_TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceEvaluate_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_evaluatesequencepasssequencetechniquesequenceprofile_gles_typeschema_Evaluate_TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceEvaluate_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_evaluatesequencepasssequencetechniquesequenceprofile_gles_typeschema_Evaluate_TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceEvaluate_ instance.
func (me *XsdGoPkgHasElem_evaluatesequencepasssequencetechniquesequenceprofile_gles_typeschema_Evaluate_TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceEvaluate_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_evaluatesequencepasssequencetechniquesequenceprofile_gles_typeschema_Evaluate_TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceEvaluate_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Evaluate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProfileGlesTypeSequenceTechniqueSequencePass struct {
	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_TsidType_

	XsdGoPkgHasElems_annotatesequenceglsl_newparam_typeschema_Annotate_TfxAnnotateType_

	XsdGoPkgHasElem_statessequencepasssequencetechniquesequenceprofile_gles_typeschema_States_TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceStates_

	XsdGoPkgHasElem_evaluatesequencepasssequencetechniquesequenceprofile_gles_typeschema_Evaluate_TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceEvaluate_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_
}

//	If the WalkHandlers.TxsdProfileGlesTypeSequenceTechniqueSequencePass function is not nil (ie. was set by outside code), calls it with this TxsdProfileGlesTypeSequenceTechniqueSequencePass instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TxsdProfileGlesTypeSequenceTechniqueSequencePass instance.
func (me *TxsdProfileGlesTypeSequenceTechniqueSequencePass) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileGlesTypeSequenceTechniqueSequencePass; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_annotatesequenceglsl_newparam_typeschema_Annotate_TfxAnnotateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_statessequencepasssequencetechniquesequenceprofile_gles_typeschema_States_TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceStates_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_evaluatesequencepasssequencetechniquesequenceprofile_gles_typeschema_Evaluate_TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceEvaluate_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_passsequencetechniquesequenceprofile_gles_typeschema_Pass_TxsdProfileGlesTypeSequenceTechniqueSequencePass_ struct {
	//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
	Passes []*TxsdProfileGlesTypeSequenceTechniqueSequencePass `xml:"http://www.collada.org/2008/03/COLLADASchema pass"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_passsequencetechniquesequenceprofile_gles_typeschema_Pass_TxsdProfileGlesTypeSequenceTechniqueSequencePass_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_passsequencetechniquesequenceprofile_gles_typeschema_Pass_TxsdProfileGlesTypeSequenceTechniqueSequencePass_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_passsequencetechniquesequenceprofile_gles_typeschema_Pass_TxsdProfileGlesTypeSequenceTechniqueSequencePass_ instance.
func (me *XsdGoPkgHasElems_passsequencetechniquesequenceprofile_gles_typeschema_Pass_TxsdProfileGlesTypeSequenceTechniqueSequencePass_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_passsequencetechniquesequenceprofile_gles_typeschema_Pass_TxsdProfileGlesTypeSequenceTechniqueSequencePass_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Passes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProfileGlesTypeSequenceTechnique struct {
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	XsdGoPkgHasAttr_Id_XsdtId_

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element.
	XsdGoPkgHasAttr_Sid_TsidType_

	XsdGoPkgHasElems_annotatesequenceglsl_newparam_typeschema_Annotate_TfxAnnotateType_

	//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
	XsdGoPkgHasElems_passsequencetechniquesequenceprofile_gles_typeschema_Pass_TxsdProfileGlesTypeSequenceTechniqueSequencePass_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_
}

//	If the WalkHandlers.TxsdProfileGlesTypeSequenceTechnique function is not nil (ie. was set by outside code), calls it with this TxsdProfileGlesTypeSequenceTechnique instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TxsdProfileGlesTypeSequenceTechnique instance.
func (me *TxsdProfileGlesTypeSequenceTechnique) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileGlesTypeSequenceTechnique; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_annotatesequenceglsl_newparam_typeschema_Annotate_TfxAnnotateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_passsequencetechniquesequenceprofile_gles_typeschema_Pass_TxsdProfileGlesTypeSequenceTechniqueSequencePass_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_techniquesequenceprofile_gles_typeschema_Technique_TxsdProfileGlesTypeSequenceTechnique_ struct {
	//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
	Techniques []*TxsdProfileGlesTypeSequenceTechnique `xml:"http://www.collada.org/2008/03/COLLADASchema technique"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_techniquesequenceprofile_gles_typeschema_Technique_TxsdProfileGlesTypeSequenceTechnique_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_techniquesequenceprofile_gles_typeschema_Technique_TxsdProfileGlesTypeSequenceTechnique_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_techniquesequenceprofile_gles_typeschema_Technique_TxsdProfileGlesTypeSequenceTechnique_ instance.
func (me *XsdGoPkgHasElems_techniquesequenceprofile_gles_typeschema_Technique_TxsdProfileGlesTypeSequenceTechnique_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_techniquesequenceprofile_gles_typeschema_Technique_TxsdProfileGlesTypeSequenceTechnique_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Techniques {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Create a new, named param object in the GLES Runtime, assign it a type, an initial value, and additional attributes at declaration time.
//	A group that defines the available variable types for GLES parameters.
type Tfloat3X2Type TlistOfFloatsType

//	Since Tfloat3X2Type is just a simple String type, this merely returns the current string value.
func (me Tfloat3X2Type) String() string { return TlistOfFloatsType(me).String() }

//	Since Tfloat3X2Type is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat3X2Type) Set(s string) { (*TlistOfFloatsType)(me).Set(s) }

//	This convenience method just performs a simple type conversion to Tfloat3X2Type's alias type TlistOfFloatsType.
func (me Tfloat3X2Type) ToTlistOfFloatsType() TlistOfFloatsType { return TlistOfFloatsType(me) }

type XsdGoPkgHasElem_float3x2choicegles_param_groupschema_Float3X2_Tfloat3X2Type_ struct {
	Float3X2 Tfloat3X2Type `xml:"http://www.collada.org/2008/03/COLLADASchema float3x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float3x2choicegles_param_groupschema_Float3X2_Tfloat3X2Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float3x2choicegles_param_groupschema_Float3X2_Tfloat3X2Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float3x2choicegles_param_groupschema_Float3X2_Tfloat3X2Type_ instance.
func (me *XsdGoPkgHasElem_float3x2choicegles_param_groupschema_Float3X2_Tfloat3X2Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float3x2choicegles_param_groupschema_Float3X2_Tfloat3X2Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_float1x2choicegles_param_groupschema_Float1X2_Tfloat2Type_ struct {
	Float1X2 Tfloat2Type `xml:"http://www.collada.org/2008/03/COLLADASchema float1x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float1x2choicegles_param_groupschema_Float1X2_Tfloat2Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float1x2choicegles_param_groupschema_Float1X2_Tfloat2Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float1x2choicegles_param_groupschema_Float1X2_Tfloat2Type_ instance.
func (me *XsdGoPkgHasElem_float1x2choicegles_param_groupschema_Float1X2_Tfloat2Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float1x2choicegles_param_groupschema_Float1X2_Tfloat2Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tfloat3X4Type TlistOfFloatsType

//	This convenience method just performs a simple type conversion to Tfloat3X4Type's alias type TlistOfFloatsType.
func (me Tfloat3X4Type) ToTlistOfFloatsType() TlistOfFloatsType { return TlistOfFloatsType(me) }

//	Since Tfloat3X4Type is just a simple String type, this merely returns the current string value.
func (me Tfloat3X4Type) String() string { return TlistOfFloatsType(me).String() }

//	Since Tfloat3X4Type is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat3X4Type) Set(s string) { (*TlistOfFloatsType)(me).Set(s) }

type XsdGoPkgHasElem_float3x4choicegles_param_groupschema_Float3X4_Tfloat3X4Type_ struct {
	Float3X4 Tfloat3X4Type `xml:"http://www.collada.org/2008/03/COLLADASchema float3x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float3x4choicegles_param_groupschema_Float3X4_Tfloat3X4Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float3x4choicegles_param_groupschema_Float3X4_Tfloat3X4Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float3x4choicegles_param_groupschema_Float3X4_Tfloat3X4Type_ instance.
func (me *XsdGoPkgHasElem_float3x4choicegles_param_groupschema_Float3X4_Tfloat3X4Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float3x4choicegles_param_groupschema_Float3X4_Tfloat3X4Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tfloat2X4Type TlistOfFloatsType

//	This convenience method just performs a simple type conversion to Tfloat2X4Type's alias type TlistOfFloatsType.
func (me Tfloat2X4Type) ToTlistOfFloatsType() TlistOfFloatsType { return TlistOfFloatsType(me) }

//	Since Tfloat2X4Type is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat2X4Type) Set(s string) { (*TlistOfFloatsType)(me).Set(s) }

//	Since Tfloat2X4Type is just a simple String type, this merely returns the current string value.
func (me Tfloat2X4Type) String() string { return TlistOfFloatsType(me).String() }

type XsdGoPkgHasElem_float2x4choicegles_param_groupschema_Float2X4_Tfloat2X4Type_ struct {
	Float2X4 Tfloat2X4Type `xml:"http://www.collada.org/2008/03/COLLADASchema float2x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float2x4choicegles_param_groupschema_Float2X4_Tfloat2X4Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float2x4choicegles_param_groupschema_Float2X4_Tfloat2X4Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float2x4choicegles_param_groupschema_Float2X4_Tfloat2X4Type_ instance.
func (me *XsdGoPkgHasElem_float2x4choicegles_param_groupschema_Float2X4_Tfloat2X4Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float2x4choicegles_param_groupschema_Float2X4_Tfloat2X4Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tfloat4X2Type TlistOfFloatsType

//	This convenience method just performs a simple type conversion to Tfloat4X2Type's alias type TlistOfFloatsType.
func (me Tfloat4X2Type) ToTlistOfFloatsType() TlistOfFloatsType { return TlistOfFloatsType(me) }

//	Since Tfloat4X2Type is just a simple String type, this merely returns the current string value.
func (me Tfloat4X2Type) String() string { return TlistOfFloatsType(me).String() }

//	Since Tfloat4X2Type is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat4X2Type) Set(s string) { (*TlistOfFloatsType)(me).Set(s) }

type XsdGoPkgHasElem_float4x2choicegles_param_groupschema_Float4X2_Tfloat4X2Type_ struct {
	Float4X2 Tfloat4X2Type `xml:"http://www.collada.org/2008/03/COLLADASchema float4x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float4x2choicegles_param_groupschema_Float4X2_Tfloat4X2Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float4x2choicegles_param_groupschema_Float4X2_Tfloat4X2Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float4x2choicegles_param_groupschema_Float4X2_Tfloat4X2Type_ instance.
func (me *XsdGoPkgHasElem_float4x2choicegles_param_groupschema_Float4X2_Tfloat4X2Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float4x2choicegles_param_groupschema_Float4X2_Tfloat4X2Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_float3x1choicegles_param_groupschema_Float3X1_Tfloat3Type_ struct {
	Float3X1 Tfloat3Type `xml:"http://www.collada.org/2008/03/COLLADASchema float3x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float3x1choicegles_param_groupschema_Float3X1_Tfloat3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float3x1choicegles_param_groupschema_Float3X1_Tfloat3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float3x1choicegles_param_groupschema_Float3X1_Tfloat3Type_ instance.
func (me *XsdGoPkgHasElem_float3x1choicegles_param_groupschema_Float3X1_Tfloat3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float3x1choicegles_param_groupschema_Float3X1_Tfloat3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tfloat2X3Type TlistOfFloatsType

//	Since Tfloat2X3Type is just a simple String type, this merely returns the current string value.
func (me Tfloat2X3Type) String() string { return TlistOfFloatsType(me).String() }

//	This convenience method just performs a simple type conversion to Tfloat2X3Type's alias type TlistOfFloatsType.
func (me Tfloat2X3Type) ToTlistOfFloatsType() TlistOfFloatsType { return TlistOfFloatsType(me) }

//	Since Tfloat2X3Type is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat2X3Type) Set(s string) { (*TlistOfFloatsType)(me).Set(s) }

type XsdGoPkgHasElem_float2x3choicegles_param_groupschema_Float2X3_Tfloat2X3Type_ struct {
	Float2X3 Tfloat2X3Type `xml:"http://www.collada.org/2008/03/COLLADASchema float2x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float2x3choicegles_param_groupschema_Float2X3_Tfloat2X3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float2x3choicegles_param_groupschema_Float2X3_Tfloat2X3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float2x3choicegles_param_groupschema_Float2X3_Tfloat2X3Type_ instance.
func (me *XsdGoPkgHasElem_float2x3choicegles_param_groupschema_Float2X3_Tfloat2X3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float2x3choicegles_param_groupschema_Float2X3_Tfloat2X3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_float1x1choicegles_param_groupschema_Float1X1_TfloatType_ struct {
	Float1X1 *TfloatType `xml:"http://www.collada.org/2008/03/COLLADASchema float1x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float1x1choicegles_param_groupschema_Float1X1_TfloatType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float1x1choicegles_param_groupschema_Float1X1_TfloatType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float1x1choicegles_param_groupschema_Float1X1_TfloatType_ instance.
func (me *XsdGoPkgHasElem_float1x1choicegles_param_groupschema_Float1X1_TfloatType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float1x1choicegles_param_groupschema_Float1X1_TfloatType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglesEnumerationType xsdt.String

//	TglesEnumerationType is an XSD union-type of several types. This is a simple type conversion to TglShadeModelEnum, but keep in mind the actual value may or may not be a valid TglShadeModelEnum value.
func (me TglesEnumerationType) ToTglShadeModelEnum() TglShadeModelEnum { return TglShadeModelEnum(me) }

//	TglesEnumerationType is an XSD union-type of several types. This is a simple type conversion to TglFrontFaceEnum, but keep in mind the actual value may or may not be a valid TglFrontFaceEnum value.
func (me TglesEnumerationType) ToTglFrontFaceEnum() TglFrontFaceEnum { return TglFrontFaceEnum(me) }

//	TglesEnumerationType is an XSD union-type of several types. This is a simple type conversion to TglFaceEnum, but keep in mind the actual value may or may not be a valid TglFaceEnum value.
func (me TglesEnumerationType) ToTglFaceEnum() TglFaceEnum { return TglFaceEnum(me) }

//	TglesEnumerationType is an XSD union-type of several types. This is a simple type conversion to TglPolygonModeEnum, but keep in mind the actual value may or may not be a valid TglPolygonModeEnum value.
func (me TglesEnumerationType) ToTglPolygonModeEnum() TglPolygonModeEnum {
	return TglPolygonModeEnum(me)
}

//	Since TglesEnumerationType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesEnumerationType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	TglesEnumerationType is an XSD union-type of several types. This is a simple type conversion to TglFogEnum, but keep in mind the actual value may or may not be a valid TglFogEnum value.
func (me TglesEnumerationType) ToTglFogEnum() TglFogEnum { return TglFogEnum(me) }

//	TglesEnumerationType is an XSD union-type of several types. This is a simple type conversion to TglBlendEnum, but keep in mind the actual value may or may not be a valid TglBlendEnum value.
func (me TglesEnumerationType) ToTglBlendEnum() TglBlendEnum { return TglBlendEnum(me) }

//	TglesEnumerationType is an XSD union-type of several types. This is a simple type conversion to TglLogicOpEnum, but keep in mind the actual value may or may not be a valid TglLogicOpEnum value.
func (me TglesEnumerationType) ToTglLogicOpEnum() TglLogicOpEnum { return TglLogicOpEnum(me) }

//	This convenience method just performs a simple type conversion to TglesEnumerationType's alias type xsdt.String.
func (me TglesEnumerationType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TglesEnumerationType is an XSD union-type of several types. This is a simple type conversion to TglLightModelColorControlEnum, but keep in mind the actual value may or may not be a valid TglLightModelColorControlEnum value.
func (me TglesEnumerationType) ToTglLightModelColorControlEnum() TglLightModelColorControlEnum {
	return TglLightModelColorControlEnum(me)
}

//	TglesEnumerationType is an XSD union-type of several types. This is a simple type conversion to TglFuncEnum, but keep in mind the actual value may or may not be a valid TglFuncEnum value.
func (me TglesEnumerationType) ToTglFuncEnum() TglFuncEnum { return TglFuncEnum(me) }

//	TglesEnumerationType is an XSD union-type of several types. This is a simple type conversion to TglMaterialEnum, but keep in mind the actual value may or may not be a valid TglMaterialEnum value.
func (me TglesEnumerationType) ToTglMaterialEnum() TglMaterialEnum { return TglMaterialEnum(me) }

//	Since TglesEnumerationType is just a simple String type, this merely returns the current string value.
func (me TglesEnumerationType) String() string { return xsdt.String(me).String() }

//	TglesEnumerationType is an XSD union-type of several types. This is a simple type conversion to TglStencilOpEnum, but keep in mind the actual value may or may not be a valid TglStencilOpEnum value.
func (me TglesEnumerationType) ToTglStencilOpEnum() TglStencilOpEnum { return TglStencilOpEnum(me) }

type XsdGoPkgHasElem_enumchoicegles_param_groupschema_Enum_TglesEnumerationType_ struct {
	Enum TglesEnumerationType `xml:"http://www.collada.org/2008/03/COLLADASchema enum"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_enumchoicegles_param_groupschema_Enum_TglesEnumerationType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_enumchoicegles_param_groupschema_Enum_TglesEnumerationType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_enumchoicegles_param_groupschema_Enum_TglesEnumerationType_ instance.
func (me *XsdGoPkgHasElem_enumchoicegles_param_groupschema_Enum_TglesEnumerationType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_enumchoicegles_param_groupschema_Enum_TglesEnumerationType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Sampling state that can be sharable between samplers because there is often heavy re-use
type XsdGoPkgHasElem_mip_max_levelsequencegles_sampler_states_groupschema_MipMaxLevel_XsdtUnsignedByte_255 struct {
	MipMaxLevel xsdt.UnsignedByte `xml:"http://www.collada.org/2008/03/COLLADASchema mip_max_level"`
}

//	Returns the default value for MipMaxLevel -- 255
func (me XsdGoPkgHasElem_mip_max_levelsequencegles_sampler_states_groupschema_MipMaxLevel_XsdtUnsignedByte_255) MipMaxLevelDefault() xsdt.UnsignedByte {
	return xsdt.UnsignedByte(255)
}

//	If the WalkHandlers.XsdGoPkgHasElem_mip_max_levelsequencegles_sampler_states_groupschema_MipMaxLevel_XsdtUnsignedByte_255 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mip_max_levelsequencegles_sampler_states_groupschema_MipMaxLevel_XsdtUnsignedByte_255 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_mip_max_levelsequencegles_sampler_states_groupschema_MipMaxLevel_XsdtUnsignedByte_255 instance.
func (me *XsdGoPkgHasElem_mip_max_levelsequencegles_sampler_states_groupschema_MipMaxLevel_XsdtUnsignedByte_255) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_mip_max_levelsequencegles_sampler_states_groupschema_MipMaxLevel_XsdtUnsignedByte_255; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglesSamplerWrapEnum xsdt.Nmtoken

//	Returns true if the value of this enumerated TglesSamplerWrapEnum is "CLAMP_TO_EDGE".
func (me TglesSamplerWrapEnum) IsClampToEdge() bool { return me == "CLAMP_TO_EDGE" }

//	Since TglesSamplerWrapEnum is just a simple String type, this merely returns the current string value.
func (me TglesSamplerWrapEnum) String() string { return xsdt.Nmtoken(me).String() }

//	Returns true if the value of this enumerated TglesSamplerWrapEnum is "REPEAT".
func (me TglesSamplerWrapEnum) IsRepeat() bool { return me == "REPEAT" }

//	This convenience method just performs a simple type conversion to TglesSamplerWrapEnum's alias type xsdt.Nmtoken.
func (me TglesSamplerWrapEnum) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TglesSamplerWrapEnum is "CLAMP".
func (me TglesSamplerWrapEnum) IsClamp() bool { return me == "CLAMP" }

//	Returns true if the value of this enumerated TglesSamplerWrapEnum is "MIRRORED_REPEAT".
func (me TglesSamplerWrapEnum) IsMirroredRepeat() bool { return me == "MIRRORED_REPEAT" }

//	Since TglesSamplerWrapEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesSamplerWrapEnum) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

type XsdGoPkgHasElem_wrap_tsequencegles_sampler_states_groupschema_WrapT_TglesSamplerWrapEnum_Repeat struct {
	WrapT TglesSamplerWrapEnum `xml:"http://www.collada.org/2008/03/COLLADASchema wrap_t"`
}

//	Returns the default value for WrapT -- "REPEAT"
func (me XsdGoPkgHasElem_wrap_tsequencegles_sampler_states_groupschema_WrapT_TglesSamplerWrapEnum_Repeat) WrapTDefault() TglesSamplerWrapEnum {
	return TglesSamplerWrapEnum("REPEAT")
}

//	If the WalkHandlers.XsdGoPkgHasElem_wrap_tsequencegles_sampler_states_groupschema_WrapT_TglesSamplerWrapEnum_Repeat function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_wrap_tsequencegles_sampler_states_groupschema_WrapT_TglesSamplerWrapEnum_Repeat instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_wrap_tsequencegles_sampler_states_groupschema_WrapT_TglesSamplerWrapEnum_Repeat instance.
func (me *XsdGoPkgHasElem_wrap_tsequencegles_sampler_states_groupschema_WrapT_TglesSamplerWrapEnum_Repeat) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_wrap_tsequencegles_sampler_states_groupschema_WrapT_TglesSamplerWrapEnum_Repeat; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_wrap_ssequencegles_sampler_states_groupschema_WrapS_TglesSamplerWrapEnum_Repeat struct {
	WrapS TglesSamplerWrapEnum `xml:"http://www.collada.org/2008/03/COLLADASchema wrap_s"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_wrap_ssequencegles_sampler_states_groupschema_WrapS_TglesSamplerWrapEnum_Repeat function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_wrap_ssequencegles_sampler_states_groupschema_WrapS_TglesSamplerWrapEnum_Repeat instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_wrap_ssequencegles_sampler_states_groupschema_WrapS_TglesSamplerWrapEnum_Repeat instance.
func (me *XsdGoPkgHasElem_wrap_ssequencegles_sampler_states_groupschema_WrapS_TglesSamplerWrapEnum_Repeat) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_wrap_ssequencegles_sampler_states_groupschema_WrapS_TglesSamplerWrapEnum_Repeat; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for WrapS -- "REPEAT"
func (me XsdGoPkgHasElem_wrap_ssequencegles_sampler_states_groupschema_WrapS_TglesSamplerWrapEnum_Repeat) WrapSDefault() TglesSamplerWrapEnum {
	return TglesSamplerWrapEnum("REPEAT")
}

type XsdGoPkgHasElem_mipfiltersequencegles_sampler_states_groupschema_Mipfilter_TfxSamplerMipFilterEnum_Nearest struct {
	Mipfilter TfxSamplerMipFilterEnum `xml:"http://www.collada.org/2008/03/COLLADASchema mipfilter"`
}

//	Returns the default value for Mipfilter -- "NEAREST"
func (me XsdGoPkgHasElem_mipfiltersequencegles_sampler_states_groupschema_Mipfilter_TfxSamplerMipFilterEnum_Nearest) MipfilterDefault() TfxSamplerMipFilterEnum {
	return TfxSamplerMipFilterEnum("NEAREST")
}

//	If the WalkHandlers.XsdGoPkgHasElem_mipfiltersequencegles_sampler_states_groupschema_Mipfilter_TfxSamplerMipFilterEnum_Nearest function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mipfiltersequencegles_sampler_states_groupschema_Mipfilter_TfxSamplerMipFilterEnum_Nearest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_mipfiltersequencegles_sampler_states_groupschema_Mipfilter_TfxSamplerMipFilterEnum_Nearest instance.
func (me *XsdGoPkgHasElem_mipfiltersequencegles_sampler_states_groupschema_Mipfilter_TfxSamplerMipFilterEnum_Nearest) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_mipfiltersequencegles_sampler_states_groupschema_Mipfilter_TfxSamplerMipFilterEnum_Nearest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasGroup_GlesSamplerStatesGroup struct {
	XsdGoPkgHasElem_mip_max_levelsequencegles_sampler_states_groupschema_MipMaxLevel_XsdtUnsignedByte_255

	XsdGoPkgHasElem_wrap_tsequencegles_sampler_states_groupschema_WrapT_TglesSamplerWrapEnum_Repeat

	XsdGoPkgHasElem_wrap_ssequencegles_sampler_states_groupschema_WrapS_TglesSamplerWrapEnum_Repeat

	XsdGoPkgHasElem_magfiltersequencefx_sampler_states_groupschema_Magfilter_TfxSamplerMagFilterEnum_Linear

	XsdGoPkgHasElem_mipfiltersequencegles_sampler_states_groupschema_Mipfilter_TfxSamplerMipFilterEnum_Nearest

	XsdGoPkgHasElem_minfiltersequencefx_sampler_states_groupschema_Minfilter_TfxSamplerMinFilterEnum_Linear

	XsdGoPkgHasElem_mip_biassequencefx_sampler_states_groupschema_MipBias_XsdtFloat_00

	//	The extra element may appear any number of times.
	//	OpenGL ES extensions may be used here.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_
}

//	If the WalkHandlers.XsdGoPkgHasGroup_GlesSamplerStatesGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_GlesSamplerStatesGroup instance as the single argument. Then calls the Walk() method on 8/8 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_GlesSamplerStatesGroup instance.
func (me *XsdGoPkgHasGroup_GlesSamplerStatesGroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasGroup_GlesSamplerStatesGroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_minfiltersequencefx_sampler_states_groupschema_Minfilter_TfxSamplerMinFilterEnum_Linear.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_mip_biassequencefx_sampler_states_groupschema_MipBias_XsdtFloat_00.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_mip_max_levelsequencegles_sampler_states_groupschema_MipMaxLevel_XsdtUnsignedByte_255.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_wrap_tsequencegles_sampler_states_groupschema_WrapT_TglesSamplerWrapEnum_Repeat.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_wrap_ssequencegles_sampler_states_groupschema_WrapS_TglesSamplerWrapEnum_Repeat.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_magfiltersequencefx_sampler_states_groupschema_Magfilter_TfxSamplerMagFilterEnum_Linear.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_mipfiltersequencegles_sampler_states_groupschema_Mipfilter_TfxSamplerMipFilterEnum_Nearest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The semantic attribute specifies which effect parameter to bind.
type XsdGoPkgHasAttr_Semantic_XsdtNCName_ struct {
	//	The semantic attribute specifies which effect parameter to bind.
	Semantic xsdt.NCName `xml:"http://www.collada.org/2008/03/COLLADASchema semantic,attr"`
}

type TxsdGlesSamplerTypeSequenceTexcoord struct {
	XsdGoPkgHasAttr_Semantic_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlesSamplerTypeSequenceTexcoord function is not nil (ie. was set by outside code), calls it with this TxsdGlesSamplerTypeSequenceTexcoord instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TxsdGlesSamplerTypeSequenceTexcoord instance.
func (me *TxsdGlesSamplerTypeSequenceTexcoord) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesSamplerTypeSequenceTexcoord; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_texcoordsequencegles_sampler_typeschema_Texcoord_TxsdGlesSamplerTypeSequenceTexcoord_ struct {
	Texcoord *TxsdGlesSamplerTypeSequenceTexcoord `xml:"http://www.collada.org/2008/03/COLLADASchema texcoord"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_texcoordsequencegles_sampler_typeschema_Texcoord_TxsdGlesSamplerTypeSequenceTexcoord_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texcoordsequencegles_sampler_typeschema_Texcoord_TxsdGlesSamplerTypeSequenceTexcoord_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texcoordsequencegles_sampler_typeschema_Texcoord_TxsdGlesSamplerTypeSequenceTexcoord_ instance.
func (me *XsdGoPkgHasElem_texcoordsequencegles_sampler_typeschema_Texcoord_TxsdGlesSamplerTypeSequenceTexcoord_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_texcoordsequencegles_sampler_typeschema_Texcoord_TxsdGlesSamplerTypeSequenceTexcoord_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Texcoord.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglesSamplerType struct {
	XsdGoPkgHasElem_instance_imagesequencefx_sampler_typeschema_InstanceImage_TinstanceImageType_

	XsdGoPkgHasGroup_GlesSamplerStatesGroup

	XsdGoPkgHasElem_texcoordsequencegles_sampler_typeschema_Texcoord_TxsdGlesSamplerTypeSequenceTexcoord_
}

//	If the WalkHandlers.TglesSamplerType function is not nil (ie. was set by outside code), calls it with this TglesSamplerType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TglesSamplerType instance.
func (me *TglesSamplerType) Walk() (err error) {
	if fn := WalkHandlers.TglesSamplerType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_instance_imagesequencefx_sampler_typeschema_InstanceImage_TinstanceImageType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroup_GlesSamplerStatesGroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_texcoordsequencegles_sampler_typeschema_Texcoord_TxsdGlesSamplerTypeSequenceTexcoord_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_sampler2Dchoicegles_param_groupschema_Sampler2D_TglesSamplerType_ struct {
	Sampler2D *TglesSamplerType `xml:"http://www.collada.org/2008/03/COLLADASchema sampler2D"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sampler2Dchoicegles_param_groupschema_Sampler2D_TglesSamplerType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sampler2Dchoicegles_param_groupschema_Sampler2D_TglesSamplerType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sampler2Dchoicegles_param_groupschema_Sampler2D_TglesSamplerType_ instance.
func (me *XsdGoPkgHasElem_sampler2Dchoicegles_param_groupschema_Sampler2D_TglesSamplerType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sampler2Dchoicegles_param_groupschema_Sampler2D_TglesSamplerType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Sampler2D.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_float2x1choicegles_param_groupschema_Float2X1_Tfloat2Type_ struct {
	Float2X1 Tfloat2Type `xml:"http://www.collada.org/2008/03/COLLADASchema float2x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float2x1choicegles_param_groupschema_Float2X1_Tfloat2Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float2x1choicegles_param_groupschema_Float2X1_Tfloat2Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float2x1choicegles_param_groupschema_Float2X1_Tfloat2Type_ instance.
func (me *XsdGoPkgHasElem_float2x1choicegles_param_groupschema_Float2X1_Tfloat2Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float2x1choicegles_param_groupschema_Float2X1_Tfloat2Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_float4x1choicegles_param_groupschema_Float4X1_Tfloat4Type_ struct {
	Float4X1 Tfloat4Type `xml:"http://www.collada.org/2008/03/COLLADASchema float4x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float4x1choicegles_param_groupschema_Float4X1_Tfloat4Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float4x1choicegles_param_groupschema_Float4X1_Tfloat4Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float4x1choicegles_param_groupschema_Float4X1_Tfloat4Type_ instance.
func (me *XsdGoPkgHasElem_float4x1choicegles_param_groupschema_Float4X1_Tfloat4Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float4x1choicegles_param_groupschema_Float4X1_Tfloat4Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tfloat4X3Type TlistOfFloatsType

//	This convenience method just performs a simple type conversion to Tfloat4X3Type's alias type TlistOfFloatsType.
func (me Tfloat4X3Type) ToTlistOfFloatsType() TlistOfFloatsType { return TlistOfFloatsType(me) }

//	Since Tfloat4X3Type is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat4X3Type) Set(s string) { (*TlistOfFloatsType)(me).Set(s) }

//	Since Tfloat4X3Type is just a simple String type, this merely returns the current string value.
func (me Tfloat4X3Type) String() string { return TlistOfFloatsType(me).String() }

type XsdGoPkgHasElem_float4x3choicegles_param_groupschema_Float4X3_Tfloat4X3Type_ struct {
	Float4X3 Tfloat4X3Type `xml:"http://www.collada.org/2008/03/COLLADASchema float4x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float4x3choicegles_param_groupschema_Float4X3_Tfloat4X3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float4x3choicegles_param_groupschema_Float4X3_Tfloat4X3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float4x3choicegles_param_groupschema_Float4X3_Tfloat4X3Type_ instance.
func (me *XsdGoPkgHasElem_float4x3choicegles_param_groupschema_Float4X3_Tfloat4X3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float4x3choicegles_param_groupschema_Float4X3_Tfloat4X3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_float1x3choicegles_param_groupschema_Float1X3_Tfloat3Type_ struct {
	Float1X3 Tfloat3Type `xml:"http://www.collada.org/2008/03/COLLADASchema float1x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float1x3choicegles_param_groupschema_Float1X3_Tfloat3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float1x3choicegles_param_groupschema_Float1X3_Tfloat3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float1x3choicegles_param_groupschema_Float1X3_Tfloat3Type_ instance.
func (me *XsdGoPkgHasElem_float1x3choicegles_param_groupschema_Float1X3_Tfloat3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float1x3choicegles_param_groupschema_Float1X3_Tfloat3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_float1x4choicegles_param_groupschema_Float1X4_Tfloat4Type_ struct {
	Float1X4 Tfloat4Type `xml:"http://www.collada.org/2008/03/COLLADASchema float1x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float1x4choicegles_param_groupschema_Float1X4_Tfloat4Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float1x4choicegles_param_groupschema_Float1X4_Tfloat4Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float1x4choicegles_param_groupschema_Float1X4_Tfloat4Type_ instance.
func (me *XsdGoPkgHasElem_float1x4choicegles_param_groupschema_Float1X4_Tfloat4Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float1x4choicegles_param_groupschema_Float1X4_Tfloat4Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasGroup_GlesParamGroup struct {
	XsdGoPkgHasElem_float3x2choicegles_param_groupschema_Float3X2_Tfloat3X2Type_

	XsdGoPkgHasElem_float1x2choicegles_param_groupschema_Float1X2_Tfloat2Type_

	XsdGoPkgHasElem_float3x4choicegles_param_groupschema_Float3X4_Tfloat3X4Type_

	XsdGoPkgHasElem_float2choicefx_annotate_groupschema_Float2_Tfloat2Type_

	XsdGoPkgHasElem_float2x4choicegles_param_groupschema_Float2X4_Tfloat2X4Type_

	XsdGoPkgHasElem_int4choicefx_annotate_groupschema_Int4_Tint4Type_

	XsdGoPkgHasElem_bool2choicefx_annotate_groupschema_Bool2_Tbool2Type_

	XsdGoPkgHasElem_float4x2choicegles_param_groupschema_Float4X2_Tfloat4X2Type_

	XsdGoPkgHasElem_float3x1choicegles_param_groupschema_Float3X1_Tfloat3Type_

	XsdGoPkgHasElem_float3choicefx_annotate_groupschema_Float3_Tfloat3Type_

	XsdGoPkgHasElem_float2x3choicegles_param_groupschema_Float2X3_Tfloat2X3Type_

	XsdGoPkgHasElem_intchoicekinematics_newparam_typeschema_Int_TintType_

	XsdGoPkgHasElem_boolchoicekinematics_newparam_typeschema_Bool_XsdtBoolean_

	XsdGoPkgHasElem_float4x4choicefx_annotate_groupschema_Float4X4_Tfloat4X4Type_

	XsdGoPkgHasElem_float1x1choicegles_param_groupschema_Float1X1_TfloatType_

	XsdGoPkgHasElem_floatchoicekinematics_newparam_typeschema_Float_TfloatType_

	XsdGoPkgHasElem_float2x2choicefx_annotate_groupschema_Float2X2_Tfloat2X2Type_

	XsdGoPkgHasElem_enumchoicegles_param_groupschema_Enum_TglesEnumerationType_

	XsdGoPkgHasElem_bool4choicefx_annotate_groupschema_Bool4_Tbool4Type_

	XsdGoPkgHasElem_sampler2Dchoicegles_param_groupschema_Sampler2D_TglesSamplerType_

	XsdGoPkgHasElem_float2x1choicegles_param_groupschema_Float2X1_Tfloat2Type_

	XsdGoPkgHasElem_int3choicefx_annotate_groupschema_Int3_Tint3Type_

	XsdGoPkgHasElem_int2choicefx_annotate_groupschema_Int2_Tint2Type_

	XsdGoPkgHasElem_float4x1choicegles_param_groupschema_Float4X1_Tfloat4Type_

	XsdGoPkgHasElem_float3x3choicefx_annotate_groupschema_Float3X3_Tfloat3X3Type_

	XsdGoPkgHasElem_bool3choicefx_annotate_groupschema_Bool3_Tbool3Type_

	XsdGoPkgHasElem_float4x3choicegles_param_groupschema_Float4X3_Tfloat4X3Type_

	XsdGoPkgHasElem_float1x3choicegles_param_groupschema_Float1X3_Tfloat3Type_

	XsdGoPkgHasElem_float1x4choicegles_param_groupschema_Float1X4_Tfloat4Type_

	XsdGoPkgHasElem_float4choicefx_annotate_groupschema_Float4_Tfloat4Type_
}

//	If the WalkHandlers.XsdGoPkgHasGroup_GlesParamGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_GlesParamGroup instance as the single argument. Then calls the Walk() method on 30/30 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_GlesParamGroup instance.
func (me *XsdGoPkgHasGroup_GlesParamGroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasGroup_GlesParamGroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_float3x2choicegles_param_groupschema_Float3X2_Tfloat3X2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float1x2choicegles_param_groupschema_Float1X2_Tfloat2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3x4choicegles_param_groupschema_Float3X4_Tfloat3X4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2choicefx_annotate_groupschema_Float2_Tfloat2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2x4choicegles_param_groupschema_Float2X4_Tfloat2X4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int4choicefx_annotate_groupschema_Int4_Tint4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool2choicefx_annotate_groupschema_Bool2_Tbool2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4x2choicegles_param_groupschema_Float4X2_Tfloat4X2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3x1choicegles_param_groupschema_Float3X1_Tfloat3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3choicefx_annotate_groupschema_Float3_Tfloat3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2x3choicegles_param_groupschema_Float2X3_Tfloat2X3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_intchoicekinematics_newparam_typeschema_Int_TintType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_boolchoicekinematics_newparam_typeschema_Bool_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4x4choicefx_annotate_groupschema_Float4X4_Tfloat4X4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float1x1choicegles_param_groupschema_Float1X1_TfloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_floatchoicekinematics_newparam_typeschema_Float_TfloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2x2choicefx_annotate_groupschema_Float2X2_Tfloat2X2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_enumchoicegles_param_groupschema_Enum_TglesEnumerationType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool4choicefx_annotate_groupschema_Bool4_Tbool4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sampler2Dchoicegles_param_groupschema_Sampler2D_TglesSamplerType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2x1choicegles_param_groupschema_Float2X1_Tfloat2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int3choicefx_annotate_groupschema_Int3_Tint3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int2choicefx_annotate_groupschema_Int2_Tint2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4x1choicegles_param_groupschema_Float4X1_Tfloat4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3x3choicefx_annotate_groupschema_Float3X3_Tfloat3X3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool3choicefx_annotate_groupschema_Bool3_Tbool3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4x3choicegles_param_groupschema_Float4X3_Tfloat4X3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float1x3choicegles_param_groupschema_Float1X3_Tfloat3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float1x4choicegles_param_groupschema_Float1X4_Tfloat4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4choicefx_annotate_groupschema_Float4_Tfloat4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglesNewparamType struct {
	//	The annotate element allows you to specify an annotation for this new param.
	XsdGoPkgHasElems_annotatesequenceglsl_newparam_typeschema_Annotate_TfxAnnotateType_

	//	The modifier element allows you to specify a modifier for this new param.
	XsdGoPkgHasElem_modifiersequenceglsl_newparam_typeschema_Modifier_TfxModifierEnum_

	//	The semantic element allows you to specify a semantic for this new param.
	XsdGoPkgHasElem_semanticsequenceglsl_newparam_typeschema_Semantic_XsdtNCName_

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element.
	XsdGoPkgHasAttr_Sid_TsidType_

	XsdGoPkgHasGroup_GlesParamGroup
}

//	If the WalkHandlers.TglesNewparamType function is not nil (ie. was set by outside code), calls it with this TglesNewparamType instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TglesNewparamType instance.
func (me *TglesNewparamType) Walk() (err error) {
	if fn := WalkHandlers.TglesNewparamType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_modifiersequenceglsl_newparam_typeschema_Modifier_TfxModifierEnum_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_semanticsequenceglsl_newparam_typeschema_Semantic_XsdtNCName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroup_GlesParamGroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_annotatesequenceglsl_newparam_typeschema_Annotate_TfxAnnotateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_newparamsequenceprofile_gles_typeschema_Newparam_TglesNewparamType_ struct {
	Newparams []*TglesNewparamType `xml:"http://www.collada.org/2008/03/COLLADASchema newparam"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_newparamsequenceprofile_gles_typeschema_Newparam_TglesNewparamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_newparamsequenceprofile_gles_typeschema_Newparam_TglesNewparamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_newparamsequenceprofile_gles_typeschema_Newparam_TglesNewparamType_ instance.
func (me *XsdGoPkgHasElems_newparamsequenceprofile_gles_typeschema_Newparam_TglesNewparamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_newparamsequenceprofile_gles_typeschema_Newparam_TglesNewparamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Newparams {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TprofileGlesType struct {
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The type of platform. This is a vendor-defined character string that indicates the platform or capability target for the technique. Optional
	XsdGoPkgHasAttr_Platform_XsdtNCName_Pc

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
	XsdGoPkgHasElems_techniquesequenceprofile_gles_typeschema_Technique_TxsdProfileGlesTypeSequenceTechnique_

	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	XsdGoPkgHasElems_newparamsequenceprofile_gles_typeschema_Newparam_TglesNewparamType_
}

//	If the WalkHandlers.TprofileGlesType function is not nil (ie. was set by outside code), calls it with this TprofileGlesType instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TprofileGlesType instance.
func (me *TprofileGlesType) Walk() (err error) {
	if fn := WalkHandlers.TprofileGlesType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_newparamsequenceprofile_gles_typeschema_Newparam_TglesNewparamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_techniquesequenceprofile_gles_typeschema_Technique_TxsdProfileGlesTypeSequenceTechnique_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_profile_GLESchoicefx_profile_groupschema_ProfileGles_TprofileGlesType_ struct {
	ProfileGles *TprofileGlesType `xml:"http://www.collada.org/2008/03/COLLADASchema profile_GLES"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_profile_GLESchoicefx_profile_groupschema_ProfileGles_TprofileGlesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_profile_GLESchoicefx_profile_groupschema_ProfileGles_TprofileGlesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_profile_GLESchoicefx_profile_groupschema_ProfileGles_TprofileGlesType_ instance.
func (me *XsdGoPkgHasElem_profile_GLESchoicefx_profile_groupschema_ProfileGles_TprofileGlesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_profile_GLESchoicefx_profile_groupschema_ProfileGles_TprofileGlesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ProfileGles.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Opens a block of CG platform-specific data types and technique declarations.
//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
type TxsdCgPassTypeSequenceEvaluate struct {
	XsdGoPkgHasElems_stencil_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_StencilTarget_TfxStenciltargetType_

	XsdGoPkgHasElems_color_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_ColorTarget_TfxColortargetType_

	XsdGoPkgHasElem_drawsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_Draw_TfxDrawType_

	XsdGoPkgHasElems_depth_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_DepthTarget_TfxDepthtargetType_

	XsdGoPkgHasElems_depth_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_DepthClear_TfxCleardepthType_

	XsdGoPkgHasElems_color_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_ColorClear_TfxClearcolorType_

	XsdGoPkgHasElems_stencil_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_StencilClear_TfxClearstencilType_
}

//	If the WalkHandlers.TxsdCgPassTypeSequenceEvaluate function is not nil (ie. was set by outside code), calls it with this TxsdCgPassTypeSequenceEvaluate instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TxsdCgPassTypeSequenceEvaluate instance.
func (me *TxsdCgPassTypeSequenceEvaluate) Walk() (err error) {
	if fn := WalkHandlers.TxsdCgPassTypeSequenceEvaluate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_color_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_ColorClear_TfxClearcolorType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_stencil_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_StencilClear_TfxClearstencilType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_stencil_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_StencilTarget_TfxStenciltargetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_color_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_ColorTarget_TfxColortargetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_drawsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_Draw_TfxDrawType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_depth_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_DepthTarget_TfxDepthtargetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_depth_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_DepthClear_TfxCleardepthType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_evaluatesequencecg_pass_typeschema_Evaluate_TxsdCgPassTypeSequenceEvaluate_ struct {
	Evaluate *TxsdCgPassTypeSequenceEvaluate `xml:"http://www.collada.org/2008/03/COLLADASchema evaluate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_evaluatesequencecg_pass_typeschema_Evaluate_TxsdCgPassTypeSequenceEvaluate_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_evaluatesequencecg_pass_typeschema_Evaluate_TxsdCgPassTypeSequenceEvaluate_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_evaluatesequencecg_pass_typeschema_Evaluate_TxsdCgPassTypeSequenceEvaluate_ instance.
func (me *XsdGoPkgHasElem_evaluatesequencecg_pass_typeschema_Evaluate_TxsdCgPassTypeSequenceEvaluate_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_evaluatesequencecg_pass_typeschema_Evaluate_TxsdCgPassTypeSequenceEvaluate_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Evaluate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_statessequencecg_pass_typeschema_States_TxsdCgPassTypeSequenceStates_ struct {
	States *TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceStates `xml:"http://www.collada.org/2008/03/COLLADASchema states"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_statessequencecg_pass_typeschema_States_TxsdCgPassTypeSequenceStates_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_statessequencecg_pass_typeschema_States_TxsdCgPassTypeSequenceStates_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_statessequencecg_pass_typeschema_States_TxsdCgPassTypeSequenceStates_ instance.
func (me *XsdGoPkgHasElem_statessequencecg_pass_typeschema_States_TxsdCgPassTypeSequenceStates_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_statessequencecg_pass_typeschema_States_TxsdCgPassTypeSequenceStates_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.States.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Declare and prepare a shader for execution in the rendering pipeline of a pass.
//	Binds values to uniform inputs of a shader.
//	The symbol attribute specifies which symbol defined from within the geometry this material binds to.
type XsdGoPkgHasAttr_Symbol_XsdtNCName_ struct {
	//	The symbol attribute specifies which symbol defined from within the geometry this material binds to.
	Symbol xsdt.NCName `xml:"http://www.collada.org/2008/03/COLLADASchema symbol,attr"`
}

//	A group that specifies the allowable types for CG profile parameters.
type XsdGoPkgHasElem_fixed4x1choicecg_param_groupschema_Fixed4X1_Tfloat4Type_ struct {
	Fixed4X1 Tfloat4Type `xml:"http://www.collada.org/2008/03/COLLADASchema fixed4x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fixed4x1choicecg_param_groupschema_Fixed4X1_Tfloat4Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed4x1choicecg_param_groupschema_Fixed4X1_Tfloat4Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed4x1choicecg_param_groupschema_Fixed4X1_Tfloat4Type_ instance.
func (me *XsdGoPkgHasElem_fixed4x1choicecg_param_groupschema_Fixed4X1_Tfloat4Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fixed4x1choicecg_param_groupschema_Fixed4X1_Tfloat4Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fixed3choicecg_param_groupschema_Fixed3_Tfloat3Type_ struct {
	Fixed3 Tfloat3Type `xml:"http://www.collada.org/2008/03/COLLADASchema fixed3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fixed3choicecg_param_groupschema_Fixed3_Tfloat3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed3choicecg_param_groupschema_Fixed3_Tfloat3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed3choicecg_param_groupschema_Fixed3_Tfloat3Type_ instance.
func (me *XsdGoPkgHasElem_fixed3choicecg_param_groupschema_Fixed3_Tfloat3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fixed3choicecg_param_groupschema_Fixed3_Tfloat3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fixed4x2choicecg_param_groupschema_Fixed4X2_Tfloat4X2Type_ struct {
	Fixed4X2 Tfloat4X2Type `xml:"http://www.collada.org/2008/03/COLLADASchema fixed4x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fixed4x2choicecg_param_groupschema_Fixed4X2_Tfloat4X2Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed4x2choicecg_param_groupschema_Fixed4X2_Tfloat4X2Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed4x2choicecg_param_groupschema_Fixed4X2_Tfloat4X2Type_ instance.
func (me *XsdGoPkgHasElem_fixed4x2choicecg_param_groupschema_Fixed4X2_Tfloat4X2Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fixed4x2choicecg_param_groupschema_Fixed4X2_Tfloat4X2Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fixed4x4choicecg_param_groupschema_Fixed4X4_Tfloat4X4Type_ struct {
	Fixed4X4 Tfloat4X4Type `xml:"http://www.collada.org/2008/03/COLLADASchema fixed4x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fixed4x4choicecg_param_groupschema_Fixed4X4_Tfloat4X4Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed4x4choicecg_param_groupschema_Fixed4X4_Tfloat4X4Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed4x4choicecg_param_groupschema_Fixed4X4_Tfloat4X4Type_ instance.
func (me *XsdGoPkgHasElem_fixed4x4choicecg_param_groupschema_Fixed4X4_Tfloat4X4Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fixed4x4choicecg_param_groupschema_Fixed4X4_Tfloat4X4Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fixed4x3choicecg_param_groupschema_Fixed4X3_Tfloat4X3Type_ struct {
	Fixed4X3 Tfloat4X3Type `xml:"http://www.collada.org/2008/03/COLLADASchema fixed4x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fixed4x3choicecg_param_groupschema_Fixed4X3_Tfloat4X3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed4x3choicecg_param_groupschema_Fixed4X3_Tfloat4X3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed4x3choicecg_param_groupschema_Fixed4X3_Tfloat4X3Type_ instance.
func (me *XsdGoPkgHasElem_fixed4x3choicecg_param_groupschema_Fixed4X3_Tfloat4X3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fixed4x3choicecg_param_groupschema_Fixed4X3_Tfloat4X3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_half4x2choicecg_param_groupschema_Half4X2_Tfloat4X2Type_ struct {
	Half4X2 Tfloat4X2Type `xml:"http://www.collada.org/2008/03/COLLADASchema half4x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_half4x2choicecg_param_groupschema_Half4X2_Tfloat4X2Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half4x2choicecg_param_groupschema_Half4X2_Tfloat4X2Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half4x2choicecg_param_groupschema_Half4X2_Tfloat4X2Type_ instance.
func (me *XsdGoPkgHasElem_half4x2choicecg_param_groupschema_Half4X2_Tfloat4X2Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_half4x2choicecg_param_groupschema_Half4X2_Tfloat4X2Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fixed3x1choicecg_param_groupschema_Fixed3X1_Tfloat3Type_ struct {
	Fixed3X1 Tfloat3Type `xml:"http://www.collada.org/2008/03/COLLADASchema fixed3x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fixed3x1choicecg_param_groupschema_Fixed3X1_Tfloat3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed3x1choicecg_param_groupschema_Fixed3X1_Tfloat3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed3x1choicecg_param_groupschema_Fixed3X1_Tfloat3Type_ instance.
func (me *XsdGoPkgHasElem_fixed3x1choicecg_param_groupschema_Fixed3X1_Tfloat3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fixed3x1choicecg_param_groupschema_Fixed3X1_Tfloat3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fixedchoicecg_param_groupschema_Fixed_TfloatType_ struct {
	Fixed *TfloatType `xml:"http://www.collada.org/2008/03/COLLADASchema fixed"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fixedchoicecg_param_groupschema_Fixed_TfloatType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixedchoicecg_param_groupschema_Fixed_TfloatType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixedchoicecg_param_groupschema_Fixed_TfloatType_ instance.
func (me *XsdGoPkgHasElem_fixedchoicecg_param_groupschema_Fixed_TfloatType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fixedchoicecg_param_groupschema_Fixed_TfloatType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tint4X3Type TlistOfIntsType

//	Since Tint4X3Type is just a simple String type, this merely sets the current value from the specified string.
func (me *Tint4X3Type) Set(s string) { (*TlistOfIntsType)(me).Set(s) }

//	Since Tint4X3Type is just a simple String type, this merely returns the current string value.
func (me Tint4X3Type) String() string { return TlistOfIntsType(me).String() }

//	This convenience method just performs a simple type conversion to Tint4X3Type's alias type TlistOfIntsType.
func (me Tint4X3Type) ToTlistOfIntsType() TlistOfIntsType { return TlistOfIntsType(me) }

type XsdGoPkgHasElem_int4x3choicecg_param_groupschema_Int4X3_Tint4X3Type_ struct {
	Int4X3 Tint4X3Type `xml:"http://www.collada.org/2008/03/COLLADASchema int4x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int4x3choicecg_param_groupschema_Int4X3_Tint4X3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int4x3choicecg_param_groupschema_Int4X3_Tint4X3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int4x3choicecg_param_groupschema_Int4X3_Tint4X3Type_ instance.
func (me *XsdGoPkgHasElem_int4x3choicecg_param_groupschema_Int4X3_Tint4X3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int4x3choicecg_param_groupschema_Int4X3_Tint4X3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_half3x1choicecg_param_groupschema_Half3X1_Tfloat3Type_ struct {
	Half3X1 Tfloat3Type `xml:"http://www.collada.org/2008/03/COLLADASchema half3x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_half3x1choicecg_param_groupschema_Half3X1_Tfloat3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half3x1choicecg_param_groupschema_Half3X1_Tfloat3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half3x1choicecg_param_groupschema_Half3X1_Tfloat3Type_ instance.
func (me *XsdGoPkgHasElem_half3x1choicecg_param_groupschema_Half3X1_Tfloat3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_half3x1choicecg_param_groupschema_Half3X1_Tfloat3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fixed3x3choicecg_param_groupschema_Fixed3X3_Tfloat3X3Type_ struct {
	Fixed3X3 Tfloat3X3Type `xml:"http://www.collada.org/2008/03/COLLADASchema fixed3x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fixed3x3choicecg_param_groupschema_Fixed3X3_Tfloat3X3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed3x3choicecg_param_groupschema_Fixed3X3_Tfloat3X3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed3x3choicecg_param_groupschema_Fixed3X3_Tfloat3X3Type_ instance.
func (me *XsdGoPkgHasElem_fixed3x3choicecg_param_groupschema_Fixed3X3_Tfloat3X3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fixed3x3choicecg_param_groupschema_Fixed3X3_Tfloat3X3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_half2x4choicecg_param_groupschema_Half2X4_Tfloat2X4Type_ struct {
	Half2X4 Tfloat2X4Type `xml:"http://www.collada.org/2008/03/COLLADASchema half2x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_half2x4choicecg_param_groupschema_Half2X4_Tfloat2X4Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half2x4choicecg_param_groupschema_Half2X4_Tfloat2X4Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half2x4choicecg_param_groupschema_Half2X4_Tfloat2X4Type_ instance.
func (me *XsdGoPkgHasElem_half2x4choicecg_param_groupschema_Half2X4_Tfloat2X4Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_half2x4choicecg_param_groupschema_Half2X4_Tfloat2X4Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fixed2x3choicecg_param_groupschema_Fixed2X3_Tfloat2X3Type_ struct {
	Fixed2X3 Tfloat2X3Type `xml:"http://www.collada.org/2008/03/COLLADASchema fixed2x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fixed2x3choicecg_param_groupschema_Fixed2X3_Tfloat2X3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed2x3choicecg_param_groupschema_Fixed2X3_Tfloat2X3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed2x3choicecg_param_groupschema_Fixed2X3_Tfloat2X3Type_ instance.
func (me *XsdGoPkgHasElem_fixed2x3choicecg_param_groupschema_Fixed2X3_Tfloat2X3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fixed2x3choicecg_param_groupschema_Fixed2X3_Tfloat2X3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fixed2choicecg_param_groupschema_Fixed2_Tfloat2Type_ struct {
	Fixed2 Tfloat2Type `xml:"http://www.collada.org/2008/03/COLLADASchema fixed2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fixed2choicecg_param_groupschema_Fixed2_Tfloat2Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed2choicecg_param_groupschema_Fixed2_Tfloat2Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed2choicecg_param_groupschema_Fixed2_Tfloat2Type_ instance.
func (me *XsdGoPkgHasElem_fixed2choicecg_param_groupschema_Fixed2_Tfloat2Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fixed2choicecg_param_groupschema_Fixed2_Tfloat2Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_bool3x1choicecg_param_groupschema_Bool3X1_Tbool3Type_ struct {
	Bool3X1 Tbool3Type `xml:"http://www.collada.org/2008/03/COLLADASchema bool3x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool3x1choicecg_param_groupschema_Bool3X1_Tbool3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool3x1choicecg_param_groupschema_Bool3X1_Tbool3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool3x1choicecg_param_groupschema_Bool3X1_Tbool3Type_ instance.
func (me *XsdGoPkgHasElem_bool3x1choicecg_param_groupschema_Bool3X1_Tbool3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool3x1choicecg_param_groupschema_Bool3X1_Tbool3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_half4x3choicecg_param_groupschema_Half4X3_Tfloat4X3Type_ struct {
	Half4X3 Tfloat4X3Type `xml:"http://www.collada.org/2008/03/COLLADASchema half4x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_half4x3choicecg_param_groupschema_Half4X3_Tfloat4X3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half4x3choicecg_param_groupschema_Half4X3_Tfloat4X3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half4x3choicecg_param_groupschema_Half4X3_Tfloat4X3Type_ instance.
func (me *XsdGoPkgHasElem_half4x3choicecg_param_groupschema_Half4X3_Tfloat4X3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_half4x3choicecg_param_groupschema_Half4X3_Tfloat4X3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tint3X2Type TlistOfIntsType

//	This convenience method just performs a simple type conversion to Tint3X2Type's alias type TlistOfIntsType.
func (me Tint3X2Type) ToTlistOfIntsType() TlistOfIntsType { return TlistOfIntsType(me) }

//	Since Tint3X2Type is just a simple String type, this merely returns the current string value.
func (me Tint3X2Type) String() string { return TlistOfIntsType(me).String() }

//	Since Tint3X2Type is just a simple String type, this merely sets the current value from the specified string.
func (me *Tint3X2Type) Set(s string) { (*TlistOfIntsType)(me).Set(s) }

type XsdGoPkgHasElem_int3x2choicecg_param_groupschema_Int3X2_Tint3X2Type_ struct {
	Int3X2 Tint3X2Type `xml:"http://www.collada.org/2008/03/COLLADASchema int3x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int3x2choicecg_param_groupschema_Int3X2_Tint3X2Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int3x2choicecg_param_groupschema_Int3X2_Tint3X2Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int3x2choicecg_param_groupschema_Int3X2_Tint3X2Type_ instance.
func (me *XsdGoPkgHasElem_int3x2choicecg_param_groupschema_Int3X2_Tint3X2Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int3x2choicecg_param_groupschema_Int3X2_Tint3X2Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Creates a parameter of a one-dimensional array type.
//	The array may be resized when changed because it is connected to a Cg unsized array.
type XsdGoPkgHasAttr_Resizable_XsdtBoolean_False struct {
	//	The array may be resized when changed because it is connected to a Cg unsized array.
	Resizable xsdt.Boolean `xml:"http://www.collada.org/2008/03/COLLADASchema resizable,attr"`
}

//	Returns the default value for Resizable -- false
func (me XsdGoPkgHasAttr_Resizable_XsdtBoolean_False) ResizableDefault() xsdt.Boolean {
	return xsdt.Boolean(false)
}

type TcgArrayType struct {
	//	The length attribute specifies the length of the array.
	XsdGoPkgHasAttr_Length_XsdtPositiveInteger_

	//	The array may be resized when changed because it is connected to a Cg unsized array.
	XsdGoPkgHasAttr_Resizable_XsdtBoolean_False

	//	First element types the array.  If more than one then init entire array and must match length attribute.  If only one then repeat based on length attribute.
	XsdGoPkgHasGroup_CgParamGroup
}

//	If the WalkHandlers.TcgArrayType function is not nil (ie. was set by outside code), calls it with this TcgArrayType instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TcgArrayType instance.
func (me *TcgArrayType) Walk() (err error) {
	if fn := WalkHandlers.TcgArrayType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_arraychoicecg_param_groupschema_Array_TcgArrayType_ struct {
	Array *TcgArrayType `xml:"http://www.collada.org/2008/03/COLLADASchema array"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_arraychoicecg_param_groupschema_Array_TcgArrayType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_arraychoicecg_param_groupschema_Array_TcgArrayType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_arraychoicecg_param_groupschema_Array_TcgArrayType_ instance.
func (me *XsdGoPkgHasElem_arraychoicecg_param_groupschema_Array_TcgArrayType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_arraychoicecg_param_groupschema_Array_TcgArrayType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Array.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_half2x1choicecg_param_groupschema_Half2X1_Tfloat2Type_ struct {
	Half2X1 Tfloat2Type `xml:"http://www.collada.org/2008/03/COLLADASchema half2x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_half2x1choicecg_param_groupschema_Half2X1_Tfloat2Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half2x1choicecg_param_groupschema_Half2X1_Tfloat2Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half2x1choicecg_param_groupschema_Half2X1_Tfloat2Type_ instance.
func (me *XsdGoPkgHasElem_half2x1choicecg_param_groupschema_Half2X1_Tfloat2Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_half2x1choicecg_param_groupschema_Half2X1_Tfloat2Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_half2choicecg_param_groupschema_Half2_Tfloat2Type_ struct {
	Half2 Tfloat2Type `xml:"http://www.collada.org/2008/03/COLLADASchema half2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_half2choicecg_param_groupschema_Half2_Tfloat2Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half2choicecg_param_groupschema_Half2_Tfloat2Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half2choicecg_param_groupschema_Half2_Tfloat2Type_ instance.
func (me *XsdGoPkgHasElem_half2choicecg_param_groupschema_Half2_Tfloat2Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_half2choicecg_param_groupschema_Half2_Tfloat2Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fixed2x1choicecg_param_groupschema_Fixed2X1_Tfloat2Type_ struct {
	Fixed2X1 Tfloat2Type `xml:"http://www.collada.org/2008/03/COLLADASchema fixed2x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fixed2x1choicecg_param_groupschema_Fixed2X1_Tfloat2Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed2x1choicecg_param_groupschema_Fixed2X1_Tfloat2Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed2x1choicecg_param_groupschema_Fixed2X1_Tfloat2Type_ instance.
func (me *XsdGoPkgHasElem_fixed2x1choicecg_param_groupschema_Fixed2X1_Tfloat2Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fixed2x1choicecg_param_groupschema_Fixed2X1_Tfloat2Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tbool4X3Type TlistOfBoolsType

//	Since Tbool4X3Type is just a simple String type, this merely sets the current value from the specified string.
func (me *Tbool4X3Type) Set(s string) { (*TlistOfBoolsType)(me).Set(s) }

//	This convenience method just performs a simple type conversion to Tbool4X3Type's alias type TlistOfBoolsType.
func (me Tbool4X3Type) ToTlistOfBoolsType() TlistOfBoolsType { return TlistOfBoolsType(me) }

//	Since Tbool4X3Type is just a simple String type, this merely returns the current string value.
func (me Tbool4X3Type) String() string { return TlistOfBoolsType(me).String() }

type XsdGoPkgHasElem_bool4x3choicecg_param_groupschema_Bool4X3_Tbool4X3Type_ struct {
	Bool4X3 Tbool4X3Type `xml:"http://www.collada.org/2008/03/COLLADASchema bool4x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool4x3choicecg_param_groupschema_Bool4X3_Tbool4X3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool4x3choicecg_param_groupschema_Bool4X3_Tbool4X3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool4x3choicecg_param_groupschema_Bool4X3_Tbool4X3Type_ instance.
func (me *XsdGoPkgHasElem_bool4x3choicecg_param_groupschema_Bool4X3_Tbool4X3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool4x3choicecg_param_groupschema_Bool4X3_Tbool4X3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_half3x2choicecg_param_groupschema_Half3X2_Tfloat3X2Type_ struct {
	Half3X2 Tfloat3X2Type `xml:"http://www.collada.org/2008/03/COLLADASchema half3x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_half3x2choicecg_param_groupschema_Half3X2_Tfloat3X2Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half3x2choicecg_param_groupschema_Half3X2_Tfloat3X2Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half3x2choicecg_param_groupschema_Half3X2_Tfloat3X2Type_ instance.
func (me *XsdGoPkgHasElem_half3x2choicecg_param_groupschema_Half3X2_Tfloat3X2Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_half3x2choicecg_param_groupschema_Half3X2_Tfloat3X2Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tbool2X3Type TlistOfBoolsType

//	Since Tbool2X3Type is just a simple String type, this merely sets the current value from the specified string.
func (me *Tbool2X3Type) Set(s string) { (*TlistOfBoolsType)(me).Set(s) }

//	This convenience method just performs a simple type conversion to Tbool2X3Type's alias type TlistOfBoolsType.
func (me Tbool2X3Type) ToTlistOfBoolsType() TlistOfBoolsType { return TlistOfBoolsType(me) }

//	Since Tbool2X3Type is just a simple String type, this merely returns the current string value.
func (me Tbool2X3Type) String() string { return TlistOfBoolsType(me).String() }

type XsdGoPkgHasElem_bool2x3choicecg_param_groupschema_Bool2X3_Tbool2X3Type_ struct {
	Bool2X3 Tbool2X3Type `xml:"http://www.collada.org/2008/03/COLLADASchema bool2x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool2x3choicecg_param_groupschema_Bool2X3_Tbool2X3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool2x3choicecg_param_groupschema_Bool2X3_Tbool2X3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool2x3choicecg_param_groupschema_Bool2X3_Tbool2X3Type_ instance.
func (me *XsdGoPkgHasElem_bool2x3choicecg_param_groupschema_Bool2X3_Tbool2X3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool2x3choicecg_param_groupschema_Bool2X3_Tbool2X3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tbool3X2Type TlistOfBoolsType

//	This convenience method just performs a simple type conversion to Tbool3X2Type's alias type TlistOfBoolsType.
func (me Tbool3X2Type) ToTlistOfBoolsType() TlistOfBoolsType { return TlistOfBoolsType(me) }

//	Since Tbool3X2Type is just a simple String type, this merely sets the current value from the specified string.
func (me *Tbool3X2Type) Set(s string) { (*TlistOfBoolsType)(me).Set(s) }

//	Since Tbool3X2Type is just a simple String type, this merely returns the current string value.
func (me Tbool3X2Type) String() string { return TlistOfBoolsType(me).String() }

type XsdGoPkgHasElem_bool3x2choicecg_param_groupschema_Bool3X2_Tbool3X2Type_ struct {
	Bool3X2 Tbool3X2Type `xml:"http://www.collada.org/2008/03/COLLADASchema bool3x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool3x2choicecg_param_groupschema_Bool3X2_Tbool3X2Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool3x2choicecg_param_groupschema_Bool3X2_Tbool3X2Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool3x2choicecg_param_groupschema_Bool3X2_Tbool3X2Type_ instance.
func (me *XsdGoPkgHasElem_bool3x2choicecg_param_groupschema_Bool3X2_Tbool3X2Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool3x2choicecg_param_groupschema_Bool3X2_Tbool3X2Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tbool3X3Type TlistOfBoolsType

//	Since Tbool3X3Type is just a simple String type, this merely sets the current value from the specified string.
func (me *Tbool3X3Type) Set(s string) { (*TlistOfBoolsType)(me).Set(s) }

//	Since Tbool3X3Type is just a simple String type, this merely returns the current string value.
func (me Tbool3X3Type) String() string { return TlistOfBoolsType(me).String() }

//	This convenience method just performs a simple type conversion to Tbool3X3Type's alias type TlistOfBoolsType.
func (me Tbool3X3Type) ToTlistOfBoolsType() TlistOfBoolsType { return TlistOfBoolsType(me) }

type XsdGoPkgHasElem_bool3x3choicecg_param_groupschema_Bool3X3_Tbool3X3Type_ struct {
	Bool3X3 Tbool3X3Type `xml:"http://www.collada.org/2008/03/COLLADASchema bool3x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool3x3choicecg_param_groupschema_Bool3X3_Tbool3X3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool3x3choicecg_param_groupschema_Bool3X3_Tbool3X3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool3x3choicecg_param_groupschema_Bool3X3_Tbool3X3Type_ instance.
func (me *XsdGoPkgHasElem_bool3x3choicecg_param_groupschema_Bool3X3_Tbool3X3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool3x3choicecg_param_groupschema_Bool3X3_Tbool3X3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_half4choicecg_param_groupschema_Half4_Tfloat4Type_ struct {
	Half4 Tfloat4Type `xml:"http://www.collada.org/2008/03/COLLADASchema half4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_half4choicecg_param_groupschema_Half4_Tfloat4Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half4choicecg_param_groupschema_Half4_Tfloat4Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half4choicecg_param_groupschema_Half4_Tfloat4Type_ instance.
func (me *XsdGoPkgHasElem_half4choicecg_param_groupschema_Half4_Tfloat4Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_half4choicecg_param_groupschema_Half4_Tfloat4Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_int3x1choicecg_param_groupschema_Int3X1_Tint3Type_ struct {
	Int3X1 Tint3Type `xml:"http://www.collada.org/2008/03/COLLADASchema int3x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int3x1choicecg_param_groupschema_Int3X1_Tint3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int3x1choicecg_param_groupschema_Int3X1_Tint3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int3x1choicecg_param_groupschema_Int3X1_Tint3Type_ instance.
func (me *XsdGoPkgHasElem_int3x1choicecg_param_groupschema_Int3X1_Tint3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int3x1choicecg_param_groupschema_Int3X1_Tint3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fixed2x4choicecg_param_groupschema_Fixed2X4_Tfloat2X4Type_ struct {
	Fixed2X4 Tfloat2X4Type `xml:"http://www.collada.org/2008/03/COLLADASchema fixed2x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fixed2x4choicecg_param_groupschema_Fixed2X4_Tfloat2X4Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed2x4choicecg_param_groupschema_Fixed2X4_Tfloat2X4Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed2x4choicecg_param_groupschema_Fixed2X4_Tfloat2X4Type_ instance.
func (me *XsdGoPkgHasElem_fixed2x4choicecg_param_groupschema_Fixed2X4_Tfloat2X4Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fixed2x4choicecg_param_groupschema_Fixed2X4_Tfloat2X4Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tint4X4Type TlistOfIntsType

//	Since Tint4X4Type is just a simple String type, this merely sets the current value from the specified string.
func (me *Tint4X4Type) Set(s string) { (*TlistOfIntsType)(me).Set(s) }

//	This convenience method just performs a simple type conversion to Tint4X4Type's alias type TlistOfIntsType.
func (me Tint4X4Type) ToTlistOfIntsType() TlistOfIntsType { return TlistOfIntsType(me) }

//	Since Tint4X4Type is just a simple String type, this merely returns the current string value.
func (me Tint4X4Type) String() string { return TlistOfIntsType(me).String() }

type XsdGoPkgHasElem_int4x4choicecg_param_groupschema_Int4X4_Tint4X4Type_ struct {
	Int4X4 Tint4X4Type `xml:"http://www.collada.org/2008/03/COLLADASchema int4x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int4x4choicecg_param_groupschema_Int4X4_Tint4X4Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int4x4choicecg_param_groupschema_Int4X4_Tint4X4Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int4x4choicecg_param_groupschema_Int4X4_Tint4X4Type_ instance.
func (me *XsdGoPkgHasElem_int4x4choicecg_param_groupschema_Int4X4_Tint4X4Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int4x4choicecg_param_groupschema_Int4X4_Tint4X4Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fixed3x4choicecg_param_groupschema_Fixed3X4_Tfloat3X4Type_ struct {
	Fixed3X4 Tfloat3X4Type `xml:"http://www.collada.org/2008/03/COLLADASchema fixed3x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fixed3x4choicecg_param_groupschema_Fixed3X4_Tfloat3X4Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed3x4choicecg_param_groupschema_Fixed3X4_Tfloat3X4Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed3x4choicecg_param_groupschema_Fixed3X4_Tfloat3X4Type_ instance.
func (me *XsdGoPkgHasElem_fixed3x4choicecg_param_groupschema_Fixed3X4_Tfloat3X4Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fixed3x4choicecg_param_groupschema_Fixed3X4_Tfloat3X4Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_half2x2choicecg_param_groupschema_Half2X2_Tfloat2X2Type_ struct {
	Half2X2 Tfloat2X2Type `xml:"http://www.collada.org/2008/03/COLLADASchema half2x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_half2x2choicecg_param_groupschema_Half2X2_Tfloat2X2Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half2x2choicecg_param_groupschema_Half2X2_Tfloat2X2Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half2x2choicecg_param_groupschema_Half2X2_Tfloat2X2Type_ instance.
func (me *XsdGoPkgHasElem_half2x2choicecg_param_groupschema_Half2X2_Tfloat2X2Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_half2x2choicecg_param_groupschema_Half2X2_Tfloat2X2Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_half2x3choicecg_param_groupschema_Half2X3_Tfloat2X3Type_ struct {
	Half2X3 Tfloat2X3Type `xml:"http://www.collada.org/2008/03/COLLADASchema half2x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_half2x3choicecg_param_groupschema_Half2X3_Tfloat2X3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half2x3choicecg_param_groupschema_Half2X3_Tfloat2X3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half2x3choicecg_param_groupschema_Half2X3_Tfloat2X3Type_ instance.
func (me *XsdGoPkgHasElem_half2x3choicecg_param_groupschema_Half2X3_Tfloat2X3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_half2x3choicecg_param_groupschema_Half2X3_Tfloat2X3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tint3X4Type TlistOfIntsType

//	Since Tint3X4Type is just a simple String type, this merely returns the current string value.
func (me Tint3X4Type) String() string { return TlistOfIntsType(me).String() }

//	Since Tint3X4Type is just a simple String type, this merely sets the current value from the specified string.
func (me *Tint3X4Type) Set(s string) { (*TlistOfIntsType)(me).Set(s) }

//	This convenience method just performs a simple type conversion to Tint3X4Type's alias type TlistOfIntsType.
func (me Tint3X4Type) ToTlistOfIntsType() TlistOfIntsType { return TlistOfIntsType(me) }

type XsdGoPkgHasElem_int3x4choicecg_param_groupschema_Int3X4_Tint3X4Type_ struct {
	Int3X4 Tint3X4Type `xml:"http://www.collada.org/2008/03/COLLADASchema int3x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int3x4choicecg_param_groupschema_Int3X4_Tint3X4Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int3x4choicecg_param_groupschema_Int3X4_Tint3X4Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int3x4choicecg_param_groupschema_Int3X4_Tint3X4Type_ instance.
func (me *XsdGoPkgHasElem_int3x4choicecg_param_groupschema_Int3X4_Tint3X4Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int3x4choicecg_param_groupschema_Int3X4_Tint3X4Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_half3x3choicecg_param_groupschema_Half3X3_Tfloat3X3Type_ struct {
	Half3X3 Tfloat3X3Type `xml:"http://www.collada.org/2008/03/COLLADASchema half3x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_half3x3choicecg_param_groupschema_Half3X3_Tfloat3X3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half3x3choicecg_param_groupschema_Half3X3_Tfloat3X3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half3x3choicecg_param_groupschema_Half3X3_Tfloat3X3Type_ instance.
func (me *XsdGoPkgHasElem_half3x3choicecg_param_groupschema_Half3X3_Tfloat3X3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_half3x3choicecg_param_groupschema_Half3X3_Tfloat3X3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fixed3x2choicecg_param_groupschema_Fixed3X2_Tfloat3X2Type_ struct {
	Fixed3X2 Tfloat3X2Type `xml:"http://www.collada.org/2008/03/COLLADASchema fixed3x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fixed3x2choicecg_param_groupschema_Fixed3X2_Tfloat3X2Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed3x2choicecg_param_groupschema_Fixed3X2_Tfloat3X2Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed3x2choicecg_param_groupschema_Fixed3X2_Tfloat3X2Type_ instance.
func (me *XsdGoPkgHasElem_fixed3x2choicecg_param_groupschema_Fixed3X2_Tfloat3X2Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fixed3x2choicecg_param_groupschema_Fixed3X2_Tfloat3X2Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_half4x1choicecg_param_groupschema_Half4X1_Tfloat4Type_ struct {
	Half4X1 Tfloat4Type `xml:"http://www.collada.org/2008/03/COLLADASchema half4x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_half4x1choicecg_param_groupschema_Half4X1_Tfloat4Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half4x1choicecg_param_groupschema_Half4X1_Tfloat4Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half4x1choicecg_param_groupschema_Half4X1_Tfloat4Type_ instance.
func (me *XsdGoPkgHasElem_half4x1choicecg_param_groupschema_Half4X1_Tfloat4Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_half4x1choicecg_param_groupschema_Half4X1_Tfloat4Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_half3x4choicecg_param_groupschema_Half3X4_Tfloat3X4Type_ struct {
	Half3X4 Tfloat3X4Type `xml:"http://www.collada.org/2008/03/COLLADASchema half3x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_half3x4choicecg_param_groupschema_Half3X4_Tfloat3X4Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half3x4choicecg_param_groupschema_Half3X4_Tfloat3X4Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half3x4choicecg_param_groupschema_Half3X4_Tfloat3X4Type_ instance.
func (me *XsdGoPkgHasElem_half3x4choicecg_param_groupschema_Half3X4_Tfloat3X4Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_half3x4choicecg_param_groupschema_Half3X4_Tfloat3X4Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tbool3X4Type TlistOfBoolsType

//	Since Tbool3X4Type is just a simple String type, this merely returns the current string value.
func (me Tbool3X4Type) String() string { return TlistOfBoolsType(me).String() }

//	This convenience method just performs a simple type conversion to Tbool3X4Type's alias type TlistOfBoolsType.
func (me Tbool3X4Type) ToTlistOfBoolsType() TlistOfBoolsType { return TlistOfBoolsType(me) }

//	Since Tbool3X4Type is just a simple String type, this merely sets the current value from the specified string.
func (me *Tbool3X4Type) Set(s string) { (*TlistOfBoolsType)(me).Set(s) }

type XsdGoPkgHasElem_bool3x4choicecg_param_groupschema_Bool3X4_Tbool3X4Type_ struct {
	Bool3X4 Tbool3X4Type `xml:"http://www.collada.org/2008/03/COLLADASchema bool3x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool3x4choicecg_param_groupschema_Bool3X4_Tbool3X4Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool3x4choicecg_param_groupschema_Bool3X4_Tbool3X4Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool3x4choicecg_param_groupschema_Bool3X4_Tbool3X4Type_ instance.
func (me *XsdGoPkgHasElem_bool3x4choicecg_param_groupschema_Bool3X4_Tbool3X4Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool3x4choicecg_param_groupschema_Bool3X4_Tbool3X4Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tint2X2Type TlistOfIntsType

//	Since Tint2X2Type is just a simple String type, this merely returns the current string value.
func (me Tint2X2Type) String() string { return TlistOfIntsType(me).String() }

//	Since Tint2X2Type is just a simple String type, this merely sets the current value from the specified string.
func (me *Tint2X2Type) Set(s string) { (*TlistOfIntsType)(me).Set(s) }

//	This convenience method just performs a simple type conversion to Tint2X2Type's alias type TlistOfIntsType.
func (me Tint2X2Type) ToTlistOfIntsType() TlistOfIntsType { return TlistOfIntsType(me) }

type XsdGoPkgHasElem_int2x2choicecg_param_groupschema_Int2X2_Tint2X2Type_ struct {
	Int2X2 Tint2X2Type `xml:"http://www.collada.org/2008/03/COLLADASchema int2x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int2x2choicecg_param_groupschema_Int2X2_Tint2X2Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int2x2choicecg_param_groupschema_Int2X2_Tint2X2Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int2x2choicecg_param_groupschema_Int2X2_Tint2X2Type_ instance.
func (me *XsdGoPkgHasElem_int2x2choicecg_param_groupschema_Int2X2_Tint2X2Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int2x2choicecg_param_groupschema_Int2X2_Tint2X2Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_bool4x1choicecg_param_groupschema_Bool4X1_Tbool4Type_ struct {
	Bool4X1 Tbool4Type `xml:"http://www.collada.org/2008/03/COLLADASchema bool4x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool4x1choicecg_param_groupschema_Bool4X1_Tbool4Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool4x1choicecg_param_groupschema_Bool4X1_Tbool4Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool4x1choicecg_param_groupschema_Bool4X1_Tbool4Type_ instance.
func (me *XsdGoPkgHasElem_bool4x1choicecg_param_groupschema_Bool4X1_Tbool4Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool4x1choicecg_param_groupschema_Bool4X1_Tbool4Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fixed2x2choicecg_param_groupschema_Fixed2X2_Tfloat2X2Type_ struct {
	Fixed2X2 Tfloat2X2Type `xml:"http://www.collada.org/2008/03/COLLADASchema fixed2x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fixed2x2choicecg_param_groupschema_Fixed2X2_Tfloat2X2Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed2x2choicecg_param_groupschema_Fixed2X2_Tfloat2X2Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed2x2choicecg_param_groupschema_Fixed2X2_Tfloat2X2Type_ instance.
func (me *XsdGoPkgHasElem_fixed2x2choicecg_param_groupschema_Fixed2X2_Tfloat2X2Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fixed2x2choicecg_param_groupschema_Fixed2X2_Tfloat2X2Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tint4X2Type TlistOfIntsType

//	Since Tint4X2Type is just a simple String type, this merely returns the current string value.
func (me Tint4X2Type) String() string { return TlistOfIntsType(me).String() }

//	Since Tint4X2Type is just a simple String type, this merely sets the current value from the specified string.
func (me *Tint4X2Type) Set(s string) { (*TlistOfIntsType)(me).Set(s) }

//	This convenience method just performs a simple type conversion to Tint4X2Type's alias type TlistOfIntsType.
func (me Tint4X2Type) ToTlistOfIntsType() TlistOfIntsType { return TlistOfIntsType(me) }

type XsdGoPkgHasElem_int4x2choicecg_param_groupschema_Int4X2_Tint4X2Type_ struct {
	Int4X2 Tint4X2Type `xml:"http://www.collada.org/2008/03/COLLADASchema int4x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int4x2choicecg_param_groupschema_Int4X2_Tint4X2Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int4x2choicecg_param_groupschema_Int4X2_Tint4X2Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int4x2choicecg_param_groupschema_Int4X2_Tint4X2Type_ instance.
func (me *XsdGoPkgHasElem_int4x2choicecg_param_groupschema_Int4X2_Tint4X2Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int4x2choicecg_param_groupschema_Int4X2_Tint4X2Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_bool2x1choicecg_param_groupschema_Bool2X1_Tbool2Type_ struct {
	Bool2X1 Tbool2Type `xml:"http://www.collada.org/2008/03/COLLADASchema bool2x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool2x1choicecg_param_groupschema_Bool2X1_Tbool2Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool2x1choicecg_param_groupschema_Bool2X1_Tbool2Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool2x1choicecg_param_groupschema_Bool2X1_Tbool2Type_ instance.
func (me *XsdGoPkgHasElem_bool2x1choicecg_param_groupschema_Bool2X1_Tbool2Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool2x1choicecg_param_groupschema_Bool2X1_Tbool2Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tbool2X4Type TlistOfBoolsType

//	Since Tbool2X4Type is just a simple String type, this merely sets the current value from the specified string.
func (me *Tbool2X4Type) Set(s string) { (*TlistOfBoolsType)(me).Set(s) }

//	Since Tbool2X4Type is just a simple String type, this merely returns the current string value.
func (me Tbool2X4Type) String() string { return TlistOfBoolsType(me).String() }

//	This convenience method just performs a simple type conversion to Tbool2X4Type's alias type TlistOfBoolsType.
func (me Tbool2X4Type) ToTlistOfBoolsType() TlistOfBoolsType { return TlistOfBoolsType(me) }

type XsdGoPkgHasElem_bool2x4choicecg_param_groupschema_Bool2X4_Tbool2X4Type_ struct {
	Bool2X4 Tbool2X4Type `xml:"http://www.collada.org/2008/03/COLLADASchema bool2x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool2x4choicecg_param_groupschema_Bool2X4_Tbool2X4Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool2x4choicecg_param_groupschema_Bool2X4_Tbool2X4Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool2x4choicecg_param_groupschema_Bool2X4_Tbool2X4Type_ instance.
func (me *XsdGoPkgHasElem_bool2x4choicecg_param_groupschema_Bool2X4_Tbool2X4Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool2x4choicecg_param_groupschema_Bool2X4_Tbool2X4Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tint3X3Type TlistOfIntsType

//	Since Tint3X3Type is just a simple String type, this merely sets the current value from the specified string.
func (me *Tint3X3Type) Set(s string) { (*TlistOfIntsType)(me).Set(s) }

//	Since Tint3X3Type is just a simple String type, this merely returns the current string value.
func (me Tint3X3Type) String() string { return TlistOfIntsType(me).String() }

//	This convenience method just performs a simple type conversion to Tint3X3Type's alias type TlistOfIntsType.
func (me Tint3X3Type) ToTlistOfIntsType() TlistOfIntsType { return TlistOfIntsType(me) }

type XsdGoPkgHasElem_int3x3choicecg_param_groupschema_Int3X3_Tint3X3Type_ struct {
	Int3X3 Tint3X3Type `xml:"http://www.collada.org/2008/03/COLLADASchema int3x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int3x3choicecg_param_groupschema_Int3X3_Tint3X3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int3x3choicecg_param_groupschema_Int3X3_Tint3X3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int3x3choicecg_param_groupschema_Int3X3_Tint3X3Type_ instance.
func (me *XsdGoPkgHasElem_int3x3choicecg_param_groupschema_Int3X3_Tint3X3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int3x3choicecg_param_groupschema_Int3X3_Tint3X3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Creates an instance of a structured class.
type XsdGoPkgHasAttr_Typename_XsdtToken_ struct {
	Typename xsdt.Token `xml:"http://www.collada.org/2008/03/COLLADASchema typename,attr"`
}

//	Use a series of these to set the members by name.  The ref attribute will be relative to the usertype you are in right now.
//	Assigns a new value to a previously defined parameter.
type TcgSetparamType struct {
	XsdGoPkgHasGroup_CgParamGroup

	XsdGoPkgHasAttr_Ref_XsdtToken_
}

//	If the WalkHandlers.TcgSetparamType function is not nil (ie. was set by outside code), calls it with this TcgSetparamType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TcgSetparamType instance.
func (me *TcgSetparamType) Walk() (err error) {
	if fn := WalkHandlers.TcgSetparamType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_setparamsequencecg_user_typeschema_Setparam_TcgSetparamType_ struct {
	//	Use a series of these to set the members by name.  The ref attribute will be relative to the usertype you are in right now.
	Setparams []*TcgSetparamType `xml:"http://www.collada.org/2008/03/COLLADASchema setparam"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_setparamsequencecg_user_typeschema_Setparam_TcgSetparamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_setparamsequencecg_user_typeschema_Setparam_TcgSetparamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_setparamsequencecg_user_typeschema_Setparam_TcgSetparamType_ instance.
func (me *XsdGoPkgHasElems_setparamsequencecg_user_typeschema_Setparam_TcgSetparamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_setparamsequencecg_user_typeschema_Setparam_TcgSetparamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Setparams {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Reference a code or include element which defines the usertype
type XsdGoPkgHasAttr_Source_XsdtNCName_ struct {
	//	Reference a code or include element which defines the usertype
	Source xsdt.NCName `xml:"http://www.collada.org/2008/03/COLLADASchema source,attr"`
}

type TcgUserType struct {
	XsdGoPkgHasAttr_Typename_XsdtToken_

	//	Some usertypes do not have data.  They may be used only to implement interface functions.
	//	Use a series of these to set the members by name.  The ref attribute will be relative to the usertype you are in right now.
	XsdGoPkgHasElems_setparamsequencecg_user_typeschema_Setparam_TcgSetparamType_

	//	Reference a code or include element which defines the usertype
	XsdGoPkgHasAttr_Source_XsdtNCName_
}

//	If the WalkHandlers.TcgUserType function is not nil (ie. was set by outside code), calls it with this TcgUserType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TcgUserType instance.
func (me *TcgUserType) Walk() (err error) {
	if fn := WalkHandlers.TcgUserType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_setparamsequencecg_user_typeschema_Setparam_TcgSetparamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_usertypechoicecg_param_groupschema_Usertype_TcgUserType_ struct {
	Usertype *TcgUserType `xml:"http://www.collada.org/2008/03/COLLADASchema usertype"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_usertypechoicecg_param_groupschema_Usertype_TcgUserType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_usertypechoicecg_param_groupschema_Usertype_TcgUserType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_usertypechoicecg_param_groupschema_Usertype_TcgUserType_ instance.
func (me *XsdGoPkgHasElem_usertypechoicecg_param_groupschema_Usertype_TcgUserType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_usertypechoicecg_param_groupschema_Usertype_TcgUserType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Usertype.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tint2X3Type TlistOfIntsType

//	Since Tint2X3Type is just a simple String type, this merely returns the current string value.
func (me Tint2X3Type) String() string { return TlistOfIntsType(me).String() }

//	This convenience method just performs a simple type conversion to Tint2X3Type's alias type TlistOfIntsType.
func (me Tint2X3Type) ToTlistOfIntsType() TlistOfIntsType { return TlistOfIntsType(me) }

//	Since Tint2X3Type is just a simple String type, this merely sets the current value from the specified string.
func (me *Tint2X3Type) Set(s string) { (*TlistOfIntsType)(me).Set(s) }

type XsdGoPkgHasElem_int2x3choicecg_param_groupschema_Int2X3_Tint2X3Type_ struct {
	Int2X3 Tint2X3Type `xml:"http://www.collada.org/2008/03/COLLADASchema int2x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int2x3choicecg_param_groupschema_Int2X3_Tint2X3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int2x3choicecg_param_groupschema_Int2X3_Tint2X3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int2x3choicecg_param_groupschema_Int2X3_Tint2X3Type_ instance.
func (me *XsdGoPkgHasElem_int2x3choicecg_param_groupschema_Int2X3_Tint2X3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int2x3choicecg_param_groupschema_Int2X3_Tint2X3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_int2x1choicecg_param_groupschema_Int2X1_Tint2Type_ struct {
	Int2X1 Tint2Type `xml:"http://www.collada.org/2008/03/COLLADASchema int2x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int2x1choicecg_param_groupschema_Int2X1_Tint2Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int2x1choicecg_param_groupschema_Int2X1_Tint2Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int2x1choicecg_param_groupschema_Int2X1_Tint2Type_ instance.
func (me *XsdGoPkgHasElem_int2x1choicecg_param_groupschema_Int2X1_Tint2Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int2x1choicecg_param_groupschema_Int2X1_Tint2Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_halfchoicecg_param_groupschema_Half_TfloatType_ struct {
	Half *TfloatType `xml:"http://www.collada.org/2008/03/COLLADASchema half"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_halfchoicecg_param_groupschema_Half_TfloatType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_halfchoicecg_param_groupschema_Half_TfloatType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_halfchoicecg_param_groupschema_Half_TfloatType_ instance.
func (me *XsdGoPkgHasElem_halfchoicecg_param_groupschema_Half_TfloatType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_halfchoicecg_param_groupschema_Half_TfloatType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tbool2X2Type TlistOfBoolsType

//	This convenience method just performs a simple type conversion to Tbool2X2Type's alias type TlistOfBoolsType.
func (me Tbool2X2Type) ToTlistOfBoolsType() TlistOfBoolsType { return TlistOfBoolsType(me) }

//	Since Tbool2X2Type is just a simple String type, this merely sets the current value from the specified string.
func (me *Tbool2X2Type) Set(s string) { (*TlistOfBoolsType)(me).Set(s) }

//	Since Tbool2X2Type is just a simple String type, this merely returns the current string value.
func (me Tbool2X2Type) String() string { return TlistOfBoolsType(me).String() }

type XsdGoPkgHasElem_bool2x2choicecg_param_groupschema_Bool2X2_Tbool2X2Type_ struct {
	Bool2X2 Tbool2X2Type `xml:"http://www.collada.org/2008/03/COLLADASchema bool2x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool2x2choicecg_param_groupschema_Bool2X2_Tbool2X2Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool2x2choicecg_param_groupschema_Bool2X2_Tbool2X2Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool2x2choicecg_param_groupschema_Bool2X2_Tbool2X2Type_ instance.
func (me *XsdGoPkgHasElem_bool2x2choicecg_param_groupschema_Bool2X2_Tbool2X2Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool2x2choicecg_param_groupschema_Bool2X2_Tbool2X2Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tint2X4Type TlistOfIntsType

//	Since Tint2X4Type is just a simple String type, this merely sets the current value from the specified string.
func (me *Tint2X4Type) Set(s string) { (*TlistOfIntsType)(me).Set(s) }

//	This convenience method just performs a simple type conversion to Tint2X4Type's alias type TlistOfIntsType.
func (me Tint2X4Type) ToTlistOfIntsType() TlistOfIntsType { return TlistOfIntsType(me) }

//	Since Tint2X4Type is just a simple String type, this merely returns the current string value.
func (me Tint2X4Type) String() string { return TlistOfIntsType(me).String() }

type XsdGoPkgHasElem_int2x4choicecg_param_groupschema_Int2X4_Tint2X4Type_ struct {
	Int2X4 Tint2X4Type `xml:"http://www.collada.org/2008/03/COLLADASchema int2x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int2x4choicecg_param_groupschema_Int2X4_Tint2X4Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int2x4choicecg_param_groupschema_Int2X4_Tint2X4Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int2x4choicecg_param_groupschema_Int2X4_Tint2X4Type_ instance.
func (me *XsdGoPkgHasElem_int2x4choicecg_param_groupschema_Int2X4_Tint2X4Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int2x4choicecg_param_groupschema_Int2X4_Tint2X4Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tbool4X2Type TlistOfBoolsType

//	Since Tbool4X2Type is just a simple String type, this merely sets the current value from the specified string.
func (me *Tbool4X2Type) Set(s string) { (*TlistOfBoolsType)(me).Set(s) }

//	This convenience method just performs a simple type conversion to Tbool4X2Type's alias type TlistOfBoolsType.
func (me Tbool4X2Type) ToTlistOfBoolsType() TlistOfBoolsType { return TlistOfBoolsType(me) }

//	Since Tbool4X2Type is just a simple String type, this merely returns the current string value.
func (me Tbool4X2Type) String() string { return TlistOfBoolsType(me).String() }

type XsdGoPkgHasElem_bool4x2choicecg_param_groupschema_Bool4X2_Tbool4X2Type_ struct {
	Bool4X2 Tbool4X2Type `xml:"http://www.collada.org/2008/03/COLLADASchema bool4x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool4x2choicecg_param_groupschema_Bool4X2_Tbool4X2Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool4x2choicecg_param_groupschema_Bool4X2_Tbool4X2Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool4x2choicecg_param_groupschema_Bool4X2_Tbool4X2Type_ instance.
func (me *XsdGoPkgHasElem_bool4x2choicecg_param_groupschema_Bool4X2_Tbool4X2Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool4x2choicecg_param_groupschema_Bool4X2_Tbool4X2Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tbool4X4Type TlistOfBoolsType

//	Since Tbool4X4Type is just a simple String type, this merely returns the current string value.
func (me Tbool4X4Type) String() string { return TlistOfBoolsType(me).String() }

//	This convenience method just performs a simple type conversion to Tbool4X4Type's alias type TlistOfBoolsType.
func (me Tbool4X4Type) ToTlistOfBoolsType() TlistOfBoolsType { return TlistOfBoolsType(me) }

//	Since Tbool4X4Type is just a simple String type, this merely sets the current value from the specified string.
func (me *Tbool4X4Type) Set(s string) { (*TlistOfBoolsType)(me).Set(s) }

type XsdGoPkgHasElem_bool4x4choicecg_param_groupschema_Bool4X4_Tbool4X4Type_ struct {
	Bool4X4 Tbool4X4Type `xml:"http://www.collada.org/2008/03/COLLADASchema bool4x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool4x4choicecg_param_groupschema_Bool4X4_Tbool4X4Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool4x4choicecg_param_groupschema_Bool4X4_Tbool4X4Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool4x4choicecg_param_groupschema_Bool4X4_Tbool4X4Type_ instance.
func (me *XsdGoPkgHasElem_bool4x4choicecg_param_groupschema_Bool4X4_Tbool4X4Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool4x4choicecg_param_groupschema_Bool4X4_Tbool4X4Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_int4x1choicecg_param_groupschema_Int4X1_Tint4Type_ struct {
	Int4X1 Tint4Type `xml:"http://www.collada.org/2008/03/COLLADASchema int4x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int4x1choicecg_param_groupschema_Int4X1_Tint4Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int4x1choicecg_param_groupschema_Int4X1_Tint4Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int4x1choicecg_param_groupschema_Int4X1_Tint4Type_ instance.
func (me *XsdGoPkgHasElem_int4x1choicecg_param_groupschema_Int4X1_Tint4Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int4x1choicecg_param_groupschema_Int4X1_Tint4Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_half3choicecg_param_groupschema_Half3_Tfloat3Type_ struct {
	Half3 Tfloat3Type `xml:"http://www.collada.org/2008/03/COLLADASchema half3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_half3choicecg_param_groupschema_Half3_Tfloat3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half3choicecg_param_groupschema_Half3_Tfloat3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half3choicecg_param_groupschema_Half3_Tfloat3Type_ instance.
func (me *XsdGoPkgHasElem_half3choicecg_param_groupschema_Half3_Tfloat3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_half3choicecg_param_groupschema_Half3_Tfloat3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fixed4choicecg_param_groupschema_Fixed4_Tfloat4Type_ struct {
	Fixed4 Tfloat4Type `xml:"http://www.collada.org/2008/03/COLLADASchema fixed4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fixed4choicecg_param_groupschema_Fixed4_Tfloat4Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed4choicecg_param_groupschema_Fixed4_Tfloat4Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed4choicecg_param_groupschema_Fixed4_Tfloat4Type_ instance.
func (me *XsdGoPkgHasElem_fixed4choicecg_param_groupschema_Fixed4_Tfloat4Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fixed4choicecg_param_groupschema_Fixed4_Tfloat4Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_half4x4choicecg_param_groupschema_Half4X4_Tfloat4X4Type_ struct {
	Half4X4 Tfloat4X4Type `xml:"http://www.collada.org/2008/03/COLLADASchema half4x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_half4x4choicecg_param_groupschema_Half4X4_Tfloat4X4Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half4x4choicecg_param_groupschema_Half4X4_Tfloat4X4Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half4x4choicecg_param_groupschema_Half4X4_Tfloat4X4Type_ instance.
func (me *XsdGoPkgHasElem_half4x4choicecg_param_groupschema_Half4X4_Tfloat4X4Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_half4x4choicecg_param_groupschema_Half4X4_Tfloat4X4Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasGroup_CgParamGroup struct {
	XsdGoPkgHasElem_bool4choicefx_annotate_groupschema_Bool4_Tbool4Type_

	XsdGoPkgHasElem_half2choicecg_param_groupschema_Half2_Tfloat2Type_

	XsdGoPkgHasElem_fixed2x1choicecg_param_groupschema_Fixed2X1_Tfloat2Type_

	XsdGoPkgHasElem_bool4x3choicecg_param_groupschema_Bool4X3_Tbool4X3Type_

	XsdGoPkgHasElem_float2x3choicegles_param_groupschema_Float2X3_Tfloat2X3Type_

	XsdGoPkgHasElem_bool3choicefx_annotate_groupschema_Bool3_Tbool3Type_

	XsdGoPkgHasElem_half3x2choicecg_param_groupschema_Half3X2_Tfloat3X2Type_

	XsdGoPkgHasElem_bool2x3choicecg_param_groupschema_Bool2X3_Tbool2X3Type_

	XsdGoPkgHasElem_bool3x2choicecg_param_groupschema_Bool3X2_Tbool3X2Type_

	XsdGoPkgHasElem_bool3x3choicecg_param_groupschema_Bool3X3_Tbool3X3Type_

	XsdGoPkgHasElem_bool2choicefx_annotate_groupschema_Bool2_Tbool2Type_

	XsdGoPkgHasElem_float2choicefx_annotate_groupschema_Float2_Tfloat2Type_

	XsdGoPkgHasElem_half4choicecg_param_groupschema_Half4_Tfloat4Type_

	XsdGoPkgHasElem_float3x2choicegles_param_groupschema_Float3X2_Tfloat3X2Type_

	XsdGoPkgHasElem_float3x3choicefx_annotate_groupschema_Float3X3_Tfloat3X3Type_

	XsdGoPkgHasElem_int3x1choicecg_param_groupschema_Int3X1_Tint3Type_

	XsdGoPkgHasElem_fixed2x4choicecg_param_groupschema_Fixed2X4_Tfloat2X4Type_

	XsdGoPkgHasElem_int4x4choicecg_param_groupschema_Int4X4_Tint4X4Type_

	XsdGoPkgHasElem_fixed3x4choicecg_param_groupschema_Fixed3X4_Tfloat3X4Type_

	XsdGoPkgHasElem_int3choicefx_annotate_groupschema_Int3_Tint3Type_

	XsdGoPkgHasElem_int2choicefx_annotate_groupschema_Int2_Tint2Type_

	XsdGoPkgHasElem_int4choicefx_annotate_groupschema_Int4_Tint4Type_

	XsdGoPkgHasElem_half2x2choicecg_param_groupschema_Half2X2_Tfloat2X2Type_

	XsdGoPkgHasElem_float4x1choicegles_param_groupschema_Float4X1_Tfloat4Type_

	XsdGoPkgHasElem_floatchoicekinematics_newparam_typeschema_Float_TfloatType_

	XsdGoPkgHasElem_half2x3choicecg_param_groupschema_Half2X3_Tfloat2X3Type_

	XsdGoPkgHasElem_int3x4choicecg_param_groupschema_Int3X4_Tint3X4Type_

	XsdGoPkgHasElem_half3x3choicecg_param_groupschema_Half3X3_Tfloat3X3Type_

	XsdGoPkgHasElem_fixed3x2choicecg_param_groupschema_Fixed3X2_Tfloat3X2Type_

	XsdGoPkgHasElem_half4x1choicecg_param_groupschema_Half4X1_Tfloat4Type_

	XsdGoPkgHasElem_half3x4choicecg_param_groupschema_Half3X4_Tfloat3X4Type_

	XsdGoPkgHasElem_float2x2choicefx_annotate_groupschema_Float2X2_Tfloat2X2Type_

	XsdGoPkgHasElem_bool3x4choicecg_param_groupschema_Bool3X4_Tbool3X4Type_

	XsdGoPkgHasElem_float2x1choicegles_param_groupschema_Float2X1_Tfloat2Type_

	XsdGoPkgHasElem_sampler2Dchoiceglsl_value_groupschema_Sampler2D_TfxSampler2DType_

	XsdGoPkgHasElem_int2x2choicecg_param_groupschema_Int2X2_Tint2X2Type_

	XsdGoPkgHasElem_bool4x1choicecg_param_groupschema_Bool4X1_Tbool4Type_

	XsdGoPkgHasElem_fixed2x2choicecg_param_groupschema_Fixed2X2_Tfloat2X2Type_

	XsdGoPkgHasElem_int4x2choicecg_param_groupschema_Int4X2_Tint4X2Type_

	XsdGoPkgHasElem_bool2x1choicecg_param_groupschema_Bool2X1_Tbool2Type_

	XsdGoPkgHasElem_samplerRECTchoiceglsl_value_groupschema_SamplerRECT_TfxSamplerRECTType_

	XsdGoPkgHasElem_bool2x4choicecg_param_groupschema_Bool2X4_Tbool2X4Type_

	XsdGoPkgHasElem_int3x3choicecg_param_groupschema_Int3X3_Tint3X3Type_

	XsdGoPkgHasElem_usertypechoicecg_param_groupschema_Usertype_TcgUserType_

	XsdGoPkgHasElem_boolchoicekinematics_newparam_typeschema_Bool_XsdtBoolean_

	XsdGoPkgHasElem_int2x3choicecg_param_groupschema_Int2X3_Tint2X3Type_

	XsdGoPkgHasElem_stringchoicefx_annotate_groupschema_String_XsdtString_

	XsdGoPkgHasElem_float4x3choicegles_param_groupschema_Float4X3_Tfloat4X3Type_

	XsdGoPkgHasElem_int2x1choicecg_param_groupschema_Int2X1_Tint2Type_

	XsdGoPkgHasElem_halfchoicecg_param_groupschema_Half_TfloatType_

	XsdGoPkgHasElem_bool2x2choicecg_param_groupschema_Bool2X2_Tbool2X2Type_

	XsdGoPkgHasElem_int2x4choicecg_param_groupschema_Int2X4_Tint2X4Type_

	XsdGoPkgHasElem_enumchoiceglsl_value_groupschema_Enum_TglEnumerationType_

	XsdGoPkgHasElem_bool4x2choicecg_param_groupschema_Bool4X2_Tbool4X2Type_

	XsdGoPkgHasElem_sampler3Dchoiceglsl_value_groupschema_Sampler3D_TfxSampler3DType_

	XsdGoPkgHasElem_bool4x4choicecg_param_groupschema_Bool4X4_Tbool4X4Type_

	XsdGoPkgHasElem_int4x1choicecg_param_groupschema_Int4X1_Tint4Type_

	XsdGoPkgHasElem_half3choicecg_param_groupschema_Half3_Tfloat3Type_

	XsdGoPkgHasElem_samplerCUBEchoiceglsl_value_groupschema_SamplerCUBE_TfxSamplerCUBEType_

	XsdGoPkgHasElem_fixed4choicecg_param_groupschema_Fixed4_Tfloat4Type_

	XsdGoPkgHasElem_sampler1Dchoiceglsl_value_groupschema_Sampler1D_TfxSampler1DType_

	XsdGoPkgHasElem_half4x4choicecg_param_groupschema_Half4X4_Tfloat4X4Type_

	XsdGoPkgHasElem_float4x4choicefx_annotate_groupschema_Float4X4_Tfloat4X4Type_

	XsdGoPkgHasElem_fixed4x1choicecg_param_groupschema_Fixed4X1_Tfloat4Type_

	XsdGoPkgHasElem_fixed3choicecg_param_groupschema_Fixed3_Tfloat3Type_

	XsdGoPkgHasElem_fixed4x2choicecg_param_groupschema_Fixed4X2_Tfloat4X2Type_

	XsdGoPkgHasElem_float4choicefx_annotate_groupschema_Float4_Tfloat4Type_

	XsdGoPkgHasElem_fixed4x4choicecg_param_groupschema_Fixed4X4_Tfloat4X4Type_

	XsdGoPkgHasElem_samplerDEPTHchoiceglsl_value_groupschema_SamplerDEPTH_TfxSamplerDEPTHType_

	XsdGoPkgHasElem_fixed4x3choicecg_param_groupschema_Fixed4X3_Tfloat4X3Type_

	XsdGoPkgHasElem_half4x2choicecg_param_groupschema_Half4X2_Tfloat4X2Type_

	XsdGoPkgHasElem_fixed3x1choicecg_param_groupschema_Fixed3X1_Tfloat3Type_

	XsdGoPkgHasElem_intchoicekinematics_newparam_typeschema_Int_TintType_

	XsdGoPkgHasElem_fixedchoicecg_param_groupschema_Fixed_TfloatType_

	XsdGoPkgHasElem_int4x3choicecg_param_groupschema_Int4X3_Tint4X3Type_

	XsdGoPkgHasElem_float3x4choicegles_param_groupschema_Float3X4_Tfloat3X4Type_

	XsdGoPkgHasElem_half3x1choicecg_param_groupschema_Half3X1_Tfloat3Type_

	XsdGoPkgHasElem_fixed3x3choicecg_param_groupschema_Fixed3X3_Tfloat3X3Type_

	XsdGoPkgHasElem_half2x4choicecg_param_groupschema_Half2X4_Tfloat2X4Type_

	XsdGoPkgHasElem_fixed2x3choicecg_param_groupschema_Fixed2X3_Tfloat2X3Type_

	XsdGoPkgHasElem_fixed2choicecg_param_groupschema_Fixed2_Tfloat2Type_

	XsdGoPkgHasElem_bool3x1choicecg_param_groupschema_Bool3X1_Tbool3Type_

	XsdGoPkgHasElem_float3x1choicegles_param_groupschema_Float3X1_Tfloat3Type_

	XsdGoPkgHasElem_half4x3choicecg_param_groupschema_Half4X3_Tfloat4X3Type_

	XsdGoPkgHasElem_int3x2choicecg_param_groupschema_Int3X2_Tint3X2Type_

	XsdGoPkgHasElem_arraychoicecg_param_groupschema_Array_TcgArrayType_

	XsdGoPkgHasElem_float3choicefx_annotate_groupschema_Float3_Tfloat3Type_

	XsdGoPkgHasElem_half2x1choicecg_param_groupschema_Half2X1_Tfloat2Type_

	XsdGoPkgHasElem_float4x2choicegles_param_groupschema_Float4X2_Tfloat4X2Type_

	XsdGoPkgHasElem_float2x4choicegles_param_groupschema_Float2X4_Tfloat2X4Type_
}

//	If the WalkHandlers.XsdGoPkgHasGroup_CgParamGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_CgParamGroup instance as the single argument. Then calls the Walk() method on 90/90 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_CgParamGroup instance.
func (me *XsdGoPkgHasGroup_CgParamGroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasGroup_CgParamGroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_fixed2x2choicecg_param_groupschema_Fixed2X2_Tfloat2X2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int4x2choicecg_param_groupschema_Int4X2_Tint4X2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool2x1choicecg_param_groupschema_Bool2X1_Tbool2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_samplerRECTchoiceglsl_value_groupschema_SamplerRECT_TfxSamplerRECTType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool2x4choicecg_param_groupschema_Bool2X4_Tbool2X4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int3x3choicecg_param_groupschema_Int3X3_Tint3X3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_usertypechoicecg_param_groupschema_Usertype_TcgUserType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_boolchoicekinematics_newparam_typeschema_Bool_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int2x3choicecg_param_groupschema_Int2X3_Tint2X3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stringchoicefx_annotate_groupschema_String_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4x3choicegles_param_groupschema_Float4X3_Tfloat4X3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int2x1choicecg_param_groupschema_Int2X1_Tint2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_halfchoicecg_param_groupschema_Half_TfloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool2x2choicecg_param_groupschema_Bool2X2_Tbool2X2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int2x4choicecg_param_groupschema_Int2X4_Tint2X4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_enumchoiceglsl_value_groupschema_Enum_TglEnumerationType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool4x2choicecg_param_groupschema_Bool4X2_Tbool4X2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sampler3Dchoiceglsl_value_groupschema_Sampler3D_TfxSampler3DType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool4x4choicecg_param_groupschema_Bool4X4_Tbool4X4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int4x1choicecg_param_groupschema_Int4X1_Tint4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_half3choicecg_param_groupschema_Half3_Tfloat3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_samplerCUBEchoiceglsl_value_groupschema_SamplerCUBE_TfxSamplerCUBEType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fixed4choicecg_param_groupschema_Fixed4_Tfloat4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sampler1Dchoiceglsl_value_groupschema_Sampler1D_TfxSampler1DType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_half4x4choicecg_param_groupschema_Half4X4_Tfloat4X4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4x4choicefx_annotate_groupschema_Float4X4_Tfloat4X4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fixed4x1choicecg_param_groupschema_Fixed4X1_Tfloat4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fixed3choicecg_param_groupschema_Fixed3_Tfloat3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fixed4x2choicecg_param_groupschema_Fixed4X2_Tfloat4X2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4choicefx_annotate_groupschema_Float4_Tfloat4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fixed4x4choicecg_param_groupschema_Fixed4X4_Tfloat4X4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_samplerDEPTHchoiceglsl_value_groupschema_SamplerDEPTH_TfxSamplerDEPTHType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fixed4x3choicecg_param_groupschema_Fixed4X3_Tfloat4X3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_half4x2choicecg_param_groupschema_Half4X2_Tfloat4X2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fixed3x1choicecg_param_groupschema_Fixed3X1_Tfloat3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_intchoicekinematics_newparam_typeschema_Int_TintType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fixedchoicecg_param_groupschema_Fixed_TfloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int4x3choicecg_param_groupschema_Int4X3_Tint4X3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3x4choicegles_param_groupschema_Float3X4_Tfloat3X4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_half3x1choicecg_param_groupschema_Half3X1_Tfloat3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fixed3x3choicecg_param_groupschema_Fixed3X3_Tfloat3X3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_half2x4choicecg_param_groupschema_Half2X4_Tfloat2X4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fixed2x3choicecg_param_groupschema_Fixed2X3_Tfloat2X3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fixed2choicecg_param_groupschema_Fixed2_Tfloat2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool3x1choicecg_param_groupschema_Bool3X1_Tbool3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3x1choicegles_param_groupschema_Float3X1_Tfloat3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_half4x3choicecg_param_groupschema_Half4X3_Tfloat4X3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int3x2choicecg_param_groupschema_Int3X2_Tint3X2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_arraychoicecg_param_groupschema_Array_TcgArrayType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3choicefx_annotate_groupschema_Float3_Tfloat3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_half2x1choicecg_param_groupschema_Half2X1_Tfloat2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4x2choicegles_param_groupschema_Float4X2_Tfloat4X2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2x4choicegles_param_groupschema_Float2X4_Tfloat2X4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool4choicefx_annotate_groupschema_Bool4_Tbool4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_half2choicecg_param_groupschema_Half2_Tfloat2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fixed2x1choicecg_param_groupschema_Fixed2X1_Tfloat2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool4x3choicecg_param_groupschema_Bool4X3_Tbool4X3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2x3choicegles_param_groupschema_Float2X3_Tfloat2X3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool3choicefx_annotate_groupschema_Bool3_Tbool3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_half3x2choicecg_param_groupschema_Half3X2_Tfloat3X2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool2x3choicecg_param_groupschema_Bool2X3_Tbool2X3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool3x2choicecg_param_groupschema_Bool3X2_Tbool3X2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool3x3choicecg_param_groupschema_Bool3X3_Tbool3X3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool2choicefx_annotate_groupschema_Bool2_Tbool2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2choicefx_annotate_groupschema_Float2_Tfloat2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_half4choicecg_param_groupschema_Half4_Tfloat4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3x2choicegles_param_groupschema_Float3X2_Tfloat3X2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3x3choicefx_annotate_groupschema_Float3X3_Tfloat3X3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int3x1choicecg_param_groupschema_Int3X1_Tint3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fixed2x4choicecg_param_groupschema_Fixed2X4_Tfloat2X4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int4x4choicecg_param_groupschema_Int4X4_Tint4X4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fixed3x4choicecg_param_groupschema_Fixed3X4_Tfloat3X4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int3choicefx_annotate_groupschema_Int3_Tint3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int2choicefx_annotate_groupschema_Int2_Tint2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int4choicefx_annotate_groupschema_Int4_Tint4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_half2x2choicecg_param_groupschema_Half2X2_Tfloat2X2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4x1choicegles_param_groupschema_Float4X1_Tfloat4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_floatchoicekinematics_newparam_typeschema_Float_TfloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_half2x3choicecg_param_groupschema_Half2X3_Tfloat2X3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int3x4choicecg_param_groupschema_Int3X4_Tint3X4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_half3x3choicecg_param_groupschema_Half3X3_Tfloat3X3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fixed3x2choicecg_param_groupschema_Fixed3X2_Tfloat3X2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_half4x1choicecg_param_groupschema_Half4X1_Tfloat4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_half3x4choicecg_param_groupschema_Half3X4_Tfloat3X4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2x2choicefx_annotate_groupschema_Float2X2_Tfloat2X2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool3x4choicecg_param_groupschema_Bool3X4_Tbool3X4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2x1choicegles_param_groupschema_Float2X1_Tfloat2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sampler2Dchoiceglsl_value_groupschema_Sampler2D_TfxSampler2DType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int2x2choicecg_param_groupschema_Int2X2_Tint2X2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool4x1choicecg_param_groupschema_Bool4X1_Tbool4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	References a predefined parameter in shader binding declarations.
type XsdGoPkgHasElem_paramchoicebind_uniformsequenceshadersequenceprogramsequencecg_pass_typeschema_Param_TxsdCgPassTypeSequenceProgramSequenceShaderSequenceBindUniformChoiceParam_ struct {
	//	References a predefined parameter in shader binding declarations.
	Param *TxsdGlslProgramTypeSequenceBindUniformChoiceParam `xml:"http://www.collada.org/2008/03/COLLADASchema param"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_paramchoicebind_uniformsequenceshadersequenceprogramsequencecg_pass_typeschema_Param_TxsdCgPassTypeSequenceProgramSequenceShaderSequenceBindUniformChoiceParam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_paramchoicebind_uniformsequenceshadersequenceprogramsequencecg_pass_typeschema_Param_TxsdCgPassTypeSequenceProgramSequenceShaderSequenceBindUniformChoiceParam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_paramchoicebind_uniformsequenceshadersequenceprogramsequencecg_pass_typeschema_Param_TxsdCgPassTypeSequenceProgramSequenceShaderSequenceBindUniformChoiceParam_ instance.
func (me *XsdGoPkgHasElem_paramchoicebind_uniformsequenceshadersequenceprogramsequencecg_pass_typeschema_Param_TxsdCgPassTypeSequenceProgramSequenceShaderSequenceBindUniformChoiceParam_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_paramchoicebind_uniformsequenceshadersequenceprogramsequencecg_pass_typeschema_Param_TxsdCgPassTypeSequenceProgramSequenceShaderSequenceBindUniformChoiceParam_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Param.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCgPassTypeSequenceProgramSequenceShaderSequenceBindUniform struct {
	//	The identifier for a uniform input parameter to the shader (a formal function parameter or in-scope
	//	global) that will be bound to an external resource.
	XsdGoPkgHasAttr_Symbol_XsdtNCName_

	XsdGoPkgHasGroup_CgParamGroup

	//	References a predefined parameter in shader binding declarations.
	XsdGoPkgHasElem_paramchoicebind_uniformsequenceshadersequenceprogramsequencecg_pass_typeschema_Param_TxsdCgPassTypeSequenceProgramSequenceShaderSequenceBindUniformChoiceParam_
}

//	If the WalkHandlers.TxsdCgPassTypeSequenceProgramSequenceShaderSequenceBindUniform function is not nil (ie. was set by outside code), calls it with this TxsdCgPassTypeSequenceProgramSequenceShaderSequenceBindUniform instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TxsdCgPassTypeSequenceProgramSequenceShaderSequenceBindUniform instance.
func (me *TxsdCgPassTypeSequenceProgramSequenceShaderSequenceBindUniform) Walk() (err error) {
	if fn := WalkHandlers.TxsdCgPassTypeSequenceProgramSequenceShaderSequenceBindUniform; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasGroup_CgParamGroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_paramchoicebind_uniformsequenceshadersequenceprogramsequencecg_pass_typeschema_Param_TxsdCgPassTypeSequenceProgramSequenceShaderSequenceBindUniformChoiceParam_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_bind_uniformsequenceshadersequenceprogramsequencecg_pass_typeschema_BindUniform_TxsdCgPassTypeSequenceProgramSequenceShaderSequenceBindUniform_ struct {
	//	Binds values to uniform inputs of a shader.
	BindUniforms []*TxsdCgPassTypeSequenceProgramSequenceShaderSequenceBindUniform `xml:"http://www.collada.org/2008/03/COLLADASchema bind_uniform"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_bind_uniformsequenceshadersequenceprogramsequencecg_pass_typeschema_BindUniform_TxsdCgPassTypeSequenceProgramSequenceShaderSequenceBindUniform_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_bind_uniformsequenceshadersequenceprogramsequencecg_pass_typeschema_BindUniform_TxsdCgPassTypeSequenceProgramSequenceShaderSequenceBindUniform_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_bind_uniformsequenceshadersequenceprogramsequencecg_pass_typeschema_BindUniform_TxsdCgPassTypeSequenceProgramSequenceShaderSequenceBindUniform_ instance.
func (me *XsdGoPkgHasElems_bind_uniformsequenceshadersequenceprogramsequencecg_pass_typeschema_BindUniform_TxsdCgPassTypeSequenceProgramSequenceShaderSequenceBindUniform_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_bind_uniformsequenceshadersequenceprogramsequencecg_pass_typeschema_BindUniform_TxsdCgPassTypeSequenceProgramSequenceShaderSequenceBindUniform_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BindUniforms {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	identify the platform_sku and compiler options to build a binary
type XsdGoPkgHasElem_refchoicebinarysequencefx_target_typeschema_Ref_XsdtAnyURI_ struct {
	Ref xsdt.AnyURI `xml:"http://www.collada.org/2008/03/COLLADASchema ref"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_refchoicebinarysequencefx_target_typeschema_Ref_XsdtAnyURI_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_refchoicebinarysequencefx_target_typeschema_Ref_XsdtAnyURI_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_refchoicebinarysequencefx_target_typeschema_Ref_XsdtAnyURI_ instance.
func (me *XsdGoPkgHasElem_refchoicebinarysequencefx_target_typeschema_Ref_XsdtAnyURI_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_refchoicebinarysequencefx_target_typeschema_Ref_XsdtAnyURI_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	contains a sequence of hexadecimal encoded binary
//	The format attribute is a text string value that indicates the image format.  Examples include "DDS", "EXR", "BMP", "JPG", and "PNG".  Note that all of these formats have internal descriptors of size, bpp, etc.
type XsdGoPkgHasAttr_Format_XsdtToken_ struct {
	//	The format attribute is a text string value that indicates the image format.  Examples include "DDS", "EXR", "BMP", "JPG", and "PNG".  Note that all of these formats have internal descriptors of size, bpp, etc.
	Format xsdt.Token `xml:"http://www.collada.org/2008/03/COLLADASchema format,attr"`
}

type TlistOfHexBinaryType xsdt.String

//	This convenience method just performs a simple type conversion to TlistOfHexBinaryType's alias type xsdt.String.
func (me TlistOfHexBinaryType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TlistOfHexBinaryType declares a String containing a whitespace-separated list of xsdt.HexBinary values. This Values() method creates and returns a slice of all elements in that list.
func (me TlistOfHexBinaryType) Values() (list []xsdt.HexBinary) {
	svals := xsdt.ListValues(string(me))
	list = make([]xsdt.HexBinary, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	Since TlistOfHexBinaryType is just a simple String type, this merely returns the current string value.
func (me TlistOfHexBinaryType) String() string { return xsdt.String(me).String() }

//	Since TlistOfHexBinaryType is just a simple String type, this merely sets the current value from the specified string.
func (me *TlistOfHexBinaryType) Set(s string) { (*xsdt.String)(me).Set(s) }

type TxsdFxTargetTypeSequenceBinaryChoiceHex struct {
	XsdGoPkgValue TlistOfHexBinaryType `xml:",chardata"`

	//	binary format which may include target device identificatrion
	XsdGoPkgHasAttr_Format_XsdtToken_
}

//	Returns the value of its XsdGoPkgValue field as a xsdt.String (which TlistOfHexBinaryType is just aliasing).
func (me *TxsdFxTargetTypeSequenceBinaryChoiceHex) ToXsdtString() xsdt.String {
	return me.XsdGoPkgValue.ToXsdtString()
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TxsdFxTargetTypeSequenceBinaryChoiceHex) ToTlistOfHexBinaryType() TlistOfHexBinaryType {
	return me.XsdGoPkgValue
}

//	If the WalkHandlers.TxsdFxTargetTypeSequenceBinaryChoiceHex function is not nil (ie. was set by outside code), calls it with this TxsdFxTargetTypeSequenceBinaryChoiceHex instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TxsdFxTargetTypeSequenceBinaryChoiceHex instance.
func (me *TxsdFxTargetTypeSequenceBinaryChoiceHex) Walk() (err error) {
	if fn := WalkHandlers.TxsdFxTargetTypeSequenceBinaryChoiceHex; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_hexchoicebinarysequencefx_target_typeschema_Hex_TxsdFxTargetTypeSequenceBinaryChoiceHex_ struct {
	//	contains a sequence of hexadecimal encoded binary
	Hex *TxsdFxTargetTypeSequenceBinaryChoiceHex `xml:"http://www.collada.org/2008/03/COLLADASchema hex"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_hexchoicebinarysequencefx_target_typeschema_Hex_TxsdFxTargetTypeSequenceBinaryChoiceHex_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_hexchoicebinarysequencefx_target_typeschema_Hex_TxsdFxTargetTypeSequenceBinaryChoiceHex_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_hexchoicebinarysequencefx_target_typeschema_Hex_TxsdFxTargetTypeSequenceBinaryChoiceHex_ instance.
func (me *XsdGoPkgHasElem_hexchoicebinarysequencefx_target_typeschema_Hex_TxsdFxTargetTypeSequenceBinaryChoiceHex_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_hexchoicebinarysequencefx_target_typeschema_Hex_TxsdFxTargetTypeSequenceBinaryChoiceHex_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Hex.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFxTargetTypeSequenceBinary struct {
	XsdGoPkgHasElem_refchoicebinarysequencefx_target_typeschema_Ref_XsdtAnyURI_

	//	contains a sequence of hexadecimal encoded binary
	XsdGoPkgHasElem_hexchoicebinarysequencefx_target_typeschema_Hex_TxsdFxTargetTypeSequenceBinaryChoiceHex_
}

//	If the WalkHandlers.TxsdFxTargetTypeSequenceBinary function is not nil (ie. was set by outside code), calls it with this TxsdFxTargetTypeSequenceBinary instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdFxTargetTypeSequenceBinary instance.
func (me *TxsdFxTargetTypeSequenceBinary) Walk() (err error) {
	if fn := WalkHandlers.TxsdFxTargetTypeSequenceBinary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_refchoicebinarysequencefx_target_typeschema_Ref_XsdtAnyURI_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_hexchoicebinarysequencefx_target_typeschema_Hex_TxsdFxTargetTypeSequenceBinaryChoiceHex_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_binarysequencefx_target_typeschema_Binary_TxsdFxTargetTypeSequenceBinary_ struct {
	Binary *TxsdFxTargetTypeSequenceBinary `xml:"http://www.collada.org/2008/03/COLLADASchema binary"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_binarysequencefx_target_typeschema_Binary_TxsdFxTargetTypeSequenceBinary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_binarysequencefx_target_typeschema_Binary_TxsdFxTargetTypeSequenceBinary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_binarysequencefx_target_typeschema_Binary_TxsdFxTargetTypeSequenceBinary_ instance.
func (me *XsdGoPkgHasElem_binarysequencefx_target_typeschema_Binary_TxsdFxTargetTypeSequenceBinary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_binarysequencefx_target_typeschema_Binary_TxsdFxTargetTypeSequenceBinary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Binary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	compiler or linker options
type XsdGoPkgHasAttr_Options_XsdtString_ struct {
	//	compiler or linker options
	Options xsdt.String `xml:"http://www.collada.org/2008/03/COLLADASchema options,attr"`
}

//	Name of sub-platform.  May be identical to the platform_series
type XsdGoPkgHasAttr_Platform_XsdtString_ struct {
	//	Name of sub-platform.  May be identical to the platform_series
	Platform xsdt.String `xml:"http://www.collada.org/2008/03/COLLADASchema platform,attr"`
}

//	compiler or linker results symbol.  Ex arbvp1, arbfp1, glslv, glslf, hlslv, hlslf, vs_3_0, ps_3_0
type XsdGoPkgHasAttr_Target_XsdtString_ struct {
	//	compiler or linker results symbol.  Ex arbvp1, arbfp1, glslv, glslf, hlslv, hlslf, vs_3_0, ps_3_0
	Target xsdt.String `xml:"http://www.collada.org/2008/03/COLLADASchema target,attr"`
}

type TfxTargetType struct {
	//	Name of sub-platform.  May be identical to the platform_series
	XsdGoPkgHasAttr_Platform_XsdtString_

	//	compiler or linker results symbol.  Ex arbvp1, arbfp1, glslv, glslf, hlslv, hlslf, vs_3_0, ps_3_0
	XsdGoPkgHasAttr_Target_XsdtString_

	XsdGoPkgHasElem_binarysequencefx_target_typeschema_Binary_TxsdFxTargetTypeSequenceBinary_

	//	compiler or linker options
	XsdGoPkgHasAttr_Options_XsdtString_
}

//	If the WalkHandlers.TfxTargetType function is not nil (ie. was set by outside code), calls it with this TfxTargetType instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TfxTargetType instance.
func (me *TfxTargetType) Walk() (err error) {
	if fn := WalkHandlers.TfxTargetType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_binarysequencefx_target_typeschema_Binary_TxsdFxTargetTypeSequenceBinary_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_compilersequenceshadersequenceprogramsequencecg_pass_typeschema_Compiler_TfxTargetType_ struct {
	Compilers []*TfxTargetType `xml:"http://www.collada.org/2008/03/COLLADASchema compiler"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_compilersequenceshadersequenceprogramsequencecg_pass_typeschema_Compiler_TfxTargetType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_compilersequenceshadersequenceprogramsequencecg_pass_typeschema_Compiler_TfxTargetType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_compilersequenceshadersequenceprogramsequencecg_pass_typeschema_Compiler_TfxTargetType_ instance.
func (me *XsdGoPkgHasElems_compilersequenceshadersequenceprogramsequencecg_pass_typeschema_Compiler_TfxTargetType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_compilersequenceshadersequenceprogramsequencecg_pass_typeschema_Compiler_TfxTargetType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Compilers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	collect the sources together for the shader.  Use concat to make the final string.
//	entry function name for this shader
type XsdGoPkgHasAttr_Entry_XsdtToken_ struct {
	//	entry function name for this shader
	Entry xsdt.Token `xml:"http://www.collada.org/2008/03/COLLADASchema entry,attr"`
}

type TxsdCgPassTypeSequenceProgramSequenceShaderSequenceSources struct {
	TfxSourcesType

	//	entry function name for this shader
	XsdGoPkgHasAttr_Entry_XsdtToken_
}

//	If the WalkHandlers.TxsdCgPassTypeSequenceProgramSequenceShaderSequenceSources function is not nil (ie. was set by outside code), calls it with this TxsdCgPassTypeSequenceProgramSequenceShaderSequenceSources instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TxsdCgPassTypeSequenceProgramSequenceShaderSequenceSources instance.
func (me *TxsdCgPassTypeSequenceProgramSequenceShaderSequenceSources) Walk() (err error) {
	if fn := WalkHandlers.TxsdCgPassTypeSequenceProgramSequenceShaderSequenceSources; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TfxSourcesType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_sourcessequenceshadersequenceprogramsequencecg_pass_typeschema_Sources_TxsdCgPassTypeSequenceProgramSequenceShaderSequenceSources_ struct {
	//	collect the sources together for the shader.  Use concat to make the final string.
	Sources *TxsdCgPassTypeSequenceProgramSequenceShaderSequenceSources `xml:"http://www.collada.org/2008/03/COLLADASchema sources"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sourcessequenceshadersequenceprogramsequencecg_pass_typeschema_Sources_TxsdCgPassTypeSequenceProgramSequenceShaderSequenceSources_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sourcessequenceshadersequenceprogramsequencecg_pass_typeschema_Sources_TxsdCgPassTypeSequenceProgramSequenceShaderSequenceSources_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sourcessequenceshadersequenceprogramsequencecg_pass_typeschema_Sources_TxsdCgPassTypeSequenceProgramSequenceShaderSequenceSources_ instance.
func (me *XsdGoPkgHasElem_sourcessequenceshadersequenceprogramsequencecg_pass_typeschema_Sources_TxsdCgPassTypeSequenceProgramSequenceShaderSequenceSources_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sourcessequenceshadersequenceprogramsequencecg_pass_typeschema_Sources_TxsdCgPassTypeSequenceProgramSequenceShaderSequenceSources_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Sources.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCgPassTypeSequenceProgramSequenceShader struct {
	XsdGoPkgHasElems_compilersequenceshadersequenceprogramsequencecg_pass_typeschema_Compiler_TfxTargetType_

	//	collect the sources together for the shader.  Use concat to make the final string.
	XsdGoPkgHasElem_sourcessequenceshadersequenceprogramsequencecg_pass_typeschema_Sources_TxsdCgPassTypeSequenceProgramSequenceShaderSequenceSources_

	//	In which pipeline stage this programmable shader is designed to execute, for example, VERTEX, FRAGMENT, etc.
	XsdGoPkgHasAttr_Stage_TfxPipelineStageEnum_

	//	Binds values to uniform inputs of a shader.
	XsdGoPkgHasElems_bind_uniformsequenceshadersequenceprogramsequencecg_pass_typeschema_BindUniform_TxsdCgPassTypeSequenceProgramSequenceShaderSequenceBindUniform_
}

//	If the WalkHandlers.TxsdCgPassTypeSequenceProgramSequenceShader function is not nil (ie. was set by outside code), calls it with this TxsdCgPassTypeSequenceProgramSequenceShader instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TxsdCgPassTypeSequenceProgramSequenceShader instance.
func (me *TxsdCgPassTypeSequenceProgramSequenceShader) Walk() (err error) {
	if fn := WalkHandlers.TxsdCgPassTypeSequenceProgramSequenceShader; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_sourcessequenceshadersequenceprogramsequencecg_pass_typeschema_Sources_TxsdCgPassTypeSequenceProgramSequenceShaderSequenceSources_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_bind_uniformsequenceshadersequenceprogramsequencecg_pass_typeschema_BindUniform_TxsdCgPassTypeSequenceProgramSequenceShaderSequenceBindUniform_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_compilersequenceshadersequenceprogramsequencecg_pass_typeschema_Compiler_TfxTargetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_shadersequenceprogramsequencecg_pass_typeschema_Shader_TxsdCgPassTypeSequenceProgramSequenceShader_ struct {
	//	Declare and prepare a shader for execution in the rendering pipeline of a pass.
	Shaders []*TxsdCgPassTypeSequenceProgramSequenceShader `xml:"http://www.collada.org/2008/03/COLLADASchema shader"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_shadersequenceprogramsequencecg_pass_typeschema_Shader_TxsdCgPassTypeSequenceProgramSequenceShader_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_shadersequenceprogramsequencecg_pass_typeschema_Shader_TxsdCgPassTypeSequenceProgramSequenceShader_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_shadersequenceprogramsequencecg_pass_typeschema_Shader_TxsdCgPassTypeSequenceProgramSequenceShader_ instance.
func (me *XsdGoPkgHasElems_shadersequenceprogramsequencecg_pass_typeschema_Shader_TxsdCgPassTypeSequenceProgramSequenceShader_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_shadersequenceprogramsequencecg_pass_typeschema_Shader_TxsdCgPassTypeSequenceProgramSequenceShader_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Shaders {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCgPassTypeSequenceProgram struct {
	//	Declare and prepare a shader for execution in the rendering pipeline of a pass.
	XsdGoPkgHasElems_shadersequenceprogramsequencecg_pass_typeschema_Shader_TxsdCgPassTypeSequenceProgramSequenceShader_
}

//	If the WalkHandlers.TxsdCgPassTypeSequenceProgram function is not nil (ie. was set by outside code), calls it with this TxsdCgPassTypeSequenceProgram instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdCgPassTypeSequenceProgram instance.
func (me *TxsdCgPassTypeSequenceProgram) Walk() (err error) {
	if fn := WalkHandlers.TxsdCgPassTypeSequenceProgram; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_shadersequenceprogramsequencecg_pass_typeschema_Shader_TxsdCgPassTypeSequenceProgramSequenceShader_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_programsequencecg_pass_typeschema_Program_TxsdCgPassTypeSequenceProgram_ struct {
	Program *TxsdCgPassTypeSequenceProgram `xml:"http://www.collada.org/2008/03/COLLADASchema program"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_programsequencecg_pass_typeschema_Program_TxsdCgPassTypeSequenceProgram_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_programsequencecg_pass_typeschema_Program_TxsdCgPassTypeSequenceProgram_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_programsequencecg_pass_typeschema_Program_TxsdCgPassTypeSequenceProgram_ instance.
func (me *XsdGoPkgHasElem_programsequencecg_pass_typeschema_Program_TxsdCgPassTypeSequenceProgram_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_programsequencecg_pass_typeschema_Program_TxsdCgPassTypeSequenceProgram_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Program.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgPassType struct {
	XsdGoPkgHasElems_annotatesequenceglsl_newparam_typeschema_Annotate_TfxAnnotateType_

	XsdGoPkgHasElem_evaluatesequencecg_pass_typeschema_Evaluate_TxsdCgPassTypeSequenceEvaluate_

	XsdGoPkgHasElem_statessequencecg_pass_typeschema_States_TxsdCgPassTypeSequenceStates_

	XsdGoPkgHasElem_programsequencecg_pass_typeschema_Program_TxsdCgPassTypeSequenceProgram_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_TsidType_
}

//	If the WalkHandlers.TcgPassType function is not nil (ie. was set by outside code), calls it with this TcgPassType instance as the single argument. Then calls the Walk() method on 5/6 embed(s) and 0/0 field(s) belonging to this TcgPassType instance.
func (me *TcgPassType) Walk() (err error) {
	if fn := WalkHandlers.TcgPassType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_annotatesequenceglsl_newparam_typeschema_Annotate_TfxAnnotateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_evaluatesequencecg_pass_typeschema_Evaluate_TxsdCgPassTypeSequenceEvaluate_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_statessequencecg_pass_typeschema_States_TxsdCgPassTypeSequenceStates_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_programsequencecg_pass_typeschema_Program_TxsdCgPassTypeSequenceProgram_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_passsequencetechniquesequenceprofile_cg_typeschema_Pass_TcgPassType_ struct {
	//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
	Passes []*TcgPassType `xml:"http://www.collada.org/2008/03/COLLADASchema pass"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_passsequencetechniquesequenceprofile_cg_typeschema_Pass_TcgPassType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_passsequencetechniquesequenceprofile_cg_typeschema_Pass_TcgPassType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_passsequencetechniquesequenceprofile_cg_typeschema_Pass_TcgPassType_ instance.
func (me *XsdGoPkgHasElems_passsequencetechniquesequenceprofile_cg_typeschema_Pass_TcgPassType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_passsequencetechniquesequenceprofile_cg_typeschema_Pass_TcgPassType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Passes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProfileCgTypeSequenceTechnique struct {
	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_TsidType_

	XsdGoPkgHasElems_annotatesequenceglsl_newparam_typeschema_Annotate_TfxAnnotateType_

	//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
	XsdGoPkgHasElems_passsequencetechniquesequenceprofile_cg_typeschema_Pass_TcgPassType_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The technique element may contain an asset element.
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_
}

//	If the WalkHandlers.TxsdProfileCgTypeSequenceTechnique function is not nil (ie. was set by outside code), calls it with this TxsdProfileCgTypeSequenceTechnique instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TxsdProfileCgTypeSequenceTechnique instance.
func (me *TxsdProfileCgTypeSequenceTechnique) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileCgTypeSequenceTechnique; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_annotatesequenceglsl_newparam_typeschema_Annotate_TfxAnnotateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_passsequencetechniquesequenceprofile_cg_typeschema_Pass_TcgPassType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_techniquesequenceprofile_cg_typeschema_Technique_TxsdProfileCgTypeSequenceTechnique_ struct {
	//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
	Techniques []*TxsdProfileCgTypeSequenceTechnique `xml:"http://www.collada.org/2008/03/COLLADASchema technique"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_techniquesequenceprofile_cg_typeschema_Technique_TxsdProfileCgTypeSequenceTechnique_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_techniquesequenceprofile_cg_typeschema_Technique_TxsdProfileCgTypeSequenceTechnique_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_techniquesequenceprofile_cg_typeschema_Technique_TxsdProfileCgTypeSequenceTechnique_ instance.
func (me *XsdGoPkgHasElems_techniquesequenceprofile_cg_typeschema_Technique_TxsdProfileCgTypeSequenceTechnique_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_techniquesequenceprofile_cg_typeschema_Technique_TxsdProfileCgTypeSequenceTechnique_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Techniques {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Create a new, named param object in the CG Runtime, assign it a type, an initial value, and additional attributes at declaration time.
type TcgNewparamType struct {
	XsdGoPkgHasAttr_Sid_TsidType_

	//	The annotate element allows you to specify an annotation for this new param.
	XsdGoPkgHasElems_annotatesequenceglsl_newparam_typeschema_Annotate_TfxAnnotateType_

	XsdGoPkgHasGroup_CgParamGroup

	//	The modifier element allows you to specify a modifier for this new param.
	XsdGoPkgHasElem_modifiersequenceglsl_newparam_typeschema_Modifier_TfxModifierEnum_

	//	The semantic element allows you to specify a semantic for this new param.
	XsdGoPkgHasElem_semanticsequenceglsl_newparam_typeschema_Semantic_XsdtNCName_
}

//	If the WalkHandlers.TcgNewparamType function is not nil (ie. was set by outside code), calls it with this TcgNewparamType instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TcgNewparamType instance.
func (me *TcgNewparamType) Walk() (err error) {
	if fn := WalkHandlers.TcgNewparamType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_annotatesequenceglsl_newparam_typeschema_Annotate_TfxAnnotateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroup_CgParamGroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_modifiersequenceglsl_newparam_typeschema_Modifier_TfxModifierEnum_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_semanticsequenceglsl_newparam_typeschema_Semantic_XsdtNCName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_newparamsequenceprofile_cg_typeschema_Newparam_TcgNewparamType_ struct {
	Newparams []*TcgNewparamType `xml:"http://www.collada.org/2008/03/COLLADASchema newparam"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_newparamsequenceprofile_cg_typeschema_Newparam_TcgNewparamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_newparamsequenceprofile_cg_typeschema_Newparam_TcgNewparamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_newparamsequenceprofile_cg_typeschema_Newparam_TcgNewparamType_ instance.
func (me *XsdGoPkgHasElems_newparamsequenceprofile_cg_typeschema_Newparam_TcgNewparamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_newparamsequenceprofile_cg_typeschema_Newparam_TcgNewparamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Newparams {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TprofileCgType struct {
	//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
	XsdGoPkgHasElems_techniquesequenceprofile_cg_typeschema_Technique_TxsdProfileCgTypeSequenceTechnique_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	//	The type of platform. This is a vendor-defined character string that indicates the platform or capability target for the technique. Optional
	XsdGoPkgHasAttr_Platform_XsdtNCName_Pc

	XsdGoPkgHasElems_codechoicesequenceprofile_glsl_typeschema_Code_TfxCodeType_

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElems_includechoicesequenceprofile_glsl_typeschema_Include_TfxIncludeType_

	XsdGoPkgHasElems_newparamsequenceprofile_cg_typeschema_Newparam_TcgNewparamType_
}

//	If the WalkHandlers.TprofileCgType function is not nil (ie. was set by outside code), calls it with this TprofileCgType instance as the single argument. Then calls the Walk() method on 6/8 embed(s) and 0/0 field(s) belonging to this TprofileCgType instance.
func (me *TprofileCgType) Walk() (err error) {
	if fn := WalkHandlers.TprofileCgType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_codechoicesequenceprofile_glsl_typeschema_Code_TfxCodeType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_includechoicesequenceprofile_glsl_typeschema_Include_TfxIncludeType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_newparamsequenceprofile_cg_typeschema_Newparam_TcgNewparamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_techniquesequenceprofile_cg_typeschema_Technique_TxsdProfileCgTypeSequenceTechnique_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_profile_CGchoicefx_profile_groupschema_ProfileCg_TprofileCgType_ struct {
	ProfileCg *TprofileCgType `xml:"http://www.collada.org/2008/03/COLLADASchema profile_CG"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_profile_CGchoicefx_profile_groupschema_ProfileCg_TprofileCgType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_profile_CGchoicefx_profile_groupschema_ProfileCg_TprofileCgType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_profile_CGchoicefx_profile_groupschema_ProfileCg_TprofileCgType_ instance.
func (me *XsdGoPkgHasElem_profile_CGchoicefx_profile_groupschema_ProfileCg_TprofileCgType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_profile_CGchoicefx_profile_groupschema_ProfileCg_TprofileCgType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ProfileCg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	FX for OpenGL ES 2.0
//	Shading language that will be used.  This is not an enum to support future languages.  Current known languages at this time are GLSL-ES, CG
type XsdGoPkgHasAttr_Language_XsdtNCName_ struct {
	//	Shading language that will be used.  This is not an enum to support future languages.  Current known languages at this time are GLSL-ES, CG
	Language xsdt.NCName `xml:"http://www.collada.org/2008/03/COLLADASchema language,attr"`
}

//	Support for multiple OpenGL ES 2.0 platforms
type XsdGoPkgHasAttr_Platforms_TlistOfNamesType_ struct {
	//	Support for multiple OpenGL ES 2.0 platforms
	Platforms TlistOfNamesType `xml:"http://www.collada.org/2008/03/COLLADASchema platforms,attr"`
}

//	Declare a new parameter in the profile to be bound to the pipeline state or shaders
//	New parameters may choose to type themselves by value, providing a default.
type XsdGoPkgHasElem_ivec4choicegles2_value_groupschema_Ivec4_Tint4Type_ struct {
	Ivec4 Tint4Type `xml:"http://www.collada.org/2008/03/COLLADASchema ivec4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ivec4choicegles2_value_groupschema_Ivec4_Tint4Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ivec4choicegles2_value_groupschema_Ivec4_Tint4Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ivec4choicegles2_value_groupschema_Ivec4_Tint4Type_ instance.
func (me *XsdGoPkgHasElem_ivec4choicegles2_value_groupschema_Ivec4_Tint4Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ivec4choicegles2_value_groupschema_Ivec4_Tint4Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ivec3choicegles2_value_groupschema_Ivec3_Tint3Type_ struct {
	Ivec3 Tint3Type `xml:"http://www.collada.org/2008/03/COLLADASchema ivec3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ivec3choicegles2_value_groupschema_Ivec3_Tint3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ivec3choicegles2_value_groupschema_Ivec3_Tint3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ivec3choicegles2_value_groupschema_Ivec3_Tint3Type_ instance.
func (me *XsdGoPkgHasElem_ivec3choicegles2_value_groupschema_Ivec3_Tint3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ivec3choicegles2_value_groupschema_Ivec3_Tint3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_mat4choicegles2_value_groupschema_Mat4_Tfloat4X4Type_ struct {
	Mat4 Tfloat4X4Type `xml:"http://www.collada.org/2008/03/COLLADASchema mat4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_mat4choicegles2_value_groupschema_Mat4_Tfloat4X4Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mat4choicegles2_value_groupschema_Mat4_Tfloat4X4Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_mat4choicegles2_value_groupschema_Mat4_Tfloat4X4Type_ instance.
func (me *XsdGoPkgHasElem_mat4choicegles2_value_groupschema_Mat4_Tfloat4X4Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_mat4choicegles2_value_groupschema_Mat4_Tfloat4X4Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ivec2choicegles2_value_groupschema_Ivec2_Tint2Type_ struct {
	Ivec2 Tint2Type `xml:"http://www.collada.org/2008/03/COLLADASchema ivec2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ivec2choicegles2_value_groupschema_Ivec2_Tint2Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ivec2choicegles2_value_groupschema_Ivec2_Tint2Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ivec2choicegles2_value_groupschema_Ivec2_Tint2Type_ instance.
func (me *XsdGoPkgHasElem_ivec2choicegles2_value_groupschema_Ivec2_Tint2Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ivec2choicegles2_value_groupschema_Ivec2_Tint2Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGles2ValueGroupChoiceArray struct {
	//	Enable applications to validate element count without shader having been compiled
	XsdGoPkgHasAttr_Length_XsdtPositiveInteger_

	XsdGoPkgHasGroup_Gles2ValueGroup
}

//	If the WalkHandlers.TxsdGles2ValueGroupChoiceArray function is not nil (ie. was set by outside code), calls it with this TxsdGles2ValueGroupChoiceArray instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGles2ValueGroupChoiceArray instance.
func (me *TxsdGles2ValueGroupChoiceArray) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2ValueGroupChoiceArray; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_arraychoicegles2_value_groupschema_Array_TxsdGles2ValueGroupChoiceArray_ struct {
	Array *TxsdGles2ValueGroupChoiceArray `xml:"http://www.collada.org/2008/03/COLLADASchema array"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_arraychoicegles2_value_groupschema_Array_TxsdGles2ValueGroupChoiceArray_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_arraychoicegles2_value_groupschema_Array_TxsdGles2ValueGroupChoiceArray_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_arraychoicegles2_value_groupschema_Array_TxsdGles2ValueGroupChoiceArray_ instance.
func (me *XsdGoPkgHasElem_arraychoicegles2_value_groupschema_Array_TxsdGles2ValueGroupChoiceArray_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_arraychoicegles2_value_groupschema_Array_TxsdGles2ValueGroupChoiceArray_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Array.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_bvec2choicegles2_value_groupschema_Bvec2_Tbool2Type_ struct {
	Bvec2 Tbool2Type `xml:"http://www.collada.org/2008/03/COLLADASchema bvec2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bvec2choicegles2_value_groupschema_Bvec2_Tbool2Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bvec2choicegles2_value_groupschema_Bvec2_Tbool2Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bvec2choicegles2_value_groupschema_Bvec2_Tbool2Type_ instance.
func (me *XsdGoPkgHasElem_bvec2choicegles2_value_groupschema_Bvec2_Tbool2Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bvec2choicegles2_value_groupschema_Bvec2_Tbool2Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_bvec3choicegles2_value_groupschema_Bvec3_Tbool3Type_ struct {
	Bvec3 Tbool3Type `xml:"http://www.collada.org/2008/03/COLLADASchema bvec3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bvec3choicegles2_value_groupschema_Bvec3_Tbool3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bvec3choicegles2_value_groupschema_Bvec3_Tbool3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bvec3choicegles2_value_groupschema_Bvec3_Tbool3Type_ instance.
func (me *XsdGoPkgHasElem_bvec3choicegles2_value_groupschema_Bvec3_Tbool3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bvec3choicegles2_value_groupschema_Bvec3_Tbool3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_bvec4choicegles2_value_groupschema_Bvec4_Tbool4Type_ struct {
	Bvec4 Tbool4Type `xml:"http://www.collada.org/2008/03/COLLADASchema bvec4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bvec4choicegles2_value_groupschema_Bvec4_Tbool4Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bvec4choicegles2_value_groupschema_Bvec4_Tbool4Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bvec4choicegles2_value_groupschema_Bvec4_Tbool4Type_ instance.
func (me *XsdGoPkgHasElem_bvec4choicegles2_value_groupschema_Bvec4_Tbool4Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bvec4choicegles2_value_groupschema_Bvec4_Tbool4Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Use a series of these to set the members by name.  The ref attribute will be relative to the struct you are in right now.
type TxsdGles2ValueGroupChoiceUsertypeSequenceSetparam struct {
	//	Symbol name of the member
	XsdGoPkgHasAttr_Ref_XsdtToken_

	XsdGoPkgHasGroup_Gles2ValueGroup
}

//	If the WalkHandlers.TxsdGles2ValueGroupChoiceUsertypeSequenceSetparam function is not nil (ie. was set by outside code), calls it with this TxsdGles2ValueGroupChoiceUsertypeSequenceSetparam instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGles2ValueGroupChoiceUsertypeSequenceSetparam instance.
func (me *TxsdGles2ValueGroupChoiceUsertypeSequenceSetparam) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2ValueGroupChoiceUsertypeSequenceSetparam; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_setparamsequenceusertypechoicegles2_value_groupschema_Setparam_TxsdGles2ValueGroupChoiceUsertypeSequenceSetparam_ struct {
	//	Use a series of these to set the members by name.  The ref attribute will be relative to the struct you are in right now.
	Setparams []*TxsdGles2ValueGroupChoiceUsertypeSequenceSetparam `xml:"http://www.collada.org/2008/03/COLLADASchema setparam"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_setparamsequenceusertypechoicegles2_value_groupschema_Setparam_TxsdGles2ValueGroupChoiceUsertypeSequenceSetparam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_setparamsequenceusertypechoicegles2_value_groupschema_Setparam_TxsdGles2ValueGroupChoiceUsertypeSequenceSetparam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_setparamsequenceusertypechoicegles2_value_groupschema_Setparam_TxsdGles2ValueGroupChoiceUsertypeSequenceSetparam_ instance.
func (me *XsdGoPkgHasElems_setparamsequenceusertypechoicegles2_value_groupschema_Setparam_TxsdGles2ValueGroupChoiceUsertypeSequenceSetparam_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_setparamsequenceusertypechoicegles2_value_groupschema_Setparam_TxsdGles2ValueGroupChoiceUsertypeSequenceSetparam_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Setparams {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGles2ValueGroupChoiceUsertype struct {
	//	Use a series of these to set the members by name.  The ref attribute will be relative to the struct you are in right now.
	XsdGoPkgHasElems_setparamsequenceusertypechoicegles2_value_groupschema_Setparam_TxsdGles2ValueGroupChoiceUsertypeSequenceSetparam_

	//	Symbol for type or structure in shader code.   This aids in type-checking, resolution of bindings, and support interfaces
	XsdGoPkgHasAttr_Typename_XsdtToken_
}

//	If the WalkHandlers.TxsdGles2ValueGroupChoiceUsertype function is not nil (ie. was set by outside code), calls it with this TxsdGles2ValueGroupChoiceUsertype instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TxsdGles2ValueGroupChoiceUsertype instance.
func (me *TxsdGles2ValueGroupChoiceUsertype) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2ValueGroupChoiceUsertype; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_setparamsequenceusertypechoicegles2_value_groupschema_Setparam_TxsdGles2ValueGroupChoiceUsertypeSequenceSetparam_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_usertypechoicegles2_value_groupschema_Usertype_TxsdGles2ValueGroupChoiceUsertype_ struct {
	Usertype *TxsdGles2ValueGroupChoiceUsertype `xml:"http://www.collada.org/2008/03/COLLADASchema usertype"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_usertypechoicegles2_value_groupschema_Usertype_TxsdGles2ValueGroupChoiceUsertype_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_usertypechoicegles2_value_groupschema_Usertype_TxsdGles2ValueGroupChoiceUsertype_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_usertypechoicegles2_value_groupschema_Usertype_TxsdGles2ValueGroupChoiceUsertype_ instance.
func (me *XsdGoPkgHasElem_usertypechoicegles2_value_groupschema_Usertype_TxsdGles2ValueGroupChoiceUsertype_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_usertypechoicegles2_value_groupschema_Usertype_TxsdGles2ValueGroupChoiceUsertype_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Usertype.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_vec2choicegles2_value_groupschema_Vec2_Tfloat2Type_ struct {
	Vec2 Tfloat2Type `xml:"http://www.collada.org/2008/03/COLLADASchema vec2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_vec2choicegles2_value_groupschema_Vec2_Tfloat2Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_vec2choicegles2_value_groupschema_Vec2_Tfloat2Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_vec2choicegles2_value_groupschema_Vec2_Tfloat2Type_ instance.
func (me *XsdGoPkgHasElem_vec2choicegles2_value_groupschema_Vec2_Tfloat2Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_vec2choicegles2_value_groupschema_Vec2_Tfloat2Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_mat3choicegles2_value_groupschema_Mat3_Tfloat3X3Type_ struct {
	Mat3 Tfloat3X3Type `xml:"http://www.collada.org/2008/03/COLLADASchema mat3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_mat3choicegles2_value_groupschema_Mat3_Tfloat3X3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mat3choicegles2_value_groupschema_Mat3_Tfloat3X3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_mat3choicegles2_value_groupschema_Mat3_Tfloat3X3Type_ instance.
func (me *XsdGoPkgHasElem_mat3choicegles2_value_groupschema_Mat3_Tfloat3X3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_mat3choicegles2_value_groupschema_Mat3_Tfloat3X3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_vec4choicegles2_value_groupschema_Vec4_Tfloat4Type_ struct {
	Vec4 Tfloat4Type `xml:"http://www.collada.org/2008/03/COLLADASchema vec4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_vec4choicegles2_value_groupschema_Vec4_Tfloat4Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_vec4choicegles2_value_groupschema_Vec4_Tfloat4Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_vec4choicegles2_value_groupschema_Vec4_Tfloat4Type_ instance.
func (me *XsdGoPkgHasElem_vec4choicegles2_value_groupschema_Vec4_Tfloat4Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_vec4choicegles2_value_groupschema_Vec4_Tfloat4Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_vec3choicegles2_value_groupschema_Vec3_Tfloat3Type_ struct {
	Vec3 Tfloat3Type `xml:"http://www.collada.org/2008/03/COLLADASchema vec3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_vec3choicegles2_value_groupschema_Vec3_Tfloat3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_vec3choicegles2_value_groupschema_Vec3_Tfloat3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_vec3choicegles2_value_groupschema_Vec3_Tfloat3Type_ instance.
func (me *XsdGoPkgHasElem_vec3choicegles2_value_groupschema_Vec3_Tfloat3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_vec3choicegles2_value_groupschema_Vec3_Tfloat3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_mat2choicegles2_value_groupschema_Mat2_Tfloat2X2Type_ struct {
	Mat2 Tfloat2X2Type `xml:"http://www.collada.org/2008/03/COLLADASchema mat2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_mat2choicegles2_value_groupschema_Mat2_Tfloat2X2Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mat2choicegles2_value_groupschema_Mat2_Tfloat2X2Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_mat2choicegles2_value_groupschema_Mat2_Tfloat2X2Type_ instance.
func (me *XsdGoPkgHasElem_mat2choicegles2_value_groupschema_Mat2_Tfloat2X2Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_mat2choicegles2_value_groupschema_Mat2_Tfloat2X2Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasGroup_Gles2ValueGroup struct {
	XsdGoPkgHasElem_boolchoicekinematics_newparam_typeschema_Bool_XsdtBoolean_

	XsdGoPkgHasElem_mat2choicegles2_value_groupschema_Mat2_Tfloat2X2Type_

	XsdGoPkgHasElem_ivec4choicegles2_value_groupschema_Ivec4_Tint4Type_

	//	not in baseline spec but probably available in extensions
	XsdGoPkgHasElem_samplerDEPTHchoiceglsl_value_groupschema_SamplerDEPTH_TfxSamplerDEPTHType_

	XsdGoPkgHasElem_ivec3choicegles2_value_groupschema_Ivec3_Tint3Type_

	XsdGoPkgHasElem_mat4choicegles2_value_groupschema_Mat4_Tfloat4X4Type_

	XsdGoPkgHasElem_ivec2choicegles2_value_groupschema_Ivec2_Tint2Type_

	XsdGoPkgHasElem_intchoicekinematics_newparam_typeschema_Int_TintType_

	XsdGoPkgHasElem_arraychoicegles2_value_groupschema_Array_TxsdGles2ValueGroupChoiceArray_

	XsdGoPkgHasElem_sampler2Dchoiceglsl_value_groupschema_Sampler2D_TfxSampler2DType_

	XsdGoPkgHasElem_bvec2choicegles2_value_groupschema_Bvec2_Tbool2Type_

	XsdGoPkgHasElem_bvec3choicegles2_value_groupschema_Bvec3_Tbool3Type_

	XsdGoPkgHasElem_bvec4choicegles2_value_groupschema_Bvec4_Tbool4Type_

	XsdGoPkgHasElem_samplerCUBEchoiceglsl_value_groupschema_SamplerCUBE_TfxSamplerCUBEType_

	//	not in baseline spec but probably available in extensions
	XsdGoPkgHasElem_sampler3Dchoiceglsl_value_groupschema_Sampler3D_TfxSampler3DType_

	XsdGoPkgHasElem_enumchoiceglsl_value_groupschema_Enum_TglEnumerationType_

	XsdGoPkgHasElem_usertypechoicegles2_value_groupschema_Usertype_TxsdGles2ValueGroupChoiceUsertype_

	XsdGoPkgHasElem_vec2choicegles2_value_groupschema_Vec2_Tfloat2Type_

	XsdGoPkgHasElem_mat3choicegles2_value_groupschema_Mat3_Tfloat3X3Type_

	XsdGoPkgHasElem_vec4choicegles2_value_groupschema_Vec4_Tfloat4Type_

	XsdGoPkgHasElem_vec3choicegles2_value_groupschema_Vec3_Tfloat3Type_

	XsdGoPkgHasElem_floatchoicekinematics_newparam_typeschema_Float_TfloatType_
}

//	If the WalkHandlers.XsdGoPkgHasGroup_Gles2ValueGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_Gles2ValueGroup instance as the single argument. Then calls the Walk() method on 22/22 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_Gles2ValueGroup instance.
func (me *XsdGoPkgHasGroup_Gles2ValueGroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasGroup_Gles2ValueGroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ivec2choicegles2_value_groupschema_Ivec2_Tint2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_intchoicekinematics_newparam_typeschema_Int_TintType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_arraychoicegles2_value_groupschema_Array_TxsdGles2ValueGroupChoiceArray_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sampler2Dchoiceglsl_value_groupschema_Sampler2D_TfxSampler2DType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bvec2choicegles2_value_groupschema_Bvec2_Tbool2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bvec3choicegles2_value_groupschema_Bvec3_Tbool3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bvec4choicegles2_value_groupschema_Bvec4_Tbool4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_samplerCUBEchoiceglsl_value_groupschema_SamplerCUBE_TfxSamplerCUBEType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sampler3Dchoiceglsl_value_groupschema_Sampler3D_TfxSampler3DType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_enumchoiceglsl_value_groupschema_Enum_TglEnumerationType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_usertypechoicegles2_value_groupschema_Usertype_TxsdGles2ValueGroupChoiceUsertype_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_vec2choicegles2_value_groupschema_Vec2_Tfloat2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_mat3choicegles2_value_groupschema_Mat3_Tfloat3X3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_vec4choicegles2_value_groupschema_Vec4_Tfloat4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_vec3choicegles2_value_groupschema_Vec3_Tfloat3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_floatchoicekinematics_newparam_typeschema_Float_TfloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_boolchoicekinematics_newparam_typeschema_Bool_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_mat2choicegles2_value_groupschema_Mat2_Tfloat2X2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ivec4choicegles2_value_groupschema_Ivec4_Tint4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_samplerDEPTHchoiceglsl_value_groupschema_SamplerDEPTH_TfxSamplerDEPTHType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ivec3choicegles2_value_groupschema_Ivec3_Tint3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_mat4choicegles2_value_groupschema_Mat4_Tfloat4X4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tgles2NewparamType struct {
	XsdGoPkgHasGroup_Gles2ValueGroup

	//	The semantic element allows you to specify a semantic for this new param.
	XsdGoPkgHasElem_semanticsequenceglsl_newparam_typeschema_Semantic_XsdtNCName_

	XsdGoPkgHasElems_annotatesequenceglsl_newparam_typeschema_Annotate_TfxAnnotateType_

	XsdGoPkgHasElem_modifiersequenceglsl_newparam_typeschema_Modifier_TfxModifierEnum_

	XsdGoPkgHasAttr_Sid_TsidType_
}

//	If the WalkHandlers.Tgles2NewparamType function is not nil (ie. was set by outside code), calls it with this Tgles2NewparamType instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this Tgles2NewparamType instance.
func (me *Tgles2NewparamType) Walk() (err error) {
	if fn := WalkHandlers.Tgles2NewparamType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasGroup_Gles2ValueGroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_semanticsequenceglsl_newparam_typeschema_Semantic_XsdtNCName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_annotatesequenceglsl_newparam_typeschema_Annotate_TfxAnnotateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_modifiersequenceglsl_newparam_typeschema_Modifier_TfxModifierEnum_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProfileGles2TypeSequenceNewparam struct {
	Tgles2NewparamType
}

//	If the WalkHandlers.TxsdProfileGles2TypeSequenceNewparam function is not nil (ie. was set by outside code), calls it with this TxsdProfileGles2TypeSequenceNewparam instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdProfileGles2TypeSequenceNewparam instance.
func (me *TxsdProfileGles2TypeSequenceNewparam) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileGles2TypeSequenceNewparam; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Tgles2NewparamType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_newparamsequenceprofile_gles2_typeschema_Newparam_TxsdProfileGles2TypeSequenceNewparam_ struct {
	Newparams []*TxsdProfileGles2TypeSequenceNewparam `xml:"http://www.collada.org/2008/03/COLLADASchema newparam"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_newparamsequenceprofile_gles2_typeschema_Newparam_TxsdProfileGles2TypeSequenceNewparam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_newparamsequenceprofile_gles2_typeschema_Newparam_TxsdProfileGles2TypeSequenceNewparam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_newparamsequenceprofile_gles2_typeschema_Newparam_TxsdProfileGles2TypeSequenceNewparam_ instance.
func (me *XsdGoPkgHasElems_newparamsequenceprofile_gles2_typeschema_Newparam_TxsdProfileGles2TypeSequenceNewparam_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_newparamsequenceprofile_gles2_typeschema_Newparam_TxsdProfileGles2TypeSequenceNewparam_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Newparams {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
//	Set up pipeline state and shaders for rendering
//	API state
//	All of the pass state settings for OpenGL ES 2 API
type XsdGoPkgHasAttr_Param_XsdtToken_ struct {
	Param xsdt.Token `xml:"http://www.collada.org/2008/03/COLLADASchema param,attr"`
}

type TxsdGles2PipelineSettingsGroupChoiceStencilMask struct {
	XsdGoPkgHasAttr_Value_TintType_4294967295

	XsdGoPkgHasAttr_Param_XsdtToken_
}

//	If the WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceStencilMask function is not nil (ie. was set by outside code), calls it with this TxsdGles2PipelineSettingsGroupChoiceStencilMask instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGles2PipelineSettingsGroupChoiceStencilMask instance.
func (me *TxsdGles2PipelineSettingsGroupChoiceStencilMask) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceStencilMask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_stencil_maskchoicegles2_pipeline_settings_groupschema_StencilMask_TxsdGles2PipelineSettingsGroupChoiceStencilMask_ struct {
	StencilMask *TxsdGles2PipelineSettingsGroupChoiceStencilMask `xml:"http://www.collada.org/2008/03/COLLADASchema stencil_mask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_stencil_maskchoicegles2_pipeline_settings_groupschema_StencilMask_TxsdGles2PipelineSettingsGroupChoiceStencilMask_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_maskchoicegles2_pipeline_settings_groupschema_StencilMask_TxsdGles2PipelineSettingsGroupChoiceStencilMask_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_maskchoicegles2_pipeline_settings_groupschema_StencilMask_TxsdGles2PipelineSettingsGroupChoiceStencilMask_ instance.
func (me *XsdGoPkgHasElem_stencil_maskchoicegles2_pipeline_settings_groupschema_StencilMask_TxsdGles2PipelineSettingsGroupChoiceStencilMask_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_stencil_maskchoicegles2_pipeline_settings_groupschema_StencilMask_TxsdGles2PipelineSettingsGroupChoiceStencilMask_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StencilMask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGles2PipelineSettingsGroupChoiceBlendEquation struct {
	XsdGoPkgHasAttr_Value_TglBlendEquationEnum_FuncAdd

	XsdGoPkgHasAttr_Param_XsdtToken_
}

//	If the WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceBlendEquation function is not nil (ie. was set by outside code), calls it with this TxsdGles2PipelineSettingsGroupChoiceBlendEquation instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGles2PipelineSettingsGroupChoiceBlendEquation instance.
func (me *TxsdGles2PipelineSettingsGroupChoiceBlendEquation) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceBlendEquation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_blend_equationchoicegles2_pipeline_settings_groupschema_BlendEquation_TxsdGles2PipelineSettingsGroupChoiceBlendEquation_ struct {
	BlendEquation *TxsdGles2PipelineSettingsGroupChoiceBlendEquation `xml:"http://www.collada.org/2008/03/COLLADASchema blend_equation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_blend_equationchoicegles2_pipeline_settings_groupschema_BlendEquation_TxsdGles2PipelineSettingsGroupChoiceBlendEquation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_blend_equationchoicegles2_pipeline_settings_groupschema_BlendEquation_TxsdGles2PipelineSettingsGroupChoiceBlendEquation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_blend_equationchoicegles2_pipeline_settings_groupschema_BlendEquation_TxsdGles2PipelineSettingsGroupChoiceBlendEquation_ instance.
func (me *XsdGoPkgHasElem_blend_equationchoicegles2_pipeline_settings_groupschema_BlendEquation_TxsdGles2PipelineSettingsGroupChoiceBlendEquation_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_blend_equationchoicegles2_pipeline_settings_groupschema_BlendEquation_TxsdGles2PipelineSettingsGroupChoiceBlendEquation_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BlendEquation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGles2PipelineSettingsGroupChoiceLineWidth struct {
	XsdGoPkgHasAttr_Param_XsdtToken_

	XsdGoPkgHasAttr_Value_TfloatType_1
}

//	If the WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceLineWidth function is not nil (ie. was set by outside code), calls it with this TxsdGles2PipelineSettingsGroupChoiceLineWidth instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGles2PipelineSettingsGroupChoiceLineWidth instance.
func (me *TxsdGles2PipelineSettingsGroupChoiceLineWidth) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceLineWidth; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_line_widthchoicegles2_pipeline_settings_groupschema_LineWidth_TxsdGles2PipelineSettingsGroupChoiceLineWidth_ struct {
	LineWidth *TxsdGles2PipelineSettingsGroupChoiceLineWidth `xml:"http://www.collada.org/2008/03/COLLADASchema line_width"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_line_widthchoicegles2_pipeline_settings_groupschema_LineWidth_TxsdGles2PipelineSettingsGroupChoiceLineWidth_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_line_widthchoicegles2_pipeline_settings_groupschema_LineWidth_TxsdGles2PipelineSettingsGroupChoiceLineWidth_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_line_widthchoicegles2_pipeline_settings_groupschema_LineWidth_TxsdGles2PipelineSettingsGroupChoiceLineWidth_ instance.
func (me *XsdGoPkgHasElem_line_widthchoicegles2_pipeline_settings_groupschema_LineWidth_TxsdGles2PipelineSettingsGroupChoiceLineWidth_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_line_widthchoicegles2_pipeline_settings_groupschema_LineWidth_TxsdGles2PipelineSettingsGroupChoiceLineWidth_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LineWidth.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGles2PipelineSettingsGroupChoiceBlendColor struct {
	XsdGoPkgHasAttr_Param_XsdtToken_

	XsdGoPkgHasAttr_Value_Tfloat4Type_0000
}

//	If the WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceBlendColor function is not nil (ie. was set by outside code), calls it with this TxsdGles2PipelineSettingsGroupChoiceBlendColor instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGles2PipelineSettingsGroupChoiceBlendColor instance.
func (me *TxsdGles2PipelineSettingsGroupChoiceBlendColor) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceBlendColor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_blend_colorchoicegles2_pipeline_settings_groupschema_BlendColor_TxsdGles2PipelineSettingsGroupChoiceBlendColor_ struct {
	BlendColor *TxsdGles2PipelineSettingsGroupChoiceBlendColor `xml:"http://www.collada.org/2008/03/COLLADASchema blend_color"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_blend_colorchoicegles2_pipeline_settings_groupschema_BlendColor_TxsdGles2PipelineSettingsGroupChoiceBlendColor_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_blend_colorchoicegles2_pipeline_settings_groupschema_BlendColor_TxsdGles2PipelineSettingsGroupChoiceBlendColor_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_blend_colorchoicegles2_pipeline_settings_groupschema_BlendColor_TxsdGles2PipelineSettingsGroupChoiceBlendColor_ instance.
func (me *XsdGoPkgHasElem_blend_colorchoicegles2_pipeline_settings_groupschema_BlendColor_TxsdGles2PipelineSettingsGroupChoiceBlendColor_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_blend_colorchoicegles2_pipeline_settings_groupschema_BlendColor_TxsdGles2PipelineSettingsGroupChoiceBlendColor_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BlendColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceZfail struct {
	XsdGoPkgHasAttr_Param_XsdtToken_

	XsdGoPkgHasAttr_Value_TglStencilOpEnum_Keep
}

//	If the WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceZfail function is not nil (ie. was set by outside code), calls it with this TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceZfail instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceZfail instance.
func (me *TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceZfail) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceZfail; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_zfailsequencestencil_opchoicegles2_pipeline_settings_groupschema_Zfail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceZfail_ struct {
	Zfail *TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceZfail `xml:"http://www.collada.org/2008/03/COLLADASchema zfail"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_zfailsequencestencil_opchoicegles2_pipeline_settings_groupschema_Zfail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceZfail_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_zfailsequencestencil_opchoicegles2_pipeline_settings_groupschema_Zfail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceZfail_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_zfailsequencestencil_opchoicegles2_pipeline_settings_groupschema_Zfail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceZfail_ instance.
func (me *XsdGoPkgHasElem_zfailsequencestencil_opchoicegles2_pipeline_settings_groupschema_Zfail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceZfail_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_zfailsequencestencil_opchoicegles2_pipeline_settings_groupschema_Zfail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceZfail_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Zfail.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_zpasssequencestencil_opchoicegles2_pipeline_settings_groupschema_Zpass_TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceZpass_ struct {
	Zpass *TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceZfail `xml:"http://www.collada.org/2008/03/COLLADASchema zpass"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_zpasssequencestencil_opchoicegles2_pipeline_settings_groupschema_Zpass_TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceZpass_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_zpasssequencestencil_opchoicegles2_pipeline_settings_groupschema_Zpass_TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceZpass_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_zpasssequencestencil_opchoicegles2_pipeline_settings_groupschema_Zpass_TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceZpass_ instance.
func (me *XsdGoPkgHasElem_zpasssequencestencil_opchoicegles2_pipeline_settings_groupschema_Zpass_TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceZpass_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_zpasssequencestencil_opchoicegles2_pipeline_settings_groupschema_Zpass_TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceZpass_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Zpass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_failsequencestencil_opchoicegles2_pipeline_settings_groupschema_Fail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceFail_ struct {
	Fail *TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceZfail `xml:"http://www.collada.org/2008/03/COLLADASchema fail"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_failsequencestencil_opchoicegles2_pipeline_settings_groupschema_Fail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceFail_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_failsequencestencil_opchoicegles2_pipeline_settings_groupschema_Fail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceFail_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_failsequencestencil_opchoicegles2_pipeline_settings_groupschema_Fail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceFail_ instance.
func (me *XsdGoPkgHasElem_failsequencestencil_opchoicegles2_pipeline_settings_groupschema_Fail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceFail_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_failsequencestencil_opchoicegles2_pipeline_settings_groupschema_Fail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceFail_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Fail.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGles2PipelineSettingsGroupChoiceStencilOp struct {
	XsdGoPkgHasElem_zfailsequencestencil_opchoicegles2_pipeline_settings_groupschema_Zfail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceZfail_

	XsdGoPkgHasElem_zpasssequencestencil_opchoicegles2_pipeline_settings_groupschema_Zpass_TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceZpass_

	XsdGoPkgHasElem_failsequencestencil_opchoicegles2_pipeline_settings_groupschema_Fail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceFail_
}

//	If the WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceStencilOp function is not nil (ie. was set by outside code), calls it with this TxsdGles2PipelineSettingsGroupChoiceStencilOp instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdGles2PipelineSettingsGroupChoiceStencilOp instance.
func (me *TxsdGles2PipelineSettingsGroupChoiceStencilOp) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceStencilOp; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_zfailsequencestencil_opchoicegles2_pipeline_settings_groupschema_Zfail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceZfail_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_zpasssequencestencil_opchoicegles2_pipeline_settings_groupschema_Zpass_TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceZpass_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_failsequencestencil_opchoicegles2_pipeline_settings_groupschema_Fail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceFail_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_stencil_opchoicegles2_pipeline_settings_groupschema_StencilOp_TxsdGles2PipelineSettingsGroupChoiceStencilOp_ struct {
	StencilOp *TxsdGles2PipelineSettingsGroupChoiceStencilOp `xml:"http://www.collada.org/2008/03/COLLADASchema stencil_op"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_stencil_opchoicegles2_pipeline_settings_groupschema_StencilOp_TxsdGles2PipelineSettingsGroupChoiceStencilOp_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_opchoicegles2_pipeline_settings_groupschema_StencilOp_TxsdGles2PipelineSettingsGroupChoiceStencilOp_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_opchoicegles2_pipeline_settings_groupschema_StencilOp_TxsdGles2PipelineSettingsGroupChoiceStencilOp_ instance.
func (me *XsdGoPkgHasElem_stencil_opchoicegles2_pipeline_settings_groupschema_StencilOp_TxsdGles2PipelineSettingsGroupChoiceStencilOp_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_stencil_opchoicegles2_pipeline_settings_groupschema_StencilOp_TxsdGles2PipelineSettingsGroupChoiceStencilOp_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StencilOp.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGles2PipelineSettingsGroupChoiceStencilTestEnable struct {
	XsdGoPkgHasAttr_Value_XsdtBoolean_False

	XsdGoPkgHasAttr_Param_XsdtToken_
}

//	If the WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceStencilTestEnable function is not nil (ie. was set by outside code), calls it with this TxsdGles2PipelineSettingsGroupChoiceStencilTestEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGles2PipelineSettingsGroupChoiceStencilTestEnable instance.
func (me *TxsdGles2PipelineSettingsGroupChoiceStencilTestEnable) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceStencilTestEnable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_stencil_test_enablechoicegles2_pipeline_settings_groupschema_StencilTestEnable_TxsdGles2PipelineSettingsGroupChoiceStencilTestEnable_ struct {
	StencilTestEnable *TxsdGles2PipelineSettingsGroupChoiceStencilTestEnable `xml:"http://www.collada.org/2008/03/COLLADASchema stencil_test_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_stencil_test_enablechoicegles2_pipeline_settings_groupschema_StencilTestEnable_TxsdGles2PipelineSettingsGroupChoiceStencilTestEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_test_enablechoicegles2_pipeline_settings_groupschema_StencilTestEnable_TxsdGles2PipelineSettingsGroupChoiceStencilTestEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_test_enablechoicegles2_pipeline_settings_groupschema_StencilTestEnable_TxsdGles2PipelineSettingsGroupChoiceStencilTestEnable_ instance.
func (me *XsdGoPkgHasElem_stencil_test_enablechoicegles2_pipeline_settings_groupschema_StencilTestEnable_TxsdGles2PipelineSettingsGroupChoiceStencilTestEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_stencil_test_enablechoicegles2_pipeline_settings_groupschema_StencilTestEnable_TxsdGles2PipelineSettingsGroupChoiceStencilTestEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StencilTestEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_sample_coverage_enablechoicegles2_pipeline_settings_groupschema_SampleCoverageEnable_TxsdGles2PipelineSettingsGroupChoiceSampleCoverageEnable_ struct {
	SampleCoverageEnable *TxsdGles2PipelineSettingsGroupChoiceStencilTestEnable `xml:"http://www.collada.org/2008/03/COLLADASchema sample_coverage_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sample_coverage_enablechoicegles2_pipeline_settings_groupschema_SampleCoverageEnable_TxsdGles2PipelineSettingsGroupChoiceSampleCoverageEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sample_coverage_enablechoicegles2_pipeline_settings_groupschema_SampleCoverageEnable_TxsdGles2PipelineSettingsGroupChoiceSampleCoverageEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sample_coverage_enablechoicegles2_pipeline_settings_groupschema_SampleCoverageEnable_TxsdGles2PipelineSettingsGroupChoiceSampleCoverageEnable_ instance.
func (me *XsdGoPkgHasElem_sample_coverage_enablechoicegles2_pipeline_settings_groupschema_SampleCoverageEnable_TxsdGles2PipelineSettingsGroupChoiceSampleCoverageEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sample_coverage_enablechoicegles2_pipeline_settings_groupschema_SampleCoverageEnable_TxsdGles2PipelineSettingsGroupChoiceSampleCoverageEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SampleCoverageEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_cull_face_enablechoicegles2_pipeline_settings_groupschema_CullFaceEnable_TxsdGles2PipelineSettingsGroupChoiceCullFaceEnable_ struct {
	CullFaceEnable *TxsdGles2PipelineSettingsGroupChoiceStencilTestEnable `xml:"http://www.collada.org/2008/03/COLLADASchema cull_face_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_cull_face_enablechoicegles2_pipeline_settings_groupschema_CullFaceEnable_TxsdGles2PipelineSettingsGroupChoiceCullFaceEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_cull_face_enablechoicegles2_pipeline_settings_groupschema_CullFaceEnable_TxsdGles2PipelineSettingsGroupChoiceCullFaceEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_cull_face_enablechoicegles2_pipeline_settings_groupschema_CullFaceEnable_TxsdGles2PipelineSettingsGroupChoiceCullFaceEnable_ instance.
func (me *XsdGoPkgHasElem_cull_face_enablechoicegles2_pipeline_settings_groupschema_CullFaceEnable_TxsdGles2PipelineSettingsGroupChoiceCullFaceEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_cull_face_enablechoicegles2_pipeline_settings_groupschema_CullFaceEnable_TxsdGles2PipelineSettingsGroupChoiceCullFaceEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CullFaceEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGles2PipelineSettingsGroupChoiceFrontFace struct {
	XsdGoPkgHasAttr_Value_TglFrontFaceEnum_Ccw

	XsdGoPkgHasAttr_Param_XsdtToken_
}

//	If the WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceFrontFace function is not nil (ie. was set by outside code), calls it with this TxsdGles2PipelineSettingsGroupChoiceFrontFace instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGles2PipelineSettingsGroupChoiceFrontFace instance.
func (me *TxsdGles2PipelineSettingsGroupChoiceFrontFace) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceFrontFace; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_front_facechoicegles2_pipeline_settings_groupschema_FrontFace_TxsdGles2PipelineSettingsGroupChoiceFrontFace_ struct {
	FrontFace *TxsdGles2PipelineSettingsGroupChoiceFrontFace `xml:"http://www.collada.org/2008/03/COLLADASchema front_face"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_front_facechoicegles2_pipeline_settings_groupschema_FrontFace_TxsdGles2PipelineSettingsGroupChoiceFrontFace_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_front_facechoicegles2_pipeline_settings_groupschema_FrontFace_TxsdGles2PipelineSettingsGroupChoiceFrontFace_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_front_facechoicegles2_pipeline_settings_groupschema_FrontFace_TxsdGles2PipelineSettingsGroupChoiceFrontFace_ instance.
func (me *XsdGoPkgHasElem_front_facechoicegles2_pipeline_settings_groupschema_FrontFace_TxsdGles2PipelineSettingsGroupChoiceFrontFace_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_front_facechoicegles2_pipeline_settings_groupschema_FrontFace_TxsdGles2PipelineSettingsGroupChoiceFrontFace_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FrontFace.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles2_pipeline_settings_groupschema_PolygonOffsetFillEnable_TxsdGles2PipelineSettingsGroupChoicePolygonOffsetFillEnable_ struct {
	PolygonOffsetFillEnable *TxsdGles2PipelineSettingsGroupChoiceStencilTestEnable `xml:"http://www.collada.org/2008/03/COLLADASchema polygon_offset_fill_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles2_pipeline_settings_groupschema_PolygonOffsetFillEnable_TxsdGles2PipelineSettingsGroupChoicePolygonOffsetFillEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles2_pipeline_settings_groupschema_PolygonOffsetFillEnable_TxsdGles2PipelineSettingsGroupChoicePolygonOffsetFillEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles2_pipeline_settings_groupschema_PolygonOffsetFillEnable_TxsdGles2PipelineSettingsGroupChoicePolygonOffsetFillEnable_ instance.
func (me *XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles2_pipeline_settings_groupschema_PolygonOffsetFillEnable_TxsdGles2PipelineSettingsGroupChoicePolygonOffsetFillEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles2_pipeline_settings_groupschema_PolygonOffsetFillEnable_TxsdGles2PipelineSettingsGroupChoicePolygonOffsetFillEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PolygonOffsetFillEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestAlpha struct {
	XsdGoPkgHasAttr_Param_XsdtToken_

	XsdGoPkgHasAttr_Value_TglBlendEnum_Zero
}

//	If the WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestAlpha function is not nil (ie. was set by outside code), calls it with this TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestAlpha instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestAlpha instance.
func (me *TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestAlpha) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestAlpha; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_DestAlpha_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestAlpha_ struct {
	DestAlpha *TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestAlpha `xml:"http://www.collada.org/2008/03/COLLADASchema dest_alpha"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_DestAlpha_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestAlpha_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_DestAlpha_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestAlpha_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_DestAlpha_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestAlpha_ instance.
func (me *XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_DestAlpha_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestAlpha_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_DestAlpha_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestAlpha_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DestAlpha.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_DestRgb_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestRgb_ struct {
	DestRgb *TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestAlpha `xml:"http://www.collada.org/2008/03/COLLADASchema dest_rgb"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_DestRgb_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestRgb_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_DestRgb_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestRgb_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_DestRgb_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestRgb_ instance.
func (me *XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_DestRgb_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestRgb_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_DestRgb_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestRgb_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DestRgb.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcAlpha struct {
	XsdGoPkgHasAttr_Param_XsdtToken_

	XsdGoPkgHasAttr_Value_TglBlendEnum_One
}

//	If the WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcAlpha function is not nil (ie. was set by outside code), calls it with this TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcAlpha instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcAlpha instance.
func (me *TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcAlpha) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcAlpha; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_SrcAlpha_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcAlpha_ struct {
	SrcAlpha *TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcAlpha `xml:"http://www.collada.org/2008/03/COLLADASchema src_alpha"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_SrcAlpha_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcAlpha_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_SrcAlpha_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcAlpha_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_SrcAlpha_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcAlpha_ instance.
func (me *XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_SrcAlpha_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcAlpha_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_SrcAlpha_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcAlpha_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SrcAlpha.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_SrcRgb_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcRgb_ struct {
	SrcRgb *TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcAlpha `xml:"http://www.collada.org/2008/03/COLLADASchema src_rgb"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_SrcRgb_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcRgb_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_SrcRgb_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcRgb_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_SrcRgb_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcRgb_ instance.
func (me *XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_SrcRgb_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcRgb_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_SrcRgb_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcRgb_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SrcRgb.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparate struct {
	XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_DestAlpha_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestAlpha_

	XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_DestRgb_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestRgb_

	XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_SrcAlpha_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcAlpha_

	XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_SrcRgb_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcRgb_
}

//	If the WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparate function is not nil (ie. was set by outside code), calls it with this TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparate instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparate instance.
func (me *TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparate) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_DestAlpha_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestAlpha_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_DestRgb_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestRgb_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_SrcAlpha_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcAlpha_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_SrcRgb_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcRgb_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_blend_func_separatechoicegles2_pipeline_settings_groupschema_BlendFuncSeparate_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparate_ struct {
	BlendFuncSeparate *TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparate `xml:"http://www.collada.org/2008/03/COLLADASchema blend_func_separate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_blend_func_separatechoicegles2_pipeline_settings_groupschema_BlendFuncSeparate_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparate_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_blend_func_separatechoicegles2_pipeline_settings_groupschema_BlendFuncSeparate_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparate_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_blend_func_separatechoicegles2_pipeline_settings_groupschema_BlendFuncSeparate_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparate_ instance.
func (me *XsdGoPkgHasElem_blend_func_separatechoicegles2_pipeline_settings_groupschema_BlendFuncSeparate_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparate_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_blend_func_separatechoicegles2_pipeline_settings_groupschema_BlendFuncSeparate_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparate_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BlendFuncSeparate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_point_sizechoicegles2_pipeline_settings_groupschema_PointSize_TxsdGles2PipelineSettingsGroupChoicePointSize_ struct {
	PointSize *TxsdGles2PipelineSettingsGroupChoiceLineWidth `xml:"http://www.collada.org/2008/03/COLLADASchema point_size"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_point_sizechoicegles2_pipeline_settings_groupschema_PointSize_TxsdGles2PipelineSettingsGroupChoicePointSize_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_sizechoicegles2_pipeline_settings_groupschema_PointSize_TxsdGles2PipelineSettingsGroupChoicePointSize_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_sizechoicegles2_pipeline_settings_groupschema_PointSize_TxsdGles2PipelineSettingsGroupChoicePointSize_ instance.
func (me *XsdGoPkgHasElem_point_sizechoicegles2_pipeline_settings_groupschema_PointSize_TxsdGles2PipelineSettingsGroupChoicePointSize_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_point_sizechoicegles2_pipeline_settings_groupschema_PointSize_TxsdGles2PipelineSettingsGroupChoicePointSize_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PointSize.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGles2PipelineSettingsGroupChoiceDepthRange struct {
	XsdGoPkgHasAttr_Value_Tfloat2Type_01

	XsdGoPkgHasAttr_Param_XsdtToken_
}

//	If the WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceDepthRange function is not nil (ie. was set by outside code), calls it with this TxsdGles2PipelineSettingsGroupChoiceDepthRange instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGles2PipelineSettingsGroupChoiceDepthRange instance.
func (me *TxsdGles2PipelineSettingsGroupChoiceDepthRange) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceDepthRange; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_depth_rangechoicegles2_pipeline_settings_groupschema_DepthRange_TxsdGles2PipelineSettingsGroupChoiceDepthRange_ struct {
	DepthRange *TxsdGles2PipelineSettingsGroupChoiceDepthRange `xml:"http://www.collada.org/2008/03/COLLADASchema depth_range"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_depth_rangechoicegles2_pipeline_settings_groupschema_DepthRange_TxsdGles2PipelineSettingsGroupChoiceDepthRange_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_rangechoicegles2_pipeline_settings_groupschema_DepthRange_TxsdGles2PipelineSettingsGroupChoiceDepthRange_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_depth_rangechoicegles2_pipeline_settings_groupschema_DepthRange_TxsdGles2PipelineSettingsGroupChoiceDepthRange_ instance.
func (me *XsdGoPkgHasElem_depth_rangechoicegles2_pipeline_settings_groupschema_DepthRange_TxsdGles2PipelineSettingsGroupChoiceDepthRange_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_depth_rangechoicegles2_pipeline_settings_groupschema_DepthRange_TxsdGles2PipelineSettingsGroupChoiceDepthRange_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DepthRange.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceFront struct {
	XsdGoPkgHasAttr_Param_XsdtToken_

	XsdGoPkgHasAttr_Value_TglFuncEnum_Always
}

//	If the WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceFront function is not nil (ie. was set by outside code), calls it with this TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceFront instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceFront instance.
func (me *TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceFront) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceFront; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Front_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceFront_ struct {
	Front *TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceFront `xml:"http://www.collada.org/2008/03/COLLADASchema front"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Front_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceFront_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Front_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceFront_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Front_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceFront_ instance.
func (me *XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Front_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceFront_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Front_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceFront_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Front.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_backsequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Back_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceBack_ struct {
	Back *TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceFront `xml:"http://www.collada.org/2008/03/COLLADASchema back"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_backsequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Back_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceBack_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_backsequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Back_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceBack_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_backsequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Back_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceBack_ instance.
func (me *XsdGoPkgHasElem_backsequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Back_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceBack_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_backsequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Back_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceBack_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Back.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef struct {
	XsdGoPkgHasAttr_Param_XsdtToken_

	XsdGoPkgHasAttr_Value_XsdtUnsignedByte_0
}

//	If the WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef function is not nil (ie. was set by outside code), calls it with this TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef instance.
func (me *TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_refsequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Ref_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef_ struct {
	Ref *TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef `xml:"http://www.collada.org/2008/03/COLLADASchema ref"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_refsequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Ref_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_refsequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Ref_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_refsequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Ref_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef_ instance.
func (me *XsdGoPkgHasElem_refsequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Ref_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_refsequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Ref_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceMask struct {
	XsdGoPkgHasAttr_Param_XsdtToken_

	XsdGoPkgHasAttr_Value_XsdtUnsignedByte_255
}

//	If the WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceMask function is not nil (ie. was set by outside code), calls it with this TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceMask instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceMask instance.
func (me *TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceMask) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceMask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_masksequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Mask_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceMask_ struct {
	Mask *TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceMask `xml:"http://www.collada.org/2008/03/COLLADASchema mask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_masksequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Mask_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceMask_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_masksequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Mask_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceMask_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_masksequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Mask_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceMask_ instance.
func (me *XsdGoPkgHasElem_masksequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Mask_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceMask_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_masksequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Mask_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceMask_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Mask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparate struct {
	XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Front_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceFront_

	XsdGoPkgHasElem_backsequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Back_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceBack_

	XsdGoPkgHasElem_refsequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Ref_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef_

	XsdGoPkgHasElem_masksequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Mask_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceMask_
}

//	If the WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparate function is not nil (ie. was set by outside code), calls it with this TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparate instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparate instance.
func (me *TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparate) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_masksequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Mask_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceMask_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Front_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceFront_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_backsequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Back_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceBack_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_refsequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Ref_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_stencil_func_separatechoicegles2_pipeline_settings_groupschema_StencilFuncSeparate_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparate_ struct {
	StencilFuncSeparate *TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparate `xml:"http://www.collada.org/2008/03/COLLADASchema stencil_func_separate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_stencil_func_separatechoicegles2_pipeline_settings_groupschema_StencilFuncSeparate_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparate_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_func_separatechoicegles2_pipeline_settings_groupschema_StencilFuncSeparate_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparate_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_func_separatechoicegles2_pipeline_settings_groupschema_StencilFuncSeparate_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparate_ instance.
func (me *XsdGoPkgHasElem_stencil_func_separatechoicegles2_pipeline_settings_groupschema_StencilFuncSeparate_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparate_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_stencil_func_separatechoicegles2_pipeline_settings_groupschema_StencilFuncSeparate_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparate_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StencilFuncSeparate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_depth_test_enablechoicegles2_pipeline_settings_groupschema_DepthTestEnable_TxsdGles2PipelineSettingsGroupChoiceDepthTestEnable_ struct {
	DepthTestEnable *TxsdGles2PipelineSettingsGroupChoiceStencilTestEnable `xml:"http://www.collada.org/2008/03/COLLADASchema depth_test_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_depth_test_enablechoicegles2_pipeline_settings_groupschema_DepthTestEnable_TxsdGles2PipelineSettingsGroupChoiceDepthTestEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_test_enablechoicegles2_pipeline_settings_groupschema_DepthTestEnable_TxsdGles2PipelineSettingsGroupChoiceDepthTestEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_depth_test_enablechoicegles2_pipeline_settings_groupschema_DepthTestEnable_TxsdGles2PipelineSettingsGroupChoiceDepthTestEnable_ instance.
func (me *XsdGoPkgHasElem_depth_test_enablechoicegles2_pipeline_settings_groupschema_DepthTestEnable_TxsdGles2PipelineSettingsGroupChoiceDepthTestEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_depth_test_enablechoicegles2_pipeline_settings_groupschema_DepthTestEnable_TxsdGles2PipelineSettingsGroupChoiceDepthTestEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DepthTestEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegles2_pipeline_settings_groupschema_Mask_TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparateSequenceMask_ struct {
	Mask *TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceMask `xml:"http://www.collada.org/2008/03/COLLADASchema mask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegles2_pipeline_settings_groupschema_Mask_TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparateSequenceMask_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegles2_pipeline_settings_groupschema_Mask_TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparateSequenceMask_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegles2_pipeline_settings_groupschema_Mask_TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparateSequenceMask_ instance.
func (me *XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegles2_pipeline_settings_groupschema_Mask_TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparateSequenceMask_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegles2_pipeline_settings_groupschema_Mask_TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparateSequenceMask_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Mask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace struct {
	XsdGoPkgHasAttr_Value_TglFaceEnum_FrontAndBack

	XsdGoPkgHasAttr_Param_XsdtToken_
}

//	If the WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace function is not nil (ie. was set by outside code), calls it with this TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace instance.
func (me *TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegles2_pipeline_settings_groupschema_Face_TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace_ struct {
	Face *TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace `xml:"http://www.collada.org/2008/03/COLLADASchema face"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegles2_pipeline_settings_groupschema_Face_TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegles2_pipeline_settings_groupschema_Face_TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegles2_pipeline_settings_groupschema_Face_TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace_ instance.
func (me *XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegles2_pipeline_settings_groupschema_Face_TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegles2_pipeline_settings_groupschema_Face_TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Face.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparate struct {
	XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegles2_pipeline_settings_groupschema_Mask_TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparateSequenceMask_

	XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegles2_pipeline_settings_groupschema_Face_TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace_
}

//	If the WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparate function is not nil (ie. was set by outside code), calls it with this TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparate instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparate instance.
func (me *TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparate) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegles2_pipeline_settings_groupschema_Face_TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegles2_pipeline_settings_groupschema_Mask_TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparateSequenceMask_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_stencil_mask_separatechoicegles2_pipeline_settings_groupschema_StencilMaskSeparate_TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparate_ struct {
	StencilMaskSeparate *TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparate `xml:"http://www.collada.org/2008/03/COLLADASchema stencil_mask_separate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_stencil_mask_separatechoicegles2_pipeline_settings_groupschema_StencilMaskSeparate_TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparate_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_mask_separatechoicegles2_pipeline_settings_groupschema_StencilMaskSeparate_TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparate_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_mask_separatechoicegles2_pipeline_settings_groupschema_StencilMaskSeparate_TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparate_ instance.
func (me *XsdGoPkgHasElem_stencil_mask_separatechoicegles2_pipeline_settings_groupschema_StencilMaskSeparate_TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparate_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_stencil_mask_separatechoicegles2_pipeline_settings_groupschema_StencilMaskSeparate_TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparate_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StencilMaskSeparate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegles2_pipeline_settings_groupschema_Alpha_TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparateSequenceAlpha_ struct {
	Alpha *TxsdGles2PipelineSettingsGroupChoiceBlendEquation `xml:"http://www.collada.org/2008/03/COLLADASchema alpha"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegles2_pipeline_settings_groupschema_Alpha_TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparateSequenceAlpha_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegles2_pipeline_settings_groupschema_Alpha_TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparateSequenceAlpha_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegles2_pipeline_settings_groupschema_Alpha_TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparateSequenceAlpha_ instance.
func (me *XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegles2_pipeline_settings_groupschema_Alpha_TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparateSequenceAlpha_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegles2_pipeline_settings_groupschema_Alpha_TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparateSequenceAlpha_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Alpha.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegles2_pipeline_settings_groupschema_Rgb_TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparateSequenceRgb_ struct {
	Rgb *TxsdGles2PipelineSettingsGroupChoiceBlendEquation `xml:"http://www.collada.org/2008/03/COLLADASchema rgb"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegles2_pipeline_settings_groupschema_Rgb_TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparateSequenceRgb_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegles2_pipeline_settings_groupschema_Rgb_TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparateSequenceRgb_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegles2_pipeline_settings_groupschema_Rgb_TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparateSequenceRgb_ instance.
func (me *XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegles2_pipeline_settings_groupschema_Rgb_TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparateSequenceRgb_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegles2_pipeline_settings_groupschema_Rgb_TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparateSequenceRgb_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Rgb.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparate struct {
	XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegles2_pipeline_settings_groupschema_Alpha_TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparateSequenceAlpha_

	XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegles2_pipeline_settings_groupschema_Rgb_TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparateSequenceRgb_
}

//	If the WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparate function is not nil (ie. was set by outside code), calls it with this TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparate instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparate instance.
func (me *TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparate) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegles2_pipeline_settings_groupschema_Alpha_TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparateSequenceAlpha_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegles2_pipeline_settings_groupschema_Rgb_TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparateSequenceRgb_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_blend_equation_separatechoicegles2_pipeline_settings_groupschema_BlendEquationSeparate_TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparate_ struct {
	BlendEquationSeparate *TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparate `xml:"http://www.collada.org/2008/03/COLLADASchema blend_equation_separate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_blend_equation_separatechoicegles2_pipeline_settings_groupschema_BlendEquationSeparate_TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparate_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_blend_equation_separatechoicegles2_pipeline_settings_groupschema_BlendEquationSeparate_TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparate_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_blend_equation_separatechoicegles2_pipeline_settings_groupschema_BlendEquationSeparate_TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparate_ instance.
func (me *XsdGoPkgHasElem_blend_equation_separatechoicegles2_pipeline_settings_groupschema_BlendEquationSeparate_TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparate_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_blend_equation_separatechoicegles2_pipeline_settings_groupschema_BlendEquationSeparate_TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparate_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BlendEquationSeparate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGles2PipelineSettingsGroupChoiceDitherEnable struct {
	XsdGoPkgHasAttr_Value_XsdtBoolean_True

	XsdGoPkgHasAttr_Param_XsdtToken_
}

//	If the WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceDitherEnable function is not nil (ie. was set by outside code), calls it with this TxsdGles2PipelineSettingsGroupChoiceDitherEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGles2PipelineSettingsGroupChoiceDitherEnable instance.
func (me *TxsdGles2PipelineSettingsGroupChoiceDitherEnable) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceDitherEnable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_dither_enablechoicegles2_pipeline_settings_groupschema_DitherEnable_TxsdGles2PipelineSettingsGroupChoiceDitherEnable_ struct {
	DitherEnable *TxsdGles2PipelineSettingsGroupChoiceDitherEnable `xml:"http://www.collada.org/2008/03/COLLADASchema dither_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_dither_enablechoicegles2_pipeline_settings_groupschema_DitherEnable_TxsdGles2PipelineSettingsGroupChoiceDitherEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_dither_enablechoicegles2_pipeline_settings_groupschema_DitherEnable_TxsdGles2PipelineSettingsGroupChoiceDitherEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_dither_enablechoicegles2_pipeline_settings_groupschema_DitherEnable_TxsdGles2PipelineSettingsGroupChoiceDitherEnable_ instance.
func (me *XsdGoPkgHasElem_dither_enablechoicegles2_pipeline_settings_groupschema_DitherEnable_TxsdGles2PipelineSettingsGroupChoiceDitherEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_dither_enablechoicegles2_pipeline_settings_groupschema_DitherEnable_TxsdGles2PipelineSettingsGroupChoiceDitherEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DitherEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_blend_enablechoicegles2_pipeline_settings_groupschema_BlendEnable_TxsdGles2PipelineSettingsGroupChoiceBlendEnable_ struct {
	BlendEnable *TxsdGles2PipelineSettingsGroupChoiceStencilTestEnable `xml:"http://www.collada.org/2008/03/COLLADASchema blend_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_blend_enablechoicegles2_pipeline_settings_groupschema_BlendEnable_TxsdGles2PipelineSettingsGroupChoiceBlendEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_blend_enablechoicegles2_pipeline_settings_groupschema_BlendEnable_TxsdGles2PipelineSettingsGroupChoiceBlendEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_blend_enablechoicegles2_pipeline_settings_groupschema_BlendEnable_TxsdGles2PipelineSettingsGroupChoiceBlendEnable_ instance.
func (me *XsdGoPkgHasElem_blend_enablechoicegles2_pipeline_settings_groupschema_BlendEnable_TxsdGles2PipelineSettingsGroupChoiceBlendEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_blend_enablechoicegles2_pipeline_settings_groupschema_BlendEnable_TxsdGles2PipelineSettingsGroupChoiceBlendEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BlendEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGles2PipelineSettingsGroupChoicePolygonOffset struct {
	XsdGoPkgHasAttr_Param_XsdtToken_

	XsdGoPkgHasAttr_Value_Tfloat2Type_00
}

//	If the WalkHandlers.TxsdGles2PipelineSettingsGroupChoicePolygonOffset function is not nil (ie. was set by outside code), calls it with this TxsdGles2PipelineSettingsGroupChoicePolygonOffset instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGles2PipelineSettingsGroupChoicePolygonOffset instance.
func (me *TxsdGles2PipelineSettingsGroupChoicePolygonOffset) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2PipelineSettingsGroupChoicePolygonOffset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_polygon_offsetchoicegles2_pipeline_settings_groupschema_PolygonOffset_TxsdGles2PipelineSettingsGroupChoicePolygonOffset_ struct {
	PolygonOffset *TxsdGles2PipelineSettingsGroupChoicePolygonOffset `xml:"http://www.collada.org/2008/03/COLLADASchema polygon_offset"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_polygon_offsetchoicegles2_pipeline_settings_groupschema_PolygonOffset_TxsdGles2PipelineSettingsGroupChoicePolygonOffset_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_polygon_offsetchoicegles2_pipeline_settings_groupschema_PolygonOffset_TxsdGles2PipelineSettingsGroupChoicePolygonOffset_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_polygon_offsetchoicegles2_pipeline_settings_groupschema_PolygonOffset_TxsdGles2PipelineSettingsGroupChoicePolygonOffset_ instance.
func (me *XsdGoPkgHasElem_polygon_offsetchoicegles2_pipeline_settings_groupschema_PolygonOffset_TxsdGles2PipelineSettingsGroupChoicePolygonOffset_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_polygon_offsetchoicegles2_pipeline_settings_groupschema_PolygonOffset_TxsdGles2PipelineSettingsGroupChoicePolygonOffset_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PolygonOffset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_XsdtFloat_ struct {
	Value xsdt.Float `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

type TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceValue struct {
	XsdGoPkgHasAttr_Param_XsdtToken_

	XsdGoPkgHasAttr_Value_XsdtFloat_
}

//	If the WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceValue function is not nil (ie. was set by outside code), calls it with this TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceValue instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceValue instance.
func (me *TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceValue) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_valuesequencesample_coveragechoicegles2_pipeline_settings_groupschema_Value_TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceValue_ struct {
	Value *TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceValue `xml:"http://www.collada.org/2008/03/COLLADASchema value"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_valuesequencesample_coveragechoicegles2_pipeline_settings_groupschema_Value_TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceValue_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_valuesequencesample_coveragechoicegles2_pipeline_settings_groupschema_Value_TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceValue_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_valuesequencesample_coveragechoicegles2_pipeline_settings_groupschema_Value_TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceValue_ instance.
func (me *XsdGoPkgHasElem_valuesequencesample_coveragechoicegles2_pipeline_settings_groupschema_Value_TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceValue_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_valuesequencesample_coveragechoicegles2_pipeline_settings_groupschema_Value_TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceValue_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Value.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_XsdtBoolean_ struct {
	Value xsdt.Boolean `xml:"http://www.collada.org/2008/03/COLLADASchema value,attr"`
}

type TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceInvert struct {
	XsdGoPkgHasAttr_Param_XsdtToken_

	XsdGoPkgHasAttr_Value_XsdtBoolean_
}

//	If the WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceInvert function is not nil (ie. was set by outside code), calls it with this TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceInvert instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceInvert instance.
func (me *TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceInvert) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceInvert; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_invertsequencesample_coveragechoicegles2_pipeline_settings_groupschema_Invert_TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceInvert_ struct {
	Invert *TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceInvert `xml:"http://www.collada.org/2008/03/COLLADASchema invert"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_invertsequencesample_coveragechoicegles2_pipeline_settings_groupschema_Invert_TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceInvert_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_invertsequencesample_coveragechoicegles2_pipeline_settings_groupschema_Invert_TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceInvert_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_invertsequencesample_coveragechoicegles2_pipeline_settings_groupschema_Invert_TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceInvert_ instance.
func (me *XsdGoPkgHasElem_invertsequencesample_coveragechoicegles2_pipeline_settings_groupschema_Invert_TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceInvert_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_invertsequencesample_coveragechoicegles2_pipeline_settings_groupschema_Invert_TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceInvert_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Invert.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGles2PipelineSettingsGroupChoiceSampleCoverage struct {
	XsdGoPkgHasElem_valuesequencesample_coveragechoicegles2_pipeline_settings_groupschema_Value_TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceValue_

	XsdGoPkgHasElem_invertsequencesample_coveragechoicegles2_pipeline_settings_groupschema_Invert_TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceInvert_
}

//	If the WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceSampleCoverage function is not nil (ie. was set by outside code), calls it with this TxsdGles2PipelineSettingsGroupChoiceSampleCoverage instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGles2PipelineSettingsGroupChoiceSampleCoverage instance.
func (me *TxsdGles2PipelineSettingsGroupChoiceSampleCoverage) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceSampleCoverage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_valuesequencesample_coveragechoicegles2_pipeline_settings_groupschema_Value_TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceValue_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_invertsequencesample_coveragechoicegles2_pipeline_settings_groupschema_Invert_TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceInvert_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_sample_coveragechoicegles2_pipeline_settings_groupschema_SampleCoverage_TxsdGles2PipelineSettingsGroupChoiceSampleCoverage_ struct {
	SampleCoverage *TxsdGles2PipelineSettingsGroupChoiceSampleCoverage `xml:"http://www.collada.org/2008/03/COLLADASchema sample_coverage"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sample_coveragechoicegles2_pipeline_settings_groupschema_SampleCoverage_TxsdGles2PipelineSettingsGroupChoiceSampleCoverage_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sample_coveragechoicegles2_pipeline_settings_groupschema_SampleCoverage_TxsdGles2PipelineSettingsGroupChoiceSampleCoverage_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sample_coveragechoicegles2_pipeline_settings_groupschema_SampleCoverage_TxsdGles2PipelineSettingsGroupChoiceSampleCoverage_ instance.
func (me *XsdGoPkgHasElem_sample_coveragechoicegles2_pipeline_settings_groupschema_SampleCoverage_TxsdGles2PipelineSettingsGroupChoiceSampleCoverage_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sample_coveragechoicegles2_pipeline_settings_groupschema_SampleCoverage_TxsdGles2PipelineSettingsGroupChoiceSampleCoverage_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SampleCoverage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGles2PipelineSettingsGroupChoiceColorMask struct {
	XsdGoPkgHasAttr_Value_Tbool4Type_TrueTrueTrueTrue

	XsdGoPkgHasAttr_Param_XsdtToken_
}

//	If the WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceColorMask function is not nil (ie. was set by outside code), calls it with this TxsdGles2PipelineSettingsGroupChoiceColorMask instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGles2PipelineSettingsGroupChoiceColorMask instance.
func (me *TxsdGles2PipelineSettingsGroupChoiceColorMask) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceColorMask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_color_maskchoicegles2_pipeline_settings_groupschema_ColorMask_TxsdGles2PipelineSettingsGroupChoiceColorMask_ struct {
	ColorMask *TxsdGles2PipelineSettingsGroupChoiceColorMask `xml:"http://www.collada.org/2008/03/COLLADASchema color_mask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_color_maskchoicegles2_pipeline_settings_groupschema_ColorMask_TxsdGles2PipelineSettingsGroupChoiceColorMask_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_color_maskchoicegles2_pipeline_settings_groupschema_ColorMask_TxsdGles2PipelineSettingsGroupChoiceColorMask_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_color_maskchoicegles2_pipeline_settings_groupschema_ColorMask_TxsdGles2PipelineSettingsGroupChoiceColorMask_ instance.
func (me *XsdGoPkgHasElem_color_maskchoicegles2_pipeline_settings_groupschema_ColorMask_TxsdGles2PipelineSettingsGroupChoiceColorMask_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_color_maskchoicegles2_pipeline_settings_groupschema_ColorMask_TxsdGles2PipelineSettingsGroupChoiceColorMask_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ColorMask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGles2PipelineSettingsGroupChoiceCullFace struct {
	XsdGoPkgHasAttr_Param_XsdtToken_

	XsdGoPkgHasAttr_Value_TglFaceEnum_Back
}

//	If the WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceCullFace function is not nil (ie. was set by outside code), calls it with this TxsdGles2PipelineSettingsGroupChoiceCullFace instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGles2PipelineSettingsGroupChoiceCullFace instance.
func (me *TxsdGles2PipelineSettingsGroupChoiceCullFace) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceCullFace; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_cull_facechoicegles2_pipeline_settings_groupschema_CullFace_TxsdGles2PipelineSettingsGroupChoiceCullFace_ struct {
	CullFace *TxsdGles2PipelineSettingsGroupChoiceCullFace `xml:"http://www.collada.org/2008/03/COLLADASchema cull_face"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_cull_facechoicegles2_pipeline_settings_groupschema_CullFace_TxsdGles2PipelineSettingsGroupChoiceCullFace_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_cull_facechoicegles2_pipeline_settings_groupschema_CullFace_TxsdGles2PipelineSettingsGroupChoiceCullFace_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_cull_facechoicegles2_pipeline_settings_groupschema_CullFace_TxsdGles2PipelineSettingsGroupChoiceCullFace_ instance.
func (me *XsdGoPkgHasElem_cull_facechoicegles2_pipeline_settings_groupschema_CullFace_TxsdGles2PipelineSettingsGroupChoiceCullFace_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_cull_facechoicegles2_pipeline_settings_groupschema_CullFace_TxsdGles2PipelineSettingsGroupChoiceCullFace_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CullFace.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_srcsequenceblend_funcchoicegles2_pipeline_settings_groupschema_Src_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSequenceSrc_ struct {
	Src *TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcAlpha `xml:"http://www.collada.org/2008/03/COLLADASchema src"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_srcsequenceblend_funcchoicegles2_pipeline_settings_groupschema_Src_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSequenceSrc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_srcsequenceblend_funcchoicegles2_pipeline_settings_groupschema_Src_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSequenceSrc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_srcsequenceblend_funcchoicegles2_pipeline_settings_groupschema_Src_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSequenceSrc_ instance.
func (me *XsdGoPkgHasElem_srcsequenceblend_funcchoicegles2_pipeline_settings_groupschema_Src_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSequenceSrc_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_srcsequenceblend_funcchoicegles2_pipeline_settings_groupschema_Src_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSequenceSrc_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Src.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_destsequenceblend_funcchoicegles2_pipeline_settings_groupschema_Dest_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSequenceDest_ struct {
	Dest *TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestAlpha `xml:"http://www.collada.org/2008/03/COLLADASchema dest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_destsequenceblend_funcchoicegles2_pipeline_settings_groupschema_Dest_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSequenceDest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_destsequenceblend_funcchoicegles2_pipeline_settings_groupschema_Dest_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSequenceDest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_destsequenceblend_funcchoicegles2_pipeline_settings_groupschema_Dest_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSequenceDest_ instance.
func (me *XsdGoPkgHasElem_destsequenceblend_funcchoicegles2_pipeline_settings_groupschema_Dest_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSequenceDest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_destsequenceblend_funcchoicegles2_pipeline_settings_groupschema_Dest_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSequenceDest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Dest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGles2PipelineSettingsGroupChoiceBlendFunc struct {
	XsdGoPkgHasElem_destsequenceblend_funcchoicegles2_pipeline_settings_groupschema_Dest_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSequenceDest_

	XsdGoPkgHasElem_srcsequenceblend_funcchoicegles2_pipeline_settings_groupschema_Src_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSequenceSrc_
}

//	If the WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceBlendFunc function is not nil (ie. was set by outside code), calls it with this TxsdGles2PipelineSettingsGroupChoiceBlendFunc instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGles2PipelineSettingsGroupChoiceBlendFunc instance.
func (me *TxsdGles2PipelineSettingsGroupChoiceBlendFunc) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceBlendFunc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_srcsequenceblend_funcchoicegles2_pipeline_settings_groupschema_Src_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSequenceSrc_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_destsequenceblend_funcchoicegles2_pipeline_settings_groupschema_Dest_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSequenceDest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_blend_funcchoicegles2_pipeline_settings_groupschema_BlendFunc_TxsdGles2PipelineSettingsGroupChoiceBlendFunc_ struct {
	BlendFunc *TxsdGles2PipelineSettingsGroupChoiceBlendFunc `xml:"http://www.collada.org/2008/03/COLLADASchema blend_func"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_blend_funcchoicegles2_pipeline_settings_groupschema_BlendFunc_TxsdGles2PipelineSettingsGroupChoiceBlendFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_blend_funcchoicegles2_pipeline_settings_groupschema_BlendFunc_TxsdGles2PipelineSettingsGroupChoiceBlendFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_blend_funcchoicegles2_pipeline_settings_groupschema_BlendFunc_TxsdGles2PipelineSettingsGroupChoiceBlendFunc_ instance.
func (me *XsdGoPkgHasElem_blend_funcchoicegles2_pipeline_settings_groupschema_BlendFunc_TxsdGles2PipelineSettingsGroupChoiceBlendFunc_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_blend_funcchoicegles2_pipeline_settings_groupschema_BlendFunc_TxsdGles2PipelineSettingsGroupChoiceBlendFunc_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BlendFunc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_depth_maskchoicegles2_pipeline_settings_groupschema_DepthMask_TxsdGles2PipelineSettingsGroupChoiceDepthMask_ struct {
	DepthMask *TxsdGles2PipelineSettingsGroupChoiceDitherEnable `xml:"http://www.collada.org/2008/03/COLLADASchema depth_mask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_depth_maskchoicegles2_pipeline_settings_groupschema_DepthMask_TxsdGles2PipelineSettingsGroupChoiceDepthMask_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_maskchoicegles2_pipeline_settings_groupschema_DepthMask_TxsdGles2PipelineSettingsGroupChoiceDepthMask_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_depth_maskchoicegles2_pipeline_settings_groupschema_DepthMask_TxsdGles2PipelineSettingsGroupChoiceDepthMask_ instance.
func (me *XsdGoPkgHasElem_depth_maskchoicegles2_pipeline_settings_groupschema_DepthMask_TxsdGles2PipelineSettingsGroupChoiceDepthMask_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_depth_maskchoicegles2_pipeline_settings_groupschema_DepthMask_TxsdGles2PipelineSettingsGroupChoiceDepthMask_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DepthMask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles2_pipeline_settings_groupschema_SampleAlphaToCoverageEnable_TxsdGles2PipelineSettingsGroupChoiceSampleAlphaToCoverageEnable_ struct {
	SampleAlphaToCoverageEnable *TxsdGles2PipelineSettingsGroupChoiceStencilTestEnable `xml:"http://www.collada.org/2008/03/COLLADASchema sample_alpha_to_coverage_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles2_pipeline_settings_groupschema_SampleAlphaToCoverageEnable_TxsdGles2PipelineSettingsGroupChoiceSampleAlphaToCoverageEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles2_pipeline_settings_groupschema_SampleAlphaToCoverageEnable_TxsdGles2PipelineSettingsGroupChoiceSampleAlphaToCoverageEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles2_pipeline_settings_groupschema_SampleAlphaToCoverageEnable_TxsdGles2PipelineSettingsGroupChoiceSampleAlphaToCoverageEnable_ instance.
func (me *XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles2_pipeline_settings_groupschema_SampleAlphaToCoverageEnable_TxsdGles2PipelineSettingsGroupChoiceSampleAlphaToCoverageEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles2_pipeline_settings_groupschema_SampleAlphaToCoverageEnable_TxsdGles2PipelineSettingsGroupChoiceSampleAlphaToCoverageEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SampleAlphaToCoverageEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGles2PipelineSettingsGroupChoiceScissor struct {
	XsdGoPkgHasAttr_Value_Tint4Type_

	XsdGoPkgHasAttr_Param_XsdtToken_
}

//	If the WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceScissor function is not nil (ie. was set by outside code), calls it with this TxsdGles2PipelineSettingsGroupChoiceScissor instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGles2PipelineSettingsGroupChoiceScissor instance.
func (me *TxsdGles2PipelineSettingsGroupChoiceScissor) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceScissor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_scissorchoicegles2_pipeline_settings_groupschema_Scissor_TxsdGles2PipelineSettingsGroupChoiceScissor_ struct {
	Scissor *TxsdGles2PipelineSettingsGroupChoiceScissor `xml:"http://www.collada.org/2008/03/COLLADASchema scissor"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_scissorchoicegles2_pipeline_settings_groupschema_Scissor_TxsdGles2PipelineSettingsGroupChoiceScissor_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_scissorchoicegles2_pipeline_settings_groupschema_Scissor_TxsdGles2PipelineSettingsGroupChoiceScissor_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_scissorchoicegles2_pipeline_settings_groupschema_Scissor_TxsdGles2PipelineSettingsGroupChoiceScissor_ instance.
func (me *XsdGoPkgHasElem_scissorchoicegles2_pipeline_settings_groupschema_Scissor_TxsdGles2PipelineSettingsGroupChoiceScissor_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_scissorchoicegles2_pipeline_settings_groupschema_Scissor_TxsdGles2PipelineSettingsGroupChoiceScissor_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Scissor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_funcsequencestencil_funcchoicegles2_pipeline_settings_groupschema_Func_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSequenceFunc_ struct {
	Func *TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceFront `xml:"http://www.collada.org/2008/03/COLLADASchema func"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_funcsequencestencil_funcchoicegles2_pipeline_settings_groupschema_Func_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSequenceFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_funcsequencestencil_funcchoicegles2_pipeline_settings_groupschema_Func_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSequenceFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_funcsequencestencil_funcchoicegles2_pipeline_settings_groupschema_Func_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSequenceFunc_ instance.
func (me *XsdGoPkgHasElem_funcsequencestencil_funcchoicegles2_pipeline_settings_groupschema_Func_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSequenceFunc_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_funcsequencestencil_funcchoicegles2_pipeline_settings_groupschema_Func_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSequenceFunc_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Func.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_masksequencestencil_funcchoicegles2_pipeline_settings_groupschema_Mask_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSequenceMask_ struct {
	Mask *TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceMask `xml:"http://www.collada.org/2008/03/COLLADASchema mask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_masksequencestencil_funcchoicegles2_pipeline_settings_groupschema_Mask_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSequenceMask_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_masksequencestencil_funcchoicegles2_pipeline_settings_groupschema_Mask_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSequenceMask_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_masksequencestencil_funcchoicegles2_pipeline_settings_groupschema_Mask_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSequenceMask_ instance.
func (me *XsdGoPkgHasElem_masksequencestencil_funcchoicegles2_pipeline_settings_groupschema_Mask_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSequenceMask_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_masksequencestencil_funcchoicegles2_pipeline_settings_groupschema_Mask_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSequenceMask_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Mask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_refsequencestencil_funcchoicegles2_pipeline_settings_groupschema_Ref_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSequenceRef_ struct {
	Ref *TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef `xml:"http://www.collada.org/2008/03/COLLADASchema ref"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_refsequencestencil_funcchoicegles2_pipeline_settings_groupschema_Ref_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSequenceRef_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_refsequencestencil_funcchoicegles2_pipeline_settings_groupschema_Ref_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSequenceRef_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_refsequencestencil_funcchoicegles2_pipeline_settings_groupschema_Ref_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSequenceRef_ instance.
func (me *XsdGoPkgHasElem_refsequencestencil_funcchoicegles2_pipeline_settings_groupschema_Ref_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSequenceRef_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_refsequencestencil_funcchoicegles2_pipeline_settings_groupschema_Ref_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSequenceRef_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGles2PipelineSettingsGroupChoiceStencilFunc struct {
	XsdGoPkgHasElem_masksequencestencil_funcchoicegles2_pipeline_settings_groupschema_Mask_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSequenceMask_

	XsdGoPkgHasElem_refsequencestencil_funcchoicegles2_pipeline_settings_groupschema_Ref_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSequenceRef_

	XsdGoPkgHasElem_funcsequencestencil_funcchoicegles2_pipeline_settings_groupschema_Func_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSequenceFunc_
}

//	If the WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceStencilFunc function is not nil (ie. was set by outside code), calls it with this TxsdGles2PipelineSettingsGroupChoiceStencilFunc instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdGles2PipelineSettingsGroupChoiceStencilFunc instance.
func (me *TxsdGles2PipelineSettingsGroupChoiceStencilFunc) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceStencilFunc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_refsequencestencil_funcchoicegles2_pipeline_settings_groupschema_Ref_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSequenceRef_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_funcsequencestencil_funcchoicegles2_pipeline_settings_groupschema_Func_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSequenceFunc_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_masksequencestencil_funcchoicegles2_pipeline_settings_groupschema_Mask_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSequenceMask_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_stencil_funcchoicegles2_pipeline_settings_groupschema_StencilFunc_TxsdGles2PipelineSettingsGroupChoiceStencilFunc_ struct {
	StencilFunc *TxsdGles2PipelineSettingsGroupChoiceStencilFunc `xml:"http://www.collada.org/2008/03/COLLADASchema stencil_func"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_stencil_funcchoicegles2_pipeline_settings_groupschema_StencilFunc_TxsdGles2PipelineSettingsGroupChoiceStencilFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_funcchoicegles2_pipeline_settings_groupschema_StencilFunc_TxsdGles2PipelineSettingsGroupChoiceStencilFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_funcchoicegles2_pipeline_settings_groupschema_StencilFunc_TxsdGles2PipelineSettingsGroupChoiceStencilFunc_ instance.
func (me *XsdGoPkgHasElem_stencil_funcchoicegles2_pipeline_settings_groupschema_StencilFunc_TxsdGles2PipelineSettingsGroupChoiceStencilFunc_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_stencil_funcchoicegles2_pipeline_settings_groupschema_StencilFunc_TxsdGles2PipelineSettingsGroupChoiceStencilFunc_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StencilFunc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_scissor_test_enablechoicegles2_pipeline_settings_groupschema_ScissorTestEnable_TxsdGles2PipelineSettingsGroupChoiceScissorTestEnable_ struct {
	ScissorTestEnable *TxsdGles2PipelineSettingsGroupChoiceStencilTestEnable `xml:"http://www.collada.org/2008/03/COLLADASchema scissor_test_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_scissor_test_enablechoicegles2_pipeline_settings_groupschema_ScissorTestEnable_TxsdGles2PipelineSettingsGroupChoiceScissorTestEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_scissor_test_enablechoicegles2_pipeline_settings_groupschema_ScissorTestEnable_TxsdGles2PipelineSettingsGroupChoiceScissorTestEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_scissor_test_enablechoicegles2_pipeline_settings_groupschema_ScissorTestEnable_TxsdGles2PipelineSettingsGroupChoiceScissorTestEnable_ instance.
func (me *XsdGoPkgHasElem_scissor_test_enablechoicegles2_pipeline_settings_groupschema_ScissorTestEnable_TxsdGles2PipelineSettingsGroupChoiceScissorTestEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_scissor_test_enablechoicegles2_pipeline_settings_groupschema_ScissorTestEnable_TxsdGles2PipelineSettingsGroupChoiceScissorTestEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ScissorTestEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_depth_funcchoicegles2_pipeline_settings_groupschema_DepthFunc_TxsdGles2PipelineSettingsGroupChoiceDepthFunc_ struct {
	DepthFunc *TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceFront `xml:"http://www.collada.org/2008/03/COLLADASchema depth_func"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_depth_funcchoicegles2_pipeline_settings_groupschema_DepthFunc_TxsdGles2PipelineSettingsGroupChoiceDepthFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_funcchoicegles2_pipeline_settings_groupschema_DepthFunc_TxsdGles2PipelineSettingsGroupChoiceDepthFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_depth_funcchoicegles2_pipeline_settings_groupschema_DepthFunc_TxsdGles2PipelineSettingsGroupChoiceDepthFunc_ instance.
func (me *XsdGoPkgHasElem_depth_funcchoicegles2_pipeline_settings_groupschema_DepthFunc_TxsdGles2PipelineSettingsGroupChoiceDepthFunc_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_depth_funcchoicegles2_pipeline_settings_groupschema_DepthFunc_TxsdGles2PipelineSettingsGroupChoiceDepthFunc_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DepthFunc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_point_size_enablechoicegles2_pipeline_settings_groupschema_PointSizeEnable_TxsdGles2PipelineSettingsGroupChoicePointSizeEnable_ struct {
	PointSizeEnable *TxsdGles2PipelineSettingsGroupChoiceStencilTestEnable `xml:"http://www.collada.org/2008/03/COLLADASchema point_size_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_point_size_enablechoicegles2_pipeline_settings_groupschema_PointSizeEnable_TxsdGles2PipelineSettingsGroupChoicePointSizeEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_size_enablechoicegles2_pipeline_settings_groupschema_PointSizeEnable_TxsdGles2PipelineSettingsGroupChoicePointSizeEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_size_enablechoicegles2_pipeline_settings_groupschema_PointSizeEnable_TxsdGles2PipelineSettingsGroupChoicePointSizeEnable_ instance.
func (me *XsdGoPkgHasElem_point_size_enablechoicegles2_pipeline_settings_groupschema_PointSizeEnable_TxsdGles2PipelineSettingsGroupChoicePointSizeEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_point_size_enablechoicegles2_pipeline_settings_groupschema_PointSizeEnable_TxsdGles2PipelineSettingsGroupChoicePointSizeEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PointSizeEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_failsequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Fail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceFail_ struct {
	Fail *TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceZfail `xml:"http://www.collada.org/2008/03/COLLADASchema fail"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_failsequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Fail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceFail_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_failsequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Fail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceFail_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_failsequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Fail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceFail_ instance.
func (me *XsdGoPkgHasElem_failsequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Fail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceFail_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_failsequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Fail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceFail_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Fail.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Zfail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceZfail_ struct {
	Zfail *TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceZfail `xml:"http://www.collada.org/2008/03/COLLADASchema zfail"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Zfail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceZfail_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Zfail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceZfail_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Zfail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceZfail_ instance.
func (me *XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Zfail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceZfail_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Zfail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceZfail_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Zfail.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Zpass_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceZpass_ struct {
	Zpass *TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceZfail `xml:"http://www.collada.org/2008/03/COLLADASchema zpass"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Zpass_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceZpass_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Zpass_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceZpass_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Zpass_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceZpass_ instance.
func (me *XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Zpass_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceZpass_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Zpass_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceZpass_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Zpass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_facesequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Face_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceFace_ struct {
	Face *TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace `xml:"http://www.collada.org/2008/03/COLLADASchema face"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_facesequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Face_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceFace_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_facesequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Face_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceFace_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_facesequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Face_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceFace_ instance.
func (me *XsdGoPkgHasElem_facesequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Face_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceFace_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_facesequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Face_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceFace_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Face.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparate struct {
	XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Zpass_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceZpass_

	XsdGoPkgHasElem_facesequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Face_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceFace_

	XsdGoPkgHasElem_failsequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Fail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceFail_

	XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Zfail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceZfail_
}

//	If the WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparate function is not nil (ie. was set by outside code), calls it with this TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparate instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparate instance.
func (me *TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparate) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Zfail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceZfail_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Zpass_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceZpass_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_facesequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Face_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceFace_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_failsequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Fail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceFail_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_stencil_op_separatechoicegles2_pipeline_settings_groupschema_StencilOpSeparate_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparate_ struct {
	StencilOpSeparate *TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparate `xml:"http://www.collada.org/2008/03/COLLADASchema stencil_op_separate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_stencil_op_separatechoicegles2_pipeline_settings_groupschema_StencilOpSeparate_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparate_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_op_separatechoicegles2_pipeline_settings_groupschema_StencilOpSeparate_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparate_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_op_separatechoicegles2_pipeline_settings_groupschema_StencilOpSeparate_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparate_ instance.
func (me *XsdGoPkgHasElem_stencil_op_separatechoicegles2_pipeline_settings_groupschema_StencilOpSeparate_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparate_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_stencil_op_separatechoicegles2_pipeline_settings_groupschema_StencilOpSeparate_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparate_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StencilOpSeparate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasGroup_Gles2PipelineSettingsGroup struct {
	XsdGoPkgHasElem_blend_colorchoicegles2_pipeline_settings_groupschema_BlendColor_TxsdGles2PipelineSettingsGroupChoiceBlendColor_

	XsdGoPkgHasElem_stencil_opchoicegles2_pipeline_settings_groupschema_StencilOp_TxsdGles2PipelineSettingsGroupChoiceStencilOp_

	XsdGoPkgHasElem_stencil_test_enablechoicegles2_pipeline_settings_groupschema_StencilTestEnable_TxsdGles2PipelineSettingsGroupChoiceStencilTestEnable_

	XsdGoPkgHasElem_sample_coverage_enablechoicegles2_pipeline_settings_groupschema_SampleCoverageEnable_TxsdGles2PipelineSettingsGroupChoiceSampleCoverageEnable_

	XsdGoPkgHasElem_cull_face_enablechoicegles2_pipeline_settings_groupschema_CullFaceEnable_TxsdGles2PipelineSettingsGroupChoiceCullFaceEnable_

	XsdGoPkgHasElem_front_facechoicegles2_pipeline_settings_groupschema_FrontFace_TxsdGles2PipelineSettingsGroupChoiceFrontFace_

	XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles2_pipeline_settings_groupschema_PolygonOffsetFillEnable_TxsdGles2PipelineSettingsGroupChoicePolygonOffsetFillEnable_

	XsdGoPkgHasElem_blend_func_separatechoicegles2_pipeline_settings_groupschema_BlendFuncSeparate_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparate_

	XsdGoPkgHasElem_point_sizechoicegles2_pipeline_settings_groupschema_PointSize_TxsdGles2PipelineSettingsGroupChoicePointSize_

	XsdGoPkgHasElem_depth_rangechoicegles2_pipeline_settings_groupschema_DepthRange_TxsdGles2PipelineSettingsGroupChoiceDepthRange_

	XsdGoPkgHasElem_stencil_func_separatechoicegles2_pipeline_settings_groupschema_StencilFuncSeparate_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparate_

	XsdGoPkgHasElem_depth_test_enablechoicegles2_pipeline_settings_groupschema_DepthTestEnable_TxsdGles2PipelineSettingsGroupChoiceDepthTestEnable_

	XsdGoPkgHasElem_stencil_mask_separatechoicegles2_pipeline_settings_groupschema_StencilMaskSeparate_TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparate_

	XsdGoPkgHasElem_blend_equation_separatechoicegles2_pipeline_settings_groupschema_BlendEquationSeparate_TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparate_

	XsdGoPkgHasElem_dither_enablechoicegles2_pipeline_settings_groupschema_DitherEnable_TxsdGles2PipelineSettingsGroupChoiceDitherEnable_

	XsdGoPkgHasElem_blend_enablechoicegles2_pipeline_settings_groupschema_BlendEnable_TxsdGles2PipelineSettingsGroupChoiceBlendEnable_

	XsdGoPkgHasElem_polygon_offsetchoicegles2_pipeline_settings_groupschema_PolygonOffset_TxsdGles2PipelineSettingsGroupChoicePolygonOffset_

	XsdGoPkgHasElem_sample_coveragechoicegles2_pipeline_settings_groupschema_SampleCoverage_TxsdGles2PipelineSettingsGroupChoiceSampleCoverage_

	XsdGoPkgHasElem_color_maskchoicegles2_pipeline_settings_groupschema_ColorMask_TxsdGles2PipelineSettingsGroupChoiceColorMask_

	XsdGoPkgHasElem_cull_facechoicegles2_pipeline_settings_groupschema_CullFace_TxsdGles2PipelineSettingsGroupChoiceCullFace_

	XsdGoPkgHasElem_blend_funcchoicegles2_pipeline_settings_groupschema_BlendFunc_TxsdGles2PipelineSettingsGroupChoiceBlendFunc_

	XsdGoPkgHasElem_depth_maskchoicegles2_pipeline_settings_groupschema_DepthMask_TxsdGles2PipelineSettingsGroupChoiceDepthMask_

	XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles2_pipeline_settings_groupschema_SampleAlphaToCoverageEnable_TxsdGles2PipelineSettingsGroupChoiceSampleAlphaToCoverageEnable_

	XsdGoPkgHasElem_scissorchoicegles2_pipeline_settings_groupschema_Scissor_TxsdGles2PipelineSettingsGroupChoiceScissor_

	XsdGoPkgHasElem_stencil_funcchoicegles2_pipeline_settings_groupschema_StencilFunc_TxsdGles2PipelineSettingsGroupChoiceStencilFunc_

	XsdGoPkgHasElem_scissor_test_enablechoicegles2_pipeline_settings_groupschema_ScissorTestEnable_TxsdGles2PipelineSettingsGroupChoiceScissorTestEnable_

	XsdGoPkgHasElem_depth_funcchoicegles2_pipeline_settings_groupschema_DepthFunc_TxsdGles2PipelineSettingsGroupChoiceDepthFunc_

	XsdGoPkgHasElem_point_size_enablechoicegles2_pipeline_settings_groupschema_PointSizeEnable_TxsdGles2PipelineSettingsGroupChoicePointSizeEnable_

	XsdGoPkgHasElem_stencil_op_separatechoicegles2_pipeline_settings_groupschema_StencilOpSeparate_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparate_

	XsdGoPkgHasElem_stencil_maskchoicegles2_pipeline_settings_groupschema_StencilMask_TxsdGles2PipelineSettingsGroupChoiceStencilMask_

	XsdGoPkgHasElem_blend_equationchoicegles2_pipeline_settings_groupschema_BlendEquation_TxsdGles2PipelineSettingsGroupChoiceBlendEquation_

	XsdGoPkgHasElem_line_widthchoicegles2_pipeline_settings_groupschema_LineWidth_TxsdGles2PipelineSettingsGroupChoiceLineWidth_
}

//	If the WalkHandlers.XsdGoPkgHasGroup_Gles2PipelineSettingsGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_Gles2PipelineSettingsGroup instance as the single argument. Then calls the Walk() method on 32/32 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_Gles2PipelineSettingsGroup instance.
func (me *XsdGoPkgHasGroup_Gles2PipelineSettingsGroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasGroup_Gles2PipelineSettingsGroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_point_sizechoicegles2_pipeline_settings_groupschema_PointSize_TxsdGles2PipelineSettingsGroupChoicePointSize_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_depth_rangechoicegles2_pipeline_settings_groupschema_DepthRange_TxsdGles2PipelineSettingsGroupChoiceDepthRange_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stencil_func_separatechoicegles2_pipeline_settings_groupschema_StencilFuncSeparate_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparate_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_depth_test_enablechoicegles2_pipeline_settings_groupschema_DepthTestEnable_TxsdGles2PipelineSettingsGroupChoiceDepthTestEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stencil_mask_separatechoicegles2_pipeline_settings_groupschema_StencilMaskSeparate_TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparate_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_blend_equation_separatechoicegles2_pipeline_settings_groupschema_BlendEquationSeparate_TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparate_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_dither_enablechoicegles2_pipeline_settings_groupschema_DitherEnable_TxsdGles2PipelineSettingsGroupChoiceDitherEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_blend_enablechoicegles2_pipeline_settings_groupschema_BlendEnable_TxsdGles2PipelineSettingsGroupChoiceBlendEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_polygon_offsetchoicegles2_pipeline_settings_groupschema_PolygonOffset_TxsdGles2PipelineSettingsGroupChoicePolygonOffset_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sample_coveragechoicegles2_pipeline_settings_groupschema_SampleCoverage_TxsdGles2PipelineSettingsGroupChoiceSampleCoverage_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_color_maskchoicegles2_pipeline_settings_groupschema_ColorMask_TxsdGles2PipelineSettingsGroupChoiceColorMask_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_cull_facechoicegles2_pipeline_settings_groupschema_CullFace_TxsdGles2PipelineSettingsGroupChoiceCullFace_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_blend_funcchoicegles2_pipeline_settings_groupschema_BlendFunc_TxsdGles2PipelineSettingsGroupChoiceBlendFunc_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_depth_maskchoicegles2_pipeline_settings_groupschema_DepthMask_TxsdGles2PipelineSettingsGroupChoiceDepthMask_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles2_pipeline_settings_groupschema_SampleAlphaToCoverageEnable_TxsdGles2PipelineSettingsGroupChoiceSampleAlphaToCoverageEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_scissorchoicegles2_pipeline_settings_groupschema_Scissor_TxsdGles2PipelineSettingsGroupChoiceScissor_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stencil_funcchoicegles2_pipeline_settings_groupschema_StencilFunc_TxsdGles2PipelineSettingsGroupChoiceStencilFunc_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_scissor_test_enablechoicegles2_pipeline_settings_groupschema_ScissorTestEnable_TxsdGles2PipelineSettingsGroupChoiceScissorTestEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_depth_funcchoicegles2_pipeline_settings_groupschema_DepthFunc_TxsdGles2PipelineSettingsGroupChoiceDepthFunc_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_point_size_enablechoicegles2_pipeline_settings_groupschema_PointSizeEnable_TxsdGles2PipelineSettingsGroupChoicePointSizeEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stencil_op_separatechoicegles2_pipeline_settings_groupschema_StencilOpSeparate_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparate_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stencil_maskchoicegles2_pipeline_settings_groupschema_StencilMask_TxsdGles2PipelineSettingsGroupChoiceStencilMask_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_blend_equationchoicegles2_pipeline_settings_groupschema_BlendEquation_TxsdGles2PipelineSettingsGroupChoiceBlendEquation_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_line_widthchoicegles2_pipeline_settings_groupschema_LineWidth_TxsdGles2PipelineSettingsGroupChoiceLineWidth_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_blend_colorchoicegles2_pipeline_settings_groupschema_BlendColor_TxsdGles2PipelineSettingsGroupChoiceBlendColor_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stencil_opchoicegles2_pipeline_settings_groupschema_StencilOp_TxsdGles2PipelineSettingsGroupChoiceStencilOp_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stencil_test_enablechoicegles2_pipeline_settings_groupschema_StencilTestEnable_TxsdGles2PipelineSettingsGroupChoiceStencilTestEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sample_coverage_enablechoicegles2_pipeline_settings_groupschema_SampleCoverageEnable_TxsdGles2PipelineSettingsGroupChoiceSampleCoverageEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_cull_face_enablechoicegles2_pipeline_settings_groupschema_CullFaceEnable_TxsdGles2PipelineSettingsGroupChoiceCullFaceEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_front_facechoicegles2_pipeline_settings_groupschema_FrontFace_TxsdGles2PipelineSettingsGroupChoiceFrontFace_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles2_pipeline_settings_groupschema_PolygonOffsetFillEnable_TxsdGles2PipelineSettingsGroupChoicePolygonOffsetFillEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_blend_func_separatechoicegles2_pipeline_settings_groupschema_BlendFuncSeparate_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparate_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGles2PassTypeSequenceStates struct {
	XsdGoPkgHasGroup_Gles2PipelineSettingsGroup
}

//	If the WalkHandlers.TxsdGles2PassTypeSequenceStates function is not nil (ie. was set by outside code), calls it with this TxsdGles2PassTypeSequenceStates instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdGles2PassTypeSequenceStates instance.
func (me *TxsdGles2PassTypeSequenceStates) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2PassTypeSequenceStates; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasGroup_Gles2PipelineSettingsGroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_statessequencegles2_pass_typeschema_States_TxsdGles2PassTypeSequenceStates_ struct {
	//	API state
	States *TxsdGles2PassTypeSequenceStates `xml:"http://www.collada.org/2008/03/COLLADASchema states"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_statessequencegles2_pass_typeschema_States_TxsdGles2PassTypeSequenceStates_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_statessequencegles2_pass_typeschema_States_TxsdGles2PassTypeSequenceStates_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_statessequencegles2_pass_typeschema_States_TxsdGles2PassTypeSequenceStates_ instance.
func (me *XsdGoPkgHasElem_statessequencegles2_pass_typeschema_States_TxsdGles2PassTypeSequenceStates_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_statessequencegles2_pass_typeschema_States_TxsdGles2PassTypeSequenceStates_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.States.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	runtime execution helpers
type TxsdGles2PassTypeSequenceEvaluate struct {
	//	Identify that this pass is intended to render it's depthinto a surface parameter
	XsdGoPkgHasElems_depth_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_DepthTarget_TfxDepthtargetType_

	//	The indexed color render target is supposed to be cleared to this color
	XsdGoPkgHasElems_color_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_ColorClear_TfxClearcolorType_

	//	Identify that this pass is intended to render it's stencil bits into a surface parameter
	XsdGoPkgHasElems_stencil_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_StencilTarget_TfxStenciltargetType_

	//	Identify what type of goemetry should be drawn durring this pass.  See comments in fx_draw_common for a list of common strings.
	XsdGoPkgHasElem_drawsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_Draw_TfxDrawType_

	//	The indexed depth render target is supposed to be cleared to this color
	XsdGoPkgHasElems_depth_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_DepthClear_TfxCleardepthType_

	//	The indexed stencil bits render target is supposed to be cleared to this color
	XsdGoPkgHasElems_stencil_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_StencilClear_TfxClearstencilType_

	//	Identify that this pass is intended to render it's colors into a surface parameter
	XsdGoPkgHasElems_color_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_ColorTarget_TfxColortargetType_
}

//	If the WalkHandlers.TxsdGles2PassTypeSequenceEvaluate function is not nil (ie. was set by outside code), calls it with this TxsdGles2PassTypeSequenceEvaluate instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TxsdGles2PassTypeSequenceEvaluate instance.
func (me *TxsdGles2PassTypeSequenceEvaluate) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2PassTypeSequenceEvaluate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_depth_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_DepthTarget_TfxDepthtargetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_color_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_ColorClear_TfxClearcolorType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_stencil_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_StencilTarget_TfxStenciltargetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_drawsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_Draw_TfxDrawType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_depth_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_DepthClear_TfxCleardepthType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_stencil_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_StencilClear_TfxClearstencilType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_color_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_ColorTarget_TfxColortargetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_evaluatesequencegles2_pass_typeschema_Evaluate_TxsdGles2PassTypeSequenceEvaluate_ struct {
	//	runtime execution helpers
	Evaluate *TxsdGles2PassTypeSequenceEvaluate `xml:"http://www.collada.org/2008/03/COLLADASchema evaluate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_evaluatesequencegles2_pass_typeschema_Evaluate_TxsdGles2PassTypeSequenceEvaluate_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_evaluatesequencegles2_pass_typeschema_Evaluate_TxsdGles2PassTypeSequenceEvaluate_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_evaluatesequencegles2_pass_typeschema_Evaluate_TxsdGles2PassTypeSequenceEvaluate_ instance.
func (me *XsdGoPkgHasElem_evaluatesequencegles2_pass_typeschema_Evaluate_TxsdGles2PassTypeSequenceEvaluate_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_evaluatesequencegles2_pass_typeschema_Evaluate_TxsdGles2PassTypeSequenceEvaluate_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Evaluate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A vertex_shader and fragment_shader are linked together to produce a OpenGL ES 2 program.
//	a program is one or more shaders linked together
//	Bind uniforms and samplers
//	Bind uniforms to parameters
type XsdGoPkgHasElem_paramchoicebind_uniformsequencegles2_program_typeschema_Param_TxsdGles2ProgramTypeSequenceBindUniformChoiceParam_ struct {
	//	Bind uniforms to parameters
	Param *TxsdGlslProgramTypeSequenceBindUniformChoiceParam `xml:"http://www.collada.org/2008/03/COLLADASchema param"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_paramchoicebind_uniformsequencegles2_program_typeschema_Param_TxsdGles2ProgramTypeSequenceBindUniformChoiceParam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_paramchoicebind_uniformsequencegles2_program_typeschema_Param_TxsdGles2ProgramTypeSequenceBindUniformChoiceParam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_paramchoicebind_uniformsequencegles2_program_typeschema_Param_TxsdGles2ProgramTypeSequenceBindUniformChoiceParam_ instance.
func (me *XsdGoPkgHasElem_paramchoicebind_uniformsequencegles2_program_typeschema_Param_TxsdGles2ProgramTypeSequenceBindUniformChoiceParam_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_paramchoicebind_uniformsequencegles2_program_typeschema_Param_TxsdGles2ProgramTypeSequenceBindUniformChoiceParam_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Param.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGles2ProgramTypeSequenceBindUniform struct {
	//	Bind uniforms to parameters
	XsdGoPkgHasElem_paramchoicebind_uniformsequencegles2_program_typeschema_Param_TxsdGles2ProgramTypeSequenceBindUniformChoiceParam_

	//	shader variable name
	XsdGoPkgHasAttr_Symbol_XsdtToken_

	XsdGoPkgHasGroup_Gles2ValueGroup
}

//	If the WalkHandlers.TxsdGles2ProgramTypeSequenceBindUniform function is not nil (ie. was set by outside code), calls it with this TxsdGles2ProgramTypeSequenceBindUniform instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TxsdGles2ProgramTypeSequenceBindUniform instance.
func (me *TxsdGles2ProgramTypeSequenceBindUniform) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2ProgramTypeSequenceBindUniform; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasGroup_Gles2ValueGroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_paramchoicebind_uniformsequencegles2_program_typeschema_Param_TxsdGles2ProgramTypeSequenceBindUniformChoiceParam_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_bind_uniformsequencegles2_program_typeschema_BindUniform_TxsdGles2ProgramTypeSequenceBindUniform_ struct {
	//	Bind uniforms and samplers
	BindUniforms []*TxsdGles2ProgramTypeSequenceBindUniform `xml:"http://www.collada.org/2008/03/COLLADASchema bind_uniform"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_bind_uniformsequencegles2_program_typeschema_BindUniform_TxsdGles2ProgramTypeSequenceBindUniform_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_bind_uniformsequencegles2_program_typeschema_BindUniform_TxsdGles2ProgramTypeSequenceBindUniform_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_bind_uniformsequencegles2_program_typeschema_BindUniform_TxsdGles2ProgramTypeSequenceBindUniform_ instance.
func (me *XsdGoPkgHasElems_bind_uniformsequencegles2_program_typeschema_BindUniform_TxsdGles2ProgramTypeSequenceBindUniform_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_bind_uniformsequencegles2_program_typeschema_BindUniform_TxsdGles2ProgramTypeSequenceBindUniform_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BindUniforms {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Bind attributes.  If not bound then it is assumed to be the same semantic as the variable name.  If the variable name is prefixed with "gl_" or "sv_" then the prefix may be ignored.
type TxsdGles2ProgramTypeSequenceBindAttribute struct {
	//	Bind attributes to semantics to enable semantic association to attributes that are not redeclared as parameters.  Without this, the semantic is the same as the attribute's name.
	XsdGoPkgHasElem_semanticchoicebind_attributesequenceglsl_program_typeschema_Semantic_XsdtToken_

	//	shader variable name
	XsdGoPkgHasAttr_Symbol_XsdtToken_
}

//	If the WalkHandlers.TxsdGles2ProgramTypeSequenceBindAttribute function is not nil (ie. was set by outside code), calls it with this TxsdGles2ProgramTypeSequenceBindAttribute instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TxsdGles2ProgramTypeSequenceBindAttribute instance.
func (me *TxsdGles2ProgramTypeSequenceBindAttribute) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2ProgramTypeSequenceBindAttribute; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_semanticchoicebind_attributesequenceglsl_program_typeschema_Semantic_XsdtToken_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_bind_attributesequencegles2_program_typeschema_BindAttribute_TxsdGles2ProgramTypeSequenceBindAttribute_ struct {
	//	Bind attributes.  If not bound then it is assumed to be the same semantic as the variable name.  If the variable name is prefixed with "gl_" or "sv_" then the prefix may be ignored.
	BindAttributes []*TxsdGles2ProgramTypeSequenceBindAttribute `xml:"http://www.collada.org/2008/03/COLLADASchema bind_attribute"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_bind_attributesequencegles2_program_typeschema_BindAttribute_TxsdGles2ProgramTypeSequenceBindAttribute_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_bind_attributesequencegles2_program_typeschema_BindAttribute_TxsdGles2ProgramTypeSequenceBindAttribute_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_bind_attributesequencegles2_program_typeschema_BindAttribute_TxsdGles2ProgramTypeSequenceBindAttribute_ instance.
func (me *XsdGoPkgHasElems_bind_attributesequencegles2_program_typeschema_BindAttribute_TxsdGles2ProgramTypeSequenceBindAttribute_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_bind_attributesequencegles2_program_typeschema_BindAttribute_TxsdGles2ProgramTypeSequenceBindAttribute_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BindAttributes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	compile shader stages
//	Identify code fragments and bind their parameters to effect parameters to identify how their values will be filled in
//	sid of the code or include element which provides the source for this shader.  Code may come from local or library_code.
//	Not used by GLSL.  Some languages require functional entry points.  GLSL always uses "main".  CG requires an entry point
type XsdGoPkgHasAttr_Entry_XsdtToken_Main struct {
	//	Not used by GLSL.  Some languages require functional entry points.  GLSL always uses "main".  CG requires an entry point
	Entry xsdt.Token `xml:"http://www.collada.org/2008/03/COLLADASchema entry,attr"`
}

//	Returns the default value for Entry -- "main"
func (me XsdGoPkgHasAttr_Entry_XsdtToken_Main) EntryDefault() xsdt.Token { return xsdt.Token("main") }

type TxsdGles2ShaderTypeSequenceSources struct {
	//	Not used by GLSL.  Some languages require functional entry points.  GLSL always uses "main".  CG requires an entry point
	XsdGoPkgHasAttr_Entry_XsdtToken_Main

	TfxSourcesType
}

//	If the WalkHandlers.TxsdGles2ShaderTypeSequenceSources function is not nil (ie. was set by outside code), calls it with this TxsdGles2ShaderTypeSequenceSources instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TxsdGles2ShaderTypeSequenceSources instance.
func (me *TxsdGles2ShaderTypeSequenceSources) Walk() (err error) {
	if fn := WalkHandlers.TxsdGles2ShaderTypeSequenceSources; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TfxSourcesType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_sourcessequencegles2_shader_typeschema_Sources_TxsdGles2ShaderTypeSequenceSources_ struct {
	//	sid of the code or include element which provides the source for this shader.  Code may come from local or library_code.
	Sources *TxsdGles2ShaderTypeSequenceSources `xml:"http://www.collada.org/2008/03/COLLADASchema sources"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sourcessequencegles2_shader_typeschema_Sources_TxsdGles2ShaderTypeSequenceSources_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sourcessequencegles2_shader_typeschema_Sources_TxsdGles2ShaderTypeSequenceSources_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sourcessequencegles2_shader_typeschema_Sources_TxsdGles2ShaderTypeSequenceSources_ instance.
func (me *XsdGoPkgHasElem_sourcessequencegles2_shader_typeschema_Sources_TxsdGles2ShaderTypeSequenceSources_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sourcessequencegles2_shader_typeschema_Sources_TxsdGles2ShaderTypeSequenceSources_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Sources.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tgles2ShaderType struct {
	//	Not used by GLSL.  This identifies a very specific binary target format for such things as a specific generation of GPU.  Ex. NV4x
	XsdGoPkgHasElems_compilersequenceshadersequenceprogramsequencecg_pass_typeschema_Compiler_TfxTargetType_

	//	sid of the code or include element which provides the source for this shader.  Code may come from local or library_code.
	XsdGoPkgHasElem_sourcessequencegles2_shader_typeschema_Sources_TxsdGles2ShaderTypeSequenceSources_

	//	GPU Pipeline stage for this programmable shader. Current standards are VERTEX (vertex shader), FRAGMENT (pixel or fragment shader).  These are recognized by both GLSL and CG
	XsdGoPkgHasAttr_Stage_TfxPipelineStageEnum_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_
}

//	If the WalkHandlers.Tgles2ShaderType function is not nil (ie. was set by outside code), calls it with this Tgles2ShaderType instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this Tgles2ShaderType instance.
func (me *Tgles2ShaderType) Walk() (err error) {
	if fn := WalkHandlers.Tgles2ShaderType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_compilersequenceshadersequenceprogramsequencecg_pass_typeschema_Compiler_TfxTargetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sourcessequencegles2_shader_typeschema_Sources_TxsdGles2ShaderTypeSequenceSources_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_shadersequencegles2_program_typeschema_Shader_Tgles2ShaderType_ struct {
	//	compile shader stages
	Shaders []*Tgles2ShaderType `xml:"http://www.collada.org/2008/03/COLLADASchema shader"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_shadersequencegles2_program_typeschema_Shader_Tgles2ShaderType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_shadersequencegles2_program_typeschema_Shader_Tgles2ShaderType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_shadersequencegles2_program_typeschema_Shader_Tgles2ShaderType_ instance.
func (me *XsdGoPkgHasElems_shadersequencegles2_program_typeschema_Shader_Tgles2ShaderType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_shadersequencegles2_program_typeschema_Shader_Tgles2ShaderType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Shaders {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	link shaders into program
type XsdGoPkgHasElems_linkersequencegles2_program_typeschema_Linker_TfxTargetType_ struct {
	//	link shaders into program
	Linkers []*TfxTargetType `xml:"http://www.collada.org/2008/03/COLLADASchema linker"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_linkersequencegles2_program_typeschema_Linker_TfxTargetType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_linkersequencegles2_program_typeschema_Linker_TfxTargetType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_linkersequencegles2_program_typeschema_Linker_TfxTargetType_ instance.
func (me *XsdGoPkgHasElems_linkersequencegles2_program_typeschema_Linker_TfxTargetType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_linkersequencegles2_program_typeschema_Linker_TfxTargetType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Linkers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tgles2ProgramType struct {
	//	compile shader stages
	XsdGoPkgHasElems_shadersequencegles2_program_typeschema_Shader_Tgles2ShaderType_

	//	link shaders into program
	XsdGoPkgHasElems_linkersequencegles2_program_typeschema_Linker_TfxTargetType_

	//	Bind uniforms and samplers
	XsdGoPkgHasElems_bind_uniformsequencegles2_program_typeschema_BindUniform_TxsdGles2ProgramTypeSequenceBindUniform_

	//	Bind attributes.  If not bound then it is assumed to be the same semantic as the variable name.  If the variable name is prefixed with "gl_" or "sv_" then the prefix may be ignored.
	XsdGoPkgHasElems_bind_attributesequencegles2_program_typeschema_BindAttribute_TxsdGles2ProgramTypeSequenceBindAttribute_
}

//	If the WalkHandlers.Tgles2ProgramType function is not nil (ie. was set by outside code), calls it with this Tgles2ProgramType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this Tgles2ProgramType instance.
func (me *Tgles2ProgramType) Walk() (err error) {
	if fn := WalkHandlers.Tgles2ProgramType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_bind_uniformsequencegles2_program_typeschema_BindUniform_TxsdGles2ProgramTypeSequenceBindUniform_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_bind_attributesequencegles2_program_typeschema_BindAttribute_TxsdGles2ProgramTypeSequenceBindAttribute_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_shadersequencegles2_program_typeschema_Shader_Tgles2ShaderType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_linkersequencegles2_program_typeschema_Linker_TfxTargetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_programsequencegles2_pass_typeschema_Program_Tgles2ProgramType_ struct {
	//	A vertex_shader and fragment_shader are linked together to produce a OpenGL ES 2 program.
	Program *Tgles2ProgramType `xml:"http://www.collada.org/2008/03/COLLADASchema program"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_programsequencegles2_pass_typeschema_Program_Tgles2ProgramType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_programsequencegles2_pass_typeschema_Program_Tgles2ProgramType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_programsequencegles2_pass_typeschema_Program_Tgles2ProgramType_ instance.
func (me *XsdGoPkgHasElem_programsequencegles2_pass_typeschema_Program_Tgles2ProgramType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_programsequencegles2_pass_typeschema_Program_Tgles2ProgramType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Program.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tgles2PassType struct {
	//	A vertex_shader and fragment_shader are linked together to produce a OpenGL ES 2 program.
	XsdGoPkgHasElem_programsequencegles2_pass_typeschema_Program_Tgles2ProgramType_

	//	Add metadata to this pass that may be used by games or tools to make decisions
	XsdGoPkgHasElems_annotatesequenceglsl_newparam_typeschema_Annotate_TfxAnnotateType_

	//	API state
	XsdGoPkgHasElem_statessequencegles2_pass_typeschema_States_TxsdGles2PassTypeSequenceStates_

	//	runtime execution helpers
	XsdGoPkgHasElem_evaluatesequencegles2_pass_typeschema_Evaluate_TxsdGles2PassTypeSequenceEvaluate_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_TsidType_
}

//	If the WalkHandlers.Tgles2PassType function is not nil (ie. was set by outside code), calls it with this Tgles2PassType instance as the single argument. Then calls the Walk() method on 5/6 embed(s) and 0/0 field(s) belonging to this Tgles2PassType instance.
func (me *Tgles2PassType) Walk() (err error) {
	if fn := WalkHandlers.Tgles2PassType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_programsequencegles2_pass_typeschema_Program_Tgles2ProgramType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_annotatesequenceglsl_newparam_typeschema_Annotate_TfxAnnotateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_statessequencegles2_pass_typeschema_States_TxsdGles2PassTypeSequenceStates_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_evaluatesequencegles2_pass_typeschema_Evaluate_TxsdGles2PassTypeSequenceEvaluate_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_passsequencetechniquesequenceprofile_gles2_typeschema_Pass_Tgles2PassType_ struct {
	//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
	Passes []*Tgles2PassType `xml:"http://www.collada.org/2008/03/COLLADASchema pass"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_passsequencetechniquesequenceprofile_gles2_typeschema_Pass_Tgles2PassType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_passsequencetechniquesequenceprofile_gles2_typeschema_Pass_Tgles2PassType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_passsequencetechniquesequenceprofile_gles2_typeschema_Pass_Tgles2PassType_ instance.
func (me *XsdGoPkgHasElems_passsequencetechniquesequenceprofile_gles2_typeschema_Pass_Tgles2PassType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_passsequencetechniquesequenceprofile_gles2_typeschema_Pass_Tgles2PassType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Passes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProfileGles2TypeSequenceTechnique struct {
	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_TsidType_

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
	XsdGoPkgHasElems_passsequencetechniquesequenceprofile_gles2_typeschema_Pass_Tgles2PassType_

	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	//	Add metadata to this pass that may be used by games or tools to make decisions
	XsdGoPkgHasElems_annotatesequenceglsl_newparam_typeschema_Annotate_TfxAnnotateType_
}

//	If the WalkHandlers.TxsdProfileGles2TypeSequenceTechnique function is not nil (ie. was set by outside code), calls it with this TxsdProfileGles2TypeSequenceTechnique instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TxsdProfileGles2TypeSequenceTechnique instance.
func (me *TxsdProfileGles2TypeSequenceTechnique) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileGles2TypeSequenceTechnique; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_passsequencetechniquesequenceprofile_gles2_typeschema_Pass_Tgles2PassType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_annotatesequenceglsl_newparam_typeschema_Annotate_TfxAnnotateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_techniquesequenceprofile_gles2_typeschema_Technique_TxsdProfileGles2TypeSequenceTechnique_ struct {
	//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
	Techniques []*TxsdProfileGles2TypeSequenceTechnique `xml:"http://www.collada.org/2008/03/COLLADASchema technique"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_techniquesequenceprofile_gles2_typeschema_Technique_TxsdProfileGles2TypeSequenceTechnique_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_techniquesequenceprofile_gles2_typeschema_Technique_TxsdProfileGles2TypeSequenceTechnique_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_techniquesequenceprofile_gles2_typeschema_Technique_TxsdProfileGles2TypeSequenceTechnique_ instance.
func (me *XsdGoPkgHasElems_techniquesequenceprofile_gles2_typeschema_Technique_TxsdProfileGles2TypeSequenceTechnique_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_techniquesequenceprofile_gles2_typeschema_Technique_TxsdProfileGles2TypeSequenceTechnique_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Techniques {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TprofileGles2Type struct {
	//	Shading language that will be used.  This is not an enum to support future languages.  Current known languages at this time are GLSL-ES, CG
	XsdGoPkgHasAttr_Language_XsdtNCName_

	//	Unique identifier for referencing
	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	Support for multiple OpenGL ES 2.0 platforms
	XsdGoPkgHasAttr_Platforms_TlistOfNamesType_

	//	Include shader code from a remote URI.  If binary, assume raw.
	XsdGoPkgHasElems_includechoicesequenceprofile_glsl_typeschema_Include_TfxIncludeType_

	//	The fx_code_profile type allows you to specify an inline block of source code.  It is HIGHLY recommended to use a CDATA block inside to avoid issues with
	XsdGoPkgHasElems_codechoicesequenceprofile_glsl_typeschema_Code_TfxCodeType_

	XsdGoPkgHasElems_newparamsequenceprofile_gles2_typeschema_Newparam_TxsdProfileGles2TypeSequenceNewparam_

	//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
	XsdGoPkgHasElems_techniquesequenceprofile_gles2_typeschema_Technique_TxsdProfileGles2TypeSequenceTechnique_

	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_
}

//	If the WalkHandlers.TprofileGles2Type function is not nil (ie. was set by outside code), calls it with this TprofileGles2Type instance as the single argument. Then calls the Walk() method on 6/9 embed(s) and 0/0 field(s) belonging to this TprofileGles2Type instance.
func (me *TprofileGles2Type) Walk() (err error) {
	if fn := WalkHandlers.TprofileGles2Type; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_includechoicesequenceprofile_glsl_typeschema_Include_TfxIncludeType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_codechoicesequenceprofile_glsl_typeschema_Code_TfxCodeType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_newparamsequenceprofile_gles2_typeschema_Newparam_TxsdProfileGles2TypeSequenceNewparam_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_techniquesequenceprofile_gles2_typeschema_Technique_TxsdProfileGles2TypeSequenceTechnique_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_profile_GLES2choicefx_profile_groupschema_ProfileGles2_TprofileGles2Type_ struct {
	ProfileGles2 *TprofileGles2Type `xml:"http://www.collada.org/2008/03/COLLADASchema profile_GLES2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_profile_GLES2choicefx_profile_groupschema_ProfileGles2_TprofileGles2Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_profile_GLES2choicefx_profile_groupschema_ProfileGles2_TprofileGles2Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_profile_GLES2choicefx_profile_groupschema_ProfileGles2_TprofileGles2Type_ instance.
func (me *XsdGoPkgHasElem_profile_GLES2choicefx_profile_groupschema_ProfileGles2_TprofileGles2Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_profile_GLES2choicefx_profile_groupschema_ProfileGles2_TprofileGles2Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ProfileGles2.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasGroup_FxProfileGroup struct {
	XsdGoPkgHasElem_profile_COMMONchoicefx_profile_groupschema_ProfileCommon_TprofileCommonType_

	XsdGoPkgHasElem_profile_BRIDGEchoicefx_profile_groupschema_ProfileBridge_TprofileBridgeType_

	XsdGoPkgHasElem_profile_GLESchoicefx_profile_groupschema_ProfileGles_TprofileGlesType_

	XsdGoPkgHasElem_profile_CGchoicefx_profile_groupschema_ProfileCg_TprofileCgType_

	XsdGoPkgHasElem_profile_GLES2choicefx_profile_groupschema_ProfileGles2_TprofileGles2Type_

	XsdGoPkgHasElem_profile_GLSLchoicefx_profile_groupschema_ProfileGlsl_TprofileGlslType_
}

//	If the WalkHandlers.XsdGoPkgHasGroup_FxProfileGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_FxProfileGroup instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_FxProfileGroup instance.
func (me *XsdGoPkgHasGroup_FxProfileGroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasGroup_FxProfileGroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_profile_GLES2choicefx_profile_groupschema_ProfileGles2_TprofileGles2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_profile_GLSLchoicefx_profile_groupschema_ProfileGlsl_TprofileGlslType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_profile_COMMONchoicefx_profile_groupschema_ProfileCommon_TprofileCommonType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_profile_BRIDGEchoicefx_profile_groupschema_ProfileBridge_TprofileBridgeType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_profile_GLESchoicefx_profile_groupschema_ProfileGles_TprofileGlesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_profile_CGchoicefx_profile_groupschema_ProfileCg_TprofileCgType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The newparam element allows you to create new effect parameters which can be shared by multipe profiles.
//	This element creates a new, named param object in the FX Runtime, assigns it a type, an initial value, and additional attributes at declaration time.
//	A group that specifies the allowable types for effect scoped parameters.
type XsdGoPkgHasElem_enumchoicefx_newparam_groupschema_Enum_XsdtString_ struct {
	Enum xsdt.String `xml:"http://www.collada.org/2008/03/COLLADASchema enum"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_enumchoicefx_newparam_groupschema_Enum_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_enumchoicefx_newparam_groupschema_Enum_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_enumchoicefx_newparam_groupschema_Enum_XsdtString_ instance.
func (me *XsdGoPkgHasElem_enumchoicefx_newparam_groupschema_Enum_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_enumchoicefx_newparam_groupschema_Enum_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasGroup_FxNewparamGroup struct {
	XsdGoPkgHasElem_float2x3choicegles_param_groupschema_Float2X3_Tfloat2X3Type_

	XsdGoPkgHasElem_sampler3Dchoiceglsl_value_groupschema_Sampler3D_TfxSampler3DType_

	XsdGoPkgHasElem_float4x3choicegles_param_groupschema_Float4X3_Tfloat4X3Type_

	XsdGoPkgHasElem_samplerDEPTHchoiceglsl_value_groupschema_SamplerDEPTH_TfxSamplerDEPTHType_

	XsdGoPkgHasElem_samplerCUBEchoiceglsl_value_groupschema_SamplerCUBE_TfxSamplerCUBEType_

	XsdGoPkgHasElem_float3x4choicegles_param_groupschema_Float3X4_Tfloat3X4Type_

	XsdGoPkgHasElem_float2x4choicegles_param_groupschema_Float2X4_Tfloat2X4Type_

	XsdGoPkgHasElem_float3x3choicefx_annotate_groupschema_Float3X3_Tfloat3X3Type_

	XsdGoPkgHasElem_floatchoicekinematics_newparam_typeschema_Float_TfloatType_

	XsdGoPkgHasElem_int4choicefx_annotate_groupschema_Int4_Tint4Type_

	XsdGoPkgHasElem_samplerRECTchoiceglsl_value_groupschema_SamplerRECT_TfxSamplerRECTType_

	XsdGoPkgHasElem_float2x1choicegles_param_groupschema_Float2X1_Tfloat2Type_

	XsdGoPkgHasElem_bool2choicefx_annotate_groupschema_Bool2_Tbool2Type_

	XsdGoPkgHasElem_bool4choicefx_annotate_groupschema_Bool4_Tbool4Type_

	XsdGoPkgHasElem_sampler2Dchoiceglsl_value_groupschema_Sampler2D_TfxSampler2DType_

	XsdGoPkgHasElem_float3x2choicegles_param_groupschema_Float3X2_Tfloat3X2Type_

	XsdGoPkgHasElem_float4choicefx_annotate_groupschema_Float4_Tfloat4Type_

	XsdGoPkgHasElem_int3choicefx_annotate_groupschema_Int3_Tint3Type_

	XsdGoPkgHasElem_sampler1Dchoiceglsl_value_groupschema_Sampler1D_TfxSampler1DType_

	XsdGoPkgHasElem_float2choicefx_annotate_groupschema_Float2_Tfloat2Type_

	XsdGoPkgHasElem_float3choicefx_annotate_groupschema_Float3_Tfloat3Type_

	XsdGoPkgHasElem_intchoicekinematics_newparam_typeschema_Int_TintType_

	XsdGoPkgHasElem_enumchoicefx_newparam_groupschema_Enum_XsdtString_

	XsdGoPkgHasElem_float4x2choicegles_param_groupschema_Float4X2_Tfloat4X2Type_

	XsdGoPkgHasElem_float2x2choicefx_annotate_groupschema_Float2X2_Tfloat2X2Type_

	XsdGoPkgHasElem_bool3choicefx_annotate_groupschema_Bool3_Tbool3Type_

	XsdGoPkgHasElem_boolchoicekinematics_newparam_typeschema_Bool_XsdtBoolean_

	XsdGoPkgHasElem_float4x4choicefx_annotate_groupschema_Float4X4_Tfloat4X4Type_

	XsdGoPkgHasElem_int2choicefx_annotate_groupschema_Int2_Tint2Type_

	XsdGoPkgHasElem_float4x1choicegles_param_groupschema_Float4X1_Tfloat4Type_

	XsdGoPkgHasElem_float3x1choicegles_param_groupschema_Float3X1_Tfloat3Type_
}

//	If the WalkHandlers.XsdGoPkgHasGroup_FxNewparamGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_FxNewparamGroup instance as the single argument. Then calls the Walk() method on 31/31 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_FxNewparamGroup instance.
func (me *XsdGoPkgHasGroup_FxNewparamGroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasGroup_FxNewparamGroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_bool3choicefx_annotate_groupschema_Bool3_Tbool3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_boolchoicekinematics_newparam_typeschema_Bool_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4x4choicefx_annotate_groupschema_Float4X4_Tfloat4X4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int2choicefx_annotate_groupschema_Int2_Tint2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4x1choicegles_param_groupschema_Float4X1_Tfloat4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3x1choicegles_param_groupschema_Float3X1_Tfloat3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2x3choicegles_param_groupschema_Float2X3_Tfloat2X3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sampler3Dchoiceglsl_value_groupschema_Sampler3D_TfxSampler3DType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4x3choicegles_param_groupschema_Float4X3_Tfloat4X3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_samplerDEPTHchoiceglsl_value_groupschema_SamplerDEPTH_TfxSamplerDEPTHType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_samplerCUBEchoiceglsl_value_groupschema_SamplerCUBE_TfxSamplerCUBEType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3x4choicegles_param_groupschema_Float3X4_Tfloat3X4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2x4choicegles_param_groupschema_Float2X4_Tfloat2X4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3x3choicefx_annotate_groupschema_Float3X3_Tfloat3X3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_floatchoicekinematics_newparam_typeschema_Float_TfloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int4choicefx_annotate_groupschema_Int4_Tint4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_samplerRECTchoiceglsl_value_groupschema_SamplerRECT_TfxSamplerRECTType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2x1choicegles_param_groupschema_Float2X1_Tfloat2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool2choicefx_annotate_groupschema_Bool2_Tbool2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool4choicefx_annotate_groupschema_Bool4_Tbool4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sampler2Dchoiceglsl_value_groupschema_Sampler2D_TfxSampler2DType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3x2choicegles_param_groupschema_Float3X2_Tfloat3X2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4choicefx_annotate_groupschema_Float4_Tfloat4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int3choicefx_annotate_groupschema_Int3_Tint3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sampler1Dchoiceglsl_value_groupschema_Sampler1D_TfxSampler1DType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2choicefx_annotate_groupschema_Float2_Tfloat2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3choicefx_annotate_groupschema_Float3_Tfloat3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_intchoicekinematics_newparam_typeschema_Int_TintType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_enumchoicefx_newparam_groupschema_Enum_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4x2choicegles_param_groupschema_Float4X2_Tfloat4X2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2x2choicefx_annotate_groupschema_Float2X2_Tfloat2X2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TfxNewparamType struct {
	//	The semantic element allows you to specify a semantic for this new param.
	XsdGoPkgHasElem_semanticsequenceglsl_newparam_typeschema_Semantic_XsdtNCName_

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_TsidType_

	//	The annotate element allows you to specify an annotation for this new param.
	XsdGoPkgHasElems_annotatesequenceglsl_newparam_typeschema_Annotate_TfxAnnotateType_

	XsdGoPkgHasGroup_FxNewparamGroup

	//	The modifier element allows you to specify a modifier for this new param.
	XsdGoPkgHasElem_modifiersequenceglsl_newparam_typeschema_Modifier_TfxModifierEnum_
}

//	If the WalkHandlers.TfxNewparamType function is not nil (ie. was set by outside code), calls it with this TfxNewparamType instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TfxNewparamType instance.
func (me *TfxNewparamType) Walk() (err error) {
	if fn := WalkHandlers.TfxNewparamType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasGroup_FxNewparamGroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_modifiersequenceglsl_newparam_typeschema_Modifier_TfxModifierEnum_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_semanticsequenceglsl_newparam_typeschema_Semantic_XsdtNCName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_annotatesequenceglsl_newparam_typeschema_Annotate_TfxAnnotateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_newparamsequenceeffect_typeschema_Newparam_TfxNewparamType_ struct {
	//	The newparam element allows you to create new effect parameters which can be shared by multipe profiles.
	Newparams []*TfxNewparamType `xml:"http://www.collada.org/2008/03/COLLADASchema newparam"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_newparamsequenceeffect_typeschema_Newparam_TfxNewparamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_newparamsequenceeffect_typeschema_Newparam_TfxNewparamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_newparamsequenceeffect_typeschema_Newparam_TfxNewparamType_ instance.
func (me *XsdGoPkgHasElems_newparamsequenceeffect_typeschema_Newparam_TfxNewparamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_newparamsequenceeffect_typeschema_Newparam_TfxNewparamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Newparams {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TeffectType struct {
	XsdGoPkgHasGroup_FxProfileGroup

	//	The annotate element allows you to specify an annotation on this effect.
	XsdGoPkgHasElems_annotatesequenceglsl_newparam_typeschema_Annotate_TfxAnnotateType_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The newparam element allows you to create new effect parameters which can be shared by multipe profiles.
	XsdGoPkgHasElems_newparamsequenceeffect_typeschema_Newparam_TfxNewparamType_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The effect element may contain an asset element.
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_
}

//	If the WalkHandlers.TeffectType function is not nil (ie. was set by outside code), calls it with this TeffectType instance as the single argument. Then calls the Walk() method on 5/7 embed(s) and 0/0 field(s) belonging to this TeffectType instance.
func (me *TeffectType) Walk() (err error) {
	if fn := WalkHandlers.TeffectType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasGroup_FxProfileGroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_annotatesequenceglsl_newparam_typeschema_Annotate_TfxAnnotateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_newparamsequenceeffect_typeschema_Newparam_TfxNewparamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_effectsequencelibrary_effects_typeschema_Effect_TeffectType_ struct {
	//	There must be at least one effect element.
	Effects []*TeffectType `xml:"http://www.collada.org/2008/03/COLLADASchema effect"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_effectsequencelibrary_effects_typeschema_Effect_TeffectType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_effectsequencelibrary_effects_typeschema_Effect_TeffectType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_effectsequencelibrary_effects_typeschema_Effect_TeffectType_ instance.
func (me *XsdGoPkgHasElems_effectsequencelibrary_effects_typeschema_Effect_TeffectType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_effectsequencelibrary_effects_typeschema_Effect_TeffectType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Effects {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TlibraryEffectsType struct {
	//	The library_effects element may contain an asset element.
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	There must be at least one effect element.
	XsdGoPkgHasElems_effectsequencelibrary_effects_typeschema_Effect_TeffectType_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_
}

//	If the WalkHandlers.TlibraryEffectsType function is not nil (ie. was set by outside code), calls it with this TlibraryEffectsType instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TlibraryEffectsType instance.
func (me *TlibraryEffectsType) Walk() (err error) {
	if fn := WalkHandlers.TlibraryEffectsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_effectsequencelibrary_effects_typeschema_Effect_TeffectType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_library_effectschoicesequenceCOLLADAschema_LibraryEffects_TlibraryEffectsType_ struct {
	//	The COLLADA element may contain any
	//	number of library_effects elements.
	EffectsLibraries []*TlibraryEffectsType `xml:"http://www.collada.org/2008/03/COLLADASchema library_effects"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_library_effectschoicesequenceCOLLADAschema_LibraryEffects_TlibraryEffectsType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_library_effectschoicesequenceCOLLADAschema_LibraryEffects_TlibraryEffectsType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_library_effectschoicesequenceCOLLADAschema_LibraryEffects_TlibraryEffectsType_ instance.
func (me *XsdGoPkgHasElems_library_effectschoicesequenceCOLLADAschema_LibraryEffects_TlibraryEffectsType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_library_effectschoicesequenceCOLLADAschema_LibraryEffects_TlibraryEffectsType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EffectsLibraries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The COLLADA element may contain any
//	number of library_physics_models
//	elements.
//	The library_physics_models element declares a module of physics_model elements.
//	There must be at least one physics_model element.
//	This element allows for building complex combinations of rigid-bodies and constraints that
//	may be instantiated multiple times.
//	The physics_model may instance any number of other physics_model elements.
//	This element allows instancing physics model within another physics model, or in a physics scene.
//	The instance_physics_model element may instance any number of force_field elements.
//	The instance_force_field element declares the instantiation of a COLLADA force_field resource.
type TinstanceForceFieldType struct {
	TinstanceWithExtraType
}

//	If the WalkHandlers.TinstanceForceFieldType function is not nil (ie. was set by outside code), calls it with this TinstanceForceFieldType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TinstanceForceFieldType instance.
func (me *TinstanceForceFieldType) Walk() (err error) {
	if fn := WalkHandlers.TinstanceForceFieldType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TinstanceWithExtraType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_instance_force_fieldsequenceinstance_physics_model_typeschema_InstanceForceField_TinstanceForceFieldType_ struct {
	//	The instance_physics_model element may instance any number of force_field elements.
	ForceFieldInstances []*TinstanceForceFieldType `xml:"http://www.collada.org/2008/03/COLLADASchema instance_force_field"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_instance_force_fieldsequenceinstance_physics_model_typeschema_InstanceForceField_TinstanceForceFieldType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_instance_force_fieldsequenceinstance_physics_model_typeschema_InstanceForceField_TinstanceForceFieldType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_instance_force_fieldsequenceinstance_physics_model_typeschema_InstanceForceField_TinstanceForceFieldType_ instance.
func (me *XsdGoPkgHasElems_instance_force_fieldsequenceinstance_physics_model_typeschema_InstanceForceField_TinstanceForceFieldType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_instance_force_fieldsequenceinstance_physics_model_typeschema_InstanceForceField_TinstanceForceFieldType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ForceFieldInstances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The instance_physics_model element may instance any number of rigid_constraint elements.
//	This element allows instancing a rigid_constraint within an instance_physics_model.
//	The constraint attribute indicates which rigid_constraing to instantiate. Required attribute.
type XsdGoPkgHasAttr_Constraint_XsdtNCName_ struct {
	//	The constraint attribute indicates which rigid_constraing to instantiate. Required attribute.
	Constraint xsdt.NCName `xml:"http://www.collada.org/2008/03/COLLADASchema constraint,attr"`
}

type TinstanceRigidConstraintType struct {
	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The sid attribute is a text string value containing the sub-identifier of this element. This
	//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_TsidType_

	//	The constraint attribute indicates which rigid_constraing to instantiate. Required attribute.
	XsdGoPkgHasAttr_Constraint_XsdtNCName_
}

//	If the WalkHandlers.TinstanceRigidConstraintType function is not nil (ie. was set by outside code), calls it with this TinstanceRigidConstraintType instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TinstanceRigidConstraintType instance.
func (me *TinstanceRigidConstraintType) Walk() (err error) {
	if fn := WalkHandlers.TinstanceRigidConstraintType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_instance_rigid_constraintsequenceinstance_physics_model_typeschema_InstanceRigidConstraint_TinstanceRigidConstraintType_ struct {
	//	The instance_physics_model element may instance any number of rigid_constraint elements.
	RigidConstraintInstances []*TinstanceRigidConstraintType `xml:"http://www.collada.org/2008/03/COLLADASchema instance_rigid_constraint"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_instance_rigid_constraintsequenceinstance_physics_model_typeschema_InstanceRigidConstraint_TinstanceRigidConstraintType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_instance_rigid_constraintsequenceinstance_physics_model_typeschema_InstanceRigidConstraint_TinstanceRigidConstraintType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_instance_rigid_constraintsequenceinstance_physics_model_typeschema_InstanceRigidConstraint_TinstanceRigidConstraintType_ instance.
func (me *XsdGoPkgHasElems_instance_rigid_constraintsequenceinstance_physics_model_typeschema_InstanceRigidConstraint_TinstanceRigidConstraintType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_instance_rigid_constraintsequenceinstance_physics_model_typeschema_InstanceRigidConstraint_TinstanceRigidConstraintType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RigidConstraintInstances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The parent attribute points to the id of a node in the visual scene. This allows a physics model
//	to be instantiated under a specific transform node, which will dictate the initial position and
//	orientation, and could be animated to influence kinematic rigid bodies.
type XsdGoPkgHasAttr_Parent_XsdtAnyURI_ struct {
	//	The parent attribute points to the id of a node in the visual scene. This allows a physics model
	//	to be instantiated under a specific transform node, which will dictate the initial position and
	//	orientation, and could be animated to influence kinematic rigid bodies.
	Parent xsdt.AnyURI `xml:"http://www.collada.org/2008/03/COLLADASchema parent,attr"`
}

//	The instance_physics_model element may instance any number of rigid_body elements.
//	This element allows instancing a rigid_body within an instance_physics_model.
//	The target attribute specifies the URL of the location of the object to instantiate.
type XsdGoPkgHasAttr_Target_XsdtAnyURI_ struct {
	//	The target attribute specifies the URL of the location of the object to instantiate.
	Target xsdt.AnyURI `xml:"http://www.collada.org/2008/03/COLLADASchema target,attr"`
}

//	The body attribute indicates which rigid_body to instantiate. Required attribute.
type XsdGoPkgHasAttr_Body_XsdtNCName_ struct {
	//	The body attribute indicates which rigid_body to instantiate. Required attribute.
	Body xsdt.NCName `xml:"http://www.collada.org/2008/03/COLLADASchema body,attr"`
}

//	The technique_common element specifies the instance_rigid_body information for the common
//	profile which all COLLADA implementations need to support.
//	A centered sphere primitive.
//	A float value that represents the radius of the sphere
type XsdGoPkgHasElem_radiussequencesphere_typeschema_Radius_TfloatType_ struct {
	//	A float value that represents the radius of the sphere
	Radius TfloatType `xml:"http://www.collada.org/2008/03/COLLADASchema radius"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_radiussequencesphere_typeschema_Radius_TfloatType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_radiussequencesphere_typeschema_Radius_TfloatType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_radiussequencesphere_typeschema_Radius_TfloatType_ instance.
func (me *XsdGoPkgHasElem_radiussequencesphere_typeschema_Radius_TfloatType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_radiussequencesphere_typeschema_Radius_TfloatType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TsphereType struct {
	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	A float value that represents the radius of the sphere
	XsdGoPkgHasElem_radiussequencesphere_typeschema_Radius_TfloatType_
}

//	If the WalkHandlers.TsphereType function is not nil (ie. was set by outside code), calls it with this TsphereType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TsphereType instance.
func (me *TsphereType) Walk() (err error) {
	if fn := WalkHandlers.TsphereType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_radiussequencesphere_typeschema_Radius_TfloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_spherechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Sphere_TsphereType_ struct {
	Sphere *TsphereType `xml:"http://www.collada.org/2008/03/COLLADASchema sphere"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_spherechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Sphere_TsphereType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_spherechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Sphere_TsphereType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_spherechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Sphere_TsphereType_ instance.
func (me *XsdGoPkgHasElem_spherechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Sphere_TsphereType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_spherechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Sphere_TsphereType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Sphere.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The instance_physics_material element declares the instantiation of a COLLADA physics_material
//	resource.
type TinstancePhysicsMaterialType struct {
	TinstanceWithExtraType
}

//	If the WalkHandlers.TinstancePhysicsMaterialType function is not nil (ie. was set by outside code), calls it with this TinstancePhysicsMaterialType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TinstancePhysicsMaterialType instance.
func (me *TinstancePhysicsMaterialType) Walk() (err error) {
	if fn := WalkHandlers.TinstancePhysicsMaterialType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TinstanceWithExtraType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_instance_physics_materialchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_InstancePhysicsMaterial_TinstancePhysicsMaterialType_ struct {
	InstancePhysicsMaterial *TinstancePhysicsMaterialType `xml:"http://www.collada.org/2008/03/COLLADASchema instance_physics_material"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_instance_physics_materialchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_InstancePhysicsMaterial_TinstancePhysicsMaterialType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_instance_physics_materialchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_InstancePhysicsMaterial_TinstancePhysicsMaterialType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_instance_physics_materialchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_InstancePhysicsMaterial_TinstancePhysicsMaterialType_ instance.
func (me *XsdGoPkgHasElem_instance_physics_materialchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_InstancePhysicsMaterial_TinstancePhysicsMaterialType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_instance_physics_materialchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_InstancePhysicsMaterial_TinstancePhysicsMaterialType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.InstancePhysicsMaterial.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShapeSequenceHollow struct {
	XsdGoPkgValue xsdt.Boolean `xml:",chardata"`

	//	The sid attribute is a text string value containing the sub-identifier of this element. This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_TsidType_
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShapeSequenceHollow) ToXsdtBoolean() xsdt.Boolean {
	return me.XsdGoPkgValue
}

//	If the WalkHandlers.TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShapeSequenceHollow function is not nil (ie. was set by outside code), calls it with this TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShapeSequenceHollow instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShapeSequenceHollow instance.
func (me *TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShapeSequenceHollow) Walk() (err error) {
	if fn := WalkHandlers.TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShapeSequenceHollow; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Hollow_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShapeSequenceHollow_ struct {
	Hollow *TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShapeSequenceHollow `xml:"http://www.collada.org/2008/03/COLLADASchema hollow"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Hollow_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShapeSequenceHollow_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Hollow_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShapeSequenceHollow_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Hollow_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShapeSequenceHollow_ instance.
func (me *XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Hollow_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShapeSequenceHollow_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Hollow_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShapeSequenceHollow_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Hollow.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	An axis-aligned, centered box primitive.
//	3 float values that represent the extents of the box
type XsdGoPkgHasElem_half_extentssequencebox_typeschema_HalfExtents_Tfloat3Type_ struct {
	//	3 float values that represent the extents of the box
	HalfExtents Tfloat3Type `xml:"http://www.collada.org/2008/03/COLLADASchema half_extents"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_half_extentssequencebox_typeschema_HalfExtents_Tfloat3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half_extentssequencebox_typeschema_HalfExtents_Tfloat3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half_extentssequencebox_typeschema_HalfExtents_Tfloat3Type_ instance.
func (me *XsdGoPkgHasElem_half_extentssequencebox_typeschema_HalfExtents_Tfloat3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_half_extentssequencebox_typeschema_HalfExtents_Tfloat3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TboxType struct {
	//	3 float values that represent the extents of the box
	XsdGoPkgHasElem_half_extentssequencebox_typeschema_HalfExtents_Tfloat3Type_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_
}

//	If the WalkHandlers.TboxType function is not nil (ie. was set by outside code), calls it with this TboxType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TboxType instance.
func (me *TboxType) Walk() (err error) {
	if fn := WalkHandlers.TboxType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_half_extentssequencebox_typeschema_HalfExtents_Tfloat3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_boxchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Box_TboxType_ struct {
	Box *TboxType `xml:"http://www.collada.org/2008/03/COLLADASchema box"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_boxchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Box_TboxType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_boxchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Box_TboxType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_boxchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Box_TboxType_ instance.
func (me *XsdGoPkgHasElem_boxchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Box_TboxType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_boxchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Box_TboxType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Box.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The targetable_float_type element is used to represent elements which contain a single float value which can
//	be targeted for animation.
type TtargetableFloatType struct {
	XsdGoPkgValue TfloatType `xml:",chardata"`

	//	The sid attribute is a text string value containing the sub-identifier of this element. This
	//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_TsidType_
}

//	If the WalkHandlers.TtargetableFloatType function is not nil (ie. was set by outside code), calls it with this TtargetableFloatType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TtargetableFloatType instance.
func (me *TtargetableFloatType) Walk() (err error) {
	if fn := WalkHandlers.TtargetableFloatType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the value of its XsdGoPkgValue field as a xsdt.Double (which TfloatType is just aliasing).
func (me *TtargetableFloatType) ToXsdtDouble() xsdt.Double { return me.XsdGoPkgValue.ToXsdtDouble() }

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TtargetableFloatType) ToTfloatType() TfloatType { return me.XsdGoPkgValue }

type XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Density_TtargetableFloatType_ struct {
	Density *TtargetableFloatType `xml:"http://www.collada.org/2008/03/COLLADASchema density"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Density_TtargetableFloatType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Density_TtargetableFloatType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Density_TtargetableFloatType_ instance.
func (me *XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Density_TtargetableFloatType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Density_TtargetableFloatType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Density.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	An infinite plane primitive.
//	4 float values that represent the coefficients for the plane's equation:    Ax + By + Cz + D = 0
type XsdGoPkgHasElem_equationsequenceplane_typeschema_Equation_Tfloat4Type_ struct {
	//	4 float values that represent the coefficients for the plane's equation:    Ax + By + Cz + D = 0
	Equation Tfloat4Type `xml:"http://www.collada.org/2008/03/COLLADASchema equation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_equationsequenceplane_typeschema_Equation_Tfloat4Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_equationsequenceplane_typeschema_Equation_Tfloat4Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_equationsequenceplane_typeschema_Equation_Tfloat4Type_ instance.
func (me *XsdGoPkgHasElem_equationsequenceplane_typeschema_Equation_Tfloat4Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_equationsequenceplane_typeschema_Equation_Tfloat4Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TplaneType struct {
	//	4 float values that represent the coefficients for the plane's equation:    Ax + By + Cz + D = 0
	XsdGoPkgHasElem_equationsequenceplane_typeschema_Equation_Tfloat4Type_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_
}

//	If the WalkHandlers.TplaneType function is not nil (ie. was set by outside code), calls it with this TplaneType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TplaneType instance.
func (me *TplaneType) Walk() (err error) {
	if fn := WalkHandlers.TplaneType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_equationsequenceplane_typeschema_Equation_Tfloat4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_planechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Plane_TplaneType_ struct {
	Plane *TplaneType `xml:"http://www.collada.org/2008/03/COLLADASchema plane"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_planechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Plane_TplaneType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_planechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Plane_TplaneType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_planechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Plane_TplaneType_ instance.
func (me *XsdGoPkgHasElem_planechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Plane_TplaneType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_planechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Plane_TplaneType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Plane.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_masssequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Mass_TtargetableFloatType_ struct {
	Mass *TtargetableFloatType `xml:"http://www.collada.org/2008/03/COLLADASchema mass"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_masssequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Mass_TtargetableFloatType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_masssequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Mass_TtargetableFloatType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_masssequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Mass_TtargetableFloatType_ instance.
func (me *XsdGoPkgHasElem_masssequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Mass_TtargetableFloatType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_masssequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Mass_TtargetableFloatType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Mass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A capsule primitive that is centered on and aligned with the local Y axis.
//	Three float values that represent the radii of the capsule (it may be elliptical).
type XsdGoPkgHasElem_radiussequencecapsule_typeschema_Radius_Tfloat3Type_ struct {
	//	Three float values that represent the radii of the capsule (it may be elliptical).
	Radius Tfloat3Type `xml:"http://www.collada.org/2008/03/COLLADASchema radius"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_radiussequencecapsule_typeschema_Radius_Tfloat3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_radiussequencecapsule_typeschema_Radius_Tfloat3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_radiussequencecapsule_typeschema_Radius_Tfloat3Type_ instance.
func (me *XsdGoPkgHasElem_radiussequencecapsule_typeschema_Radius_Tfloat3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_radiussequencecapsule_typeschema_Radius_Tfloat3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A float value that represents the length of the line segment connecting the centers
//	of the capping hemispheres.
type XsdGoPkgHasElem_heightsequencecapsule_typeschema_Height_TfloatType_ struct {
	//	A float value that represents the length of the line segment connecting the centers
	//	of the capping hemispheres.
	Height TfloatType `xml:"http://www.collada.org/2008/03/COLLADASchema height"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_heightsequencecapsule_typeschema_Height_TfloatType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_heightsequencecapsule_typeschema_Height_TfloatType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_heightsequencecapsule_typeschema_Height_TfloatType_ instance.
func (me *XsdGoPkgHasElem_heightsequencecapsule_typeschema_Height_TfloatType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_heightsequencecapsule_typeschema_Height_TfloatType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcapsuleType struct {
	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	Three float values that represent the radii of the capsule (it may be elliptical).
	XsdGoPkgHasElem_radiussequencecapsule_typeschema_Radius_Tfloat3Type_

	//	A float value that represents the length of the line segment connecting the centers
	//	of the capping hemispheres.
	XsdGoPkgHasElem_heightsequencecapsule_typeschema_Height_TfloatType_
}

//	If the WalkHandlers.TcapsuleType function is not nil (ie. was set by outside code), calls it with this TcapsuleType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TcapsuleType instance.
func (me *TcapsuleType) Walk() (err error) {
	if fn := WalkHandlers.TcapsuleType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_radiussequencecapsule_typeschema_Radius_Tfloat3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_heightsequencecapsule_typeschema_Height_TfloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_capsulechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Capsule_TcapsuleType_ struct {
	Capsule *TcapsuleType `xml:"http://www.collada.org/2008/03/COLLADASchema capsule"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_capsulechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Capsule_TcapsuleType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_capsulechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Capsule_TcapsuleType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_capsulechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Capsule_TcapsuleType_ instance.
func (me *XsdGoPkgHasElem_capsulechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Capsule_TcapsuleType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_capsulechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Capsule_TcapsuleType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Capsule.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The instance_geometry element declares the instantiation of a COLLADA geometry resource.
//	Bind a specific material to a piece of geometry, binding varying and uniform parameters at the
//	same time.
//	Bind a specific material to a piece of geometry, binding varying and uniform parameters at the
//	same time.
//	The technique_common element specifies the bind_material information for the common
//	profile which all COLLADA implementations need to support.
//	The instance_material element specifies the information needed to bind a geometry
//	to a material. This element must appear at least once.
//	The instance_material element declares the instantiation of a COLLADA material resource.
//	The bind_vertex_input element binds vertex inputs to effect parameters upon instantiation.
//	The input_semantic attribute specifies which input semantic to bind.
type XsdGoPkgHasAttr_InputSemantic_XsdtNCName_ struct {
	//	The input_semantic attribute specifies which input semantic to bind.
	InputSemantic xsdt.NCName `xml:"http://www.collada.org/2008/03/COLLADASchema input_semantic,attr"`
}

//	The input_set attribute specifies which input set to bind.
type XsdGoPkgHasAttr_InputSet_TuintType_ struct {
	//	The input_set attribute specifies which input set to bind.
	InputSet TuintType `xml:"http://www.collada.org/2008/03/COLLADASchema input_set,attr"`
}

type TxsdInstanceMaterialTypeSequenceBindVertexInput struct {
	//	The input_set attribute specifies which input set to bind.
	XsdGoPkgHasAttr_InputSet_TuintType_

	//	The semantic attribute specifies which effect parameter to bind.
	XsdGoPkgHasAttr_Semantic_XsdtNCName_

	//	The input_semantic attribute specifies which input semantic to bind.
	XsdGoPkgHasAttr_InputSemantic_XsdtNCName_
}

//	If the WalkHandlers.TxsdInstanceMaterialTypeSequenceBindVertexInput function is not nil (ie. was set by outside code), calls it with this TxsdInstanceMaterialTypeSequenceBindVertexInput instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdInstanceMaterialTypeSequenceBindVertexInput instance.
func (me *TxsdInstanceMaterialTypeSequenceBindVertexInput) Walk() (err error) {
	if fn := WalkHandlers.TxsdInstanceMaterialTypeSequenceBindVertexInput; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_bind_vertex_inputsequenceinstance_material_typeschema_BindVertexInput_TxsdInstanceMaterialTypeSequenceBindVertexInput_ struct {
	//	The bind_vertex_input element binds vertex inputs to effect parameters upon instantiation.
	BindVertexInputs []*TxsdInstanceMaterialTypeSequenceBindVertexInput `xml:"http://www.collada.org/2008/03/COLLADASchema bind_vertex_input"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_bind_vertex_inputsequenceinstance_material_typeschema_BindVertexInput_TxsdInstanceMaterialTypeSequenceBindVertexInput_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_bind_vertex_inputsequenceinstance_material_typeschema_BindVertexInput_TxsdInstanceMaterialTypeSequenceBindVertexInput_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_bind_vertex_inputsequenceinstance_material_typeschema_BindVertexInput_TxsdInstanceMaterialTypeSequenceBindVertexInput_ instance.
func (me *XsdGoPkgHasElems_bind_vertex_inputsequenceinstance_material_typeschema_BindVertexInput_TxsdInstanceMaterialTypeSequenceBindVertexInput_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_bind_vertex_inputsequenceinstance_material_typeschema_BindVertexInput_TxsdInstanceMaterialTypeSequenceBindVertexInput_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BindVertexInputs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The bind element binds values to effect parameters upon instantiation.
type TxsdInstanceMaterialTypeSequenceBind struct {
	//	The semantic attribute specifies which effect parameter to bind.
	XsdGoPkgHasAttr_Semantic_XsdtNCName_

	//	The target attribute specifies the location of the value to bind to the specified semantic.
	//	This text string is a path-name following a simple syntax described in the "Addressing Syntax"
	//	section.
	XsdGoPkgHasAttr_Target_XsdtToken_
}

//	If the WalkHandlers.TxsdInstanceMaterialTypeSequenceBind function is not nil (ie. was set by outside code), calls it with this TxsdInstanceMaterialTypeSequenceBind instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdInstanceMaterialTypeSequenceBind instance.
func (me *TxsdInstanceMaterialTypeSequenceBind) Walk() (err error) {
	if fn := WalkHandlers.TxsdInstanceMaterialTypeSequenceBind; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_bindsequenceinstance_material_typeschema_Bind_TxsdInstanceMaterialTypeSequenceBind_ struct {
	//	The bind element binds values to effect parameters upon instantiation.
	Binds []*TxsdInstanceMaterialTypeSequenceBind `xml:"http://www.collada.org/2008/03/COLLADASchema bind"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_bindsequenceinstance_material_typeschema_Bind_TxsdInstanceMaterialTypeSequenceBind_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_bindsequenceinstance_material_typeschema_Bind_TxsdInstanceMaterialTypeSequenceBind_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_bindsequenceinstance_material_typeschema_Bind_TxsdInstanceMaterialTypeSequenceBind_ instance.
func (me *XsdGoPkgHasElems_bindsequenceinstance_material_typeschema_Bind_TxsdInstanceMaterialTypeSequenceBind_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_bindsequenceinstance_material_typeschema_Bind_TxsdInstanceMaterialTypeSequenceBind_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Binds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TinstanceMaterialType struct {
	//	The bind element binds values to effect parameters upon instantiation.
	XsdGoPkgHasElems_bindsequenceinstance_material_typeschema_Bind_TxsdInstanceMaterialTypeSequenceBind_

	//	The symbol attribute specifies which symbol defined from within the geometry this material binds to.
	XsdGoPkgHasAttr_Symbol_XsdtNCName_

	//	The sid attribute is a text string value containing the sub-identifier of this element. This
	//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_TsidType_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The target attribute specifies the URL of the location of the object to instantiate.
	XsdGoPkgHasAttr_Target_XsdtAnyURI_

	//	The bind_vertex_input element binds vertex inputs to effect parameters upon instantiation.
	XsdGoPkgHasElems_bind_vertex_inputsequenceinstance_material_typeschema_BindVertexInput_TxsdInstanceMaterialTypeSequenceBindVertexInput_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_
}

//	If the WalkHandlers.TinstanceMaterialType function is not nil (ie. was set by outside code), calls it with this TinstanceMaterialType instance as the single argument. Then calls the Walk() method on 3/7 embed(s) and 0/0 field(s) belonging to this TinstanceMaterialType instance.
func (me *TinstanceMaterialType) Walk() (err error) {
	if fn := WalkHandlers.TinstanceMaterialType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_bindsequenceinstance_material_typeschema_Bind_TxsdInstanceMaterialTypeSequenceBind_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_bind_vertex_inputsequenceinstance_material_typeschema_BindVertexInput_TxsdInstanceMaterialTypeSequenceBindVertexInput_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_instance_materialsequencetechnique_commonsequencebind_material_typeschema_InstanceMaterial_TinstanceMaterialType_ struct {
	//	The instance_material element specifies the information needed to bind a geometry
	//	to a material. This element must appear at least once.
	MaterialInstances []*TinstanceMaterialType `xml:"http://www.collada.org/2008/03/COLLADASchema instance_material"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_instance_materialsequencetechnique_commonsequencebind_material_typeschema_InstanceMaterial_TinstanceMaterialType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_instance_materialsequencetechnique_commonsequencebind_material_typeschema_InstanceMaterial_TinstanceMaterialType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_instance_materialsequencetechnique_commonsequencebind_material_typeschema_InstanceMaterial_TinstanceMaterialType_ instance.
func (me *XsdGoPkgHasElems_instance_materialsequencetechnique_commonsequencebind_material_typeschema_InstanceMaterial_TinstanceMaterialType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_instance_materialsequencetechnique_commonsequencebind_material_typeschema_InstanceMaterial_TinstanceMaterialType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MaterialInstances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdBindMaterialTypeSequenceTechniqueCommon struct {
	//	The instance_material element specifies the information needed to bind a geometry
	//	to a material. This element must appear at least once.
	XsdGoPkgHasElems_instance_materialsequencetechnique_commonsequencebind_material_typeschema_InstanceMaterial_TinstanceMaterialType_
}

//	If the WalkHandlers.TxsdBindMaterialTypeSequenceTechniqueCommon function is not nil (ie. was set by outside code), calls it with this TxsdBindMaterialTypeSequenceTechniqueCommon instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdBindMaterialTypeSequenceTechniqueCommon instance.
func (me *TxsdBindMaterialTypeSequenceTechniqueCommon) Walk() (err error) {
	if fn := WalkHandlers.TxsdBindMaterialTypeSequenceTechniqueCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_instance_materialsequencetechnique_commonsequencebind_material_typeschema_InstanceMaterial_TinstanceMaterialType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_technique_commonsequencebind_material_typeschema_TechniqueCommon_TxsdBindMaterialTypeSequenceTechniqueCommon_ struct {
	//	The technique_common element specifies the bind_material information for the common
	//	profile which all COLLADA implementations need to support.
	TechniqueCommon *TxsdBindMaterialTypeSequenceTechniqueCommon `xml:"http://www.collada.org/2008/03/COLLADASchema technique_common"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_technique_commonsequencebind_material_typeschema_TechniqueCommon_TxsdBindMaterialTypeSequenceTechniqueCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_technique_commonsequencebind_material_typeschema_TechniqueCommon_TxsdBindMaterialTypeSequenceTechniqueCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_technique_commonsequencebind_material_typeschema_TechniqueCommon_TxsdBindMaterialTypeSequenceTechniqueCommon_ instance.
func (me *XsdGoPkgHasElem_technique_commonsequencebind_material_typeschema_TechniqueCommon_TxsdBindMaterialTypeSequenceTechniqueCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_technique_commonsequencebind_material_typeschema_TechniqueCommon_TxsdBindMaterialTypeSequenceTechniqueCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TechniqueCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TbindMaterialType struct {
	//	This element may contain any number of non-common profile techniques.
	XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_

	//	The technique_common element specifies the bind_material information for the common
	//	profile which all COLLADA implementations need to support.
	XsdGoPkgHasElem_technique_commonsequencebind_material_typeschema_TechniqueCommon_TxsdBindMaterialTypeSequenceTechniqueCommon_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The bind_material element may contain any number of param elements.
	XsdGoPkgHasElems_paramsequenceaccessor_typeschema_Param_TparamType_
}

//	If the WalkHandlers.TbindMaterialType function is not nil (ie. was set by outside code), calls it with this TbindMaterialType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TbindMaterialType instance.
func (me *TbindMaterialType) Walk() (err error) {
	if fn := WalkHandlers.TbindMaterialType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_paramsequenceaccessor_typeschema_Param_TparamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_technique_commonsequencebind_material_typeschema_TechniqueCommon_TxsdBindMaterialTypeSequenceTechniqueCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_bind_materialsequenceinstance_geometry_typeschema_BindMaterial_TbindMaterialType_ struct {
	//	Bind a specific material to a piece of geometry, binding varying and uniform parameters at the
	//	same time.
	BindMaterial *TbindMaterialType `xml:"http://www.collada.org/2008/03/COLLADASchema bind_material"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bind_materialsequenceinstance_geometry_typeschema_BindMaterial_TbindMaterialType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bind_materialsequenceinstance_geometry_typeschema_BindMaterial_TbindMaterialType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_bind_materialsequenceinstance_geometry_typeschema_BindMaterial_TbindMaterialType_ instance.
func (me *XsdGoPkgHasElem_bind_materialsequenceinstance_geometry_typeschema_BindMaterial_TbindMaterialType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bind_materialsequenceinstance_geometry_typeschema_BindMaterial_TbindMaterialType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BindMaterial.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TinstanceGeometryType struct {
	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The sid attribute is a text string value containing the sub-identifier of this element. This
	//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_TsidType_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The url attribute refers to resource.  This may refer to a local resource using a relative URL
	//	fragment identifier that begins with the "#" character. The url attribute may refer to an external
	//	resource using an absolute or relative URL.
	XsdGoPkgHasAttr_Url_XsdtAnyURI_

	//	Bind a specific material to a piece of geometry, binding varying and uniform parameters at the
	//	same time.
	XsdGoPkgHasElem_bind_materialsequenceinstance_geometry_typeschema_BindMaterial_TbindMaterialType_
}

//	If the WalkHandlers.TinstanceGeometryType function is not nil (ie. was set by outside code), calls it with this TinstanceGeometryType instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TinstanceGeometryType instance.
func (me *TinstanceGeometryType) Walk() (err error) {
	if fn := WalkHandlers.TinstanceGeometryType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_bind_materialsequenceinstance_geometry_typeschema_BindMaterial_TbindMaterialType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_instance_geometrychoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_InstanceGeometry_TinstanceGeometryType_ struct {
	InstanceGeometry *TinstanceGeometryType `xml:"http://www.collada.org/2008/03/COLLADASchema instance_geometry"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_instance_geometrychoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_InstanceGeometry_TinstanceGeometryType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_instance_geometrychoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_InstanceGeometry_TinstanceGeometryType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_instance_geometrychoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_InstanceGeometry_TinstanceGeometryType_ instance.
func (me *XsdGoPkgHasElem_instance_geometrychoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_InstanceGeometry_TinstanceGeometryType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_instance_geometrychoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_InstanceGeometry_TinstanceGeometryType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.InstanceGeometry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	This element defines the physical properties of an object. It contains a technique/profile with
//	parameters. The COMMON profile defines the built-in names, such as static_friction.
//	The technique_common element specifies the physics_material information for the common profile
//	which all COLLADA implementations need to support.
//	Static friction coefficient
type XsdGoPkgHasElem_static_frictionsequencetechnique_commonsequencephysics_material_typeschema_StaticFriction_TtargetableFloatType_ struct {
	//	Static friction coefficient
	StaticFriction *TtargetableFloatType `xml:"http://www.collada.org/2008/03/COLLADASchema static_friction"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_static_frictionsequencetechnique_commonsequencephysics_material_typeschema_StaticFriction_TtargetableFloatType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_static_frictionsequencetechnique_commonsequencephysics_material_typeschema_StaticFriction_TtargetableFloatType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_static_frictionsequencetechnique_commonsequencephysics_material_typeschema_StaticFriction_TtargetableFloatType_ instance.
func (me *XsdGoPkgHasElem_static_frictionsequencetechnique_commonsequencephysics_material_typeschema_StaticFriction_TtargetableFloatType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_static_frictionsequencetechnique_commonsequencephysics_material_typeschema_StaticFriction_TtargetableFloatType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StaticFriction.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Dynamic friction coefficient
type XsdGoPkgHasElem_dynamic_frictionsequencetechnique_commonsequencephysics_material_typeschema_DynamicFriction_TtargetableFloatType_ struct {
	//	Dynamic friction coefficient
	DynamicFriction *TtargetableFloatType `xml:"http://www.collada.org/2008/03/COLLADASchema dynamic_friction"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_dynamic_frictionsequencetechnique_commonsequencephysics_material_typeschema_DynamicFriction_TtargetableFloatType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_dynamic_frictionsequencetechnique_commonsequencephysics_material_typeschema_DynamicFriction_TtargetableFloatType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_dynamic_frictionsequencetechnique_commonsequencephysics_material_typeschema_DynamicFriction_TtargetableFloatType_ instance.
func (me *XsdGoPkgHasElem_dynamic_frictionsequencetechnique_commonsequencephysics_material_typeschema_DynamicFriction_TtargetableFloatType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_dynamic_frictionsequencetechnique_commonsequencephysics_material_typeschema_DynamicFriction_TtargetableFloatType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DynamicFriction.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The proportion of the kinetic energy preserved in the impact (typically ranges from 0.0 to 1.0)
type XsdGoPkgHasElem_restitutionsequencetechnique_commonsequencephysics_material_typeschema_Restitution_TtargetableFloatType_ struct {
	//	The proportion of the kinetic energy preserved in the impact (typically ranges from 0.0 to 1.0)
	Restitution *TtargetableFloatType `xml:"http://www.collada.org/2008/03/COLLADASchema restitution"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_restitutionsequencetechnique_commonsequencephysics_material_typeschema_Restitution_TtargetableFloatType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_restitutionsequencetechnique_commonsequencephysics_material_typeschema_Restitution_TtargetableFloatType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_restitutionsequencetechnique_commonsequencephysics_material_typeschema_Restitution_TtargetableFloatType_ instance.
func (me *XsdGoPkgHasElem_restitutionsequencetechnique_commonsequencephysics_material_typeschema_Restitution_TtargetableFloatType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_restitutionsequencetechnique_commonsequencephysics_material_typeschema_Restitution_TtargetableFloatType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Restitution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPhysicsMaterialTypeSequenceTechniqueCommon struct {
	//	Dynamic friction coefficient
	XsdGoPkgHasElem_dynamic_frictionsequencetechnique_commonsequencephysics_material_typeschema_DynamicFriction_TtargetableFloatType_

	//	The proportion of the kinetic energy preserved in the impact (typically ranges from 0.0 to 1.0)
	XsdGoPkgHasElem_restitutionsequencetechnique_commonsequencephysics_material_typeschema_Restitution_TtargetableFloatType_

	//	Static friction coefficient
	XsdGoPkgHasElem_static_frictionsequencetechnique_commonsequencephysics_material_typeschema_StaticFriction_TtargetableFloatType_
}

//	If the WalkHandlers.TxsdPhysicsMaterialTypeSequenceTechniqueCommon function is not nil (ie. was set by outside code), calls it with this TxsdPhysicsMaterialTypeSequenceTechniqueCommon instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdPhysicsMaterialTypeSequenceTechniqueCommon instance.
func (me *TxsdPhysicsMaterialTypeSequenceTechniqueCommon) Walk() (err error) {
	if fn := WalkHandlers.TxsdPhysicsMaterialTypeSequenceTechniqueCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_dynamic_frictionsequencetechnique_commonsequencephysics_material_typeschema_DynamicFriction_TtargetableFloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_restitutionsequencetechnique_commonsequencephysics_material_typeschema_Restitution_TtargetableFloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_static_frictionsequencetechnique_commonsequencephysics_material_typeschema_StaticFriction_TtargetableFloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_technique_commonsequencephysics_material_typeschema_TechniqueCommon_TxsdPhysicsMaterialTypeSequenceTechniqueCommon_ struct {
	//	The technique_common element specifies the physics_material information for the common profile
	//	which all COLLADA implementations need to support.
	TechniqueCommon *TxsdPhysicsMaterialTypeSequenceTechniqueCommon `xml:"http://www.collada.org/2008/03/COLLADASchema technique_common"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_technique_commonsequencephysics_material_typeschema_TechniqueCommon_TxsdPhysicsMaterialTypeSequenceTechniqueCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_technique_commonsequencephysics_material_typeschema_TechniqueCommon_TxsdPhysicsMaterialTypeSequenceTechniqueCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_technique_commonsequencephysics_material_typeschema_TechniqueCommon_TxsdPhysicsMaterialTypeSequenceTechniqueCommon_ instance.
func (me *XsdGoPkgHasElem_technique_commonsequencephysics_material_typeschema_TechniqueCommon_TxsdPhysicsMaterialTypeSequenceTechniqueCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_technique_commonsequencephysics_material_typeschema_TechniqueCommon_TxsdPhysicsMaterialTypeSequenceTechniqueCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TechniqueCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TphysicsMaterialType struct {
	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	This element may contain any number of non-common profile techniques.
	XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_

	//	The physics_material element may contain an asset element.
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	//	The technique_common element specifies the physics_material information for the common profile
	//	which all COLLADA implementations need to support.
	XsdGoPkgHasElem_technique_commonsequencephysics_material_typeschema_TechniqueCommon_TxsdPhysicsMaterialTypeSequenceTechniqueCommon_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_
}

//	If the WalkHandlers.TphysicsMaterialType function is not nil (ie. was set by outside code), calls it with this TphysicsMaterialType instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TphysicsMaterialType instance.
func (me *TphysicsMaterialType) Walk() (err error) {
	if fn := WalkHandlers.TphysicsMaterialType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_technique_commonsequencephysics_material_typeschema_TechniqueCommon_TxsdPhysicsMaterialTypeSequenceTechniqueCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_physics_materialchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_PhysicsMaterial_TphysicsMaterialType_ struct {
	PhysicsMaterial *TphysicsMaterialType `xml:"http://www.collada.org/2008/03/COLLADASchema physics_material"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_physics_materialchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_PhysicsMaterial_TphysicsMaterialType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_physics_materialchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_PhysicsMaterial_TphysicsMaterialType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_physics_materialchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_PhysicsMaterial_TphysicsMaterialType_ instance.
func (me *XsdGoPkgHasElem_physics_materialchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_PhysicsMaterial_TphysicsMaterialType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_physics_materialchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_PhysicsMaterial_TphysicsMaterialType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PhysicsMaterial.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A cylinder primitive that is centered on, and aligned with. the local Y axis.
//	float2 values that represent the radii of the cylinder.
type XsdGoPkgHasElem_radiussequencecylinder_typeschema_Radius_Tfloat2Type_ struct {
	//	float2 values that represent the radii of the cylinder.
	Radius Tfloat2Type `xml:"http://www.collada.org/2008/03/COLLADASchema radius"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_radiussequencecylinder_typeschema_Radius_Tfloat2Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_radiussequencecylinder_typeschema_Radius_Tfloat2Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_radiussequencecylinder_typeschema_Radius_Tfloat2Type_ instance.
func (me *XsdGoPkgHasElem_radiussequencecylinder_typeschema_Radius_Tfloat2Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_radiussequencecylinder_typeschema_Radius_Tfloat2Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcylinderType struct {
	//	A float value that represents the length of the cylinder along the Y axis.
	XsdGoPkgHasElem_heightsequencecapsule_typeschema_Height_TfloatType_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	float2 values that represent the radii of the cylinder.
	XsdGoPkgHasElem_radiussequencecylinder_typeschema_Radius_Tfloat2Type_
}

//	If the WalkHandlers.TcylinderType function is not nil (ie. was set by outside code), calls it with this TcylinderType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TcylinderType instance.
func (me *TcylinderType) Walk() (err error) {
	if fn := WalkHandlers.TcylinderType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_radiussequencecylinder_typeschema_Radius_Tfloat2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_heightsequencecapsule_typeschema_Height_TfloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_cylinderchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Cylinder_TcylinderType_ struct {
	Cylinder *TcylinderType `xml:"http://www.collada.org/2008/03/COLLADASchema cylinder"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_cylinderchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Cylinder_TcylinderType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_cylinderchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Cylinder_TcylinderType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_cylinderchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Cylinder_TcylinderType_ instance.
func (me *XsdGoPkgHasElem_cylinderchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Cylinder_TcylinderType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_cylinderchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Cylinder_TcylinderType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Cylinder.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShape struct {
	XsdGoPkgHasElem_physics_materialchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_PhysicsMaterial_TphysicsMaterialType_

	XsdGoPkgHasElem_cylinderchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Cylinder_TcylinderType_

	XsdGoPkgHasElem_spherechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Sphere_TsphereType_

	XsdGoPkgHasElem_instance_physics_materialchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_InstancePhysicsMaterial_TinstancePhysicsMaterialType_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	XsdGoPkgHasElems_translatechoiceattachment_endchoicesequencelink_typeschema_Translate_TtranslateType_

	XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Hollow_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShapeSequenceHollow_

	XsdGoPkgHasElem_boxchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Box_TboxType_

	XsdGoPkgHasElems_rotatechoiceattachment_endchoicesequencelink_typeschema_Rotate_TrotateType_

	XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Density_TtargetableFloatType_

	XsdGoPkgHasElem_planechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Plane_TplaneType_

	XsdGoPkgHasElem_masssequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Mass_TtargetableFloatType_

	XsdGoPkgHasElem_capsulechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Capsule_TcapsuleType_

	XsdGoPkgHasElem_instance_geometrychoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_InstanceGeometry_TinstanceGeometryType_
}

//	If the WalkHandlers.TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShape function is not nil (ie. was set by outside code), calls it with this TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShape instance as the single argument. Then calls the Walk() method on 14/14 embed(s) and 0/0 field(s) belonging to this TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShape instance.
func (me *TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShape) Walk() (err error) {
	if fn := WalkHandlers.TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShape; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_instance_geometrychoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_InstanceGeometry_TinstanceGeometryType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_physics_materialchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_PhysicsMaterial_TphysicsMaterialType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_cylinderchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Cylinder_TcylinderType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_spherechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Sphere_TsphereType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_instance_physics_materialchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_InstancePhysicsMaterial_TinstancePhysicsMaterialType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_translatechoiceattachment_endchoicesequencelink_typeschema_Translate_TtranslateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Hollow_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShapeSequenceHollow_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_boxchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Box_TboxType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_rotatechoiceattachment_endchoicesequencelink_typeschema_Rotate_TrotateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Density_TtargetableFloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_planechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Plane_TplaneType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_masssequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Mass_TtargetableFloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_capsulechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Capsule_TcapsuleType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_shapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Shape_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShape_ struct {
	Shapes []*TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShape `xml:"http://www.collada.org/2008/03/COLLADASchema shape"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_shapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Shape_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShape_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_shapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Shape_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShape_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_shapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Shape_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShape_ instance.
func (me *XsdGoPkgHasElems_shapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Shape_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShape_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_shapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Shape_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShape_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Shapes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_dynamicsequencetechnique_commonsequenceinstance_rigid_body_typeschema_Dynamic_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceDynamic_True struct {
	Dynamic *TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShapeSequenceHollow `xml:"http://www.collada.org/2008/03/COLLADASchema dynamic"`
}

//	Returns the default value for Dynamic -- true
func (me XsdGoPkgHasElem_dynamicsequencetechnique_commonsequenceinstance_rigid_body_typeschema_Dynamic_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceDynamic_True) DynamicDefault() xsdt.Boolean {
	return xsdt.Boolean(true)
}

//	If the WalkHandlers.XsdGoPkgHasElem_dynamicsequencetechnique_commonsequenceinstance_rigid_body_typeschema_Dynamic_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceDynamic_True function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_dynamicsequencetechnique_commonsequenceinstance_rigid_body_typeschema_Dynamic_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceDynamic_True instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_dynamicsequencetechnique_commonsequenceinstance_rigid_body_typeschema_Dynamic_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceDynamic_True instance.
func (me *XsdGoPkgHasElem_dynamicsequencetechnique_commonsequenceinstance_rigid_body_typeschema_Dynamic_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceDynamic_True) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_dynamicsequencetechnique_commonsequenceinstance_rigid_body_typeschema_Dynamic_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceDynamic_True; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Dynamic.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Specifies the initial angular velocity of the rigid_body instance in degrees per second
//	around each axis, in the form of an X-Y-Z Euler rotation.
type XsdGoPkgHasElem_angular_velocitysequencetechnique_commonsequenceinstance_rigid_body_typeschema_AngularVelocity_Tfloat3Type_000000 struct {
	//	Specifies the initial angular velocity of the rigid_body instance in degrees per second
	//	around each axis, in the form of an X-Y-Z Euler rotation.
	AngularVelocity Tfloat3Type `xml:"http://www.collada.org/2008/03/COLLADASchema angular_velocity"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_angular_velocitysequencetechnique_commonsequenceinstance_rigid_body_typeschema_AngularVelocity_Tfloat3Type_000000 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_angular_velocitysequencetechnique_commonsequenceinstance_rigid_body_typeschema_AngularVelocity_Tfloat3Type_000000 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_angular_velocitysequencetechnique_commonsequenceinstance_rigid_body_typeschema_AngularVelocity_Tfloat3Type_000000 instance.
func (me *XsdGoPkgHasElem_angular_velocitysequencetechnique_commonsequenceinstance_rigid_body_typeschema_AngularVelocity_Tfloat3Type_000000) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_angular_velocitysequencetechnique_commonsequenceinstance_rigid_body_typeschema_AngularVelocity_Tfloat3Type_000000; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for AngularVelocity -- "0.0 0.0 0.0"
func (me XsdGoPkgHasElem_angular_velocitysequencetechnique_commonsequenceinstance_rigid_body_typeschema_AngularVelocity_Tfloat3Type_000000) AngularVelocityDefault() Tfloat3Type {
	return Tfloat3Type("0.0 0.0 0.0")
}

type XsdGoPkgHasElem_inertiasequencetechnique_commonsequenceinstance_rigid_body_typeschema_Inertia_TtargetableFloat3Type_ struct {
	Inertia *TtargetableFloat3Type `xml:"http://www.collada.org/2008/03/COLLADASchema inertia"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_inertiasequencetechnique_commonsequenceinstance_rigid_body_typeschema_Inertia_TtargetableFloat3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_inertiasequencetechnique_commonsequenceinstance_rigid_body_typeschema_Inertia_TtargetableFloat3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_inertiasequencetechnique_commonsequenceinstance_rigid_body_typeschema_Inertia_TtargetableFloat3Type_ instance.
func (me *XsdGoPkgHasElem_inertiasequencetechnique_commonsequenceinstance_rigid_body_typeschema_Inertia_TtargetableFloat3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_inertiasequencetechnique_commonsequenceinstance_rigid_body_typeschema_Inertia_TtargetableFloat3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Inertia.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Specifies the initial linear velocity of the rigid_body instance.
type XsdGoPkgHasElem_velocitysequencetechnique_commonsequenceinstance_rigid_body_typeschema_Velocity_Tfloat3Type_000000 struct {
	//	Specifies the initial linear velocity of the rigid_body instance.
	Velocity Tfloat3Type `xml:"http://www.collada.org/2008/03/COLLADASchema velocity"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_velocitysequencetechnique_commonsequenceinstance_rigid_body_typeschema_Velocity_Tfloat3Type_000000 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_velocitysequencetechnique_commonsequenceinstance_rigid_body_typeschema_Velocity_Tfloat3Type_000000 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_velocitysequencetechnique_commonsequenceinstance_rigid_body_typeschema_Velocity_Tfloat3Type_000000 instance.
func (me *XsdGoPkgHasElem_velocitysequencetechnique_commonsequenceinstance_rigid_body_typeschema_Velocity_Tfloat3Type_000000) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_velocitysequencetechnique_commonsequenceinstance_rigid_body_typeschema_Velocity_Tfloat3Type_000000; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for Velocity -- "0.0 0.0 0.0"
func (me XsdGoPkgHasElem_velocitysequencetechnique_commonsequenceinstance_rigid_body_typeschema_Velocity_Tfloat3Type_000000) VelocityDefault() Tfloat3Type {
	return Tfloat3Type("0.0 0.0 0.0")
}

type TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame struct {
	XsdGoPkgHasElems_translatechoiceattachment_endchoicesequencelink_typeschema_Translate_TtranslateType_

	XsdGoPkgHasElems_rotatechoiceattachment_endchoicesequencelink_typeschema_Rotate_TrotateType_
}

//	If the WalkHandlers.TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame function is not nil (ie. was set by outside code), calls it with this TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame instance.
func (me *TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame) Walk() (err error) {
	if fn := WalkHandlers.TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_rotatechoiceattachment_endchoicesequencelink_typeschema_Rotate_TrotateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_translatechoiceattachment_endchoicesequencelink_typeschema_Translate_TtranslateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_mass_framesequencetechnique_commonsequenceinstance_rigid_body_typeschema_MassFrame_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame_ struct {
	MassFrame *TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame `xml:"http://www.collada.org/2008/03/COLLADASchema mass_frame"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_mass_framesequencetechnique_commonsequenceinstance_rigid_body_typeschema_MassFrame_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mass_framesequencetechnique_commonsequenceinstance_rigid_body_typeschema_MassFrame_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_mass_framesequencetechnique_commonsequenceinstance_rigid_body_typeschema_MassFrame_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame_ instance.
func (me *XsdGoPkgHasElem_mass_framesequencetechnique_commonsequenceinstance_rigid_body_typeschema_MassFrame_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_mass_framesequencetechnique_commonsequenceinstance_rigid_body_typeschema_MassFrame_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MassFrame.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdInstanceRigidBodyTypeSequenceTechniqueCommon struct {
	//	Specifies the initial angular velocity of the rigid_body instance in degrees per second
	//	around each axis, in the form of an X-Y-Z Euler rotation.
	XsdGoPkgHasElem_angular_velocitysequencetechnique_commonsequenceinstance_rigid_body_typeschema_AngularVelocity_Tfloat3Type_000000

	XsdGoPkgHasElem_inertiasequencetechnique_commonsequenceinstance_rigid_body_typeschema_Inertia_TtargetableFloat3Type_

	XsdGoPkgHasElem_masssequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Mass_TtargetableFloatType_

	//	Specifies the initial linear velocity of the rigid_body instance.
	XsdGoPkgHasElem_velocitysequencetechnique_commonsequenceinstance_rigid_body_typeschema_Velocity_Tfloat3Type_000000

	XsdGoPkgHasElem_mass_framesequencetechnique_commonsequenceinstance_rigid_body_typeschema_MassFrame_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame_

	XsdGoPkgHasElem_physics_materialchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_PhysicsMaterial_TphysicsMaterialType_

	XsdGoPkgHasElems_shapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Shape_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShape_

	XsdGoPkgHasElem_dynamicsequencetechnique_commonsequenceinstance_rigid_body_typeschema_Dynamic_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceDynamic_True

	XsdGoPkgHasElem_instance_physics_materialchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_InstancePhysicsMaterial_TinstancePhysicsMaterialType_
}

//	If the WalkHandlers.TxsdInstanceRigidBodyTypeSequenceTechniqueCommon function is not nil (ie. was set by outside code), calls it with this TxsdInstanceRigidBodyTypeSequenceTechniqueCommon instance as the single argument. Then calls the Walk() method on 9/9 embed(s) and 0/0 field(s) belonging to this TxsdInstanceRigidBodyTypeSequenceTechniqueCommon instance.
func (me *TxsdInstanceRigidBodyTypeSequenceTechniqueCommon) Walk() (err error) {
	if fn := WalkHandlers.TxsdInstanceRigidBodyTypeSequenceTechniqueCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_dynamicsequencetechnique_commonsequenceinstance_rigid_body_typeschema_Dynamic_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceDynamic_True.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_instance_physics_materialchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_InstancePhysicsMaterial_TinstancePhysicsMaterialType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_angular_velocitysequencetechnique_commonsequenceinstance_rigid_body_typeschema_AngularVelocity_Tfloat3Type_000000.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_inertiasequencetechnique_commonsequenceinstance_rigid_body_typeschema_Inertia_TtargetableFloat3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_masssequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Mass_TtargetableFloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_velocitysequencetechnique_commonsequenceinstance_rigid_body_typeschema_Velocity_Tfloat3Type_000000.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_mass_framesequencetechnique_commonsequenceinstance_rigid_body_typeschema_MassFrame_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_physics_materialchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_PhysicsMaterial_TphysicsMaterialType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_shapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Shape_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShape_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_technique_commonsequenceinstance_rigid_body_typeschema_TechniqueCommon_TxsdInstanceRigidBodyTypeSequenceTechniqueCommon_ struct {
	//	The technique_common element specifies the instance_rigid_body information for the common
	//	profile which all COLLADA implementations need to support.
	TechniqueCommon *TxsdInstanceRigidBodyTypeSequenceTechniqueCommon `xml:"http://www.collada.org/2008/03/COLLADASchema technique_common"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_technique_commonsequenceinstance_rigid_body_typeschema_TechniqueCommon_TxsdInstanceRigidBodyTypeSequenceTechniqueCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_technique_commonsequenceinstance_rigid_body_typeschema_TechniqueCommon_TxsdInstanceRigidBodyTypeSequenceTechniqueCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_technique_commonsequenceinstance_rigid_body_typeschema_TechniqueCommon_TxsdInstanceRigidBodyTypeSequenceTechniqueCommon_ instance.
func (me *XsdGoPkgHasElem_technique_commonsequenceinstance_rigid_body_typeschema_TechniqueCommon_TxsdInstanceRigidBodyTypeSequenceTechniqueCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_technique_commonsequenceinstance_rigid_body_typeschema_TechniqueCommon_TxsdInstanceRigidBodyTypeSequenceTechniqueCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TechniqueCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TinstanceRigidBodyType struct {
	//	The body attribute indicates which rigid_body to instantiate. Required attribute.
	XsdGoPkgHasAttr_Body_XsdtNCName_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The sid attribute is a text string value containing the sub-identifier of this element. This
	//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_TsidType_

	//	The technique_common element specifies the instance_rigid_body information for the common
	//	profile which all COLLADA implementations need to support.
	XsdGoPkgHasElem_technique_commonsequenceinstance_rigid_body_typeschema_TechniqueCommon_TxsdInstanceRigidBodyTypeSequenceTechniqueCommon_

	//	This element may contain any number of non-common profile techniques.
	XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_

	//	The target attribute indicates which node is influenced by this rigid_body instance.
	//	Required attribute
	XsdGoPkgHasAttr_Target_XsdtAnyURI_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_
}

//	If the WalkHandlers.TinstanceRigidBodyType function is not nil (ie. was set by outside code), calls it with this TinstanceRigidBodyType instance as the single argument. Then calls the Walk() method on 3/7 embed(s) and 0/0 field(s) belonging to this TinstanceRigidBodyType instance.
func (me *TinstanceRigidBodyType) Walk() (err error) {
	if fn := WalkHandlers.TinstanceRigidBodyType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_technique_commonsequenceinstance_rigid_body_typeschema_TechniqueCommon_TxsdInstanceRigidBodyTypeSequenceTechniqueCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_instance_rigid_bodysequenceinstance_physics_model_typeschema_InstanceRigidBody_TinstanceRigidBodyType_ struct {
	//	The instance_physics_model element may instance any number of rigid_body elements.
	RigidBodyInstances []*TinstanceRigidBodyType `xml:"http://www.collada.org/2008/03/COLLADASchema instance_rigid_body"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_instance_rigid_bodysequenceinstance_physics_model_typeschema_InstanceRigidBody_TinstanceRigidBodyType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_instance_rigid_bodysequenceinstance_physics_model_typeschema_InstanceRigidBody_TinstanceRigidBodyType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_instance_rigid_bodysequenceinstance_physics_model_typeschema_InstanceRigidBody_TinstanceRigidBodyType_ instance.
func (me *XsdGoPkgHasElems_instance_rigid_bodysequenceinstance_physics_model_typeschema_InstanceRigidBody_TinstanceRigidBodyType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_instance_rigid_bodysequenceinstance_physics_model_typeschema_InstanceRigidBody_TinstanceRigidBodyType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RigidBodyInstances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TinstancePhysicsModelType struct {
	//	The sid attribute is a text string value containing the sub-identifier of this element. This
	//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_TsidType_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The instance_physics_model element may instance any number of force_field elements.
	XsdGoPkgHasElems_instance_force_fieldsequenceinstance_physics_model_typeschema_InstanceForceField_TinstanceForceFieldType_

	//	The instance_physics_model element may instance any number of rigid_constraint elements.
	XsdGoPkgHasElems_instance_rigid_constraintsequenceinstance_physics_model_typeschema_InstanceRigidConstraint_TinstanceRigidConstraintType_

	//	The parent attribute points to the id of a node in the visual scene. This allows a physics model
	//	to be instantiated under a specific transform node, which will dictate the initial position and
	//	orientation, and could be animated to influence kinematic rigid bodies.
	XsdGoPkgHasAttr_Parent_XsdtAnyURI_

	//	The url attribute refers to resource.  This may refer to a local resource using a relative URL
	//	fragment identifier that begins with the "#" character. The url attribute may refer to an external
	//	resource using an absolute or relative URL.
	XsdGoPkgHasAttr_Url_XsdtAnyURI_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The instance_physics_model element may instance any number of rigid_body elements.
	XsdGoPkgHasElems_instance_rigid_bodysequenceinstance_physics_model_typeschema_InstanceRigidBody_TinstanceRigidBodyType_
}

//	If the WalkHandlers.TinstancePhysicsModelType function is not nil (ie. was set by outside code), calls it with this TinstancePhysicsModelType instance as the single argument. Then calls the Walk() method on 4/8 embed(s) and 0/0 field(s) belonging to this TinstancePhysicsModelType instance.
func (me *TinstancePhysicsModelType) Walk() (err error) {
	if fn := WalkHandlers.TinstancePhysicsModelType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_instance_rigid_bodysequenceinstance_physics_model_typeschema_InstanceRigidBody_TinstanceRigidBodyType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_instance_force_fieldsequenceinstance_physics_model_typeschema_InstanceForceField_TinstanceForceFieldType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_instance_rigid_constraintsequenceinstance_physics_model_typeschema_InstanceRigidConstraint_TinstanceRigidConstraintType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_instance_physics_modelsequencephysics_model_typeschema_InstancePhysicsModel_TinstancePhysicsModelType_ struct {
	//	The physics_model may instance any number of other physics_model elements.
	PhysicsModelInstances []*TinstancePhysicsModelType `xml:"http://www.collada.org/2008/03/COLLADASchema instance_physics_model"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_instance_physics_modelsequencephysics_model_typeschema_InstancePhysicsModel_TinstancePhysicsModelType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_instance_physics_modelsequencephysics_model_typeschema_InstancePhysicsModel_TinstancePhysicsModelType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_instance_physics_modelsequencephysics_model_typeschema_InstancePhysicsModel_TinstancePhysicsModelType_ instance.
func (me *XsdGoPkgHasElems_instance_physics_modelsequencephysics_model_typeschema_InstancePhysicsModel_TinstancePhysicsModelType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_instance_physics_modelsequencephysics_model_typeschema_InstancePhysicsModel_TinstancePhysicsModelType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PhysicsModelInstances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The physics_model may define any number of rigid_constraint elements.
//	This element allows for connecting components, such as rigid_body into complex physics models
//	with moveable parts.
//	Defines the attachment (to a rigid_body or a node) to be used as the reference-frame.
//	The "rigid_body" attribute is a relative reference to a rigid-body within the same
//	physics_model.
type XsdGoPkgHasAttr_RigidBody_XsdtAnyURI_ struct {
	//	The "rigid_body" attribute is a relative reference to a rigid-body within the same
	//	physics_model.
	RigidBody xsdt.AnyURI `xml:"http://www.collada.org/2008/03/COLLADASchema rigid_body,attr"`
}

type TxsdRigidConstraintTypeSequenceRefAttachment struct {
	//	The "rigid_body" attribute is a relative reference to a rigid-body within the same
	//	physics_model.
	XsdGoPkgHasAttr_RigidBody_XsdtAnyURI_

	//	Allows you to "position" the attachment point.
	XsdGoPkgHasElems_rotatechoiceattachment_endchoicesequencelink_typeschema_Rotate_TrotateType_

	//	Allows you to "position" the attachment point.
	XsdGoPkgHasElems_translatechoiceattachment_endchoicesequencelink_typeschema_Translate_TtranslateType_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_
}

//	If the WalkHandlers.TxsdRigidConstraintTypeSequenceRefAttachment function is not nil (ie. was set by outside code), calls it with this TxsdRigidConstraintTypeSequenceRefAttachment instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TxsdRigidConstraintTypeSequenceRefAttachment instance.
func (me *TxsdRigidConstraintTypeSequenceRefAttachment) Walk() (err error) {
	if fn := WalkHandlers.TxsdRigidConstraintTypeSequenceRefAttachment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_rotatechoiceattachment_endchoicesequencelink_typeschema_Rotate_TrotateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_translatechoiceattachment_endchoicesequencelink_typeschema_Translate_TtranslateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ref_attachmentsequencerigid_constraint_typeschema_RefAttachment_TxsdRigidConstraintTypeSequenceRefAttachment_ struct {
	//	Defines the attachment (to a rigid_body or a node) to be used as the reference-frame.
	RefAttachment *TxsdRigidConstraintTypeSequenceRefAttachment `xml:"http://www.collada.org/2008/03/COLLADASchema ref_attachment"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ref_attachmentsequencerigid_constraint_typeschema_RefAttachment_TxsdRigidConstraintTypeSequenceRefAttachment_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ref_attachmentsequencerigid_constraint_typeschema_RefAttachment_TxsdRigidConstraintTypeSequenceRefAttachment_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ref_attachmentsequencerigid_constraint_typeschema_RefAttachment_TxsdRigidConstraintTypeSequenceRefAttachment_ instance.
func (me *XsdGoPkgHasElem_ref_attachmentsequencerigid_constraint_typeschema_RefAttachment_TxsdRigidConstraintTypeSequenceRefAttachment_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ref_attachmentsequencerigid_constraint_typeschema_RefAttachment_TxsdRigidConstraintTypeSequenceRefAttachment_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RefAttachment.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The technique_common element specifies the rigid_constraint information for the common profile
//	which all COLLADA implementations need to support.
//	The limits element provides a flexible way to specify the constraint limits (degrees of freedom
//	and ranges).
//	The linear element describes linear (translational) limits along each axis.
//	The minimum values for the limit.
type XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_Min_TtargetableFloat3Type_000000 struct {
	//	The minimum values for the limit.
	Min *TtargetableFloat3Type `xml:"http://www.collada.org/2008/03/COLLADASchema min"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_Min_TtargetableFloat3Type_000000 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_Min_TtargetableFloat3Type_000000 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_Min_TtargetableFloat3Type_000000 instance.
func (me *XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_Min_TtargetableFloat3Type_000000) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_Min_TtargetableFloat3Type_000000; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Min.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for Min -- "0.0 0.0 0.0"
func (me XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_Min_TtargetableFloat3Type_000000) MinDefault() Tfloat3Type {
	return Tfloat3Type("0.0 0.0 0.0")
}

//	The maximum values for the limit.
type XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_Max_TtargetableFloat3Type_000000 struct {
	//	The maximum values for the limit.
	Max *TtargetableFloat3Type `xml:"http://www.collada.org/2008/03/COLLADASchema max"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_Max_TtargetableFloat3Type_000000 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_Max_TtargetableFloat3Type_000000 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_Max_TtargetableFloat3Type_000000 instance.
func (me *XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_Max_TtargetableFloat3Type_000000) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_Max_TtargetableFloat3Type_000000; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Max.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for Max -- "0.0 0.0 0.0"
func (me XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_Max_TtargetableFloat3Type_000000) MaxDefault() Tfloat3Type {
	return Tfloat3Type("0.0 0.0 0.0")
}

type TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceLinear struct {
	//	The maximum values for the limit.
	XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_Max_TtargetableFloat3Type_000000

	//	The minimum values for the limit.
	XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_Min_TtargetableFloat3Type_000000
}

//	If the WalkHandlers.TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceLinear function is not nil (ie. was set by outside code), calls it with this TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceLinear instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceLinear instance.
func (me *TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceLinear) Walk() (err error) {
	if fn := WalkHandlers.TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceLinear; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_Min_TtargetableFloat3Type_000000.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_Max_TtargetableFloat3Type_000000.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_linearsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_Linear_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceLinear_ struct {
	//	The linear element describes linear (translational) limits along each axis.
	Linear *TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceLinear `xml:"http://www.collada.org/2008/03/COLLADASchema linear"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_linearsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_Linear_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceLinear_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_linearsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_Linear_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceLinear_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_linearsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_Linear_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceLinear_ instance.
func (me *XsdGoPkgHasElem_linearsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_Linear_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceLinear_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_linearsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_Linear_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceLinear_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Linear.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The swing_cone_and_twist element describes the angular limits along each rotation axis in degrees.
//	The the X and Y limits describe a "swing cone" and the Z limits describe the "twist angle" range
type TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist struct {
	//	The maximum values for the limit.
	XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_Max_TtargetableFloat3Type_000000

	//	The minimum values for the limit.
	XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_Min_TtargetableFloat3Type_000000
}

//	If the WalkHandlers.TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist function is not nil (ie. was set by outside code), calls it with this TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist instance.
func (me *TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist) Walk() (err error) {
	if fn := WalkHandlers.TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_Min_TtargetableFloat3Type_000000.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_Max_TtargetableFloat3Type_000000.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_swing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_SwingConeAndTwist_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist_ struct {
	//	The swing_cone_and_twist element describes the angular limits along each rotation axis in degrees.
	//	The the X and Y limits describe a "swing cone" and the Z limits describe the "twist angle" range
	SwingConeAndTwist *TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist `xml:"http://www.collada.org/2008/03/COLLADASchema swing_cone_and_twist"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_swing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_SwingConeAndTwist_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_swing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_SwingConeAndTwist_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_swing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_SwingConeAndTwist_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist_ instance.
func (me *XsdGoPkgHasElem_swing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_SwingConeAndTwist_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_swing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_SwingConeAndTwist_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SwingConeAndTwist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimits struct {
	//	The linear element describes linear (translational) limits along each axis.
	XsdGoPkgHasElem_linearsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_Linear_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceLinear_

	//	The swing_cone_and_twist element describes the angular limits along each rotation axis in degrees.
	//	The the X and Y limits describe a "swing cone" and the Z limits describe the "twist angle" range
	XsdGoPkgHasElem_swing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_SwingConeAndTwist_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist_
}

//	If the WalkHandlers.TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimits function is not nil (ie. was set by outside code), calls it with this TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimits instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimits instance.
func (me *TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimits) Walk() (err error) {
	if fn := WalkHandlers.TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimits; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_linearsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_Linear_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceLinear_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_swing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_SwingConeAndTwist_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_limitssequencetechnique_commonsequencerigid_constraint_typeschema_Limits_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimits_ struct {
	//	The limits element provides a flexible way to specify the constraint limits (degrees of freedom
	//	and ranges).
	Limits *TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimits `xml:"http://www.collada.org/2008/03/COLLADASchema limits"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_limitssequencetechnique_commonsequencerigid_constraint_typeschema_Limits_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimits_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_limitssequencetechnique_commonsequencerigid_constraint_typeschema_Limits_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimits_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_limitssequencetechnique_commonsequencerigid_constraint_typeschema_Limits_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimits_ instance.
func (me *XsdGoPkgHasElem_limitssequencetechnique_commonsequencerigid_constraint_typeschema_Limits_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimits_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_limitssequencetechnique_commonsequencerigid_constraint_typeschema_Limits_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimits_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Limits.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Spring, based on distance ("LINEAR") or angle ("ANGULAR").
//	The angular spring properties.
//	The stiffness (also called spring coefficient) has units of force/angle in degrees.
type XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Stiffness_TtargetableFloatType_10 struct {
	//	The stiffness (also called spring coefficient) has units of force/angle in degrees.
	Stiffness *TtargetableFloatType `xml:"http://www.collada.org/2008/03/COLLADASchema stiffness"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Stiffness_TtargetableFloatType_10 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Stiffness_TtargetableFloatType_10 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Stiffness_TtargetableFloatType_10 instance.
func (me *XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Stiffness_TtargetableFloatType_10) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Stiffness_TtargetableFloatType_10; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Stiffness.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for Stiffness -- 1.0
func (me XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Stiffness_TtargetableFloatType_10) StiffnessDefault() TfloatType {
	return TfloatType(1.0)
}

//	The spring damping coefficient.
type XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Damping_TtargetableFloatType_00 struct {
	//	The spring damping coefficient.
	Damping *TtargetableFloatType `xml:"http://www.collada.org/2008/03/COLLADASchema damping"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Damping_TtargetableFloatType_00 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Damping_TtargetableFloatType_00 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Damping_TtargetableFloatType_00 instance.
func (me *XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Damping_TtargetableFloatType_00) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Damping_TtargetableFloatType_00; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Damping.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for Damping -- 0.0
func (me XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Damping_TtargetableFloatType_00) DampingDefault() TfloatType {
	return TfloatType(0.0)
}

//	The spring's target or resting distance.
type XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_TargetValue_TtargetableFloatType_00 struct {
	//	The spring's target or resting distance.
	TargetValue *TtargetableFloatType `xml:"http://www.collada.org/2008/03/COLLADASchema target_value"`
}

//	Returns the default value for TargetValue -- 0.0
func (me XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_TargetValue_TtargetableFloatType_00) TargetValueDefault() TfloatType {
	return TfloatType(0.0)
}

//	If the WalkHandlers.XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_TargetValue_TtargetableFloatType_00 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_TargetValue_TtargetableFloatType_00 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_TargetValue_TtargetableFloatType_00 instance.
func (me *XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_TargetValue_TtargetableFloatType_00) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_TargetValue_TtargetableFloatType_00; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TargetValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceAngular struct {
	//	The stiffness (also called spring coefficient) has units of force/angle in degrees.
	XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Stiffness_TtargetableFloatType_10

	//	The spring damping coefficient.
	XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Damping_TtargetableFloatType_00

	//	The spring's target or resting distance.
	XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_TargetValue_TtargetableFloatType_00
}

//	If the WalkHandlers.TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceAngular function is not nil (ie. was set by outside code), calls it with this TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceAngular instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceAngular instance.
func (me *TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceAngular) Walk() (err error) {
	if fn := WalkHandlers.TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceAngular; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_TargetValue_TtargetableFloatType_00.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Stiffness_TtargetableFloatType_10.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Damping_TtargetableFloatType_00.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_angularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Angular_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceAngular_ struct {
	//	The angular spring properties.
	Angular *TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceAngular `xml:"http://www.collada.org/2008/03/COLLADASchema angular"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_angularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Angular_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceAngular_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_angularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Angular_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceAngular_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_angularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Angular_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceAngular_ instance.
func (me *XsdGoPkgHasElem_angularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Angular_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceAngular_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_angularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Angular_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceAngular_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Angular.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The linear spring properties.
type TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceLinear struct {
	//	The stiffness (also called spring coefficient) has units of force/distance.
	XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Stiffness_TtargetableFloatType_10

	//	The spring damping coefficient.
	XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Damping_TtargetableFloatType_00

	//	The spring's target or resting distance.
	XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_TargetValue_TtargetableFloatType_00
}

//	If the WalkHandlers.TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceLinear function is not nil (ie. was set by outside code), calls it with this TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceLinear instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceLinear instance.
func (me *TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceLinear) Walk() (err error) {
	if fn := WalkHandlers.TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceLinear; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Damping_TtargetableFloatType_00.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_TargetValue_TtargetableFloatType_00.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Stiffness_TtargetableFloatType_10.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_linearsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Linear_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceLinear_ struct {
	//	The linear spring properties.
	Linear *TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceLinear `xml:"http://www.collada.org/2008/03/COLLADASchema linear"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_linearsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Linear_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceLinear_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_linearsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Linear_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceLinear_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_linearsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Linear_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceLinear_ instance.
func (me *XsdGoPkgHasElem_linearsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Linear_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceLinear_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_linearsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Linear_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceLinear_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Linear.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpring struct {
	//	The angular spring properties.
	XsdGoPkgHasElem_angularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Angular_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceAngular_

	//	The linear spring properties.
	XsdGoPkgHasElem_linearsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Linear_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceLinear_
}

//	If the WalkHandlers.TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpring function is not nil (ie. was set by outside code), calls it with this TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpring instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpring instance.
func (me *TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpring) Walk() (err error) {
	if fn := WalkHandlers.TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpring; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_angularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Angular_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceAngular_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_linearsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Linear_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceLinear_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_springsequencetechnique_commonsequencerigid_constraint_typeschema_Spring_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpring_ struct {
	//	Spring, based on distance ("LINEAR") or angle ("ANGULAR").
	Spring *TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpring `xml:"http://www.collada.org/2008/03/COLLADASchema spring"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_springsequencetechnique_commonsequencerigid_constraint_typeschema_Spring_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpring_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_springsequencetechnique_commonsequencerigid_constraint_typeschema_Spring_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpring_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_springsequencetechnique_commonsequencerigid_constraint_typeschema_Spring_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpring_ instance.
func (me *XsdGoPkgHasElem_springsequencetechnique_commonsequencerigid_constraint_typeschema_Spring_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpring_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_springsequencetechnique_commonsequencerigid_constraint_typeschema_Spring_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpring_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Spring.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	If false, the constraint doesn't exert any force or influence on the rigid bodies.
type XsdGoPkgHasElem_enabledsequencetechnique_commonsequencerigid_constraint_typeschema_Enabled_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceEnabled_True struct {
	//	If false, the constraint doesn't exert any force or influence on the rigid bodies.
	Enabled *TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShapeSequenceHollow `xml:"http://www.collada.org/2008/03/COLLADASchema enabled"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_enabledsequencetechnique_commonsequencerigid_constraint_typeschema_Enabled_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceEnabled_True function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_enabledsequencetechnique_commonsequencerigid_constraint_typeschema_Enabled_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceEnabled_True instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_enabledsequencetechnique_commonsequencerigid_constraint_typeschema_Enabled_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceEnabled_True instance.
func (me *XsdGoPkgHasElem_enabledsequencetechnique_commonsequencerigid_constraint_typeschema_Enabled_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceEnabled_True) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_enabledsequencetechnique_commonsequencerigid_constraint_typeschema_Enabled_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceEnabled_True; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Enabled.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for Enabled -- true
func (me XsdGoPkgHasElem_enabledsequencetechnique_commonsequencerigid_constraint_typeschema_Enabled_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceEnabled_True) EnabledDefault() xsdt.Boolean {
	return xsdt.Boolean(true)
}

//	Indicates whether the attached rigid bodies may inter-penetrate.
type XsdGoPkgHasElem_interpenetratesequencetechnique_commonsequencerigid_constraint_typeschema_Interpenetrate_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceInterpenetrate_False struct {
	//	Indicates whether the attached rigid bodies may inter-penetrate.
	Interpenetrate *TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShapeSequenceHollow `xml:"http://www.collada.org/2008/03/COLLADASchema interpenetrate"`
}

//	Returns the default value for Interpenetrate -- false
func (me XsdGoPkgHasElem_interpenetratesequencetechnique_commonsequencerigid_constraint_typeschema_Interpenetrate_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceInterpenetrate_False) InterpenetrateDefault() xsdt.Boolean {
	return xsdt.Boolean(false)
}

//	If the WalkHandlers.XsdGoPkgHasElem_interpenetratesequencetechnique_commonsequencerigid_constraint_typeschema_Interpenetrate_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceInterpenetrate_False function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_interpenetratesequencetechnique_commonsequencerigid_constraint_typeschema_Interpenetrate_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceInterpenetrate_False instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_interpenetratesequencetechnique_commonsequencerigid_constraint_typeschema_Interpenetrate_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceInterpenetrate_False instance.
func (me *XsdGoPkgHasElem_interpenetratesequencetechnique_commonsequencerigid_constraint_typeschema_Interpenetrate_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceInterpenetrate_False) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_interpenetratesequencetechnique_commonsequencerigid_constraint_typeschema_Interpenetrate_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceInterpenetrate_False; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Interpenetrate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRigidConstraintTypeSequenceTechniqueCommon struct {
	//	Spring, based on distance ("LINEAR") or angle ("ANGULAR").
	XsdGoPkgHasElem_springsequencetechnique_commonsequencerigid_constraint_typeschema_Spring_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpring_

	//	If false, the constraint doesn't exert any force or influence on the rigid bodies.
	XsdGoPkgHasElem_enabledsequencetechnique_commonsequencerigid_constraint_typeschema_Enabled_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceEnabled_True

	//	Indicates whether the attached rigid bodies may inter-penetrate.
	XsdGoPkgHasElem_interpenetratesequencetechnique_commonsequencerigid_constraint_typeschema_Interpenetrate_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceInterpenetrate_False

	//	The limits element provides a flexible way to specify the constraint limits (degrees of freedom
	//	and ranges).
	XsdGoPkgHasElem_limitssequencetechnique_commonsequencerigid_constraint_typeschema_Limits_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimits_
}

//	If the WalkHandlers.TxsdRigidConstraintTypeSequenceTechniqueCommon function is not nil (ie. was set by outside code), calls it with this TxsdRigidConstraintTypeSequenceTechniqueCommon instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdRigidConstraintTypeSequenceTechniqueCommon instance.
func (me *TxsdRigidConstraintTypeSequenceTechniqueCommon) Walk() (err error) {
	if fn := WalkHandlers.TxsdRigidConstraintTypeSequenceTechniqueCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_springsequencetechnique_commonsequencerigid_constraint_typeschema_Spring_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpring_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_enabledsequencetechnique_commonsequencerigid_constraint_typeschema_Enabled_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceEnabled_True.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_interpenetratesequencetechnique_commonsequencerigid_constraint_typeschema_Interpenetrate_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceInterpenetrate_False.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_limitssequencetechnique_commonsequencerigid_constraint_typeschema_Limits_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimits_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_technique_commonsequencerigid_constraint_typeschema_TechniqueCommon_TxsdRigidConstraintTypeSequenceTechniqueCommon_ struct {
	//	The technique_common element specifies the rigid_constraint information for the common profile
	//	which all COLLADA implementations need to support.
	TechniqueCommon *TxsdRigidConstraintTypeSequenceTechniqueCommon `xml:"http://www.collada.org/2008/03/COLLADASchema technique_common"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_technique_commonsequencerigid_constraint_typeschema_TechniqueCommon_TxsdRigidConstraintTypeSequenceTechniqueCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_technique_commonsequencerigid_constraint_typeschema_TechniqueCommon_TxsdRigidConstraintTypeSequenceTechniqueCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_technique_commonsequencerigid_constraint_typeschema_TechniqueCommon_TxsdRigidConstraintTypeSequenceTechniqueCommon_ instance.
func (me *XsdGoPkgHasElem_technique_commonsequencerigid_constraint_typeschema_TechniqueCommon_TxsdRigidConstraintTypeSequenceTechniqueCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_technique_commonsequencerigid_constraint_typeschema_TechniqueCommon_TxsdRigidConstraintTypeSequenceTechniqueCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TechniqueCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Defines an attachment to a rigid-body or a node.
type TxsdRigidConstraintTypeSequenceAttachment struct {
	//	The "rigid_body" attribute is a relative reference to a rigid-body within the same physics_model.
	XsdGoPkgHasAttr_RigidBody_XsdtAnyURI_

	//	Allows you to "position" the attachment point.
	XsdGoPkgHasElems_rotatechoiceattachment_endchoicesequencelink_typeschema_Rotate_TrotateType_

	//	Allows you to "position" the attachment point.
	XsdGoPkgHasElems_translatechoiceattachment_endchoicesequencelink_typeschema_Translate_TtranslateType_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_
}

//	If the WalkHandlers.TxsdRigidConstraintTypeSequenceAttachment function is not nil (ie. was set by outside code), calls it with this TxsdRigidConstraintTypeSequenceAttachment instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TxsdRigidConstraintTypeSequenceAttachment instance.
func (me *TxsdRigidConstraintTypeSequenceAttachment) Walk() (err error) {
	if fn := WalkHandlers.TxsdRigidConstraintTypeSequenceAttachment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_rotatechoiceattachment_endchoicesequencelink_typeschema_Rotate_TrotateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_translatechoiceattachment_endchoicesequencelink_typeschema_Translate_TtranslateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_attachmentsequencerigid_constraint_typeschema_Attachment_TxsdRigidConstraintTypeSequenceAttachment_ struct {
	//	Defines an attachment to a rigid-body or a node.
	Attachment *TxsdRigidConstraintTypeSequenceAttachment `xml:"http://www.collada.org/2008/03/COLLADASchema attachment"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_attachmentsequencerigid_constraint_typeschema_Attachment_TxsdRigidConstraintTypeSequenceAttachment_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_attachmentsequencerigid_constraint_typeschema_Attachment_TxsdRigidConstraintTypeSequenceAttachment_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_attachmentsequencerigid_constraint_typeschema_Attachment_TxsdRigidConstraintTypeSequenceAttachment_ instance.
func (me *XsdGoPkgHasElem_attachmentsequencerigid_constraint_typeschema_Attachment_TxsdRigidConstraintTypeSequenceAttachment_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_attachmentsequencerigid_constraint_typeschema_Attachment_TxsdRigidConstraintTypeSequenceAttachment_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Attachment.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TrigidConstraintType struct {
	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_TsidType_

	//	Defines the attachment (to a rigid_body or a node) to be used as the reference-frame.
	XsdGoPkgHasElem_ref_attachmentsequencerigid_constraint_typeschema_RefAttachment_TxsdRigidConstraintTypeSequenceRefAttachment_

	//	This element may contain any number of non-common profile techniques.
	XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The technique_common element specifies the rigid_constraint information for the common profile
	//	which all COLLADA implementations need to support.
	XsdGoPkgHasElem_technique_commonsequencerigid_constraint_typeschema_TechniqueCommon_TxsdRigidConstraintTypeSequenceTechniqueCommon_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	Defines an attachment to a rigid-body or a node.
	XsdGoPkgHasElem_attachmentsequencerigid_constraint_typeschema_Attachment_TxsdRigidConstraintTypeSequenceAttachment_
}

//	If the WalkHandlers.TrigidConstraintType function is not nil (ie. was set by outside code), calls it with this TrigidConstraintType instance as the single argument. Then calls the Walk() method on 5/7 embed(s) and 0/0 field(s) belonging to this TrigidConstraintType instance.
func (me *TrigidConstraintType) Walk() (err error) {
	if fn := WalkHandlers.TrigidConstraintType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ref_attachmentsequencerigid_constraint_typeschema_RefAttachment_TxsdRigidConstraintTypeSequenceRefAttachment_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_technique_commonsequencerigid_constraint_typeschema_TechniqueCommon_TxsdRigidConstraintTypeSequenceTechniqueCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_attachmentsequencerigid_constraint_typeschema_Attachment_TxsdRigidConstraintTypeSequenceAttachment_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_rigid_constraintsequencephysics_model_typeschema_RigidConstraint_TrigidConstraintType_ struct {
	//	The physics_model may define any number of rigid_constraint elements.
	RigidConstraints []*TrigidConstraintType `xml:"http://www.collada.org/2008/03/COLLADASchema rigid_constraint"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_rigid_constraintsequencephysics_model_typeschema_RigidConstraint_TrigidConstraintType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_rigid_constraintsequencephysics_model_typeschema_RigidConstraint_TrigidConstraintType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_rigid_constraintsequencephysics_model_typeschema_RigidConstraint_TrigidConstraintType_ instance.
func (me *XsdGoPkgHasElems_rigid_constraintsequencephysics_model_typeschema_RigidConstraint_TrigidConstraintType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_rigid_constraintsequencephysics_model_typeschema_RigidConstraint_TrigidConstraintType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RigidConstraints {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The physics_model may define any number of rigid_body elements.
//	This element allows for describing simulated bodies that do not deform. These bodies may or may
//	not be connected by constraints (hinge, ball-joint etc.).  Rigid-bodies, constraints etc. are
//	encapsulated in physics_model elements to allow for instantiating complex models.
//	The technique_common element specifies the rigid_body information for the common profile which all
//	COLLADA implementations need to support.
//	This element allows for describing components of a rigid_body.
//	If true, the mass is distributed along the surface of the shape
type XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequencerigid_body_typeschema_Hollow_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceShapeSequenceHollow_ struct {
	//	If true, the mass is distributed along the surface of the shape
	Hollow *TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShapeSequenceHollow `xml:"http://www.collada.org/2008/03/COLLADASchema hollow"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequencerigid_body_typeschema_Hollow_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceShapeSequenceHollow_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequencerigid_body_typeschema_Hollow_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceShapeSequenceHollow_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequencerigid_body_typeschema_Hollow_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceShapeSequenceHollow_ instance.
func (me *XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequencerigid_body_typeschema_Hollow_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceShapeSequenceHollow_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequencerigid_body_typeschema_Hollow_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceShapeSequenceHollow_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Hollow.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRigidBodyTypeSequenceTechniqueCommonSequenceShape struct {
	//	Defines a plane to use for this shape.
	XsdGoPkgHasElem_planechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Plane_TplaneType_

	//	Instances a geometry to use to define this shape.
	XsdGoPkgHasElem_instance_geometrychoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_InstanceGeometry_TinstanceGeometryType_

	//	Defines a box to use for this shape.
	XsdGoPkgHasElem_boxchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Box_TboxType_

	//	Defines a sphere to use for this shape.
	XsdGoPkgHasElem_spherechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Sphere_TsphereType_

	//	Defines a physics_material for the shape.
	XsdGoPkgHasElem_physics_materialchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_PhysicsMaterial_TphysicsMaterialType_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	Defines a cyliner to use for this shape.
	XsdGoPkgHasElem_cylinderchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Cylinder_TcylinderType_

	//	The density of the shape.
	XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Density_TtargetableFloatType_

	//	Defines a capsule to use for this shape.
	XsdGoPkgHasElem_capsulechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Capsule_TcapsuleType_

	//	The mass of the shape.
	XsdGoPkgHasElem_masssequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Mass_TtargetableFloatType_

	//	Allows a tranformation for the shape.
	XsdGoPkgHasElems_translatechoiceattachment_endchoicesequencelink_typeschema_Translate_TtranslateType_

	//	References a physics_material for the shape.
	XsdGoPkgHasElem_instance_physics_materialchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_InstancePhysicsMaterial_TinstancePhysicsMaterialType_

	//	Allows a tranformation for the shape.
	XsdGoPkgHasElems_rotatechoiceattachment_endchoicesequencelink_typeschema_Rotate_TrotateType_

	//	If true, the mass is distributed along the surface of the shape
	XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequencerigid_body_typeschema_Hollow_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceShapeSequenceHollow_
}

//	If the WalkHandlers.TxsdRigidBodyTypeSequenceTechniqueCommonSequenceShape function is not nil (ie. was set by outside code), calls it with this TxsdRigidBodyTypeSequenceTechniqueCommonSequenceShape instance as the single argument. Then calls the Walk() method on 14/14 embed(s) and 0/0 field(s) belonging to this TxsdRigidBodyTypeSequenceTechniqueCommonSequenceShape instance.
func (me *TxsdRigidBodyTypeSequenceTechniqueCommonSequenceShape) Walk() (err error) {
	if fn := WalkHandlers.TxsdRigidBodyTypeSequenceTechniqueCommonSequenceShape; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_planechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Plane_TplaneType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_instance_geometrychoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_InstanceGeometry_TinstanceGeometryType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_boxchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Box_TboxType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_spherechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Sphere_TsphereType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_physics_materialchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_PhysicsMaterial_TphysicsMaterialType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_cylinderchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Cylinder_TcylinderType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Density_TtargetableFloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_capsulechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Capsule_TcapsuleType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_masssequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Mass_TtargetableFloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_translatechoiceattachment_endchoicesequencelink_typeschema_Translate_TtranslateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_instance_physics_materialchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_InstancePhysicsMaterial_TinstancePhysicsMaterialType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_rotatechoiceattachment_endchoicesequencelink_typeschema_Rotate_TrotateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequencerigid_body_typeschema_Hollow_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceShapeSequenceHollow_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_shapesequencetechnique_commonsequencerigid_body_typeschema_Shape_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceShape_ struct {
	//	This element allows for describing components of a rigid_body.
	Shapes []*TxsdRigidBodyTypeSequenceTechniqueCommonSequenceShape `xml:"http://www.collada.org/2008/03/COLLADASchema shape"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_shapesequencetechnique_commonsequencerigid_body_typeschema_Shape_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceShape_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_shapesequencetechnique_commonsequencerigid_body_typeschema_Shape_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceShape_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_shapesequencetechnique_commonsequencerigid_body_typeschema_Shape_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceShape_ instance.
func (me *XsdGoPkgHasElems_shapesequencetechnique_commonsequencerigid_body_typeschema_Shape_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceShape_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_shapesequencetechnique_commonsequencerigid_body_typeschema_Shape_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceShape_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Shapes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	If false, the rigid_body is not moveable
type XsdGoPkgHasElem_dynamicsequencetechnique_commonsequencerigid_body_typeschema_Dynamic_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceDynamic_ struct {
	//	If false, the rigid_body is not moveable
	Dynamic *TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShapeSequenceHollow `xml:"http://www.collada.org/2008/03/COLLADASchema dynamic"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_dynamicsequencetechnique_commonsequencerigid_body_typeschema_Dynamic_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceDynamic_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_dynamicsequencetechnique_commonsequencerigid_body_typeschema_Dynamic_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceDynamic_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_dynamicsequencetechnique_commonsequencerigid_body_typeschema_Dynamic_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceDynamic_ instance.
func (me *XsdGoPkgHasElem_dynamicsequencetechnique_commonsequencerigid_body_typeschema_Dynamic_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceDynamic_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_dynamicsequencetechnique_commonsequencerigid_body_typeschema_Dynamic_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceDynamic_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Dynamic.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Defines the center and orientation of mass of the rigid-body relative to the local origin of the
//	"root" shape.This makes the off-diagonal elements of the inertia tensor (products of inertia) all
//	0 and allows us to just store the diagonal elements (moments of inertia).
type TxsdRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame struct {
	XsdGoPkgHasElems_rotatechoiceattachment_endchoicesequencelink_typeschema_Rotate_TrotateType_

	XsdGoPkgHasElems_translatechoiceattachment_endchoicesequencelink_typeschema_Translate_TtranslateType_
}

//	If the WalkHandlers.TxsdRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame function is not nil (ie. was set by outside code), calls it with this TxsdRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame instance.
func (me *TxsdRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame) Walk() (err error) {
	if fn := WalkHandlers.TxsdRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_rotatechoiceattachment_endchoicesequencelink_typeschema_Rotate_TrotateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_translatechoiceattachment_endchoicesequencelink_typeschema_Translate_TtranslateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_mass_framesequencetechnique_commonsequencerigid_body_typeschema_MassFrame_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame_ struct {
	//	Defines the center and orientation of mass of the rigid-body relative to the local origin of the
	//	"root" shape.This makes the off-diagonal elements of the inertia tensor (products of inertia) all
	//	0 and allows us to just store the diagonal elements (moments of inertia).
	MassFrame *TxsdRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame `xml:"http://www.collada.org/2008/03/COLLADASchema mass_frame"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_mass_framesequencetechnique_commonsequencerigid_body_typeschema_MassFrame_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mass_framesequencetechnique_commonsequencerigid_body_typeschema_MassFrame_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_mass_framesequencetechnique_commonsequencerigid_body_typeschema_MassFrame_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame_ instance.
func (me *XsdGoPkgHasElem_mass_framesequencetechnique_commonsequencerigid_body_typeschema_MassFrame_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_mass_framesequencetechnique_commonsequencerigid_body_typeschema_MassFrame_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MassFrame.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRigidBodyTypeSequenceTechniqueCommon struct {
	//	Defines the center and orientation of mass of the rigid-body relative to the local origin of the
	//	"root" shape.This makes the off-diagonal elements of the inertia tensor (products of inertia) all
	//	0 and allows us to just store the diagonal elements (moments of inertia).
	XsdGoPkgHasElem_mass_framesequencetechnique_commonsequencerigid_body_typeschema_MassFrame_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame_

	//	The total mass of the rigid-body
	XsdGoPkgHasElem_masssequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Mass_TtargetableFloatType_

	//	This element allows for describing components of a rigid_body.
	XsdGoPkgHasElems_shapesequencetechnique_commonsequencerigid_body_typeschema_Shape_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceShape_

	//	Defines a physics_material for the rigid_body.
	XsdGoPkgHasElem_physics_materialchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_PhysicsMaterial_TphysicsMaterialType_

	//	float3 - The diagonal elements of the inertia tensor (moments of inertia), which is represented
	//	in the local frame of the center of mass. See above.
	XsdGoPkgHasElem_inertiasequencetechnique_commonsequenceinstance_rigid_body_typeschema_Inertia_TtargetableFloat3Type_

	//	References a physics_material for the rigid_body.
	XsdGoPkgHasElem_instance_physics_materialchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_InstancePhysicsMaterial_TinstancePhysicsMaterialType_

	//	If false, the rigid_body is not moveable
	XsdGoPkgHasElem_dynamicsequencetechnique_commonsequencerigid_body_typeschema_Dynamic_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceDynamic_
}

//	If the WalkHandlers.TxsdRigidBodyTypeSequenceTechniqueCommon function is not nil (ie. was set by outside code), calls it with this TxsdRigidBodyTypeSequenceTechniqueCommon instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TxsdRigidBodyTypeSequenceTechniqueCommon instance.
func (me *TxsdRigidBodyTypeSequenceTechniqueCommon) Walk() (err error) {
	if fn := WalkHandlers.TxsdRigidBodyTypeSequenceTechniqueCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_shapesequencetechnique_commonsequencerigid_body_typeschema_Shape_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceShape_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_physics_materialchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_PhysicsMaterial_TphysicsMaterialType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_inertiasequencetechnique_commonsequenceinstance_rigid_body_typeschema_Inertia_TtargetableFloat3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_instance_physics_materialchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_InstancePhysicsMaterial_TinstancePhysicsMaterialType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_dynamicsequencetechnique_commonsequencerigid_body_typeschema_Dynamic_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceDynamic_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_mass_framesequencetechnique_commonsequencerigid_body_typeschema_MassFrame_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_masssequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Mass_TtargetableFloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_technique_commonsequencerigid_body_typeschema_TechniqueCommon_TxsdRigidBodyTypeSequenceTechniqueCommon_ struct {
	//	The technique_common element specifies the rigid_body information for the common profile which all
	//	COLLADA implementations need to support.
	TechniqueCommon *TxsdRigidBodyTypeSequenceTechniqueCommon `xml:"http://www.collada.org/2008/03/COLLADASchema technique_common"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_technique_commonsequencerigid_body_typeschema_TechniqueCommon_TxsdRigidBodyTypeSequenceTechniqueCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_technique_commonsequencerigid_body_typeschema_TechniqueCommon_TxsdRigidBodyTypeSequenceTechniqueCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_technique_commonsequencerigid_body_typeschema_TechniqueCommon_TxsdRigidBodyTypeSequenceTechniqueCommon_ instance.
func (me *XsdGoPkgHasElem_technique_commonsequencerigid_body_typeschema_TechniqueCommon_TxsdRigidBodyTypeSequenceTechniqueCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_technique_commonsequencerigid_body_typeschema_TechniqueCommon_TxsdRigidBodyTypeSequenceTechniqueCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TechniqueCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TrigidBodyType struct {
	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	XsdGoPkgHasAttr_Id_XsdtId_

	//	The sid attribute is a text string value containing the sub-identifier of this element. This
	//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_TsidType_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	This element may contain any number of non-common profile techniques.
	XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_

	//	The technique_common element specifies the rigid_body information for the common profile which all
	//	COLLADA implementations need to support.
	XsdGoPkgHasElem_technique_commonsequencerigid_body_typeschema_TechniqueCommon_TxsdRigidBodyTypeSequenceTechniqueCommon_
}

//	If the WalkHandlers.TrigidBodyType function is not nil (ie. was set by outside code), calls it with this TrigidBodyType instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TrigidBodyType instance.
func (me *TrigidBodyType) Walk() (err error) {
	if fn := WalkHandlers.TrigidBodyType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_technique_commonsequencerigid_body_typeschema_TechniqueCommon_TxsdRigidBodyTypeSequenceTechniqueCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_rigid_bodysequencephysics_model_typeschema_RigidBody_TrigidBodyType_ struct {
	//	The physics_model may define any number of rigid_body elements.
	RigidBodies []*TrigidBodyType `xml:"http://www.collada.org/2008/03/COLLADASchema rigid_body"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_rigid_bodysequencephysics_model_typeschema_RigidBody_TrigidBodyType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_rigid_bodysequencephysics_model_typeschema_RigidBody_TrigidBodyType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_rigid_bodysequencephysics_model_typeschema_RigidBody_TrigidBodyType_ instance.
func (me *XsdGoPkgHasElems_rigid_bodysequencephysics_model_typeschema_RigidBody_TrigidBodyType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_rigid_bodysequencephysics_model_typeschema_RigidBody_TrigidBodyType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RigidBodies {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TphysicsModelType struct {
	//	The physics_model may instance any number of other physics_model elements.
	XsdGoPkgHasElems_instance_physics_modelsequencephysics_model_typeschema_InstancePhysicsModel_TinstancePhysicsModelType_

	//	The physics_model may define any number of rigid_constraint elements.
	XsdGoPkgHasElems_rigid_constraintsequencephysics_model_typeschema_RigidConstraint_TrigidConstraintType_

	//	The physics_model may define any number of rigid_body elements.
	XsdGoPkgHasElems_rigid_bodysequencephysics_model_typeschema_RigidBody_TrigidBodyType_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The physics_model element may contain an asset element.
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_
}

//	If the WalkHandlers.TphysicsModelType function is not nil (ie. was set by outside code), calls it with this TphysicsModelType instance as the single argument. Then calls the Walk() method on 5/7 embed(s) and 0/0 field(s) belonging to this TphysicsModelType instance.
func (me *TphysicsModelType) Walk() (err error) {
	if fn := WalkHandlers.TphysicsModelType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_rigid_bodysequencephysics_model_typeschema_RigidBody_TrigidBodyType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_instance_physics_modelsequencephysics_model_typeschema_InstancePhysicsModel_TinstancePhysicsModelType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_rigid_constraintsequencephysics_model_typeschema_RigidConstraint_TrigidConstraintType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_physics_modelsequencelibrary_physics_models_typeschema_PhysicsModel_TphysicsModelType_ struct {
	//	There must be at least one physics_model element.
	PhysicsModels []*TphysicsModelType `xml:"http://www.collada.org/2008/03/COLLADASchema physics_model"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_physics_modelsequencelibrary_physics_models_typeschema_PhysicsModel_TphysicsModelType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_physics_modelsequencelibrary_physics_models_typeschema_PhysicsModel_TphysicsModelType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_physics_modelsequencelibrary_physics_models_typeschema_PhysicsModel_TphysicsModelType_ instance.
func (me *XsdGoPkgHasElems_physics_modelsequencelibrary_physics_models_typeschema_PhysicsModel_TphysicsModelType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_physics_modelsequencelibrary_physics_models_typeschema_PhysicsModel_TphysicsModelType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PhysicsModels {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TlibraryPhysicsModelsType struct {
	//	There must be at least one physics_model element.
	XsdGoPkgHasElems_physics_modelsequencelibrary_physics_models_typeschema_PhysicsModel_TphysicsModelType_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The library_physics_models element may contain an asset element.
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_
}

//	If the WalkHandlers.TlibraryPhysicsModelsType function is not nil (ie. was set by outside code), calls it with this TlibraryPhysicsModelsType instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TlibraryPhysicsModelsType instance.
func (me *TlibraryPhysicsModelsType) Walk() (err error) {
	if fn := WalkHandlers.TlibraryPhysicsModelsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_physics_modelsequencelibrary_physics_models_typeschema_PhysicsModel_TphysicsModelType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_library_physics_modelschoicesequenceCOLLADAschema_LibraryPhysicsModels_TlibraryPhysicsModelsType_ struct {
	//	The COLLADA element may contain any
	//	number of library_physics_models
	//	elements.
	PhysicsModelsLibraries []*TlibraryPhysicsModelsType `xml:"http://www.collada.org/2008/03/COLLADASchema library_physics_models"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_library_physics_modelschoicesequenceCOLLADAschema_LibraryPhysicsModels_TlibraryPhysicsModelsType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_library_physics_modelschoicesequenceCOLLADAschema_LibraryPhysicsModels_TlibraryPhysicsModelsType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_library_physics_modelschoicesequenceCOLLADAschema_LibraryPhysicsModels_TlibraryPhysicsModelsType_ instance.
func (me *XsdGoPkgHasElems_library_physics_modelschoicesequenceCOLLADAschema_LibraryPhysicsModels_TlibraryPhysicsModelsType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_library_physics_modelschoicesequenceCOLLADAschema_LibraryPhysicsModels_TlibraryPhysicsModelsType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PhysicsModelsLibraries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The COLLADA element may contain any
//	number of library_animation_clips
//	elements.
//	The library_animation_clips element declares a module of animation_clip elements.
//	There must be at least one animation_clip element.
//	The animation_clip element defines a section of the animation curves to be used together as
//	an animation clip.
//	The animation_clip must instance at least one animation element.
type XsdGoPkgHasElems_instance_animationsequenceanimation_clip_typeschema_InstanceAnimation_TinstanceWithExtraType_ struct {
	//	The animation_clip must instance at least one animation element.
	AnimationInstances []*TinstanceWithExtraType `xml:"http://www.collada.org/2008/03/COLLADASchema instance_animation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_instance_animationsequenceanimation_clip_typeschema_InstanceAnimation_TinstanceWithExtraType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_instance_animationsequenceanimation_clip_typeschema_InstanceAnimation_TinstanceWithExtraType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_instance_animationsequenceanimation_clip_typeschema_InstanceAnimation_TinstanceWithExtraType_ instance.
func (me *XsdGoPkgHasElems_instance_animationsequenceanimation_clip_typeschema_InstanceAnimation_TinstanceWithExtraType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_instance_animationsequenceanimation_clip_typeschema_InstanceAnimation_TinstanceWithExtraType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AnimationInstances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The end attribute is the time in seconds of the end of the clip.  This is used in the
//	same way as the start time.  If end is not specified, the value is taken to be the end
//	time of the longest animation.  Optional attribute.
type XsdGoPkgHasAttr_End_TfloatType_ struct {
	//	The end attribute is the time in seconds of the end of the clip.  This is used in the
	//	same way as the start time.  If end is not specified, the value is taken to be the end
	//	time of the longest animation.  Optional attribute.
	End TfloatType `xml:"http://www.collada.org/2008/03/COLLADASchema end,attr"`
}

//	The start attribute is the time in seconds of the beginning of the clip.  This time is
//	the same as that used in the key-frame data and is used to determine which set of
//	key-frames will be included in the clip.  The start time does not specify when the clip
//	will be played.  If the time falls between two keyframes of a referenced animation, an
//	interpolated value should be used.  The default value is 0.0.  Optional attribute.
type XsdGoPkgHasAttr_Start_TfloatType_00 struct {
	//	The start attribute is the time in seconds of the beginning of the clip.  This time is
	//	the same as that used in the key-frame data and is used to determine which set of
	//	key-frames will be included in the clip.  The start time does not specify when the clip
	//	will be played.  If the time falls between two keyframes of a referenced animation, an
	//	interpolated value should be used.  The default value is 0.0.  Optional attribute.
	Start TfloatType `xml:"http://www.collada.org/2008/03/COLLADASchema start,attr"`
}

//	Returns the default value for Start -- 0.0
func (me XsdGoPkgHasAttr_Start_TfloatType_00) StartDefault() TfloatType { return TfloatType(0.0) }

type TanimationClipType struct {
	//	The animation_clip element may contain an asset element.
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The animation_clip must instance at least one animation element.
	XsdGoPkgHasElems_instance_animationsequenceanimation_clip_typeschema_InstanceAnimation_TinstanceWithExtraType_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	XsdGoPkgHasElems_instance_formulachoicesequencekinematics_model_technique_typeschema_InstanceFormula_TinstanceFormulaType_

	//	The end attribute is the time in seconds of the end of the clip.  This is used in the
	//	same way as the start time.  If end is not specified, the value is taken to be the end
	//	time of the longest animation.  Optional attribute.
	XsdGoPkgHasAttr_End_TfloatType_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The start attribute is the time in seconds of the beginning of the clip.  This time is
	//	the same as that used in the key-frame data and is used to determine which set of
	//	key-frames will be included in the clip.  The start time does not specify when the clip
	//	will be played.  If the time falls between two keyframes of a referenced animation, an
	//	interpolated value should be used.  The default value is 0.0.  Optional attribute.
	XsdGoPkgHasAttr_Start_TfloatType_00
}

//	If the WalkHandlers.TanimationClipType function is not nil (ie. was set by outside code), calls it with this TanimationClipType instance as the single argument. Then calls the Walk() method on 4/8 embed(s) and 0/0 field(s) belonging to this TanimationClipType instance.
func (me *TanimationClipType) Walk() (err error) {
	if fn := WalkHandlers.TanimationClipType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_instance_formulachoicesequencekinematics_model_technique_typeschema_InstanceFormula_TinstanceFormulaType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_instance_animationsequenceanimation_clip_typeschema_InstanceAnimation_TinstanceWithExtraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_animation_clipsequencelibrary_animation_clips_typeschema_AnimationClip_TanimationClipType_ struct {
	//	There must be at least one animation_clip element.
	AnimationClips []*TanimationClipType `xml:"http://www.collada.org/2008/03/COLLADASchema animation_clip"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_animation_clipsequencelibrary_animation_clips_typeschema_AnimationClip_TanimationClipType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_animation_clipsequencelibrary_animation_clips_typeschema_AnimationClip_TanimationClipType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_animation_clipsequencelibrary_animation_clips_typeschema_AnimationClip_TanimationClipType_ instance.
func (me *XsdGoPkgHasElems_animation_clipsequencelibrary_animation_clips_typeschema_AnimationClip_TanimationClipType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_animation_clipsequencelibrary_animation_clips_typeschema_AnimationClip_TanimationClipType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AnimationClips {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TlibraryAnimationClipsType struct {
	//	There must be at least one animation_clip element.
	XsdGoPkgHasElems_animation_clipsequencelibrary_animation_clips_typeschema_AnimationClip_TanimationClipType_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The library_animation_clips element may contain an asset element.
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_
}

//	If the WalkHandlers.TlibraryAnimationClipsType function is not nil (ie. was set by outside code), calls it with this TlibraryAnimationClipsType instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TlibraryAnimationClipsType instance.
func (me *TlibraryAnimationClipsType) Walk() (err error) {
	if fn := WalkHandlers.TlibraryAnimationClipsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_animation_clipsequencelibrary_animation_clips_typeschema_AnimationClip_TanimationClipType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_library_animation_clipschoicesequenceCOLLADAschema_LibraryAnimationClips_TlibraryAnimationClipsType_ struct {
	//	The COLLADA element may contain any
	//	number of library_animation_clips
	//	elements.
	AnimationClipsLibraries []*TlibraryAnimationClipsType `xml:"http://www.collada.org/2008/03/COLLADASchema library_animation_clips"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_library_animation_clipschoicesequenceCOLLADAschema_LibraryAnimationClips_TlibraryAnimationClipsType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_library_animation_clipschoicesequenceCOLLADAschema_LibraryAnimationClips_TlibraryAnimationClipsType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_library_animation_clipschoicesequenceCOLLADAschema_LibraryAnimationClips_TlibraryAnimationClipsType_ instance.
func (me *XsdGoPkgHasElems_library_animation_clipschoicesequenceCOLLADAschema_LibraryAnimationClips_TlibraryAnimationClipsType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_library_animation_clipschoicesequenceCOLLADAschema_LibraryAnimationClips_TlibraryAnimationClipsType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AnimationClipsLibraries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TkinematicsParamType struct {
	XsdGoPkgHasAttr_Ref_XsdtToken_
}

//	If the WalkHandlers.TkinematicsParamType function is not nil (ie. was set by outside code), calls it with this TkinematicsParamType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TkinematicsParamType instance.
func (me *TkinematicsParamType) Walk() (err error) {
	if fn := WalkHandlers.TkinematicsParamType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_paramchoicekinematics_bind_typeschema_Param_TkinematicsParamType_ struct {
	Param *TkinematicsParamType `xml:"http://www.collada.org/2008/03/COLLADASchema param"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_paramchoicekinematics_bind_typeschema_Param_TkinematicsParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_paramchoicekinematics_bind_typeschema_Param_TkinematicsParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_paramchoicekinematics_bind_typeschema_Param_TkinematicsParamType_ instance.
func (me *XsdGoPkgHasElem_paramchoicekinematics_bind_typeschema_Param_TkinematicsParamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_paramchoicekinematics_bind_typeschema_Param_TkinematicsParamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Param.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TkinematicsBindType struct {
	XsdGoPkgHasElem_SIDREFchoicekinematics_newparam_typeschema_Sidref_TsidrefType_

	XsdGoPkgHasElem_boolchoicekinematics_newparam_typeschema_Bool_XsdtBoolean_

	XsdGoPkgHasAttr_Symbol_XsdtNCName_

	XsdGoPkgHasElem_paramchoicekinematics_bind_typeschema_Param_TkinematicsParamType_

	XsdGoPkgHasElem_intchoicekinematics_newparam_typeschema_Int_TintType_

	XsdGoPkgHasElem_floatchoicekinematics_newparam_typeschema_Float_TfloatType_
}

//	If the WalkHandlers.TkinematicsBindType function is not nil (ie. was set by outside code), calls it with this TkinematicsBindType instance as the single argument. Then calls the Walk() method on 5/6 embed(s) and 0/0 field(s) belonging to this TkinematicsBindType instance.
func (me *TkinematicsBindType) Walk() (err error) {
	if fn := WalkHandlers.TkinematicsBindType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_floatchoicekinematics_newparam_typeschema_Float_TfloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SIDREFchoicekinematics_newparam_typeschema_Sidref_TsidrefType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_boolchoicekinematics_newparam_typeschema_Bool_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_paramchoicekinematics_bind_typeschema_Param_TkinematicsParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_intchoicekinematics_newparam_typeschema_Int_TintType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_bindsequenceinstance_kinematics_model_typeschema_Bind_TkinematicsBindType_ struct {
	Binds []*TkinematicsBindType `xml:"http://www.collada.org/2008/03/COLLADASchema bind"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_bindsequenceinstance_kinematics_model_typeschema_Bind_TkinematicsBindType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_bindsequenceinstance_kinematics_model_typeschema_Bind_TkinematicsBindType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_bindsequenceinstance_kinematics_model_typeschema_Bind_TkinematicsBindType_ instance.
func (me *XsdGoPkgHasElems_bindsequenceinstance_kinematics_model_typeschema_Bind_TkinematicsBindType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_bindsequenceinstance_kinematics_model_typeschema_Bind_TkinematicsBindType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Binds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TkinematicsSetparamType struct {
	XsdGoPkgHasElem_SIDREFchoicekinematics_newparam_typeschema_Sidref_TsidrefType_

	XsdGoPkgHasElem_boolchoicekinematics_newparam_typeschema_Bool_XsdtBoolean_

	XsdGoPkgHasAttr_Ref_XsdtToken_

	XsdGoPkgHasElem_floatchoicekinematics_newparam_typeschema_Float_TfloatType_

	XsdGoPkgHasElem_intchoicekinematics_newparam_typeschema_Int_TintType_

	XsdGoPkgHasElem_connect_paramchoiceformula_setparam_typeschema_ConnectParam_TkinematicsConnectParamType_
}

//	If the WalkHandlers.TkinematicsSetparamType function is not nil (ie. was set by outside code), calls it with this TkinematicsSetparamType instance as the single argument. Then calls the Walk() method on 5/6 embed(s) and 0/0 field(s) belonging to this TkinematicsSetparamType instance.
func (me *TkinematicsSetparamType) Walk() (err error) {
	if fn := WalkHandlers.TkinematicsSetparamType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_connect_paramchoiceformula_setparam_typeschema_ConnectParam_TkinematicsConnectParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SIDREFchoicekinematics_newparam_typeschema_Sidref_TsidrefType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_boolchoicekinematics_newparam_typeschema_Bool_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_floatchoicekinematics_newparam_typeschema_Float_TfloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_intchoicekinematics_newparam_typeschema_Int_TintType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_setparamsequenceinstance_kinematics_model_typeschema_Setparam_TkinematicsSetparamType_ struct {
	Setparams []*TkinematicsSetparamType `xml:"http://www.collada.org/2008/03/COLLADASchema setparam"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_setparamsequenceinstance_kinematics_model_typeschema_Setparam_TkinematicsSetparamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_setparamsequenceinstance_kinematics_model_typeschema_Setparam_TkinematicsSetparamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_setparamsequenceinstance_kinematics_model_typeschema_Setparam_TkinematicsSetparamType_ instance.
func (me *XsdGoPkgHasElems_setparamsequenceinstance_kinematics_model_typeschema_Setparam_TkinematicsSetparamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_setparamsequenceinstance_kinematics_model_typeschema_Setparam_TkinematicsSetparamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Setparams {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TinstanceKinematicsModelType struct {
	XsdGoPkgHasAttr_Name_XsdtToken_

	XsdGoPkgHasAttr_Sid_TsidType_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	XsdGoPkgHasElems_newparamsequencekinematics_model_technique_typeschema_Newparam_TkinematicsNewparamType_

	XsdGoPkgHasElems_bindsequenceinstance_kinematics_model_typeschema_Bind_TkinematicsBindType_

	XsdGoPkgHasAttr_Url_XsdtAnyURI_

	XsdGoPkgHasElems_setparamsequenceinstance_kinematics_model_typeschema_Setparam_TkinematicsSetparamType_
}

//	If the WalkHandlers.TinstanceKinematicsModelType function is not nil (ie. was set by outside code), calls it with this TinstanceKinematicsModelType instance as the single argument. Then calls the Walk() method on 4/7 embed(s) and 0/0 field(s) belonging to this TinstanceKinematicsModelType instance.
func (me *TinstanceKinematicsModelType) Walk() (err error) {
	if fn := WalkHandlers.TinstanceKinematicsModelType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_newparamsequencekinematics_model_technique_typeschema_Newparam_TkinematicsNewparamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_bindsequenceinstance_kinematics_model_typeschema_Bind_TkinematicsBindType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_setparamsequenceinstance_kinematics_model_typeschema_Setparam_TkinematicsSetparamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_instance_kinematics_modelsequencekinematics_typeschema_InstanceKinematicsModel_TinstanceKinematicsModelType_ struct {
	KinematicsModelInstances []*TinstanceKinematicsModelType `xml:"http://www.collada.org/2008/03/COLLADASchema instance_kinematics_model"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_instance_kinematics_modelsequencekinematics_typeschema_InstanceKinematicsModel_TinstanceKinematicsModelType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_instance_kinematics_modelsequencekinematics_typeschema_InstanceKinematicsModel_TinstanceKinematicsModelType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_instance_kinematics_modelsequencekinematics_typeschema_InstanceKinematicsModel_TinstanceKinematicsModelType_ instance.
func (me *XsdGoPkgHasElems_instance_kinematics_modelsequencekinematics_typeschema_InstanceKinematicsModel_TinstanceKinematicsModelType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_instance_kinematics_modelsequencekinematics_typeschema_InstanceKinematicsModel_TinstanceKinematicsModelType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.KinematicsModelInstances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Link_XsdtToken_ struct {
	Link xsdt.Token `xml:"http://www.collada.org/2008/03/COLLADASchema link,attr"`
}

type TkinematicsFrameType struct {
	XsdGoPkgHasElems_translatechoiceattachment_endchoicesequencelink_typeschema_Translate_TtranslateType_

	XsdGoPkgHasElems_rotatechoiceattachment_endchoicesequencelink_typeschema_Rotate_TrotateType_

	XsdGoPkgHasAttr_Link_XsdtToken_
}

//	If the WalkHandlers.TkinematicsFrameType function is not nil (ie. was set by outside code), calls it with this TkinematicsFrameType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TkinematicsFrameType instance.
func (me *TkinematicsFrameType) Walk() (err error) {
	if fn := WalkHandlers.TkinematicsFrameType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_rotatechoiceattachment_endchoicesequencelink_typeschema_Rotate_TrotateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_translatechoiceattachment_endchoicesequencelink_typeschema_Translate_TtranslateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_frame_originsequencekinematics_technique_typeschema_FrameOrigin_TkinematicsFrameType_ struct {
	FrameOrigin *TkinematicsFrameType `xml:"http://www.collada.org/2008/03/COLLADASchema frame_origin"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_frame_originsequencekinematics_technique_typeschema_FrameOrigin_TkinematicsFrameType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_frame_originsequencekinematics_technique_typeschema_FrameOrigin_TkinematicsFrameType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_frame_originsequencekinematics_technique_typeschema_FrameOrigin_TkinematicsFrameType_ instance.
func (me *XsdGoPkgHasElem_frame_originsequencekinematics_technique_typeschema_FrameOrigin_TkinematicsFrameType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_frame_originsequencekinematics_technique_typeschema_FrameOrigin_TkinematicsFrameType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FrameOrigin.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcommonBoolOrParamType struct {
	XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TcommonParamType_

	XsdGoPkgHasElem_boolchoicekinematics_newparam_typeschema_Bool_XsdtBoolean_
}

//	If the WalkHandlers.TcommonBoolOrParamType function is not nil (ie. was set by outside code), calls it with this TcommonBoolOrParamType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TcommonBoolOrParamType instance.
func (me *TcommonBoolOrParamType) Walk() (err error) {
	if fn := WalkHandlers.TcommonBoolOrParamType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TcommonParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_boolchoicekinematics_newparam_typeschema_Bool_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_lockedsequencekinematics_axis_info_typeschema_Locked_TcommonBoolOrParamType_ struct {
	Locked *TcommonBoolOrParamType `xml:"http://www.collada.org/2008/03/COLLADASchema locked"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_lockedsequencekinematics_axis_info_typeschema_Locked_TcommonBoolOrParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_lockedsequencekinematics_axis_info_typeschema_Locked_TcommonBoolOrParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_lockedsequencekinematics_axis_info_typeschema_Locked_TcommonBoolOrParamType_ instance.
func (me *XsdGoPkgHasElem_lockedsequencekinematics_axis_info_typeschema_Locked_TcommonBoolOrParamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_lockedsequencekinematics_axis_info_typeschema_Locked_TcommonBoolOrParamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Locked.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_activesequencekinematics_axis_info_typeschema_Active_TcommonBoolOrParamType_ struct {
	Active *TcommonBoolOrParamType `xml:"http://www.collada.org/2008/03/COLLADASchema active"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_activesequencekinematics_axis_info_typeschema_Active_TcommonBoolOrParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_activesequencekinematics_axis_info_typeschema_Active_TcommonBoolOrParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_activesequencekinematics_axis_info_typeschema_Active_TcommonBoolOrParamType_ instance.
func (me *XsdGoPkgHasElem_activesequencekinematics_axis_info_typeschema_Active_TcommonBoolOrParamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_activesequencekinematics_axis_info_typeschema_Active_TcommonBoolOrParamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Active.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Axis_XsdtToken_ struct {
	Axis xsdt.Token `xml:"http://www.collada.org/2008/03/COLLADASchema axis,attr"`
}

type TcommonIntOrParamType struct {
	XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TcommonParamType_

	XsdGoPkgHasElem_intchoicekinematics_newparam_typeschema_Int_TintType_
}

//	If the WalkHandlers.TcommonIntOrParamType function is not nil (ie. was set by outside code), calls it with this TcommonIntOrParamType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TcommonIntOrParamType instance.
func (me *TcommonIntOrParamType) Walk() (err error) {
	if fn := WalkHandlers.TcommonIntOrParamType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_intchoicekinematics_newparam_typeschema_Int_TintType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TcommonParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TkinematicsIndexType struct {
	XsdGoPkgHasAttr_Semantic_XsdtNmtoken_

	TcommonIntOrParamType
}

//	If the WalkHandlers.TkinematicsIndexType function is not nil (ie. was set by outside code), calls it with this TkinematicsIndexType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TkinematicsIndexType instance.
func (me *TkinematicsIndexType) Walk() (err error) {
	if fn := WalkHandlers.TkinematicsIndexType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TcommonIntOrParamType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_indexsequencekinematics_axis_info_typeschema_Index_TkinematicsIndexType_ struct {
	Indexs []*TkinematicsIndexType `xml:"http://www.collada.org/2008/03/COLLADASchema index"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_indexsequencekinematics_axis_info_typeschema_Index_TkinematicsIndexType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_indexsequencekinematics_axis_info_typeschema_Index_TkinematicsIndexType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_indexsequencekinematics_axis_info_typeschema_Index_TkinematicsIndexType_ instance.
func (me *XsdGoPkgHasElems_indexsequencekinematics_axis_info_typeschema_Index_TkinematicsIndexType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_indexsequencekinematics_axis_info_typeschema_Index_TkinematicsIndexType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Indexs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_maxsequencekinematics_limits_typeschema_Max_TcommonFloatOrParamType_ struct {
	Max *TcommonFloatOrParamType `xml:"http://www.collada.org/2008/03/COLLADASchema max"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_maxsequencekinematics_limits_typeschema_Max_TcommonFloatOrParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_maxsequencekinematics_limits_typeschema_Max_TcommonFloatOrParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_maxsequencekinematics_limits_typeschema_Max_TcommonFloatOrParamType_ instance.
func (me *XsdGoPkgHasElem_maxsequencekinematics_limits_typeschema_Max_TcommonFloatOrParamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_maxsequencekinematics_limits_typeschema_Max_TcommonFloatOrParamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Max.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_minsequencekinematics_limits_typeschema_Min_TcommonFloatOrParamType_ struct {
	Min *TcommonFloatOrParamType `xml:"http://www.collada.org/2008/03/COLLADASchema min"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_minsequencekinematics_limits_typeschema_Min_TcommonFloatOrParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_minsequencekinematics_limits_typeschema_Min_TcommonFloatOrParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_minsequencekinematics_limits_typeschema_Min_TcommonFloatOrParamType_ instance.
func (me *XsdGoPkgHasElem_minsequencekinematics_limits_typeschema_Min_TcommonFloatOrParamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_minsequencekinematics_limits_typeschema_Min_TcommonFloatOrParamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Min.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TkinematicsLimitsType struct {
	XsdGoPkgHasElem_minsequencekinematics_limits_typeschema_Min_TcommonFloatOrParamType_

	XsdGoPkgHasElem_maxsequencekinematics_limits_typeschema_Max_TcommonFloatOrParamType_
}

//	If the WalkHandlers.TkinematicsLimitsType function is not nil (ie. was set by outside code), calls it with this TkinematicsLimitsType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TkinematicsLimitsType instance.
func (me *TkinematicsLimitsType) Walk() (err error) {
	if fn := WalkHandlers.TkinematicsLimitsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_maxsequencekinematics_limits_typeschema_Max_TcommonFloatOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_minsequencekinematics_limits_typeschema_Min_TcommonFloatOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_limitssequencekinematics_axis_info_typeschema_Limits_TkinematicsLimitsType_ struct {
	Limits *TkinematicsLimitsType `xml:"http://www.collada.org/2008/03/COLLADASchema limits"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_limitssequencekinematics_axis_info_typeschema_Limits_TkinematicsLimitsType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_limitssequencekinematics_axis_info_typeschema_Limits_TkinematicsLimitsType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_limitssequencekinematics_axis_info_typeschema_Limits_TkinematicsLimitsType_ instance.
func (me *XsdGoPkgHasElem_limitssequencekinematics_axis_info_typeschema_Limits_TkinematicsLimitsType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_limitssequencekinematics_axis_info_typeschema_Limits_TkinematicsLimitsType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Limits.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TkinematicsAxisInfoType struct {
	XsdGoPkgHasElems_formulachoicesequencekinematics_model_technique_typeschema_Formula_TformulaType_

	XsdGoPkgHasAttr_Sid_TsidType_

	XsdGoPkgHasElems_indexsequencekinematics_axis_info_typeschema_Index_TkinematicsIndexType_

	XsdGoPkgHasElem_limitssequencekinematics_axis_info_typeschema_Limits_TkinematicsLimitsType_

	XsdGoPkgHasElems_newparamsequencekinematics_model_technique_typeschema_Newparam_TkinematicsNewparamType_

	XsdGoPkgHasElem_lockedsequencekinematics_axis_info_typeschema_Locked_TcommonBoolOrParamType_

	XsdGoPkgHasElem_activesequencekinematics_axis_info_typeschema_Active_TcommonBoolOrParamType_

	XsdGoPkgHasAttr_Name_XsdtToken_

	XsdGoPkgHasAttr_Axis_XsdtToken_

	XsdGoPkgHasElems_instance_formulachoicesequencekinematics_model_technique_typeschema_InstanceFormula_TinstanceFormulaType_
}

//	If the WalkHandlers.TkinematicsAxisInfoType function is not nil (ie. was set by outside code), calls it with this TkinematicsAxisInfoType instance as the single argument. Then calls the Walk() method on 7/10 embed(s) and 0/0 field(s) belonging to this TkinematicsAxisInfoType instance.
func (me *TkinematicsAxisInfoType) Walk() (err error) {
	if fn := WalkHandlers.TkinematicsAxisInfoType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_activesequencekinematics_axis_info_typeschema_Active_TcommonBoolOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_instance_formulachoicesequencekinematics_model_technique_typeschema_InstanceFormula_TinstanceFormulaType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_formulachoicesequencekinematics_model_technique_typeschema_Formula_TformulaType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_indexsequencekinematics_axis_info_typeschema_Index_TkinematicsIndexType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_limitssequencekinematics_axis_info_typeschema_Limits_TkinematicsLimitsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_newparamsequencekinematics_model_technique_typeschema_Newparam_TkinematicsNewparamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_lockedsequencekinematics_axis_info_typeschema_Locked_TcommonBoolOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_axis_infosequencekinematics_technique_typeschema_AxisInfo_TkinematicsAxisInfoType_ struct {
	AxisInfos []*TkinematicsAxisInfoType `xml:"http://www.collada.org/2008/03/COLLADASchema axis_info"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_axis_infosequencekinematics_technique_typeschema_AxisInfo_TkinematicsAxisInfoType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_axis_infosequencekinematics_technique_typeschema_AxisInfo_TkinematicsAxisInfoType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_axis_infosequencekinematics_technique_typeschema_AxisInfo_TkinematicsAxisInfoType_ instance.
func (me *XsdGoPkgHasElems_axis_infosequencekinematics_technique_typeschema_AxisInfo_TkinematicsAxisInfoType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_axis_infosequencekinematics_technique_typeschema_AxisInfo_TkinematicsAxisInfoType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AxisInfos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_frame_objectsequencekinematics_technique_typeschema_FrameObject_TkinematicsFrameType_ struct {
	FrameObject *TkinematicsFrameType `xml:"http://www.collada.org/2008/03/COLLADASchema frame_object"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_frame_objectsequencekinematics_technique_typeschema_FrameObject_TkinematicsFrameType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_frame_objectsequencekinematics_technique_typeschema_FrameObject_TkinematicsFrameType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_frame_objectsequencekinematics_technique_typeschema_FrameObject_TkinematicsFrameType_ instance.
func (me *XsdGoPkgHasElem_frame_objectsequencekinematics_technique_typeschema_FrameObject_TkinematicsFrameType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_frame_objectsequencekinematics_technique_typeschema_FrameObject_TkinematicsFrameType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FrameObject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_frame_tipsequencekinematics_technique_typeschema_FrameTip_TkinematicsFrameType_ struct {
	FrameTip *TkinematicsFrameType `xml:"http://www.collada.org/2008/03/COLLADASchema frame_tip"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_frame_tipsequencekinematics_technique_typeschema_FrameTip_TkinematicsFrameType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_frame_tipsequencekinematics_technique_typeschema_FrameTip_TkinematicsFrameType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_frame_tipsequencekinematics_technique_typeschema_FrameTip_TkinematicsFrameType_ instance.
func (me *XsdGoPkgHasElem_frame_tipsequencekinematics_technique_typeschema_FrameTip_TkinematicsFrameType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_frame_tipsequencekinematics_technique_typeschema_FrameTip_TkinematicsFrameType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FrameTip.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_frame_tcpsequencekinematics_technique_typeschema_FrameTcp_TkinematicsFrameType_ struct {
	FrameTcp *TkinematicsFrameType `xml:"http://www.collada.org/2008/03/COLLADASchema frame_tcp"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_frame_tcpsequencekinematics_technique_typeschema_FrameTcp_TkinematicsFrameType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_frame_tcpsequencekinematics_technique_typeschema_FrameTcp_TkinematicsFrameType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_frame_tcpsequencekinematics_technique_typeschema_FrameTcp_TkinematicsFrameType_ instance.
func (me *XsdGoPkgHasElem_frame_tcpsequencekinematics_technique_typeschema_FrameTcp_TkinematicsFrameType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_frame_tcpsequencekinematics_technique_typeschema_FrameTcp_TkinematicsFrameType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FrameTcp.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TkinematicsTechniqueType struct {
	XsdGoPkgHasElem_frame_originsequencekinematics_technique_typeschema_FrameOrigin_TkinematicsFrameType_

	XsdGoPkgHasElems_axis_infosequencekinematics_technique_typeschema_AxisInfo_TkinematicsAxisInfoType_

	XsdGoPkgHasElem_frame_objectsequencekinematics_technique_typeschema_FrameObject_TkinematicsFrameType_

	XsdGoPkgHasElem_frame_tipsequencekinematics_technique_typeschema_FrameTip_TkinematicsFrameType_

	XsdGoPkgHasElem_frame_tcpsequencekinematics_technique_typeschema_FrameTcp_TkinematicsFrameType_
}

//	If the WalkHandlers.TkinematicsTechniqueType function is not nil (ie. was set by outside code), calls it with this TkinematicsTechniqueType instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TkinematicsTechniqueType instance.
func (me *TkinematicsTechniqueType) Walk() (err error) {
	if fn := WalkHandlers.TkinematicsTechniqueType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_frame_originsequencekinematics_technique_typeschema_FrameOrigin_TkinematicsFrameType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_axis_infosequencekinematics_technique_typeschema_AxisInfo_TkinematicsAxisInfoType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_frame_objectsequencekinematics_technique_typeschema_FrameObject_TkinematicsFrameType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_frame_tipsequencekinematics_technique_typeschema_FrameTip_TkinematicsFrameType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_frame_tcpsequencekinematics_technique_typeschema_FrameTcp_TkinematicsFrameType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_technique_commonsequencekinematics_typeschema_TechniqueCommon_TkinematicsTechniqueType_ struct {
	TechniqueCommon *TkinematicsTechniqueType `xml:"http://www.collada.org/2008/03/COLLADASchema technique_common"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_technique_commonsequencekinematics_typeschema_TechniqueCommon_TkinematicsTechniqueType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_technique_commonsequencekinematics_typeschema_TechniqueCommon_TkinematicsTechniqueType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_technique_commonsequencekinematics_typeschema_TechniqueCommon_TkinematicsTechniqueType_ instance.
func (me *XsdGoPkgHasElem_technique_commonsequencekinematics_typeschema_TechniqueCommon_TkinematicsTechniqueType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_technique_commonsequencekinematics_typeschema_TechniqueCommon_TkinematicsTechniqueType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TechniqueCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TkinematicsType struct {
	XsdGoPkgHasElems_instance_kinematics_modelsequencekinematics_typeschema_InstanceKinematicsModel_TinstanceKinematicsModelType_

	XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	XsdGoPkgHasElem_technique_commonsequencekinematics_typeschema_TechniqueCommon_TkinematicsTechniqueType_
}

//	If the WalkHandlers.TkinematicsType function is not nil (ie. was set by outside code), calls it with this TkinematicsType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TkinematicsType instance.
func (me *TkinematicsType) Walk() (err error) {
	if fn := WalkHandlers.TkinematicsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_technique_commonsequencekinematics_typeschema_TechniqueCommon_TkinematicsTechniqueType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_instance_kinematics_modelsequencekinematics_typeschema_InstanceKinematicsModel_TinstanceKinematicsModelType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_kinematicschoicesequencearticulated_system_typeschema_Kinematics_TkinematicsType_ struct {
	Kinematics *TkinematicsType `xml:"http://www.collada.org/2008/03/COLLADASchema kinematics"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_kinematicschoicesequencearticulated_system_typeschema_Kinematics_TkinematicsType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_kinematicschoicesequencearticulated_system_typeschema_Kinematics_TkinematicsType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_kinematicschoicesequencearticulated_system_typeschema_Kinematics_TkinematicsType_ instance.
func (me *XsdGoPkgHasElem_kinematicschoicesequencearticulated_system_typeschema_Kinematics_TkinematicsType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_kinematicschoicesequencearticulated_system_typeschema_Kinematics_TkinematicsType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Kinematics.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_decelerationsequencemotion_axis_info_typeschema_Deceleration_TcommonFloatOrParamType_ struct {
	Deceleration *TcommonFloatOrParamType `xml:"http://www.collada.org/2008/03/COLLADASchema deceleration"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_decelerationsequencemotion_axis_info_typeschema_Deceleration_TcommonFloatOrParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_decelerationsequencemotion_axis_info_typeschema_Deceleration_TcommonFloatOrParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_decelerationsequencemotion_axis_info_typeschema_Deceleration_TcommonFloatOrParamType_ instance.
func (me *XsdGoPkgHasElem_decelerationsequencemotion_axis_info_typeschema_Deceleration_TcommonFloatOrParamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_decelerationsequencemotion_axis_info_typeschema_Deceleration_TcommonFloatOrParamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Deceleration.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_accelerationsequencemotion_axis_info_typeschema_Acceleration_TcommonFloatOrParamType_ struct {
	Acceleration *TcommonFloatOrParamType `xml:"http://www.collada.org/2008/03/COLLADASchema acceleration"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_accelerationsequencemotion_axis_info_typeschema_Acceleration_TcommonFloatOrParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_accelerationsequencemotion_axis_info_typeschema_Acceleration_TcommonFloatOrParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_accelerationsequencemotion_axis_info_typeschema_Acceleration_TcommonFloatOrParamType_ instance.
func (me *XsdGoPkgHasElem_accelerationsequencemotion_axis_info_typeschema_Acceleration_TcommonFloatOrParamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_accelerationsequencemotion_axis_info_typeschema_Acceleration_TcommonFloatOrParamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Acceleration.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_jerksequencemotion_axis_info_typeschema_Jerk_TcommonFloatOrParamType_ struct {
	Jerk *TcommonFloatOrParamType `xml:"http://www.collada.org/2008/03/COLLADASchema jerk"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_jerksequencemotion_axis_info_typeschema_Jerk_TcommonFloatOrParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_jerksequencemotion_axis_info_typeschema_Jerk_TcommonFloatOrParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_jerksequencemotion_axis_info_typeschema_Jerk_TcommonFloatOrParamType_ instance.
func (me *XsdGoPkgHasElem_jerksequencemotion_axis_info_typeschema_Jerk_TcommonFloatOrParamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_jerksequencemotion_axis_info_typeschema_Jerk_TcommonFloatOrParamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Jerk.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_speedsequencemotion_axis_info_typeschema_Speed_TcommonFloatOrParamType_ struct {
	Speed *TcommonFloatOrParamType `xml:"http://www.collada.org/2008/03/COLLADASchema speed"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_speedsequencemotion_axis_info_typeschema_Speed_TcommonFloatOrParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_speedsequencemotion_axis_info_typeschema_Speed_TcommonFloatOrParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_speedsequencemotion_axis_info_typeschema_Speed_TcommonFloatOrParamType_ instance.
func (me *XsdGoPkgHasElem_speedsequencemotion_axis_info_typeschema_Speed_TcommonFloatOrParamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_speedsequencemotion_axis_info_typeschema_Speed_TcommonFloatOrParamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Speed.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TmotionAxisInfoType struct {
	XsdGoPkgHasElem_speedsequencemotion_axis_info_typeschema_Speed_TcommonFloatOrParamType_

	XsdGoPkgHasAttr_Sid_TsidType_

	XsdGoPkgHasElems_setparamsequenceinstance_kinematics_model_typeschema_Setparam_TkinematicsSetparamType_

	XsdGoPkgHasElems_bindsequenceinstance_kinematics_model_typeschema_Bind_TkinematicsBindType_

	XsdGoPkgHasAttr_Name_XsdtToken_

	XsdGoPkgHasAttr_Axis_XsdtToken_

	XsdGoPkgHasElems_newparamsequencekinematics_model_technique_typeschema_Newparam_TkinematicsNewparamType_

	XsdGoPkgHasElem_decelerationsequencemotion_axis_info_typeschema_Deceleration_TcommonFloatOrParamType_

	XsdGoPkgHasElem_accelerationsequencemotion_axis_info_typeschema_Acceleration_TcommonFloatOrParamType_

	XsdGoPkgHasElem_jerksequencemotion_axis_info_typeschema_Jerk_TcommonFloatOrParamType_
}

//	If the WalkHandlers.TmotionAxisInfoType function is not nil (ie. was set by outside code), calls it with this TmotionAxisInfoType instance as the single argument. Then calls the Walk() method on 7/10 embed(s) and 0/0 field(s) belonging to this TmotionAxisInfoType instance.
func (me *TmotionAxisInfoType) Walk() (err error) {
	if fn := WalkHandlers.TmotionAxisInfoType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_newparamsequencekinematics_model_technique_typeschema_Newparam_TkinematicsNewparamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_decelerationsequencemotion_axis_info_typeschema_Deceleration_TcommonFloatOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_accelerationsequencemotion_axis_info_typeschema_Acceleration_TcommonFloatOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_jerksequencemotion_axis_info_typeschema_Jerk_TcommonFloatOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_speedsequencemotion_axis_info_typeschema_Speed_TcommonFloatOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_setparamsequenceinstance_kinematics_model_typeschema_Setparam_TkinematicsSetparamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_bindsequenceinstance_kinematics_model_typeschema_Bind_TkinematicsBindType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_axis_infosequencemotion_technique_typeschema_AxisInfo_TmotionAxisInfoType_ struct {
	AxisInfos []*TmotionAxisInfoType `xml:"http://www.collada.org/2008/03/COLLADASchema axis_info"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_axis_infosequencemotion_technique_typeschema_AxisInfo_TmotionAxisInfoType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_axis_infosequencemotion_technique_typeschema_AxisInfo_TmotionAxisInfoType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_axis_infosequencemotion_technique_typeschema_AxisInfo_TmotionAxisInfoType_ instance.
func (me *XsdGoPkgHasElems_axis_infosequencemotion_technique_typeschema_AxisInfo_TmotionAxisInfoType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_axis_infosequencemotion_technique_typeschema_AxisInfo_TmotionAxisInfoType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AxisInfos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcommonFloat2OrParamType struct {
	XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TcommonParamType_

	XsdGoPkgHasElem_float2choicefx_annotate_groupschema_Float2_Tfloat2Type_
}

//	If the WalkHandlers.TcommonFloat2OrParamType function is not nil (ie. was set by outside code), calls it with this TcommonFloat2OrParamType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TcommonFloat2OrParamType instance.
func (me *TcommonFloat2OrParamType) Walk() (err error) {
	if fn := WalkHandlers.TcommonFloat2OrParamType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TcommonParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2choicefx_annotate_groupschema_Float2_Tfloat2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_jerksequencemotion_effector_info_typeschema_Jerk_TcommonFloat2OrParamType_ struct {
	Jerk *TcommonFloat2OrParamType `xml:"http://www.collada.org/2008/03/COLLADASchema jerk"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_jerksequencemotion_effector_info_typeschema_Jerk_TcommonFloat2OrParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_jerksequencemotion_effector_info_typeschema_Jerk_TcommonFloat2OrParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_jerksequencemotion_effector_info_typeschema_Jerk_TcommonFloat2OrParamType_ instance.
func (me *XsdGoPkgHasElem_jerksequencemotion_effector_info_typeschema_Jerk_TcommonFloat2OrParamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_jerksequencemotion_effector_info_typeschema_Jerk_TcommonFloat2OrParamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Jerk.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_decelerationsequencemotion_effector_info_typeschema_Deceleration_TcommonFloat2OrParamType_ struct {
	Deceleration *TcommonFloat2OrParamType `xml:"http://www.collada.org/2008/03/COLLADASchema deceleration"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_decelerationsequencemotion_effector_info_typeschema_Deceleration_TcommonFloat2OrParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_decelerationsequencemotion_effector_info_typeschema_Deceleration_TcommonFloat2OrParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_decelerationsequencemotion_effector_info_typeschema_Deceleration_TcommonFloat2OrParamType_ instance.
func (me *XsdGoPkgHasElem_decelerationsequencemotion_effector_info_typeschema_Deceleration_TcommonFloat2OrParamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_decelerationsequencemotion_effector_info_typeschema_Deceleration_TcommonFloat2OrParamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Deceleration.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_speedsequencemotion_effector_info_typeschema_Speed_TcommonFloat2OrParamType_ struct {
	Speed *TcommonFloat2OrParamType `xml:"http://www.collada.org/2008/03/COLLADASchema speed"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_speedsequencemotion_effector_info_typeschema_Speed_TcommonFloat2OrParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_speedsequencemotion_effector_info_typeschema_Speed_TcommonFloat2OrParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_speedsequencemotion_effector_info_typeschema_Speed_TcommonFloat2OrParamType_ instance.
func (me *XsdGoPkgHasElem_speedsequencemotion_effector_info_typeschema_Speed_TcommonFloat2OrParamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_speedsequencemotion_effector_info_typeschema_Speed_TcommonFloat2OrParamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Speed.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_accelerationsequencemotion_effector_info_typeschema_Acceleration_TcommonFloat2OrParamType_ struct {
	Acceleration *TcommonFloat2OrParamType `xml:"http://www.collada.org/2008/03/COLLADASchema acceleration"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_accelerationsequencemotion_effector_info_typeschema_Acceleration_TcommonFloat2OrParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_accelerationsequencemotion_effector_info_typeschema_Acceleration_TcommonFloat2OrParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_accelerationsequencemotion_effector_info_typeschema_Acceleration_TcommonFloat2OrParamType_ instance.
func (me *XsdGoPkgHasElem_accelerationsequencemotion_effector_info_typeschema_Acceleration_TcommonFloat2OrParamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_accelerationsequencemotion_effector_info_typeschema_Acceleration_TcommonFloat2OrParamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Acceleration.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TmotionEffectorInfoType struct {
	XsdGoPkgHasElem_speedsequencemotion_effector_info_typeschema_Speed_TcommonFloat2OrParamType_

	XsdGoPkgHasAttr_Sid_TsidType_

	XsdGoPkgHasElem_accelerationsequencemotion_effector_info_typeschema_Acceleration_TcommonFloat2OrParamType_

	XsdGoPkgHasElems_newparamsequencekinematics_model_technique_typeschema_Newparam_TkinematicsNewparamType_

	XsdGoPkgHasElems_setparamsequenceinstance_kinematics_model_typeschema_Setparam_TkinematicsSetparamType_

	XsdGoPkgHasAttr_Name_XsdtToken_

	XsdGoPkgHasElem_jerksequencemotion_effector_info_typeschema_Jerk_TcommonFloat2OrParamType_

	XsdGoPkgHasElem_decelerationsequencemotion_effector_info_typeschema_Deceleration_TcommonFloat2OrParamType_

	XsdGoPkgHasElems_bindsequenceinstance_kinematics_model_typeschema_Bind_TkinematicsBindType_
}

//	If the WalkHandlers.TmotionEffectorInfoType function is not nil (ie. was set by outside code), calls it with this TmotionEffectorInfoType instance as the single argument. Then calls the Walk() method on 7/9 embed(s) and 0/0 field(s) belonging to this TmotionEffectorInfoType instance.
func (me *TmotionEffectorInfoType) Walk() (err error) {
	if fn := WalkHandlers.TmotionEffectorInfoType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_jerksequencemotion_effector_info_typeschema_Jerk_TcommonFloat2OrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_decelerationsequencemotion_effector_info_typeschema_Deceleration_TcommonFloat2OrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_bindsequenceinstance_kinematics_model_typeschema_Bind_TkinematicsBindType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_speedsequencemotion_effector_info_typeschema_Speed_TcommonFloat2OrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_accelerationsequencemotion_effector_info_typeschema_Acceleration_TcommonFloat2OrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_newparamsequencekinematics_model_technique_typeschema_Newparam_TkinematicsNewparamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_setparamsequenceinstance_kinematics_model_typeschema_Setparam_TkinematicsSetparamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_effector_infosequencemotion_technique_typeschema_EffectorInfo_TmotionEffectorInfoType_ struct {
	EffectorInfo *TmotionEffectorInfoType `xml:"http://www.collada.org/2008/03/COLLADASchema effector_info"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_effector_infosequencemotion_technique_typeschema_EffectorInfo_TmotionEffectorInfoType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_effector_infosequencemotion_technique_typeschema_EffectorInfo_TmotionEffectorInfoType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_effector_infosequencemotion_technique_typeschema_EffectorInfo_TmotionEffectorInfoType_ instance.
func (me *XsdGoPkgHasElem_effector_infosequencemotion_technique_typeschema_EffectorInfo_TmotionEffectorInfoType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_effector_infosequencemotion_technique_typeschema_EffectorInfo_TmotionEffectorInfoType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EffectorInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TmotionTechniqueType struct {
	XsdGoPkgHasElem_effector_infosequencemotion_technique_typeschema_EffectorInfo_TmotionEffectorInfoType_

	XsdGoPkgHasElems_axis_infosequencemotion_technique_typeschema_AxisInfo_TmotionAxisInfoType_
}

//	If the WalkHandlers.TmotionTechniqueType function is not nil (ie. was set by outside code), calls it with this TmotionTechniqueType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TmotionTechniqueType instance.
func (me *TmotionTechniqueType) Walk() (err error) {
	if fn := WalkHandlers.TmotionTechniqueType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_effector_infosequencemotion_technique_typeschema_EffectorInfo_TmotionEffectorInfoType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_axis_infosequencemotion_technique_typeschema_AxisInfo_TmotionAxisInfoType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_technique_commonsequencemotion_typeschema_TechniqueCommon_TmotionTechniqueType_ struct {
	TechniqueCommon *TmotionTechniqueType `xml:"http://www.collada.org/2008/03/COLLADASchema technique_common"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_technique_commonsequencemotion_typeschema_TechniqueCommon_TmotionTechniqueType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_technique_commonsequencemotion_typeschema_TechniqueCommon_TmotionTechniqueType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_technique_commonsequencemotion_typeschema_TechniqueCommon_TmotionTechniqueType_ instance.
func (me *XsdGoPkgHasElem_technique_commonsequencemotion_typeschema_TechniqueCommon_TmotionTechniqueType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_technique_commonsequencemotion_typeschema_TechniqueCommon_TmotionTechniqueType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TechniqueCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TinstanceArticulatedSystemType struct {
	XsdGoPkgHasAttr_Name_XsdtToken_

	XsdGoPkgHasAttr_Url_XsdtAnyURI_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	XsdGoPkgHasAttr_Sid_TsidType_

	XsdGoPkgHasElems_bindsequenceinstance_kinematics_model_typeschema_Bind_TkinematicsBindType_

	XsdGoPkgHasElems_setparamsequenceinstance_kinematics_model_typeschema_Setparam_TkinematicsSetparamType_

	XsdGoPkgHasElems_newparamsequencekinematics_model_technique_typeschema_Newparam_TkinematicsNewparamType_
}

//	If the WalkHandlers.TinstanceArticulatedSystemType function is not nil (ie. was set by outside code), calls it with this TinstanceArticulatedSystemType instance as the single argument. Then calls the Walk() method on 4/7 embed(s) and 0/0 field(s) belonging to this TinstanceArticulatedSystemType instance.
func (me *TinstanceArticulatedSystemType) Walk() (err error) {
	if fn := WalkHandlers.TinstanceArticulatedSystemType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_bindsequenceinstance_kinematics_model_typeschema_Bind_TkinematicsBindType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_setparamsequenceinstance_kinematics_model_typeschema_Setparam_TkinematicsSetparamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_newparamsequencekinematics_model_technique_typeschema_Newparam_TkinematicsNewparamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_instance_articulated_systemsequencemotion_typeschema_InstanceArticulatedSystem_TinstanceArticulatedSystemType_ struct {
	InstanceArticulatedSystem *TinstanceArticulatedSystemType `xml:"http://www.collada.org/2008/03/COLLADASchema instance_articulated_system"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_instance_articulated_systemsequencemotion_typeschema_InstanceArticulatedSystem_TinstanceArticulatedSystemType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_instance_articulated_systemsequencemotion_typeschema_InstanceArticulatedSystem_TinstanceArticulatedSystemType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_instance_articulated_systemsequencemotion_typeschema_InstanceArticulatedSystem_TinstanceArticulatedSystemType_ instance.
func (me *XsdGoPkgHasElem_instance_articulated_systemsequencemotion_typeschema_InstanceArticulatedSystem_TinstanceArticulatedSystemType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_instance_articulated_systemsequencemotion_typeschema_InstanceArticulatedSystem_TinstanceArticulatedSystemType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.InstanceArticulatedSystem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TmotionType struct {
	XsdGoPkgHasElem_instance_articulated_systemsequencemotion_typeschema_InstanceArticulatedSystem_TinstanceArticulatedSystemType_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_

	XsdGoPkgHasElem_technique_commonsequencemotion_typeschema_TechniqueCommon_TmotionTechniqueType_
}

//	If the WalkHandlers.TmotionType function is not nil (ie. was set by outside code), calls it with this TmotionType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TmotionType instance.
func (me *TmotionType) Walk() (err error) {
	if fn := WalkHandlers.TmotionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_instance_articulated_systemsequencemotion_typeschema_InstanceArticulatedSystem_TinstanceArticulatedSystemType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_technique_commonsequencemotion_typeschema_TechniqueCommon_TmotionTechniqueType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_motionchoicesequencearticulated_system_typeschema_Motion_TmotionType_ struct {
	Motion *TmotionType `xml:"http://www.collada.org/2008/03/COLLADASchema motion"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_motionchoicesequencearticulated_system_typeschema_Motion_TmotionType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_motionchoicesequencearticulated_system_typeschema_Motion_TmotionType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_motionchoicesequencearticulated_system_typeschema_Motion_TmotionType_ instance.
func (me *XsdGoPkgHasElem_motionchoicesequencearticulated_system_typeschema_Motion_TmotionType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_motionchoicesequencearticulated_system_typeschema_Motion_TmotionType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Motion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TarticulatedSystemType struct {
	XsdGoPkgHasElem_kinematicschoicesequencearticulated_system_typeschema_Kinematics_TkinematicsType_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	XsdGoPkgHasAttr_Name_XsdtToken_

	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	XsdGoPkgHasElem_motionchoicesequencearticulated_system_typeschema_Motion_TmotionType_

	XsdGoPkgHasAttr_Id_XsdtId_
}

//	If the WalkHandlers.TarticulatedSystemType function is not nil (ie. was set by outside code), calls it with this TarticulatedSystemType instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TarticulatedSystemType instance.
func (me *TarticulatedSystemType) Walk() (err error) {
	if fn := WalkHandlers.TarticulatedSystemType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_motionchoicesequencearticulated_system_typeschema_Motion_TmotionType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_kinematicschoicesequencearticulated_system_typeschema_Kinematics_TkinematicsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_articulated_systemsequencelibrary_articulated_systems_typeschema_ArticulatedSystem_TarticulatedSystemType_ struct {
	ArticulatedSystems []*TarticulatedSystemType `xml:"http://www.collada.org/2008/03/COLLADASchema articulated_system"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_articulated_systemsequencelibrary_articulated_systems_typeschema_ArticulatedSystem_TarticulatedSystemType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_articulated_systemsequencelibrary_articulated_systems_typeschema_ArticulatedSystem_TarticulatedSystemType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_articulated_systemsequencelibrary_articulated_systems_typeschema_ArticulatedSystem_TarticulatedSystemType_ instance.
func (me *XsdGoPkgHasElems_articulated_systemsequencelibrary_articulated_systems_typeschema_ArticulatedSystem_TarticulatedSystemType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_articulated_systemsequencelibrary_articulated_systems_typeschema_ArticulatedSystem_TarticulatedSystemType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ArticulatedSystems {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TlibraryArticulatedSystemsType struct {
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElems_articulated_systemsequencelibrary_articulated_systems_typeschema_ArticulatedSystem_TarticulatedSystemType_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	XsdGoPkgHasAttr_Name_XsdtToken_
}

//	If the WalkHandlers.TlibraryArticulatedSystemsType function is not nil (ie. was set by outside code), calls it with this TlibraryArticulatedSystemsType instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TlibraryArticulatedSystemsType instance.
func (me *TlibraryArticulatedSystemsType) Walk() (err error) {
	if fn := WalkHandlers.TlibraryArticulatedSystemsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_articulated_systemsequencelibrary_articulated_systems_typeschema_ArticulatedSystem_TarticulatedSystemType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_library_articulated_systemschoicesequenceCOLLADAschema_LibraryArticulatedSystems_TlibraryArticulatedSystemsType_ struct {
	ArticulatedSystemsLibraries []*TlibraryArticulatedSystemsType `xml:"http://www.collada.org/2008/03/COLLADASchema library_articulated_systems"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_library_articulated_systemschoicesequenceCOLLADAschema_LibraryArticulatedSystems_TlibraryArticulatedSystemsType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_library_articulated_systemschoicesequenceCOLLADAschema_LibraryArticulatedSystems_TlibraryArticulatedSystemsType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_library_articulated_systemschoicesequenceCOLLADAschema_LibraryArticulatedSystems_TlibraryArticulatedSystemsType_ instance.
func (me *XsdGoPkgHasElems_library_articulated_systemschoicesequenceCOLLADAschema_LibraryArticulatedSystems_TlibraryArticulatedSystemsType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_library_articulated_systemschoicesequenceCOLLADAschema_LibraryArticulatedSystems_TlibraryArticulatedSystemsType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ArticulatedSystemsLibraries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The COLLADA element may contain any
//	number of library_nodes elements.
//	The library_nodes element declares a module of node elements.
//	There must be at least one node element.
//	Nodes embody the hierarchical relationship of elements in the scene.
//	The node element may be hierarchical and be the parent of any number of other node elements.
type XsdGoPkgHasElems_nodesequencenode_typeschema_Node_TnodeType_ struct {
	//	The node element may be hierarchical and be the parent of any number of other node elements.
	Nodes []*TnodeType `xml:"http://www.collada.org/2008/03/COLLADASchema node"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_nodesequencenode_typeschema_Node_TnodeType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_nodesequencenode_typeschema_Node_TnodeType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_nodesequencenode_typeschema_Node_TnodeType_ instance.
func (me *XsdGoPkgHasElems_nodesequencenode_typeschema_Node_TnodeType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_nodesequencenode_typeschema_Node_TnodeType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The type attribute indicates the type of the node element. The default value is "NODE".
//	Optional attribute.
//	An enumerated type specifying the acceptable node types.
type TnodeEnum xsdt.String

//	Since TnodeEnum is just a simple String type, this merely returns the current string value.
func (me TnodeEnum) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TnodeEnum's alias type xsdt.String.
func (me TnodeEnum) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TnodeEnum is "JOINT".
func (me TnodeEnum) IsJoint() bool { return me == "JOINT" }

//	Since TnodeEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TnodeEnum) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TnodeEnum is "NODE".
func (me TnodeEnum) IsNode() bool { return me == "NODE" }

type XsdGoPkgHasAttr_Type_TnodeEnum_Node struct {
	//	The type attribute indicates the type of the node element. The default value is "NODE".
	//	Optional attribute.
	Type TnodeEnum `xml:"http://www.collada.org/2008/03/COLLADASchema type,attr"`
}

//	Returns the default value for Type -- "NODE"
func (me XsdGoPkgHasAttr_Type_TnodeEnum_Node) TypeDefault() TnodeEnum { return TnodeEnum("NODE") }

//	The node element may contain any number of scale elements.
//	The scale element contains a mathematical vector that represents the relative proportions of the
//	X, Y and Z axes of a coordinated system.
type TscaleType struct {
	XsdGoPkgValue TtargetableFloat3Type `xml:",chardata"`
}

//	If the WalkHandlers.TscaleType function is not nil (ie. was set by outside code), calls it with this TscaleType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this TscaleType instance.
func (me *TscaleType) Walk() (err error) {
	if fn := WalkHandlers.TscaleType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TscaleType) ToTtargetableFloat3Type() TtargetableFloat3Type { return me.XsdGoPkgValue }

type XsdGoPkgHasElems_scalechoicesequencenode_typeschema_Scale_TscaleType_ struct {
	//	The node element may contain any number of scale elements.
	Scales []*TscaleType `xml:"http://www.collada.org/2008/03/COLLADASchema scale"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_scalechoicesequencenode_typeschema_Scale_TscaleType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_scalechoicesequencenode_typeschema_Scale_TscaleType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_scalechoicesequencenode_typeschema_Scale_TscaleType_ instance.
func (me *XsdGoPkgHasElems_scalechoicesequencenode_typeschema_Scale_TscaleType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_scalechoicesequencenode_typeschema_Scale_TscaleType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Scales {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The layer attribute indicates the names of the layers to which this node belongs.  For example,
//	a value of "foreground glowing" indicates that this node belongs to both the 'foreground' layer
//	and the 'glowing' layer.  The default value is empty, indicating that the node doesn't belong to
//	any layer.  Optional attribute.
type XsdGoPkgHasAttr_Layer_TlistOfNamesType_ struct {
	//	The layer attribute indicates the names of the layers to which this node belongs.  For example,
	//	a value of "foreground glowing" indicates that this node belongs to both the 'foreground' layer
	//	and the 'glowing' layer.  The default value is empty, indicating that the node doesn't belong to
	//	any layer.  Optional attribute.
	Layer TlistOfNamesType `xml:"http://www.collada.org/2008/03/COLLADASchema layer,attr"`
}

//	The node element may instance any number of controller objects.
//	The instance_controller element declares the instantiation of a COLLADA controller resource.
//	The skeleton element is used to indicate where a skin controller is to start to search for
//	the joint nodes it needs.  This element is meaningless for morph controllers.
type XsdGoPkgHasElems_skeletonsequenceinstance_controller_typeschema_Skeleton_XsdtAnyURI_ struct {
	//	The skeleton element is used to indicate where a skin controller is to start to search for
	//	the joint nodes it needs.  This element is meaningless for morph controllers.
	Skeletons []xsdt.AnyURI `xml:"http://www.collada.org/2008/03/COLLADASchema skeleton"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_skeletonsequenceinstance_controller_typeschema_Skeleton_XsdtAnyURI_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_skeletonsequenceinstance_controller_typeschema_Skeleton_XsdtAnyURI_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_skeletonsequenceinstance_controller_typeschema_Skeleton_XsdtAnyURI_ instance.
func (me *XsdGoPkgHasElems_skeletonsequenceinstance_controller_typeschema_Skeleton_XsdtAnyURI_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_skeletonsequenceinstance_controller_typeschema_Skeleton_XsdtAnyURI_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TinstanceControllerType struct {
	//	The url attribute refers to resource. This may refer to a local resource using a relative
	//	URL fragment identifier that begins with the "#" character. The url attribute may refer to an
	//	external resource using an absolute or relative URL.
	XsdGoPkgHasAttr_Url_XsdtAnyURI_

	//	Bind a specific material to a piece of geometry, binding varying and uniform parameters at the
	//	same time.
	XsdGoPkgHasElem_bind_materialsequenceinstance_geometry_typeschema_BindMaterial_TbindMaterialType_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The skeleton element is used to indicate where a skin controller is to start to search for
	//	the joint nodes it needs.  This element is meaningless for morph controllers.
	XsdGoPkgHasElems_skeletonsequenceinstance_controller_typeschema_Skeleton_XsdtAnyURI_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The sid attribute is a text string value containing the sub-identifier of this element. This
	//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_TsidType_
}

//	If the WalkHandlers.TinstanceControllerType function is not nil (ie. was set by outside code), calls it with this TinstanceControllerType instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TinstanceControllerType instance.
func (me *TinstanceControllerType) Walk() (err error) {
	if fn := WalkHandlers.TinstanceControllerType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_bind_materialsequenceinstance_geometry_typeschema_BindMaterial_TbindMaterialType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_skeletonsequenceinstance_controller_typeschema_Skeleton_XsdtAnyURI_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_instance_controllersequencenode_typeschema_InstanceController_TinstanceControllerType_ struct {
	//	The node element may instance any number of controller objects.
	ControllerInstances []*TinstanceControllerType `xml:"http://www.collada.org/2008/03/COLLADASchema instance_controller"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_instance_controllersequencenode_typeschema_InstanceController_TinstanceControllerType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_instance_controllersequencenode_typeschema_InstanceController_TinstanceControllerType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_instance_controllersequencenode_typeschema_InstanceController_TinstanceControllerType_ instance.
func (me *XsdGoPkgHasElems_instance_controllersequencenode_typeschema_InstanceController_TinstanceControllerType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_instance_controllersequencenode_typeschema_InstanceController_TinstanceControllerType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ControllerInstances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The node element may contain any number of matrix elements.
//	Matrix transformations embody mathematical changes to points within a coordinate systems or the
//	coordinate system itself. The matrix element contains a 4-by-4 matrix of floating-point values.
type TmatrixType struct {
	XsdGoPkgValue Tfloat4X4Type `xml:",chardata"`

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_TsidType_
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TmatrixType) ToTfloat4X4Type() Tfloat4X4Type { return me.XsdGoPkgValue }

//	Returns the value of its XsdGoPkgValue field as a TlistOfFloatsType (which Tfloat4X4Type is just aliasing).
func (me *TmatrixType) ToTlistOfFloatsType() TlistOfFloatsType {
	return me.XsdGoPkgValue.ToTlistOfFloatsType()
}

//	If the WalkHandlers.TmatrixType function is not nil (ie. was set by outside code), calls it with this TmatrixType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TmatrixType instance.
func (me *TmatrixType) Walk() (err error) {
	if fn := WalkHandlers.TmatrixType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the value of its XsdGoPkgValue field as a xsdt.String (which Tfloat4X4Type is just aliasing).
func (me *TmatrixType) ToXsdtString() xsdt.String {
	return me.XsdGoPkgValue.ToTlistOfFloatsType().ToXsdtString()
}

type XsdGoPkgHasElems_matrixchoicesequencenode_typeschema_Matrix_TmatrixType_ struct {
	//	The node element may contain any number of matrix elements.
	Matrixs []*TmatrixType `xml:"http://www.collada.org/2008/03/COLLADASchema matrix"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_matrixchoicesequencenode_typeschema_Matrix_TmatrixType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_matrixchoicesequencenode_typeschema_Matrix_TmatrixType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_matrixchoicesequencenode_typeschema_Matrix_TmatrixType_ instance.
func (me *XsdGoPkgHasElems_matrixchoicesequencenode_typeschema_Matrix_TmatrixType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_matrixchoicesequencenode_typeschema_Matrix_TmatrixType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Matrixs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The node element may instance any number of node elements or hierarchies objects.
//	The instance_node element declares the instantiation of a COLLADA node resource.
type XsdGoPkgHasAttr_Proxy_XsdtAnyURI_ struct {
	Proxy xsdt.AnyURI `xml:"http://www.collada.org/2008/03/COLLADASchema proxy,attr"`
}

type TinstanceNodeType struct {
	XsdGoPkgHasAttr_Proxy_XsdtAnyURI_

	TinstanceWithExtraType
}

//	If the WalkHandlers.TinstanceNodeType function is not nil (ie. was set by outside code), calls it with this TinstanceNodeType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TinstanceNodeType instance.
func (me *TinstanceNodeType) Walk() (err error) {
	if fn := WalkHandlers.TinstanceNodeType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TinstanceWithExtraType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_instance_nodesequencenode_typeschema_InstanceNode_TinstanceNodeType_ struct {
	//	The node element may instance any number of node elements or hierarchies objects.
	NodeInstances []*TinstanceNodeType `xml:"http://www.collada.org/2008/03/COLLADASchema instance_node"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_instance_nodesequencenode_typeschema_InstanceNode_TinstanceNodeType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_instance_nodesequencenode_typeschema_InstanceNode_TinstanceNodeType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_instance_nodesequencenode_typeschema_InstanceNode_TinstanceNodeType_ instance.
func (me *XsdGoPkgHasElems_instance_nodesequencenode_typeschema_InstanceNode_TinstanceNodeType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_instance_nodesequencenode_typeschema_InstanceNode_TinstanceNodeType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.NodeInstances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The node element may instance any number of camera objects.
//	The instance_camera element declares the instantiation of a COLLADA camera resource.
type TinstanceCameraType struct {
	TinstanceWithExtraType
}

//	If the WalkHandlers.TinstanceCameraType function is not nil (ie. was set by outside code), calls it with this TinstanceCameraType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TinstanceCameraType instance.
func (me *TinstanceCameraType) Walk() (err error) {
	if fn := WalkHandlers.TinstanceCameraType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TinstanceWithExtraType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_instance_camerasequencenode_typeschema_InstanceCamera_TinstanceCameraType_ struct {
	//	The node element may instance any number of camera objects.
	CameraInstances []*TinstanceCameraType `xml:"http://www.collada.org/2008/03/COLLADASchema instance_camera"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_instance_camerasequencenode_typeschema_InstanceCamera_TinstanceCameraType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_instance_camerasequencenode_typeschema_InstanceCamera_TinstanceCameraType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_instance_camerasequencenode_typeschema_InstanceCamera_TinstanceCameraType_ instance.
func (me *XsdGoPkgHasElems_instance_camerasequencenode_typeschema_InstanceCamera_TinstanceCameraType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_instance_camerasequencenode_typeschema_InstanceCamera_TinstanceCameraType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CameraInstances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The node element may instance any number of geometry objects.
type XsdGoPkgHasElems_instance_geometrysequencenode_typeschema_InstanceGeometry_TinstanceGeometryType_ struct {
	//	The node element may instance any number of geometry objects.
	GeometryInstances []*TinstanceGeometryType `xml:"http://www.collada.org/2008/03/COLLADASchema instance_geometry"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_instance_geometrysequencenode_typeschema_InstanceGeometry_TinstanceGeometryType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_instance_geometrysequencenode_typeschema_InstanceGeometry_TinstanceGeometryType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_instance_geometrysequencenode_typeschema_InstanceGeometry_TinstanceGeometryType_ instance.
func (me *XsdGoPkgHasElems_instance_geometrysequencenode_typeschema_InstanceGeometry_TinstanceGeometryType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_instance_geometrysequencenode_typeschema_InstanceGeometry_TinstanceGeometryType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GeometryInstances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The node element may contain any number of lookat elements.
//	The lookat element contains a position and orientation transformation suitable for aiming a camera.
//	The lookat element contains three mathematical vectors within it that describe:
//	1.	The position of the object;
//	2.	The position of the interest point;
//	3.	The direction that points up.
type TlookatType struct {
	XsdGoPkgValue Tfloat3X3Type `xml:",chardata"`

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_TsidType_
}

//	Returns the value of its XsdGoPkgValue field as a xsdt.String (which Tfloat3X3Type is just aliasing).
func (me *TlookatType) ToXsdtString() xsdt.String {
	return me.XsdGoPkgValue.ToTlistOfFloatsType().ToXsdtString()
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TlookatType) ToTfloat3X3Type() Tfloat3X3Type { return me.XsdGoPkgValue }

//	Returns the value of its XsdGoPkgValue field as a TlistOfFloatsType (which Tfloat3X3Type is just aliasing).
func (me *TlookatType) ToTlistOfFloatsType() TlistOfFloatsType {
	return me.XsdGoPkgValue.ToTlistOfFloatsType()
}

//	If the WalkHandlers.TlookatType function is not nil (ie. was set by outside code), calls it with this TlookatType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TlookatType instance.
func (me *TlookatType) Walk() (err error) {
	if fn := WalkHandlers.TlookatType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_lookatchoicesequencenode_typeschema_Lookat_TlookatType_ struct {
	//	The node element may contain any number of lookat elements.
	Lookats []*TlookatType `xml:"http://www.collada.org/2008/03/COLLADASchema lookat"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_lookatchoicesequencenode_typeschema_Lookat_TlookatType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_lookatchoicesequencenode_typeschema_Lookat_TlookatType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_lookatchoicesequencenode_typeschema_Lookat_TlookatType_ instance.
func (me *XsdGoPkgHasElems_lookatchoicesequencenode_typeschema_Lookat_TlookatType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_lookatchoicesequencenode_typeschema_Lookat_TlookatType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Lookats {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The node element may instance any number of light objects.
//	The instance_light element declares the instantiation of a COLLADA light resource.
type TinstanceLightType struct {
	TinstanceWithExtraType
}

//	If the WalkHandlers.TinstanceLightType function is not nil (ie. was set by outside code), calls it with this TinstanceLightType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TinstanceLightType instance.
func (me *TinstanceLightType) Walk() (err error) {
	if fn := WalkHandlers.TinstanceLightType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TinstanceWithExtraType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_instance_lightsequencenode_typeschema_InstanceLight_TinstanceLightType_ struct {
	//	The node element may instance any number of light objects.
	LightInstances []*TinstanceLightType `xml:"http://www.collada.org/2008/03/COLLADASchema instance_light"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_instance_lightsequencenode_typeschema_InstanceLight_TinstanceLightType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_instance_lightsequencenode_typeschema_InstanceLight_TinstanceLightType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_instance_lightsequencenode_typeschema_InstanceLight_TinstanceLightType_ instance.
func (me *XsdGoPkgHasElems_instance_lightsequencenode_typeschema_InstanceLight_TinstanceLightType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_instance_lightsequencenode_typeschema_InstanceLight_TinstanceLightType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.LightInstances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The node element may contain any number of skew elements.
//	The skew element contains an angle and two mathematical vectors that represent the axis of
//	rotation and the axis of translation.
type Tfloat7Type TlistOfFloatsType

//	Since Tfloat7Type is just a simple String type, this merely returns the current string value.
func (me Tfloat7Type) String() string { return TlistOfFloatsType(me).String() }

//	Since Tfloat7Type is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat7Type) Set(s string) { (*TlistOfFloatsType)(me).Set(s) }

//	This convenience method just performs a simple type conversion to Tfloat7Type's alias type TlistOfFloatsType.
func (me Tfloat7Type) ToTlistOfFloatsType() TlistOfFloatsType { return TlistOfFloatsType(me) }

type TskewType struct {
	XsdGoPkgValue Tfloat7Type `xml:",chardata"`

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_TsidType_
}

//	If the WalkHandlers.TskewType function is not nil (ie. was set by outside code), calls it with this TskewType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TskewType instance.
func (me *TskewType) Walk() (err error) {
	if fn := WalkHandlers.TskewType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the value of its XsdGoPkgValue field as a TlistOfFloatsType (which Tfloat7Type is just aliasing).
func (me *TskewType) ToTlistOfFloatsType() TlistOfFloatsType {
	return me.XsdGoPkgValue.ToTlistOfFloatsType()
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TskewType) ToTfloat7Type() Tfloat7Type { return me.XsdGoPkgValue }

//	Returns the value of its XsdGoPkgValue field as a xsdt.String (which Tfloat7Type is just aliasing).
func (me *TskewType) ToXsdtString() xsdt.String {
	return me.XsdGoPkgValue.ToTlistOfFloatsType().ToXsdtString()
}

type XsdGoPkgHasElems_skewchoicesequencenode_typeschema_Skew_TskewType_ struct {
	//	The node element may contain any number of skew elements.
	Skews []*TskewType `xml:"http://www.collada.org/2008/03/COLLADASchema skew"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_skewchoicesequencenode_typeschema_Skew_TskewType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_skewchoicesequencenode_typeschema_Skew_TskewType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_skewchoicesequencenode_typeschema_Skew_TskewType_ instance.
func (me *XsdGoPkgHasElems_skewchoicesequencenode_typeschema_Skew_TskewType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_skewchoicesequencenode_typeschema_Skew_TskewType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Skews {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TnodeType struct {
	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_TsidType_

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The node element may contain any number of rotate elements.
	XsdGoPkgHasElems_rotatechoiceattachment_endchoicesequencelink_typeschema_Rotate_TrotateType_

	//	The type attribute indicates the type of the node element. The default value is "NODE".
	//	Optional attribute.
	XsdGoPkgHasAttr_Type_TnodeEnum_Node

	//	The node element may contain any number of translate elements.
	XsdGoPkgHasElems_translatechoiceattachment_endchoicesequencelink_typeschema_Translate_TtranslateType_

	//	The node element may contain any number of scale elements.
	XsdGoPkgHasElems_scalechoicesequencenode_typeschema_Scale_TscaleType_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The layer attribute indicates the names of the layers to which this node belongs.  For example,
	//	a value of "foreground glowing" indicates that this node belongs to both the 'foreground' layer
	//	and the 'glowing' layer.  The default value is empty, indicating that the node doesn't belong to
	//	any layer.  Optional attribute.
	XsdGoPkgHasAttr_Layer_TlistOfNamesType_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The node element may instance any number of controller objects.
	XsdGoPkgHasElems_instance_controllersequencenode_typeschema_InstanceController_TinstanceControllerType_

	//	The node element may contain any number of matrix elements.
	XsdGoPkgHasElems_matrixchoicesequencenode_typeschema_Matrix_TmatrixType_

	//	The node element may instance any number of node elements or hierarchies objects.
	XsdGoPkgHasElems_instance_nodesequencenode_typeschema_InstanceNode_TinstanceNodeType_

	//	The node element may instance any number of camera objects.
	XsdGoPkgHasElems_instance_camerasequencenode_typeschema_InstanceCamera_TinstanceCameraType_

	//	The node element may instance any number of geometry objects.
	XsdGoPkgHasElems_instance_geometrysequencenode_typeschema_InstanceGeometry_TinstanceGeometryType_

	//	The node element may contain an asset element.
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	//	The node element may contain any number of lookat elements.
	XsdGoPkgHasElems_lookatchoicesequencenode_typeschema_Lookat_TlookatType_

	//	The node element may instance any number of light objects.
	XsdGoPkgHasElems_instance_lightsequencenode_typeschema_InstanceLight_TinstanceLightType_

	//	The node element may contain any number of skew elements.
	XsdGoPkgHasElems_skewchoicesequencenode_typeschema_Skew_TskewType_

	//	The node element may be hierarchical and be the parent of any number of other node elements.
	XsdGoPkgHasElems_nodesequencenode_typeschema_Node_TnodeType_
}

//	If the WalkHandlers.TnodeType function is not nil (ie. was set by outside code), calls it with this TnodeType instance as the single argument. Then calls the Walk() method on 14/19 embed(s) and 0/0 field(s) belonging to this TnodeType instance.
func (me *TnodeType) Walk() (err error) {
	if fn := WalkHandlers.TnodeType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_rotatechoiceattachment_endchoicesequencelink_typeschema_Rotate_TrotateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_translatechoiceattachment_endchoicesequencelink_typeschema_Translate_TtranslateType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_scalechoicesequencenode_typeschema_Scale_TscaleType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_instance_controllersequencenode_typeschema_InstanceController_TinstanceControllerType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_matrixchoicesequencenode_typeschema_Matrix_TmatrixType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_instance_nodesequencenode_typeschema_InstanceNode_TinstanceNodeType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_instance_camerasequencenode_typeschema_InstanceCamera_TinstanceCameraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_instance_geometrysequencenode_typeschema_InstanceGeometry_TinstanceGeometryType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_lookatchoicesequencenode_typeschema_Lookat_TlookatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_instance_lightsequencenode_typeschema_InstanceLight_TinstanceLightType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_skewchoicesequencenode_typeschema_Skew_TskewType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_nodesequencenode_typeschema_Node_TnodeType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_nodesequencelibrary_nodes_typeschema_Node_TnodeType_ struct {
	//	There must be at least one node element.
	Nodes []*TnodeType `xml:"http://www.collada.org/2008/03/COLLADASchema node"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_nodesequencelibrary_nodes_typeschema_Node_TnodeType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_nodesequencelibrary_nodes_typeschema_Node_TnodeType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_nodesequencelibrary_nodes_typeschema_Node_TnodeType_ instance.
func (me *XsdGoPkgHasElems_nodesequencelibrary_nodes_typeschema_Node_TnodeType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_nodesequencelibrary_nodes_typeschema_Node_TnodeType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Nodes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TlibraryNodesType struct {
	//	There must be at least one node element.
	XsdGoPkgHasElems_nodesequencelibrary_nodes_typeschema_Node_TnodeType_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The library_nodes element may contain an asset element.
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_
}

//	If the WalkHandlers.TlibraryNodesType function is not nil (ie. was set by outside code), calls it with this TlibraryNodesType instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TlibraryNodesType instance.
func (me *TlibraryNodesType) Walk() (err error) {
	if fn := WalkHandlers.TlibraryNodesType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_nodesequencelibrary_nodes_typeschema_Node_TnodeType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_library_nodeschoicesequenceCOLLADAschema_LibraryNodes_TlibraryNodesType_ struct {
	//	The COLLADA element may contain any
	//	number of library_nodes elements.
	NodesLibraries []*TlibraryNodesType `xml:"http://www.collada.org/2008/03/COLLADASchema library_nodes"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_library_nodeschoicesequenceCOLLADAschema_LibraryNodes_TlibraryNodesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_library_nodeschoicesequenceCOLLADAschema_LibraryNodes_TlibraryNodesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_library_nodeschoicesequenceCOLLADAschema_LibraryNodes_TlibraryNodesType_ instance.
func (me *XsdGoPkgHasElems_library_nodeschoicesequenceCOLLADAschema_LibraryNodes_TlibraryNodesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_library_nodeschoicesequenceCOLLADAschema_LibraryNodes_TlibraryNodesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.NodesLibraries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The COLLADA element may contain any
//	number of library_cameras elements.
//	The library_cameras element declares a module of camera elements.
//	There must be at least one camera element.
//	The camera element declares a view into the scene hierarchy or scene graph. The camera contains
//	elements that describe the camera's optics and imager.
//	Optics represents the apparatus on a camera that projects the image onto the image sensor.
//	The technique_common element specifies the optics information for the common profile
//	which all COLLADA implementations need to support.
//	The orthographic element describes the field of view of an orthographic camera.
//	The ymag element contains a floating point number describing the vertical
//	magnification of the view.  It can also have a sid.
type XsdGoPkgHasElem_ymagchoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Ymag_TtargetableFloatType_ struct {
	//	The ymag element contains a floating point number describing the vertical
	//	magnification of the view.  It can also have a sid.
	Ymag *TtargetableFloatType `xml:"http://www.collada.org/2008/03/COLLADASchema ymag"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ymagchoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Ymag_TtargetableFloatType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ymagchoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Ymag_TtargetableFloatType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ymagchoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Ymag_TtargetableFloatType_ instance.
func (me *XsdGoPkgHasElem_ymagchoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Ymag_TtargetableFloatType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ymagchoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Ymag_TtargetableFloatType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ymag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The xmag element contains a floating point number describing the horizontal
//	magnification of the view.
type XsdGoPkgHasElem_xmagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Xmag_TtargetableFloatType_ struct {
	//	The xmag element contains a floating point number describing the horizontal
	//	magnification of the view.
	Xmag *TtargetableFloatType `xml:"http://www.collada.org/2008/03/COLLADASchema xmag"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_xmagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Xmag_TtargetableFloatType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_xmagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Xmag_TtargetableFloatType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_xmagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Xmag_TtargetableFloatType_ instance.
func (me *XsdGoPkgHasElem_xmagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Xmag_TtargetableFloatType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_xmagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Xmag_TtargetableFloatType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xmag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The zfar element contains a floating point number that describes the distance to the far
//	clipping plane. The zfar element must occur exactly once.
type XsdGoPkgHasElem_zfarsequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Zfar_TtargetableFloatType_ struct {
	//	The zfar element contains a floating point number that describes the distance to the far
	//	clipping plane. The zfar element must occur exactly once.
	Zfar *TtargetableFloatType `xml:"http://www.collada.org/2008/03/COLLADASchema zfar"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_zfarsequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Zfar_TtargetableFloatType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_zfarsequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Zfar_TtargetableFloatType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_zfarsequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Zfar_TtargetableFloatType_ instance.
func (me *XsdGoPkgHasElem_zfarsequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Zfar_TtargetableFloatType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_zfarsequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Zfar_TtargetableFloatType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Zfar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The znear element contains a floating point number that describes the distance to the near
//	clipping plane. The znear element must occur exactly once.
type XsdGoPkgHasElem_znearsequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Znear_TtargetableFloatType_ struct {
	//	The znear element contains a floating point number that describes the distance to the near
	//	clipping plane. The znear element must occur exactly once.
	Znear *TtargetableFloatType `xml:"http://www.collada.org/2008/03/COLLADASchema znear"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_znearsequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Znear_TtargetableFloatType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_znearsequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Znear_TtargetableFloatType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_znearsequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Znear_TtargetableFloatType_ instance.
func (me *XsdGoPkgHasElem_znearsequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Znear_TtargetableFloatType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_znearsequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Znear_TtargetableFloatType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Znear.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The aspect_ratio element contains a floating point number describing the aspect ratio of
//	the field of view. If the aspect_ratio element is not present the aspect ratio is to be
//	calculated from the xmag or ymag elements and the current viewport.
type XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_AspectRatio_TtargetableFloatType_ struct {
	//	The aspect_ratio element contains a floating point number describing the aspect ratio of
	//	the field of view. If the aspect_ratio element is not present the aspect ratio is to be
	//	calculated from the xmag or ymag elements and the current viewport.
	AspectRatio *TtargetableFloatType `xml:"http://www.collada.org/2008/03/COLLADASchema aspect_ratio"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_AspectRatio_TtargetableFloatType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_AspectRatio_TtargetableFloatType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_AspectRatio_TtargetableFloatType_ instance.
func (me *XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_AspectRatio_TtargetableFloatType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_AspectRatio_TtargetableFloatType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AspectRatio.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoiceOrthographic struct {
	//	The ymag element contains a floating point number describing the vertical
	//	magnification of the view.  It can also have a sid.
	XsdGoPkgHasElem_ymagchoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Ymag_TtargetableFloatType_

	//	The xmag element contains a floating point number describing the horizontal
	//	magnification of the view.
	XsdGoPkgHasElem_xmagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Xmag_TtargetableFloatType_

	//	The zfar element contains a floating point number that describes the distance to the far
	//	clipping plane. The zfar element must occur exactly once.
	XsdGoPkgHasElem_zfarsequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Zfar_TtargetableFloatType_

	//	The znear element contains a floating point number that describes the distance to the near
	//	clipping plane. The znear element must occur exactly once.
	XsdGoPkgHasElem_znearsequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Znear_TtargetableFloatType_

	//	The aspect_ratio element contains a floating point number describing the aspect ratio of
	//	the field of view. If the aspect_ratio element is not present the aspect ratio is to be
	//	calculated from the xmag or ymag elements and the current viewport.
	XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_AspectRatio_TtargetableFloatType_
}

//	If the WalkHandlers.TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoiceOrthographic function is not nil (ie. was set by outside code), calls it with this TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoiceOrthographic instance as the single argument. Then calls the Walk() method on 5/7 embed(s) and 0/0 field(s) belonging to this TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoiceOrthographic instance.
func (me *TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoiceOrthographic) Walk() (err error) {
	if fn := WalkHandlers.TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoiceOrthographic; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ymagchoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Ymag_TtargetableFloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_xmagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Xmag_TtargetableFloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_zfarsequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Zfar_TtargetableFloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_znearsequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Znear_TtargetableFloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_AspectRatio_TtargetableFloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_orthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Orthographic_TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoiceOrthographic_ struct {
	//	The orthographic element describes the field of view of an orthographic camera.
	Orthographic *TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoiceOrthographic `xml:"http://www.collada.org/2008/03/COLLADASchema orthographic"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_orthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Orthographic_TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoiceOrthographic_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_orthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Orthographic_TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoiceOrthographic_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_orthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Orthographic_TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoiceOrthographic_ instance.
func (me *XsdGoPkgHasElem_orthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Orthographic_TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoiceOrthographic_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_orthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Orthographic_TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoiceOrthographic_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Orthographic.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The perspective element describes the optics of a perspective camera.
//	The yfov element contains a floating point number describing the verticle field of view in degrees.
type XsdGoPkgHasElem_yfovchoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecamera_typeschema_Yfov_TtargetableFloatType_ struct {
	//	The yfov element contains a floating point number describing the verticle field of view in degrees.
	Yfov *TtargetableFloatType `xml:"http://www.collada.org/2008/03/COLLADASchema yfov"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_yfovchoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecamera_typeschema_Yfov_TtargetableFloatType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_yfovchoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecamera_typeschema_Yfov_TtargetableFloatType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_yfovchoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecamera_typeschema_Yfov_TtargetableFloatType_ instance.
func (me *XsdGoPkgHasElem_yfovchoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecamera_typeschema_Yfov_TtargetableFloatType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_yfovchoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecamera_typeschema_Yfov_TtargetableFloatType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Yfov.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The xfov element contains a floating point number describing the horizontal field of view in degrees.
type XsdGoPkgHasElem_xfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecamera_typeschema_Xfov_TtargetableFloatType_ struct {
	//	The xfov element contains a floating point number describing the horizontal field of view in degrees.
	Xfov *TtargetableFloatType `xml:"http://www.collada.org/2008/03/COLLADASchema xfov"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_xfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecamera_typeschema_Xfov_TtargetableFloatType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_xfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecamera_typeschema_Xfov_TtargetableFloatType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_xfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecamera_typeschema_Xfov_TtargetableFloatType_ instance.
func (me *XsdGoPkgHasElem_xfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecamera_typeschema_Xfov_TtargetableFloatType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_xfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecamera_typeschema_Xfov_TtargetableFloatType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xfov.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoicePerspective struct {
	//	The aspect_ratio element contains a floating point number describing the aspect ratio of the field
	//	of view. If the aspect_ratio element is not present the aspect ratio is to be calculated from the
	//	xfov or yfov elements and the current viewport.
	XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_AspectRatio_TtargetableFloatType_

	//	The yfov element contains a floating point number describing the verticle field of view in degrees.
	XsdGoPkgHasElem_yfovchoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecamera_typeschema_Yfov_TtargetableFloatType_

	//	The xfov element contains a floating point number describing the horizontal field of view in degrees.
	XsdGoPkgHasElem_xfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecamera_typeschema_Xfov_TtargetableFloatType_

	//	The zfar element contains a floating point number that describes the distance to the far
	//	clipping plane. The zfar element must occur exactly once.
	XsdGoPkgHasElem_zfarsequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Zfar_TtargetableFloatType_

	//	The znear element contains a floating point number that describes the distance to the near
	//	clipping plane. The znear element must occur exactly once.
	XsdGoPkgHasElem_znearsequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Znear_TtargetableFloatType_
}

//	If the WalkHandlers.TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoicePerspective function is not nil (ie. was set by outside code), calls it with this TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoicePerspective instance as the single argument. Then calls the Walk() method on 5/7 embed(s) and 0/0 field(s) belonging to this TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoicePerspective instance.
func (me *TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoicePerspective) Walk() (err error) {
	if fn := WalkHandlers.TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoicePerspective; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_AspectRatio_TtargetableFloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_yfovchoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecamera_typeschema_Yfov_TtargetableFloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_xfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecamera_typeschema_Xfov_TtargetableFloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_zfarsequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Zfar_TtargetableFloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_znearsequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Znear_TtargetableFloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_perspectivechoicetechnique_commonsequenceopticssequencecamera_typeschema_Perspective_TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoicePerspective_ struct {
	//	The perspective element describes the optics of a perspective camera.
	Perspective *TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoicePerspective `xml:"http://www.collada.org/2008/03/COLLADASchema perspective"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_perspectivechoicetechnique_commonsequenceopticssequencecamera_typeschema_Perspective_TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoicePerspective_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_perspectivechoicetechnique_commonsequenceopticssequencecamera_typeschema_Perspective_TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoicePerspective_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_perspectivechoicetechnique_commonsequenceopticssequencecamera_typeschema_Perspective_TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoicePerspective_ instance.
func (me *XsdGoPkgHasElem_perspectivechoicetechnique_commonsequenceopticssequencecamera_typeschema_Perspective_TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoicePerspective_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_perspectivechoicetechnique_commonsequenceopticssequencecamera_typeschema_Perspective_TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoicePerspective_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Perspective.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCameraTypeSequenceOpticsSequenceTechniqueCommon struct {
	//	The perspective element describes the optics of a perspective camera.
	XsdGoPkgHasElem_perspectivechoicetechnique_commonsequenceopticssequencecamera_typeschema_Perspective_TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoicePerspective_

	//	The orthographic element describes the field of view of an orthographic camera.
	XsdGoPkgHasElem_orthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Orthographic_TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoiceOrthographic_
}

//	If the WalkHandlers.TxsdCameraTypeSequenceOpticsSequenceTechniqueCommon function is not nil (ie. was set by outside code), calls it with this TxsdCameraTypeSequenceOpticsSequenceTechniqueCommon instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdCameraTypeSequenceOpticsSequenceTechniqueCommon instance.
func (me *TxsdCameraTypeSequenceOpticsSequenceTechniqueCommon) Walk() (err error) {
	if fn := WalkHandlers.TxsdCameraTypeSequenceOpticsSequenceTechniqueCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_orthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Orthographic_TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoiceOrthographic_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_perspectivechoicetechnique_commonsequenceopticssequencecamera_typeschema_Perspective_TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoicePerspective_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_technique_commonsequenceopticssequencecamera_typeschema_TechniqueCommon_TxsdCameraTypeSequenceOpticsSequenceTechniqueCommon_ struct {
	//	The technique_common element specifies the optics information for the common profile
	//	which all COLLADA implementations need to support.
	TechniqueCommon *TxsdCameraTypeSequenceOpticsSequenceTechniqueCommon `xml:"http://www.collada.org/2008/03/COLLADASchema technique_common"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_technique_commonsequenceopticssequencecamera_typeschema_TechniqueCommon_TxsdCameraTypeSequenceOpticsSequenceTechniqueCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_technique_commonsequenceopticssequencecamera_typeschema_TechniqueCommon_TxsdCameraTypeSequenceOpticsSequenceTechniqueCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_technique_commonsequenceopticssequencecamera_typeschema_TechniqueCommon_TxsdCameraTypeSequenceOpticsSequenceTechniqueCommon_ instance.
func (me *XsdGoPkgHasElem_technique_commonsequenceopticssequencecamera_typeschema_TechniqueCommon_TxsdCameraTypeSequenceOpticsSequenceTechniqueCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_technique_commonsequenceopticssequencecamera_typeschema_TechniqueCommon_TxsdCameraTypeSequenceOpticsSequenceTechniqueCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TechniqueCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCameraTypeSequenceOptics struct {
	//	This element may contain any number of non-common profile techniques.
	XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The technique_common element specifies the optics information for the common profile
	//	which all COLLADA implementations need to support.
	XsdGoPkgHasElem_technique_commonsequenceopticssequencecamera_typeschema_TechniqueCommon_TxsdCameraTypeSequenceOpticsSequenceTechniqueCommon_
}

//	If the WalkHandlers.TxsdCameraTypeSequenceOptics function is not nil (ie. was set by outside code), calls it with this TxsdCameraTypeSequenceOptics instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdCameraTypeSequenceOptics instance.
func (me *TxsdCameraTypeSequenceOptics) Walk() (err error) {
	if fn := WalkHandlers.TxsdCameraTypeSequenceOptics; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_technique_commonsequenceopticssequencecamera_typeschema_TechniqueCommon_TxsdCameraTypeSequenceOpticsSequenceTechniqueCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_opticssequencecamera_typeschema_Optics_TxsdCameraTypeSequenceOptics_ struct {
	//	Optics represents the apparatus on a camera that projects the image onto the image sensor.
	Optics *TxsdCameraTypeSequenceOptics `xml:"http://www.collada.org/2008/03/COLLADASchema optics"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_opticssequencecamera_typeschema_Optics_TxsdCameraTypeSequenceOptics_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_opticssequencecamera_typeschema_Optics_TxsdCameraTypeSequenceOptics_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_opticssequencecamera_typeschema_Optics_TxsdCameraTypeSequenceOptics_ instance.
func (me *XsdGoPkgHasElem_opticssequencecamera_typeschema_Optics_TxsdCameraTypeSequenceOptics_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_opticssequencecamera_typeschema_Optics_TxsdCameraTypeSequenceOptics_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Optics.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Imagers represent the image sensor of a camera (for example film or CCD).
type TxsdCameraTypeSequenceImager struct {
	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	This element may contain any number of non-common profile techniques.
	//	There is no common technique for imager.
	XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_
}

//	If the WalkHandlers.TxsdCameraTypeSequenceImager function is not nil (ie. was set by outside code), calls it with this TxsdCameraTypeSequenceImager instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdCameraTypeSequenceImager instance.
func (me *TxsdCameraTypeSequenceImager) Walk() (err error) {
	if fn := WalkHandlers.TxsdCameraTypeSequenceImager; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_imagersequencecamera_typeschema_Imager_TxsdCameraTypeSequenceImager_ struct {
	//	Imagers represent the image sensor of a camera (for example film or CCD).
	Imager *TxsdCameraTypeSequenceImager `xml:"http://www.collada.org/2008/03/COLLADASchema imager"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_imagersequencecamera_typeschema_Imager_TxsdCameraTypeSequenceImager_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_imagersequencecamera_typeschema_Imager_TxsdCameraTypeSequenceImager_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_imagersequencecamera_typeschema_Imager_TxsdCameraTypeSequenceImager_ instance.
func (me *XsdGoPkgHasElem_imagersequencecamera_typeschema_Imager_TxsdCameraTypeSequenceImager_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_imagersequencecamera_typeschema_Imager_TxsdCameraTypeSequenceImager_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Imager.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcameraType struct {
	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	Optics represents the apparatus on a camera that projects the image onto the image sensor.
	XsdGoPkgHasElem_opticssequencecamera_typeschema_Optics_TxsdCameraTypeSequenceOptics_

	//	The id attribute is a text string containing the unique identifier of this element. This value
	//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	Imagers represent the image sensor of a camera (for example film or CCD).
	XsdGoPkgHasElem_imagersequencecamera_typeschema_Imager_TxsdCameraTypeSequenceImager_

	//	The camera element may contain an asset element.
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_
}

//	If the WalkHandlers.TcameraType function is not nil (ie. was set by outside code), calls it with this TcameraType instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TcameraType instance.
func (me *TcameraType) Walk() (err error) {
	if fn := WalkHandlers.TcameraType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_opticssequencecamera_typeschema_Optics_TxsdCameraTypeSequenceOptics_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_imagersequencecamera_typeschema_Imager_TxsdCameraTypeSequenceImager_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_camerasequencelibrary_cameras_typeschema_Camera_TcameraType_ struct {
	//	There must be at least one camera element.
	Cameras []*TcameraType `xml:"http://www.collada.org/2008/03/COLLADASchema camera"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_camerasequencelibrary_cameras_typeschema_Camera_TcameraType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_camerasequencelibrary_cameras_typeschema_Camera_TcameraType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_camerasequencelibrary_cameras_typeschema_Camera_TcameraType_ instance.
func (me *XsdGoPkgHasElems_camerasequencelibrary_cameras_typeschema_Camera_TcameraType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_camerasequencelibrary_cameras_typeschema_Camera_TcameraType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Cameras {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TlibraryCamerasType struct {
	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	There must be at least one camera element.
	XsdGoPkgHasElems_camerasequencelibrary_cameras_typeschema_Camera_TcameraType_

	//	The library_cameras element may contain an asset element.
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_
}

//	If the WalkHandlers.TlibraryCamerasType function is not nil (ie. was set by outside code), calls it with this TlibraryCamerasType instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TlibraryCamerasType instance.
func (me *TlibraryCamerasType) Walk() (err error) {
	if fn := WalkHandlers.TlibraryCamerasType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_camerasequencelibrary_cameras_typeschema_Camera_TcameraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_library_cameraschoicesequenceCOLLADAschema_LibraryCameras_TlibraryCamerasType_ struct {
	//	The COLLADA element may contain any
	//	number of library_cameras elements.
	CamerasLibraries []*TlibraryCamerasType `xml:"http://www.collada.org/2008/03/COLLADASchema library_cameras"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_library_cameraschoicesequenceCOLLADAschema_LibraryCameras_TlibraryCamerasType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_library_cameraschoicesequenceCOLLADAschema_LibraryCameras_TlibraryCamerasType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_library_cameraschoicesequenceCOLLADAschema_LibraryCameras_TlibraryCamerasType_ instance.
func (me *XsdGoPkgHasElems_library_cameraschoicesequenceCOLLADAschema_LibraryCameras_TlibraryCamerasType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_library_cameraschoicesequenceCOLLADAschema_LibraryCameras_TlibraryCamerasType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CamerasLibraries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The COLLADA element may contain any
//	number of library_materials elements.
//	The library_materials element declares a module of material elements.
//	There must be at least one material element.
//	Materials describe the visual appearance of a geometric object.
//	The material must instance an effect.
//	The instance_effect element declares the instantiation of a COLLADA effect resource.
//	Assigns a new value to a previously defined parameter
//	A group that specifies the allowable types for effect scoped parameters.
type XsdGoPkgHasElem_sampler_imagechoicefx_setparam_groupschema_SamplerImage_TinstanceImageType_ struct {
	SamplerImage *TinstanceImageType `xml:"http://www.collada.org/2008/03/COLLADASchema sampler_image"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sampler_imagechoicefx_setparam_groupschema_SamplerImage_TinstanceImageType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sampler_imagechoicefx_setparam_groupschema_SamplerImage_TinstanceImageType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sampler_imagechoicefx_setparam_groupschema_SamplerImage_TinstanceImageType_ instance.
func (me *XsdGoPkgHasElem_sampler_imagechoicefx_setparam_groupschema_SamplerImage_TinstanceImageType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sampler_imagechoicefx_setparam_groupschema_SamplerImage_TinstanceImageType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SamplerImage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFxSetparamGroupChoiceSamplerStates struct {
	XsdGoPkgHasGroup_FxSamplerStatesGroup
}

//	If the WalkHandlers.TxsdFxSetparamGroupChoiceSamplerStates function is not nil (ie. was set by outside code), calls it with this TxsdFxSetparamGroupChoiceSamplerStates instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdFxSetparamGroupChoiceSamplerStates instance.
func (me *TxsdFxSetparamGroupChoiceSamplerStates) Walk() (err error) {
	if fn := WalkHandlers.TxsdFxSetparamGroupChoiceSamplerStates; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasGroup_FxSamplerStatesGroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_sampler_stateschoicefx_setparam_groupschema_SamplerStates_TxsdFxSetparamGroupChoiceSamplerStates_ struct {
	SamplerStates *TxsdFxSetparamGroupChoiceSamplerStates `xml:"http://www.collada.org/2008/03/COLLADASchema sampler_states"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sampler_stateschoicefx_setparam_groupschema_SamplerStates_TxsdFxSetparamGroupChoiceSamplerStates_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sampler_stateschoicefx_setparam_groupschema_SamplerStates_TxsdFxSetparamGroupChoiceSamplerStates_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sampler_stateschoicefx_setparam_groupschema_SamplerStates_TxsdFxSetparamGroupChoiceSamplerStates_ instance.
func (me *XsdGoPkgHasElem_sampler_stateschoicefx_setparam_groupschema_SamplerStates_TxsdFxSetparamGroupChoiceSamplerStates_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sampler_stateschoicefx_setparam_groupschema_SamplerStates_TxsdFxSetparamGroupChoiceSamplerStates_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SamplerStates.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasGroup_FxSetparamGroup struct {
	XsdGoPkgHasElem_float2x4choicegles_param_groupschema_Float2X4_Tfloat2X4Type_

	XsdGoPkgHasElem_float2choicefx_annotate_groupschema_Float2_Tfloat2Type_

	XsdGoPkgHasElem_int2choicefx_annotate_groupschema_Int2_Tint2Type_

	XsdGoPkgHasElem_float2x2choicefx_annotate_groupschema_Float2X2_Tfloat2X2Type_

	XsdGoPkgHasElem_floatchoicekinematics_newparam_typeschema_Float_TfloatType_

	XsdGoPkgHasElem_float4x2choicegles_param_groupschema_Float4X2_Tfloat4X2Type_

	XsdGoPkgHasElem_float3x2choicegles_param_groupschema_Float3X2_Tfloat3X2Type_

	XsdGoPkgHasElem_sampler_imagechoicefx_setparam_groupschema_SamplerImage_TinstanceImageType_

	XsdGoPkgHasElem_bool4choicefx_annotate_groupschema_Bool4_Tbool4Type_

	XsdGoPkgHasElem_float3x1choicegles_param_groupschema_Float3X1_Tfloat3Type_

	XsdGoPkgHasElem_boolchoicekinematics_newparam_typeschema_Bool_XsdtBoolean_

	XsdGoPkgHasElem_float4x1choicegles_param_groupschema_Float4X1_Tfloat4Type_

	XsdGoPkgHasElem_sampler_stateschoicefx_setparam_groupschema_SamplerStates_TxsdFxSetparamGroupChoiceSamplerStates_

	XsdGoPkgHasElem_float4x4choicefx_annotate_groupschema_Float4X4_Tfloat4X4Type_

	XsdGoPkgHasElem_float4choicefx_annotate_groupschema_Float4_Tfloat4Type_

	XsdGoPkgHasElem_float2x3choicegles_param_groupschema_Float2X3_Tfloat2X3Type_

	XsdGoPkgHasElem_intchoicekinematics_newparam_typeschema_Int_TintType_

	XsdGoPkgHasElem_bool3choicefx_annotate_groupschema_Bool3_Tbool3Type_

	XsdGoPkgHasElem_float3x3choicefx_annotate_groupschema_Float3X3_Tfloat3X3Type_

	XsdGoPkgHasElem_int4choicefx_annotate_groupschema_Int4_Tint4Type_

	XsdGoPkgHasElem_bool2choicefx_annotate_groupschema_Bool2_Tbool2Type_

	XsdGoPkgHasElem_int3choicefx_annotate_groupschema_Int3_Tint3Type_

	XsdGoPkgHasElem_enumchoicefx_newparam_groupschema_Enum_XsdtString_

	XsdGoPkgHasElem_float3choicefx_annotate_groupschema_Float3_Tfloat3Type_

	XsdGoPkgHasElem_float2x1choicegles_param_groupschema_Float2X1_Tfloat2Type_

	XsdGoPkgHasElem_float3x4choicegles_param_groupschema_Float3X4_Tfloat3X4Type_

	XsdGoPkgHasElem_float4x3choicegles_param_groupschema_Float4X3_Tfloat4X3Type_
}

//	If the WalkHandlers.XsdGoPkgHasGroup_FxSetparamGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_FxSetparamGroup instance as the single argument. Then calls the Walk() method on 27/27 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_FxSetparamGroup instance.
func (me *XsdGoPkgHasGroup_FxSetparamGroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasGroup_FxSetparamGroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_bool2choicefx_annotate_groupschema_Bool2_Tbool2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int3choicefx_annotate_groupschema_Int3_Tint3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_enumchoicefx_newparam_groupschema_Enum_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3choicefx_annotate_groupschema_Float3_Tfloat3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2x1choicegles_param_groupschema_Float2X1_Tfloat2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3x4choicegles_param_groupschema_Float3X4_Tfloat3X4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4x3choicegles_param_groupschema_Float4X3_Tfloat4X3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2x4choicegles_param_groupschema_Float2X4_Tfloat2X4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2choicefx_annotate_groupschema_Float2_Tfloat2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int2choicefx_annotate_groupschema_Int2_Tint2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2x2choicefx_annotate_groupschema_Float2X2_Tfloat2X2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_floatchoicekinematics_newparam_typeschema_Float_TfloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4x2choicegles_param_groupschema_Float4X2_Tfloat4X2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3x2choicegles_param_groupschema_Float3X2_Tfloat3X2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sampler_imagechoicefx_setparam_groupschema_SamplerImage_TinstanceImageType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool4choicefx_annotate_groupschema_Bool4_Tbool4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3x1choicegles_param_groupschema_Float3X1_Tfloat3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_boolchoicekinematics_newparam_typeschema_Bool_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4x1choicegles_param_groupschema_Float4X1_Tfloat4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sampler_stateschoicefx_setparam_groupschema_SamplerStates_TxsdFxSetparamGroupChoiceSamplerStates_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4x4choicefx_annotate_groupschema_Float4X4_Tfloat4X4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4choicefx_annotate_groupschema_Float4_Tfloat4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2x3choicegles_param_groupschema_Float2X3_Tfloat2X3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_intchoicekinematics_newparam_typeschema_Int_TintType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool3choicefx_annotate_groupschema_Bool3_Tbool3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3x3choicefx_annotate_groupschema_Float3X3_Tfloat3X3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int4choicefx_annotate_groupschema_Int4_Tint4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdInstanceEffectTypeSequenceSetparam struct {
	XsdGoPkgHasGroup_FxSetparamGroup

	XsdGoPkgHasAttr_Ref_XsdtToken_
}

//	If the WalkHandlers.TxsdInstanceEffectTypeSequenceSetparam function is not nil (ie. was set by outside code), calls it with this TxsdInstanceEffectTypeSequenceSetparam instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TxsdInstanceEffectTypeSequenceSetparam instance.
func (me *TxsdInstanceEffectTypeSequenceSetparam) Walk() (err error) {
	if fn := WalkHandlers.TxsdInstanceEffectTypeSequenceSetparam; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasGroup_FxSetparamGroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_setparamsequenceinstance_effect_typeschema_Setparam_TxsdInstanceEffectTypeSequenceSetparam_ struct {
	//	Assigns a new value to a previously defined parameter
	Setparams []*TxsdInstanceEffectTypeSequenceSetparam `xml:"http://www.collada.org/2008/03/COLLADASchema setparam"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_setparamsequenceinstance_effect_typeschema_Setparam_TxsdInstanceEffectTypeSequenceSetparam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_setparamsequenceinstance_effect_typeschema_Setparam_TxsdInstanceEffectTypeSequenceSetparam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_setparamsequenceinstance_effect_typeschema_Setparam_TxsdInstanceEffectTypeSequenceSetparam_ instance.
func (me *XsdGoPkgHasElems_setparamsequenceinstance_effect_typeschema_Setparam_TxsdInstanceEffectTypeSequenceSetparam_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_setparamsequenceinstance_effect_typeschema_Setparam_TxsdInstanceEffectTypeSequenceSetparam_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Setparams {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Add a hint for a platform of which technique to use in this effect.
//	A profile defines a string that specifies which API profile this is hint is aimed for.
type XsdGoPkgHasAttr_Profile_XsdtNCName_ struct {
	//	A profile defines a string that specifies which API profile this is hint is aimed for.
	Profile xsdt.NCName `xml:"http://www.collada.org/2008/03/COLLADASchema profile,attr"`
}

type TxsdInstanceEffectTypeSequenceTechniqueHint struct {
	//	A profile defines a string that specifies which API profile this is hint is aimed for.
	XsdGoPkgHasAttr_Profile_XsdtNCName_

	//	A platform defines a string that specifies which platform this is hint is aimed for.
	XsdGoPkgHasAttr_Platform_XsdtNCName_

	//	A reference to the technique to use for the specified platform.
	XsdGoPkgHasAttr_Ref_XsdtNCName_
}

//	If the WalkHandlers.TxsdInstanceEffectTypeSequenceTechniqueHint function is not nil (ie. was set by outside code), calls it with this TxsdInstanceEffectTypeSequenceTechniqueHint instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdInstanceEffectTypeSequenceTechniqueHint instance.
func (me *TxsdInstanceEffectTypeSequenceTechniqueHint) Walk() (err error) {
	if fn := WalkHandlers.TxsdInstanceEffectTypeSequenceTechniqueHint; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_technique_hintsequenceinstance_effect_typeschema_TechniqueHint_TxsdInstanceEffectTypeSequenceTechniqueHint_ struct {
	//	Add a hint for a platform of which technique to use in this effect.
	TechniqueHints []*TxsdInstanceEffectTypeSequenceTechniqueHint `xml:"http://www.collada.org/2008/03/COLLADASchema technique_hint"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_technique_hintsequenceinstance_effect_typeschema_TechniqueHint_TxsdInstanceEffectTypeSequenceTechniqueHint_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_technique_hintsequenceinstance_effect_typeschema_TechniqueHint_TxsdInstanceEffectTypeSequenceTechniqueHint_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_technique_hintsequenceinstance_effect_typeschema_TechniqueHint_TxsdInstanceEffectTypeSequenceTechniqueHint_ instance.
func (me *XsdGoPkgHasElems_technique_hintsequenceinstance_effect_typeschema_TechniqueHint_TxsdInstanceEffectTypeSequenceTechniqueHint_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_technique_hintsequenceinstance_effect_typeschema_TechniqueHint_TxsdInstanceEffectTypeSequenceTechniqueHint_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.TechniqueHints {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TinstanceEffectType struct {
	//	Assigns a new value to a previously defined parameter
	XsdGoPkgHasElems_setparamsequenceinstance_effect_typeschema_Setparam_TxsdInstanceEffectTypeSequenceSetparam_

	//	Add a hint for a platform of which technique to use in this effect.
	XsdGoPkgHasElems_technique_hintsequenceinstance_effect_typeschema_TechniqueHint_TxsdInstanceEffectTypeSequenceTechniqueHint_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The sid attribute is a text string value containing the sub-identifier of this element. This
	//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_TsidType_

	//	The url attribute refers to resource.  This may refer to a local resource using a relative URL
	//	fragment identifier that begins with the "#" character. The url attribute may refer to an external
	//	resource using an absolute or relative URL.
	XsdGoPkgHasAttr_Url_XsdtAnyURI_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_
}

//	If the WalkHandlers.TinstanceEffectType function is not nil (ie. was set by outside code), calls it with this TinstanceEffectType instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TinstanceEffectType instance.
func (me *TinstanceEffectType) Walk() (err error) {
	if fn := WalkHandlers.TinstanceEffectType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_setparamsequenceinstance_effect_typeschema_Setparam_TxsdInstanceEffectTypeSequenceSetparam_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_technique_hintsequenceinstance_effect_typeschema_TechniqueHint_TxsdInstanceEffectTypeSequenceTechniqueHint_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_instance_effectsequencematerial_typeschema_InstanceEffect_TinstanceEffectType_ struct {
	//	The material must instance an effect.
	InstanceEffect *TinstanceEffectType `xml:"http://www.collada.org/2008/03/COLLADASchema instance_effect"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_instance_effectsequencematerial_typeschema_InstanceEffect_TinstanceEffectType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_instance_effectsequencematerial_typeschema_InstanceEffect_TinstanceEffectType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_instance_effectsequencematerial_typeschema_InstanceEffect_TinstanceEffectType_ instance.
func (me *XsdGoPkgHasElem_instance_effectsequencematerial_typeschema_InstanceEffect_TinstanceEffectType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_instance_effectsequencematerial_typeschema_InstanceEffect_TinstanceEffectType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.InstanceEffect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TmaterialType struct {
	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The id attribute is a text string containing the unique identifier of this element. This value
	//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The material must instance an effect.
	XsdGoPkgHasElem_instance_effectsequencematerial_typeschema_InstanceEffect_TinstanceEffectType_

	//	The material element may contain an asset element.
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_
}

//	If the WalkHandlers.TmaterialType function is not nil (ie. was set by outside code), calls it with this TmaterialType instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TmaterialType instance.
func (me *TmaterialType) Walk() (err error) {
	if fn := WalkHandlers.TmaterialType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_instance_effectsequencematerial_typeschema_InstanceEffect_TinstanceEffectType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_materialsequencelibrary_materials_typeschema_Material_TmaterialType_ struct {
	//	There must be at least one material element.
	Materials []*TmaterialType `xml:"http://www.collada.org/2008/03/COLLADASchema material"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_materialsequencelibrary_materials_typeschema_Material_TmaterialType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_materialsequencelibrary_materials_typeschema_Material_TmaterialType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_materialsequencelibrary_materials_typeschema_Material_TmaterialType_ instance.
func (me *XsdGoPkgHasElems_materialsequencelibrary_materials_typeschema_Material_TmaterialType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_materialsequencelibrary_materials_typeschema_Material_TmaterialType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Materials {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TlibraryMaterialsType struct {
	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	There must be at least one material element.
	XsdGoPkgHasElems_materialsequencelibrary_materials_typeschema_Material_TmaterialType_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The library_materials element may contain an asset element.
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_
}

//	If the WalkHandlers.TlibraryMaterialsType function is not nil (ie. was set by outside code), calls it with this TlibraryMaterialsType instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TlibraryMaterialsType instance.
func (me *TlibraryMaterialsType) Walk() (err error) {
	if fn := WalkHandlers.TlibraryMaterialsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_materialsequencelibrary_materials_typeschema_Material_TmaterialType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_library_materialschoicesequenceCOLLADAschema_LibraryMaterials_TlibraryMaterialsType_ struct {
	//	The COLLADA element may contain any
	//	number of library_materials elements.
	MaterialsLibraries []*TlibraryMaterialsType `xml:"http://www.collada.org/2008/03/COLLADASchema library_materials"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_library_materialschoicesequenceCOLLADAschema_LibraryMaterials_TlibraryMaterialsType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_library_materialschoicesequenceCOLLADAschema_LibraryMaterials_TlibraryMaterialsType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_library_materialschoicesequenceCOLLADAschema_LibraryMaterials_TlibraryMaterialsType_ instance.
func (me *XsdGoPkgHasElems_library_materialschoicesequenceCOLLADAschema_LibraryMaterials_TlibraryMaterialsType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_library_materialschoicesequenceCOLLADAschema_LibraryMaterials_TlibraryMaterialsType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MaterialsLibraries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The COLLADA element may contain any
//	number of library_physics_scenes
//	elements.
//	The library_physics_scenes element declares a module of physics_scene elements.
//	There must be at least one physics_scene element.
//	The technique_common element specifies the physics_scene information for the common profile
//	which all COLLADA implementations need to support.
//	The time_step for the physics_scene.
type XsdGoPkgHasElem_time_stepsequencetechnique_commonsequencephysics_scene_typeschema_TimeStep_TtargetableFloatType_ struct {
	//	The time_step for the physics_scene.
	TimeStep *TtargetableFloatType `xml:"http://www.collada.org/2008/03/COLLADASchema time_step"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_time_stepsequencetechnique_commonsequencephysics_scene_typeschema_TimeStep_TtargetableFloatType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_time_stepsequencetechnique_commonsequencephysics_scene_typeschema_TimeStep_TtargetableFloatType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_time_stepsequencetechnique_commonsequencephysics_scene_typeschema_TimeStep_TtargetableFloatType_ instance.
func (me *XsdGoPkgHasElem_time_stepsequencetechnique_commonsequencephysics_scene_typeschema_TimeStep_TtargetableFloatType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_time_stepsequencetechnique_commonsequencephysics_scene_typeschema_TimeStep_TtargetableFloatType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TimeStep.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The gravity vector to use for the physics_scene.
type XsdGoPkgHasElem_gravitysequencetechnique_commonsequencephysics_scene_typeschema_Gravity_TtargetableFloat3Type_ struct {
	//	The gravity vector to use for the physics_scene.
	Gravity *TtargetableFloat3Type `xml:"http://www.collada.org/2008/03/COLLADASchema gravity"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_gravitysequencetechnique_commonsequencephysics_scene_typeschema_Gravity_TtargetableFloat3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_gravitysequencetechnique_commonsequencephysics_scene_typeschema_Gravity_TtargetableFloat3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_gravitysequencetechnique_commonsequencephysics_scene_typeschema_Gravity_TtargetableFloat3Type_ instance.
func (me *XsdGoPkgHasElem_gravitysequencetechnique_commonsequencephysics_scene_typeschema_Gravity_TtargetableFloat3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_gravitysequencetechnique_commonsequencephysics_scene_typeschema_Gravity_TtargetableFloat3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Gravity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPhysicsSceneTypeSequenceTechniqueCommon struct {
	//	The gravity vector to use for the physics_scene.
	XsdGoPkgHasElem_gravitysequencetechnique_commonsequencephysics_scene_typeschema_Gravity_TtargetableFloat3Type_

	//	The time_step for the physics_scene.
	XsdGoPkgHasElem_time_stepsequencetechnique_commonsequencephysics_scene_typeschema_TimeStep_TtargetableFloatType_
}

//	If the WalkHandlers.TxsdPhysicsSceneTypeSequenceTechniqueCommon function is not nil (ie. was set by outside code), calls it with this TxsdPhysicsSceneTypeSequenceTechniqueCommon instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdPhysicsSceneTypeSequenceTechniqueCommon instance.
func (me *TxsdPhysicsSceneTypeSequenceTechniqueCommon) Walk() (err error) {
	if fn := WalkHandlers.TxsdPhysicsSceneTypeSequenceTechniqueCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_gravitysequencetechnique_commonsequencephysics_scene_typeschema_Gravity_TtargetableFloat3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_time_stepsequencetechnique_commonsequencephysics_scene_typeschema_TimeStep_TtargetableFloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_technique_commonsequencephysics_scene_typeschema_TechniqueCommon_TxsdPhysicsSceneTypeSequenceTechniqueCommon_ struct {
	//	The technique_common element specifies the physics_scene information for the common profile
	//	which all COLLADA implementations need to support.
	TechniqueCommon *TxsdPhysicsSceneTypeSequenceTechniqueCommon `xml:"http://www.collada.org/2008/03/COLLADASchema technique_common"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_technique_commonsequencephysics_scene_typeschema_TechniqueCommon_TxsdPhysicsSceneTypeSequenceTechniqueCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_technique_commonsequencephysics_scene_typeschema_TechniqueCommon_TxsdPhysicsSceneTypeSequenceTechniqueCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_technique_commonsequencephysics_scene_typeschema_TechniqueCommon_TxsdPhysicsSceneTypeSequenceTechniqueCommon_ instance.
func (me *XsdGoPkgHasElem_technique_commonsequencephysics_scene_typeschema_TechniqueCommon_TxsdPhysicsSceneTypeSequenceTechniqueCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_technique_commonsequencephysics_scene_typeschema_TechniqueCommon_TxsdPhysicsSceneTypeSequenceTechniqueCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TechniqueCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TphysicsSceneType struct {
	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The technique_common element specifies the physics_scene information for the common profile
	//	which all COLLADA implementations need to support.
	XsdGoPkgHasElem_technique_commonsequencephysics_scene_typeschema_TechniqueCommon_TxsdPhysicsSceneTypeSequenceTechniqueCommon_

	//	There may be any number of instance_force_field elements.
	XsdGoPkgHasElems_instance_force_fieldsequenceinstance_physics_model_typeschema_InstanceForceField_TinstanceForceFieldType_

	//	There may be any number of instance_physics_model elements.
	XsdGoPkgHasElems_instance_physics_modelsequencephysics_model_typeschema_InstancePhysicsModel_TinstancePhysicsModelType_

	//	The physics_scene element may contain an asset element.
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	//	This element may contain any number of non-common profile techniques.
	XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_
}

//	If the WalkHandlers.TphysicsSceneType function is not nil (ie. was set by outside code), calls it with this TphysicsSceneType instance as the single argument. Then calls the Walk() method on 6/8 embed(s) and 0/0 field(s) belonging to this TphysicsSceneType instance.
func (me *TphysicsSceneType) Walk() (err error) {
	if fn := WalkHandlers.TphysicsSceneType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_technique_commonsequencephysics_scene_typeschema_TechniqueCommon_TxsdPhysicsSceneTypeSequenceTechniqueCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_instance_force_fieldsequenceinstance_physics_model_typeschema_InstanceForceField_TinstanceForceFieldType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_instance_physics_modelsequencephysics_model_typeschema_InstancePhysicsModel_TinstancePhysicsModelType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_physics_scenesequencelibrary_physics_scenes_typeschema_PhysicsScene_TphysicsSceneType_ struct {
	//	There must be at least one physics_scene element.
	PhysicsScenes []*TphysicsSceneType `xml:"http://www.collada.org/2008/03/COLLADASchema physics_scene"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_physics_scenesequencelibrary_physics_scenes_typeschema_PhysicsScene_TphysicsSceneType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_physics_scenesequencelibrary_physics_scenes_typeschema_PhysicsScene_TphysicsSceneType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_physics_scenesequencelibrary_physics_scenes_typeschema_PhysicsScene_TphysicsSceneType_ instance.
func (me *XsdGoPkgHasElems_physics_scenesequencelibrary_physics_scenes_typeschema_PhysicsScene_TphysicsSceneType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_physics_scenesequencelibrary_physics_scenes_typeschema_PhysicsScene_TphysicsSceneType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PhysicsScenes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TlibraryPhysicsScenesType struct {
	//	The library_physics_scenes element may contain an asset element.
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	There must be at least one physics_scene element.
	XsdGoPkgHasElems_physics_scenesequencelibrary_physics_scenes_typeschema_PhysicsScene_TphysicsSceneType_
}

//	If the WalkHandlers.TlibraryPhysicsScenesType function is not nil (ie. was set by outside code), calls it with this TlibraryPhysicsScenesType instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TlibraryPhysicsScenesType instance.
func (me *TlibraryPhysicsScenesType) Walk() (err error) {
	if fn := WalkHandlers.TlibraryPhysicsScenesType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_physics_scenesequencelibrary_physics_scenes_typeschema_PhysicsScene_TphysicsSceneType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_library_physics_sceneschoicesequenceCOLLADAschema_LibraryPhysicsScenes_TlibraryPhysicsScenesType_ struct {
	//	The COLLADA element may contain any
	//	number of library_physics_scenes
	//	elements.
	PhysicsScenesLibraries []*TlibraryPhysicsScenesType `xml:"http://www.collada.org/2008/03/COLLADASchema library_physics_scenes"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_library_physics_sceneschoicesequenceCOLLADAschema_LibraryPhysicsScenes_TlibraryPhysicsScenesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_library_physics_sceneschoicesequenceCOLLADAschema_LibraryPhysicsScenes_TlibraryPhysicsScenesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_library_physics_sceneschoicesequenceCOLLADAschema_LibraryPhysicsScenes_TlibraryPhysicsScenesType_ instance.
func (me *XsdGoPkgHasElems_library_physics_sceneschoicesequenceCOLLADAschema_LibraryPhysicsScenes_TlibraryPhysicsScenesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_library_physics_sceneschoicesequenceCOLLADAschema_LibraryPhysicsScenes_TlibraryPhysicsScenesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PhysicsScenesLibraries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TlibraryFormulasType struct {
	XsdGoPkgHasElems_formulachoicesequencekinematics_model_technique_typeschema_Formula_TformulaType_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	XsdGoPkgHasAttr_Name_XsdtToken_
}

//	If the WalkHandlers.TlibraryFormulasType function is not nil (ie. was set by outside code), calls it with this TlibraryFormulasType instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TlibraryFormulasType instance.
func (me *TlibraryFormulasType) Walk() (err error) {
	if fn := WalkHandlers.TlibraryFormulasType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_formulachoicesequencekinematics_model_technique_typeschema_Formula_TformulaType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_library_formulaschoicesequenceCOLLADAschema_LibraryFormulas_TlibraryFormulasType_ struct {
	FormulasLibraries []*TlibraryFormulasType `xml:"http://www.collada.org/2008/03/COLLADASchema library_formulas"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_library_formulaschoicesequenceCOLLADAschema_LibraryFormulas_TlibraryFormulasType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_library_formulaschoicesequenceCOLLADAschema_LibraryFormulas_TlibraryFormulasType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_library_formulaschoicesequenceCOLLADAschema_LibraryFormulas_TlibraryFormulasType_ instance.
func (me *XsdGoPkgHasElems_library_formulaschoicesequenceCOLLADAschema_LibraryFormulas_TlibraryFormulasType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_library_formulaschoicesequenceCOLLADAschema_LibraryFormulas_TlibraryFormulasType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FormulasLibraries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_instance_articulated_systemsequencekinematics_scene_typeschema_InstanceArticulatedSystem_TinstanceArticulatedSystemType_ struct {
	ArticulatedSystemInstances []*TinstanceArticulatedSystemType `xml:"http://www.collada.org/2008/03/COLLADASchema instance_articulated_system"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_instance_articulated_systemsequencekinematics_scene_typeschema_InstanceArticulatedSystem_TinstanceArticulatedSystemType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_instance_articulated_systemsequencekinematics_scene_typeschema_InstanceArticulatedSystem_TinstanceArticulatedSystemType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_instance_articulated_systemsequencekinematics_scene_typeschema_InstanceArticulatedSystem_TinstanceArticulatedSystemType_ instance.
func (me *XsdGoPkgHasElems_instance_articulated_systemsequencekinematics_scene_typeschema_InstanceArticulatedSystem_TinstanceArticulatedSystemType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_instance_articulated_systemsequencekinematics_scene_typeschema_InstanceArticulatedSystem_TinstanceArticulatedSystemType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ArticulatedSystemInstances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TkinematicsSceneType struct {
	XsdGoPkgHasElems_instance_articulated_systemsequencekinematics_scene_typeschema_InstanceArticulatedSystem_TinstanceArticulatedSystemType_

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	XsdGoPkgHasElems_instance_kinematics_modelsequencekinematics_typeschema_InstanceKinematicsModel_TinstanceKinematicsModelType_

	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	XsdGoPkgHasAttr_Name_XsdtToken_
}

//	If the WalkHandlers.TkinematicsSceneType function is not nil (ie. was set by outside code), calls it with this TkinematicsSceneType instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TkinematicsSceneType instance.
func (me *TkinematicsSceneType) Walk() (err error) {
	if fn := WalkHandlers.TkinematicsSceneType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_instance_articulated_systemsequencekinematics_scene_typeschema_InstanceArticulatedSystem_TinstanceArticulatedSystemType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_instance_kinematics_modelsequencekinematics_typeschema_InstanceKinematicsModel_TinstanceKinematicsModelType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_kinematics_scenesequencelibrary_kinematics_scenes_typeschema_KinematicsScene_TkinematicsSceneType_ struct {
	KinematicsScenes []*TkinematicsSceneType `xml:"http://www.collada.org/2008/03/COLLADASchema kinematics_scene"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_kinematics_scenesequencelibrary_kinematics_scenes_typeschema_KinematicsScene_TkinematicsSceneType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_kinematics_scenesequencelibrary_kinematics_scenes_typeschema_KinematicsScene_TkinematicsSceneType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_kinematics_scenesequencelibrary_kinematics_scenes_typeschema_KinematicsScene_TkinematicsSceneType_ instance.
func (me *XsdGoPkgHasElems_kinematics_scenesequencelibrary_kinematics_scenes_typeschema_KinematicsScene_TkinematicsSceneType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_kinematics_scenesequencelibrary_kinematics_scenes_typeschema_KinematicsScene_TkinematicsSceneType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.KinematicsScenes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TlibraryKinematicsScenesType struct {
	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	XsdGoPkgHasAttr_Name_XsdtToken_

	XsdGoPkgHasElems_kinematics_scenesequencelibrary_kinematics_scenes_typeschema_KinematicsScene_TkinematicsSceneType_
}

//	If the WalkHandlers.TlibraryKinematicsScenesType function is not nil (ie. was set by outside code), calls it with this TlibraryKinematicsScenesType instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TlibraryKinematicsScenesType instance.
func (me *TlibraryKinematicsScenesType) Walk() (err error) {
	if fn := WalkHandlers.TlibraryKinematicsScenesType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_kinematics_scenesequencelibrary_kinematics_scenes_typeschema_KinematicsScene_TkinematicsSceneType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_library_kinematics_sceneschoicesequenceCOLLADAschema_LibraryKinematicsScenes_TlibraryKinematicsScenesType_ struct {
	KinematicsScenesLibraries []*TlibraryKinematicsScenesType `xml:"http://www.collada.org/2008/03/COLLADASchema library_kinematics_scenes"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_library_kinematics_sceneschoicesequenceCOLLADAschema_LibraryKinematicsScenes_TlibraryKinematicsScenesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_library_kinematics_sceneschoicesequenceCOLLADAschema_LibraryKinematicsScenes_TlibraryKinematicsScenesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_library_kinematics_sceneschoicesequenceCOLLADAschema_LibraryKinematicsScenes_TlibraryKinematicsScenesType_ instance.
func (me *XsdGoPkgHasElems_library_kinematics_sceneschoicesequenceCOLLADAschema_LibraryKinematicsScenes_TlibraryKinematicsScenesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_library_kinematics_sceneschoicesequenceCOLLADAschema_LibraryKinematicsScenes_TlibraryKinematicsScenesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.KinematicsScenesLibraries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The COLLADA element may contain any
//	number of library_visual_scenes
//	elements.
//	The library_visual_scenes element declares a module of visual_scene elements.
//	There must be at least one visual_scene element.
//	The visual_scene element declares the base of the visual_scene hierarchy or scene graph. The
//	scene contains elements that comprise much of the visual and transformational information
//	content as created by the authoring tools.
//	The evaluate_scene element declares information specifying how to evaluate this visual_scene. There may be any number of evaluate_scene elements.  They are evaluated in order and particular one may be disabled via setting enabled=false.
//	allow this to be disabled and hense skipped durring evaluation.  This is useful for debug.
type XsdGoPkgHasAttr_Enable_XsdtBoolean_True struct {
	//	allow this to be disabled and hense skipped durring evaluation.  This is useful for debug.
	Enable xsdt.Boolean `xml:"http://www.collada.org/2008/03/COLLADASchema enable,attr"`
}

//	Returns the default value for Enable -- true
func (me XsdGoPkgHasAttr_Enable_XsdtBoolean_True) EnableDefault() xsdt.Boolean {
	return xsdt.Boolean(true)
}

//	The render element describes one effect pass to evaluate the scene.
//	There must be at least one render element.
//	The camera_node attribute refers to a node that contains a camera describing the viewpoint to render this compositing step from.
type XsdGoPkgHasAttr_CameraNode_XsdtAnyURI_ struct {
	//	The camera_node attribute refers to a node that contains a camera describing the viewpoint to render this compositing step from.
	CameraNode xsdt.AnyURI `xml:"http://www.collada.org/2008/03/COLLADASchema camera_node,attr"`
}

//	The instance_material element specifies which effect to render in this compositing step
//	while evaluating the scene.
//	Explicitly select one pass.  If empty then use all passes of the technique.
type XsdGoPkgHasAttr_Pass_XsdtNCName_ struct {
	//	Explicitly select one pass.  If empty then use all passes of the technique.
	Pass xsdt.NCName `xml:"http://www.collada.org/2008/03/COLLADASchema pass,attr"`
}

type TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterialSequenceTechniqueOverride struct {
	//	technique
	XsdGoPkgHasAttr_Ref_XsdtNCName_

	//	Explicitly select one pass.  If empty then use all passes of the technique.
	XsdGoPkgHasAttr_Pass_XsdtNCName_
}

//	If the WalkHandlers.TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterialSequenceTechniqueOverride function is not nil (ie. was set by outside code), calls it with this TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterialSequenceTechniqueOverride instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterialSequenceTechniqueOverride instance.
func (me *TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterialSequenceTechniqueOverride) Walk() (err error) {
	if fn := WalkHandlers.TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterialSequenceTechniqueOverride; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_technique_overridesequenceinstance_materialsequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_TechniqueOverride_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterialSequenceTechniqueOverride_ struct {
	TechniqueOverride *TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterialSequenceTechniqueOverride `xml:"http://www.collada.org/2008/03/COLLADASchema technique_override"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_technique_overridesequenceinstance_materialsequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_TechniqueOverride_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterialSequenceTechniqueOverride_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_technique_overridesequenceinstance_materialsequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_TechniqueOverride_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterialSequenceTechniqueOverride_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_technique_overridesequenceinstance_materialsequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_TechniqueOverride_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterialSequenceTechniqueOverride_ instance.
func (me *XsdGoPkgHasElem_technique_overridesequenceinstance_materialsequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_TechniqueOverride_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterialSequenceTechniqueOverride_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_technique_overridesequenceinstance_materialsequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_TechniqueOverride_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterialSequenceTechniqueOverride_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TechniqueOverride.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The bind element binds values to effect parameters upon instantiation.
type XsdGoPkgHasElems_bindsequenceinstance_materialsequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_Bind_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterialSequenceBind_ struct {
	//	The bind element binds values to effect parameters upon instantiation.
	Binds []*TxsdInstanceMaterialTypeSequenceBind `xml:"http://www.collada.org/2008/03/COLLADASchema bind"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_bindsequenceinstance_materialsequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_Bind_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterialSequenceBind_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_bindsequenceinstance_materialsequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_Bind_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterialSequenceBind_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_bindsequenceinstance_materialsequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_Bind_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterialSequenceBind_ instance.
func (me *XsdGoPkgHasElems_bindsequenceinstance_materialsequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_Bind_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterialSequenceBind_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_bindsequenceinstance_materialsequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_Bind_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterialSequenceBind_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Binds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterial struct {
	XsdGoPkgHasElem_technique_overridesequenceinstance_materialsequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_TechniqueOverride_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterialSequenceTechniqueOverride_

	//	The bind element binds values to effect parameters upon instantiation.
	XsdGoPkgHasElems_bindsequenceinstance_materialsequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_Bind_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterialSequenceBind_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	URL to a material
	XsdGoPkgHasAttr_Url_XsdtAnyURI_
}

//	If the WalkHandlers.TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterial function is not nil (ie. was set by outside code), calls it with this TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterial instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterial instance.
func (me *TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterial) Walk() (err error) {
	if fn := WalkHandlers.TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterial; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_technique_overridesequenceinstance_materialsequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_TechniqueOverride_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterialSequenceTechniqueOverride_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_bindsequenceinstance_materialsequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_Bind_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterialSequenceBind_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_instance_materialsequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_InstanceMaterial_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterial_ struct {
	//	The instance_material element specifies which effect to render in this compositing step
	//	while evaluating the scene.
	InstanceMaterial *TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterial `xml:"http://www.collada.org/2008/03/COLLADASchema instance_material"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_instance_materialsequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_InstanceMaterial_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterial_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_instance_materialsequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_InstanceMaterial_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterial_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_instance_materialsequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_InstanceMaterial_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterial_ instance.
func (me *XsdGoPkgHasElem_instance_materialsequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_InstanceMaterial_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterial_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_instance_materialsequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_InstanceMaterial_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterial_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.InstanceMaterial.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The layer element specifies which layer to render in this compositing step while evaluating the scene. You may specify any number of layers.  No layers mans that the entire scene will be used.
type XsdGoPkgHasElems_layersequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_Layer_XsdtNCName_ struct {
	//	The layer element specifies which layer to render in this compositing step while evaluating the scene. You may specify any number of layers.  No layers mans that the entire scene will be used.
	Layers []xsdt.NCName `xml:"http://www.collada.org/2008/03/COLLADASchema layer"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_layersequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_Layer_XsdtNCName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_layersequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_Layer_XsdtNCName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_layersequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_Layer_XsdtNCName_ instance.
func (me *XsdGoPkgHasElems_layersequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_Layer_XsdtNCName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_layersequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_Layer_XsdtNCName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRender struct {
	//	The camera_node attribute refers to a node that contains a camera describing the viewpoint to render this compositing step from.
	XsdGoPkgHasAttr_CameraNode_XsdtAnyURI_

	XsdGoPkgHasAttr_Sid_TsidType_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The instance_material element specifies which effect to render in this compositing step
	//	while evaluating the scene.
	XsdGoPkgHasElem_instance_materialsequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_InstanceMaterial_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterial_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The layer element specifies which layer to render in this compositing step while evaluating the scene. You may specify any number of layers.  No layers mans that the entire scene will be used.
	XsdGoPkgHasElems_layersequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_Layer_XsdtNCName_
}

//	If the WalkHandlers.TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRender function is not nil (ie. was set by outside code), calls it with this TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRender instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRender instance.
func (me *TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRender) Walk() (err error) {
	if fn := WalkHandlers.TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRender; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_layersequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_Layer_XsdtNCName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_instance_materialsequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_InstanceMaterial_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterial_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_rendersequenceevaluate_scenesequencevisual_scene_typeschema_Render_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRender_ struct {
	//	The render element describes one effect pass to evaluate the scene.
	//	There must be at least one render element.
	Renders []*TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRender `xml:"http://www.collada.org/2008/03/COLLADASchema render"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_rendersequenceevaluate_scenesequencevisual_scene_typeschema_Render_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRender_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_rendersequenceevaluate_scenesequencevisual_scene_typeschema_Render_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRender_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_rendersequenceevaluate_scenesequencevisual_scene_typeschema_Render_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRender_ instance.
func (me *XsdGoPkgHasElems_rendersequenceevaluate_scenesequencevisual_scene_typeschema_Render_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRender_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_rendersequenceevaluate_scenesequencevisual_scene_typeschema_Render_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRender_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Renders {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdVisualSceneTypeSequenceEvaluateScene struct {
	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	XsdGoPkgHasAttr_Name_XsdtToken_

	//	allow this to be disabled and hense skipped durring evaluation.  This is useful for debug.
	XsdGoPkgHasAttr_Enable_XsdtBoolean_True

	//	The render element describes one effect pass to evaluate the scene.
	//	There must be at least one render element.
	XsdGoPkgHasElems_rendersequenceevaluate_scenesequencevisual_scene_typeschema_Render_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRender_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	XsdGoPkgHasAttr_Sid_TsidType_
}

//	If the WalkHandlers.TxsdVisualSceneTypeSequenceEvaluateScene function is not nil (ie. was set by outside code), calls it with this TxsdVisualSceneTypeSequenceEvaluateScene instance as the single argument. Then calls the Walk() method on 3/7 embed(s) and 0/0 field(s) belonging to this TxsdVisualSceneTypeSequenceEvaluateScene instance.
func (me *TxsdVisualSceneTypeSequenceEvaluateScene) Walk() (err error) {
	if fn := WalkHandlers.TxsdVisualSceneTypeSequenceEvaluateScene; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_rendersequenceevaluate_scenesequencevisual_scene_typeschema_Render_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRender_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_evaluate_scenesequencevisual_scene_typeschema_EvaluateScene_TxsdVisualSceneTypeSequenceEvaluateScene_ struct {
	//	The evaluate_scene element declares information specifying how to evaluate this visual_scene. There may be any number of evaluate_scene elements.  They are evaluated in order and particular one may be disabled via setting enabled=false.
	EvaluateScenes []*TxsdVisualSceneTypeSequenceEvaluateScene `xml:"http://www.collada.org/2008/03/COLLADASchema evaluate_scene"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_evaluate_scenesequencevisual_scene_typeschema_EvaluateScene_TxsdVisualSceneTypeSequenceEvaluateScene_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_evaluate_scenesequencevisual_scene_typeschema_EvaluateScene_TxsdVisualSceneTypeSequenceEvaluateScene_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_evaluate_scenesequencevisual_scene_typeschema_EvaluateScene_TxsdVisualSceneTypeSequenceEvaluateScene_ instance.
func (me *XsdGoPkgHasElems_evaluate_scenesequencevisual_scene_typeschema_EvaluateScene_TxsdVisualSceneTypeSequenceEvaluateScene_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_evaluate_scenesequencevisual_scene_typeschema_EvaluateScene_TxsdVisualSceneTypeSequenceEvaluateScene_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EvaluateScenes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TvisualSceneType struct {
	//	The id attribute is a text string containing the unique identifier of this element. This
	//	value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The visual_scene element must have at least one node element.
	XsdGoPkgHasElems_nodesequencelibrary_nodes_typeschema_Node_TnodeType_

	//	The visual_scene element may contain an asset element.
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The evaluate_scene element declares information specifying how to evaluate this visual_scene. There may be any number of evaluate_scene elements.  They are evaluated in order and particular one may be disabled via setting enabled=false.
	XsdGoPkgHasElems_evaluate_scenesequencevisual_scene_typeschema_EvaluateScene_TxsdVisualSceneTypeSequenceEvaluateScene_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_
}

//	If the WalkHandlers.TvisualSceneType function is not nil (ie. was set by outside code), calls it with this TvisualSceneType instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TvisualSceneType instance.
func (me *TvisualSceneType) Walk() (err error) {
	if fn := WalkHandlers.TvisualSceneType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_nodesequencelibrary_nodes_typeschema_Node_TnodeType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_evaluate_scenesequencevisual_scene_typeschema_EvaluateScene_TxsdVisualSceneTypeSequenceEvaluateScene_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_visual_scenesequencelibrary_visual_scenes_typeschema_VisualScene_TvisualSceneType_ struct {
	//	There must be at least one visual_scene element.
	VisualScenes []*TvisualSceneType `xml:"http://www.collada.org/2008/03/COLLADASchema visual_scene"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_visual_scenesequencelibrary_visual_scenes_typeschema_VisualScene_TvisualSceneType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_visual_scenesequencelibrary_visual_scenes_typeschema_VisualScene_TvisualSceneType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_visual_scenesequencelibrary_visual_scenes_typeschema_VisualScene_TvisualSceneType_ instance.
func (me *XsdGoPkgHasElems_visual_scenesequencelibrary_visual_scenes_typeschema_VisualScene_TvisualSceneType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_visual_scenesequencelibrary_visual_scenes_typeschema_VisualScene_TvisualSceneType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.VisualScenes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TlibraryVisualScenesType struct {
	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	There must be at least one visual_scene element.
	XsdGoPkgHasElems_visual_scenesequencelibrary_visual_scenes_typeschema_VisualScene_TvisualSceneType_

	//	The library_visual_scenes element may contain an asset element.
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_
}

//	If the WalkHandlers.TlibraryVisualScenesType function is not nil (ie. was set by outside code), calls it with this TlibraryVisualScenesType instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TlibraryVisualScenesType instance.
func (me *TlibraryVisualScenesType) Walk() (err error) {
	if fn := WalkHandlers.TlibraryVisualScenesType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_visual_scenesequencelibrary_visual_scenes_typeschema_VisualScene_TvisualSceneType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_library_visual_sceneschoicesequenceCOLLADAschema_LibraryVisualScenes_TlibraryVisualScenesType_ struct {
	//	The COLLADA element may contain any
	//	number of library_visual_scenes
	//	elements.
	VisualScenesLibraries []*TlibraryVisualScenesType `xml:"http://www.collada.org/2008/03/COLLADASchema library_visual_scenes"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_library_visual_sceneschoicesequenceCOLLADAschema_LibraryVisualScenes_TlibraryVisualScenesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_library_visual_sceneschoicesequenceCOLLADAschema_LibraryVisualScenes_TlibraryVisualScenesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_library_visual_sceneschoicesequenceCOLLADAschema_LibraryVisualScenes_TlibraryVisualScenesType_ instance.
func (me *XsdGoPkgHasElems_library_visual_sceneschoicesequenceCOLLADAschema_LibraryVisualScenes_TlibraryVisualScenesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_library_visual_sceneschoicesequenceCOLLADAschema_LibraryVisualScenes_TlibraryVisualScenesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.VisualScenesLibraries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The scene embodies the entire set of information that can be visualized from the
//	contents of a COLLADA resource. The scene element declares the base of the scene
//	hierarchy or scene graph. The scene contains elements that comprise much of the
//	visual and transformational information content as created by the authoring tools.
type TcommonSidrefOrParamType struct {
	XsdGoPkgHasElem_SIDREFchoicekinematics_newparam_typeschema_Sidref_TsidrefType_

	XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TcommonParamType_
}

//	If the WalkHandlers.TcommonSidrefOrParamType function is not nil (ie. was set by outside code), calls it with this TcommonSidrefOrParamType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TcommonSidrefOrParamType instance.
func (me *TcommonSidrefOrParamType) Walk() (err error) {
	if fn := WalkHandlers.TcommonSidrefOrParamType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TcommonParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SIDREFchoicekinematics_newparam_typeschema_Sidref_TsidrefType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_axissequencebind_joint_axis_typeschema_Axis_TcommonSidrefOrParamType_ struct {
	Axis *TcommonSidrefOrParamType `xml:"http://www.collada.org/2008/03/COLLADASchema axis"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_axissequencebind_joint_axis_typeschema_Axis_TcommonSidrefOrParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_axissequencebind_joint_axis_typeschema_Axis_TcommonSidrefOrParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_axissequencebind_joint_axis_typeschema_Axis_TcommonSidrefOrParamType_ instance.
func (me *XsdGoPkgHasElem_axissequencebind_joint_axis_typeschema_Axis_TcommonSidrefOrParamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_axissequencebind_joint_axis_typeschema_Axis_TcommonSidrefOrParamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Axis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_valuesequencebind_joint_axis_typeschema_Value_TcommonFloatOrParamType_ struct {
	Value *TcommonFloatOrParamType `xml:"http://www.collada.org/2008/03/COLLADASchema value"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_valuesequencebind_joint_axis_typeschema_Value_TcommonFloatOrParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_valuesequencebind_joint_axis_typeschema_Value_TcommonFloatOrParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_valuesequencebind_joint_axis_typeschema_Value_TcommonFloatOrParamType_ instance.
func (me *XsdGoPkgHasElem_valuesequencebind_joint_axis_typeschema_Value_TcommonFloatOrParamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_valuesequencebind_joint_axis_typeschema_Value_TcommonFloatOrParamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Value.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TbindJointAxisType struct {
	XsdGoPkgHasElem_valuesequencebind_joint_axis_typeschema_Value_TcommonFloatOrParamType_

	XsdGoPkgHasElem_axissequencebind_joint_axis_typeschema_Axis_TcommonSidrefOrParamType_

	XsdGoPkgHasAttr_Target_XsdtToken_
}

//	If the WalkHandlers.TbindJointAxisType function is not nil (ie. was set by outside code), calls it with this TbindJointAxisType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TbindJointAxisType instance.
func (me *TbindJointAxisType) Walk() (err error) {
	if fn := WalkHandlers.TbindJointAxisType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_axissequencebind_joint_axis_typeschema_Axis_TcommonSidrefOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_valuesequencebind_joint_axis_typeschema_Value_TcommonFloatOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_bind_joint_axissequenceinstance_kinematics_scene_typeschema_BindJointAxis_TbindJointAxisType_ struct {
	BindJointAxises []*TbindJointAxisType `xml:"http://www.collada.org/2008/03/COLLADASchema bind_joint_axis"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_bind_joint_axissequenceinstance_kinematics_scene_typeschema_BindJointAxis_TbindJointAxisType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_bind_joint_axissequenceinstance_kinematics_scene_typeschema_BindJointAxis_TbindJointAxisType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_bind_joint_axissequenceinstance_kinematics_scene_typeschema_BindJointAxis_TbindJointAxisType_ instance.
func (me *XsdGoPkgHasElems_bind_joint_axissequenceinstance_kinematics_scene_typeschema_BindJointAxis_TbindJointAxisType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_bind_joint_axissequenceinstance_kinematics_scene_typeschema_BindJointAxis_TbindJointAxisType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BindJointAxises {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Node_XsdtToken_ struct {
	Node xsdt.Token `xml:"http://www.collada.org/2008/03/COLLADASchema node,attr"`
}

type TbindKinematicsModelType struct {
	XsdGoPkgHasAttr_Node_XsdtToken_

	TcommonSidrefOrParamType
}

//	If the WalkHandlers.TbindKinematicsModelType function is not nil (ie. was set by outside code), calls it with this TbindKinematicsModelType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TbindKinematicsModelType instance.
func (me *TbindKinematicsModelType) Walk() (err error) {
	if fn := WalkHandlers.TbindKinematicsModelType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TcommonSidrefOrParamType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_bind_kinematics_modelsequenceinstance_kinematics_scene_typeschema_BindKinematicsModel_TbindKinematicsModelType_ struct {
	BindKinematicsModels []*TbindKinematicsModelType `xml:"http://www.collada.org/2008/03/COLLADASchema bind_kinematics_model"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_bind_kinematics_modelsequenceinstance_kinematics_scene_typeschema_BindKinematicsModel_TbindKinematicsModelType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_bind_kinematics_modelsequenceinstance_kinematics_scene_typeschema_BindKinematicsModel_TbindKinematicsModelType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_bind_kinematics_modelsequenceinstance_kinematics_scene_typeschema_BindKinematicsModel_TbindKinematicsModelType_ instance.
func (me *XsdGoPkgHasElems_bind_kinematics_modelsequenceinstance_kinematics_scene_typeschema_BindKinematicsModel_TbindKinematicsModelType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_bind_kinematics_modelsequenceinstance_kinematics_scene_typeschema_BindKinematicsModel_TbindKinematicsModelType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BindKinematicsModels {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TinstanceKinematicsSceneType struct {
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	XsdGoPkgHasAttr_Url_XsdtAnyURI_

	XsdGoPkgHasElems_bind_kinematics_modelsequenceinstance_kinematics_scene_typeschema_BindKinematicsModel_TbindKinematicsModelType_

	XsdGoPkgHasAttr_Sid_TsidType_

	XsdGoPkgHasAttr_Name_XsdtToken_

	XsdGoPkgHasElems_setparamsequenceinstance_kinematics_model_typeschema_Setparam_TkinematicsSetparamType_

	XsdGoPkgHasElems_newparamsequencekinematics_model_technique_typeschema_Newparam_TkinematicsNewparamType_

	XsdGoPkgHasElems_bind_joint_axissequenceinstance_kinematics_scene_typeschema_BindJointAxis_TbindJointAxisType_

	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_
}

//	If the WalkHandlers.TinstanceKinematicsSceneType function is not nil (ie. was set by outside code), calls it with this TinstanceKinematicsSceneType instance as the single argument. Then calls the Walk() method on 6/9 embed(s) and 0/0 field(s) belonging to this TinstanceKinematicsSceneType instance.
func (me *TinstanceKinematicsSceneType) Walk() (err error) {
	if fn := WalkHandlers.TinstanceKinematicsSceneType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_bind_kinematics_modelsequenceinstance_kinematics_scene_typeschema_BindKinematicsModel_TbindKinematicsModelType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_setparamsequenceinstance_kinematics_model_typeschema_Setparam_TkinematicsSetparamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_newparamsequencekinematics_model_technique_typeschema_Newparam_TkinematicsNewparamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_bind_joint_axissequenceinstance_kinematics_scene_typeschema_BindJointAxis_TbindJointAxisType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_instance_kinematics_scenesequencescenesequenceCOLLADAschema_InstanceKinematicsScene_TinstanceKinematicsSceneType_ struct {
	KinematicsSceneInstances []*TinstanceKinematicsSceneType `xml:"http://www.collada.org/2008/03/COLLADASchema instance_kinematics_scene"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_instance_kinematics_scenesequencescenesequenceCOLLADAschema_InstanceKinematicsScene_TinstanceKinematicsSceneType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_instance_kinematics_scenesequencescenesequenceCOLLADAschema_InstanceKinematicsScene_TinstanceKinematicsSceneType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_instance_kinematics_scenesequencescenesequenceCOLLADAschema_InstanceKinematicsScene_TinstanceKinematicsSceneType_ instance.
func (me *XsdGoPkgHasElems_instance_kinematics_scenesequencescenesequenceCOLLADAschema_InstanceKinematicsScene_TinstanceKinematicsSceneType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_instance_kinematics_scenesequencescenesequenceCOLLADAschema_InstanceKinematicsScene_TinstanceKinematicsSceneType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.KinematicsSceneInstances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The instance_visual_scene
//	element declares the
//	instantiation of a COLLADA
//	visual_scene resource. The
//	instance_visual_scene element
//	may only appear once.
type XsdGoPkgHasElem_instance_visual_scenesequencescenesequenceCOLLADAschema_InstanceVisualScene_TinstanceWithExtraType_ struct {
	//	The instance_visual_scene
	//	element declares the
	//	instantiation of a COLLADA
	//	visual_scene resource. The
	//	instance_visual_scene element
	//	may only appear once.
	InstanceVisualScene *TinstanceWithExtraType `xml:"http://www.collada.org/2008/03/COLLADASchema instance_visual_scene"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_instance_visual_scenesequencescenesequenceCOLLADAschema_InstanceVisualScene_TinstanceWithExtraType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_instance_visual_scenesequencescenesequenceCOLLADAschema_InstanceVisualScene_TinstanceWithExtraType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_instance_visual_scenesequencescenesequenceCOLLADAschema_InstanceVisualScene_TinstanceWithExtraType_ instance.
func (me *XsdGoPkgHasElem_instance_visual_scenesequencescenesequenceCOLLADAschema_InstanceVisualScene_TinstanceWithExtraType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_instance_visual_scenesequencescenesequenceCOLLADAschema_InstanceVisualScene_TinstanceWithExtraType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.InstanceVisualScene.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The instance_physics_scene
//	element declares the
//	instantiation of a COLLADA
//	physics_scene resource. The
//	instance_physics_scene element
//	may appear any number of times.
type XsdGoPkgHasElems_instance_physics_scenesequencescenesequenceCOLLADAschema_InstancePhysicsScene_TinstanceWithExtraType_ struct {
	//	The instance_physics_scene
	//	element declares the
	//	instantiation of a COLLADA
	//	physics_scene resource. The
	//	instance_physics_scene element
	//	may appear any number of times.
	PhysicsSceneInstances []*TinstanceWithExtraType `xml:"http://www.collada.org/2008/03/COLLADASchema instance_physics_scene"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_instance_physics_scenesequencescenesequenceCOLLADAschema_InstancePhysicsScene_TinstanceWithExtraType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_instance_physics_scenesequencescenesequenceCOLLADAschema_InstancePhysicsScene_TinstanceWithExtraType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_instance_physics_scenesequencescenesequenceCOLLADAschema_InstancePhysicsScene_TinstanceWithExtraType_ instance.
func (me *XsdGoPkgHasElems_instance_physics_scenesequencescenesequenceCOLLADAschema_InstancePhysicsScene_TinstanceWithExtraType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_instance_physics_scenesequencescenesequenceCOLLADAschema_InstancePhysicsScene_TinstanceWithExtraType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PhysicsSceneInstances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdColladaSequenceScene struct {
	//	The extra element may appear any
	//	number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The instance_physics_scene
	//	element declares the
	//	instantiation of a COLLADA
	//	physics_scene resource. The
	//	instance_physics_scene element
	//	may appear any number of times.
	XsdGoPkgHasElems_instance_physics_scenesequencescenesequenceCOLLADAschema_InstancePhysicsScene_TinstanceWithExtraType_

	XsdGoPkgHasElems_instance_kinematics_scenesequencescenesequenceCOLLADAschema_InstanceKinematicsScene_TinstanceKinematicsSceneType_

	//	The instance_visual_scene
	//	element declares the
	//	instantiation of a COLLADA
	//	visual_scene resource. The
	//	instance_visual_scene element
	//	may only appear once.
	XsdGoPkgHasElem_instance_visual_scenesequencescenesequenceCOLLADAschema_InstanceVisualScene_TinstanceWithExtraType_
}

//	If the WalkHandlers.TxsdColladaSequenceScene function is not nil (ie. was set by outside code), calls it with this TxsdColladaSequenceScene instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdColladaSequenceScene instance.
func (me *TxsdColladaSequenceScene) Walk() (err error) {
	if fn := WalkHandlers.TxsdColladaSequenceScene; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_instance_physics_scenesequencescenesequenceCOLLADAschema_InstancePhysicsScene_TinstanceWithExtraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_instance_kinematics_scenesequencescenesequenceCOLLADAschema_InstanceKinematicsScene_TinstanceKinematicsSceneType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_instance_visual_scenesequencescenesequenceCOLLADAschema_InstanceVisualScene_TinstanceWithExtraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_scenesequenceCOLLADAschema_Scene_TxsdColladaSequenceScene_ struct {
	//	The scene embodies the entire set of information that can be visualized from the
	//	contents of a COLLADA resource. The scene element declares the base of the scene
	//	hierarchy or scene graph. The scene contains elements that comprise much of the
	//	visual and transformational information content as created by the authoring tools.
	Scene *TxsdColladaSequenceScene `xml:"http://www.collada.org/2008/03/COLLADASchema scene"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_scenesequenceCOLLADAschema_Scene_TxsdColladaSequenceScene_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_scenesequenceCOLLADAschema_Scene_TxsdColladaSequenceScene_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_scenesequenceCOLLADAschema_Scene_TxsdColladaSequenceScene_ instance.
func (me *XsdGoPkgHasElem_scenesequenceCOLLADAschema_Scene_TxsdColladaSequenceScene_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_scenesequenceCOLLADAschema_Scene_TxsdColladaSequenceScene_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Scene.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The COLLADA element may contain any
//	number of library_materials elements.
//	The library_physics_materials element declares a module of physics_material elements.
//	There must be at least one physics_material element.
type XsdGoPkgHasElems_physics_materialsequencelibrary_physics_materials_typeschema_PhysicsMaterial_TphysicsMaterialType_ struct {
	//	There must be at least one physics_material element.
	PhysicsMaterials []*TphysicsMaterialType `xml:"http://www.collada.org/2008/03/COLLADASchema physics_material"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_physics_materialsequencelibrary_physics_materials_typeschema_PhysicsMaterial_TphysicsMaterialType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_physics_materialsequencelibrary_physics_materials_typeschema_PhysicsMaterial_TphysicsMaterialType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_physics_materialsequencelibrary_physics_materials_typeschema_PhysicsMaterial_TphysicsMaterialType_ instance.
func (me *XsdGoPkgHasElems_physics_materialsequencelibrary_physics_materials_typeschema_PhysicsMaterial_TphysicsMaterialType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_physics_materialsequencelibrary_physics_materials_typeschema_PhysicsMaterial_TphysicsMaterialType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PhysicsMaterials {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TlibraryPhysicsMaterialsType struct {
	//	The library_physics_materials element may contain an asset element.
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	There must be at least one physics_material element.
	XsdGoPkgHasElems_physics_materialsequencelibrary_physics_materials_typeschema_PhysicsMaterial_TphysicsMaterialType_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_
}

//	If the WalkHandlers.TlibraryPhysicsMaterialsType function is not nil (ie. was set by outside code), calls it with this TlibraryPhysicsMaterialsType instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TlibraryPhysicsMaterialsType instance.
func (me *TlibraryPhysicsMaterialsType) Walk() (err error) {
	if fn := WalkHandlers.TlibraryPhysicsMaterialsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_physics_materialsequencelibrary_physics_materials_typeschema_PhysicsMaterial_TphysicsMaterialType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_library_physics_materialschoicesequenceCOLLADAschema_LibraryPhysicsMaterials_TlibraryPhysicsMaterialsType_ struct {
	//	The COLLADA element may contain any
	//	number of library_materials elements.
	PhysicsMaterialsLibraries []*TlibraryPhysicsMaterialsType `xml:"http://www.collada.org/2008/03/COLLADASchema library_physics_materials"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_library_physics_materialschoicesequenceCOLLADAschema_LibraryPhysicsMaterials_TlibraryPhysicsMaterialsType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_library_physics_materialschoicesequenceCOLLADAschema_LibraryPhysicsMaterials_TlibraryPhysicsMaterialsType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_library_physics_materialschoicesequenceCOLLADAschema_LibraryPhysicsMaterials_TlibraryPhysicsMaterialsType_ instance.
func (me *XsdGoPkgHasElems_library_physics_materialschoicesequenceCOLLADAschema_LibraryPhysicsMaterials_TlibraryPhysicsMaterialsType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_library_physics_materialschoicesequenceCOLLADAschema_LibraryPhysicsMaterials_TlibraryPhysicsMaterialsType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PhysicsMaterialsLibraries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The COLLADA element may contain any
//	number of library_images elements.
//	The library_images element declares a module of image elements.
//	There must be at least one image element.
//	Initialize a custom cube image
//	Zero is not an array
type XsdGoPkgHasAttr_Length_XsdtUnsignedInt_ struct {
	//	Zero is not an array
	Length xsdt.UnsignedInt `xml:"http://www.collada.org/2008/03/COLLADASchema length,attr"`
}

type TxsdImageTypeSequenceChoiceCreateCubeSequenceArray struct {
	//	Zero is not an array
	XsdGoPkgHasAttr_Length_XsdtUnsignedInt_
}

//	If the WalkHandlers.TxsdImageTypeSequenceChoiceCreateCubeSequenceArray function is not nil (ie. was set by outside code), calls it with this TxsdImageTypeSequenceChoiceCreateCubeSequenceArray instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TxsdImageTypeSequenceChoiceCreateCubeSequenceArray instance.
func (me *TxsdImageTypeSequenceChoiceCreateCubeSequenceArray) Walk() (err error) {
	if fn := WalkHandlers.TxsdImageTypeSequenceChoiceCreateCubeSequenceArray; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_arraysequencecreate_cubechoicesequenceimage_typeschema_Array_TxsdImageTypeSequenceChoiceCreateCubeSequenceArray_ struct {
	Array *TxsdImageTypeSequenceChoiceCreateCubeSequenceArray `xml:"http://www.collada.org/2008/03/COLLADASchema array"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_arraysequencecreate_cubechoicesequenceimage_typeschema_Array_TxsdImageTypeSequenceChoiceCreateCubeSequenceArray_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_arraysequencecreate_cubechoicesequenceimage_typeschema_Array_TxsdImageTypeSequenceChoiceCreateCubeSequenceArray_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_arraysequencecreate_cubechoicesequenceimage_typeschema_Array_TxsdImageTypeSequenceChoiceCreateCubeSequenceArray_ instance.
func (me *XsdGoPkgHasElem_arraysequencecreate_cubechoicesequenceimage_typeschema_Array_TxsdImageTypeSequenceChoiceCreateCubeSequenceArray_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_arraysequencecreate_cubechoicesequenceimage_typeschema_Array_TxsdImageTypeSequenceChoiceCreateCubeSequenceArray_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Array.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	init the image data from one or more partial pieces of data.  The load attribute indicates what portion of the image will be loaded based on the ''address" specified.  mip_generate may be used to complete the image.
type XsdGoPkgHasAttr_MipIndex_XsdtUnsignedInt_ struct {
	MipIndex xsdt.UnsignedInt `xml:"http://www.collada.org/2008/03/COLLADASchema mip_index,attr"`
}

//	The data element contains a sequence of hexadecimal encoded binary octets representing the embedded image data.  The format attribute is use the determine which codec decodes the image's descriptions and data.
type XsdGoPkgHasElem_hexchoiceimage_source_typeschema_Hex_TxsdImageSourceTypeChoiceHex_ struct {
	//	The data element contains a sequence of hexadecimal encoded binary octets representing the embedded image data.  The format attribute is use the determine which codec decodes the image's descriptions and data.
	Hex *TxsdFxTargetTypeSequenceBinaryChoiceHex `xml:"http://www.collada.org/2008/03/COLLADASchema hex"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_hexchoiceimage_source_typeschema_Hex_TxsdImageSourceTypeChoiceHex_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_hexchoiceimage_source_typeschema_Hex_TxsdImageSourceTypeChoiceHex_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_hexchoiceimage_source_typeschema_Hex_TxsdImageSourceTypeChoiceHex_ instance.
func (me *XsdGoPkgHasElem_hexchoiceimage_source_typeschema_Hex_TxsdImageSourceTypeChoiceHex_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_hexchoiceimage_source_typeschema_Hex_TxsdImageSourceTypeChoiceHex_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Hex.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TimageSourceType struct {
	//	The data element contains a sequence of hexadecimal encoded binary octets representing the embedded image data.  The format attribute is use the determine which codec decodes the image's descriptions and data.
	XsdGoPkgHasElem_hexchoiceimage_source_typeschema_Hex_TxsdImageSourceTypeChoiceHex_

	//	Initialize purely from a file.  Assume the characteristics of the file.  If it is a complex format like DDS this may include cube maps, volumes,  mips, etc.
	XsdGoPkgHasElem_refchoicebinarysequencefx_target_typeschema_Ref_XsdtAnyURI_
}

//	If the WalkHandlers.TimageSourceType function is not nil (ie. was set by outside code), calls it with this TimageSourceType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TimageSourceType instance.
func (me *TimageSourceType) Walk() (err error) {
	if fn := WalkHandlers.TimageSourceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_hexchoiceimage_source_typeschema_Hex_TxsdImageSourceTypeChoiceHex_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_refchoicebinarysequencefx_target_typeschema_Ref_XsdtAnyURI_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Face_TimageFaceEnum_ struct {
	Face TimageFaceEnum `xml:"http://www.collada.org/2008/03/COLLADASchema face,attr"`
}

type XsdGoPkgHasAttr_ArrayIndex_XsdtUnsignedInt_0 struct {
	ArrayIndex xsdt.UnsignedInt `xml:"http://www.collada.org/2008/03/COLLADASchema array_index,attr"`
}

//	Returns the default value for ArrayIndex -- 0
func (me XsdGoPkgHasAttr_ArrayIndex_XsdtUnsignedInt_0) ArrayIndexDefault() xsdt.UnsignedInt {
	return xsdt.UnsignedInt(0)
}

type TxsdImageTypeSequenceChoiceCreateCubeSequenceInitFrom struct {
	TimageSourceType

	XsdGoPkgHasAttr_Face_TimageFaceEnum_

	XsdGoPkgHasAttr_ArrayIndex_XsdtUnsignedInt_0

	XsdGoPkgHasAttr_MipIndex_XsdtUnsignedInt_
}

//	If the WalkHandlers.TxsdImageTypeSequenceChoiceCreateCubeSequenceInitFrom function is not nil (ie. was set by outside code), calls it with this TxsdImageTypeSequenceChoiceCreateCubeSequenceInitFrom instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TxsdImageTypeSequenceChoiceCreateCubeSequenceInitFrom instance.
func (me *TxsdImageTypeSequenceChoiceCreateCubeSequenceInitFrom) Walk() (err error) {
	if fn := WalkHandlers.TxsdImageTypeSequenceChoiceCreateCubeSequenceInitFrom; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TimageSourceType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_init_fromsequencecreate_cubechoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceCreateCubeSequenceInitFrom_ struct {
	//	init the image data from one or more partial pieces of data.  The load attribute indicates what portion of the image will be loaded based on the ''address" specified.  mip_generate may be used to complete the image.
	InitFroms []*TxsdImageTypeSequenceChoiceCreateCubeSequenceInitFrom `xml:"http://www.collada.org/2008/03/COLLADASchema init_from"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_init_fromsequencecreate_cubechoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceCreateCubeSequenceInitFrom_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_init_fromsequencecreate_cubechoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceCreateCubeSequenceInitFrom_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_init_fromsequencecreate_cubechoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceCreateCubeSequenceInitFrom_ instance.
func (me *XsdGoPkgHasElems_init_fromsequencecreate_cubechoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceCreateCubeSequenceInitFrom_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_init_fromsequencecreate_cubechoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceCreateCubeSequenceInitFrom_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.InitFroms {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	If not present it is assumed to be R8G8B8A8 linear.
//	Contains a string representing the profile and platform specific texel format that the author would like this surface to use.  If this element is not specified then the application will fall back to the hint
type XsdGoPkgHasElem_exactsequenceformatsequencecreate_cubechoicesequenceimage_typeschema_Exact_XsdtToken_ struct {
	//	Contains a string representing the profile and platform specific texel format that the author would like this surface to use.  If this element is not specified then the application will fall back to the hint
	Exact xsdt.Token `xml:"http://www.collada.org/2008/03/COLLADASchema exact"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_exactsequenceformatsequencecreate_cubechoicesequenceimage_typeschema_Exact_XsdtToken_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_exactsequenceformatsequencecreate_cubechoicesequenceimage_typeschema_Exact_XsdtToken_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_exactsequenceformatsequencecreate_cubechoicesequenceimage_typeschema_Exact_XsdtToken_ instance.
func (me *XsdGoPkgHasElem_exactsequenceformatsequencecreate_cubechoicesequenceimage_typeschema_Exact_XsdtToken_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_exactsequenceformatsequencecreate_cubechoicesequenceimage_typeschema_Exact_XsdtToken_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	if this element or a higher precidence element is not present then use a common format R8G8B8A8 with linear color gradient, not  sRGB.
//	The per-texel layout of the format.  The length of the string indicate how many channels there are and the letter respresents the name of the channel.  There are typically 0 to 4 channels.
//	The per-texel layout of the format.  The length of the string indicate how many channels there are and the letter respresents the name of the channel.  There are typically 0 to 4 channels.
type TimageFormatHintChannelsEnum xsdt.String

//	Returns true if the value of this enumerated TimageFormatHintChannelsEnum is "RGBA".
func (me TimageFormatHintChannelsEnum) IsRgba() bool { return me == "RGBA" }

//	Returns true if the value of this enumerated TimageFormatHintChannelsEnum is "LA".
func (me TimageFormatHintChannelsEnum) IsLa() bool { return me == "LA" }

//	Since TimageFormatHintChannelsEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TimageFormatHintChannelsEnum) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TimageFormatHintChannelsEnum is "D".
func (me TimageFormatHintChannelsEnum) IsD() bool { return me == "D" }

//	Returns true if the value of this enumerated TimageFormatHintChannelsEnum is "L".
func (me TimageFormatHintChannelsEnum) IsL() bool { return me == "L" }

//	Returns true if the value of this enumerated TimageFormatHintChannelsEnum is "RGBE".
func (me TimageFormatHintChannelsEnum) IsRgbe() bool { return me == "RGBE" }

//	This convenience method just performs a simple type conversion to TimageFormatHintChannelsEnum's alias type xsdt.String.
func (me TimageFormatHintChannelsEnum) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TimageFormatHintChannelsEnum is "RGB".
func (me TimageFormatHintChannelsEnum) IsRgb() bool { return me == "RGB" }

//	Since TimageFormatHintChannelsEnum is just a simple String type, this merely returns the current string value.
func (me TimageFormatHintChannelsEnum) String() string { return xsdt.String(me).String() }

type XsdGoPkgHasAttr_Channels_TimageFormatHintChannelsEnum_ struct {
	//	The per-texel layout of the format.  The length of the string indicate how many channels there are and the letter respresents the name of the channel.  There are typically 0 to 4 channels.
	Channels TimageFormatHintChannelsEnum `xml:"http://www.collada.org/2008/03/COLLADASchema channels,attr"`
}

//	Each channel of the texel has a precision.  Typically these are all linked together.  An exact format lay lower the precision of an individual channel but applying a higher precision by linking the channels together may still convey the same information.
//	Each channel of the texel has a precision.  Typically these are all linked together.  An exact format lay lower the precision of an individual channel but applying a higher precision by linking the channels together may still convey the same information.
type TimageFormatHintPrecisionEnum xsdt.String

//	Returns true if the value of this enumerated TimageFormatHintPrecisionEnum is "MID".
func (me TimageFormatHintPrecisionEnum) IsMid() bool { return me == "MID" }

//	Returns true if the value of this enumerated TimageFormatHintPrecisionEnum is "DEFAULT".
func (me TimageFormatHintPrecisionEnum) IsDefault() bool { return me == "DEFAULT" }

//	Returns true if the value of this enumerated TimageFormatHintPrecisionEnum is "HIGH".
func (me TimageFormatHintPrecisionEnum) IsHigh() bool { return me == "HIGH" }

//	Since TimageFormatHintPrecisionEnum is just a simple String type, this merely returns the current string value.
func (me TimageFormatHintPrecisionEnum) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TimageFormatHintPrecisionEnum is "LOW".
func (me TimageFormatHintPrecisionEnum) IsLow() bool { return me == "LOW" }

//	This convenience method just performs a simple type conversion to TimageFormatHintPrecisionEnum's alias type xsdt.String.
func (me TimageFormatHintPrecisionEnum) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TimageFormatHintPrecisionEnum is "MAX".
func (me TimageFormatHintPrecisionEnum) IsMax() bool { return me == "MAX" }

//	Since TimageFormatHintPrecisionEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TimageFormatHintPrecisionEnum) Set(s string) { (*xsdt.String)(me).Set(s) }

type XsdGoPkgHasAttr_Precision_TimageFormatHintPrecisionEnum_Default struct {
	//	Each channel of the texel has a precision.  Typically these are all linked together.  An exact format lay lower the precision of an individual channel but applying a higher precision by linking the channels together may still convey the same information.
	Precision TimageFormatHintPrecisionEnum `xml:"http://www.collada.org/2008/03/COLLADASchema precision,attr"`
}

//	Returns the default value for Precision -- "DEFAULT"
func (me XsdGoPkgHasAttr_Precision_TimageFormatHintPrecisionEnum_Default) PrecisionDefault() TimageFormatHintPrecisionEnum {
	return TimageFormatHintPrecisionEnum("DEFAULT")
}

//	linear(default), sRGB
type XsdGoPkgHasAttr_Space_XsdtToken_ struct {
	//	linear(default), sRGB
	Space xsdt.Token `xml:"http://www.collada.org/2008/03/COLLADASchema space,attr"`
}

//	Each channel represents a range of values. Some example ranges are signed or unsigned integers, or between between a clamped range such as 0.0f to 1.0f, or high dynamic range via floating point
//	Each channel represents a range of values. Some example ranges are signed or unsigned integers, or between between a clamped range such as 0.0f to 1.0f, or high dynamic range via floating point
type TimageFormatHintRangeEnum xsdt.String

//	Since TimageFormatHintRangeEnum is just a simple String type, this merely returns the current string value.
func (me TimageFormatHintRangeEnum) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TimageFormatHintRangeEnum is "UNORM".
func (me TimageFormatHintRangeEnum) IsUnorm() bool { return me == "UNORM" }

//	Returns true if the value of this enumerated TimageFormatHintRangeEnum is "SINT".
func (me TimageFormatHintRangeEnum) IsSint() bool { return me == "SINT" }

//	Returns true if the value of this enumerated TimageFormatHintRangeEnum is "FLOAT".
func (me TimageFormatHintRangeEnum) IsFloat() bool { return me == "FLOAT" }

//	Returns true if the value of this enumerated TimageFormatHintRangeEnum is "UINT".
func (me TimageFormatHintRangeEnum) IsUint() bool { return me == "UINT" }

//	This convenience method just performs a simple type conversion to TimageFormatHintRangeEnum's alias type xsdt.String.
func (me TimageFormatHintRangeEnum) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TimageFormatHintRangeEnum is "SNORM".
func (me TimageFormatHintRangeEnum) IsSnorm() bool { return me == "SNORM" }

//	Since TimageFormatHintRangeEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TimageFormatHintRangeEnum) Set(s string) { (*xsdt.String)(me).Set(s) }

type XsdGoPkgHasAttr_Range_TimageFormatHintRangeEnum_ struct {
	//	Each channel represents a range of values. Some example ranges are signed or unsigned integers, or between between a clamped range such as 0.0f to 1.0f, or high dynamic range via floating point
	Range TimageFormatHintRangeEnum `xml:"http://www.collada.org/2008/03/COLLADASchema range,attr"`
}

type TxsdImageTypeSequenceChoiceCreateCubeSequenceFormatSequenceHint struct {
	//	The per-texel layout of the format.  The length of the string indicate how many channels there are and the letter respresents the name of the channel.  There are typically 0 to 4 channels.
	XsdGoPkgHasAttr_Channels_TimageFormatHintChannelsEnum_

	//	Each channel of the texel has a precision.  Typically these are all linked together.  An exact format lay lower the precision of an individual channel but applying a higher precision by linking the channels together may still convey the same information.
	XsdGoPkgHasAttr_Precision_TimageFormatHintPrecisionEnum_Default

	//	linear(default), sRGB
	XsdGoPkgHasAttr_Space_XsdtToken_

	//	Each channel represents a range of values. Some example ranges are signed or unsigned integers, or between between a clamped range such as 0.0f to 1.0f, or high dynamic range via floating point
	XsdGoPkgHasAttr_Range_TimageFormatHintRangeEnum_
}

//	If the WalkHandlers.TxsdImageTypeSequenceChoiceCreateCubeSequenceFormatSequenceHint function is not nil (ie. was set by outside code), calls it with this TxsdImageTypeSequenceChoiceCreateCubeSequenceFormatSequenceHint instance as the single argument. Then calls the Walk() method on 0/4 embed(s) and 0/0 field(s) belonging to this TxsdImageTypeSequenceChoiceCreateCubeSequenceFormatSequenceHint instance.
func (me *TxsdImageTypeSequenceChoiceCreateCubeSequenceFormatSequenceHint) Walk() (err error) {
	if fn := WalkHandlers.TxsdImageTypeSequenceChoiceCreateCubeSequenceFormatSequenceHint; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_hintsequenceformatsequencecreate_cubechoicesequenceimage_typeschema_Hint_TxsdImageTypeSequenceChoiceCreateCubeSequenceFormatSequenceHint_ struct {
	//	if this element or a higher precidence element is not present then use a common format R8G8B8A8 with linear color gradient, not  sRGB.
	Hint *TxsdImageTypeSequenceChoiceCreateCubeSequenceFormatSequenceHint `xml:"http://www.collada.org/2008/03/COLLADASchema hint"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_hintsequenceformatsequencecreate_cubechoicesequenceimage_typeschema_Hint_TxsdImageTypeSequenceChoiceCreateCubeSequenceFormatSequenceHint_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_hintsequenceformatsequencecreate_cubechoicesequenceimage_typeschema_Hint_TxsdImageTypeSequenceChoiceCreateCubeSequenceFormatSequenceHint_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_hintsequenceformatsequencecreate_cubechoicesequenceimage_typeschema_Hint_TxsdImageTypeSequenceChoiceCreateCubeSequenceFormatSequenceHint_ instance.
func (me *XsdGoPkgHasElem_hintsequenceformatsequencecreate_cubechoicesequenceimage_typeschema_Hint_TxsdImageTypeSequenceChoiceCreateCubeSequenceFormatSequenceHint_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_hintsequenceformatsequencecreate_cubechoicesequenceimage_typeschema_Hint_TxsdImageTypeSequenceChoiceCreateCubeSequenceFormatSequenceHint_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Hint.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdImageTypeSequenceChoiceCreateCubeSequenceFormat struct {
	//	Contains a string representing the profile and platform specific texel format that the author would like this surface to use.  If this element is not specified then the application will fall back to the hint
	XsdGoPkgHasElem_exactsequenceformatsequencecreate_cubechoicesequenceimage_typeschema_Exact_XsdtToken_

	//	if this element or a higher precidence element is not present then use a common format R8G8B8A8 with linear color gradient, not  sRGB.
	XsdGoPkgHasElem_hintsequenceformatsequencecreate_cubechoicesequenceimage_typeschema_Hint_TxsdImageTypeSequenceChoiceCreateCubeSequenceFormatSequenceHint_
}

//	If the WalkHandlers.TxsdImageTypeSequenceChoiceCreateCubeSequenceFormat function is not nil (ie. was set by outside code), calls it with this TxsdImageTypeSequenceChoiceCreateCubeSequenceFormat instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdImageTypeSequenceChoiceCreateCubeSequenceFormat instance.
func (me *TxsdImageTypeSequenceChoiceCreateCubeSequenceFormat) Walk() (err error) {
	if fn := WalkHandlers.TxsdImageTypeSequenceChoiceCreateCubeSequenceFormat; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_exactsequenceformatsequencecreate_cubechoicesequenceimage_typeschema_Exact_XsdtToken_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_hintsequenceformatsequencecreate_cubechoicesequenceimage_typeschema_Hint_TxsdImageTypeSequenceChoiceCreateCubeSequenceFormatSequenceHint_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_formatsequencecreate_cubechoicesequenceimage_typeschema_Format_TxsdImageTypeSequenceChoiceCreateCubeSequenceFormat_ struct {
	//	If not present it is assumed to be R8G8B8A8 linear.
	Format *TxsdImageTypeSequenceChoiceCreateCubeSequenceFormat `xml:"http://www.collada.org/2008/03/COLLADASchema format"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_formatsequencecreate_cubechoicesequenceimage_typeschema_Format_TxsdImageTypeSequenceChoiceCreateCubeSequenceFormat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_formatsequencecreate_cubechoicesequenceimage_typeschema_Format_TxsdImageTypeSequenceChoiceCreateCubeSequenceFormat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_formatsequencecreate_cubechoicesequenceimage_typeschema_Format_TxsdImageTypeSequenceChoiceCreateCubeSequenceFormat_ instance.
func (me *XsdGoPkgHasElem_formatsequencecreate_cubechoicesequenceimage_typeschema_Format_TxsdImageTypeSequenceChoiceCreateCubeSequenceFormat_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_formatsequencecreate_cubechoicesequenceimage_typeschema_Format_TxsdImageTypeSequenceChoiceCreateCubeSequenceFormat_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Format.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The surface should be sized to these exact dimensions
type XsdGoPkgHasAttr_Width_XsdtUnsignedInt_ struct {
	Width xsdt.UnsignedInt `xml:"http://www.collada.org/2008/03/COLLADASchema width,attr"`
}

type TxsdImageTypeSequenceChoiceCreateCubeSequenceSize struct {
	XsdGoPkgHasAttr_Width_XsdtUnsignedInt_
}

//	If the WalkHandlers.TxsdImageTypeSequenceChoiceCreateCubeSequenceSize function is not nil (ie. was set by outside code), calls it with this TxsdImageTypeSequenceChoiceCreateCubeSequenceSize instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TxsdImageTypeSequenceChoiceCreateCubeSequenceSize instance.
func (me *TxsdImageTypeSequenceChoiceCreateCubeSequenceSize) Walk() (err error) {
	if fn := WalkHandlers.TxsdImageTypeSequenceChoiceCreateCubeSequenceSize; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_sizesequencecreate_cubechoicesequenceimage_typeschema_Size_TxsdImageTypeSequenceChoiceCreateCubeSequenceSize_ struct {
	//	The surface should be sized to these exact dimensions
	Size *TxsdImageTypeSequenceChoiceCreateCubeSequenceSize `xml:"http://www.collada.org/2008/03/COLLADASchema size"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sizesequencecreate_cubechoicesequenceimage_typeschema_Size_TxsdImageTypeSequenceChoiceCreateCubeSequenceSize_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sizesequencecreate_cubechoicesequenceimage_typeschema_Size_TxsdImageTypeSequenceChoiceCreateCubeSequenceSize_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sizesequencecreate_cubechoicesequenceimage_typeschema_Size_TxsdImageTypeSequenceChoiceCreateCubeSequenceSize_ instance.
func (me *XsdGoPkgHasElem_sizesequencecreate_cubechoicesequenceimage_typeschema_Size_TxsdImageTypeSequenceChoiceCreateCubeSequenceSize_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sizesequencecreate_cubechoicesequenceimage_typeschema_Size_TxsdImageTypeSequenceChoiceCreateCubeSequenceSize_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Size.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	regenerate the mipmaps based on information loaded into mip0
type XsdGoPkgHasAttr_AutoGenerate_XsdtBoolean_ struct {
	//	regenerate the mipmaps based on information loaded into mip0
	AutoGenerate xsdt.Boolean `xml:"http://www.collada.org/2008/03/COLLADASchema auto_generate,attr"`
}

//	Zero is max levels = 1 + floor(log2(max(w, h, d)))
//	in both OpenGL and DirectX.  One is no mips.
type XsdGoPkgHasAttr_Levels_XsdtUnsignedInt_ struct {
	//	Zero is max levels = 1 + floor(log2(max(w, h, d)))
	//	in both OpenGL and DirectX.  One is no mips.
	Levels xsdt.UnsignedInt `xml:"http://www.collada.org/2008/03/COLLADASchema levels,attr"`
}

type TimageMipsType struct {
	//	regenerate the mipmaps based on information loaded into mip0
	XsdGoPkgHasAttr_AutoGenerate_XsdtBoolean_

	//	Zero is max levels = 1 + floor(log2(max(w, h, d)))
	//	in both OpenGL and DirectX.  One is no mips.
	XsdGoPkgHasAttr_Levels_XsdtUnsignedInt_
}

//	If the WalkHandlers.TimageMipsType function is not nil (ie. was set by outside code), calls it with this TimageMipsType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TimageMipsType instance.
func (me *TimageMipsType) Walk() (err error) {
	if fn := WalkHandlers.TimageMipsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_mipssequencecreate_cubechoicesequenceimage_typeschema_Mips_TimageMipsType_ struct {
	Mips *TimageMipsType `xml:"http://www.collada.org/2008/03/COLLADASchema mips"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_mipssequencecreate_cubechoicesequenceimage_typeschema_Mips_TimageMipsType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mipssequencecreate_cubechoicesequenceimage_typeschema_Mips_TimageMipsType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_mipssequencecreate_cubechoicesequenceimage_typeschema_Mips_TimageMipsType_ instance.
func (me *XsdGoPkgHasElem_mipssequencecreate_cubechoicesequenceimage_typeschema_Mips_TimageMipsType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_mipssequencecreate_cubechoicesequenceimage_typeschema_Mips_TimageMipsType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Mips.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdImageTypeSequenceChoiceCreateCube struct {
	//	init the image data from one or more partial pieces of data.  The load attribute indicates what portion of the image will be loaded based on the ''address" specified.  mip_generate may be used to complete the image.
	XsdGoPkgHasElems_init_fromsequencecreate_cubechoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceCreateCubeSequenceInitFrom_

	//	If not present it is assumed to be R8G8B8A8 linear.
	XsdGoPkgHasElem_formatsequencecreate_cubechoicesequenceimage_typeschema_Format_TxsdImageTypeSequenceChoiceCreateCubeSequenceFormat_

	//	The surface should be sized to these exact dimensions
	XsdGoPkgHasElem_sizesequencecreate_cubechoicesequenceimage_typeschema_Size_TxsdImageTypeSequenceChoiceCreateCubeSequenceSize_

	XsdGoPkgHasElem_mipssequencecreate_cubechoicesequenceimage_typeschema_Mips_TimageMipsType_

	XsdGoPkgHasElem_arraysequencecreate_cubechoicesequenceimage_typeschema_Array_TxsdImageTypeSequenceChoiceCreateCubeSequenceArray_
}

//	If the WalkHandlers.TxsdImageTypeSequenceChoiceCreateCube function is not nil (ie. was set by outside code), calls it with this TxsdImageTypeSequenceChoiceCreateCube instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TxsdImageTypeSequenceChoiceCreateCube instance.
func (me *TxsdImageTypeSequenceChoiceCreateCube) Walk() (err error) {
	if fn := WalkHandlers.TxsdImageTypeSequenceChoiceCreateCube; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_init_fromsequencecreate_cubechoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceCreateCubeSequenceInitFrom_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_formatsequencecreate_cubechoicesequenceimage_typeschema_Format_TxsdImageTypeSequenceChoiceCreateCubeSequenceFormat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sizesequencecreate_cubechoicesequenceimage_typeschema_Size_TxsdImageTypeSequenceChoiceCreateCubeSequenceSize_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_mipssequencecreate_cubechoicesequenceimage_typeschema_Mips_TimageMipsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_arraysequencecreate_cubechoicesequenceimage_typeschema_Array_TxsdImageTypeSequenceChoiceCreateCubeSequenceArray_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_create_cubechoicesequenceimage_typeschema_CreateCube_TxsdImageTypeSequenceChoiceCreateCube_ struct {
	//	Initialize a custom cube image
	CreateCube *TxsdImageTypeSequenceChoiceCreateCube `xml:"http://www.collada.org/2008/03/COLLADASchema create_cube"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_create_cubechoicesequenceimage_typeschema_CreateCube_TxsdImageTypeSequenceChoiceCreateCube_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_create_cubechoicesequenceimage_typeschema_CreateCube_TxsdImageTypeSequenceChoiceCreateCube_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_create_cubechoicesequenceimage_typeschema_CreateCube_TxsdImageTypeSequenceChoiceCreateCube_ instance.
func (me *XsdGoPkgHasElem_create_cubechoicesequenceimage_typeschema_CreateCube_TxsdImageTypeSequenceChoiceCreateCube_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_create_cubechoicesequenceimage_typeschema_CreateCube_TxsdImageTypeSequenceChoiceCreateCube_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CreateCube.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	initialize the whole image structure and data from formats like DDS
//	If true, unless mips already exist in data, generate the mipmaps based on information loaded into mip0,
type XsdGoPkgHasAttr_MipsGenerate_XsdtBoolean_True struct {
	//	If true, unless mips already exist in data, generate the mipmaps based on information loaded into mip0,
	MipsGenerate xsdt.Boolean `xml:"http://www.collada.org/2008/03/COLLADASchema mips_generate,attr"`
}

//	Returns the default value for MipsGenerate -- true
func (me XsdGoPkgHasAttr_MipsGenerate_XsdtBoolean_True) MipsGenerateDefault() xsdt.Boolean {
	return xsdt.Boolean(true)
}

type TxsdImageTypeSequenceChoiceInitFrom struct {
	TimageSourceType

	//	If true, unless mips already exist in data, generate the mipmaps based on information loaded into mip0,
	XsdGoPkgHasAttr_MipsGenerate_XsdtBoolean_True
}

//	If the WalkHandlers.TxsdImageTypeSequenceChoiceInitFrom function is not nil (ie. was set by outside code), calls it with this TxsdImageTypeSequenceChoiceInitFrom instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TxsdImageTypeSequenceChoiceInitFrom instance.
func (me *TxsdImageTypeSequenceChoiceInitFrom) Walk() (err error) {
	if fn := WalkHandlers.TxsdImageTypeSequenceChoiceInitFrom; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TimageSourceType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_init_fromchoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceInitFrom_ struct {
	//	initialize the whole image structure and data from formats like DDS
	InitFrom *TxsdImageTypeSequenceChoiceInitFrom `xml:"http://www.collada.org/2008/03/COLLADASchema init_from"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_init_fromchoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceInitFrom_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_init_fromchoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceInitFrom_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_init_fromchoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceInitFrom_ instance.
func (me *XsdGoPkgHasElem_init_fromchoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceInitFrom_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_init_fromchoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceInitFrom_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.InitFrom.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	This image is renderable  if this element is used
//	As a render target, true = shared across all users, false = unique per instance
type XsdGoPkgHasAttr_Share_XsdtBoolean_ struct {
	//	As a render target, true = shared across all users, false = unique per instance
	Share xsdt.Boolean `xml:"http://www.collada.org/2008/03/COLLADASchema share,attr"`
}

type TxsdImageTypeSequenceRenderable struct {
	//	As a render target, true = shared across all users, false = unique per instance
	XsdGoPkgHasAttr_Share_XsdtBoolean_
}

//	If the WalkHandlers.TxsdImageTypeSequenceRenderable function is not nil (ie. was set by outside code), calls it with this TxsdImageTypeSequenceRenderable instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TxsdImageTypeSequenceRenderable instance.
func (me *TxsdImageTypeSequenceRenderable) Walk() (err error) {
	if fn := WalkHandlers.TxsdImageTypeSequenceRenderable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_renderablesequenceimage_typeschema_Renderable_TxsdImageTypeSequenceRenderable_ struct {
	//	This image is renderable  if this element is used
	Renderable *TxsdImageTypeSequenceRenderable `xml:"http://www.collada.org/2008/03/COLLADASchema renderable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_renderablesequenceimage_typeschema_Renderable_TxsdImageTypeSequenceRenderable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_renderablesequenceimage_typeschema_Renderable_TxsdImageTypeSequenceRenderable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_renderablesequenceimage_typeschema_Renderable_TxsdImageTypeSequenceRenderable_ instance.
func (me *XsdGoPkgHasElem_renderablesequenceimage_typeschema_Renderable_TxsdImageTypeSequenceRenderable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_renderablesequenceimage_typeschema_Renderable_TxsdImageTypeSequenceRenderable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Renderable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Initialize a custom 3d image
type XsdGoPkgHasElem_arraysequencecreate_3dchoicesequenceimage_typeschema_Array_TxsdImageTypeSequenceChoiceCreate3DSequenceArray_ struct {
	Array *TxsdImageTypeSequenceChoiceCreateCubeSequenceArray `xml:"http://www.collada.org/2008/03/COLLADASchema array"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_arraysequencecreate_3dchoicesequenceimage_typeschema_Array_TxsdImageTypeSequenceChoiceCreate3DSequenceArray_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_arraysequencecreate_3dchoicesequenceimage_typeschema_Array_TxsdImageTypeSequenceChoiceCreate3DSequenceArray_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_arraysequencecreate_3dchoicesequenceimage_typeschema_Array_TxsdImageTypeSequenceChoiceCreate3DSequenceArray_ instance.
func (me *XsdGoPkgHasElem_arraysequencecreate_3dchoicesequenceimage_typeschema_Array_TxsdImageTypeSequenceChoiceCreate3DSequenceArray_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_arraysequencecreate_3dchoicesequenceimage_typeschema_Array_TxsdImageTypeSequenceChoiceCreate3DSequenceArray_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Array.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	If not present it is assumed to be R8G8B8A8 linear.
//	if this element or a higher precidence element is not present then use a common format R8G8B8A8 with linear color gradient, not  sRGB.
type XsdGoPkgHasElem_hintsequenceformatsequencecreate_3dchoicesequenceimage_typeschema_Hint_TxsdImageTypeSequenceChoiceCreate3DSequenceFormatSequenceHint_ struct {
	//	if this element or a higher precidence element is not present then use a common format R8G8B8A8 with linear color gradient, not  sRGB.
	Hint *TxsdImageTypeSequenceChoiceCreateCubeSequenceFormatSequenceHint `xml:"http://www.collada.org/2008/03/COLLADASchema hint"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_hintsequenceformatsequencecreate_3dchoicesequenceimage_typeschema_Hint_TxsdImageTypeSequenceChoiceCreate3DSequenceFormatSequenceHint_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_hintsequenceformatsequencecreate_3dchoicesequenceimage_typeschema_Hint_TxsdImageTypeSequenceChoiceCreate3DSequenceFormatSequenceHint_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_hintsequenceformatsequencecreate_3dchoicesequenceimage_typeschema_Hint_TxsdImageTypeSequenceChoiceCreate3DSequenceFormatSequenceHint_ instance.
func (me *XsdGoPkgHasElem_hintsequenceformatsequencecreate_3dchoicesequenceimage_typeschema_Hint_TxsdImageTypeSequenceChoiceCreate3DSequenceFormatSequenceHint_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_hintsequenceformatsequencecreate_3dchoicesequenceimage_typeschema_Hint_TxsdImageTypeSequenceChoiceCreate3DSequenceFormatSequenceHint_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Hint.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdImageTypeSequenceChoiceCreate3DSequenceFormat struct {
	//	Contains a string representing the profile and platform specific texel format that the author would like this surface to use.  If this element is not specified then the application will fall back to the hint
	XsdGoPkgHasElem_exactsequenceformatsequencecreate_cubechoicesequenceimage_typeschema_Exact_XsdtToken_

	//	if this element or a higher precidence element is not present then use a common format R8G8B8A8 with linear color gradient, not  sRGB.
	XsdGoPkgHasElem_hintsequenceformatsequencecreate_3dchoicesequenceimage_typeschema_Hint_TxsdImageTypeSequenceChoiceCreate3DSequenceFormatSequenceHint_
}

//	If the WalkHandlers.TxsdImageTypeSequenceChoiceCreate3DSequenceFormat function is not nil (ie. was set by outside code), calls it with this TxsdImageTypeSequenceChoiceCreate3DSequenceFormat instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdImageTypeSequenceChoiceCreate3DSequenceFormat instance.
func (me *TxsdImageTypeSequenceChoiceCreate3DSequenceFormat) Walk() (err error) {
	if fn := WalkHandlers.TxsdImageTypeSequenceChoiceCreate3DSequenceFormat; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_hintsequenceformatsequencecreate_3dchoicesequenceimage_typeschema_Hint_TxsdImageTypeSequenceChoiceCreate3DSequenceFormatSequenceHint_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_exactsequenceformatsequencecreate_cubechoicesequenceimage_typeschema_Exact_XsdtToken_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_formatsequencecreate_3dchoicesequenceimage_typeschema_Format_TxsdImageTypeSequenceChoiceCreate3DSequenceFormat_ struct {
	//	If not present it is assumed to be R8G8B8A8 linear.
	Format *TxsdImageTypeSequenceChoiceCreate3DSequenceFormat `xml:"http://www.collada.org/2008/03/COLLADASchema format"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_formatsequencecreate_3dchoicesequenceimage_typeschema_Format_TxsdImageTypeSequenceChoiceCreate3DSequenceFormat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_formatsequencecreate_3dchoicesequenceimage_typeschema_Format_TxsdImageTypeSequenceChoiceCreate3DSequenceFormat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_formatsequencecreate_3dchoicesequenceimage_typeschema_Format_TxsdImageTypeSequenceChoiceCreate3DSequenceFormat_ instance.
func (me *XsdGoPkgHasElem_formatsequencecreate_3dchoicesequenceimage_typeschema_Format_TxsdImageTypeSequenceChoiceCreate3DSequenceFormat_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_formatsequencecreate_3dchoicesequenceimage_typeschema_Format_TxsdImageTypeSequenceChoiceCreate3DSequenceFormat_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Format.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	init the image data from one or more partial pieces of data.  The load attribute indicates what portion of the image will be loaded based on the ''address" specified.  mip_generate may be used to complete the image.
type XsdGoPkgHasAttr_Depth_XsdtUnsignedInt_ struct {
	Depth xsdt.UnsignedInt `xml:"http://www.collada.org/2008/03/COLLADASchema depth,attr"`
}

type TxsdImageTypeSequenceChoiceCreate3DSequenceInitFrom struct {
	XsdGoPkgHasAttr_MipIndex_XsdtUnsignedInt_

	XsdGoPkgHasAttr_ArrayIndex_XsdtUnsignedInt_0

	TimageSourceType

	XsdGoPkgHasAttr_Depth_XsdtUnsignedInt_
}

//	If the WalkHandlers.TxsdImageTypeSequenceChoiceCreate3DSequenceInitFrom function is not nil (ie. was set by outside code), calls it with this TxsdImageTypeSequenceChoiceCreate3DSequenceInitFrom instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TxsdImageTypeSequenceChoiceCreate3DSequenceInitFrom instance.
func (me *TxsdImageTypeSequenceChoiceCreate3DSequenceInitFrom) Walk() (err error) {
	if fn := WalkHandlers.TxsdImageTypeSequenceChoiceCreate3DSequenceInitFrom; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TimageSourceType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_init_fromsequencecreate_3dchoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceCreate3DSequenceInitFrom_ struct {
	//	init the image data from one or more partial pieces of data.  The load attribute indicates what portion of the image will be loaded based on the ''address" specified.  mip_generate may be used to complete the image.
	InitFroms []*TxsdImageTypeSequenceChoiceCreate3DSequenceInitFrom `xml:"http://www.collada.org/2008/03/COLLADASchema init_from"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_init_fromsequencecreate_3dchoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceCreate3DSequenceInitFrom_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_init_fromsequencecreate_3dchoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceCreate3DSequenceInitFrom_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_init_fromsequencecreate_3dchoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceCreate3DSequenceInitFrom_ instance.
func (me *XsdGoPkgHasElems_init_fromsequencecreate_3dchoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceCreate3DSequenceInitFrom_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_init_fromsequencecreate_3dchoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceCreate3DSequenceInitFrom_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.InitFroms {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The surface should be sized to these exact dimensions
type XsdGoPkgHasAttr_Height_XsdtUnsignedInt_ struct {
	Height xsdt.UnsignedInt `xml:"http://www.collada.org/2008/03/COLLADASchema height,attr"`
}

type TxsdImageTypeSequenceChoiceCreate3DSequenceSize struct {
	XsdGoPkgHasAttr_Height_XsdtUnsignedInt_

	XsdGoPkgHasAttr_Width_XsdtUnsignedInt_

	XsdGoPkgHasAttr_Depth_XsdtUnsignedInt_
}

//	If the WalkHandlers.TxsdImageTypeSequenceChoiceCreate3DSequenceSize function is not nil (ie. was set by outside code), calls it with this TxsdImageTypeSequenceChoiceCreate3DSequenceSize instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdImageTypeSequenceChoiceCreate3DSequenceSize instance.
func (me *TxsdImageTypeSequenceChoiceCreate3DSequenceSize) Walk() (err error) {
	if fn := WalkHandlers.TxsdImageTypeSequenceChoiceCreate3DSequenceSize; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_sizesequencecreate_3dchoicesequenceimage_typeschema_Size_TxsdImageTypeSequenceChoiceCreate3DSequenceSize_ struct {
	//	The surface should be sized to these exact dimensions
	Size *TxsdImageTypeSequenceChoiceCreate3DSequenceSize `xml:"http://www.collada.org/2008/03/COLLADASchema size"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sizesequencecreate_3dchoicesequenceimage_typeschema_Size_TxsdImageTypeSequenceChoiceCreate3DSequenceSize_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sizesequencecreate_3dchoicesequenceimage_typeschema_Size_TxsdImageTypeSequenceChoiceCreate3DSequenceSize_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sizesequencecreate_3dchoicesequenceimage_typeschema_Size_TxsdImageTypeSequenceChoiceCreate3DSequenceSize_ instance.
func (me *XsdGoPkgHasElem_sizesequencecreate_3dchoicesequenceimage_typeschema_Size_TxsdImageTypeSequenceChoiceCreate3DSequenceSize_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sizesequencecreate_3dchoicesequenceimage_typeschema_Size_TxsdImageTypeSequenceChoiceCreate3DSequenceSize_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Size.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdImageTypeSequenceChoiceCreate3D struct {
	//	If not present it is assumed to be R8G8B8A8 linear.
	XsdGoPkgHasElem_formatsequencecreate_3dchoicesequenceimage_typeschema_Format_TxsdImageTypeSequenceChoiceCreate3DSequenceFormat_

	//	init the image data from one or more partial pieces of data.  The load attribute indicates what portion of the image will be loaded based on the ''address" specified.  mip_generate may be used to complete the image.
	XsdGoPkgHasElems_init_fromsequencecreate_3dchoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceCreate3DSequenceInitFrom_

	//	The surface should be sized to these exact dimensions
	XsdGoPkgHasElem_sizesequencecreate_3dchoicesequenceimage_typeschema_Size_TxsdImageTypeSequenceChoiceCreate3DSequenceSize_

	XsdGoPkgHasElem_mipssequencecreate_cubechoicesequenceimage_typeschema_Mips_TimageMipsType_

	XsdGoPkgHasElem_arraysequencecreate_3dchoicesequenceimage_typeschema_Array_TxsdImageTypeSequenceChoiceCreate3DSequenceArray_
}

//	If the WalkHandlers.TxsdImageTypeSequenceChoiceCreate3D function is not nil (ie. was set by outside code), calls it with this TxsdImageTypeSequenceChoiceCreate3D instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TxsdImageTypeSequenceChoiceCreate3D instance.
func (me *TxsdImageTypeSequenceChoiceCreate3D) Walk() (err error) {
	if fn := WalkHandlers.TxsdImageTypeSequenceChoiceCreate3D; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_formatsequencecreate_3dchoicesequenceimage_typeschema_Format_TxsdImageTypeSequenceChoiceCreate3DSequenceFormat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_init_fromsequencecreate_3dchoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceCreate3DSequenceInitFrom_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sizesequencecreate_3dchoicesequenceimage_typeschema_Size_TxsdImageTypeSequenceChoiceCreate3DSequenceSize_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_mipssequencecreate_cubechoicesequenceimage_typeschema_Mips_TimageMipsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_arraysequencecreate_3dchoicesequenceimage_typeschema_Array_TxsdImageTypeSequenceChoiceCreate3DSequenceArray_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_create_3dchoicesequenceimage_typeschema_Create3D_TxsdImageTypeSequenceChoiceCreate3D_ struct {
	//	Initialize a custom 3d image
	Create3D *TxsdImageTypeSequenceChoiceCreate3D `xml:"http://www.collada.org/2008/03/COLLADASchema create_3d"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_create_3dchoicesequenceimage_typeschema_Create3D_TxsdImageTypeSequenceChoiceCreate3D_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_create_3dchoicesequenceimage_typeschema_Create3D_TxsdImageTypeSequenceChoiceCreate3D_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_create_3dchoicesequenceimage_typeschema_Create3D_TxsdImageTypeSequenceChoiceCreate3D_ instance.
func (me *XsdGoPkgHasElem_create_3dchoicesequenceimage_typeschema_Create3D_TxsdImageTypeSequenceChoiceCreate3D_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_create_3dchoicesequenceimage_typeschema_Create3D_TxsdImageTypeSequenceChoiceCreate3D_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Create3D.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Initialize a custom 2d image
//	Image size should be relative to the size of the viewport.  Ex 1,1 is the same size as the viewport.  0.5,0.5 is 1/2 the size of the viewport
type XsdGoPkgHasAttr_Width_XsdtFloat_ struct {
	Width xsdt.Float `xml:"http://www.collada.org/2008/03/COLLADASchema width,attr"`
}

type XsdGoPkgHasAttr_Height_XsdtFloat_ struct {
	Height xsdt.Float `xml:"http://www.collada.org/2008/03/COLLADASchema height,attr"`
}

type TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeRatio struct {
	XsdGoPkgHasAttr_Height_XsdtFloat_

	XsdGoPkgHasAttr_Width_XsdtFloat_
}

//	If the WalkHandlers.TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeRatio function is not nil (ie. was set by outside code), calls it with this TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeRatio instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeRatio instance.
func (me *TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeRatio) Walk() (err error) {
	if fn := WalkHandlers.TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeRatio; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_size_ratiochoicesequencecreate_2dchoicesequenceimage_typeschema_SizeRatio_TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeRatio_ struct {
	//	Image size should be relative to the size of the viewport.  Ex 1,1 is the same size as the viewport.  0.5,0.5 is 1/2 the size of the viewport
	SizeRatio *TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeRatio `xml:"http://www.collada.org/2008/03/COLLADASchema size_ratio"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_size_ratiochoicesequencecreate_2dchoicesequenceimage_typeschema_SizeRatio_TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeRatio_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_size_ratiochoicesequencecreate_2dchoicesequenceimage_typeschema_SizeRatio_TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeRatio_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_size_ratiochoicesequencecreate_2dchoicesequenceimage_typeschema_SizeRatio_TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeRatio_ instance.
func (me *XsdGoPkgHasElem_size_ratiochoicesequencecreate_2dchoicesequenceimage_typeschema_SizeRatio_TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeRatio_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_size_ratiochoicesequencecreate_2dchoicesequenceimage_typeschema_SizeRatio_TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeRatio_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SizeRatio.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Unnormalized addressing of texels.  (0-W, 0-H).  This cannot be used with mips since the addressing is not uniform per level.  This is equivilant to OpenGL textureRECT extension.
type XsdGoPkgHasElem_unnormalizedchoicesequencecreate_2dchoicesequenceimage_typeschema_Unnormalized_XsdtString_ struct {
	//	Unnormalized addressing of texels.  (0-W, 0-H).  This cannot be used with mips since the addressing is not uniform per level.  This is equivilant to OpenGL textureRECT extension.
	Unnormalized xsdt.String `xml:"http://www.collada.org/2008/03/COLLADASchema unnormalized"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_unnormalizedchoicesequencecreate_2dchoicesequenceimage_typeschema_Unnormalized_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_unnormalizedchoicesequencecreate_2dchoicesequenceimage_typeschema_Unnormalized_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_unnormalizedchoicesequencecreate_2dchoicesequenceimage_typeschema_Unnormalized_XsdtString_ instance.
func (me *XsdGoPkgHasElem_unnormalizedchoicesequencecreate_2dchoicesequenceimage_typeschema_Unnormalized_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_unnormalizedchoicesequencecreate_2dchoicesequenceimage_typeschema_Unnormalized_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The surface should be sized to these exact dimensions
type TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeExact struct {
	XsdGoPkgHasAttr_Height_XsdtUnsignedInt_

	XsdGoPkgHasAttr_Width_XsdtUnsignedInt_
}

//	If the WalkHandlers.TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeExact function is not nil (ie. was set by outside code), calls it with this TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeExact instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeExact instance.
func (me *TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeExact) Walk() (err error) {
	if fn := WalkHandlers.TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeExact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_size_exactchoicesequencecreate_2dchoicesequenceimage_typeschema_SizeExact_TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeExact_ struct {
	//	The surface should be sized to these exact dimensions
	SizeExact *TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeExact `xml:"http://www.collada.org/2008/03/COLLADASchema size_exact"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_size_exactchoicesequencecreate_2dchoicesequenceimage_typeschema_SizeExact_TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeExact_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_size_exactchoicesequencecreate_2dchoicesequenceimage_typeschema_SizeExact_TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeExact_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_size_exactchoicesequencecreate_2dchoicesequenceimage_typeschema_SizeExact_TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeExact_ instance.
func (me *XsdGoPkgHasElem_size_exactchoicesequencecreate_2dchoicesequenceimage_typeschema_SizeExact_TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeExact_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_size_exactchoicesequencecreate_2dchoicesequenceimage_typeschema_SizeExact_TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeExact_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SizeExact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	init the image data from one or more partial pieces of data.  The load attribute indicates what portion of the image will be loaded based on the ''address" specified.  mip_generate may be used to complete the image.
type TxsdImageTypeSequenceChoiceCreate2DSequenceInitFrom struct {
	TimageSourceType

	XsdGoPkgHasAttr_ArrayIndex_XsdtUnsignedInt_0

	XsdGoPkgHasAttr_MipIndex_XsdtUnsignedInt_
}

//	If the WalkHandlers.TxsdImageTypeSequenceChoiceCreate2DSequenceInitFrom function is not nil (ie. was set by outside code), calls it with this TxsdImageTypeSequenceChoiceCreate2DSequenceInitFrom instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TxsdImageTypeSequenceChoiceCreate2DSequenceInitFrom instance.
func (me *TxsdImageTypeSequenceChoiceCreate2DSequenceInitFrom) Walk() (err error) {
	if fn := WalkHandlers.TxsdImageTypeSequenceChoiceCreate2DSequenceInitFrom; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TimageSourceType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_init_fromsequencecreate_2dchoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceCreate2DSequenceInitFrom_ struct {
	//	init the image data from one or more partial pieces of data.  The load attribute indicates what portion of the image will be loaded based on the ''address" specified.  mip_generate may be used to complete the image.
	InitFroms []*TxsdImageTypeSequenceChoiceCreate2DSequenceInitFrom `xml:"http://www.collada.org/2008/03/COLLADASchema init_from"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_init_fromsequencecreate_2dchoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceCreate2DSequenceInitFrom_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_init_fromsequencecreate_2dchoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceCreate2DSequenceInitFrom_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_init_fromsequencecreate_2dchoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceCreate2DSequenceInitFrom_ instance.
func (me *XsdGoPkgHasElems_init_fromsequencecreate_2dchoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceCreate2DSequenceInitFrom_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_init_fromsequencecreate_2dchoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceCreate2DSequenceInitFrom_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.InitFroms {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdImageTypeSequenceChoiceCreate2DSequenceArray struct {
	XsdGoPkgHasAttr_Length_XsdtPositiveInteger_
}

//	If the WalkHandlers.TxsdImageTypeSequenceChoiceCreate2DSequenceArray function is not nil (ie. was set by outside code), calls it with this TxsdImageTypeSequenceChoiceCreate2DSequenceArray instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TxsdImageTypeSequenceChoiceCreate2DSequenceArray instance.
func (me *TxsdImageTypeSequenceChoiceCreate2DSequenceArray) Walk() (err error) {
	if fn := WalkHandlers.TxsdImageTypeSequenceChoiceCreate2DSequenceArray; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_arraysequencecreate_2dchoicesequenceimage_typeschema_Array_TxsdImageTypeSequenceChoiceCreate2DSequenceArray_ struct {
	Array *TxsdImageTypeSequenceChoiceCreate2DSequenceArray `xml:"http://www.collada.org/2008/03/COLLADASchema array"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_arraysequencecreate_2dchoicesequenceimage_typeschema_Array_TxsdImageTypeSequenceChoiceCreate2DSequenceArray_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_arraysequencecreate_2dchoicesequenceimage_typeschema_Array_TxsdImageTypeSequenceChoiceCreate2DSequenceArray_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_arraysequencecreate_2dchoicesequenceimage_typeschema_Array_TxsdImageTypeSequenceChoiceCreate2DSequenceArray_ instance.
func (me *XsdGoPkgHasElem_arraysequencecreate_2dchoicesequenceimage_typeschema_Array_TxsdImageTypeSequenceChoiceCreate2DSequenceArray_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_arraysequencecreate_2dchoicesequenceimage_typeschema_Array_TxsdImageTypeSequenceChoiceCreate2DSequenceArray_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Array.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	If not present it is assumed to be R8G8B8A8 linear.
//	if this element or a higher precidence element is not present then use a common format R8G8B8A8 with linear color gradient, not  sRGB.
type XsdGoPkgHasElem_hintsequenceformatsequencecreate_2dchoicesequenceimage_typeschema_Hint_TxsdImageTypeSequenceChoiceCreate2DSequenceFormatSequenceHint_ struct {
	//	if this element or a higher precidence element is not present then use a common format R8G8B8A8 with linear color gradient, not  sRGB.
	Hint *TxsdImageTypeSequenceChoiceCreateCubeSequenceFormatSequenceHint `xml:"http://www.collada.org/2008/03/COLLADASchema hint"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_hintsequenceformatsequencecreate_2dchoicesequenceimage_typeschema_Hint_TxsdImageTypeSequenceChoiceCreate2DSequenceFormatSequenceHint_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_hintsequenceformatsequencecreate_2dchoicesequenceimage_typeschema_Hint_TxsdImageTypeSequenceChoiceCreate2DSequenceFormatSequenceHint_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_hintsequenceformatsequencecreate_2dchoicesequenceimage_typeschema_Hint_TxsdImageTypeSequenceChoiceCreate2DSequenceFormatSequenceHint_ instance.
func (me *XsdGoPkgHasElem_hintsequenceformatsequencecreate_2dchoicesequenceimage_typeschema_Hint_TxsdImageTypeSequenceChoiceCreate2DSequenceFormatSequenceHint_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_hintsequenceformatsequencecreate_2dchoicesequenceimage_typeschema_Hint_TxsdImageTypeSequenceChoiceCreate2DSequenceFormatSequenceHint_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Hint.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdImageTypeSequenceChoiceCreate2DSequenceFormat struct {
	//	if this element or a higher precidence element is not present then use a common format R8G8B8A8 with linear color gradient, not  sRGB.
	XsdGoPkgHasElem_hintsequenceformatsequencecreate_2dchoicesequenceimage_typeschema_Hint_TxsdImageTypeSequenceChoiceCreate2DSequenceFormatSequenceHint_

	//	Contains a string representing the profile and platform specific texel format that the author would like this surface to use.  If this element is not specified then the application will fall back to the hint
	XsdGoPkgHasElem_exactsequenceformatsequencecreate_cubechoicesequenceimage_typeschema_Exact_XsdtToken_
}

//	If the WalkHandlers.TxsdImageTypeSequenceChoiceCreate2DSequenceFormat function is not nil (ie. was set by outside code), calls it with this TxsdImageTypeSequenceChoiceCreate2DSequenceFormat instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdImageTypeSequenceChoiceCreate2DSequenceFormat instance.
func (me *TxsdImageTypeSequenceChoiceCreate2DSequenceFormat) Walk() (err error) {
	if fn := WalkHandlers.TxsdImageTypeSequenceChoiceCreate2DSequenceFormat; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_hintsequenceformatsequencecreate_2dchoicesequenceimage_typeschema_Hint_TxsdImageTypeSequenceChoiceCreate2DSequenceFormatSequenceHint_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_exactsequenceformatsequencecreate_cubechoicesequenceimage_typeschema_Exact_XsdtToken_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_formatsequencecreate_2dchoicesequenceimage_typeschema_Format_TxsdImageTypeSequenceChoiceCreate2DSequenceFormat_ struct {
	//	If not present it is assumed to be R8G8B8A8 linear.
	Format *TxsdImageTypeSequenceChoiceCreate2DSequenceFormat `xml:"http://www.collada.org/2008/03/COLLADASchema format"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_formatsequencecreate_2dchoicesequenceimage_typeschema_Format_TxsdImageTypeSequenceChoiceCreate2DSequenceFormat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_formatsequencecreate_2dchoicesequenceimage_typeschema_Format_TxsdImageTypeSequenceChoiceCreate2DSequenceFormat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_formatsequencecreate_2dchoicesequenceimage_typeschema_Format_TxsdImageTypeSequenceChoiceCreate2DSequenceFormat_ instance.
func (me *XsdGoPkgHasElem_formatsequencecreate_2dchoicesequenceimage_typeschema_Format_TxsdImageTypeSequenceChoiceCreate2DSequenceFormat_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_formatsequencecreate_2dchoicesequenceimage_typeschema_Format_TxsdImageTypeSequenceChoiceCreate2DSequenceFormat_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Format.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdImageTypeSequenceChoiceCreate2D struct {
	//	sizing
	//	Image size should be relative to the size of the viewport.  Ex 1,1 is the same size as the viewport.  0.5,0.5 is 1/2 the size of the viewport
	XsdGoPkgHasElem_size_ratiochoicesequencecreate_2dchoicesequenceimage_typeschema_SizeRatio_TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeRatio_

	//	mips and texel addressing
	//	Unnormalized addressing of texels.  (0-W, 0-H).  This cannot be used with mips since the addressing is not uniform per level.  This is equivilant to OpenGL textureRECT extension.
	XsdGoPkgHasElem_unnormalizedchoicesequencecreate_2dchoicesequenceimage_typeschema_Unnormalized_XsdtString_

	//	mips and texel addressing
	XsdGoPkgHasElem_mipssequencecreate_cubechoicesequenceimage_typeschema_Mips_TimageMipsType_

	//	sizing
	//	The surface should be sized to these exact dimensions
	XsdGoPkgHasElem_size_exactchoicesequencecreate_2dchoicesequenceimage_typeschema_SizeExact_TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeExact_

	//	init the image data from one or more partial pieces of data.  The load attribute indicates what portion of the image will be loaded based on the ''address" specified.  mip_generate may be used to complete the image.
	XsdGoPkgHasElems_init_fromsequencecreate_2dchoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceCreate2DSequenceInitFrom_

	XsdGoPkgHasElem_arraysequencecreate_2dchoicesequenceimage_typeschema_Array_TxsdImageTypeSequenceChoiceCreate2DSequenceArray_

	//	If not present it is assumed to be R8G8B8A8 linear.
	XsdGoPkgHasElem_formatsequencecreate_2dchoicesequenceimage_typeschema_Format_TxsdImageTypeSequenceChoiceCreate2DSequenceFormat_
}

//	If the WalkHandlers.TxsdImageTypeSequenceChoiceCreate2D function is not nil (ie. was set by outside code), calls it with this TxsdImageTypeSequenceChoiceCreate2D instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TxsdImageTypeSequenceChoiceCreate2D instance.
func (me *TxsdImageTypeSequenceChoiceCreate2D) Walk() (err error) {
	if fn := WalkHandlers.TxsdImageTypeSequenceChoiceCreate2D; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_arraysequencecreate_2dchoicesequenceimage_typeschema_Array_TxsdImageTypeSequenceChoiceCreate2DSequenceArray_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_formatsequencecreate_2dchoicesequenceimage_typeschema_Format_TxsdImageTypeSequenceChoiceCreate2DSequenceFormat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_size_ratiochoicesequencecreate_2dchoicesequenceimage_typeschema_SizeRatio_TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeRatio_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_unnormalizedchoicesequencecreate_2dchoicesequenceimage_typeschema_Unnormalized_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_mipssequencecreate_cubechoicesequenceimage_typeschema_Mips_TimageMipsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_size_exactchoicesequencecreate_2dchoicesequenceimage_typeschema_SizeExact_TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeExact_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_init_fromsequencecreate_2dchoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceCreate2DSequenceInitFrom_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_create_2dchoicesequenceimage_typeschema_Create2D_TxsdImageTypeSequenceChoiceCreate2D_ struct {
	//	Initialize a custom 2d image
	Create2D *TxsdImageTypeSequenceChoiceCreate2D `xml:"http://www.collada.org/2008/03/COLLADASchema create_2d"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_create_2dchoicesequenceimage_typeschema_Create2D_TxsdImageTypeSequenceChoiceCreate2D_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_create_2dchoicesequenceimage_typeschema_Create2D_TxsdImageTypeSequenceChoiceCreate2D_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_create_2dchoicesequenceimage_typeschema_Create2D_TxsdImageTypeSequenceChoiceCreate2D_ instance.
func (me *XsdGoPkgHasElem_create_2dchoicesequenceimage_typeschema_Create2D_TxsdImageTypeSequenceChoiceCreate2D_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_create_2dchoicesequenceimage_typeschema_Create2D_TxsdImageTypeSequenceChoiceCreate2D_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Create2D.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TimageType struct {
	//	This image is renderable  if this element is used
	XsdGoPkgHasElem_renderablesequenceimage_typeschema_Renderable_TxsdImageTypeSequenceRenderable_

	//	Initialize a custom 3d image
	XsdGoPkgHasElem_create_3dchoicesequenceimage_typeschema_Create3D_TxsdImageTypeSequenceChoiceCreate3D_

	//	Initialize a custom 2d image
	XsdGoPkgHasElem_create_2dchoicesequenceimage_typeschema_Create2D_TxsdImageTypeSequenceChoiceCreate2D_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The image element may contain an asset element.
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	//	sub identifier
	XsdGoPkgHasAttr_Sid_TsidType_

	//	Initialize a custom cube image
	XsdGoPkgHasElem_create_cubechoicesequenceimage_typeschema_CreateCube_TxsdImageTypeSequenceChoiceCreateCube_

	//	initialize the whole image structure and data from formats like DDS
	XsdGoPkgHasElem_init_fromchoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceInitFrom_

	//	The id attribute is a text string containing the unique identifier of this element. This value
	//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_
}

//	If the WalkHandlers.TimageType function is not nil (ie. was set by outside code), calls it with this TimageType instance as the single argument. Then calls the Walk() method on 7/10 embed(s) and 0/0 field(s) belonging to this TimageType instance.
func (me *TimageType) Walk() (err error) {
	if fn := WalkHandlers.TimageType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_create_cubechoicesequenceimage_typeschema_CreateCube_TxsdImageTypeSequenceChoiceCreateCube_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_init_fromchoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceInitFrom_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_renderablesequenceimage_typeschema_Renderable_TxsdImageTypeSequenceRenderable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_create_3dchoicesequenceimage_typeschema_Create3D_TxsdImageTypeSequenceChoiceCreate3D_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_create_2dchoicesequenceimage_typeschema_Create2D_TxsdImageTypeSequenceChoiceCreate2D_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_imagesequencelibrary_images_typeschema_Image_TimageType_ struct {
	//	There must be at least one image element.
	Images []*TimageType `xml:"http://www.collada.org/2008/03/COLLADASchema image"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_imagesequencelibrary_images_typeschema_Image_TimageType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_imagesequencelibrary_images_typeschema_Image_TimageType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_imagesequencelibrary_images_typeschema_Image_TimageType_ instance.
func (me *XsdGoPkgHasElems_imagesequencelibrary_images_typeschema_Image_TimageType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_imagesequencelibrary_images_typeschema_Image_TimageType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Images {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TlibraryImagesType struct {
	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The library_images element may contain an asset element.
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	//	There must be at least one image element.
	XsdGoPkgHasElems_imagesequencelibrary_images_typeschema_Image_TimageType_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_
}

//	If the WalkHandlers.TlibraryImagesType function is not nil (ie. was set by outside code), calls it with this TlibraryImagesType instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TlibraryImagesType instance.
func (me *TlibraryImagesType) Walk() (err error) {
	if fn := WalkHandlers.TlibraryImagesType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_imagesequencelibrary_images_typeschema_Image_TimageType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_library_imageschoicesequenceCOLLADAschema_LibraryImages_TlibraryImagesType_ struct {
	//	The COLLADA element may contain any
	//	number of library_images elements.
	ImagesLibraries []*TlibraryImagesType `xml:"http://www.collada.org/2008/03/COLLADASchema library_images"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_library_imageschoicesequenceCOLLADAschema_LibraryImages_TlibraryImagesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_library_imageschoicesequenceCOLLADAschema_LibraryImages_TlibraryImagesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_library_imageschoicesequenceCOLLADAschema_LibraryImages_TlibraryImagesType_ instance.
func (me *XsdGoPkgHasElems_library_imageschoicesequenceCOLLADAschema_LibraryImages_TlibraryImagesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_library_imageschoicesequenceCOLLADAschema_LibraryImages_TlibraryImagesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ImagesLibraries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The COLLADA element may contain any
//	number of library_controllerss elements.
//	The library_controllers element declares a module of controller elements.
//	There must be at least one controller element.
//	The controller element categorizes the declaration of generic control information.
//	A controller is a device or mechanism that manages and directs the operations of another object.
//	The controller element may contain either a skin element or a morph element.
//	The morph element describes the data required to blend between sets of static meshes. Each
//	possible mesh that can be blended (a morph target) must be specified.
//	The targets element declares the morph targets, their weights and any user defined attributes
//	associated with them.
type TxsdMorphTypeSequenceTargets struct {
	//	The input element must occur at least twice. These inputs are local inputs.
	XsdGoPkgHasElems_inputsequencesampler_typeschema_Input_TinputLocalType_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_
}

//	If the WalkHandlers.TxsdMorphTypeSequenceTargets function is not nil (ie. was set by outside code), calls it with this TxsdMorphTypeSequenceTargets instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdMorphTypeSequenceTargets instance.
func (me *TxsdMorphTypeSequenceTargets) Walk() (err error) {
	if fn := WalkHandlers.TxsdMorphTypeSequenceTargets; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_inputsequencesampler_typeschema_Input_TinputLocalType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_targetssequencemorph_typeschema_Targets_TxsdMorphTypeSequenceTargets_ struct {
	//	The targets element declares the morph targets, their weights and any user defined attributes
	//	associated with them.
	Targets *TxsdMorphTypeSequenceTargets `xml:"http://www.collada.org/2008/03/COLLADASchema targets"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_targetssequencemorph_typeschema_Targets_TxsdMorphTypeSequenceTargets_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_targetssequencemorph_typeschema_Targets_TxsdMorphTypeSequenceTargets_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_targetssequencemorph_typeschema_Targets_TxsdMorphTypeSequenceTargets_ instance.
func (me *XsdGoPkgHasElem_targetssequencemorph_typeschema_Targets_TxsdMorphTypeSequenceTargets_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_targetssequencemorph_typeschema_Targets_TxsdMorphTypeSequenceTargets_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Targets.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The method attribute specifies the which blending technique to use. The accepted values are
//	NORMALIZED, and RELATIVE. The default value if not specified is NORMALIZED.  Optional attribute.
//	An enumuerated type specifying the acceptable morph methods.
type TmorphMethodEnum xsdt.String

//	Returns true if the value of this enumerated TmorphMethodEnum is "NORMALIZED".
func (me TmorphMethodEnum) IsNormalized() bool { return me == "NORMALIZED" }

//	Returns true if the value of this enumerated TmorphMethodEnum is "RELATIVE".
func (me TmorphMethodEnum) IsRelative() bool { return me == "RELATIVE" }

//	Since TmorphMethodEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TmorphMethodEnum) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TmorphMethodEnum is just a simple String type, this merely returns the current string value.
func (me TmorphMethodEnum) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TmorphMethodEnum's alias type xsdt.String.
func (me TmorphMethodEnum) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_Method_TmorphMethodEnum_Normalized struct {
	//	The method attribute specifies the which blending technique to use. The accepted values are
	//	NORMALIZED, and RELATIVE. The default value if not specified is NORMALIZED.  Optional attribute.
	Method TmorphMethodEnum `xml:"http://www.collada.org/2008/03/COLLADASchema method,attr"`
}

//	Returns the default value for Method -- "NORMALIZED"
func (me XsdGoPkgHasAttr_Method_TmorphMethodEnum_Normalized) MethodDefault() TmorphMethodEnum {
	return TmorphMethodEnum("NORMALIZED")
}

type TmorphType struct {
	//	The method attribute specifies the which blending technique to use. The accepted values are
	//	NORMALIZED, and RELATIVE. The default value if not specified is NORMALIZED.  Optional attribute.
	XsdGoPkgHasAttr_Method_TmorphMethodEnum_Normalized

	//	The source attribute indicates the base mesh. Required attribute.
	XsdGoPkgHasAttr_Source_XsdtAnyURI_

	//	The targets element declares the morph targets, their weights and any user defined attributes
	//	associated with them.
	XsdGoPkgHasElem_targetssequencemorph_typeschema_Targets_TxsdMorphTypeSequenceTargets_

	//	The morph element must contain at least two source elements.
	XsdGoPkgHasElems_sourcesequencechoicesequenceanimation_typeschema_Source_TsourceType_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_
}

//	If the WalkHandlers.TmorphType function is not nil (ie. was set by outside code), calls it with this TmorphType instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TmorphType instance.
func (me *TmorphType) Walk() (err error) {
	if fn := WalkHandlers.TmorphType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_targetssequencemorph_typeschema_Targets_TxsdMorphTypeSequenceTargets_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_sourcesequencechoicesequenceanimation_typeschema_Source_TsourceType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_morphchoicesequencecontroller_typeschema_Morph_TmorphType_ struct {
	//	The controller element may contain either a skin element or a morph element.
	Morph *TmorphType `xml:"http://www.collada.org/2008/03/COLLADASchema morph"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_morphchoicesequencecontroller_typeschema_Morph_TmorphType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_morphchoicesequencecontroller_typeschema_Morph_TmorphType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_morphchoicesequencecontroller_typeschema_Morph_TmorphType_ instance.
func (me *XsdGoPkgHasElem_morphchoicesequencecontroller_typeschema_Morph_TmorphType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_morphchoicesequencecontroller_typeschema_Morph_TmorphType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Morph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The controller element may contain either a skin element or a morph element.
//	The skin element contains vertex and primitive information sufficient to describe blend-weight skinning.
//	This provides extra information about the position and orientation of the base mesh before binding.
//	If bind_shape_matrix is not specified then an identity matrix may be used as the bind_shape_matrix.
//	The bind_shape_matrix element may occur zero or one times.
type XsdGoPkgHasElem_bind_shape_matrixsequenceskin_typeschema_BindShapeMatrix_Tfloat4X4Type_ struct {
	//	This provides extra information about the position and orientation of the base mesh before binding.
	//	If bind_shape_matrix is not specified then an identity matrix may be used as the bind_shape_matrix.
	//	The bind_shape_matrix element may occur zero or one times.
	BindShapeMatrix Tfloat4X4Type `xml:"http://www.collada.org/2008/03/COLLADASchema bind_shape_matrix"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bind_shape_matrixsequenceskin_typeschema_BindShapeMatrix_Tfloat4X4Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bind_shape_matrixsequenceskin_typeschema_BindShapeMatrix_Tfloat4X4Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bind_shape_matrixsequenceskin_typeschema_BindShapeMatrix_Tfloat4X4Type_ instance.
func (me *XsdGoPkgHasElem_bind_shape_matrixsequenceskin_typeschema_BindShapeMatrix_Tfloat4X4Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bind_shape_matrixsequenceskin_typeschema_BindShapeMatrix_Tfloat4X4Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The joints element associates joint, or skeleton, nodes with attribute data.
//	In COLLADA, this is specified by the inverse bind matrix of each joint (influence) in the skeleton.
type TxsdSkinTypeSequenceJoints struct {
	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The input element must occur at least twice. These inputs are local inputs.
	XsdGoPkgHasElems_inputsequencesampler_typeschema_Input_TinputLocalType_
}

//	If the WalkHandlers.TxsdSkinTypeSequenceJoints function is not nil (ie. was set by outside code), calls it with this TxsdSkinTypeSequenceJoints instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdSkinTypeSequenceJoints instance.
func (me *TxsdSkinTypeSequenceJoints) Walk() (err error) {
	if fn := WalkHandlers.TxsdSkinTypeSequenceJoints; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_inputsequencesampler_typeschema_Input_TinputLocalType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_jointssequenceskin_typeschema_Joints_TxsdSkinTypeSequenceJoints_ struct {
	//	The joints element associates joint, or skeleton, nodes with attribute data.
	//	In COLLADA, this is specified by the inverse bind matrix of each joint (influence) in the skeleton.
	Joints *TxsdSkinTypeSequenceJoints `xml:"http://www.collada.org/2008/03/COLLADASchema joints"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_jointssequenceskin_typeschema_Joints_TxsdSkinTypeSequenceJoints_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_jointssequenceskin_typeschema_Joints_TxsdSkinTypeSequenceJoints_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_jointssequenceskin_typeschema_Joints_TxsdSkinTypeSequenceJoints_ instance.
func (me *XsdGoPkgHasElem_jointssequenceskin_typeschema_Joints_TxsdSkinTypeSequenceJoints_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_jointssequenceskin_typeschema_Joints_TxsdSkinTypeSequenceJoints_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Joints.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The vertex_weights element associates a set of joint-weight pairs with each vertex in the base mesh.
//	The vcount element contains a list of integers describing the number of influences for each vertex.
//	The vcount element may occur once.
type TlistOfUintsType xsdt.String

//	Since TlistOfUintsType is just a simple String type, this merely returns the current string value.
func (me TlistOfUintsType) String() string { return xsdt.String(me).String() }

//	TlistOfUintsType declares a String containing a whitespace-separated list of TuintType values. This Values() method creates and returns a slice of all elements in that list.
func (me TlistOfUintsType) Values() (list []TuintType) {
	svals := xsdt.ListValues(string(me))
	list = make([]TuintType, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	Since TlistOfUintsType is just a simple String type, this merely sets the current value from the specified string.
func (me *TlistOfUintsType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	TlistOfUintsType declares a String containing a whitespace-separated list of TuintType values. This Values() method creates and returns a slice of all elements in that list, typed as xsdt.UnsignedLong.
func (me TlistOfUintsType) ValuesXsdtUnsignedLong() (list []xsdt.UnsignedLong) {
	svals := xsdt.ListValues(string(me))
	list = make([]xsdt.UnsignedLong, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	This convenience method just performs a simple type conversion to TlistOfUintsType's alias type xsdt.String.
func (me TlistOfUintsType) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskin_typeschema_Vcount_TlistOfUintsType_ struct {
	//	The vcount element contains a list of integers describing the number of influences for each vertex.
	//	The vcount element may occur once.
	Vcount TlistOfUintsType `xml:"http://www.collada.org/2008/03/COLLADASchema vcount"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskin_typeschema_Vcount_TlistOfUintsType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskin_typeschema_Vcount_TlistOfUintsType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskin_typeschema_Vcount_TlistOfUintsType_ instance.
func (me *XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskin_typeschema_Vcount_TlistOfUintsType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskin_typeschema_Vcount_TlistOfUintsType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The input element must occur at least twice.
//	The input_local_offset_type element is used to represent indexed inputs that can only reference resources declared in the same document.
//	The offset attribute represents the offset into the list of indices.  If two input elements share
//	the same offset, they will be indexed the same.  This works as a simple form of compression for the
//	list of indices as well as defining the order the inputs should be used in.  Required attribute.
type XsdGoPkgHasAttr_Offset_TuintType_ struct {
	//	The offset attribute represents the offset into the list of indices.  If two input elements share
	//	the same offset, they will be indexed the same.  This works as a simple form of compression for the
	//	list of indices as well as defining the order the inputs should be used in.  Required attribute.
	Offset TuintType `xml:"http://www.collada.org/2008/03/COLLADASchema offset,attr"`
}

//	The set attribute indicates which inputs should be grouped together as a single set. This is helpful
//	when multiple inputs share the same semantics.
type XsdGoPkgHasAttr_Set_TuintType_ struct {
	//	The set attribute indicates which inputs should be grouped together as a single set. This is helpful
	//	when multiple inputs share the same semantics.
	Set TuintType `xml:"http://www.collada.org/2008/03/COLLADASchema set,attr"`
}

type TinputLocalOffsetType struct {
	//	The source attribute indicates the location of the data source. Required attribute.
	XsdGoPkgHasAttr_Source_TurifragmentType_

	//	The offset attribute represents the offset into the list of indices.  If two input elements share
	//	the same offset, they will be indexed the same.  This works as a simple form of compression for the
	//	list of indices as well as defining the order the inputs should be used in.  Required attribute.
	XsdGoPkgHasAttr_Offset_TuintType_

	//	The set attribute indicates which inputs should be grouped together as a single set. This is helpful
	//	when multiple inputs share the same semantics.
	XsdGoPkgHasAttr_Set_TuintType_

	//	The semantic attribute is the user-defined meaning of the input connection. Required attribute.
	XsdGoPkgHasAttr_Semantic_XsdtNmtoken_
}

//	If the WalkHandlers.TinputLocalOffsetType function is not nil (ie. was set by outside code), calls it with this TinputLocalOffsetType instance as the single argument. Then calls the Walk() method on 0/4 embed(s) and 0/0 field(s) belonging to this TinputLocalOffsetType instance.
func (me *TinputLocalOffsetType) Walk() (err error) {
	if fn := WalkHandlers.TinputLocalOffsetType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_inputsequencevertex_weightssequenceskin_typeschema_Input_TinputLocalOffsetType_ struct {
	//	The input element must occur at least twice.
	Inputs []*TinputLocalOffsetType `xml:"http://www.collada.org/2008/03/COLLADASchema input"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_inputsequencevertex_weightssequenceskin_typeschema_Input_TinputLocalOffsetType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_inputsequencevertex_weightssequenceskin_typeschema_Input_TinputLocalOffsetType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_inputsequencevertex_weightssequenceskin_typeschema_Input_TinputLocalOffsetType_ instance.
func (me *XsdGoPkgHasElems_inputsequencevertex_weightssequenceskin_typeschema_Input_TinputLocalOffsetType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_inputsequencevertex_weightssequenceskin_typeschema_Input_TinputLocalOffsetType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Inputs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The v element describes which bones and attributes are associated with each vertex.  An index
//	of -1 into the array of joints refers to the bind shape.  Weights should be normalized before use.
//	The v element must occur zero or one times.
type XsdGoPkgHasElem_vsequencevertex_weightssequenceskin_typeschema_V_TlistOfIntsType_ struct {
	//	The v element describes which bones and attributes are associated with each vertex.  An index
	//	of -1 into the array of joints refers to the bind shape.  Weights should be normalized before use.
	//	The v element must occur zero or one times.
	V TlistOfIntsType `xml:"http://www.collada.org/2008/03/COLLADASchema v"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_vsequencevertex_weightssequenceskin_typeschema_V_TlistOfIntsType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_vsequencevertex_weightssequenceskin_typeschema_V_TlistOfIntsType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_vsequencevertex_weightssequenceskin_typeschema_V_TlistOfIntsType_ instance.
func (me *XsdGoPkgHasElem_vsequencevertex_weightssequenceskin_typeschema_V_TlistOfIntsType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_vsequencevertex_weightssequenceskin_typeschema_V_TlistOfIntsType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSkinTypeSequenceVertexWeights struct {
	//	The vcount element contains a list of integers describing the number of influences for each vertex.
	//	The vcount element may occur once.
	XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskin_typeschema_Vcount_TlistOfUintsType_

	//	The input element must occur at least twice.
	XsdGoPkgHasElems_inputsequencevertex_weightssequenceskin_typeschema_Input_TinputLocalOffsetType_

	//	The count attribute describes the number of vertices in the base mesh. Required element.
	XsdGoPkgHasAttr_Count_TuintType_

	//	The v element describes which bones and attributes are associated with each vertex.  An index
	//	of -1 into the array of joints refers to the bind shape.  Weights should be normalized before use.
	//	The v element must occur zero or one times.
	XsdGoPkgHasElem_vsequencevertex_weightssequenceskin_typeschema_V_TlistOfIntsType_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_
}

//	If the WalkHandlers.TxsdSkinTypeSequenceVertexWeights function is not nil (ie. was set by outside code), calls it with this TxsdSkinTypeSequenceVertexWeights instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TxsdSkinTypeSequenceVertexWeights instance.
func (me *TxsdSkinTypeSequenceVertexWeights) Walk() (err error) {
	if fn := WalkHandlers.TxsdSkinTypeSequenceVertexWeights; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskin_typeschema_Vcount_TlistOfUintsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_inputsequencevertex_weightssequenceskin_typeschema_Input_TinputLocalOffsetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_vsequencevertex_weightssequenceskin_typeschema_V_TlistOfIntsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_vertex_weightssequenceskin_typeschema_VertexWeights_TxsdSkinTypeSequenceVertexWeights_ struct {
	//	The vertex_weights element associates a set of joint-weight pairs with each vertex in the base mesh.
	VertexWeights *TxsdSkinTypeSequenceVertexWeights `xml:"http://www.collada.org/2008/03/COLLADASchema vertex_weights"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_vertex_weightssequenceskin_typeschema_VertexWeights_TxsdSkinTypeSequenceVertexWeights_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_vertex_weightssequenceskin_typeschema_VertexWeights_TxsdSkinTypeSequenceVertexWeights_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_vertex_weightssequenceskin_typeschema_VertexWeights_TxsdSkinTypeSequenceVertexWeights_ instance.
func (me *XsdGoPkgHasElem_vertex_weightssequenceskin_typeschema_VertexWeights_TxsdSkinTypeSequenceVertexWeights_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_vertex_weightssequenceskin_typeschema_VertexWeights_TxsdSkinTypeSequenceVertexWeights_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.VertexWeights.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TskinType struct {
	//	The source attribute contains a URI reference to the base mesh, (a static mesh or a morphed mesh).
	//	This also provides the bind-shape of the skinned mesh.  Required attribute.
	XsdGoPkgHasAttr_Source_XsdtAnyURI_

	//	The joints element associates joint, or skeleton, nodes with attribute data.
	//	In COLLADA, this is specified by the inverse bind matrix of each joint (influence) in the skeleton.
	XsdGoPkgHasElem_jointssequenceskin_typeschema_Joints_TxsdSkinTypeSequenceJoints_

	//	The vertex_weights element associates a set of joint-weight pairs with each vertex in the base mesh.
	XsdGoPkgHasElem_vertex_weightssequenceskin_typeschema_VertexWeights_TxsdSkinTypeSequenceVertexWeights_

	//	The skin element must contain at least three source elements.
	XsdGoPkgHasElems_sourcesequencechoicesequenceanimation_typeschema_Source_TsourceType_

	//	This provides extra information about the position and orientation of the base mesh before binding.
	//	If bind_shape_matrix is not specified then an identity matrix may be used as the bind_shape_matrix.
	//	The bind_shape_matrix element may occur zero or one times.
	XsdGoPkgHasElem_bind_shape_matrixsequenceskin_typeschema_BindShapeMatrix_Tfloat4X4Type_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_
}

//	If the WalkHandlers.TskinType function is not nil (ie. was set by outside code), calls it with this TskinType instance as the single argument. Then calls the Walk() method on 5/6 embed(s) and 0/0 field(s) belonging to this TskinType instance.
func (me *TskinType) Walk() (err error) {
	if fn := WalkHandlers.TskinType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_jointssequenceskin_typeschema_Joints_TxsdSkinTypeSequenceJoints_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_vertex_weightssequenceskin_typeschema_VertexWeights_TxsdSkinTypeSequenceVertexWeights_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_sourcesequencechoicesequenceanimation_typeschema_Source_TsourceType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bind_shape_matrixsequenceskin_typeschema_BindShapeMatrix_Tfloat4X4Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_skinchoicesequencecontroller_typeschema_Skin_TskinType_ struct {
	//	The controller element may contain either a skin element or a morph element.
	Skin *TskinType `xml:"http://www.collada.org/2008/03/COLLADASchema skin"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_skinchoicesequencecontroller_typeschema_Skin_TskinType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_skinchoicesequencecontroller_typeschema_Skin_TskinType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_skinchoicesequencecontroller_typeschema_Skin_TskinType_ instance.
func (me *XsdGoPkgHasElem_skinchoicesequencecontroller_typeschema_Skin_TskinType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_skinchoicesequencecontroller_typeschema_Skin_TskinType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Skin.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcontrollerType struct {
	//	The controller element may contain either a skin element or a morph element.
	XsdGoPkgHasElem_morphchoicesequencecontroller_typeschema_Morph_TmorphType_

	//	The controller element may contain an asset element.
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	//	The controller element may contain either a skin element or a morph element.
	XsdGoPkgHasElem_skinchoicesequencecontroller_typeschema_Skin_TskinType_

	//	The id attribute is a text string containing the unique identifier of this element. This value
	//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_
}

//	If the WalkHandlers.TcontrollerType function is not nil (ie. was set by outside code), calls it with this TcontrollerType instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TcontrollerType instance.
func (me *TcontrollerType) Walk() (err error) {
	if fn := WalkHandlers.TcontrollerType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_morphchoicesequencecontroller_typeschema_Morph_TmorphType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_skinchoicesequencecontroller_typeschema_Skin_TskinType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_controllersequencelibrary_controllers_typeschema_Controller_TcontrollerType_ struct {
	//	There must be at least one controller element.
	Controllers []*TcontrollerType `xml:"http://www.collada.org/2008/03/COLLADASchema controller"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_controllersequencelibrary_controllers_typeschema_Controller_TcontrollerType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_controllersequencelibrary_controllers_typeschema_Controller_TcontrollerType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_controllersequencelibrary_controllers_typeschema_Controller_TcontrollerType_ instance.
func (me *XsdGoPkgHasElems_controllersequencelibrary_controllers_typeschema_Controller_TcontrollerType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_controllersequencelibrary_controllers_typeschema_Controller_TcontrollerType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Controllers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TlibraryControllersType struct {
	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	There must be at least one controller element.
	XsdGoPkgHasElems_controllersequencelibrary_controllers_typeschema_Controller_TcontrollerType_

	//	The library_controllers element may contain an asset element.
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_
}

//	If the WalkHandlers.TlibraryControllersType function is not nil (ie. was set by outside code), calls it with this TlibraryControllersType instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TlibraryControllersType instance.
func (me *TlibraryControllersType) Walk() (err error) {
	if fn := WalkHandlers.TlibraryControllersType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_controllersequencelibrary_controllers_typeschema_Controller_TcontrollerType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_library_controllerschoicesequenceCOLLADAschema_LibraryControllers_TlibraryControllersType_ struct {
	//	The COLLADA element may contain any
	//	number of library_controllerss elements.
	ControllersLibraries []*TlibraryControllersType `xml:"http://www.collada.org/2008/03/COLLADASchema library_controllers"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_library_controllerschoicesequenceCOLLADAschema_LibraryControllers_TlibraryControllersType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_library_controllerschoicesequenceCOLLADAschema_LibraryControllers_TlibraryControllersType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_library_controllerschoicesequenceCOLLADAschema_LibraryControllers_TlibraryControllersType_ instance.
func (me *XsdGoPkgHasElems_library_controllerschoicesequenceCOLLADAschema_LibraryControllers_TlibraryControllersType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_library_controllerschoicesequenceCOLLADAschema_LibraryControllers_TlibraryControllersType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ControllersLibraries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The COLLADA element may contain any
//	number of library_geometriess elements.
//	The library_geometries element declares a module of geometry elements.
//	There must be at least one geometry element.
//	Geometry describes the visual shape and appearance of an object in the scene.
//	The geometry element categorizes the declaration of geometric information. Geometry is a
//	branch of mathematics that deals with the measurement, properties, and relationships of
//	points, lines, angles, surfaces, and solids.
//	The spline element contains control vertex information sufficient to describe basic splines.
type XsdGoPkgHasAttr_Closed_XsdtBoolean_False struct {
	Closed xsdt.Boolean `xml:"http://www.collada.org/2008/03/COLLADASchema closed,attr"`
}

//	Returns the default value for Closed -- false
func (me XsdGoPkgHasAttr_Closed_XsdtBoolean_False) ClosedDefault() xsdt.Boolean {
	return xsdt.Boolean(false)
}

//	The control vertices element  must occur  exactly one time. It is used to describe the CVs of the spline.
type TxsdSplineTypeSequenceControlVertices struct {
	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The input element must occur at least one time. These inputs are local inputs.
	XsdGoPkgHasElems_inputsequencesampler_typeschema_Input_TinputLocalType_
}

//	If the WalkHandlers.TxsdSplineTypeSequenceControlVertices function is not nil (ie. was set by outside code), calls it with this TxsdSplineTypeSequenceControlVertices instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdSplineTypeSequenceControlVertices instance.
func (me *TxsdSplineTypeSequenceControlVertices) Walk() (err error) {
	if fn := WalkHandlers.TxsdSplineTypeSequenceControlVertices; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_inputsequencesampler_typeschema_Input_TinputLocalType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_control_verticessequencespline_typeschema_ControlVertices_TxsdSplineTypeSequenceControlVertices_ struct {
	//	The control vertices element  must occur  exactly one time. It is used to describe the CVs of the spline.
	ControlVertices *TxsdSplineTypeSequenceControlVertices `xml:"http://www.collada.org/2008/03/COLLADASchema control_vertices"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_control_verticessequencespline_typeschema_ControlVertices_TxsdSplineTypeSequenceControlVertices_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_control_verticessequencespline_typeschema_ControlVertices_TxsdSplineTypeSequenceControlVertices_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_control_verticessequencespline_typeschema_ControlVertices_TxsdSplineTypeSequenceControlVertices_ instance.
func (me *XsdGoPkgHasElem_control_verticessequencespline_typeschema_ControlVertices_TxsdSplineTypeSequenceControlVertices_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_control_verticessequencespline_typeschema_ControlVertices_TxsdSplineTypeSequenceControlVertices_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ControlVertices.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TsplineType struct {
	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	XsdGoPkgHasAttr_Closed_XsdtBoolean_False

	//	The mesh element must contain one or more source elements.
	XsdGoPkgHasElems_sourcesequencechoicesequenceanimation_typeschema_Source_TsourceType_

	//	The control vertices element  must occur  exactly one time. It is used to describe the CVs of the spline.
	XsdGoPkgHasElem_control_verticessequencespline_typeschema_ControlVertices_TxsdSplineTypeSequenceControlVertices_
}

//	If the WalkHandlers.TsplineType function is not nil (ie. was set by outside code), calls it with this TsplineType instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TsplineType instance.
func (me *TsplineType) Walk() (err error) {
	if fn := WalkHandlers.TsplineType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_control_verticessequencespline_typeschema_ControlVertices_TxsdSplineTypeSequenceControlVertices_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_sourcesequencechoicesequenceanimation_typeschema_Source_TsourceType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_splinechoicesequencegeometry_typeschema_Spline_TsplineType_ struct {
	Spline *TsplineType `xml:"http://www.collada.org/2008/03/COLLADASchema spline"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_splinechoicesequencegeometry_typeschema_Spline_TsplineType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_splinechoicesequencegeometry_typeschema_Spline_TsplineType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_splinechoicesequencegeometry_typeschema_Spline_TsplineType_ instance.
func (me *XsdGoPkgHasElem_splinechoicesequencegeometry_typeschema_Spline_TsplineType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_splinechoicesequencegeometry_typeschema_Spline_TsplineType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Spline.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The geometry element may contain only
//	one mesh or convex_mesh.
//	The mesh element contains vertex and primitive information sufficient to describe basic geometric meshes.
//	The mesh element may contain any number of trifans elements.
//	The trifans element provides the information needed to bind vertex attributes together and then
//	organize those vertices into connected triangles. Each triangle described by the mesh has three
//	vertices. The first triangle is formed from first, second, and third vertices. Each subsequent
//	triangle is formed from the current vertex, reusing the first and the previous vertices.
//	The material attribute declares a symbol for a material. This symbol is bound to a material at
//	the time of instantiation. If the material attribute is not specified then the lighting and
//	shading results are application defined. Optional attribute.
type XsdGoPkgHasAttr_Material_XsdtNCName_ struct {
	//	The material attribute declares a symbol for a material. This symbol is bound to a material at
	//	the time of instantiation. If the material attribute is not specified then the lighting and
	//	shading results are application defined. Optional attribute.
	Material xsdt.NCName `xml:"http://www.collada.org/2008/03/COLLADASchema material,attr"`
}

//	The trifans element may have any number of p elements.
//	The p element represents primitive data for the primitive types (lines, linestrips, polygons,
//	polylist, triangles, trifans, tristrips). The p element contains indices that reference into
//	the parent's source elements referenced by the input elements.
type TpType struct {
	XsdGoPkgValue TlistOfUintsType `xml:",chardata"`
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TpType) ToTlistOfUintsType() TlistOfUintsType { return me.XsdGoPkgValue }

//	Returns the value of its XsdGoPkgValue field as a xsdt.String (which TlistOfUintsType is just aliasing).
func (me *TpType) ToXsdtString() xsdt.String { return me.XsdGoPkgValue.ToXsdtString() }

//	If the WalkHandlers.TpType function is not nil (ie. was set by outside code), calls it with this TpType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this TpType instance.
func (me *TpType) Walk() (err error) {
	if fn := WalkHandlers.TpType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_psequencetrifans_typeschema_P_TpType_ struct {
	//	The trifans element may have any number of p elements.
	Ps []*TpType `xml:"http://www.collada.org/2008/03/COLLADASchema p"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_psequencetrifans_typeschema_P_TpType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_psequencetrifans_typeschema_P_TpType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_psequencetrifans_typeschema_P_TpType_ instance.
func (me *XsdGoPkgHasElems_psequencetrifans_typeschema_P_TpType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_psequencetrifans_typeschema_P_TpType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Ps {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtrifansType struct {
	//	The input element may occur any number of times. This input is a local input with the
	//	offset and set attributes.
	XsdGoPkgHasElems_inputsequencevertex_weightssequenceskin_typeschema_Input_TinputLocalOffsetType_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The count attribute indicates the number of triangle fan primitives. Required attribute.
	XsdGoPkgHasAttr_Count_TuintType_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The material attribute declares a symbol for a material. This symbol is bound to a material
	//	at the time of instantiation. If the material attribute is not specified then the lighting
	//	and shading results are application defined. Optional attribute.
	XsdGoPkgHasAttr_Material_XsdtNCName_

	//	The trifans element may have any number of p elements.
	XsdGoPkgHasElems_psequencetrifans_typeschema_P_TpType_
}

//	If the WalkHandlers.TtrifansType function is not nil (ie. was set by outside code), calls it with this TtrifansType instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TtrifansType instance.
func (me *TtrifansType) Walk() (err error) {
	if fn := WalkHandlers.TtrifansType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_psequencetrifans_typeschema_P_TpType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_inputsequencevertex_weightssequenceskin_typeschema_Input_TinputLocalOffsetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_trifanschoicesequencemesh_typeschema_Trifans_TtrifansType_ struct {
	//	The mesh element may contain any number of trifans elements.
	Trifanses []*TtrifansType `xml:"http://www.collada.org/2008/03/COLLADASchema trifans"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_trifanschoicesequencemesh_typeschema_Trifans_TtrifansType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_trifanschoicesequencemesh_typeschema_Trifans_TtrifansType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_trifanschoicesequencemesh_typeschema_Trifans_TtrifansType_ instance.
func (me *XsdGoPkgHasElems_trifanschoicesequencemesh_typeschema_Trifans_TtrifansType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_trifanschoicesequencemesh_typeschema_Trifans_TtrifansType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Trifanses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The mesh element may contain any number of triangles elements.
//	The triangles element provides the information needed to bind vertex attributes together and
//	then organize those vertices into individual triangles.	Each triangle described by the mesh has
//	three vertices. The first triangle is formed from the first, second, and third vertices. The
//	second triangle is formed from the fourth, fifth, and sixth vertices, and so on.
//	The triangles element may have zero or one p element.
type XsdGoPkgHasElem_psequencetriangles_typeschema_P_TpType_ struct {
	//	The triangles element may have zero or one p element.
	P *TpType `xml:"http://www.collada.org/2008/03/COLLADASchema p"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_psequencetriangles_typeschema_P_TpType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_psequencetriangles_typeschema_P_TpType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_psequencetriangles_typeschema_P_TpType_ instance.
func (me *XsdGoPkgHasElem_psequencetriangles_typeschema_P_TpType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_psequencetriangles_typeschema_P_TpType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.P.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtrianglesType struct {
	//	The count attribute indicates the number of triangle primitives. Required attribute.
	XsdGoPkgHasAttr_Count_TuintType_

	//	The input element may occur any number of times. This input is a local input with the
	//	offset and set attributes.
	XsdGoPkgHasElems_inputsequencevertex_weightssequenceskin_typeschema_Input_TinputLocalOffsetType_

	//	The triangles element may have zero or one p element.
	XsdGoPkgHasElem_psequencetriangles_typeschema_P_TpType_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The material attribute declares a symbol for a material. This symbol is bound to a material at
	//	the time of instantiation. Optional attribute. If the material attribute is not specified then
	//	the lighting and shading results are application defined.
	XsdGoPkgHasAttr_Material_XsdtNCName_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_
}

//	If the WalkHandlers.TtrianglesType function is not nil (ie. was set by outside code), calls it with this TtrianglesType instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TtrianglesType instance.
func (me *TtrianglesType) Walk() (err error) {
	if fn := WalkHandlers.TtrianglesType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_inputsequencevertex_weightssequenceskin_typeschema_Input_TinputLocalOffsetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_psequencetriangles_typeschema_P_TpType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_triangleschoicesequencemesh_typeschema_Triangles_TtrianglesType_ struct {
	//	The mesh element may contain any number of triangles elements.
	Triangleses []*TtrianglesType `xml:"http://www.collada.org/2008/03/COLLADASchema triangles"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_triangleschoicesequencemesh_typeschema_Triangles_TtrianglesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_triangleschoicesequencemesh_typeschema_Triangles_TtrianglesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_triangleschoicesequencemesh_typeschema_Triangles_TtrianglesType_ instance.
func (me *XsdGoPkgHasElems_triangleschoicesequencemesh_typeschema_Triangles_TtrianglesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_triangleschoicesequencemesh_typeschema_Triangles_TtrianglesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Triangleses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The mesh element may contain any number of tristrips elements.
//	The tristrips element provides the information needed to bind vertex attributes together and then
//	organize those vertices into connected triangles. Each triangle described by the mesh has three
//	vertices. The first triangle is formed from first, second, and third vertices. Each subsequent
//	triangle is formed from the current vertex, reusing the previous two vertices.
type TtristripsType struct {
	//	The count attribute indicates the number of triangle strip primitives. Required attribute.
	XsdGoPkgHasAttr_Count_TuintType_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The input element may occur any number of times. This input is a local input with the offset
	//	and set attributes.
	XsdGoPkgHasElems_inputsequencevertex_weightssequenceskin_typeschema_Input_TinputLocalOffsetType_

	//	The tristrips element may have any number of p elements.
	XsdGoPkgHasElems_psequencetrifans_typeschema_P_TpType_

	//	The material attribute declares a symbol for a material. This symbol is bound to a material
	//	at the time of instantiation. If the material attribute is not specified then the lighting
	//	and shading results are application defined. Optional attribute.
	XsdGoPkgHasAttr_Material_XsdtNCName_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_
}

//	If the WalkHandlers.TtristripsType function is not nil (ie. was set by outside code), calls it with this TtristripsType instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TtristripsType instance.
func (me *TtristripsType) Walk() (err error) {
	if fn := WalkHandlers.TtristripsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_inputsequencevertex_weightssequenceskin_typeschema_Input_TinputLocalOffsetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_psequencetrifans_typeschema_P_TpType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_tristripschoicesequencemesh_typeschema_Tristrips_TtristripsType_ struct {
	//	The mesh element may contain any number of tristrips elements.
	Tristripses []*TtristripsType `xml:"http://www.collada.org/2008/03/COLLADASchema tristrips"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_tristripschoicesequencemesh_typeschema_Tristrips_TtristripsType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_tristripschoicesequencemesh_typeschema_Tristrips_TtristripsType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_tristripschoicesequencemesh_typeschema_Tristrips_TtristripsType_ instance.
func (me *XsdGoPkgHasElems_tristripschoicesequencemesh_typeschema_Tristrips_TtristripsType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_tristripschoicesequencemesh_typeschema_Tristrips_TtristripsType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Tristripses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The mesh element must contain one vertices element.
//	The vertices element declares the attributes and identity of mesh-vertices. The vertices element
//	describes mesh-vertices in a mesh geometry. The mesh-vertices represent the position (identity)
//	of the vertices comprising the mesh and other vertex attributes that are invariant to tessellation.
type TverticesType struct {
	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The id attribute is a text string containing the unique identifier of this element. This
	//	value must be unique within the instance document. Required attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The input element must occur at least one time. These inputs are local inputs.
	XsdGoPkgHasElems_inputsequencesampler_typeschema_Input_TinputLocalType_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_
}

//	If the WalkHandlers.TverticesType function is not nil (ie. was set by outside code), calls it with this TverticesType instance as the single argument. Then calls the Walk() method on 2/4 embed(s) and 0/0 field(s) belonging to this TverticesType instance.
func (me *TverticesType) Walk() (err error) {
	if fn := WalkHandlers.TverticesType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_inputsequencesampler_typeschema_Input_TinputLocalType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_verticessequencemesh_typeschema_Vertices_TverticesType_ struct {
	//	The mesh element must contain one vertices element.
	Vertices *TverticesType `xml:"http://www.collada.org/2008/03/COLLADASchema vertices"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_verticessequencemesh_typeschema_Vertices_TverticesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_verticessequencemesh_typeschema_Vertices_TverticesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_verticessequencemesh_typeschema_Vertices_TverticesType_ instance.
func (me *XsdGoPkgHasElem_verticessequencemesh_typeschema_Vertices_TverticesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_verticessequencemesh_typeschema_Vertices_TverticesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Vertices.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The mesh element may contain any number of polylist elements.
//	The polylist element provides the information needed to bind vertex attributes together and
//	then organize those vertices into individual polygons. The polygons described in polylist can
//	contain arbitrary numbers of vertices. Unlike the polygons element, the polylist element cannot
//	contain polygons with holes.
type TpolylistType struct {
	//	The vcount element contains a list of integers describing the number of sides for each polygon
	//	described by the polylist element. The vcount element may occur once.
	XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskin_typeschema_Vcount_TlistOfUintsType_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The material attribute declares a symbol for a material. This symbol is bound to a material at
	//	the time of instantiation. If the material attribute is not specified then the lighting and
	//	shading results are application defined. Optional attribute.
	XsdGoPkgHasAttr_Material_XsdtNCName_

	//	The input element may occur any number of times. This input is a local input with the
	//	offset and set attributes.
	XsdGoPkgHasElems_inputsequencevertex_weightssequenceskin_typeschema_Input_TinputLocalOffsetType_

	//	The count attribute indicates the number of polygon primitives. Required attribute.
	XsdGoPkgHasAttr_Count_TuintType_

	//	The polylist element may have zero or one p element.
	XsdGoPkgHasElem_psequencetriangles_typeschema_P_TpType_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_
}

//	If the WalkHandlers.TpolylistType function is not nil (ie. was set by outside code), calls it with this TpolylistType instance as the single argument. Then calls the Walk() method on 4/7 embed(s) and 0/0 field(s) belonging to this TpolylistType instance.
func (me *TpolylistType) Walk() (err error) {
	if fn := WalkHandlers.TpolylistType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskin_typeschema_Vcount_TlistOfUintsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_inputsequencevertex_weightssequenceskin_typeschema_Input_TinputLocalOffsetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_psequencetriangles_typeschema_P_TpType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_polylistchoicesequencemesh_typeschema_Polylist_TpolylistType_ struct {
	//	The mesh element may contain any number of polylist elements.
	Polylists []*TpolylistType `xml:"http://www.collada.org/2008/03/COLLADASchema polylist"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_polylistchoicesequencemesh_typeschema_Polylist_TpolylistType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_polylistchoicesequencemesh_typeschema_Polylist_TpolylistType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_polylistchoicesequencemesh_typeschema_Polylist_TpolylistType_ instance.
func (me *XsdGoPkgHasElems_polylistchoicesequencemesh_typeschema_Polylist_TpolylistType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_polylistchoicesequencemesh_typeschema_Polylist_TpolylistType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Polylists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The mesh element may contain any number of polygons elements.
//	The polygons element provides the information needed to bind vertex attributes together and
//	then organize those vertices into individual polygons. The polygons described can contain
//	arbitrary numbers of vertices. These polygons may be self intersecting and may also contain holes.
//	The ph element may occur any number of times. It describes a polygon with holes.
//	The h element represents a hole in the polygon specified. There must be at least one h element.
type XsdGoPkgHasElems_hsequencephchoicesequencepolygons_typeschema_H_TlistOfUintsType_ struct {
	//	The h element represents a hole in the polygon specified. There must be at least one h element.
	Hs []TlistOfUintsType `xml:"http://www.collada.org/2008/03/COLLADASchema h"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_hsequencephchoicesequencepolygons_typeschema_H_TlistOfUintsType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_hsequencephchoicesequencepolygons_typeschema_H_TlistOfUintsType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_hsequencephchoicesequencepolygons_typeschema_H_TlistOfUintsType_ instance.
func (me *XsdGoPkgHasElems_hsequencephchoicesequencepolygons_typeschema_H_TlistOfUintsType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_hsequencephchoicesequencepolygons_typeschema_H_TlistOfUintsType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPolygonsTypeSequenceChoicePh struct {
	//	The h element represents a hole in the polygon specified. There must be at least one h element.
	XsdGoPkgHasElems_hsequencephchoicesequencepolygons_typeschema_H_TlistOfUintsType_

	//	There may only be one p element.
	XsdGoPkgHasElem_psequencetriangles_typeschema_P_TpType_
}

//	If the WalkHandlers.TxsdPolygonsTypeSequenceChoicePh function is not nil (ie. was set by outside code), calls it with this TxsdPolygonsTypeSequenceChoicePh instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdPolygonsTypeSequenceChoicePh instance.
func (me *TxsdPolygonsTypeSequenceChoicePh) Walk() (err error) {
	if fn := WalkHandlers.TxsdPolygonsTypeSequenceChoicePh; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_psequencetriangles_typeschema_P_TpType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_hsequencephchoicesequencepolygons_typeschema_H_TlistOfUintsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_phchoicesequencepolygons_typeschema_Ph_TxsdPolygonsTypeSequenceChoicePh_ struct {
	//	The ph element may occur any number of times. It describes a polygon with holes.
	Phs []*TxsdPolygonsTypeSequenceChoicePh `xml:"http://www.collada.org/2008/03/COLLADASchema ph"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_phchoicesequencepolygons_typeschema_Ph_TxsdPolygonsTypeSequenceChoicePh_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_phchoicesequencepolygons_typeschema_Ph_TxsdPolygonsTypeSequenceChoicePh_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_phchoicesequencepolygons_typeschema_Ph_TxsdPolygonsTypeSequenceChoicePh_ instance.
func (me *XsdGoPkgHasElems_phchoicesequencepolygons_typeschema_Ph_TxsdPolygonsTypeSequenceChoicePh_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_phchoicesequencepolygons_typeschema_Ph_TxsdPolygonsTypeSequenceChoicePh_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Phs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TpolygonsType struct {
	//	The material attribute declares a symbol for a material. This symbol is bound to a material
	//	at the time of instantiation. If the material attribute is not specified then the lighting
	//	and shading results are application defined. Optional attribute.
	XsdGoPkgHasAttr_Material_XsdtNCName_

	//	The input element may occur any number of times. This input is a local input with the
	//	offset and set attributes.
	XsdGoPkgHasElems_inputsequencevertex_weightssequenceskin_typeschema_Input_TinputLocalOffsetType_

	//	The ph element may occur any number of times. It describes a polygon with holes.
	XsdGoPkgHasElems_phchoicesequencepolygons_typeschema_Ph_TxsdPolygonsTypeSequenceChoicePh_

	//	The p element may occur any number of times.
	XsdGoPkgHasElems_psequencetrifans_typeschema_P_TpType_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The count attribute indicates the number of polygon primitives. Required attribute.
	XsdGoPkgHasAttr_Count_TuintType_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_
}

//	If the WalkHandlers.TpolygonsType function is not nil (ie. was set by outside code), calls it with this TpolygonsType instance as the single argument. Then calls the Walk() method on 4/7 embed(s) and 0/0 field(s) belonging to this TpolygonsType instance.
func (me *TpolygonsType) Walk() (err error) {
	if fn := WalkHandlers.TpolygonsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_inputsequencevertex_weightssequenceskin_typeschema_Input_TinputLocalOffsetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_phchoicesequencepolygons_typeschema_Ph_TxsdPolygonsTypeSequenceChoicePh_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_psequencetrifans_typeschema_P_TpType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_polygonschoicesequencemesh_typeschema_Polygons_TpolygonsType_ struct {
	//	The mesh element may contain any number of polygons elements.
	Polygonses []*TpolygonsType `xml:"http://www.collada.org/2008/03/COLLADASchema polygons"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_polygonschoicesequencemesh_typeschema_Polygons_TpolygonsType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_polygonschoicesequencemesh_typeschema_Polygons_TpolygonsType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_polygonschoicesequencemesh_typeschema_Polygons_TpolygonsType_ instance.
func (me *XsdGoPkgHasElems_polygonschoicesequencemesh_typeschema_Polygons_TpolygonsType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_polygonschoicesequencemesh_typeschema_Polygons_TpolygonsType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Polygonses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The mesh element may contain any number of linestrips elements.
//	The linestrips element provides the information needed to bind vertex attributes together and
//	then organize those vertices into connected line-strips. Each line-strip described by the mesh
//	has an arbitrary number of vertices. Each line segment within the line-strip is formed from the
//	current vertex and the preceding vertex.
type TlinestripsType struct {
	//	The linestrips element may have any number of p elements.
	XsdGoPkgHasElems_psequencetrifans_typeschema_P_TpType_

	//	The input element may occur any number of times. This input is a local input with the offset
	//	and set attributes.
	XsdGoPkgHasElems_inputsequencevertex_weightssequenceskin_typeschema_Input_TinputLocalOffsetType_

	//	The material attribute declares a symbol for a material. This symbol is bound to a material
	//	at the time of instantiation. If the material attribute is not specified then the lighting
	//	and shading results are application defined. Optional attribute.
	XsdGoPkgHasAttr_Material_XsdtNCName_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The count attribute indicates the number of linestrip primitives. Required attribute.
	XsdGoPkgHasAttr_Count_TuintType_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_
}

//	If the WalkHandlers.TlinestripsType function is not nil (ie. was set by outside code), calls it with this TlinestripsType instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TlinestripsType instance.
func (me *TlinestripsType) Walk() (err error) {
	if fn := WalkHandlers.TlinestripsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_psequencetrifans_typeschema_P_TpType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_inputsequencevertex_weightssequenceskin_typeschema_Input_TinputLocalOffsetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_linestripschoicesequencemesh_typeschema_Linestrips_TlinestripsType_ struct {
	//	The mesh element may contain any number of linestrips elements.
	Linestripses []*TlinestripsType `xml:"http://www.collada.org/2008/03/COLLADASchema linestrips"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_linestripschoicesequencemesh_typeschema_Linestrips_TlinestripsType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_linestripschoicesequencemesh_typeschema_Linestrips_TlinestripsType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_linestripschoicesequencemesh_typeschema_Linestrips_TlinestripsType_ instance.
func (me *XsdGoPkgHasElems_linestripschoicesequencemesh_typeschema_Linestrips_TlinestripsType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_linestripschoicesequencemesh_typeschema_Linestrips_TlinestripsType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Linestripses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The mesh element may contain any number of lines elements.
//	The lines element provides the information needed to bind vertex attributes together and then
//	organize those vertices into individual lines. Each line described by the mesh has two vertices.
//	The first line is formed from first and second vertices. The second line is formed from the
//	third and fourth vertices and so on.
type TlinesType struct {
	//	The lines element may have zero or one p element.
	XsdGoPkgHasElem_psequencetriangles_typeschema_P_TpType_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The material attribute declares a symbol for a material. This symbol is bound to a material at
	//	the time of instantiation. If the material attribute is not specified then the lighting and
	//	shading results are application defined. Optional attribute.
	XsdGoPkgHasAttr_Material_XsdtNCName_

	//	The count attribute indicates the number of line primitives. Required attribute.
	XsdGoPkgHasAttr_Count_TuintType_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The input element may occur any number of times. This input is a local input with the offset
	//	and set attributes.
	XsdGoPkgHasElems_inputsequencevertex_weightssequenceskin_typeschema_Input_TinputLocalOffsetType_
}

//	If the WalkHandlers.TlinesType function is not nil (ie. was set by outside code), calls it with this TlinesType instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TlinesType instance.
func (me *TlinesType) Walk() (err error) {
	if fn := WalkHandlers.TlinesType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_inputsequencevertex_weightssequenceskin_typeschema_Input_TinputLocalOffsetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_psequencetriangles_typeschema_P_TpType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_lineschoicesequencemesh_typeschema_Lines_TlinesType_ struct {
	//	The mesh element may contain any number of lines elements.
	Lineses []*TlinesType `xml:"http://www.collada.org/2008/03/COLLADASchema lines"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_lineschoicesequencemesh_typeschema_Lines_TlinesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_lineschoicesequencemesh_typeschema_Lines_TlinesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_lineschoicesequencemesh_typeschema_Lines_TlinesType_ instance.
func (me *XsdGoPkgHasElems_lineschoicesequencemesh_typeschema_Lines_TlinesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_lineschoicesequencemesh_typeschema_Lines_TlinesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Lineses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TmeshType struct {
	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The mesh element may contain any number of polygons elements.
	XsdGoPkgHasElems_polygonschoicesequencemesh_typeschema_Polygons_TpolygonsType_

	//	The mesh element may contain any number of linestrips elements.
	XsdGoPkgHasElems_linestripschoicesequencemesh_typeschema_Linestrips_TlinestripsType_

	//	The mesh element may contain any number of lines elements.
	XsdGoPkgHasElems_lineschoicesequencemesh_typeschema_Lines_TlinesType_

	//	The mesh element may contain any number of trifans elements.
	XsdGoPkgHasElems_trifanschoicesequencemesh_typeschema_Trifans_TtrifansType_

	//	The mesh element may contain any number of triangles elements.
	XsdGoPkgHasElems_triangleschoicesequencemesh_typeschema_Triangles_TtrianglesType_

	//	The mesh element may contain any number of tristrips elements.
	XsdGoPkgHasElems_tristripschoicesequencemesh_typeschema_Tristrips_TtristripsType_

	//	The mesh element must contain one vertices element.
	XsdGoPkgHasElem_verticessequencemesh_typeschema_Vertices_TverticesType_

	//	The mesh element must contain one or more source elements.
	XsdGoPkgHasElems_sourcesequencechoicesequenceanimation_typeschema_Source_TsourceType_

	//	The mesh element may contain any number of polylist elements.
	XsdGoPkgHasElems_polylistchoicesequencemesh_typeschema_Polylist_TpolylistType_
}

//	If the WalkHandlers.TmeshType function is not nil (ie. was set by outside code), calls it with this TmeshType instance as the single argument. Then calls the Walk() method on 10/10 embed(s) and 0/0 field(s) belonging to this TmeshType instance.
func (me *TmeshType) Walk() (err error) {
	if fn := WalkHandlers.TmeshType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_polylistchoicesequencemesh_typeschema_Polylist_TpolylistType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_polygonschoicesequencemesh_typeschema_Polygons_TpolygonsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_linestripschoicesequencemesh_typeschema_Linestrips_TlinestripsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_lineschoicesequencemesh_typeschema_Lines_TlinesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_trifanschoicesequencemesh_typeschema_Trifans_TtrifansType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_triangleschoicesequencemesh_typeschema_Triangles_TtrianglesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_tristripschoicesequencemesh_typeschema_Tristrips_TtristripsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_verticessequencemesh_typeschema_Vertices_TverticesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_sourcesequencechoicesequenceanimation_typeschema_Source_TsourceType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_meshchoicesequencegeometry_typeschema_Mesh_TmeshType_ struct {
	//	The geometry element may contain only
	//	one mesh or convex_mesh.
	Mesh *TmeshType `xml:"http://www.collada.org/2008/03/COLLADASchema mesh"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_meshchoicesequencegeometry_typeschema_Mesh_TmeshType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_meshchoicesequencegeometry_typeschema_Mesh_TmeshType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_meshchoicesequencegeometry_typeschema_Mesh_TmeshType_ instance.
func (me *XsdGoPkgHasElem_meshchoicesequencegeometry_typeschema_Mesh_TmeshType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_meshchoicesequencegeometry_typeschema_Mesh_TmeshType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Mesh.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The geometry element may contain only
//	one mesh or convex_mesh.
//	The definition of the convex_mesh element is identical to the mesh element with the exception that
//	instead of a complete description (source, vertices, polygons etc.), it may simply point to another
//	geometry to derive its shape. The latter case means that the convex hull of that geometry should
//	be computed and is indicated by the optional "convex_hull_of" attribute.
//	The convex_hull_of attribute is a URI string of geometry to compute the convex hull of.
//	Optional attribute.
type XsdGoPkgHasAttr_ConvexHullOf_XsdtAnyURI_ struct {
	//	The convex_hull_of attribute is a URI string of geometry to compute the convex hull of.
	//	Optional attribute.
	ConvexHullOf xsdt.AnyURI `xml:"http://www.collada.org/2008/03/COLLADASchema convex_hull_of,attr"`
}

type TconvexMeshType struct {
	//	The convex_hull_of attribute is a URI string of geometry to compute the convex hull of.
	//	Optional attribute.
	XsdGoPkgHasAttr_ConvexHullOf_XsdtAnyURI_

	XsdGoPkgHasElem_verticessequencemesh_typeschema_Vertices_TverticesType_

	XsdGoPkgHasElems_triangleschoicesequencemesh_typeschema_Triangles_TtrianglesType_

	XsdGoPkgHasElems_sourcesequencechoicesequenceanimation_typeschema_Source_TsourceType_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	XsdGoPkgHasElems_polylistchoicesequencemesh_typeschema_Polylist_TpolylistType_

	XsdGoPkgHasElems_linestripschoicesequencemesh_typeschema_Linestrips_TlinestripsType_

	XsdGoPkgHasElems_trifanschoicesequencemesh_typeschema_Trifans_TtrifansType_

	XsdGoPkgHasElems_polygonschoicesequencemesh_typeschema_Polygons_TpolygonsType_

	XsdGoPkgHasElems_lineschoicesequencemesh_typeschema_Lines_TlinesType_

	XsdGoPkgHasElems_tristripschoicesequencemesh_typeschema_Tristrips_TtristripsType_
}

//	If the WalkHandlers.TconvexMeshType function is not nil (ie. was set by outside code), calls it with this TconvexMeshType instance as the single argument. Then calls the Walk() method on 10/11 embed(s) and 0/0 field(s) belonging to this TconvexMeshType instance.
func (me *TconvexMeshType) Walk() (err error) {
	if fn := WalkHandlers.TconvexMeshType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_linestripschoicesequencemesh_typeschema_Linestrips_TlinestripsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_trifanschoicesequencemesh_typeschema_Trifans_TtrifansType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_polygonschoicesequencemesh_typeschema_Polygons_TpolygonsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_lineschoicesequencemesh_typeschema_Lines_TlinesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_tristripschoicesequencemesh_typeschema_Tristrips_TtristripsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_verticessequencemesh_typeschema_Vertices_TverticesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_triangleschoicesequencemesh_typeschema_Triangles_TtrianglesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_sourcesequencechoicesequenceanimation_typeschema_Source_TsourceType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_polylistchoicesequencemesh_typeschema_Polylist_TpolylistType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_convex_meshchoicesequencegeometry_typeschema_ConvexMesh_TconvexMeshType_ struct {
	//	The geometry element may contain only
	//	one mesh or convex_mesh.
	ConvexMesh *TconvexMeshType `xml:"http://www.collada.org/2008/03/COLLADASchema convex_mesh"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_convex_meshchoicesequencegeometry_typeschema_ConvexMesh_TconvexMeshType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_convex_meshchoicesequencegeometry_typeschema_ConvexMesh_TconvexMeshType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_convex_meshchoicesequencegeometry_typeschema_ConvexMesh_TconvexMeshType_ instance.
func (me *XsdGoPkgHasElem_convex_meshchoicesequencegeometry_typeschema_ConvexMesh_TconvexMeshType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_convex_meshchoicesequencegeometry_typeschema_ConvexMesh_TconvexMeshType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ConvexMesh.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The brep element contains the complete topological     description of a static structure. There are also the     corresponding geometrical descriptions of the vertices,     edges and faces.
//	This element holds all the pcurves that are needed for
//	the geometrical description of the topological entities
//	edges on the surfaces they lie on.
//	A curveType defines the attributes of a curve element.     With rotate and translate the surface can be positioned     to its right location.
//	Describes a parabola in 3D space. A parabola is defined     by its focal length (i.e. the distance between its focus     and its apex) and is positioned in space with a     coordinate system where: - the origin is     the apex of the parabola, - the "X Axis"     defines the axis of symmetry; the parabola is on the     positive side of this axis, - the origin, "X     Direction" and "Y Direction" define the     plane of the parabola. This coordinate system is the     local coordinate system of the parabola. The "main     Direction" of this coordinate system is a vector     normal to the plane of the parabola. The axis, of which     the origin and unit vector are respectively the origin     and "main Direction" of the local coordinate     system, is termed the "Axis" or "main     Axis" of the parabola. The "main     Direction" of the local coordinate system gives an     explicit orientation to the parabola, determining the     direction in which the parameter increases along the     parabola. The Geom_Parabola parabola is parameterized as     follows: P(U) = O + U*U/(4.*F)*XDir + U*YDir where: - P     is the point of parameter U, - O, XDir and YDir are     respectively the origin, "X <br>     Direction" and "Y Direction" of its local     coordinate system, - F is the focal length of the     parabola. The parameter of the parabola is therefore its     Y coordinate in the local coordinate system, with the     "X <br> Axis" of the local coordinate     system defining the origin of the parameter. The     parameter range is ] -infinite, +infinite [.
type XsdGoPkgHasElem_focalsequenceparabola_typeschema_Focal_TfloatType_ struct {
	Focal TfloatType `xml:"http://www.collada.org/2008/03/COLLADASchema focal"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_focalsequenceparabola_typeschema_Focal_TfloatType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_focalsequenceparabola_typeschema_Focal_TfloatType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_focalsequenceparabola_typeschema_Focal_TfloatType_ instance.
func (me *XsdGoPkgHasElem_focalsequenceparabola_typeschema_Focal_TfloatType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_focalsequenceparabola_typeschema_Focal_TfloatType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TparabolaType struct {
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	XsdGoPkgHasElem_focalsequenceparabola_typeschema_Focal_TfloatType_
}

//	If the WalkHandlers.TparabolaType function is not nil (ie. was set by outside code), calls it with this TparabolaType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TparabolaType instance.
func (me *TparabolaType) Walk() (err error) {
	if fn := WalkHandlers.TparabolaType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_focalsequenceparabola_typeschema_Focal_TfloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_parabolachoicesequencecurve_typeschema_Parabola_TparabolaType_ struct {
	Parabola *TparabolaType `xml:"http://www.collada.org/2008/03/COLLADASchema parabola"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_parabolachoicesequencecurve_typeschema_Parabola_TparabolaType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_parabolachoicesequencecurve_typeschema_Parabola_TparabolaType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_parabolachoicesequencecurve_typeschema_Parabola_TparabolaType_ instance.
func (me *XsdGoPkgHasElem_parabolachoicesequencecurve_typeschema_Parabola_TparabolaType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_parabolachoicesequencecurve_typeschema_Parabola_TparabolaType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Parabola.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TorientType struct {
	XsdGoPkgValue Tfloat4Type `xml:",chardata"`
}

//	If the WalkHandlers.TorientType function is not nil (ie. was set by outside code), calls it with this TorientType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this TorientType instance.
func (me *TorientType) Walk() (err error) {
	if fn := WalkHandlers.TorientType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the value of its XsdGoPkgValue field as a TlistOfFloatsType (which Tfloat4Type is just aliasing).
func (me *TorientType) ToTlistOfFloatsType() TlistOfFloatsType {
	return me.XsdGoPkgValue.ToTlistOfFloatsType()
}

//	Returns the value of its XsdGoPkgValue field as a xsdt.String (which Tfloat4Type is just aliasing).
func (me *TorientType) ToXsdtString() xsdt.String {
	return me.XsdGoPkgValue.ToTlistOfFloatsType().ToXsdtString()
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TorientType) ToTfloat4Type() Tfloat4Type { return me.XsdGoPkgValue }

type XsdGoPkgHasElems_orientsequencecurve_typeschema_Orient_TorientType_ struct {
	Orients []*TorientType `xml:"http://www.collada.org/2008/03/COLLADASchema orient"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_orientsequencecurve_typeschema_Orient_TorientType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_orientsequencecurve_typeschema_Orient_TorientType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_orientsequencecurve_typeschema_Orient_TorientType_ instance.
func (me *XsdGoPkgHasElems_orientsequencecurve_typeschema_Orient_TorientType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_orientsequencecurve_typeschema_Orient_TorientType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Orients {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Describes a branch of a hyperbola in 3D space. A     hyperbola is defined by its major and minor radii and,     as with any conic curve, is positioned in space with a     right-handed coordinate system where: - the origin is     the center of the hyperbola, - the "X Direction" defines     the major axis, and - the "Y Direction" defines the     minor axis. The origin, "X Direction" and "Y Direction"     of this coordinate system define the plane of the     hyperbola. The coordinate system is the local coordinate     system of the hyperbola. The branch of the hyperbola     described is the one located on the positive side of the     major axis. The "main Direction" of the local coordinate     system is a vector normal to the plane of the hyperbola.     The axis, of which the origin and unit vector are     respectively the origin and "main Direction" of the     local coordinate system, is termed the "Axis" or "main     Axis" of the hyperbola. The "main Direction" of the     local coordinate system gives an explicit orientation to     the hyperbola, determining the direction in which the     parameter increases along the hyperbola. The     Geom_Hyperbola hyperbola is parameterized as follows:     P(U) = O + MajRad*Cosh(U)*XDir + MinRad*Sinh(U)*YDir,     where: - P is the point of parameter U, - O, XDir and     YDir are respectively the origin, "X Direction" and "Y     Direction" of its local coordinate system, - MajRad and     MinRad are the major and minor radii of the hyperbola.     The "X Axis" of the local coordinate system therefore     defines the origin of the parameter of the hyperbola.     The parameter range is ] -infinite, +infinite [.
type ThyperbolaType struct {
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	XsdGoPkgHasElem_radiussequencecylinder_typeschema_Radius_Tfloat2Type_
}

//	If the WalkHandlers.ThyperbolaType function is not nil (ie. was set by outside code), calls it with this ThyperbolaType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this ThyperbolaType instance.
func (me *ThyperbolaType) Walk() (err error) {
	if fn := WalkHandlers.ThyperbolaType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_radiussequencecylinder_typeschema_Radius_Tfloat2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_hyperbolachoicesequencecurve_typeschema_Hyperbola_ThyperbolaType_ struct {
	Hyperbola *ThyperbolaType `xml:"http://www.collada.org/2008/03/COLLADASchema hyperbola"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_hyperbolachoicesequencecurve_typeschema_Hyperbola_ThyperbolaType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_hyperbolachoicesequencecurve_typeschema_Hyperbola_ThyperbolaType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_hyperbolachoicesequencecurve_typeschema_Hyperbola_ThyperbolaType_ instance.
func (me *XsdGoPkgHasElem_hyperbolachoicesequencecurve_typeschema_Hyperbola_ThyperbolaType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_hyperbolachoicesequencecurve_typeschema_Hyperbola_ThyperbolaType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Hyperbola.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Describes an infinite line. A line is defined and     positioned in space with an axis which gives it an     origin and a unit vector. The Geom_Line line is     parameterized: P (U) = O + U*Dir, where: - P is the     point of parameter U, - O is the origin and Dir the unit     vector of its positioning axis. The parameter range is ]     -infinite, +infinite [. The orientation of the line is     given by the unit vector of its positioning axis.
type XsdGoPkgHasElem_originsequenceline_typeschema_Origin_Tfloat3Type_ struct {
	Origin Tfloat3Type `xml:"http://www.collada.org/2008/03/COLLADASchema origin"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_originsequenceline_typeschema_Origin_Tfloat3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_originsequenceline_typeschema_Origin_Tfloat3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_originsequenceline_typeschema_Origin_Tfloat3Type_ instance.
func (me *XsdGoPkgHasElem_originsequenceline_typeschema_Origin_Tfloat3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_originsequenceline_typeschema_Origin_Tfloat3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_directionsequenceline_typeschema_Direction_Tfloat3Type_ struct {
	Direction Tfloat3Type `xml:"http://www.collada.org/2008/03/COLLADASchema direction"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_directionsequenceline_typeschema_Direction_Tfloat3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_directionsequenceline_typeschema_Direction_Tfloat3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_directionsequenceline_typeschema_Direction_Tfloat3Type_ instance.
func (me *XsdGoPkgHasElem_directionsequenceline_typeschema_Direction_Tfloat3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_directionsequenceline_typeschema_Direction_Tfloat3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TlineType struct {
	XsdGoPkgHasElem_originsequenceline_typeschema_Origin_Tfloat3Type_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	XsdGoPkgHasElem_directionsequenceline_typeschema_Direction_Tfloat3Type_
}

//	If the WalkHandlers.TlineType function is not nil (ie. was set by outside code), calls it with this TlineType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TlineType instance.
func (me *TlineType) Walk() (err error) {
	if fn := WalkHandlers.TlineType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_directionsequenceline_typeschema_Direction_Tfloat3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_originsequenceline_typeschema_Origin_Tfloat3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_linechoicesequencecurve_typeschema_Line_TlineType_ struct {
	Line *TlineType `xml:"http://www.collada.org/2008/03/COLLADASchema line"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_linechoicesequencecurve_typeschema_Line_TlineType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_linechoicesequencecurve_typeschema_Line_TlineType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_linechoicesequencecurve_typeschema_Line_TlineType_ instance.
func (me *XsdGoPkgHasElem_linechoicesequencecurve_typeschema_Line_TlineType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_linechoicesequencecurve_typeschema_Line_TlineType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Line.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The control vertices element  must occur  exactly one time. It is used to describe the CVs of the spline.
type TxsdNurbsTypeSequenceControlVertices struct {
	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The input element must occur at least one time. These inputs are local inputs.
	XsdGoPkgHasElems_inputsequencesampler_typeschema_Input_TinputLocalType_
}

//	If the WalkHandlers.TxsdNurbsTypeSequenceControlVertices function is not nil (ie. was set by outside code), calls it with this TxsdNurbsTypeSequenceControlVertices instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdNurbsTypeSequenceControlVertices instance.
func (me *TxsdNurbsTypeSequenceControlVertices) Walk() (err error) {
	if fn := WalkHandlers.TxsdNurbsTypeSequenceControlVertices; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_inputsequencesampler_typeschema_Input_TinputLocalType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_control_verticessequencenurbs_typeschema_ControlVertices_TxsdNurbsTypeSequenceControlVertices_ struct {
	//	The control vertices element  must occur  exactly one time. It is used to describe the CVs of the spline.
	ControlVertices *TxsdNurbsTypeSequenceControlVertices `xml:"http://www.collada.org/2008/03/COLLADASchema control_vertices"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_control_verticessequencenurbs_typeschema_ControlVertices_TxsdNurbsTypeSequenceControlVertices_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_control_verticessequencenurbs_typeschema_ControlVertices_TxsdNurbsTypeSequenceControlVertices_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_control_verticessequencenurbs_typeschema_ControlVertices_TxsdNurbsTypeSequenceControlVertices_ instance.
func (me *XsdGoPkgHasElem_control_verticessequencenurbs_typeschema_ControlVertices_TxsdNurbsTypeSequenceControlVertices_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_control_verticessequencenurbs_typeschema_ControlVertices_TxsdNurbsTypeSequenceControlVertices_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ControlVertices.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Degree_TuintType_ struct {
	Degree TuintType `xml:"http://www.collada.org/2008/03/COLLADASchema degree,attr"`
}

type TnurbsType struct {
	//	The control vertices element  must occur  exactly one time. It is used to describe the CVs of the spline.
	XsdGoPkgHasElem_control_verticessequencenurbs_typeschema_ControlVertices_TxsdNurbsTypeSequenceControlVertices_

	XsdGoPkgHasElems_sourcesequencechoicesequenceanimation_typeschema_Source_TsourceType_

	XsdGoPkgHasAttr_Closed_XsdtBoolean_False

	XsdGoPkgHasAttr_Degree_TuintType_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_
}

//	If the WalkHandlers.TnurbsType function is not nil (ie. was set by outside code), calls it with this TnurbsType instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TnurbsType instance.
func (me *TnurbsType) Walk() (err error) {
	if fn := WalkHandlers.TnurbsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_control_verticessequencenurbs_typeschema_ControlVertices_TxsdNurbsTypeSequenceControlVertices_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_sourcesequencechoicesequenceanimation_typeschema_Source_TsourceType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_nurbschoicesequencecurve_typeschema_Nurbs_TnurbsType_ struct {
	Nurbs *TnurbsType `xml:"http://www.collada.org/2008/03/COLLADASchema nurbs"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_nurbschoicesequencecurve_typeschema_Nurbs_TnurbsType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_nurbschoicesequencecurve_typeschema_Nurbs_TnurbsType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_nurbschoicesequencecurve_typeschema_Nurbs_TnurbsType_ instance.
func (me *XsdGoPkgHasElem_nurbschoicesequencecurve_typeschema_Nurbs_TnurbsType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_nurbschoicesequencecurve_typeschema_Nurbs_TnurbsType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Nurbs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type ToriginType struct {
	XsdGoPkgValue Tfloat3Type `xml:",chardata"`
}

//	Returns the value of its XsdGoPkgValue field as a xsdt.String (which Tfloat3Type is just aliasing).
func (me *ToriginType) ToXsdtString() xsdt.String {
	return me.XsdGoPkgValue.ToTlistOfFloatsType().ToXsdtString()
}

//	If the WalkHandlers.ToriginType function is not nil (ie. was set by outside code), calls it with this ToriginType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this ToriginType instance.
func (me *ToriginType) Walk() (err error) {
	if fn := WalkHandlers.ToriginType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *ToriginType) ToTfloat3Type() Tfloat3Type { return me.XsdGoPkgValue }

//	Returns the value of its XsdGoPkgValue field as a TlistOfFloatsType (which Tfloat3Type is just aliasing).
func (me *ToriginType) ToTlistOfFloatsType() TlistOfFloatsType {
	return me.XsdGoPkgValue.ToTlistOfFloatsType()
}

type XsdGoPkgHasElem_originsequencecurve_typeschema_Origin_ToriginType_ struct {
	Origin *ToriginType `xml:"http://www.collada.org/2008/03/COLLADASchema origin"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_originsequencecurve_typeschema_Origin_ToriginType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_originsequencecurve_typeschema_Origin_ToriginType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_originsequencecurve_typeschema_Origin_ToriginType_ instance.
func (me *XsdGoPkgHasElem_originsequencecurve_typeschema_Origin_ToriginType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_originsequencecurve_typeschema_Origin_ToriginType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Origin.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Describes an ellipse in 3D space. An ellipse is defined     by its major and minor radii and, as with any conic     curve, is positioned in space with a right-handed     coordinate system where: - the origin is the center of     the ellipse, - the "X Direction" defines the     major axis, and - the "Y Direction" defines     the minor axis. The origin, "X Direction" and     "Y Direction" of this coordinate system define     the plane of the ellipse. The coordinate system is the     local coordinate system of the ellipse. The "main     Direction" of this coordinate system is the vector     normal to the plane of the ellipse. The axis, of which     the origin and unit vector are respectively the origin     and "main Direction" of the local coordinate     system, is termed the "Axis" or "main     Axis" of the ellipse. The "main     Direction" of the local coordinate system gives an     explicit orientation to the ellipse (definition of the     trigonometric sense), determining the direction in which     the parameter increases along the ellipse. The     Geom_Ellipse ellipse is parameterized by an angle: P(U)     = O + MajorRad*Cos(U)*XDir + MinorRad*Sin(U)*YDir where:     - P is the point of parameter U, - O, XDir and YDir are     respectively the origin, "X <br>     Direction" and "Y Direction" of its local     coordinate system, - MajorRad and MinorRad are the major     and minor radii of the ellipse. The "X Axis"     of the local coordinate system therefore defines the     origin of the parameter of the ellipse. An ellipse is a     closed and periodic curve. The period is 2.*Pi and the     parameter range is [ 0, 2.*Pi [.
type TellipseType struct {
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	XsdGoPkgHasElem_radiussequencecylinder_typeschema_Radius_Tfloat2Type_
}

//	If the WalkHandlers.TellipseType function is not nil (ie. was set by outside code), calls it with this TellipseType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TellipseType instance.
func (me *TellipseType) Walk() (err error) {
	if fn := WalkHandlers.TellipseType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_radiussequencecylinder_typeschema_Radius_Tfloat2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ellipsechoicesequencecurve_typeschema_Ellipse_TellipseType_ struct {
	Ellipse *TellipseType `xml:"http://www.collada.org/2008/03/COLLADASchema ellipse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ellipsechoicesequencecurve_typeschema_Ellipse_TellipseType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ellipsechoicesequencecurve_typeschema_Ellipse_TellipseType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ellipsechoicesequencecurve_typeschema_Ellipse_TellipseType_ instance.
func (me *XsdGoPkgHasElem_ellipsechoicesequencecurve_typeschema_Ellipse_TellipseType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ellipsechoicesequencecurve_typeschema_Ellipse_TellipseType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ellipse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Describes a circle. A circle is defined by its radius     and, as with any conic curve, is positioned in space     with a right-handed coordinate system where: - the     origin is the center of the circle, and - the origin, "X     Direction" and "Y Direction" define the plane of the     circle. This coordinate system is the local coordinate     system of the circle. The "main Direction" of this     coordinate system is the vector normal to the plane of     the circle. The axis, of which the origin and unit     vector are respectively the origin and "main Direction"     of the local coordinate system, is termed the "Axis" or     "main Axis" of the circle. The "main Direction" of the     local coordinate system gives an explicit orientation to     the circle (definition of the trigonometric sense),     determining the direction in which the parameter     increases along the circle. The Geom_Circle circle is     parameterized by an angle: P(U) = O + R*Cos(U)*XDir +     R*Sin(U)*YDir, where: - P is the point of parameter U, -     O, XDir and YDir are respectively the origin, "X     Direction" and "Y Direction" of its local coordinate     system, - R is the radius of the circle. The "X     Axis" of the local coordinate system therefore     defines the origin of the parameter of the circle.     The parameter is the angle with this "X Direction".     A circle is a closed and periodic curve. The period     is 2.*Pi and the parameter range is [ 0, 2.*Pi [.
type TcircleType struct {
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	XsdGoPkgHasElem_radiussequencesphere_typeschema_Radius_TfloatType_
}

//	If the WalkHandlers.TcircleType function is not nil (ie. was set by outside code), calls it with this TcircleType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TcircleType instance.
func (me *TcircleType) Walk() (err error) {
	if fn := WalkHandlers.TcircleType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_radiussequencesphere_typeschema_Radius_TfloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_circlechoicesequencecurve_typeschema_Circle_TcircleType_ struct {
	Circle *TcircleType `xml:"http://www.collada.org/2008/03/COLLADASchema circle"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_circlechoicesequencecurve_typeschema_Circle_TcircleType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_circlechoicesequencecurve_typeschema_Circle_TcircleType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_circlechoicesequencecurve_typeschema_Circle_TcircleType_ instance.
func (me *XsdGoPkgHasElem_circlechoicesequencecurve_typeschema_Circle_TcircleType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_circlechoicesequencecurve_typeschema_Circle_TcircleType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Circle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcurveType struct {
	XsdGoPkgHasElem_ellipsechoicesequencecurve_typeschema_Ellipse_TellipseType_

	XsdGoPkgHasElem_circlechoicesequencecurve_typeschema_Circle_TcircleType_

	XsdGoPkgHasElem_parabolachoicesequencecurve_typeschema_Parabola_TparabolaType_

	XsdGoPkgHasElems_orientsequencecurve_typeschema_Orient_TorientType_

	XsdGoPkgHasElem_hyperbolachoicesequencecurve_typeschema_Hyperbola_ThyperbolaType_

	//	The name of a curve.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The id of a curve.
	XsdGoPkgHasAttr_Sid_TsidType_

	XsdGoPkgHasElem_linechoicesequencecurve_typeschema_Line_TlineType_

	XsdGoPkgHasElem_nurbschoicesequencecurve_typeschema_Nurbs_TnurbsType_

	XsdGoPkgHasElem_originsequencecurve_typeschema_Origin_ToriginType_
}

//	If the WalkHandlers.TcurveType function is not nil (ie. was set by outside code), calls it with this TcurveType instance as the single argument. Then calls the Walk() method on 8/10 embed(s) and 0/0 field(s) belonging to this TcurveType instance.
func (me *TcurveType) Walk() (err error) {
	if fn := WalkHandlers.TcurveType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_hyperbolachoicesequencecurve_typeschema_Hyperbola_ThyperbolaType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_linechoicesequencecurve_typeschema_Line_TlineType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_nurbschoicesequencecurve_typeschema_Nurbs_TnurbsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_originsequencecurve_typeschema_Origin_ToriginType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ellipsechoicesequencecurve_typeschema_Ellipse_TellipseType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_circlechoicesequencecurve_typeschema_Circle_TcircleType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_parabolachoicesequencecurve_typeschema_Parabola_TparabolaType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_orientsequencecurve_typeschema_Orient_TorientType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_curvesequencesurface_curves_typeschema_Curve_TcurveType_ struct {
	Curves []*TcurveType `xml:"http://www.collada.org/2008/03/COLLADASchema curve"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_curvesequencesurface_curves_typeschema_Curve_TcurveType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_curvesequencesurface_curves_typeschema_Curve_TcurveType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_curvesequencesurface_curves_typeschema_Curve_TcurveType_ instance.
func (me *XsdGoPkgHasElems_curvesequencesurface_curves_typeschema_Curve_TcurveType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_curvesequencesurface_curves_typeschema_Curve_TcurveType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Curves {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TsurfaceCurvesType struct {
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	XsdGoPkgHasElems_curvesequencesurface_curves_typeschema_Curve_TcurveType_
}

//	If the WalkHandlers.TsurfaceCurvesType function is not nil (ie. was set by outside code), calls it with this TsurfaceCurvesType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TsurfaceCurvesType instance.
func (me *TsurfaceCurvesType) Walk() (err error) {
	if fn := WalkHandlers.TsurfaceCurvesType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_curvesequencesurface_curves_typeschema_Curve_TcurveType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_surface_curvessequencebrep_typeschema_SurfaceCurves_TsurfaceCurvesType_ struct {
	SurfaceCurves *TsurfaceCurvesType `xml:"http://www.collada.org/2008/03/COLLADASchema surface_curves"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_surface_curvessequencebrep_typeschema_SurfaceCurves_TsurfaceCurvesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_surface_curvessequencebrep_typeschema_SurfaceCurves_TsurfaceCurvesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_surface_curvessequencebrep_typeschema_SurfaceCurves_TsurfaceCurvesType_ instance.
func (me *XsdGoPkgHasElem_surface_curvessequencebrep_typeschema_SurfaceCurves_TsurfaceCurvesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_surface_curvessequencebrep_typeschema_SurfaceCurves_TsurfaceCurvesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SurfaceCurves.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	This element defines all the faces of the
//	brep structure.
//	This element defines all the faces used in the brep     structure.
type TfacesType struct {
	//	Two input elements are needed to define a
	//	face, one for referencing the surface and
	//	one for referencing the wires themselfs. The
	//	third is needed for the orientation of each
	//	wires.
	XsdGoPkgHasElems_inputsequencevertex_weightssequenceskin_typeschema_Input_TinputLocalOffsetType_

	XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskin_typeschema_Vcount_TlistOfUintsType_

	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The indices for referencing the surface and
	//	wires for each face.
	XsdGoPkgHasElem_psequencetriangles_typeschema_P_TpType_

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_Count_TuintType_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_
}

//	If the WalkHandlers.TfacesType function is not nil (ie. was set by outside code), calls it with this TfacesType instance as the single argument. Then calls the Walk() method on 4/7 embed(s) and 0/0 field(s) belonging to this TfacesType instance.
func (me *TfacesType) Walk() (err error) {
	if fn := WalkHandlers.TfacesType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_inputsequencevertex_weightssequenceskin_typeschema_Input_TinputLocalOffsetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskin_typeschema_Vcount_TlistOfUintsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_psequencetriangles_typeschema_P_TpType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_facessequencebrep_typeschema_Faces_TfacesType_ struct {
	//	This element defines all the faces of the
	//	brep structure.
	Faces *TfacesType `xml:"http://www.collada.org/2008/03/COLLADASchema faces"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_facessequencebrep_typeschema_Faces_TfacesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_facessequencebrep_typeschema_Faces_TfacesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_facessequencebrep_typeschema_Faces_TfacesType_ instance.
func (me *XsdGoPkgHasElem_facessequencebrep_typeschema_Faces_TfacesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_facessequencebrep_typeschema_Faces_TfacesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Faces.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The curves element holds all the curves that
//	are needed for the brep structure. Here are
//	the curves that describes the kind of an
//	edge, but here are also the curves that are
//	needed to create a extrusion for a surface.
//	This element is needed, if the edges element
//	is present.
//	This element holds all the curves that are needed for
//	the geometrical description of the topological entities
//	edges.
type TcurvesType struct {
	XsdGoPkgHasElems_curvesequencesurface_curves_typeschema_Curve_TcurveType_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_
}

//	If the WalkHandlers.TcurvesType function is not nil (ie. was set by outside code), calls it with this TcurvesType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TcurvesType instance.
func (me *TcurvesType) Walk() (err error) {
	if fn := WalkHandlers.TcurvesType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_curvesequencesurface_curves_typeschema_Curve_TcurveType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_curvessequencebrep_typeschema_Curves_TcurvesType_ struct {
	//	The curves element holds all the curves that
	//	are needed for the brep structure. Here are
	//	the curves that describes the kind of an
	//	edge, but here are also the curves that are
	//	needed to create a extrusion for a surface.
	//	This element is needed, if the edges element
	//	is present.
	Curves *TcurvesType `xml:"http://www.collada.org/2008/03/COLLADASchema curves"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_curvessequencebrep_typeschema_Curves_TcurvesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_curvessequencebrep_typeschema_Curves_TcurvesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_curvessequencebrep_typeschema_Curves_TcurvesType_ instance.
func (me *XsdGoPkgHasElem_curvessequencebrep_typeschema_Curves_TcurvesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_curvessequencebrep_typeschema_Curves_TcurvesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Curves.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	This element defines all the shells of the
//	brep structure.
//	This element defines all the shells used in the brep     structure.
type TshellsType struct {
	XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskin_typeschema_Vcount_TlistOfUintsType_

	XsdGoPkgHasAttr_Count_TuintType_

	//	One input elements is needed to define a
	//	shell by its faces. The second is need for
	//	the orientation of the faces
	XsdGoPkgHasElems_inputsequencevertex_weightssequenceskin_typeschema_Input_TinputLocalOffsetType_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The indices of the faces for each shell.
	XsdGoPkgHasElem_psequencetriangles_typeschema_P_TpType_
}

//	If the WalkHandlers.TshellsType function is not nil (ie. was set by outside code), calls it with this TshellsType instance as the single argument. Then calls the Walk() method on 4/7 embed(s) and 0/0 field(s) belonging to this TshellsType instance.
func (me *TshellsType) Walk() (err error) {
	if fn := WalkHandlers.TshellsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_inputsequencevertex_weightssequenceskin_typeschema_Input_TinputLocalOffsetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_psequencetriangles_typeschema_P_TpType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskin_typeschema_Vcount_TlistOfUintsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_shellssequencebrep_typeschema_Shells_TshellsType_ struct {
	//	This element defines all the shells of the
	//	brep structure.
	Shells *TshellsType `xml:"http://www.collada.org/2008/03/COLLADASchema shells"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_shellssequencebrep_typeschema_Shells_TshellsType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_shellssequencebrep_typeschema_Shells_TshellsType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_shellssequencebrep_typeschema_Shells_TshellsType_ instance.
func (me *XsdGoPkgHasElem_shellssequencebrep_typeschema_Shells_TshellsType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_shellssequencebrep_typeschema_Shells_TshellsType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Shells.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	This element defines all the solids of the
//	brep structure.
//	This element defines all the solids used in the brep     structure.
type TsolidsType struct {
	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The indices of the shells for each solid.
	XsdGoPkgHasElem_psequencetriangles_typeschema_P_TpType_

	XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskin_typeschema_Vcount_TlistOfUintsType_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	One input elements is needed to define a
	//	solid by its shells. The second is need fo
	//	the orientation of the shells.
	XsdGoPkgHasElems_inputsequencevertex_weightssequenceskin_typeschema_Input_TinputLocalOffsetType_

	XsdGoPkgHasAttr_Count_TuintType_
}

//	If the WalkHandlers.TsolidsType function is not nil (ie. was set by outside code), calls it with this TsolidsType instance as the single argument. Then calls the Walk() method on 4/7 embed(s) and 0/0 field(s) belonging to this TsolidsType instance.
func (me *TsolidsType) Walk() (err error) {
	if fn := WalkHandlers.TsolidsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskin_typeschema_Vcount_TlistOfUintsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_inputsequencevertex_weightssequenceskin_typeschema_Input_TinputLocalOffsetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_psequencetriangles_typeschema_P_TpType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_solidssequencebrep_typeschema_Solids_TsolidsType_ struct {
	//	This element defines all the solids of the
	//	brep structure.
	Solids *TsolidsType `xml:"http://www.collada.org/2008/03/COLLADASchema solids"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_solidssequencebrep_typeschema_Solids_TsolidsType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_solidssequencebrep_typeschema_Solids_TsolidsType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_solidssequencebrep_typeschema_Solids_TsolidsType_ instance.
func (me *XsdGoPkgHasElem_solidssequencebrep_typeschema_Solids_TsolidsType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_solidssequencebrep_typeschema_Solids_TsolidsType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Solids.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The surfaces element holds all the surfaces
//	that are needed for the brep structure. Here
//	are the surfaces that describes the kind of
//	a face. This element is needed, if the faces
//	element is present.
//	A surfaceType defines the attributes of a surface     element. With rotate and translate the surface can be     positioned to its right location.
type XsdGoPkgHasElem_anglesequencecone_typeschema_Angle_XsdtFloat_ struct {
	Angle xsdt.Float `xml:"http://www.collada.org/2008/03/COLLADASchema angle"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_anglesequencecone_typeschema_Angle_XsdtFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_anglesequencecone_typeschema_Angle_XsdtFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_anglesequencecone_typeschema_Angle_XsdtFloat_ instance.
func (me *XsdGoPkgHasElem_anglesequencecone_typeschema_Angle_XsdtFloat_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_anglesequencecone_typeschema_Angle_XsdtFloat_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TconeType struct {
	XsdGoPkgHasElem_radiussequencesphere_typeschema_Radius_TfloatType_

	XsdGoPkgHasElem_anglesequencecone_typeschema_Angle_XsdtFloat_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_
}

//	If the WalkHandlers.TconeType function is not nil (ie. was set by outside code), calls it with this TconeType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TconeType instance.
func (me *TconeType) Walk() (err error) {
	if fn := WalkHandlers.TconeType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_anglesequencecone_typeschema_Angle_XsdtFloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_radiussequencesphere_typeschema_Radius_TfloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_conechoicesequencesurface_typeschema_Cone_TconeType_ struct {
	Cone *TconeType `xml:"http://www.collada.org/2008/03/COLLADASchema cone"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_conechoicesequencesurface_typeschema_Cone_TconeType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_conechoicesequencesurface_typeschema_Cone_TconeType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_conechoicesequencesurface_typeschema_Cone_TconeType_ instance.
func (me *XsdGoPkgHasElem_conechoicesequencesurface_typeschema_Cone_TconeType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_conechoicesequencesurface_typeschema_Cone_TconeType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Cone.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSurfaceTypeSequenceChoiceCylinder struct {
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	XsdGoPkgHasElem_radiussequencesphere_typeschema_Radius_TfloatType_
}

//	If the WalkHandlers.TxsdSurfaceTypeSequenceChoiceCylinder function is not nil (ie. was set by outside code), calls it with this TxsdSurfaceTypeSequenceChoiceCylinder instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdSurfaceTypeSequenceChoiceCylinder instance.
func (me *TxsdSurfaceTypeSequenceChoiceCylinder) Walk() (err error) {
	if fn := WalkHandlers.TxsdSurfaceTypeSequenceChoiceCylinder; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_radiussequencesphere_typeschema_Radius_TfloatType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_cylinderchoicesequencesurface_typeschema_Cylinder_TxsdSurfaceTypeSequenceChoiceCylinder_ struct {
	Cylinder *TxsdSurfaceTypeSequenceChoiceCylinder `xml:"http://www.collada.org/2008/03/COLLADASchema cylinder"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_cylinderchoicesequencesurface_typeschema_Cylinder_TxsdSurfaceTypeSequenceChoiceCylinder_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_cylinderchoicesequencesurface_typeschema_Cylinder_TxsdSurfaceTypeSequenceChoiceCylinder_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_cylinderchoicesequencesurface_typeschema_Cylinder_TxsdSurfaceTypeSequenceChoiceCylinder_ instance.
func (me *XsdGoPkgHasElem_cylinderchoicesequencesurface_typeschema_Cylinder_TxsdSurfaceTypeSequenceChoiceCylinder_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_cylinderchoicesequencesurface_typeschema_Cylinder_TxsdSurfaceTypeSequenceChoiceCylinder_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Cylinder.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtorusType struct {
	XsdGoPkgHasElem_radiussequencecylinder_typeschema_Radius_Tfloat2Type_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_
}

//	If the WalkHandlers.TtorusType function is not nil (ie. was set by outside code), calls it with this TtorusType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TtorusType instance.
func (me *TtorusType) Walk() (err error) {
	if fn := WalkHandlers.TtorusType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_radiussequencecylinder_typeschema_Radius_Tfloat2Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_toruschoicesequencesurface_typeschema_Torus_TtorusType_ struct {
	Torus *TtorusType `xml:"http://www.collada.org/2008/03/COLLADASchema torus"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_toruschoicesequencesurface_typeschema_Torus_TtorusType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_toruschoicesequencesurface_typeschema_Torus_TtorusType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_toruschoicesequencesurface_typeschema_Torus_TtorusType_ instance.
func (me *XsdGoPkgHasElem_toruschoicesequencesurface_typeschema_Torus_TtorusType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_toruschoicesequencesurface_typeschema_Torus_TtorusType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Torus.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Describes a surface of linear extrusion ("extruded     surface"), e.g. a generalized cylinder. Such a surface     is obtained by sweeping a curve (called the "extruded     curve" or "basis") in a given direction (referred to as     the "direction of extrusion" and defined by a unit     vector). The u parameter is along the extruded curve.     The v parameter is along the direction of extrusion. The     parameter range for the u parameter is defined by the     reference curve. The parameter range for the v parameter     is ] - infinity, + infinity [. The position of the curve     gives the origin of the v parameter. The form of a     surface of linear extrusion is generally a ruled     surface. It can be: - a cylindrical surface, if the     extruded curve is a circle, or a trimmed circle, with an     axis parallel to the direction of extrusion, or - a     planar surface, if the extruded curve is a line.
type XsdGoPkgHasElem_curvesequenceswept_surface_typeschema_Curve_TcurveType_ struct {
	Curve *TcurveType `xml:"http://www.collada.org/2008/03/COLLADASchema curve"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_curvesequenceswept_surface_typeschema_Curve_TcurveType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_curvesequenceswept_surface_typeschema_Curve_TcurveType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_curvesequenceswept_surface_typeschema_Curve_TcurveType_ instance.
func (me *XsdGoPkgHasElem_curvesequenceswept_surface_typeschema_Curve_TcurveType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_curvesequenceswept_surface_typeschema_Curve_TcurveType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Curve.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_axissequencechoicesequenceswept_surface_typeschema_Axis_Tfloat3Type_ struct {
	Axis Tfloat3Type `xml:"http://www.collada.org/2008/03/COLLADASchema axis"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_axissequencechoicesequenceswept_surface_typeschema_Axis_Tfloat3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_axissequencechoicesequenceswept_surface_typeschema_Axis_Tfloat3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_axissequencechoicesequenceswept_surface_typeschema_Axis_Tfloat3Type_ instance.
func (me *XsdGoPkgHasElem_axissequencechoicesequenceswept_surface_typeschema_Axis_Tfloat3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_axissequencechoicesequenceswept_surface_typeschema_Axis_Tfloat3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TsweptSurfaceType struct {
	XsdGoPkgHasElem_curvesequenceswept_surface_typeschema_Curve_TcurveType_

	XsdGoPkgHasElem_directionsequenceline_typeschema_Direction_Tfloat3Type_

	XsdGoPkgHasElem_axissequencechoicesequenceswept_surface_typeschema_Axis_Tfloat3Type_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	XsdGoPkgHasElem_originsequenceline_typeschema_Origin_Tfloat3Type_
}

//	If the WalkHandlers.TsweptSurfaceType function is not nil (ie. was set by outside code), calls it with this TsweptSurfaceType instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TsweptSurfaceType instance.
func (me *TsweptSurfaceType) Walk() (err error) {
	if fn := WalkHandlers.TsweptSurfaceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_curvesequenceswept_surface_typeschema_Curve_TcurveType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_directionsequenceline_typeschema_Direction_Tfloat3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_axissequencechoicesequenceswept_surface_typeschema_Axis_Tfloat3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_originsequenceline_typeschema_Origin_Tfloat3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_swept_surfacechoicesequencesurface_typeschema_SweptSurface_TsweptSurfaceType_ struct {
	SweptSurface *TsweptSurfaceType `xml:"http://www.collada.org/2008/03/COLLADASchema swept_surface"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_swept_surfacechoicesequencesurface_typeschema_SweptSurface_TsweptSurfaceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_swept_surfacechoicesequencesurface_typeschema_SweptSurface_TsweptSurfaceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_swept_surfacechoicesequencesurface_typeschema_SweptSurface_TsweptSurfaceType_ instance.
func (me *XsdGoPkgHasElem_swept_surfacechoicesequencesurface_typeschema_SweptSurface_TsweptSurfaceType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_swept_surfacechoicesequencesurface_typeschema_SweptSurface_TsweptSurfaceType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SweptSurface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_DegreeU_TuintType_ struct {
	DegreeU TuintType `xml:"http://www.collada.org/2008/03/COLLADASchema degree_u,attr"`
}

type XsdGoPkgHasAttr_ClosedU_XsdtBoolean_False struct {
	ClosedU xsdt.Boolean `xml:"http://www.collada.org/2008/03/COLLADASchema closed_u,attr"`
}

//	Returns the default value for ClosedU -- false
func (me XsdGoPkgHasAttr_ClosedU_XsdtBoolean_False) ClosedUDefault() xsdt.Boolean {
	return xsdt.Boolean(false)
}

type XsdGoPkgHasAttr_ClosedV_XsdtBoolean_False struct {
	ClosedV xsdt.Boolean `xml:"http://www.collada.org/2008/03/COLLADASchema closed_v,attr"`
}

//	Returns the default value for ClosedV -- false
func (me XsdGoPkgHasAttr_ClosedV_XsdtBoolean_False) ClosedVDefault() xsdt.Boolean {
	return xsdt.Boolean(false)
}

//	The control vertices element must occur
//	exactly one time. It is used to describe the
//	CVs of the spline.
type TxsdNurbsSurfaceTypeSequenceControlVertices struct {
	//	The extra element may appear any
	//	number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The input element must occur at
	//	least one time. These inputs are
	//	local inputs.
	XsdGoPkgHasElems_inputsequencesampler_typeschema_Input_TinputLocalType_
}

//	If the WalkHandlers.TxsdNurbsSurfaceTypeSequenceControlVertices function is not nil (ie. was set by outside code), calls it with this TxsdNurbsSurfaceTypeSequenceControlVertices instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdNurbsSurfaceTypeSequenceControlVertices instance.
func (me *TxsdNurbsSurfaceTypeSequenceControlVertices) Walk() (err error) {
	if fn := WalkHandlers.TxsdNurbsSurfaceTypeSequenceControlVertices; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_inputsequencesampler_typeschema_Input_TinputLocalType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_control_verticessequencenurbs_surface_typeschema_ControlVertices_TxsdNurbsSurfaceTypeSequenceControlVertices_ struct {
	//	The control vertices element must occur
	//	exactly one time. It is used to describe the
	//	CVs of the spline.
	ControlVertices *TxsdNurbsSurfaceTypeSequenceControlVertices `xml:"http://www.collada.org/2008/03/COLLADASchema control_vertices"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_control_verticessequencenurbs_surface_typeschema_ControlVertices_TxsdNurbsSurfaceTypeSequenceControlVertices_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_control_verticessequencenurbs_surface_typeschema_ControlVertices_TxsdNurbsSurfaceTypeSequenceControlVertices_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_control_verticessequencenurbs_surface_typeschema_ControlVertices_TxsdNurbsSurfaceTypeSequenceControlVertices_ instance.
func (me *XsdGoPkgHasElem_control_verticessequencenurbs_surface_typeschema_ControlVertices_TxsdNurbsSurfaceTypeSequenceControlVertices_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_control_verticessequencenurbs_surface_typeschema_ControlVertices_TxsdNurbsSurfaceTypeSequenceControlVertices_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ControlVertices.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_DegreeV_TuintType_ struct {
	DegreeV TuintType `xml:"http://www.collada.org/2008/03/COLLADASchema degree_v,attr"`
}

type TnurbsSurfaceType struct {
	XsdGoPkgHasAttr_ClosedV_XsdtBoolean_False

	//	The control vertices element must occur
	//	exactly one time. It is used to describe the
	//	CVs of the spline.
	XsdGoPkgHasElem_control_verticessequencenurbs_surface_typeschema_ControlVertices_TxsdNurbsSurfaceTypeSequenceControlVertices_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	XsdGoPkgHasAttr_DegreeV_TuintType_

	XsdGoPkgHasElems_sourcesequencechoicesequenceanimation_typeschema_Source_TsourceType_

	XsdGoPkgHasAttr_DegreeU_TuintType_

	XsdGoPkgHasAttr_ClosedU_XsdtBoolean_False
}

//	If the WalkHandlers.TnurbsSurfaceType function is not nil (ie. was set by outside code), calls it with this TnurbsSurfaceType instance as the single argument. Then calls the Walk() method on 3/7 embed(s) and 0/0 field(s) belonging to this TnurbsSurfaceType instance.
func (me *TnurbsSurfaceType) Walk() (err error) {
	if fn := WalkHandlers.TnurbsSurfaceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_control_verticessequencenurbs_surface_typeschema_ControlVertices_TxsdNurbsSurfaceTypeSequenceControlVertices_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_sourcesequencechoicesequenceanimation_typeschema_Source_TsourceType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_nurbs_surfacechoicesequencesurface_typeschema_NurbsSurface_TnurbsSurfaceType_ struct {
	NurbsSurface *TnurbsSurfaceType `xml:"http://www.collada.org/2008/03/COLLADASchema nurbs_surface"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_nurbs_surfacechoicesequencesurface_typeschema_NurbsSurface_TnurbsSurfaceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_nurbs_surfacechoicesequencesurface_typeschema_NurbsSurface_TnurbsSurfaceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_nurbs_surfacechoicesequencesurface_typeschema_NurbsSurface_TnurbsSurfaceType_ instance.
func (me *XsdGoPkgHasElem_nurbs_surfacechoicesequencesurface_typeschema_NurbsSurface_TnurbsSurfaceType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_nurbs_surfacechoicesequencesurface_typeschema_NurbsSurface_TnurbsSurfaceType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.NurbsSurface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TsurfaceType struct {
	//	The id of the surface.
	XsdGoPkgHasAttr_Sid_TsidType_

	XsdGoPkgHasElems_orientsequencecurve_typeschema_Orient_TorientType_

	XsdGoPkgHasElem_conechoicesequencesurface_typeschema_Cone_TconeType_

	XsdGoPkgHasElem_cylinderchoicesequencesurface_typeschema_Cylinder_TxsdSurfaceTypeSequenceChoiceCylinder_

	XsdGoPkgHasElem_toruschoicesequencesurface_typeschema_Torus_TtorusType_

	XsdGoPkgHasElem_swept_surfacechoicesequencesurface_typeschema_SweptSurface_TsweptSurfaceType_

	XsdGoPkgHasElem_planechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Plane_TplaneType_

	XsdGoPkgHasElem_nurbs_surfacechoicesequencesurface_typeschema_NurbsSurface_TnurbsSurfaceType_

	XsdGoPkgHasElem_originsequencecurve_typeschema_Origin_ToriginType_

	XsdGoPkgHasElem_spherechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Sphere_TsphereType_

	//	The name of the surface.
	XsdGoPkgHasAttr_Name_XsdtToken_
}

//	If the WalkHandlers.TsurfaceType function is not nil (ie. was set by outside code), calls it with this TsurfaceType instance as the single argument. Then calls the Walk() method on 9/11 embed(s) and 0/0 field(s) belonging to this TsurfaceType instance.
func (me *TsurfaceType) Walk() (err error) {
	if fn := WalkHandlers.TsurfaceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_originsequencecurve_typeschema_Origin_ToriginType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_spherechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Sphere_TsphereType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_orientsequencecurve_typeschema_Orient_TorientType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_conechoicesequencesurface_typeschema_Cone_TconeType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_cylinderchoicesequencesurface_typeschema_Cylinder_TxsdSurfaceTypeSequenceChoiceCylinder_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_toruschoicesequencesurface_typeschema_Torus_TtorusType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_swept_surfacechoicesequencesurface_typeschema_SweptSurface_TsweptSurfaceType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_planechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Plane_TplaneType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_nurbs_surfacechoicesequencesurface_typeschema_NurbsSurface_TnurbsSurfaceType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_surfacesequencesurfaces_typeschema_Surface_TsurfaceType_ struct {
	Surfaces []*TsurfaceType `xml:"http://www.collada.org/2008/03/COLLADASchema surface"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_surfacesequencesurfaces_typeschema_Surface_TsurfaceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_surfacesequencesurfaces_typeschema_Surface_TsurfaceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_surfacesequencesurfaces_typeschema_Surface_TsurfaceType_ instance.
func (me *XsdGoPkgHasElems_surfacesequencesurfaces_typeschema_Surface_TsurfaceType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_surfacesequencesurfaces_typeschema_Surface_TsurfaceType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Surfaces {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TsurfacesType struct {
	XsdGoPkgHasElems_surfacesequencesurfaces_typeschema_Surface_TsurfaceType_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_
}

//	If the WalkHandlers.TsurfacesType function is not nil (ie. was set by outside code), calls it with this TsurfacesType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TsurfacesType instance.
func (me *TsurfacesType) Walk() (err error) {
	if fn := WalkHandlers.TsurfacesType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_surfacesequencesurfaces_typeschema_Surface_TsurfaceType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_surfacessequencebrep_typeschema_Surfaces_TsurfacesType_ struct {
	//	The surfaces element holds all the surfaces
	//	that are needed for the brep structure. Here
	//	are the surfaces that describes the kind of
	//	a face. This element is needed, if the faces
	//	element is present.
	Surfaces *TsurfacesType `xml:"http://www.collada.org/2008/03/COLLADASchema surfaces"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_surfacessequencebrep_typeschema_Surfaces_TsurfacesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_surfacessequencebrep_typeschema_Surfaces_TsurfacesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_surfacessequencebrep_typeschema_Surfaces_TsurfacesType_ instance.
func (me *XsdGoPkgHasElem_surfacessequencebrep_typeschema_Surfaces_TsurfacesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_surfacessequencebrep_typeschema_Surfaces_TsurfacesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Surfaces.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	This element defines all the wires of the
//	brep structure.
//	This element defines all the wires used in the brep     structure.
type TwiresType struct {
	XsdGoPkgHasAttr_Name_XsdtToken_

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The indices of the edges for each wire.
	XsdGoPkgHasElem_psequencetriangles_typeschema_P_TpType_

	XsdGoPkgHasAttr_Count_TuintType_

	XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskin_typeschema_Vcount_TlistOfUintsType_

	//	One input elements is needed to define a
	//	wire by its edges. The second is needed for
	//	orientation of the edges
	XsdGoPkgHasElems_inputsequencevertex_weightssequenceskin_typeschema_Input_TinputLocalOffsetType_
}

//	If the WalkHandlers.TwiresType function is not nil (ie. was set by outside code), calls it with this TwiresType instance as the single argument. Then calls the Walk() method on 4/7 embed(s) and 0/0 field(s) belonging to this TwiresType instance.
func (me *TwiresType) Walk() (err error) {
	if fn := WalkHandlers.TwiresType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_psequencetriangles_typeschema_P_TpType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskin_typeschema_Vcount_TlistOfUintsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_inputsequencevertex_weightssequenceskin_typeschema_Input_TinputLocalOffsetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_wiressequencebrep_typeschema_Wires_TwiresType_ struct {
	//	This element defines all the wires of the
	//	brep structure.
	Wires *TwiresType `xml:"http://www.collada.org/2008/03/COLLADASchema wires"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_wiressequencebrep_typeschema_Wires_TwiresType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_wiressequencebrep_typeschema_Wires_TwiresType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_wiressequencebrep_typeschema_Wires_TwiresType_ instance.
func (me *XsdGoPkgHasElem_wiressequencebrep_typeschema_Wires_TwiresType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_wiressequencebrep_typeschema_Wires_TwiresType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Wires.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TpcurvesType struct {
	XsdGoPkgHasElem_psequencetriangles_typeschema_P_TpType_

	//	The first two inputs are needed to reference
	//	the edge-face-connection. The third input
	//	references the pcurve.
	XsdGoPkgHasElems_inputsequencevertex_weightssequenceskin_typeschema_Input_TinputLocalOffsetType_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskin_typeschema_Vcount_TlistOfUintsType_

	XsdGoPkgHasAttr_Count_TuintType_

	XsdGoPkgHasAttr_Name_XsdtToken_
}

//	If the WalkHandlers.TpcurvesType function is not nil (ie. was set by outside code), calls it with this TpcurvesType instance as the single argument. Then calls the Walk() method on 4/7 embed(s) and 0/0 field(s) belonging to this TpcurvesType instance.
func (me *TpcurvesType) Walk() (err error) {
	if fn := WalkHandlers.TpcurvesType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_psequencetriangles_typeschema_P_TpType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_inputsequencevertex_weightssequenceskin_typeschema_Input_TinputLocalOffsetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskin_typeschema_Vcount_TlistOfUintsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_pcurvessequencebrep_typeschema_Pcurves_TpcurvesType_ struct {
	Pcurves *TpcurvesType `xml:"http://www.collada.org/2008/03/COLLADASchema pcurves"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_pcurvessequencebrep_typeschema_Pcurves_TpcurvesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_pcurvessequencebrep_typeschema_Pcurves_TpcurvesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_pcurvessequencebrep_typeschema_Pcurves_TpcurvesType_ instance.
func (me *XsdGoPkgHasElem_pcurvessequencebrep_typeschema_Pcurves_TpcurvesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_pcurvessequencebrep_typeschema_Pcurves_TpcurvesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Pcurves.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	This element defines all the edges of the
//	brep structure.
//	This element defines all the edges used in the brep     structure.
type XsdGoPkgHasAttr_Count_XsdtInt_ struct {
	Count xsdt.Int `xml:"http://www.collada.org/2008/03/COLLADASchema count,attr"`
}

type TedgesType struct {
	//	The indices for refrencing curves and        vertices.
	XsdGoPkgHasElem_psequencetriangles_typeschema_P_TpType_

	//	Five input elements are needed to define an
	//	edge, one for referencing the curve, two for
	//	referencing the two vertices, one for the
	//	orientation of the first vertex (the second
	//	is the opposite of the first) and one for
	//	the parametric values of the curve.
	XsdGoPkgHasElems_inputsequencevertex_weightssequenceskin_typeschema_Input_TinputLocalOffsetType_

	XsdGoPkgHasAttr_Count_XsdtInt_

	XsdGoPkgHasAttr_Name_XsdtToken_

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_
}

//	If the WalkHandlers.TedgesType function is not nil (ie. was set by outside code), calls it with this TedgesType instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TedgesType instance.
func (me *TedgesType) Walk() (err error) {
	if fn := WalkHandlers.TedgesType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_psequencetriangles_typeschema_P_TpType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_inputsequencevertex_weightssequenceskin_typeschema_Input_TinputLocalOffsetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_edgessequencebrep_typeschema_Edges_TedgesType_ struct {
	//	This element defines all the edges of the
	//	brep structure.
	Edges *TedgesType `xml:"http://www.collada.org/2008/03/COLLADASchema edges"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_edgessequencebrep_typeschema_Edges_TedgesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_edgessequencebrep_typeschema_Edges_TedgesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_edgessequencebrep_typeschema_Edges_TedgesType_ instance.
func (me *XsdGoPkgHasElem_edgessequencebrep_typeschema_Edges_TedgesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_edgessequencebrep_typeschema_Edges_TedgesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Edges.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TbrepType struct {
	//	This element defines all the vertices of an
	//	brep structure. Vertices are the base
	//	topological entity for all brep structures,
	//	so this element is ever needed.
	XsdGoPkgHasElem_verticessequencemesh_typeschema_Vertices_TverticesType_

	XsdGoPkgHasElem_surface_curvessequencebrep_typeschema_SurfaceCurves_TsurfaceCurvesType_

	//	The source elements define the access of the
	//	elements vertices, edges and faces to their
	//	geometric entities. At least one source
	//	element is needed for the vertices. If there
	//	are edges a second source element is needed
	//	for accessing the curves in the curve
	//	element by an IDREF_array. If there are
	//	faces the third source element is needed for
	//	accessing the surfaces in the surface
	//	element by an IDREF_array.
	XsdGoPkgHasElems_sourcesequencechoicesequenceanimation_typeschema_Source_TsourceType_

	//	This element defines all the faces of the
	//	brep structure.
	XsdGoPkgHasElem_facessequencebrep_typeschema_Faces_TfacesType_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The curves element holds all the curves that
	//	are needed for the brep structure. Here are
	//	the curves that describes the kind of an
	//	edge, but here are also the curves that are
	//	needed to create a extrusion for a surface.
	//	This element is needed, if the edges element
	//	is present.
	XsdGoPkgHasElem_curvessequencebrep_typeschema_Curves_TcurvesType_

	//	This element defines all the shells of the
	//	brep structure.
	XsdGoPkgHasElem_shellssequencebrep_typeschema_Shells_TshellsType_

	//	This element defines all the solids of the
	//	brep structure.
	XsdGoPkgHasElem_solidssequencebrep_typeschema_Solids_TsolidsType_

	//	The surfaces element holds all the surfaces
	//	that are needed for the brep structure. Here
	//	are the surfaces that describes the kind of
	//	a face. This element is needed, if the faces
	//	element is present.
	XsdGoPkgHasElem_surfacessequencebrep_typeschema_Surfaces_TsurfacesType_

	//	This element defines all the wires of the
	//	brep structure.
	XsdGoPkgHasElem_wiressequencebrep_typeschema_Wires_TwiresType_

	XsdGoPkgHasElem_pcurvessequencebrep_typeschema_Pcurves_TpcurvesType_

	//	This element defines all the edges of the
	//	brep structure.
	XsdGoPkgHasElem_edgessequencebrep_typeschema_Edges_TedgesType_
}

//	If the WalkHandlers.TbrepType function is not nil (ie. was set by outside code), calls it with this TbrepType instance as the single argument. Then calls the Walk() method on 12/12 embed(s) and 0/0 field(s) belonging to this TbrepType instance.
func (me *TbrepType) Walk() (err error) {
	if fn := WalkHandlers.TbrepType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_sourcesequencechoicesequenceanimation_typeschema_Source_TsourceType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_facessequencebrep_typeschema_Faces_TfacesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_curvessequencebrep_typeschema_Curves_TcurvesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_shellssequencebrep_typeschema_Shells_TshellsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_solidssequencebrep_typeschema_Solids_TsolidsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_surfacessequencebrep_typeschema_Surfaces_TsurfacesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_wiressequencebrep_typeschema_Wires_TwiresType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_pcurvessequencebrep_typeschema_Pcurves_TpcurvesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_edgessequencebrep_typeschema_Edges_TedgesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_verticessequencemesh_typeschema_Vertices_TverticesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_surface_curvessequencebrep_typeschema_SurfaceCurves_TsurfaceCurvesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_brepchoicesequencegeometry_typeschema_Brep_TbrepType_ struct {
	Brep *TbrepType `xml:"http://www.collada.org/2008/03/COLLADASchema brep"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_brepchoicesequencegeometry_typeschema_Brep_TbrepType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_brepchoicesequencegeometry_typeschema_Brep_TbrepType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_brepchoicesequencegeometry_typeschema_Brep_TbrepType_ instance.
func (me *XsdGoPkgHasElem_brepchoicesequencegeometry_typeschema_Brep_TbrepType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_brepchoicesequencegeometry_typeschema_Brep_TbrepType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Brep.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TgeometryType struct {
	//	The geometry element may contain an asset element.
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	//	The geometry element may contain only
	//	one mesh or convex_mesh.
	XsdGoPkgHasElem_convex_meshchoicesequencegeometry_typeschema_ConvexMesh_TconvexMeshType_

	XsdGoPkgHasElem_brepchoicesequencegeometry_typeschema_Brep_TbrepType_

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_splinechoicesequencegeometry_typeschema_Spline_TsplineType_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The geometry element may contain only
	//	one mesh or convex_mesh.
	XsdGoPkgHasElem_meshchoicesequencegeometry_typeschema_Mesh_TmeshType_
}

//	If the WalkHandlers.TgeometryType function is not nil (ie. was set by outside code), calls it with this TgeometryType instance as the single argument. Then calls the Walk() method on 6/8 embed(s) and 0/0 field(s) belonging to this TgeometryType instance.
func (me *TgeometryType) Walk() (err error) {
	if fn := WalkHandlers.TgeometryType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_splinechoicesequencegeometry_typeschema_Spline_TsplineType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_meshchoicesequencegeometry_typeschema_Mesh_TmeshType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_convex_meshchoicesequencegeometry_typeschema_ConvexMesh_TconvexMeshType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_brepchoicesequencegeometry_typeschema_Brep_TbrepType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_geometrysequencelibrary_geometries_typeschema_Geometry_TgeometryType_ struct {
	//	There must be at least one geometry element.
	Geometries []*TgeometryType `xml:"http://www.collada.org/2008/03/COLLADASchema geometry"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_geometrysequencelibrary_geometries_typeschema_Geometry_TgeometryType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_geometrysequencelibrary_geometries_typeschema_Geometry_TgeometryType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_geometrysequencelibrary_geometries_typeschema_Geometry_TgeometryType_ instance.
func (me *XsdGoPkgHasElems_geometrysequencelibrary_geometries_typeschema_Geometry_TgeometryType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_geometrysequencelibrary_geometries_typeschema_Geometry_TgeometryType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Geometries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TlibraryGeometriesType struct {
	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	There must be at least one geometry element.
	XsdGoPkgHasElems_geometrysequencelibrary_geometries_typeschema_Geometry_TgeometryType_

	//	The library_geometries element may contain an asset element.
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_
}

//	If the WalkHandlers.TlibraryGeometriesType function is not nil (ie. was set by outside code), calls it with this TlibraryGeometriesType instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TlibraryGeometriesType instance.
func (me *TlibraryGeometriesType) Walk() (err error) {
	if fn := WalkHandlers.TlibraryGeometriesType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_geometrysequencelibrary_geometries_typeschema_Geometry_TgeometryType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_library_geometrieschoicesequenceCOLLADAschema_LibraryGeometries_TlibraryGeometriesType_ struct {
	//	The COLLADA element may contain any
	//	number of library_geometriess elements.
	GeometriesLibraries []*TlibraryGeometriesType `xml:"http://www.collada.org/2008/03/COLLADASchema library_geometries"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_library_geometrieschoicesequenceCOLLADAschema_LibraryGeometries_TlibraryGeometriesType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_library_geometrieschoicesequenceCOLLADAschema_LibraryGeometries_TlibraryGeometriesType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_library_geometrieschoicesequenceCOLLADAschema_LibraryGeometries_TlibraryGeometriesType_ instance.
func (me *XsdGoPkgHasElems_library_geometrieschoicesequenceCOLLADAschema_LibraryGeometries_TlibraryGeometriesType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_library_geometrieschoicesequenceCOLLADAschema_LibraryGeometries_TlibraryGeometriesType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GeometriesLibraries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The COLLADA element may contain any
//	number of library_force_fields elements.
//	The library_force_fields element declares a module of force_field elements.
//	There must be at least one force_field element.
//	A general container for force-fields. At the moment, it only has techniques and extra elements.
type TforceFieldType struct {
	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The id attribute is a text string containing the unique identifier of this element. This value
	//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The force_field element may contain an asset element.
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	//	This element must contain at least one non-common profile technique.
	XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_
}

//	If the WalkHandlers.TforceFieldType function is not nil (ie. was set by outside code), calls it with this TforceFieldType instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TforceFieldType instance.
func (me *TforceFieldType) Walk() (err error) {
	if fn := WalkHandlers.TforceFieldType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_force_fieldsequencelibrary_force_fields_typeschema_ForceField_TforceFieldType_ struct {
	//	There must be at least one force_field element.
	ForceFields []*TforceFieldType `xml:"http://www.collada.org/2008/03/COLLADASchema force_field"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_force_fieldsequencelibrary_force_fields_typeschema_ForceField_TforceFieldType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_force_fieldsequencelibrary_force_fields_typeschema_ForceField_TforceFieldType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_force_fieldsequencelibrary_force_fields_typeschema_ForceField_TforceFieldType_ instance.
func (me *XsdGoPkgHasElems_force_fieldsequencelibrary_force_fields_typeschema_ForceField_TforceFieldType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_force_fieldsequencelibrary_force_fields_typeschema_ForceField_TforceFieldType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ForceFields {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TlibraryForceFieldsType struct {
	//	The library_force_fields element may contain an asset element.
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	There must be at least one force_field element.
	XsdGoPkgHasElems_force_fieldsequencelibrary_force_fields_typeschema_ForceField_TforceFieldType_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_
}

//	If the WalkHandlers.TlibraryForceFieldsType function is not nil (ie. was set by outside code), calls it with this TlibraryForceFieldsType instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TlibraryForceFieldsType instance.
func (me *TlibraryForceFieldsType) Walk() (err error) {
	if fn := WalkHandlers.TlibraryForceFieldsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_force_fieldsequencelibrary_force_fields_typeschema_ForceField_TforceFieldType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_library_force_fieldschoicesequenceCOLLADAschema_LibraryForceFields_TlibraryForceFieldsType_ struct {
	//	The COLLADA element may contain any
	//	number of library_force_fields elements.
	ForceFieldsLibraries []*TlibraryForceFieldsType `xml:"http://www.collada.org/2008/03/COLLADASchema library_force_fields"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_library_force_fieldschoicesequenceCOLLADAschema_LibraryForceFields_TlibraryForceFieldsType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_library_force_fieldschoicesequenceCOLLADAschema_LibraryForceFields_TlibraryForceFieldsType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_library_force_fieldschoicesequenceCOLLADAschema_LibraryForceFields_TlibraryForceFieldsType_ instance.
func (me *XsdGoPkgHasElems_library_force_fieldschoicesequenceCOLLADAschema_LibraryForceFields_TlibraryForceFieldsType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_library_force_fieldschoicesequenceCOLLADAschema_LibraryForceFields_TlibraryForceFieldsType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ForceFieldsLibraries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The COLLADA element may contain any
//	number of library_lights elements.
//	The library_lights element declares a module of light elements.
//	There must be at least one light element.
//	The light element declares a light source that illuminates the scene.
//	Light sources have many different properties and radiate light in many different patterns and
//	frequencies.
//	The technique_common element specifies the light information for the common profile which all
//	COLLADA implementations need to support.
//	The ambient element declares the parameters required to describe an ambient light source.
//	An ambient light is one that lights everything evenly, regardless of location or orientation.
//	The color element contains three floating point numbers specifying the color of the light.
//	The color element must occur exactly once.
type XsdGoPkgHasElem_colorsequenceambientchoicetechnique_commonsequencelight_typeschema_Color_TtargetableFloat3Type_ struct {
	//	The color element contains three floating point numbers specifying the color of the light.
	//	The color element must occur exactly once.
	Color *TtargetableFloat3Type `xml:"http://www.collada.org/2008/03/COLLADASchema color"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_colorsequenceambientchoicetechnique_commonsequencelight_typeschema_Color_TtargetableFloat3Type_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_colorsequenceambientchoicetechnique_commonsequencelight_typeschema_Color_TtargetableFloat3Type_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_colorsequenceambientchoicetechnique_commonsequencelight_typeschema_Color_TtargetableFloat3Type_ instance.
func (me *XsdGoPkgHasElem_colorsequenceambientchoicetechnique_commonsequencelight_typeschema_Color_TtargetableFloat3Type_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_colorsequenceambientchoicetechnique_commonsequencelight_typeschema_Color_TtargetableFloat3Type_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Color.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdLightTypeSequenceTechniqueCommonChoiceAmbient struct {
	//	The color element contains three floating point numbers specifying the color of the light.
	//	The color element must occur exactly once.
	XsdGoPkgHasElem_colorsequenceambientchoicetechnique_commonsequencelight_typeschema_Color_TtargetableFloat3Type_
}

//	If the WalkHandlers.TxsdLightTypeSequenceTechniqueCommonChoiceAmbient function is not nil (ie. was set by outside code), calls it with this TxsdLightTypeSequenceTechniqueCommonChoiceAmbient instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdLightTypeSequenceTechniqueCommonChoiceAmbient instance.
func (me *TxsdLightTypeSequenceTechniqueCommonChoiceAmbient) Walk() (err error) {
	if fn := WalkHandlers.TxsdLightTypeSequenceTechniqueCommonChoiceAmbient; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_colorsequenceambientchoicetechnique_commonsequencelight_typeschema_Color_TtargetableFloat3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ambientchoicetechnique_commonsequencelight_typeschema_Ambient_TxsdLightTypeSequenceTechniqueCommonChoiceAmbient_ struct {
	//	The ambient element declares the parameters required to describe an ambient light source.
	//	An ambient light is one that lights everything evenly, regardless of location or orientation.
	Ambient *TxsdLightTypeSequenceTechniqueCommonChoiceAmbient `xml:"http://www.collada.org/2008/03/COLLADASchema ambient"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ambientchoicetechnique_commonsequencelight_typeschema_Ambient_TxsdLightTypeSequenceTechniqueCommonChoiceAmbient_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ambientchoicetechnique_commonsequencelight_typeschema_Ambient_TxsdLightTypeSequenceTechniqueCommonChoiceAmbient_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ambientchoicetechnique_commonsequencelight_typeschema_Ambient_TxsdLightTypeSequenceTechniqueCommonChoiceAmbient_ instance.
func (me *XsdGoPkgHasElem_ambientchoicetechnique_commonsequencelight_typeschema_Ambient_TxsdLightTypeSequenceTechniqueCommonChoiceAmbient_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ambientchoicetechnique_commonsequencelight_typeschema_Ambient_TxsdLightTypeSequenceTechniqueCommonChoiceAmbient_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ambient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The spot element declares the parameters required to describe a spot light source.  A spot light
//	source radiates light in one direction from a known location in space. The light radiates from
//	the spot light source in a cone shape. The intensity of the light is attenuated as the radiation
//	angle increases away from the direction of the light source. The intensity of a spot light source
//	is also attenuated as the distance to the light source increases. The position of the light is
//	defined by the transform of the node in which it is instantiated. The light's default direction
//	vector in local coordinates is [0,0,-1], pointing down the -Z axis. The actual direction of the
//	light is defined by the transform of the node where the light is instantiated.
//	The falloff_angle is used to specify the amount of attenuation based on the direction of the light.
type XsdGoPkgHasElem_falloff_anglesequencespotchoicetechnique_commonsequencelight_typeschema_FalloffAngle_TtargetableFloatType_1800 struct {
	//	The falloff_angle is used to specify the amount of attenuation based on the direction of the light.
	FalloffAngle *TtargetableFloatType `xml:"http://www.collada.org/2008/03/COLLADASchema falloff_angle"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_falloff_anglesequencespotchoicetechnique_commonsequencelight_typeschema_FalloffAngle_TtargetableFloatType_1800 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_falloff_anglesequencespotchoicetechnique_commonsequencelight_typeschema_FalloffAngle_TtargetableFloatType_1800 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_falloff_anglesequencespotchoicetechnique_commonsequencelight_typeschema_FalloffAngle_TtargetableFloatType_1800 instance.
func (me *XsdGoPkgHasElem_falloff_anglesequencespotchoicetechnique_commonsequencelight_typeschema_FalloffAngle_TtargetableFloatType_1800) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_falloff_anglesequencespotchoicetechnique_commonsequencelight_typeschema_FalloffAngle_TtargetableFloatType_1800; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FalloffAngle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for FalloffAngle -- 180.0
func (me XsdGoPkgHasElem_falloff_anglesequencespotchoicetechnique_commonsequencelight_typeschema_FalloffAngle_TtargetableFloatType_1800) FalloffAngleDefault() TfloatType {
	return TfloatType(180.0)
}

//	The constant_attenuation is used to calculate the total attenuation of this light given a distance.
//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
type XsdGoPkgHasElem_constant_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_ConstantAttenuation_TtargetableFloatType_10 struct {
	//	The constant_attenuation is used to calculate the total attenuation of this light given a distance.
	//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	ConstantAttenuation *TtargetableFloatType `xml:"http://www.collada.org/2008/03/COLLADASchema constant_attenuation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_constant_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_ConstantAttenuation_TtargetableFloatType_10 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_constant_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_ConstantAttenuation_TtargetableFloatType_10 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_constant_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_ConstantAttenuation_TtargetableFloatType_10 instance.
func (me *XsdGoPkgHasElem_constant_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_ConstantAttenuation_TtargetableFloatType_10) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_constant_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_ConstantAttenuation_TtargetableFloatType_10; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ConstantAttenuation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for ConstantAttenuation -- 1.0
func (me XsdGoPkgHasElem_constant_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_ConstantAttenuation_TtargetableFloatType_10) ConstantAttenuationDefault() TfloatType {
	return TfloatType(1.0)
}

//	The quadratic_attenuation is used to calculate the total attenuation of this light given a distance.
//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
type XsdGoPkgHasElem_quadratic_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_QuadraticAttenuation_TtargetableFloatType_00 struct {
	//	The quadratic_attenuation is used to calculate the total attenuation of this light given a distance.
	//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	QuadraticAttenuation *TtargetableFloatType `xml:"http://www.collada.org/2008/03/COLLADASchema quadratic_attenuation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_quadratic_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_QuadraticAttenuation_TtargetableFloatType_00 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_quadratic_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_QuadraticAttenuation_TtargetableFloatType_00 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_quadratic_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_QuadraticAttenuation_TtargetableFloatType_00 instance.
func (me *XsdGoPkgHasElem_quadratic_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_QuadraticAttenuation_TtargetableFloatType_00) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_quadratic_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_QuadraticAttenuation_TtargetableFloatType_00; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.QuadraticAttenuation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for QuadraticAttenuation -- 0.0
func (me XsdGoPkgHasElem_quadratic_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_QuadraticAttenuation_TtargetableFloatType_00) QuadraticAttenuationDefault() TfloatType {
	return TfloatType(0.0)
}

//	The linear_attenuation is used to calculate the total attenuation of this light given a distance.
//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
type XsdGoPkgHasElem_linear_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_LinearAttenuation_TtargetableFloatType_00 struct {
	//	The linear_attenuation is used to calculate the total attenuation of this light given a distance.
	//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	LinearAttenuation *TtargetableFloatType `xml:"http://www.collada.org/2008/03/COLLADASchema linear_attenuation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_linear_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_LinearAttenuation_TtargetableFloatType_00 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_linear_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_LinearAttenuation_TtargetableFloatType_00 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_linear_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_LinearAttenuation_TtargetableFloatType_00 instance.
func (me *XsdGoPkgHasElem_linear_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_LinearAttenuation_TtargetableFloatType_00) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_linear_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_LinearAttenuation_TtargetableFloatType_00; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LinearAttenuation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for LinearAttenuation -- 0.0
func (me XsdGoPkgHasElem_linear_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_LinearAttenuation_TtargetableFloatType_00) LinearAttenuationDefault() TfloatType {
	return TfloatType(0.0)
}

//	The falloff_exponent is used to specify the amount of attenuation based on the direction of the light.
type XsdGoPkgHasElem_falloff_exponentsequencespotchoicetechnique_commonsequencelight_typeschema_FalloffExponent_TtargetableFloatType_00 struct {
	//	The falloff_exponent is used to specify the amount of attenuation based on the direction of the light.
	FalloffExponent *TtargetableFloatType `xml:"http://www.collada.org/2008/03/COLLADASchema falloff_exponent"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_falloff_exponentsequencespotchoicetechnique_commonsequencelight_typeschema_FalloffExponent_TtargetableFloatType_00 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_falloff_exponentsequencespotchoicetechnique_commonsequencelight_typeschema_FalloffExponent_TtargetableFloatType_00 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_falloff_exponentsequencespotchoicetechnique_commonsequencelight_typeschema_FalloffExponent_TtargetableFloatType_00 instance.
func (me *XsdGoPkgHasElem_falloff_exponentsequencespotchoicetechnique_commonsequencelight_typeschema_FalloffExponent_TtargetableFloatType_00) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_falloff_exponentsequencespotchoicetechnique_commonsequencelight_typeschema_FalloffExponent_TtargetableFloatType_00; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FalloffExponent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for FalloffExponent -- 0.0
func (me XsdGoPkgHasElem_falloff_exponentsequencespotchoicetechnique_commonsequencelight_typeschema_FalloffExponent_TtargetableFloatType_00) FalloffExponentDefault() TfloatType {
	return TfloatType(0.0)
}

type TxsdLightTypeSequenceTechniqueCommonChoiceSpot struct {
	//	The quadratic_attenuation is used to calculate the total attenuation of this light given a distance.
	//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	XsdGoPkgHasElem_quadratic_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_QuadraticAttenuation_TtargetableFloatType_00

	//	The linear_attenuation is used to calculate the total attenuation of this light given a distance.
	//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	XsdGoPkgHasElem_linear_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_LinearAttenuation_TtargetableFloatType_00

	//	The falloff_exponent is used to specify the amount of attenuation based on the direction of the light.
	XsdGoPkgHasElem_falloff_exponentsequencespotchoicetechnique_commonsequencelight_typeschema_FalloffExponent_TtargetableFloatType_00

	//	The falloff_angle is used to specify the amount of attenuation based on the direction of the light.
	XsdGoPkgHasElem_falloff_anglesequencespotchoicetechnique_commonsequencelight_typeschema_FalloffAngle_TtargetableFloatType_1800

	//	The color element contains three floating point numbers specifying the color of the light.
	//	The color element must occur exactly once.
	XsdGoPkgHasElem_colorsequenceambientchoicetechnique_commonsequencelight_typeschema_Color_TtargetableFloat3Type_

	//	The constant_attenuation is used to calculate the total attenuation of this light given a distance.
	//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	XsdGoPkgHasElem_constant_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_ConstantAttenuation_TtargetableFloatType_10
}

//	If the WalkHandlers.TxsdLightTypeSequenceTechniqueCommonChoiceSpot function is not nil (ie. was set by outside code), calls it with this TxsdLightTypeSequenceTechniqueCommonChoiceSpot instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdLightTypeSequenceTechniqueCommonChoiceSpot instance.
func (me *TxsdLightTypeSequenceTechniqueCommonChoiceSpot) Walk() (err error) {
	if fn := WalkHandlers.TxsdLightTypeSequenceTechniqueCommonChoiceSpot; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_colorsequenceambientchoicetechnique_commonsequencelight_typeschema_Color_TtargetableFloat3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_constant_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_ConstantAttenuation_TtargetableFloatType_10.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_quadratic_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_QuadraticAttenuation_TtargetableFloatType_00.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_linear_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_LinearAttenuation_TtargetableFloatType_00.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_falloff_exponentsequencespotchoicetechnique_commonsequencelight_typeschema_FalloffExponent_TtargetableFloatType_00.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_falloff_anglesequencespotchoicetechnique_commonsequencelight_typeschema_FalloffAngle_TtargetableFloatType_1800.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_spotchoicetechnique_commonsequencelight_typeschema_Spot_TxsdLightTypeSequenceTechniqueCommonChoiceSpot_ struct {
	//	The spot element declares the parameters required to describe a spot light source.  A spot light
	//	source radiates light in one direction from a known location in space. The light radiates from
	//	the spot light source in a cone shape. The intensity of the light is attenuated as the radiation
	//	angle increases away from the direction of the light source. The intensity of a spot light source
	//	is also attenuated as the distance to the light source increases. The position of the light is
	//	defined by the transform of the node in which it is instantiated. The light's default direction
	//	vector in local coordinates is [0,0,-1], pointing down the -Z axis. The actual direction of the
	//	light is defined by the transform of the node where the light is instantiated.
	Spot *TxsdLightTypeSequenceTechniqueCommonChoiceSpot `xml:"http://www.collada.org/2008/03/COLLADASchema spot"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_spotchoicetechnique_commonsequencelight_typeschema_Spot_TxsdLightTypeSequenceTechniqueCommonChoiceSpot_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_spotchoicetechnique_commonsequencelight_typeschema_Spot_TxsdLightTypeSequenceTechniqueCommonChoiceSpot_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_spotchoicetechnique_commonsequencelight_typeschema_Spot_TxsdLightTypeSequenceTechniqueCommonChoiceSpot_ instance.
func (me *XsdGoPkgHasElem_spotchoicetechnique_commonsequencelight_typeschema_Spot_TxsdLightTypeSequenceTechniqueCommonChoiceSpot_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_spotchoicetechnique_commonsequencelight_typeschema_Spot_TxsdLightTypeSequenceTechniqueCommonChoiceSpot_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Spot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The directional element declares the parameters required to describe a directional light source.
//	A directional light is one that lights everything from the same direction, regardless of location.
//	The light's default direction vector in local coordinates is [0,0,-1], pointing down the -Z axis.
//	The actual direction of the light is defined by the transform of the node where the light is
//	instantiated.
type TxsdLightTypeSequenceTechniqueCommonChoiceDirectional struct {
	//	The color element contains three floating point numbers specifying the color of the light.
	//	The color element must occur exactly once.
	XsdGoPkgHasElem_colorsequenceambientchoicetechnique_commonsequencelight_typeschema_Color_TtargetableFloat3Type_
}

//	If the WalkHandlers.TxsdLightTypeSequenceTechniqueCommonChoiceDirectional function is not nil (ie. was set by outside code), calls it with this TxsdLightTypeSequenceTechniqueCommonChoiceDirectional instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdLightTypeSequenceTechniqueCommonChoiceDirectional instance.
func (me *TxsdLightTypeSequenceTechniqueCommonChoiceDirectional) Walk() (err error) {
	if fn := WalkHandlers.TxsdLightTypeSequenceTechniqueCommonChoiceDirectional; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_colorsequenceambientchoicetechnique_commonsequencelight_typeschema_Color_TtargetableFloat3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_directionalchoicetechnique_commonsequencelight_typeschema_Directional_TxsdLightTypeSequenceTechniqueCommonChoiceDirectional_ struct {
	//	The directional element declares the parameters required to describe a directional light source.
	//	A directional light is one that lights everything from the same direction, regardless of location.
	//	The light's default direction vector in local coordinates is [0,0,-1], pointing down the -Z axis.
	//	The actual direction of the light is defined by the transform of the node where the light is
	//	instantiated.
	Directional *TxsdLightTypeSequenceTechniqueCommonChoiceDirectional `xml:"http://www.collada.org/2008/03/COLLADASchema directional"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_directionalchoicetechnique_commonsequencelight_typeschema_Directional_TxsdLightTypeSequenceTechniqueCommonChoiceDirectional_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_directionalchoicetechnique_commonsequencelight_typeschema_Directional_TxsdLightTypeSequenceTechniqueCommonChoiceDirectional_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_directionalchoicetechnique_commonsequencelight_typeschema_Directional_TxsdLightTypeSequenceTechniqueCommonChoiceDirectional_ instance.
func (me *XsdGoPkgHasElem_directionalchoicetechnique_commonsequencelight_typeschema_Directional_TxsdLightTypeSequenceTechniqueCommonChoiceDirectional_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_directionalchoicetechnique_commonsequencelight_typeschema_Directional_TxsdLightTypeSequenceTechniqueCommonChoiceDirectional_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Directional.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The point element declares the parameters required to describe a point light source.  A point light
//	source radiates light in all directions from a known location in space. The intensity of a point
//	light source is attenuated as the distance to the light source increases. The position of the light
//	is defined by the transform of the node in which it is instantiated.
type TxsdLightTypeSequenceTechniqueCommonChoicePoint struct {
	//	The linear_attenuation is used to calculate the total attenuation of this light given a distance.
	//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	XsdGoPkgHasElem_linear_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_LinearAttenuation_TtargetableFloatType_00

	//	The quadratic_attenuation is used to calculate the total attenuation of this light given a distance.
	//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	XsdGoPkgHasElem_quadratic_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_QuadraticAttenuation_TtargetableFloatType_00

	//	The constant_attenuation is used to calculate the total attenuation of this light given a distance.
	//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	XsdGoPkgHasElem_constant_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_ConstantAttenuation_TtargetableFloatType_10

	//	The color element contains three floating point numbers specifying the color of the light.
	//	The color element must occur exactly once.
	XsdGoPkgHasElem_colorsequenceambientchoicetechnique_commonsequencelight_typeschema_Color_TtargetableFloat3Type_
}

//	If the WalkHandlers.TxsdLightTypeSequenceTechniqueCommonChoicePoint function is not nil (ie. was set by outside code), calls it with this TxsdLightTypeSequenceTechniqueCommonChoicePoint instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdLightTypeSequenceTechniqueCommonChoicePoint instance.
func (me *TxsdLightTypeSequenceTechniqueCommonChoicePoint) Walk() (err error) {
	if fn := WalkHandlers.TxsdLightTypeSequenceTechniqueCommonChoicePoint; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_colorsequenceambientchoicetechnique_commonsequencelight_typeschema_Color_TtargetableFloat3Type_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_linear_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_LinearAttenuation_TtargetableFloatType_00.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_quadratic_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_QuadraticAttenuation_TtargetableFloatType_00.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_constant_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_ConstantAttenuation_TtargetableFloatType_10.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_pointchoicetechnique_commonsequencelight_typeschema_Point_TxsdLightTypeSequenceTechniqueCommonChoicePoint_ struct {
	//	The point element declares the parameters required to describe a point light source.  A point light
	//	source radiates light in all directions from a known location in space. The intensity of a point
	//	light source is attenuated as the distance to the light source increases. The position of the light
	//	is defined by the transform of the node in which it is instantiated.
	Point *TxsdLightTypeSequenceTechniqueCommonChoicePoint `xml:"http://www.collada.org/2008/03/COLLADASchema point"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_pointchoicetechnique_commonsequencelight_typeschema_Point_TxsdLightTypeSequenceTechniqueCommonChoicePoint_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_pointchoicetechnique_commonsequencelight_typeschema_Point_TxsdLightTypeSequenceTechniqueCommonChoicePoint_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_pointchoicetechnique_commonsequencelight_typeschema_Point_TxsdLightTypeSequenceTechniqueCommonChoicePoint_ instance.
func (me *XsdGoPkgHasElem_pointchoicetechnique_commonsequencelight_typeschema_Point_TxsdLightTypeSequenceTechniqueCommonChoicePoint_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_pointchoicetechnique_commonsequencelight_typeschema_Point_TxsdLightTypeSequenceTechniqueCommonChoicePoint_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Point.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdLightTypeSequenceTechniqueCommon struct {
	//	The point element declares the parameters required to describe a point light source.  A point light
	//	source radiates light in all directions from a known location in space. The intensity of a point
	//	light source is attenuated as the distance to the light source increases. The position of the light
	//	is defined by the transform of the node in which it is instantiated.
	XsdGoPkgHasElem_pointchoicetechnique_commonsequencelight_typeschema_Point_TxsdLightTypeSequenceTechniqueCommonChoicePoint_

	//	The ambient element declares the parameters required to describe an ambient light source.
	//	An ambient light is one that lights everything evenly, regardless of location or orientation.
	XsdGoPkgHasElem_ambientchoicetechnique_commonsequencelight_typeschema_Ambient_TxsdLightTypeSequenceTechniqueCommonChoiceAmbient_

	//	The spot element declares the parameters required to describe a spot light source.  A spot light
	//	source radiates light in one direction from a known location in space. The light radiates from
	//	the spot light source in a cone shape. The intensity of the light is attenuated as the radiation
	//	angle increases away from the direction of the light source. The intensity of a spot light source
	//	is also attenuated as the distance to the light source increases. The position of the light is
	//	defined by the transform of the node in which it is instantiated. The light's default direction
	//	vector in local coordinates is [0,0,-1], pointing down the -Z axis. The actual direction of the
	//	light is defined by the transform of the node where the light is instantiated.
	XsdGoPkgHasElem_spotchoicetechnique_commonsequencelight_typeschema_Spot_TxsdLightTypeSequenceTechniqueCommonChoiceSpot_

	//	The directional element declares the parameters required to describe a directional light source.
	//	A directional light is one that lights everything from the same direction, regardless of location.
	//	The light's default direction vector in local coordinates is [0,0,-1], pointing down the -Z axis.
	//	The actual direction of the light is defined by the transform of the node where the light is
	//	instantiated.
	XsdGoPkgHasElem_directionalchoicetechnique_commonsequencelight_typeschema_Directional_TxsdLightTypeSequenceTechniqueCommonChoiceDirectional_
}

//	If the WalkHandlers.TxsdLightTypeSequenceTechniqueCommon function is not nil (ie. was set by outside code), calls it with this TxsdLightTypeSequenceTechniqueCommon instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdLightTypeSequenceTechniqueCommon instance.
func (me *TxsdLightTypeSequenceTechniqueCommon) Walk() (err error) {
	if fn := WalkHandlers.TxsdLightTypeSequenceTechniqueCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ambientchoicetechnique_commonsequencelight_typeschema_Ambient_TxsdLightTypeSequenceTechniqueCommonChoiceAmbient_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_spotchoicetechnique_commonsequencelight_typeschema_Spot_TxsdLightTypeSequenceTechniqueCommonChoiceSpot_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_directionalchoicetechnique_commonsequencelight_typeschema_Directional_TxsdLightTypeSequenceTechniqueCommonChoiceDirectional_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_pointchoicetechnique_commonsequencelight_typeschema_Point_TxsdLightTypeSequenceTechniqueCommonChoicePoint_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_technique_commonsequencelight_typeschema_TechniqueCommon_TxsdLightTypeSequenceTechniqueCommon_ struct {
	//	The technique_common element specifies the light information for the common profile which all
	//	COLLADA implementations need to support.
	TechniqueCommon *TxsdLightTypeSequenceTechniqueCommon `xml:"http://www.collada.org/2008/03/COLLADASchema technique_common"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_technique_commonsequencelight_typeschema_TechniqueCommon_TxsdLightTypeSequenceTechniqueCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_technique_commonsequencelight_typeschema_TechniqueCommon_TxsdLightTypeSequenceTechniqueCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_technique_commonsequencelight_typeschema_TechniqueCommon_TxsdLightTypeSequenceTechniqueCommon_ instance.
func (me *XsdGoPkgHasElem_technique_commonsequencelight_typeschema_TechniqueCommon_TxsdLightTypeSequenceTechniqueCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_technique_commonsequencelight_typeschema_TechniqueCommon_TxsdLightTypeSequenceTechniqueCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TechniqueCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TlightType struct {
	//	The technique_common element specifies the light information for the common profile which all
	//	COLLADA implementations need to support.
	XsdGoPkgHasElem_technique_commonsequencelight_typeschema_TechniqueCommon_TxsdLightTypeSequenceTechniqueCommon_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The light element may contain an asset element.
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	//	This element may contain any number of non-common profile techniques.
	XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_
}

//	If the WalkHandlers.TlightType function is not nil (ie. was set by outside code), calls it with this TlightType instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TlightType instance.
func (me *TlightType) Walk() (err error) {
	if fn := WalkHandlers.TlightType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_technique_commonsequencelight_typeschema_TechniqueCommon_TxsdLightTypeSequenceTechniqueCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_lightsequencelibrary_lights_typeschema_Light_TlightType_ struct {
	//	There must be at least one light element.
	Lights []*TlightType `xml:"http://www.collada.org/2008/03/COLLADASchema light"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_lightsequencelibrary_lights_typeschema_Light_TlightType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_lightsequencelibrary_lights_typeschema_Light_TlightType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_lightsequencelibrary_lights_typeschema_Light_TlightType_ instance.
func (me *XsdGoPkgHasElems_lightsequencelibrary_lights_typeschema_Light_TlightType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_lightsequencelibrary_lights_typeschema_Light_TlightType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Lights {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TlibraryLightsType struct {
	//	The library_lights element may contain an asset element.
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtToken_

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	There must be at least one light element.
	XsdGoPkgHasElems_lightsequencelibrary_lights_typeschema_Light_TlightType_
}

//	If the WalkHandlers.TlibraryLightsType function is not nil (ie. was set by outside code), calls it with this TlibraryLightsType instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TlibraryLightsType instance.
func (me *TlibraryLightsType) Walk() (err error) {
	if fn := WalkHandlers.TlibraryLightsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_lightsequencelibrary_lights_typeschema_Light_TlightType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_library_lightschoicesequenceCOLLADAschema_LibraryLights_TlibraryLightsType_ struct {
	//	The COLLADA element may contain any
	//	number of library_lights elements.
	LightsLibraries []*TlibraryLightsType `xml:"http://www.collada.org/2008/03/COLLADASchema library_lights"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_library_lightschoicesequenceCOLLADAschema_LibraryLights_TlibraryLightsType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_library_lightschoicesequenceCOLLADAschema_LibraryLights_TlibraryLightsType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_library_lightschoicesequenceCOLLADAschema_LibraryLights_TlibraryLightsType_ instance.
func (me *XsdGoPkgHasElems_library_lightschoicesequenceCOLLADAschema_LibraryLights_TlibraryLightsType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_library_lightschoicesequenceCOLLADAschema_LibraryLights_TlibraryLightsType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.LightsLibraries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TlibraryJointsType struct {
	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_

	XsdGoPkgHasElems_jointchoicesequencekinematics_model_technique_typeschema_Joint_TjointType_

	XsdGoPkgHasAttr_Name_XsdtToken_

	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_
}

//	If the WalkHandlers.TlibraryJointsType function is not nil (ie. was set by outside code), calls it with this TlibraryJointsType instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TlibraryJointsType instance.
func (me *TlibraryJointsType) Walk() (err error) {
	if fn := WalkHandlers.TlibraryJointsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_jointchoicesequencekinematics_model_technique_typeschema_Joint_TjointType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_library_jointschoicesequenceCOLLADAschema_LibraryJoints_TlibraryJointsType_ struct {
	JointsLibraries []*TlibraryJointsType `xml:"http://www.collada.org/2008/03/COLLADASchema library_joints"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_library_jointschoicesequenceCOLLADAschema_LibraryJoints_TlibraryJointsType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_library_jointschoicesequenceCOLLADAschema_LibraryJoints_TlibraryJointsType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_library_jointschoicesequenceCOLLADAschema_LibraryJoints_TlibraryJointsType_ instance.
func (me *XsdGoPkgHasElems_library_jointschoicesequenceCOLLADAschema_LibraryJoints_TlibraryJointsType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_library_jointschoicesequenceCOLLADAschema_LibraryJoints_TlibraryJointsType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.JointsLibraries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The version attribute is the COLLADA schema revision with which the instance document
//	conforms. Required Attribute.
//	An enumerated type specifying the acceptable document versions.
type TversionEnum xsdt.String

//	This convenience method just performs a simple type conversion to TversionEnum's alias type xsdt.String.
func (me TversionEnum) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TversionEnum is "1.5.0".
func (me TversionEnum) Is150() bool { return me == "1.5.0" }

//	Since TversionEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TversionEnum) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TversionEnum is just a simple String type, this merely returns the current string value.
func (me TversionEnum) String() string { return xsdt.String(me).String() }

type XsdGoPkgHasAttr_Version_TversionEnum_ struct {
	//	The version attribute is the COLLADA schema revision with which the instance document
	//	conforms. Required Attribute.
	Version TversionEnum `xml:"http://www.collada.org/2008/03/COLLADASchema version,attr"`
}

type TxsdCollada struct {
	//	The COLLADA element may contain any
	//	number of library_animation_clips
	//	elements.
	XsdGoPkgHasElems_library_animation_clipschoicesequenceCOLLADAschema_LibraryAnimationClips_TlibraryAnimationClipsType_

	XsdGoPkgHasElems_library_articulated_systemschoicesequenceCOLLADAschema_LibraryArticulatedSystems_TlibraryArticulatedSystemsType_

	//	The COLLADA element may contain any
	//	number of library_nodes elements.
	XsdGoPkgHasElems_library_nodeschoicesequenceCOLLADAschema_LibraryNodes_TlibraryNodesType_

	//	The COLLADA element may contain any
	//	number of library_cameras elements.
	XsdGoPkgHasElems_library_cameraschoicesequenceCOLLADAschema_LibraryCameras_TlibraryCamerasType_

	//	The COLLADA element may contain any
	//	number of library_materials elements.
	XsdGoPkgHasElems_library_materialschoicesequenceCOLLADAschema_LibraryMaterials_TlibraryMaterialsType_

	//	The COLLADA element may contain any
	//	number of library_physics_scenes
	//	elements.
	XsdGoPkgHasElems_library_physics_sceneschoicesequenceCOLLADAschema_LibraryPhysicsScenes_TlibraryPhysicsScenesType_

	XsdGoPkgHasElems_library_formulaschoicesequenceCOLLADAschema_LibraryFormulas_TlibraryFormulasType_

	XsdGoPkgHasElems_library_kinematics_sceneschoicesequenceCOLLADAschema_LibraryKinematicsScenes_TlibraryKinematicsScenesType_

	//	The COLLADA element must contain an asset element.
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_

	//	The COLLADA element may contain any
	//	number of library_visual_scenes
	//	elements.
	XsdGoPkgHasElems_library_visual_sceneschoicesequenceCOLLADAschema_LibraryVisualScenes_TlibraryVisualScenesType_

	//	The scene embodies the entire set of information that can be visualized from the
	//	contents of a COLLADA resource. The scene element declares the base of the scene
	//	hierarchy or scene graph. The scene contains elements that comprise much of the
	//	visual and transformational information content as created by the authoring tools.
	XsdGoPkgHasElem_scenesequenceCOLLADAschema_Scene_TxsdColladaSequenceScene_

	//	The COLLADA element may contain any
	//	number of library_materials elements.
	XsdGoPkgHasElems_library_physics_materialschoicesequenceCOLLADAschema_LibraryPhysicsMaterials_TlibraryPhysicsMaterialsType_

	//	The COLLADA element may contain any
	//	number of library_images elements.
	XsdGoPkgHasElems_library_imageschoicesequenceCOLLADAschema_LibraryImages_TlibraryImagesType_

	//	The COLLADA element may contain any
	//	number of library_controllerss elements.
	XsdGoPkgHasElems_library_controllerschoicesequenceCOLLADAschema_LibraryControllers_TlibraryControllersType_

	//	The COLLADA element may contain any
	//	number of library_geometriess elements.
	XsdGoPkgHasElems_library_geometrieschoicesequenceCOLLADAschema_LibraryGeometries_TlibraryGeometriesType_

	//	The xml:base attribute allows you to define the base URI for this COLLADA document. See
	//	http://www.w3.org/TR/xmlbase/ for more information.
	xml.XsdGoPkgHasAttr_Base

	//	The COLLADA element may contain any
	//	number of library_force_fields elements.
	XsdGoPkgHasElems_library_force_fieldschoicesequenceCOLLADAschema_LibraryForceFields_TlibraryForceFieldsType_

	//	The COLLADA element may contain any
	//	number of library_lights elements.
	XsdGoPkgHasElems_library_lightschoicesequenceCOLLADAschema_LibraryLights_TlibraryLightsType_

	XsdGoPkgHasElems_library_jointschoicesequenceCOLLADAschema_LibraryJoints_TlibraryJointsType_

	//	The version attribute is the COLLADA schema revision with which the instance document
	//	conforms. Required Attribute.
	XsdGoPkgHasAttr_Version_TversionEnum_

	//	The COLLADA element may contain any
	//	number of library_animations elements.
	XsdGoPkgHasElems_library_animationschoicesequenceCOLLADAschema_LibraryAnimations_TlibraryAnimationsType_

	XsdGoPkgHasElems_library_kinematics_modelschoicesequenceCOLLADAschema_LibraryKinematicsModels_TlibraryKinematicsModelsType_

	//	The COLLADA element may contain any
	//	number of library_effects elements.
	XsdGoPkgHasElems_library_effectschoicesequenceCOLLADAschema_LibraryEffects_TlibraryEffectsType_

	//	The COLLADA element may contain any
	//	number of library_physics_models
	//	elements.
	XsdGoPkgHasElems_library_physics_modelschoicesequenceCOLLADAschema_LibraryPhysicsModels_TlibraryPhysicsModelsType_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_
}

//	If the WalkHandlers.TxsdCollada function is not nil (ie. was set by outside code), calls it with this TxsdCollada instance as the single argument. Then calls the Walk() method on 23/25 embed(s) and 0/0 field(s) belonging to this TxsdCollada instance.
func (me *TxsdCollada) Walk() (err error) {
	if fn := WalkHandlers.TxsdCollada; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_library_kinematics_modelschoicesequenceCOLLADAschema_LibraryKinematicsModels_TlibraryKinematicsModelsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_library_effectschoicesequenceCOLLADAschema_LibraryEffects_TlibraryEffectsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_library_physics_modelschoicesequenceCOLLADAschema_LibraryPhysicsModels_TlibraryPhysicsModelsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_library_animation_clipschoicesequenceCOLLADAschema_LibraryAnimationClips_TlibraryAnimationClipsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_library_articulated_systemschoicesequenceCOLLADAschema_LibraryArticulatedSystems_TlibraryArticulatedSystemsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_library_nodeschoicesequenceCOLLADAschema_LibraryNodes_TlibraryNodesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_library_cameraschoicesequenceCOLLADAschema_LibraryCameras_TlibraryCamerasType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_library_materialschoicesequenceCOLLADAschema_LibraryMaterials_TlibraryMaterialsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_library_physics_sceneschoicesequenceCOLLADAschema_LibraryPhysicsScenes_TlibraryPhysicsScenesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_library_formulaschoicesequenceCOLLADAschema_LibraryFormulas_TlibraryFormulasType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_library_kinematics_sceneschoicesequenceCOLLADAschema_LibraryKinematicsScenes_TlibraryKinematicsScenesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_library_visual_sceneschoicesequenceCOLLADAschema_LibraryVisualScenes_TlibraryVisualScenesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_scenesequenceCOLLADAschema_Scene_TxsdColladaSequenceScene_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_library_physics_materialschoicesequenceCOLLADAschema_LibraryPhysicsMaterials_TlibraryPhysicsMaterialsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_library_imageschoicesequenceCOLLADAschema_LibraryImages_TlibraryImagesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_library_controllerschoicesequenceCOLLADAschema_LibraryControllers_TlibraryControllersType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_library_geometrieschoicesequenceCOLLADAschema_LibraryGeometries_TlibraryGeometriesType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_library_force_fieldschoicesequenceCOLLADAschema_LibraryForceFields_TlibraryForceFieldsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_library_lightschoicesequenceCOLLADAschema_LibraryLights_TlibraryLightsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_library_jointschoicesequenceCOLLADAschema_LibraryJoints_TlibraryJointsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_library_animationschoicesequenceCOLLADAschema_LibraryAnimations_TlibraryAnimationsType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Collada struct {
	//	The COLLADA element declares the root of the document that comprises some of the content
	//	in the COLLADA schema.
	Collada *TxsdCollada `xml:"http://www.collada.org/2008/03/COLLADASchema COLLADA"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Collada function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Collada instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Collada instance.
func (me *XsdGoPkgHasElem_Collada) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Collada; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Collada.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The COLLADA element declares the root of the document that comprises some of the content
//	in the COLLADA schema.
type XsdGoPkgHasElems_Collada struct {
	//	The COLLADA element declares the root of the document that comprises some of the content
	//	in the COLLADA schema.
	Colladas []*TxsdCollada `xml:"http://www.collada.org/2008/03/COLLADASchema COLLADA"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Collada function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Collada instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Collada instance.
func (me *XsdGoPkgHasElems_Collada) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Collada; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Colladas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 1296 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

//	Provides 1296 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	XsdGoPkgHasElem_samplerDEPTHchoiceglsl_value_groupschema_SamplerDEPTH_TfxSamplerDEPTHType_                                                                                                                                                                func(*XsdGoPkgHasElem_samplerDEPTHchoiceglsl_value_groupschema_SamplerDEPTH_TfxSamplerDEPTHType_, bool) error
	TglslNewparamType                                                                                                                                                                                                                                         func(*TglslNewparamType, bool) error
	TtrianglesType                                                                                                                                                                                                                                            func(*TtrianglesType, bool) error
	TinstanceControllerType                                                                                                                                                                                                                                   func(*TinstanceControllerType, bool) error
	TmorphType                                                                                                                                                                                                                                                func(*TmorphType, bool) error
	XsdGoPkgHasElem_bvec2choicegles2_value_groupschema_Bvec2_Tbool2Type_                                                                                                                                                                                      func(*XsdGoPkgHasElem_bvec2choicegles2_value_groupschema_Bvec2_Tbool2Type_, bool) error
	XsdGoPkgHasElem_ref_attachmentsequencerigid_constraint_typeschema_RefAttachment_TxsdRigidConstraintTypeSequenceRefAttachment_                                                                                                                             func(*XsdGoPkgHasElem_ref_attachmentsequencerigid_constraint_typeschema_RefAttachment_TxsdRigidConstraintTypeSequenceRefAttachment_, bool) error
	TprofileGlesType                                                                                                                                                                                                                                          func(*TprofileGlesType, bool) error
	XsdGoPkgHasElem_rescale_normal_enablechoicegles_pipeline_settings_groupschema_RescaleNormalEnable_TxsdGlesPipelineSettingsGroupChoiceRescaleNormalEnable_                                                                                                 func(*XsdGoPkgHasElem_rescale_normal_enablechoicegles_pipeline_settings_groupschema_RescaleNormalEnable_TxsdGlesPipelineSettingsGroupChoiceRescaleNormalEnable_, bool) error
	XsdGoPkgHasGroup_FxSetparamGroup                                                                                                                                                                                                                          func(*XsdGoPkgHasGroup_FxSetparamGroup, bool) error
	TlinkType                                                                                                                                                                                                                                                 func(*TlinkType, bool) error
	XsdGoPkgHasElem_morphchoicesequencecontroller_typeschema_Morph_TmorphType_                                                                                                                                                                                func(*XsdGoPkgHasElem_morphchoicesequencecontroller_typeschema_Morph_TmorphType_, bool) error
	XsdGoPkgHasElem_int3x3choicecg_param_groupschema_Int3X3_Tint3X3Type_                                                                                                                                                                                      func(*XsdGoPkgHasElem_int3x3choicecg_param_groupschema_Int3X3_Tint3X3Type_, bool) error
	TfxSamplerType                                                                                                                                                                                                                                            func(*TfxSamplerType, bool) error
	XsdGoPkgHasElem_cull_face_enablechoicegl_pipeline_settings_groupschema_CullFaceEnable_TxsdGlPipelineSettingsGroupChoiceCullFaceEnable_                                                                                                                    func(*XsdGoPkgHasElem_cull_face_enablechoicegl_pipeline_settings_groupschema_CullFaceEnable_TxsdGlPipelineSettingsGroupChoiceCullFaceEnable_, bool) error
	TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimits                                                                                                                                                                                              func(*TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimits, bool) error
	XsdGoPkgHasElems_depth_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_DepthTarget_TfxDepthtargetType_                                                                                                                 func(*XsdGoPkgHasElems_depth_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_DepthTarget_TfxDepthtargetType_, bool) error
	TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterialSequenceTechniqueOverride                                                                                                                                                   func(*TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterialSequenceTechniqueOverride, bool) error
	XsdGoPkgHasElem_profile_COMMONchoicefx_profile_groupschema_ProfileCommon_TprofileCommonType_                                                                                                                                                              func(*XsdGoPkgHasElem_profile_COMMONchoicefx_profile_groupschema_ProfileCommon_TprofileCommonType_, bool) error
	TglesTexcombinerArgumentRgbType                                                                                                                                                                                                                           func(*TglesTexcombinerArgumentRgbType, bool) error
	XsdGoPkgHasElem_limitssequencetechnique_commonsequencerigid_constraint_typeschema_Limits_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimits_                                                                                                    func(*XsdGoPkgHasElem_limitssequencetechnique_commonsequencerigid_constraint_typeschema_Limits_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimits_, bool) error
	XsdGoPkgHasElem_scissor_test_enablechoicegles2_pipeline_settings_groupschema_ScissorTestEnable_TxsdGles2PipelineSettingsGroupChoiceScissorTestEnable_                                                                                                     func(*XsdGoPkgHasElem_scissor_test_enablechoicegles2_pipeline_settings_groupschema_ScissorTestEnable_TxsdGles2PipelineSettingsGroupChoiceScissorTestEnable_, bool) error
	XsdGoPkgHasElems_techniquesequenceprofile_gles2_typeschema_Technique_TxsdProfileGles2TypeSequenceTechnique_                                                                                                                                               func(*XsdGoPkgHasElems_techniquesequenceprofile_gles2_typeschema_Technique_TxsdProfileGles2TypeSequenceTechnique_, bool) error
	XsdGoPkgHasElems_techniquesequenceprofile_cg_typeschema_Technique_TxsdProfileCgTypeSequenceTechnique_                                                                                                                                                     func(*XsdGoPkgHasElems_techniquesequenceprofile_cg_typeschema_Technique_TxsdProfileCgTypeSequenceTechnique_, bool) error
	XsdGoPkgHasElem_zpasssequencestencil_opchoicegl_pipeline_settings_groupschema_Zpass_TxsdGlPipelineSettingsGroupChoiceStencilOpSequenceZpass_                                                                                                              func(*XsdGoPkgHasElem_zpasssequencestencil_opchoicegl_pipeline_settings_groupschema_Zpass_TxsdGlPipelineSettingsGroupChoiceStencilOpSequenceZpass_, bool) error
	TvisualSceneType                                                                                                                                                                                                                                          func(*TvisualSceneType, bool) error
	XsdGoPkgHasElem_half2x2choicecg_param_groupschema_Half2X2_Tfloat2X2Type_                                                                                                                                                                                  func(*XsdGoPkgHasElem_half2x2choicecg_param_groupschema_Half2X2_Tfloat2X2Type_, bool) error
	TmotionTechniqueType                                                                                                                                                                                                                                      func(*TmotionTechniqueType, bool) error
	TrigidBodyType                                                                                                                                                                                                                                            func(*TrigidBodyType, bool) error
	TxsdInstanceEffectTypeSequenceTechniqueHint                                                                                                                                                                                                               func(*TxsdInstanceEffectTypeSequenceTechniqueHint, bool) error
	TconeType                                                                                                                                                                                                                                                 func(*TconeType, bool) error
	XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegl_pipeline_settings_groupschema_SampleAlphaToCoverageEnable_TxsdGlPipelineSettingsGroupChoiceSampleAlphaToCoverageEnable_                                                                           func(*XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegl_pipeline_settings_groupschema_SampleAlphaToCoverageEnable_TxsdGlPipelineSettingsGroupChoiceSampleAlphaToCoverageEnable_, bool) error
	TinstanceRigidConstraintType                                                                                                                                                                                                                              func(*TinstanceRigidConstraintType, bool) error
	XsdGoPkgHasElem_subjectsequenceasset_typeschema_Subject_XsdtString_                                                                                                                                                                                       func(*XsdGoPkgHasElem_subjectsequenceasset_typeschema_Subject_XsdtString_, bool) error
	XsdGoPkgHasElem_clip_planechoicegles_pipeline_settings_groupschema_ClipPlane_TxsdGlesPipelineSettingsGroupChoiceClipPlane_                                                                                                                                func(*XsdGoPkgHasElem_clip_planechoicegles_pipeline_settings_groupschema_ClipPlane_TxsdGlesPipelineSettingsGroupChoiceClipPlane_, bool) error
	XsdGoPkgHasElem_maxsequencekinematics_limits_typeschema_Max_TcommonFloatOrParamType_                                                                                                                                                                      func(*XsdGoPkgHasElem_maxsequencekinematics_limits_typeschema_Max_TcommonFloatOrParamType_, bool) error
	XsdGoPkgHasElem_linear_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_LinearAttenuation_TtargetableFloatType_00                                                                                                                    func(*XsdGoPkgHasElem_linear_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_LinearAttenuation_TtargetableFloatType_00, bool) error
	XsdGoPkgHasElem_linearsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_Linear_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceLinear_                                                                        func(*XsdGoPkgHasElem_linearsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_Linear_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceLinear_, bool) error
	XsdGoPkgHasElem_bvec3choicegles2_value_groupschema_Bvec3_Tbool3Type_                                                                                                                                                                                      func(*XsdGoPkgHasElem_bvec3choicegles2_value_groupschema_Bvec3_Tbool3Type_, bool) error
	XsdGoPkgHasElems_kinematics_scenesequencelibrary_kinematics_scenes_typeschema_KinematicsScene_TkinematicsSceneType_                                                                                                                                       func(*XsdGoPkgHasElems_kinematics_scenesequencelibrary_kinematics_scenes_typeschema_KinematicsScene_TkinematicsSceneType_, bool) error
	TfxCommonTransparentType                                                                                                                                                                                                                                  func(*TfxCommonTransparentType, bool) error
	XsdGoPkgHasElem_half3x2choicecg_param_groupschema_Half3X2_Tfloat3X2Type_                                                                                                                                                                                  func(*XsdGoPkgHasElem_half3x2choicecg_param_groupschema_Half3X2_Tfloat3X2Type_, bool) error
	XsdGoPkgHasElem_clip_planechoicegl_pipeline_settings_groupschema_ClipPlane_TxsdGlPipelineSettingsGroupChoiceClipPlane_                                                                                                                                    func(*XsdGoPkgHasElem_clip_planechoicegl_pipeline_settings_groupschema_ClipPlane_TxsdGlPipelineSettingsGroupChoiceClipPlane_, bool) error
	XsdGoPkgHasElem_mip_min_levelsequencefx_sampler_states_groupschema_MipMinLevel_XsdtUnsignedByte_0                                                                                                                                                         func(*XsdGoPkgHasElem_mip_min_levelsequencefx_sampler_states_groupschema_MipMinLevel_XsdtUnsignedByte_0, bool) error
	TglslShaderType                                                                                                                                                                                                                                           func(*TglslShaderType, bool) error
	TidrefArrayType                                                                                                                                                                                                                                           func(*TidrefArrayType, bool) error
	TxsdGlPipelineSettingsGroupChoiceLightAmbient                                                                                                                                                                                                             func(*TxsdGlPipelineSettingsGroupChoiceLightAmbient, bool) error
	XsdGoPkgHasElem_parabolachoicesequencecurve_typeschema_Parabola_TparabolaType_                                                                                                                                                                            func(*XsdGoPkgHasElem_parabolachoicesequencecurve_typeschema_Parabola_TparabolaType_, bool) error
	XsdGoPkgHasElem_vertex_weightssequenceskin_typeschema_VertexWeights_TxsdSkinTypeSequenceVertexWeights_                                                                                                                                                    func(*XsdGoPkgHasElem_vertex_weightssequenceskin_typeschema_VertexWeights_TxsdSkinTypeSequenceVertexWeights_, bool) error
	TlibraryGeometriesType                                                                                                                                                                                                                                    func(*TlibraryGeometriesType, bool) error
	TprofileCommonType                                                                                                                                                                                                                                        func(*TprofileCommonType, bool) error
	XsdGoPkgHasElems_techniquesequenceprofile_glsl_typeschema_Technique_TxsdProfileGlslTypeSequenceTechnique_                                                                                                                                                 func(*XsdGoPkgHasElems_techniquesequenceprofile_glsl_typeschema_Technique_TxsdProfileGlslTypeSequenceTechnique_, bool) error
	XsdGoPkgHasElem_int3x2choicecg_param_groupschema_Int3X2_Tint3X2Type_                                                                                                                                                                                      func(*XsdGoPkgHasElem_int3x2choicecg_param_groupschema_Int3X2_Tint3X2Type_, bool) error
	TfxSamplerDEPTHType                                                                                                                                                                                                                                       func(*TfxSamplerDEPTHType, bool) error
	TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparate                                                                                                                                                                                                      func(*TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparate, bool) error
	XsdGoPkgHasElem_dither_enablechoicegl_pipeline_settings_groupschema_DitherEnable_TxsdGlPipelineSettingsGroupChoiceDitherEnable_                                                                                                                           func(*XsdGoPkgHasElem_dither_enablechoicegl_pipeline_settings_groupschema_DitherEnable_TxsdGlPipelineSettingsGroupChoiceDitherEnable_, bool) error
	TxsdImageTypeSequenceChoiceCreateCubeSequenceSize                                                                                                                                                                                                         func(*TxsdImageTypeSequenceChoiceCreateCubeSequenceSize, bool) error
	XsdGoPkgHasGroup_GlesPipelineSettingsGroup                                                                                                                                                                                                                func(*XsdGoPkgHasGroup_GlesPipelineSettingsGroup, bool) error
	TfxSamplerCUBEType                                                                                                                                                                                                                                        func(*TfxSamplerCUBEType, bool) error
	XsdGoPkgHasElem_index_of_refractionsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_IndexOfRefraction_TfxCommonFloatOrParamType_                                                                                                   func(*XsdGoPkgHasElem_index_of_refractionsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_IndexOfRefraction_TfxCommonFloatOrParamType_, bool) error
	TxsdGlslProgramTypeSequenceBindUniformChoiceParam                                                                                                                                                                                                         func(*TxsdGlslProgramTypeSequenceBindUniformChoiceParam, bool) error
	XsdGoPkgHasElems_library_materialschoicesequenceCOLLADAschema_LibraryMaterials_TlibraryMaterialsType_                                                                                                                                                     func(*XsdGoPkgHasElems_library_materialschoicesequenceCOLLADAschema_LibraryMaterials_TlibraryMaterialsType_, bool) error
	XsdGoPkgHasElem_create_cubechoicesequenceimage_typeschema_CreateCube_TxsdImageTypeSequenceChoiceCreateCube_                                                                                                                                               func(*XsdGoPkgHasElem_create_cubechoicesequenceimage_typeschema_CreateCube_TxsdImageTypeSequenceChoiceCreateCube_, bool) error
	XsdGoPkgHasElem_RGBsequencegles_texcombiner_command_typeschema_Rgb_TglesTexcombinerCommandRgbType_                                                                                                                                                        func(*XsdGoPkgHasElem_RGBsequencegles_texcombiner_command_typeschema_Rgb_TglesTexcombinerCommandRgbType_, bool) error
	XsdGoPkgHasElem_axissequencebind_joint_axis_typeschema_Axis_TcommonSidrefOrParamType_                                                                                                                                                                     func(*XsdGoPkgHasElem_axissequencebind_joint_axis_typeschema_Axis_TcommonSidrefOrParamType_, bool) error
	TaxisType                                                                                                                                                                                                                                                 func(*TaxisType, bool) error
	TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeRatio                                                                                                                                                                                                func(*TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeRatio, bool) error
	TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceEvaluate                                                                                                                                                                                          func(*TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceEvaluate, bool) error
	XsdGoPkgHasElem_refsequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Ref_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef_                                                                                               func(*XsdGoPkgHasElem_refsequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Ref_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef_, bool) error
	TxsdGlPipelineSettingsGroupChoicePolygonMode                                                                                                                                                                                                              func(*TxsdGlPipelineSettingsGroupChoicePolygonMode, bool) error
	XsdGoPkgHasElem_float4choicefx_annotate_groupschema_Float4_Tfloat4Type_                                                                                                                                                                                   func(*XsdGoPkgHasElem_float4choicefx_annotate_groupschema_Float4_Tfloat4Type_, bool) error
	XsdGoPkgHasElems_animation_clipsequencelibrary_animation_clips_typeschema_AnimationClip_TanimationClipType_                                                                                                                                               func(*XsdGoPkgHasElems_animation_clipsequencelibrary_animation_clips_typeschema_AnimationClip_TanimationClipType_, bool) error
	XsdGoPkgHasElem_wrap_tsequencefx_sampler_states_groupschema_WrapT_TfxSamplerWrapEnum_Wrap                                                                                                                                                                 func(*XsdGoPkgHasElem_wrap_tsequencefx_sampler_states_groupschema_WrapT_TfxSamplerWrapEnum_Wrap, bool) error
	XsdGoPkgHasElem_cull_face_enablechoicegles_pipeline_settings_groupschema_CullFaceEnable_TxsdGlesPipelineSettingsGroupChoiceCullFaceEnable_                                                                                                                func(*XsdGoPkgHasElem_cull_face_enablechoicegles_pipeline_settings_groupschema_CullFaceEnable_TxsdGlesPipelineSettingsGroupChoiceCullFaceEnable_, bool) error
	TjointType                                                                                                                                                                                                                                                func(*TjointType, bool) error
	XsdGoPkgHasElem_wrap_psequencefx_sampler_states_groupschema_WrapP_TfxSamplerWrapEnum_Wrap                                                                                                                                                                 func(*XsdGoPkgHasElem_wrap_psequencefx_sampler_states_groupschema_WrapP_TfxSamplerWrapEnum_Wrap, bool) error
	TbindMaterialType                                                                                                                                                                                                                                         func(*TbindMaterialType, bool) error
	XsdGoPkgHasElem_author_websitesequencecontributorsequenceasset_typeschema_AuthorWebsite_XsdtAnyURI_                                                                                                                                                       func(*XsdGoPkgHasElem_author_websitesequencecontributorsequenceasset_typeschema_AuthorWebsite_XsdtAnyURI_, bool) error
	XsdGoPkgHasElems_instance_nodesequencenode_typeschema_InstanceNode_TinstanceNodeType_                                                                                                                                                                     func(*XsdGoPkgHasElems_instance_nodesequencenode_typeschema_InstanceNode_TinstanceNodeType_, bool) error
	Tgles2ProgramType                                                                                                                                                                                                                                         func(*Tgles2ProgramType, bool) error
	TmatrixType                                                                                                                                                                                                                                               func(*TmatrixType, bool) error
	TcommonBoolOrParamType                                                                                                                                                                                                                                    func(*TcommonBoolOrParamType, bool) error
	XsdGoPkgHasElem_light_enablechoicegl_pipeline_settings_groupschema_LightEnable_TxsdGlPipelineSettingsGroupChoiceLightEnable_                                                                                                                              func(*XsdGoPkgHasElem_light_enablechoicegl_pipeline_settings_groupschema_LightEnable_TxsdGlPipelineSettingsGroupChoiceLightEnable_, bool) error
	TxsdFxSetparamGroupChoiceSamplerStates                                                                                                                                                                                                                    func(*TxsdFxSetparamGroupChoiceSamplerStates, bool) error
	XsdGoPkgHasElem_light_model_local_viewer_enablechoicegl_pipeline_settings_groupschema_LightModelLocalViewerEnable_TxsdGlPipelineSettingsGroupChoiceLightModelLocalViewerEnable_                                                                           func(*XsdGoPkgHasElem_light_model_local_viewer_enablechoicegl_pipeline_settings_groupschema_LightModelLocalViewerEnable_TxsdGlPipelineSettingsGroupChoiceLightModelLocalViewerEnable_, bool) error
	XsdGoPkgHasElem_fixed4x3choicecg_param_groupschema_Fixed4X3_Tfloat4X3Type_                                                                                                                                                                                func(*XsdGoPkgHasElem_fixed4x3choicecg_param_groupschema_Fixed4X3_Tfloat4X3Type_, bool) error
	TfxRendertargetType                                                                                                                                                                                                                                       func(*TfxRendertargetType, bool) error
	XsdGoPkgHasElem_size_ratiochoicesequencecreate_2dchoicesequenceimage_typeschema_SizeRatio_TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeRatio_                                                                                                     func(*XsdGoPkgHasElem_size_ratiochoicesequencecreate_2dchoicesequenceimage_typeschema_SizeRatio_TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeRatio_, bool) error
	XsdGoPkgHasElem_revisionsequenceasset_typeschema_Revision_XsdtString_                                                                                                                                                                                     func(*XsdGoPkgHasElem_revisionsequenceasset_typeschema_Revision_XsdtString_, bool) error
	XsdGoPkgHasElem_enumchoiceglsl_value_groupschema_Enum_TglEnumerationType_                                                                                                                                                                                 func(*XsdGoPkgHasElem_enumchoiceglsl_value_groupschema_Enum_TglEnumerationType_, bool) error
	XsdGoPkgHasElem_projection_matrixchoicegl_pipeline_settings_groupschema_ProjectionMatrix_TxsdGlPipelineSettingsGroupChoiceProjectionMatrix_                                                                                                               func(*XsdGoPkgHasElem_projection_matrixchoicegl_pipeline_settings_groupschema_ProjectionMatrix_TxsdGlPipelineSettingsGroupChoiceProjectionMatrix_, bool) error
	XsdGoPkgHasElem_light_spot_exponentchoicegles_pipeline_settings_groupschema_LightSpotExponent_TxsdGlesPipelineSettingsGroupChoiceLightSpotExponent_                                                                                                       func(*XsdGoPkgHasElem_light_spot_exponentchoicegles_pipeline_settings_groupschema_LightSpotExponent_TxsdGlesPipelineSettingsGroupChoiceLightSpotExponent_, bool) error
	XsdGoPkgHasElem_int3x4choicecg_param_groupschema_Int3X4_Tint3X4Type_                                                                                                                                                                                      func(*XsdGoPkgHasElem_int3x4choicecg_param_groupschema_Int3X4_Tint3X4Type_, bool) error
	XsdGoPkgHasElem_sample_coverage_enablechoicegles2_pipeline_settings_groupschema_SampleCoverageEnable_TxsdGles2PipelineSettingsGroupChoiceSampleCoverageEnable_                                                                                            func(*XsdGoPkgHasElem_sample_coverage_enablechoicegles2_pipeline_settings_groupschema_SampleCoverageEnable_TxsdGles2PipelineSettingsGroupChoiceSampleCoverageEnable_, bool) error
	XsdGoPkgHasElems_polylistchoicesequencemesh_typeschema_Polylist_TpolylistType_                                                                                                                                                                            func(*XsdGoPkgHasElems_polylistchoicesequencemesh_typeschema_Polylist_TpolylistType_, bool) error
	TlibraryMaterialsType                                                                                                                                                                                                                                     func(*TlibraryMaterialsType, bool) error
	TxsdImageTypeSequenceChoiceCreateCube                                                                                                                                                                                                                     func(*TxsdImageTypeSequenceChoiceCreateCube, bool) error
	XsdGoPkgHasElem_formatsequencecreate_3dchoicesequenceimage_typeschema_Format_TxsdImageTypeSequenceChoiceCreate3DSequenceFormat_                                                                                                                           func(*XsdGoPkgHasElem_formatsequencecreate_3dchoicesequenceimage_typeschema_Format_TxsdImageTypeSequenceChoiceCreate3DSequenceFormat_, bool) error
	XsdGoPkgHasElem_techniquesequenceprofile_common_typeschema_Technique_TxsdProfileCommonTypeSequenceTechnique_                                                                                                                                              func(*XsdGoPkgHasElem_techniquesequenceprofile_common_typeschema_Technique_TxsdProfileCommonTypeSequenceTechnique_, bool) error
	XsdGoPkgHasElem_hyperbolachoicesequencecurve_typeschema_Hyperbola_ThyperbolaType_                                                                                                                                                                         func(*XsdGoPkgHasElem_hyperbolachoicesequencecurve_typeschema_Hyperbola_ThyperbolaType_, bool) error
	XsdGoPkgHasElem_texture1D_enablechoicegl_pipeline_settings_groupschema_Texture1DEnable_TxsdGlPipelineSettingsGroupChoiceTexture1DEnable_                                                                                                                  func(*XsdGoPkgHasElem_texture1D_enablechoicegl_pipeline_settings_groupschema_Texture1DEnable_TxsdGlPipelineSettingsGroupChoiceTexture1DEnable_, bool) error
	XsdGoPkgHasElem_authoring_toolsequencecontributorsequenceasset_typeschema_AuthoringTool_XsdtString_                                                                                                                                                       func(*XsdGoPkgHasElem_authoring_toolsequencecontributorsequenceasset_typeschema_AuthoringTool_XsdtString_, bool) error
	XsdGoPkgHasElems_polygonschoicesequencemesh_typeschema_Polygons_TpolygonsType_                                                                                                                                                                            func(*XsdGoPkgHasElems_polygonschoicesequencemesh_typeschema_Polygons_TpolygonsType_, bool) error
	XsdGoPkgHasElem_light_spot_directionchoicegles_pipeline_settings_groupschema_LightSpotDirection_TxsdGlesPipelineSettingsGroupChoiceLightSpotDirection_                                                                                                    func(*XsdGoPkgHasElem_light_spot_directionchoicegles_pipeline_settings_groupschema_LightSpotDirection_TxsdGlesPipelineSettingsGroupChoiceLightSpotDirection_, bool) error
	XsdGoPkgHasElem_mipfiltersequencefx_sampler_states_groupschema_Mipfilter_TfxSamplerMipFilterEnum_Linear                                                                                                                                                   func(*XsdGoPkgHasElem_mipfiltersequencefx_sampler_states_groupschema_Mipfilter_TfxSamplerMipFilterEnum_Linear, bool) error
	XsdGoPkgHasElem_latitudesequencegeographic_locationsequencecoveragesequenceasset_typeschema_Latitude_XsdtFloat_                                                                                                                                           func(*XsdGoPkgHasElem_latitudesequencegeographic_locationsequencecoveragesequenceasset_typeschema_Latitude_XsdtFloat_, bool) error
	TcurveType                                                                                                                                                                                                                                                func(*TcurveType, bool) error
	XsdGoPkgHasElem_half2x1choicecg_param_groupschema_Half2X1_Tfloat2Type_                                                                                                                                                                                    func(*XsdGoPkgHasElem_half2x1choicecg_param_groupschema_Half2X1_Tfloat2Type_, bool) error
	XsdGoPkgHasElems_skewchoicesequencenode_typeschema_Skew_TskewType_                                                                                                                                                                                        func(*XsdGoPkgHasElems_skewchoicesequencenode_typeschema_Skew_TskewType_, bool) error
	XsdGoPkgHasElem_curvessequencebrep_typeschema_Curves_TcurvesType_                                                                                                                                                                                         func(*XsdGoPkgHasElem_curvessequencebrep_typeschema_Curves_TcurvesType_, bool) error
	XsdGoPkgHasElem_coveragesequenceasset_typeschema_Coverage_TxsdAssetTypeSequenceCoverage_                                                                                                                                                                  func(*XsdGoPkgHasElem_coveragesequenceasset_typeschema_Coverage_TxsdAssetTypeSequenceCoverage_, bool) error
	XsdGoPkgHasGroup_Gles2PipelineSettingsGroup                                                                                                                                                                                                               func(*XsdGoPkgHasGroup_Gles2PipelineSettingsGroup, bool) error
	XsdGoPkgHasElem_frame_tipsequencekinematics_technique_typeschema_FrameTip_TkinematicsFrameType_                                                                                                                                                           func(*XsdGoPkgHasElem_frame_tipsequencekinematics_technique_typeschema_FrameTip_TkinematicsFrameType_, bool) error
	XsdGoPkgHasElem_xmagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Xmag_TtargetableFloatType_                                                                                                            func(*XsdGoPkgHasElem_xmagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Xmag_TtargetableFloatType_, bool) error
	XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_                                                                                                                                                                                           func(*XsdGoPkgHasElem_assetsequenceextra_typeschema_Asset_TassetType_, bool) error
	XsdGoPkgHasElem_formatsequencecreate_cubechoicesequenceimage_typeschema_Format_TxsdImageTypeSequenceChoiceCreateCubeSequenceFormat_                                                                                                                       func(*XsdGoPkgHasElem_formatsequencecreate_cubechoicesequenceimage_typeschema_Format_TxsdImageTypeSequenceChoiceCreateCubeSequenceFormat_, bool) error
	XsdGoPkgHasElems_bind_uniformsequencegles2_program_typeschema_BindUniform_TxsdGles2ProgramTypeSequenceBindUniform_                                                                                                                                        func(*XsdGoPkgHasElems_bind_uniformsequencegles2_program_typeschema_BindUniform_TxsdGles2ProgramTypeSequenceBindUniform_, bool) error
	XsdGoPkgHasElem_paramchoicebind_uniformsequencegles2_program_typeschema_Param_TxsdGles2ProgramTypeSequenceBindUniformChoiceParam_                                                                                                                         func(*XsdGoPkgHasElem_paramchoicebind_uniformsequencegles2_program_typeschema_Param_TxsdGles2ProgramTypeSequenceBindUniformChoiceParam_, bool) error
	TxsdGlesPipelineSettingsGroupChoiceLightQuadraticAttenuation                                                                                                                                                                                              func(*TxsdGlesPipelineSettingsGroupChoiceLightQuadraticAttenuation, bool) error
	XsdGoPkgHasElems_layersequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_Layer_XsdtNCName_                                                                                                                                               func(*XsdGoPkgHasElems_layersequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_Layer_XsdtNCName_, bool) error
	XsdGoPkgHasElem_float2x1choicegles_param_groupschema_Float2X1_Tfloat2Type_                                                                                                                                                                                func(*XsdGoPkgHasElem_float2x1choicegles_param_groupschema_Float2X1_Tfloat2Type_, bool) error
	XsdGoPkgHasElems_formulachoicesequencekinematics_model_technique_typeschema_Formula_TformulaType_                                                                                                                                                         func(*XsdGoPkgHasElems_formulachoicesequencekinematics_model_technique_typeschema_Formula_TformulaType_, bool) error
	XsdGoPkgHasElem_half4x4choicecg_param_groupschema_Half4X4_Tfloat4X4Type_                                                                                                                                                                                  func(*XsdGoPkgHasElem_half4x4choicecg_param_groupschema_Half4X4_Tfloat4X4Type_, bool) error
	XsdGoPkgHasElem_arraychoicecg_param_groupschema_Array_TcgArrayType_                                                                                                                                                                                       func(*XsdGoPkgHasElem_arraychoicecg_param_groupschema_Array_TcgArrayType_, bool) error
	XsdGoPkgHasElem_accelerationsequencemotion_effector_info_typeschema_Acceleration_TcommonFloat2OrParamType_                                                                                                                                                func(*XsdGoPkgHasElem_accelerationsequencemotion_effector_info_typeschema_Acceleration_TcommonFloat2OrParamType_, bool) error
	XsdGoPkgHasElem_jointssequenceskin_typeschema_Joints_TxsdSkinTypeSequenceJoints_                                                                                                                                                                          func(*XsdGoPkgHasElem_jointssequenceskin_typeschema_Joints_TxsdSkinTypeSequenceJoints_, bool) error
	TxsdRigidBodyTypeSequenceTechniqueCommonSequenceShape                                                                                                                                                                                                     func(*TxsdRigidBodyTypeSequenceTechniqueCommonSequenceShape, bool) error
	TxsdImageTypeSequenceChoiceCreate3D                                                                                                                                                                                                                       func(*TxsdImageTypeSequenceChoiceCreate3D, bool) error
	XsdGoPkgHasElem_cull_facechoicegl_pipeline_settings_groupschema_CullFace_TxsdGlPipelineSettingsGroupChoiceCullFace_                                                                                                                                       func(*XsdGoPkgHasElem_cull_facechoicegl_pipeline_settings_groupschema_CullFace_TxsdGlPipelineSettingsGroupChoiceCullFace_, bool) error
	XsdGoPkgHasElem_light_model_ambientchoicegles_pipeline_settings_groupschema_LightModelAmbient_TxsdGlesPipelineSettingsGroupChoiceLightModelAmbient_                                                                                                       func(*XsdGoPkgHasElem_light_model_ambientchoicegles_pipeline_settings_groupschema_LightModelAmbient_TxsdGlesPipelineSettingsGroupChoiceLightModelAmbient_, bool) error
	XsdGoPkgHasElems_shadersequenceglsl_program_typeschema_Shader_TglslShaderType_                                                                                                                                                                            func(*XsdGoPkgHasElems_shadersequenceglsl_program_typeschema_Shader_TglslShaderType_, bool) error
	XsdGoPkgHasElem_light_specularchoicegles_pipeline_settings_groupschema_LightSpecular_TxsdGlesPipelineSettingsGroupChoiceLightSpecular_                                                                                                                    func(*XsdGoPkgHasElem_light_specularchoicegles_pipeline_settings_groupschema_LightSpecular_TxsdGlesPipelineSettingsGroupChoiceLightSpecular_, bool) error
	XsdGoPkgHasElems_library_nodeschoicesequenceCOLLADAschema_LibraryNodes_TlibraryNodesType_                                                                                                                                                                 func(*XsdGoPkgHasElems_library_nodeschoicesequenceCOLLADAschema_LibraryNodes_TlibraryNodesType_, bool) error
	XsdGoPkgHasElem_stencil_opchoicegles2_pipeline_settings_groupschema_StencilOp_TxsdGles2PipelineSettingsGroupChoiceStencilOp_                                                                                                                              func(*XsdGoPkgHasElem_stencil_opchoicegles2_pipeline_settings_groupschema_StencilOp_TxsdGles2PipelineSettingsGroupChoiceStencilOp_, bool) error
	XsdGoPkgHasElems_linestripschoicesequencemesh_typeschema_Linestrips_TlinestripsType_                                                                                                                                                                      func(*XsdGoPkgHasElems_linestripschoicesequencemesh_typeschema_Linestrips_TlinestripsType_, bool) error
	XsdGoPkgHasElem_polygon_modechoicegl_pipeline_settings_groupschema_PolygonMode_TxsdGlPipelineSettingsGroupChoicePolygonMode_                                                                                                                              func(*XsdGoPkgHasElem_polygon_modechoicegl_pipeline_settings_groupschema_PolygonMode_TxsdGlPipelineSettingsGroupChoicePolygonMode_, bool) error
	XsdGoPkgHasElem_convex_meshchoicesequencegeometry_typeschema_ConvexMesh_TconvexMeshType_                                                                                                                                                                  func(*XsdGoPkgHasElem_convex_meshchoicesequencegeometry_typeschema_ConvexMesh_TconvexMeshType_, bool) error
	TxsdGlPipelineSettingsGroupChoiceLightEnable                                                                                                                                                                                                              func(*TxsdGlPipelineSettingsGroupChoiceLightEnable, bool) error
	XsdGoPkgHasElems_channelsequencechoicesequencechoicesequenceanimation_typeschema_Channel_TchannelType_                                                                                                                                                    func(*XsdGoPkgHasElems_channelsequencechoicesequencechoicesequenceanimation_typeschema_Channel_TchannelType_, bool) error
	TpType                                                                                                                                                                                                                                                    func(*TpType, bool) error
	XsdGoPkgHasElems_extrasequenceasset_typeschema_Extra_TextraType_                                                                                                                                                                                          func(*XsdGoPkgHasElems_extrasequenceasset_typeschema_Extra_TextraType_, bool) error
	TinstanceArticulatedSystemType                                                                                                                                                                                                                            func(*TinstanceArticulatedSystemType, bool) error
	XsdGoPkgHasElem_logic_op_enablechoicegl_pipeline_settings_groupschema_LogicOpEnable_TxsdGlPipelineSettingsGroupChoiceLogicOpEnable_                                                                                                                       func(*XsdGoPkgHasElem_logic_op_enablechoicegl_pipeline_settings_groupschema_LogicOpEnable_TxsdGlPipelineSettingsGroupChoiceLogicOpEnable_, bool) error
	XsdGoPkgHasElem_dynamic_frictionsequencetechnique_commonsequencephysics_material_typeschema_DynamicFriction_TtargetableFloatType_                                                                                                                         func(*XsdGoPkgHasElem_dynamic_frictionsequencetechnique_commonsequencephysics_material_typeschema_DynamicFriction_TtargetableFloatType_, bool) error
	XsdGoPkgHasElem_polygon_offsetchoicegles_pipeline_settings_groupschema_PolygonOffset_TxsdGlesPipelineSettingsGroupChoicePolygonOffset_                                                                                                                    func(*XsdGoPkgHasElem_polygon_offsetchoicegles_pipeline_settings_groupschema_PolygonOffset_TxsdGlesPipelineSettingsGroupChoicePolygonOffset_, bool) error
	XsdGoPkgHasElem_float4x1choicegles_param_groupschema_Float4X1_Tfloat4Type_                                                                                                                                                                                func(*XsdGoPkgHasElem_float4x1choicegles_param_groupschema_Float4X1_Tfloat4Type_, bool) error
	XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TcommonParamType_                                                                                                                                                                       func(*XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TcommonParamType_, bool) error
	XsdGoPkgHasElem_polygon_offsetchoicegl_pipeline_settings_groupschema_PolygonOffset_TxsdGlPipelineSettingsGroupChoicePolygonOffset_                                                                                                                        func(*XsdGoPkgHasElem_polygon_offsetchoicegl_pipeline_settings_groupschema_PolygonOffset_TxsdGlPipelineSettingsGroupChoicePolygonOffset_, bool) error
	XsdGoPkgHasElem_failsequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Fail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceFail_                                                                                          func(*XsdGoPkgHasElem_failsequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Fail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceFail_, bool) error
	XsdGoPkgHasElem_int2x1choicecg_param_groupschema_Int2X1_Tint2Type_                                                                                                                                                                                        func(*XsdGoPkgHasElem_int2x1choicecg_param_groupschema_Int2X1_Tint2Type_, bool) error
	XsdGoPkgHasElems_contributorsequenceasset_typeschema_Contributor_TxsdAssetTypeSequenceContributor_                                                                                                                                                        func(*XsdGoPkgHasElems_contributorsequenceasset_typeschema_Contributor_TxsdAssetTypeSequenceContributor_, bool) error
	XsdGoPkgHasElem_size_exactchoicesequencecreate_2dchoicesequenceimage_typeschema_SizeExact_TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeExact_                                                                                                     func(*XsdGoPkgHasElem_size_exactchoicesequencecreate_2dchoicesequenceimage_typeschema_SizeExact_TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeExact_, bool) error
	XsdGoPkgHasElems_bindsequenceinstance_kinematics_model_typeschema_Bind_TkinematicsBindType_                                                                                                                                                               func(*XsdGoPkgHasElems_bindsequenceinstance_kinematics_model_typeschema_Bind_TkinematicsBindType_, bool) error
	TxsdGlesPipelineSettingsGroupChoiceAlphaFunc                                                                                                                                                                                                              func(*TxsdGlesPipelineSettingsGroupChoiceAlphaFunc, bool) error
	XsdGoPkgHasElem_funcsequencealpha_funcchoicegl_pipeline_settings_groupschema_Func_TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceFunc_                                                                                                                 func(*XsdGoPkgHasElem_funcsequencealpha_funcchoicegl_pipeline_settings_groupschema_Func_TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceFunc_, bool) error
	XsdGoPkgHasElem_float3x2choicegles_param_groupschema_Float3X2_Tfloat3X2Type_                                                                                                                                                                              func(*XsdGoPkgHasElem_float3x2choicegles_param_groupschema_Float3X2_Tfloat3X2Type_, bool) error
	XsdGoPkgHasElem_fixed4x1choicecg_param_groupschema_Fixed4X1_Tfloat4Type_                                                                                                                                                                                  func(*XsdGoPkgHasElem_fixed4x1choicecg_param_groupschema_Fixed4X1_Tfloat4Type_, bool) error
	XsdGoPkgHasElem_float1x3choicegles_param_groupschema_Float1X3_Tfloat3Type_                                                                                                                                                                                func(*XsdGoPkgHasElem_float1x3choicegles_param_groupschema_Float1X3_Tfloat3Type_, bool) error
	XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Density_TtargetableFloatType_                                                                                                                          func(*XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Density_TtargetableFloatType_, bool) error
	XsdGoPkgHasElem_transparencysequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Transparency_TfxCommonFloatOrParamType_                                                                                                               func(*XsdGoPkgHasElem_transparencysequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Transparency_TfxCommonFloatOrParamType_, bool) error
	XsdGoPkgHasElem_connect_paramchoiceformula_setparam_typeschema_ConnectParam_TkinematicsConnectParamType_                                                                                                                                                  func(*XsdGoPkgHasElem_connect_paramchoiceformula_setparam_typeschema_ConnectParam_TkinematicsConnectParamType_, bool) error
	XsdGoPkgHasElem_alpha_funcchoicegles_pipeline_settings_groupschema_AlphaFunc_TxsdGlesPipelineSettingsGroupChoiceAlphaFunc_                                                                                                                                func(*XsdGoPkgHasElem_alpha_funcchoicegles_pipeline_settings_groupschema_AlphaFunc_TxsdGlesPipelineSettingsGroupChoiceAlphaFunc_, bool) error
	XsdGoPkgHasElem_cull_facechoicegles2_pipeline_settings_groupschema_CullFace_TxsdGles2PipelineSettingsGroupChoiceCullFace_                                                                                                                                 func(*XsdGoPkgHasElem_cull_facechoicegles2_pipeline_settings_groupschema_CullFace_TxsdGles2PipelineSettingsGroupChoiceCullFace_, bool) error
	XsdGoPkgHasElem_vsequencevertex_weightssequenceskin_typeschema_V_TlistOfIntsType_                                                                                                                                                                         func(*XsdGoPkgHasElem_vsequencevertex_weightssequenceskin_typeschema_V_TlistOfIntsType_, bool) error
	TxsdImageTypeSequenceChoiceInitFrom                                                                                                                                                                                                                       func(*TxsdImageTypeSequenceChoiceInitFrom, bool) error
	XsdGoPkgHasElem_ivec3choicegles2_value_groupschema_Ivec3_Tint3Type_                                                                                                                                                                                       func(*XsdGoPkgHasElem_ivec3choicegles2_value_groupschema_Ivec3_Tint3Type_, bool) error
	TxsdGlPipelineSettingsGroupChoiceLightSpotDirection                                                                                                                                                                                                       func(*TxsdGlPipelineSettingsGroupChoiceLightSpotDirection, bool) error
	XsdGoPkgHasElems_shadersequencegles2_program_typeschema_Shader_Tgles2ShaderType_                                                                                                                                                                          func(*XsdGoPkgHasElems_shadersequencegles2_program_typeschema_Shader_Tgles2ShaderType_, bool) error
	TxsdLightTypeSequenceTechniqueCommonChoiceDirectional                                                                                                                                                                                                     func(*TxsdLightTypeSequenceTechniqueCommonChoiceDirectional, bool) error
	XsdGoPkgHasElem_binarysequencefx_target_typeschema_Binary_TxsdFxTargetTypeSequenceBinary_                                                                                                                                                                 func(*XsdGoPkgHasElem_binarysequencefx_target_typeschema_Binary_TxsdFxTargetTypeSequenceBinary_, bool) error
	XsdGoPkgHasElem_light_constant_attenuationchoicegl_pipeline_settings_groupschema_LightConstantAttenuation_TxsdGlPipelineSettingsGroupChoiceLightConstantAttenuation_                                                                                      func(*XsdGoPkgHasElem_light_constant_attenuationchoicegl_pipeline_settings_groupschema_LightConstantAttenuation_TxsdGlPipelineSettingsGroupChoiceLightConstantAttenuation_, bool) error
	XsdGoPkgHasElem_instance_articulated_systemsequencemotion_typeschema_InstanceArticulatedSystem_TinstanceArticulatedSystemType_                                                                                                                            func(*XsdGoPkgHasElem_instance_articulated_systemsequencemotion_typeschema_InstanceArticulatedSystem_TinstanceArticulatedSystemType_, bool) error
	TcommonFloatOrParamType                                                                                                                                                                                                                                   func(*TcommonFloatOrParamType, bool) error
	TxsdGlesPipelineSettingsGroupChoiceLightSpecular                                                                                                                                                                                                          func(*TxsdGlesPipelineSettingsGroupChoiceLightSpecular, bool) error
	TxsdGlPipelineSettingsGroupChoiceFrontFace                                                                                                                                                                                                                func(*TxsdGlPipelineSettingsGroupChoiceFrontFace, bool) error
	XsdGoPkgHasElem_technique_commonsequenceopticssequencecamera_typeschema_TechniqueCommon_TxsdCameraTypeSequenceOpticsSequenceTechniqueCommon_                                                                                                              func(*XsdGoPkgHasElem_technique_commonsequenceopticssequencecamera_typeschema_TechniqueCommon_TxsdCameraTypeSequenceOpticsSequenceTechniqueCommon_, bool) error
	XsdGoPkgHasElem_valuechoicetexture1Dchoicegl_pipeline_settings_groupschema_Value_TfxSampler1DType_                                                                                                                                                        func(*XsdGoPkgHasElem_valuechoicetexture1Dchoicegl_pipeline_settings_groupschema_Value_TfxSampler1DType_, bool) error
	XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_SrcRgb_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcRgb_                                                                                   func(*XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_SrcRgb_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcRgb_, bool) error
	TfxSourcesType                                                                                                                                                                                                                                            func(*TfxSourcesType, bool) error
	TxsdLinkTypeSequenceChoiceAttachmentEnd                                                                                                                                                                                                                   func(*TxsdLinkTypeSequenceChoiceAttachmentEnd, bool) error
	XsdGoPkgHasElem_shade_modelchoicegl_pipeline_settings_groupschema_ShadeModel_TxsdGlPipelineSettingsGroupChoiceShadeModel_                                                                                                                                 func(*XsdGoPkgHasElem_shade_modelchoicegl_pipeline_settings_groupschema_ShadeModel_TxsdGlPipelineSettingsGroupChoiceShadeModel_, bool) error
	TinstanceWithExtraType                                                                                                                                                                                                                                    func(*TinstanceWithExtraType, bool) error
	XsdGoPkgHasElem_planechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Plane_TplaneType_                                                                                                                                  func(*XsdGoPkgHasElem_planechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Plane_TplaneType_, bool) error
	TanimationType                                                                                                                                                                                                                                            func(*TanimationType, bool) error
	XsdGoPkgHasElem_line_widthchoicegles_pipeline_settings_groupschema_LineWidth_TxsdGlesPipelineSettingsGroupChoiceLineWidth_                                                                                                                                func(*XsdGoPkgHasElem_line_widthchoicegles_pipeline_settings_groupschema_LineWidth_TxsdGlesPipelineSettingsGroupChoiceLineWidth_, bool) error
	XsdGoPkgHasElem_focalsequenceparabola_typeschema_Focal_TfloatType_                                                                                                                                                                                        func(*XsdGoPkgHasElem_focalsequenceparabola_typeschema_Focal_TfloatType_, bool) error
	XsdGoPkgHasElem_invertsequencesample_coveragechoicegles2_pipeline_settings_groupschema_Invert_TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceInvert_                                                                                           func(*XsdGoPkgHasElem_invertsequencesample_coveragechoicegles2_pipeline_settings_groupschema_Invert_TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceInvert_, bool) error
	TxsdGles2PassTypeSequenceStates                                                                                                                                                                                                                           func(*TxsdGles2PassTypeSequenceStates, bool) error
	XsdGoPkgHasElem_dynamicsequencetechnique_commonsequenceinstance_rigid_body_typeschema_Dynamic_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceDynamic_True                                                                                        func(*XsdGoPkgHasElem_dynamicsequencetechnique_commonsequenceinstance_rigid_body_typeschema_Dynamic_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceDynamic_True, bool) error
	XsdGoPkgHasElem_border_colorsequencefx_sampler_states_groupschema_BorderColor_TfxColorType_                                                                                                                                                               func(*XsdGoPkgHasElem_border_colorsequencefx_sampler_states_groupschema_BorderColor_TfxColorType_, bool) error
	XsdGoPkgHasElem_mipfiltersequencegles_sampler_states_groupschema_Mipfilter_TfxSamplerMipFilterEnum_Nearest                                                                                                                                                func(*XsdGoPkgHasElem_mipfiltersequencegles_sampler_states_groupschema_Mipfilter_TfxSamplerMipFilterEnum_Nearest, bool) error
	XsdGoPkgHasElems_library_effectschoicesequenceCOLLADAschema_LibraryEffects_TlibraryEffectsType_                                                                                                                                                           func(*XsdGoPkgHasElems_library_effectschoicesequenceCOLLADAschema_LibraryEffects_TlibraryEffectsType_, bool) error
	XsdGoPkgHasElem_evaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_Evaluate_TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceEvaluate_                                                                                           func(*XsdGoPkgHasElem_evaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_Evaluate_TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceEvaluate_, bool) error
	XsdGoPkgHasElem_float4x4choicefx_annotate_groupschema_Float4X4_Tfloat4X4Type_                                                                                                                                                                             func(*XsdGoPkgHasElem_float4x4choicefx_annotate_groupschema_Float4X4_Tfloat4X4Type_, bool) error
	TbrepType                                                                                                                                                                                                                                                 func(*TbrepType, bool) error
	XsdGoPkgHasElem_sourcessequenceglsl_shader_typeschema_Sources_TfxSourcesType_                                                                                                                                                                             func(*XsdGoPkgHasElem_sourcessequenceglsl_shader_typeschema_Sources_TfxSourcesType_, bool) error
	XsdGoPkgHasElem_semanticsequenceglsl_newparam_typeschema_Semantic_XsdtNCName_                                                                                                                                                                             func(*XsdGoPkgHasElem_semanticsequenceglsl_newparam_typeschema_Semantic_XsdtNCName_, bool) error
	XsdGoPkgHasElem_geographic_locationsequencecoveragesequenceasset_typeschema_GeographicLocation_TxsdAssetTypeSequenceCoverageSequenceGeographicLocation_                                                                                                   func(*XsdGoPkgHasElem_geographic_locationsequencecoveragesequenceasset_typeschema_GeographicLocation_TxsdAssetTypeSequenceCoverageSequenceGeographicLocation_, bool) error
	TkinematicsLimitsType                                                                                                                                                                                                                                     func(*TkinematicsLimitsType, bool) error
	XsdGoPkgHasElems_library_imageschoicesequenceCOLLADAschema_LibraryImages_TlibraryImagesType_                                                                                                                                                              func(*XsdGoPkgHasElems_library_imageschoicesequenceCOLLADAschema_LibraryImages_TlibraryImagesType_, bool) error
	XsdGoPkgHasElem_point_smooth_enablechoicegl_pipeline_settings_groupschema_PointSmoothEnable_TxsdGlPipelineSettingsGroupChoicePointSmoothEnable_                                                                                                           func(*XsdGoPkgHasElem_point_smooth_enablechoicegl_pipeline_settings_groupschema_PointSmoothEnable_TxsdGlPipelineSettingsGroupChoicePointSmoothEnable_, bool) error
	TxsdGlPipelineSettingsGroupChoiceLightSpotCutoff                                                                                                                                                                                                          func(*TxsdGlPipelineSettingsGroupChoiceLightSpotCutoff, bool) error
	TxsdGles2PipelineSettingsGroupChoiceSampleCoverage                                                                                                                                                                                                        func(*TxsdGles2PipelineSettingsGroupChoiceSampleCoverage, bool) error
	TxsdSurfaceTypeSequenceChoiceCylinder                                                                                                                                                                                                                     func(*TxsdSurfaceTypeSequenceChoiceCylinder, bool) error
	XsdGoPkgHasElem_statessequencepasssequencetechniquesequenceprofile_gles_typeschema_States_TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceStates_                                                                                                 func(*XsdGoPkgHasElem_statessequencepasssequencetechniquesequenceprofile_gles_typeschema_States_TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceStates_, bool) error
	TxsdGlesPipelineSettingsGroupChoiceLightSpotCutoff                                                                                                                                                                                                        func(*TxsdGlesPipelineSettingsGroupChoiceLightSpotCutoff, bool) error
	XsdGoPkgHasElem_SIDREFchoicekinematics_newparam_typeschema_Sidref_TsidrefType_                                                                                                                                                                            func(*XsdGoPkgHasElem_SIDREFchoicekinematics_newparam_typeschema_Sidref_TsidrefType_, bool) error
	XsdGoPkgHasElems_attachment_endchoicesequencelink_typeschema_AttachmentEnd_TxsdLinkTypeSequenceChoiceAttachmentEnd_                                                                                                                                       func(*XsdGoPkgHasElems_attachment_endchoicesequencelink_typeschema_AttachmentEnd_TxsdLinkTypeSequenceChoiceAttachmentEnd_, bool) error
	XsdGoPkgHasElem_depth_test_enablechoicegles2_pipeline_settings_groupschema_DepthTestEnable_TxsdGles2PipelineSettingsGroupChoiceDepthTestEnable_                                                                                                           func(*XsdGoPkgHasElem_depth_test_enablechoicegles2_pipeline_settings_groupschema_DepthTestEnable_TxsdGles2PipelineSettingsGroupChoiceDepthTestEnable_, bool) error
	XsdGoPkgHasElem_nurbs_surfacechoicesequencesurface_typeschema_NurbsSurface_TnurbsSurfaceType_                                                                                                                                                             func(*XsdGoPkgHasElem_nurbs_surfacechoicesequencesurface_typeschema_NurbsSurface_TnurbsSurfaceType_, bool) error
	XsdGoPkgHasElem_funcsequencestencil_funcchoicegl_pipeline_settings_groupschema_Func_TxsdGlPipelineSettingsGroupChoiceStencilFuncSequenceFunc_                                                                                                             func(*XsdGoPkgHasElem_funcsequencestencil_funcchoicegl_pipeline_settings_groupschema_Func_TxsdGlPipelineSettingsGroupChoiceStencilFuncSequenceFunc_, bool) error
	XsdGoPkgHasElem_create_3dchoicesequenceimage_typeschema_Create3D_TxsdImageTypeSequenceChoiceCreate3D_                                                                                                                                                     func(*XsdGoPkgHasElem_create_3dchoicesequenceimage_typeschema_Create3D_TxsdImageTypeSequenceChoiceCreate3D_, bool) error
	XsdGoPkgHasElem_author_emailsequencecontributorsequenceasset_typeschema_AuthorEmail_TxsdAssetTypeSequenceContributorSequenceAuthorEmail_                                                                                                                  func(*XsdGoPkgHasElem_author_emailsequencecontributorsequenceasset_typeschema_AuthorEmail_TxsdAssetTypeSequenceContributorSequenceAuthorEmail_, bool) error
	XsdGoPkgHasElems_techniquesequenceprofile_gles_typeschema_Technique_TxsdProfileGlesTypeSequenceTechnique_                                                                                                                                                 func(*XsdGoPkgHasElems_techniquesequenceprofile_gles_typeschema_Technique_TxsdProfileGlesTypeSequenceTechnique_, bool) error
	TtargetableFloatType                                                                                                                                                                                                                                      func(*TtargetableFloatType, bool) error
	XsdGoPkgHasElem_interpenetratesequencetechnique_commonsequencerigid_constraint_typeschema_Interpenetrate_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceInterpenetrate_False                                                                       func(*XsdGoPkgHasElem_interpenetratesequencetechnique_commonsequencerigid_constraint_typeschema_Interpenetrate_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceInterpenetrate_False, bool) error
	TxsdGlPipelineSettingsGroupChoiceLightQuadraticAttenuation                                                                                                                                                                                                func(*TxsdGlPipelineSettingsGroupChoiceLightQuadraticAttenuation, bool) error
	TlibraryJointsType                                                                                                                                                                                                                                        func(*TlibraryJointsType, bool) error
	TparamType                                                                                                                                                                                                                                                func(*TparamType, bool) error
	XsdGoPkgHasElem_dynamicsequencetechnique_commonsequencerigid_body_typeschema_Dynamic_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceDynamic_                                                                                                             func(*XsdGoPkgHasElem_dynamicsequencetechnique_commonsequencerigid_body_typeschema_Dynamic_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceDynamic_, bool) error
	TlookatType                                                                                                                                                                                                                                               func(*TlookatType, bool) error
	TxsdGlesPipelineSettingsGroupChoiceLightEnable                                                                                                                                                                                                            func(*TxsdGlesPipelineSettingsGroupChoiceLightEnable, bool) error
	TlibraryKinematicsScenesType                                                                                                                                                                                                                              func(*TlibraryKinematicsScenesType, bool) error
	XsdGoPkgHasElem_texture2Dchoicegl_pipeline_settings_groupschema_Texture2D_TxsdGlPipelineSettingsGroupChoiceTexture2D_                                                                                                                                     func(*XsdGoPkgHasElem_texture2Dchoicegl_pipeline_settings_groupschema_Texture2D_TxsdGlPipelineSettingsGroupChoiceTexture2D_, bool) error
	TlibraryForceFieldsType                                                                                                                                                                                                                                   func(*TlibraryForceFieldsType, bool) error
	XsdGoPkgHasElem_hintsequenceformatsequencecreate_3dchoicesequenceimage_typeschema_Hint_TxsdImageTypeSequenceChoiceCreate3DSequenceFormatSequenceHint_                                                                                                     func(*XsdGoPkgHasElem_hintsequenceformatsequencecreate_3dchoicesequenceimage_typeschema_Hint_TxsdImageTypeSequenceChoiceCreate3DSequenceFormatSequenceHint_, bool) error
	XsdGoPkgHasElem_material_diffusechoicegl_pipeline_settings_groupschema_MaterialDiffuse_TxsdGlPipelineSettingsGroupChoiceMaterialDiffuse_                                                                                                                  func(*XsdGoPkgHasElem_material_diffusechoicegl_pipeline_settings_groupschema_MaterialDiffuse_TxsdGlPipelineSettingsGroupChoiceMaterialDiffuse_, bool) error
	XsdGoPkgHasElem_frame_tcpsequencekinematics_technique_typeschema_FrameTcp_TkinematicsFrameType_                                                                                                                                                           func(*XsdGoPkgHasElem_frame_tcpsequencekinematics_technique_typeschema_FrameTcp_TkinematicsFrameType_, bool) error
	TlibraryFormulasType                                                                                                                                                                                                                                      func(*TlibraryFormulasType, bool) error
	XsdGoPkgHasElem_anglesequencecone_typeschema_Angle_XsdtFloat_                                                                                                                                                                                             func(*XsdGoPkgHasElem_anglesequencecone_typeschema_Angle_XsdtFloat_, bool) error
	XsdGoPkgHasElems_instance_force_fieldsequenceinstance_physics_model_typeschema_InstanceForceField_TinstanceForceFieldType_                                                                                                                                func(*XsdGoPkgHasElems_instance_force_fieldsequenceinstance_physics_model_typeschema_InstanceForceField_TinstanceForceFieldType_, bool) error
	XsdGoPkgHasElems_color_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_ColorTarget_TfxColortargetType_                                                                                                                 func(*XsdGoPkgHasElems_color_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_ColorTarget_TfxColortargetType_, bool) error
	XsdGoPkgHasElem_modesequencepolygon_modechoicegl_pipeline_settings_groupschema_Mode_TxsdGlPipelineSettingsGroupChoicePolygonModeSequenceMode_                                                                                                             func(*XsdGoPkgHasElem_modesequencepolygon_modechoicegl_pipeline_settings_groupschema_Mode_TxsdGlPipelineSettingsGroupChoicePolygonModeSequenceMode_, bool) error
	XsdGoPkgHasElems_passsequencetechniquesequenceprofile_gles2_typeschema_Pass_Tgles2PassType_                                                                                                                                                               func(*XsdGoPkgHasElems_passsequencetechniquesequenceprofile_gles2_typeschema_Pass_Tgles2PassType_, bool) error
	TxsdGles2PipelineSettingsGroupChoiceBlendFunc                                                                                                                                                                                                             func(*TxsdGles2PipelineSettingsGroupChoiceBlendFunc, bool) error
	TxsdGles2PipelineSettingsGroupChoiceLineWidth                                                                                                                                                                                                             func(*TxsdGles2PipelineSettingsGroupChoiceLineWidth, bool) error
	XsdGoPkgHasElems_linksequencekinematics_model_technique_typeschema_Link_TlinkType_                                                                                                                                                                        func(*XsdGoPkgHasElems_linksequencekinematics_model_technique_typeschema_Link_TlinkType_, bool) error
	TxsdVisualSceneTypeSequenceEvaluateScene                                                                                                                                                                                                                  func(*TxsdVisualSceneTypeSequenceEvaluateScene, bool) error
	TxsdFxCommonColorOrTextureTypeChoiceTexture                                                                                                                                                                                                               func(*TxsdFxCommonColorOrTextureTypeChoiceTexture, bool) error
	XsdGoPkgHasElem_IDREF_arraychoicesequencesource_typeschema_IdrefArray_TidrefArrayType_                                                                                                                                                                    func(*XsdGoPkgHasElem_IDREF_arraychoicesequencesource_typeschema_IdrefArray_TidrefArrayType_, bool) error
	XsdGoPkgHasElem_technique_commonsequencesource_typeschema_TechniqueCommon_TxsdSourceTypeSequenceTechniqueCommon_                                                                                                                                          func(*XsdGoPkgHasElem_technique_commonsequencesource_typeschema_TechniqueCommon_TxsdSourceTypeSequenceTechniqueCommon_, bool) error
	XsdGoPkgHasElems_effectsequencelibrary_effects_typeschema_Effect_TeffectType_                                                                                                                                                                             func(*XsdGoPkgHasElems_effectsequencelibrary_effects_typeschema_Effect_TeffectType_, bool) error
	XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Hollow_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShapeSequenceHollow_                                                                     func(*XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Hollow_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShapeSequenceHollow_, bool) error
	XsdGoPkgHasElem_zfarsequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Zfar_TtargetableFloatType_                                                                                                                          func(*XsdGoPkgHasElem_zfarsequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Zfar_TtargetableFloatType_, bool) error
	XsdGoPkgHasElem_float3choicefx_annotate_groupschema_Float3_Tfloat3Type_                                                                                                                                                                                   func(*XsdGoPkgHasElem_float3choicefx_annotate_groupschema_Float3_Tfloat3Type_, bool) error
	TkinematicsModelTechniqueType                                                                                                                                                                                                                             func(*TkinematicsModelTechniqueType, bool) error
	ThyperbolaType                                                                                                                                                                                                                                            func(*ThyperbolaType, bool) error
	TpcurvesType                                                                                                                                                                                                                                              func(*TpcurvesType, bool) error
	XsdGoPkgHasElems_library_force_fieldschoicesequenceCOLLADAschema_LibraryForceFields_TlibraryForceFieldsType_                                                                                                                                              func(*XsdGoPkgHasElems_library_force_fieldschoicesequenceCOLLADAschema_LibraryForceFields_TlibraryForceFieldsType_, bool) error
	TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceFunc                                                                                                                                                                                                    func(*TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceFunc, bool) error
	XsdGoPkgHasElems_animationsequencechoicesequencechoicesequenceanimation_typeschema_Animation_TanimationType_                                                                                                                                              func(*XsdGoPkgHasElems_animationsequencechoicesequencechoicesequenceanimation_typeschema_Animation_TanimationType_, bool) error
	XsdGoPkgHasElem_stringchoicefx_annotate_groupschema_String_XsdtString_                                                                                                                                                                                    func(*XsdGoPkgHasElem_stringchoicefx_annotate_groupschema_String_XsdtString_, bool) error
	XsdGoPkgHasElem_arraysequencecreate_3dchoicesequenceimage_typeschema_Array_TxsdImageTypeSequenceChoiceCreate3DSequenceArray_                                                                                                                              func(*XsdGoPkgHasElem_arraysequencecreate_3dchoicesequenceimage_typeschema_Array_TxsdImageTypeSequenceChoiceCreate3DSequenceArray_, bool) error
	TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparate                                                                                                                                                                                                      func(*TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparate, bool) error
	TprofileBridgeType                                                                                                                                                                                                                                        func(*TprofileBridgeType, bool) error
	XsdGoPkgHasElem_scenesequenceCOLLADAschema_Scene_TxsdColladaSequenceScene_                                                                                                                                                                                func(*XsdGoPkgHasElem_scenesequenceCOLLADAschema_Scene_TxsdColladaSequenceScene_, bool) error
	XsdGoPkgHasElem_light_diffusechoicegles_pipeline_settings_groupschema_LightDiffuse_TxsdGlesPipelineSettingsGroupChoiceLightDiffuse_                                                                                                                       func(*XsdGoPkgHasElem_light_diffusechoicegles_pipeline_settings_groupschema_LightDiffuse_TxsdGlesPipelineSettingsGroupChoiceLightDiffuse_, bool) error
	TgeometryType                                                                                                                                                                                                                                             func(*TgeometryType, bool) error
	XsdGoPkgHasElem_hintsequenceformatsequencecreate_cubechoicesequenceimage_typeschema_Hint_TxsdImageTypeSequenceChoiceCreateCubeSequenceFormatSequenceHint_                                                                                                 func(*XsdGoPkgHasElem_hintsequenceformatsequencecreate_cubechoicesequenceimage_typeschema_Hint_TxsdImageTypeSequenceChoiceCreateCubeSequenceFormatSequenceHint_, bool) error
	XsdGoPkgHasElem_up_axissequenceasset_typeschema_UpAxis_TupAxisEnum_YUp                                                                                                                                                                                    func(*XsdGoPkgHasElem_up_axissequenceasset_typeschema_UpAxis_TupAxisEnum_YUp, bool) error
	XsdGoPkgHasElem_depth_maskchoicegles2_pipeline_settings_groupschema_DepthMask_TxsdGles2PipelineSettingsGroupChoiceDepthMask_                                                                                                                              func(*XsdGoPkgHasElem_depth_maskchoicegles2_pipeline_settings_groupschema_DepthMask_TxsdGles2PipelineSettingsGroupChoiceDepthMask_, bool) error
	XsdGoPkgHasElem_mat4choicegles2_value_groupschema_Mat4_Tfloat4X4Type_                                                                                                                                                                                     func(*XsdGoPkgHasElem_mat4choicegles2_value_groupschema_Mat4_Tfloat4X4Type_, bool) error
	XsdGoPkgHasElem_longitudesequencegeographic_locationsequencecoveragesequenceasset_typeschema_Longitude_XsdtFloat_                                                                                                                                         func(*XsdGoPkgHasElem_longitudesequencegeographic_locationsequencecoveragesequenceasset_typeschema_Longitude_XsdtFloat_, bool) error
	TxsdGlesPipelineSettingsGroupChoiceLightSpotDirection                                                                                                                                                                                                     func(*TxsdGlesPipelineSettingsGroupChoiceLightSpotDirection, bool) error
	XsdGoPkgHasElem_usertypechoicecg_param_groupschema_Usertype_TcgUserType_                                                                                                                                                                                  func(*XsdGoPkgHasElem_usertypechoicecg_param_groupschema_Usertype_TcgUserType_, bool) error
	XsdGoPkgHasElem_valuechoicetextureRECTchoicegl_pipeline_settings_groupschema_Value_TfxSamplerRECTType_                                                                                                                                                    func(*XsdGoPkgHasElem_valuechoicetextureRECTchoicegl_pipeline_settings_groupschema_Value_TfxSamplerRECTType_, bool) error
	XsdGoPkgHasElem_bool3x4choicecg_param_groupschema_Bool3X4_Tbool3X4Type_                                                                                                                                                                                   func(*XsdGoPkgHasElem_bool3x4choicecg_param_groupschema_Bool3X4_Tbool3X4Type_, bool) error
	XsdGoPkgHasElem_texturechoicefx_common_color_or_texture_typeschema_Texture_TxsdFxCommonColorOrTextureTypeChoiceTexture_                                                                                                                                   func(*XsdGoPkgHasElem_texturechoicefx_common_color_or_texture_typeschema_Texture_TxsdFxCommonColorOrTextureTypeChoiceTexture_, bool) error
	TlibraryVisualScenesType                                                                                                                                                                                                                                  func(*TlibraryVisualScenesType, bool) error
	XsdGoPkgHasElems_setparamsequenceinstance_formula_typeschema_Setparam_TformulaSetparamType_                                                                                                                                                               func(*XsdGoPkgHasElems_setparamsequenceinstance_formula_typeschema_Setparam_TformulaSetparamType_, bool) error
	TglslProgramType                                                                                                                                                                                                                                          func(*TglslProgramType, bool) error
	XsdGoPkgHasElems_library_jointschoicesequenceCOLLADAschema_LibraryJoints_TlibraryJointsType_                                                                                                                                                              func(*XsdGoPkgHasElems_library_jointschoicesequenceCOLLADAschema_LibraryJoints_TlibraryJointsType_, bool) error
	XsdGoPkgHasElem_bool3choicefx_annotate_groupschema_Bool3_Tbool3Type_                                                                                                                                                                                      func(*XsdGoPkgHasElem_bool3choicefx_annotate_groupschema_Bool3_Tbool3Type_, bool) error
	TcgPassType                                                                                                                                                                                                                                               func(*TcgPassType, bool) error
	TxsdGlPipelineSettingsGroupChoiceTextureEnvMode                                                                                                                                                                                                           func(*TxsdGlPipelineSettingsGroupChoiceTextureEnvMode, bool) error
	XsdGoPkgHasElem_blinnchoicesequencetechniquesequenceprofile_common_typeschema_Blinn_TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceBlinn_                                                                                                            func(*XsdGoPkgHasElem_blinnchoicesequencetechniquesequenceprofile_common_typeschema_Blinn_TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceBlinn_, bool) error
	XsdGoPkgHasElem_facesequencepolygon_modechoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoicePolygonModeSequenceFace_                                                                                                             func(*XsdGoPkgHasElem_facesequencepolygon_modechoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoicePolygonModeSequenceFace_, bool) error
	XsdGoPkgHasElem_color_materialchoicegl_pipeline_settings_groupschema_ColorMaterial_TxsdGlPipelineSettingsGroupChoiceColorMaterial_                                                                                                                        func(*XsdGoPkgHasElem_color_materialchoicegl_pipeline_settings_groupschema_ColorMaterial_TxsdGlPipelineSettingsGroupChoiceColorMaterial_, bool) error
	XsdGoPkgHasElem_masksequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Mask_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceMask_                                                                                      func(*XsdGoPkgHasElem_masksequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Mask_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceMask_, bool) error
	XsdGoPkgHasElem_stencil_test_enablechoicegl_pipeline_settings_groupschema_StencilTestEnable_TxsdGlPipelineSettingsGroupChoiceStencilTestEnable_                                                                                                           func(*XsdGoPkgHasElem_stencil_test_enablechoicegl_pipeline_settings_groupschema_StencilTestEnable_TxsdGlPipelineSettingsGroupChoiceStencilTestEnable_, bool) error
	XsdGoPkgHasElem_profile_BRIDGEchoicefx_profile_groupschema_ProfileBridge_TprofileBridgeType_                                                                                                                                                              func(*XsdGoPkgHasElem_profile_BRIDGEchoicefx_profile_groupschema_ProfileBridge_TprofileBridgeType_, bool) error
	XsdGoPkgHasElem_transparentsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Transparent_TfxCommonTransparentType_                                                                                                                  func(*XsdGoPkgHasElem_transparentsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Transparent_TfxCommonTransparentType_, bool) error
	XsdGoPkgHasElems_Collada                                                                                                                                                                                                                                  func(*XsdGoPkgHasElems_Collada, bool) error
	TxsdLinkTypeSequenceChoiceAttachmentFull                                                                                                                                                                                                                  func(*TxsdLinkTypeSequenceChoiceAttachmentFull, bool) error
	XsdGoPkgHasElems_instance_physics_scenesequencescenesequenceCOLLADAschema_InstancePhysicsScene_TinstanceWithExtraType_                                                                                                                                    func(*XsdGoPkgHasElems_instance_physics_scenesequencescenesequenceCOLLADAschema_InstancePhysicsScene_TinstanceWithExtraType_, bool) error
	XsdGoPkgHasElem_float2x2choicefx_annotate_groupschema_Float2X2_Tfloat2X2Type_                                                                                                                                                                             func(*XsdGoPkgHasElem_float2x2choicefx_annotate_groupschema_Float2X2_Tfloat2X2Type_, bool) error
	TlibraryEffectsType                                                                                                                                                                                                                                       func(*TlibraryEffectsType, bool) error
	XsdGoPkgHasElems_kinematics_modelsequencelibrary_kinematics_models_typeschema_KinematicsModel_TkinematicsModelType_                                                                                                                                       func(*XsdGoPkgHasElems_kinematics_modelsequencelibrary_kinematics_models_typeschema_KinematicsModel_TkinematicsModelType_, bool) error
	XsdGoPkgHasElem_logic_opchoicegl_pipeline_settings_groupschema_LogicOp_TxsdGlPipelineSettingsGroupChoiceLogicOp_                                                                                                                                          func(*XsdGoPkgHasElem_logic_opchoicegl_pipeline_settings_groupschema_LogicOp_TxsdGlPipelineSettingsGroupChoiceLogicOp_, bool) error
	XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_AspectRatio_TtargetableFloatType_                                                                                       func(*XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_AspectRatio_TtargetableFloatType_, bool) error
	XsdGoPkgHasElem_rescale_normal_enablechoicegl_pipeline_settings_groupschema_RescaleNormalEnable_TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable_                                                                                                     func(*XsdGoPkgHasElem_rescale_normal_enablechoicegl_pipeline_settings_groupschema_RescaleNormalEnable_TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable_, bool) error
	XsdGoPkgHasElem_sample_coverage_enablechoicegl_pipeline_settings_groupschema_SampleCoverageEnable_TxsdGlPipelineSettingsGroupChoiceSampleCoverageEnable_                                                                                                  func(*XsdGoPkgHasElem_sample_coverage_enablechoicegl_pipeline_settings_groupschema_SampleCoverageEnable_TxsdGlPipelineSettingsGroupChoiceSampleCoverageEnable_, bool) error
	TsweptSurfaceType                                                                                                                                                                                                                                         func(*TsweptSurfaceType, bool) error
	TxsdGlPipelineSettingsGroupChoiceLightDiffuse                                                                                                                                                                                                             func(*TxsdGlPipelineSettingsGroupChoiceLightDiffuse, bool) error
	XsdGoPkgHasElem_instance_imagesequencefx_sampler_typeschema_InstanceImage_TinstanceImageType_                                                                                                                                                             func(*XsdGoPkgHasElem_instance_imagesequencefx_sampler_typeschema_InstanceImage_TinstanceImageType_, bool) error
	XsdGoPkgHasElem_sizesequencecreate_cubechoicesequenceimage_typeschema_Size_TxsdImageTypeSequenceChoiceCreateCubeSequenceSize_                                                                                                                             func(*XsdGoPkgHasElem_sizesequencecreate_cubechoicesequenceimage_typeschema_Size_TxsdImageTypeSequenceChoiceCreateCubeSequenceSize_, bool) error
	TxsdGlPipelineSettingsGroupChoiceFogEnd                                                                                                                                                                                                                   func(*TxsdGlPipelineSettingsGroupChoiceFogEnd, bool) error
	XsdGoPkgHasElems_visual_scenesequencelibrary_visual_scenes_typeschema_VisualScene_TvisualSceneType_                                                                                                                                                       func(*XsdGoPkgHasElems_visual_scenesequencelibrary_visual_scenes_typeschema_VisualScene_TvisualSceneType_, bool) error
	XsdGoPkgHasElem_fixed3choicecg_param_groupschema_Fixed3_Tfloat3Type_                                                                                                                                                                                      func(*XsdGoPkgHasElem_fixed3choicecg_param_groupschema_Fixed3_Tfloat3Type_, bool) error
	TinstanceFormulaType                                                                                                                                                                                                                                      func(*TinstanceFormulaType, bool) error
	XsdGoPkgHasElem_int3x1choicecg_param_groupschema_Int3X1_Tint3Type_                                                                                                                                                                                        func(*XsdGoPkgHasElem_int3x1choicecg_param_groupschema_Int3X1_Tint3Type_, bool) error
	TcgNewparamType                                                                                                                                                                                                                                           func(*TcgNewparamType, bool) error
	XsdGoPkgHasElem_refsequencestencil_funcchoicegl_pipeline_settings_groupschema_Ref_TxsdGlPipelineSettingsGroupChoiceStencilFuncSequenceRef_                                                                                                                func(*XsdGoPkgHasElem_refsequencestencil_funcchoicegl_pipeline_settings_groupschema_Ref_TxsdGlPipelineSettingsGroupChoiceStencilFuncSequenceRef_, bool) error
	XsdGoPkgHasElem_depth_bounds_enablechoicegl_pipeline_settings_groupschema_DepthBoundsEnable_TxsdGlPipelineSettingsGroupChoiceDepthBoundsEnable_                                                                                                           func(*XsdGoPkgHasElem_depth_bounds_enablechoicegl_pipeline_settings_groupschema_DepthBoundsEnable_TxsdGlPipelineSettingsGroupChoiceDepthBoundsEnable_, bool) error
	TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceLinear                                                                                                                                                                                func(*TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceLinear, bool) error
	TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable                                                                                                                                                                                                      func(*TxsdGlPipelineSettingsGroupChoiceRescaleNormalEnable, bool) error
	TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparate                                                                                                                                                                                                        func(*TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparate, bool) error
	TfxCommonColorOrTextureType                                                                                                                                                                                                                               func(*TfxCommonColorOrTextureType, bool) error
	XsdGoPkgHasElem_intchoicekinematics_newparam_typeschema_Int_TintType_                                                                                                                                                                                     func(*XsdGoPkgHasElem_intchoicekinematics_newparam_typeschema_Int_TintType_, bool) error
	TinstanceImageType                                                                                                                                                                                                                                        func(*TinstanceImageType, bool) error
	TtorusType                                                                                                                                                                                                                                                func(*TtorusType, bool) error
	XsdGoPkgHasElems_trifanschoicesequencemesh_typeschema_Trifans_TtrifansType_                                                                                                                                                                               func(*XsdGoPkgHasElems_trifanschoicesequencemesh_typeschema_Trifans_TtrifansType_, bool) error
	XsdGoPkgHasElem_stencil_maskchoicegles2_pipeline_settings_groupschema_StencilMask_TxsdGles2PipelineSettingsGroupChoiceStencilMask_                                                                                                                        func(*XsdGoPkgHasElem_stencil_maskchoicegles2_pipeline_settings_groupschema_StencilMask_TxsdGles2PipelineSettingsGroupChoiceStencilMask_, bool) error
	XsdGoPkgHasElems_scalechoicesequencenode_typeschema_Scale_TscaleType_                                                                                                                                                                                     func(*XsdGoPkgHasElems_scalechoicesequencenode_typeschema_Scale_TscaleType_, bool) error
	XsdGoPkgHasElem_float3x4choicegles_param_groupschema_Float3X4_Tfloat3X4Type_                                                                                                                                                                              func(*XsdGoPkgHasElem_float3x4choicegles_param_groupschema_Float3X4_Tfloat3X4Type_, bool) error
	TprofileGlslType                                                                                                                                                                                                                                          func(*TprofileGlslType, bool) error
	TxsdGlesPipelineSettingsGroupChoiceClipPlaneEnable                                                                                                                                                                                                        func(*TxsdGlesPipelineSettingsGroupChoiceClipPlaneEnable, bool) error
	TxsdCgPassTypeSequenceProgramSequenceShaderSequenceSources                                                                                                                                                                                                func(*TxsdCgPassTypeSequenceProgramSequenceShaderSequenceSources, bool) error
	XsdGoPkgHasElem_dither_enablechoicegles_pipeline_settings_groupschema_DitherEnable_TxsdGlesPipelineSettingsGroupChoiceDitherEnable_                                                                                                                       func(*XsdGoPkgHasElem_dither_enablechoicegles_pipeline_settings_groupschema_DitherEnable_TxsdGlesPipelineSettingsGroupChoiceDitherEnable_, bool) error
	XsdGoPkgHasElem_point_sizechoicegles2_pipeline_settings_groupschema_PointSize_TxsdGles2PipelineSettingsGroupChoicePointSize_                                                                                                                              func(*XsdGoPkgHasElem_point_sizechoicegles2_pipeline_settings_groupschema_PointSize_TxsdGles2PipelineSettingsGroupChoicePointSize_, bool) error
	TlinestripsType                                                                                                                                                                                                                                           func(*TlinestripsType, bool) error
	ToriginType                                                                                                                                                                                                                                               func(*ToriginType, bool) error
	XsdGoPkgHasElems_surfacesequencesurfaces_typeschema_Surface_TsurfaceType_                                                                                                                                                                                 func(*XsdGoPkgHasElems_surfacesequencesurfaces_typeschema_Surface_TsurfaceType_, bool) error
	TinstanceLightType                                                                                                                                                                                                                                        func(*TinstanceLightType, bool) error
	XsdGoPkgHasElem_point_size_maxchoicegl_pipeline_settings_groupschema_PointSizeMax_TxsdGlPipelineSettingsGroupChoicePointSizeMax_                                                                                                                          func(*XsdGoPkgHasElem_point_size_maxchoicegl_pipeline_settings_groupschema_PointSizeMax_TxsdGlPipelineSettingsGroupChoicePointSizeMax_, bool) error
	XsdGoPkgHasElem_fog_densitychoicegles_pipeline_settings_groupschema_FogDensity_TxsdGlesPipelineSettingsGroupChoiceFogDensity_                                                                                                                             func(*XsdGoPkgHasElem_fog_densitychoicegles_pipeline_settings_groupschema_FogDensity_TxsdGlesPipelineSettingsGroupChoiceFogDensity_, bool) error
	XsdGoPkgHasElem_depth_rangechoicegl_pipeline_settings_groupschema_DepthRange_TxsdGlPipelineSettingsGroupChoiceDepthRange_                                                                                                                                 func(*XsdGoPkgHasElem_depth_rangechoicegl_pipeline_settings_groupschema_DepthRange_TxsdGlPipelineSettingsGroupChoiceDepthRange_, bool) error
	XsdGoPkgHasElem_Name_arraychoicesequencesource_typeschema_NameArray_TnameArrayType_                                                                                                                                                                       func(*XsdGoPkgHasElem_Name_arraychoicesequencesource_typeschema_NameArray_TnameArrayType_, bool) error
	XsdGoPkgHasElem_jerksequencemotion_axis_info_typeschema_Jerk_TcommonFloatOrParamType_                                                                                                                                                                     func(*XsdGoPkgHasElem_jerksequencemotion_axis_info_typeschema_Jerk_TcommonFloatOrParamType_, bool) error
	TxsdImageTypeSequenceChoiceCreate2DSequenceFormat                                                                                                                                                                                                         func(*TxsdImageTypeSequenceChoiceCreate2DSequenceFormat, bool) error
	TfacesType                                                                                                                                                                                                                                                func(*TfacesType, bool) error
	XsdGoPkgHasElem_sourcessequenceshadersequenceprogramsequencecg_pass_typeschema_Sources_TxsdCgPassTypeSequenceProgramSequenceShaderSequenceSources_                                                                                                        func(*XsdGoPkgHasElem_sourcessequenceshadersequenceprogramsequencecg_pass_typeschema_Sources_TxsdCgPassTypeSequenceProgramSequenceShaderSequenceSources_, bool) error
	TxsdGlPipelineSettingsGroupChoiceStencilFunc                                                                                                                                                                                                              func(*TxsdGlPipelineSettingsGroupChoiceStencilFunc, bool) error
	XsdGoPkgHasElem_shellssequencebrep_typeschema_Shells_TshellsType_                                                                                                                                                                                         func(*XsdGoPkgHasElem_shellssequencebrep_typeschema_Shells_TshellsType_, bool) error
	TinstanceNodeType                                                                                                                                                                                                                                         func(*TinstanceNodeType, bool) error
	TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterial                                                                                                                                                                            func(*TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterial, bool) error
	XsdGoPkgHasElem_int4x1choicecg_param_groupschema_Int4X1_Tint4Type_                                                                                                                                                                                        func(*XsdGoPkgHasElem_int4x1choicecg_param_groupschema_Int4X1_Tint4Type_, bool) error
	XsdGoPkgHasElem_int2choicefx_annotate_groupschema_Int2_Tint2Type_                                                                                                                                                                                         func(*XsdGoPkgHasElem_int2choicefx_annotate_groupschema_Int2_Tint2Type_, bool) error
	XsdGoPkgHasElem_technique_commonsequencerigid_body_typeschema_TechniqueCommon_TxsdRigidBodyTypeSequenceTechniqueCommon_                                                                                                                                   func(*XsdGoPkgHasElem_technique_commonsequencerigid_body_typeschema_TechniqueCommon_TxsdRigidBodyTypeSequenceTechniqueCommon_, bool) error
	XsdGoPkgHasElems_init_fromsequencecreate_2dchoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceCreate2DSequenceInitFrom_                                                                                                                   func(*XsdGoPkgHasElems_init_fromsequencecreate_2dchoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceCreate2DSequenceInitFrom_, bool) error
	TedgesType                                                                                                                                                                                                                                                func(*TedgesType, bool) error
	TinstanceForceFieldType                                                                                                                                                                                                                                   func(*TinstanceForceFieldType, bool) error
	XsdGoPkgHasElem_instance_geometrychoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_InstanceGeometry_TinstanceGeometryType_                                                                                                func(*XsdGoPkgHasElem_instance_geometrychoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_InstanceGeometry_TinstanceGeometryType_, bool) error
	XsdGoPkgHasElems_depth_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_DepthClear_TfxCleardepthType_                                                                                                                    func(*XsdGoPkgHasElems_depth_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_DepthClear_TfxCleardepthType_, bool) error
	XsdGoPkgHasElem_source_datasequencecontributorsequenceasset_typeschema_SourceData_XsdtAnyURI_                                                                                                                                                             func(*XsdGoPkgHasElem_source_datasequencecontributorsequenceasset_typeschema_SourceData_XsdtAnyURI_, bool) error
	XsdGoPkgHasElems_newparamsequenceeffect_typeschema_Newparam_TfxNewparamType_                                                                                                                                                                              func(*XsdGoPkgHasElems_newparamsequenceeffect_typeschema_Newparam_TfxNewparamType_, bool) error
	TparabolaType                                                                                                                                                                                                                                             func(*TparabolaType, bool) error
	XsdGoPkgHasElem_reflectivesequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Reflective_TfxCommonColorOrTextureType_                                                                                                                 func(*XsdGoPkgHasElem_reflectivesequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Reflective_TfxCommonColorOrTextureType_, bool) error
	XsdGoPkgHasElem_float4x3choicegles_param_groupschema_Float4X3_Tfloat4X3Type_                                                                                                                                                                              func(*XsdGoPkgHasElem_float4x3choicegles_param_groupschema_Float4X3_Tfloat4X3Type_, bool) error
	XsdGoPkgHasElem_fog_enablechoicegles_pipeline_settings_groupschema_FogEnable_TxsdGlesPipelineSettingsGroupChoiceFogEnable_                                                                                                                                func(*XsdGoPkgHasElem_fog_enablechoicegles_pipeline_settings_groupschema_FogEnable_TxsdGlesPipelineSettingsGroupChoiceFogEnable_, bool) error
	XsdGoPkgHasElem_vec3choicegles2_value_groupschema_Vec3_Tfloat3Type_                                                                                                                                                                                       func(*XsdGoPkgHasElem_vec3choicegles2_value_groupschema_Vec3_Tfloat3Type_, bool) error
	XsdGoPkgHasElem_cull_face_enablechoicegles2_pipeline_settings_groupschema_CullFaceEnable_TxsdGles2PipelineSettingsGroupChoiceCullFaceEnable_                                                                                                              func(*XsdGoPkgHasElem_cull_face_enablechoicegles2_pipeline_settings_groupschema_CullFaceEnable_TxsdGles2PipelineSettingsGroupChoiceCullFaceEnable_, bool) error
	XsdGoPkgHasElem_hintsequenceformatsequencecreate_2dchoicesequenceimage_typeschema_Hint_TxsdImageTypeSequenceChoiceCreate2DSequenceFormatSequenceHint_                                                                                                     func(*XsdGoPkgHasElem_hintsequenceformatsequencecreate_2dchoicesequenceimage_typeschema_Hint_TxsdImageTypeSequenceChoiceCreate2DSequenceFormatSequenceHint_, bool) error
	TfxSamplerRECTType                                                                                                                                                                                                                                        func(*TfxSamplerRECTType, bool) error
	TsurfaceCurvesType                                                                                                                                                                                                                                        func(*TsurfaceCurvesType, bool) error
	TphysicsModelType                                                                                                                                                                                                                                         func(*TphysicsModelType, bool) error
	TxsdGlPipelineSettingsGroupChoiceStencilMask                                                                                                                                                                                                              func(*TxsdGlPipelineSettingsGroupChoiceStencilMask, bool) error
	TxsdFxCommonFloatOrParamTypeChoiceFloat                                                                                                                                                                                                                   func(*TxsdFxCommonFloatOrParamTypeChoiceFloat, bool) error
	XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Damping_TtargetableFloatType_00                                                                                                           func(*XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Damping_TtargetableFloatType_00, bool) error
	TaxisConstraintType                                                                                                                                                                                                                                       func(*TaxisConstraintType, bool) error
	XsdGoPkgHasElem_blend_enablechoicegles_pipeline_settings_groupschema_BlendEnable_TxsdGlesPipelineSettingsGroupChoiceBlendEnable_                                                                                                                          func(*XsdGoPkgHasElem_blend_enablechoicegles_pipeline_settings_groupschema_BlendEnable_TxsdGlesPipelineSettingsGroupChoiceBlendEnable_, bool) error
	TxsdGlPipelineSettingsGroupChoiceTextureDEPTH                                                                                                                                                                                                             func(*TxsdGlPipelineSettingsGroupChoiceTextureDEPTH, bool) error
	TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceAngular                                                                                                                                                                               func(*TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceAngular, bool) error
	XsdGoPkgHasElem_statessequencepasssequencetechniquesequenceprofile_glsl_typeschema_States_TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceStates_                                                                                                 func(*XsdGoPkgHasElem_statessequencepasssequencetechniquesequenceprofile_glsl_typeschema_States_TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceStates_, bool) error
	XsdGoPkgHasElems_rotatechoiceattachment_endchoicesequencelink_typeschema_Rotate_TrotateType_                                                                                                                                                              func(*XsdGoPkgHasElems_rotatechoiceattachment_endchoicesequencelink_typeschema_Rotate_TrotateType_, bool) error
	TinstancePhysicsMaterialType                                                                                                                                                                                                                              func(*TinstancePhysicsMaterialType, bool) error
	XsdGoPkgHasElem_stencil_opchoicegl_pipeline_settings_groupschema_StencilOp_TxsdGlPipelineSettingsGroupChoiceStencilOp_                                                                                                                                    func(*XsdGoPkgHasElem_stencil_opchoicegl_pipeline_settings_groupschema_StencilOp_TxsdGlPipelineSettingsGroupChoiceStencilOp_, bool) error
	XsdGoPkgHasElem_cylinderchoicesequencesurface_typeschema_Cylinder_TxsdSurfaceTypeSequenceChoiceCylinder_                                                                                                                                                  func(*XsdGoPkgHasElem_cylinderchoicesequencesurface_typeschema_Cylinder_TxsdSurfaceTypeSequenceChoiceCylinder_, bool) error
	XsdGoPkgHasElem_depth_funcchoicegl_pipeline_settings_groupschema_DepthFunc_TxsdGlPipelineSettingsGroupChoiceDepthFunc_                                                                                                                                    func(*XsdGoPkgHasElem_depth_funcchoicegl_pipeline_settings_groupschema_DepthFunc_TxsdGlPipelineSettingsGroupChoiceDepthFunc_, bool) error
	XsdGoPkgHasElem_equationsequenceplane_typeschema_Equation_Tfloat4Type_                                                                                                                                                                                    func(*XsdGoPkgHasElem_equationsequenceplane_typeschema_Equation_Tfloat4Type_, bool) error
	XsdGoPkgHasElem_light_linear_attenuationchoicegles_pipeline_settings_groupschema_LightLinearAttenuation_TxsdGlesPipelineSettingsGroupChoiceLightLinearAttenuation_                                                                                        func(*XsdGoPkgHasElem_light_linear_attenuationchoicegles_pipeline_settings_groupschema_LightLinearAttenuation_TxsdGlesPipelineSettingsGroupChoiceLightLinearAttenuation_, bool) error
	XsdGoPkgHasElem_orthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Orthographic_TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoiceOrthographic_                                                                             func(*XsdGoPkgHasElem_orthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Orthographic_TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoiceOrthographic_, bool) error
	XsdGoPkgHasElem_light_constant_attenuationchoicegles_pipeline_settings_groupschema_LightConstantAttenuation_TxsdGlesPipelineSettingsGroupChoiceLightConstantAttenuation_                                                                                  func(*XsdGoPkgHasElem_light_constant_attenuationchoicegles_pipeline_settings_groupschema_LightConstantAttenuation_TxsdGlesPipelineSettingsGroupChoiceLightConstantAttenuation_, bool) error
	TassetType                                                                                                                                                                                                                                                func(*TassetType, bool) error
	XsdGoPkgHasElem_stencil_maskchoicegl_pipeline_settings_groupschema_StencilMask_TxsdGlPipelineSettingsGroupChoiceStencilMask_                                                                                                                              func(*XsdGoPkgHasElem_stencil_maskchoicegl_pipeline_settings_groupschema_StencilMask_TxsdGlPipelineSettingsGroupChoiceStencilMask_, bool) error
	XsdGoPkgHasElem_technique_commonsequenceinstance_rigid_body_typeschema_TechniqueCommon_TxsdInstanceRigidBodyTypeSequenceTechniqueCommon_                                                                                                                  func(*XsdGoPkgHasElem_technique_commonsequenceinstance_rigid_body_typeschema_TechniqueCommon_TxsdInstanceRigidBodyTypeSequenceTechniqueCommon_, bool) error
	XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegles2_pipeline_settings_groupschema_Mask_TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparateSequenceMask_                                                                                      func(*XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegles2_pipeline_settings_groupschema_Mask_TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparateSequenceMask_, bool) error
	XsdGoPkgHasElem_solidssequencebrep_typeschema_Solids_TsolidsType_                                                                                                                                                                                         func(*XsdGoPkgHasElem_solidssequencebrep_typeschema_Solids_TsolidsType_, bool) error
	TxsdLightTypeSequenceTechniqueCommonChoicePoint                                                                                                                                                                                                           func(*TxsdLightTypeSequenceTechniqueCommonChoicePoint, bool) error
	TformulaNewparamType                                                                                                                                                                                                                                      func(*TformulaNewparamType, bool) error
	XsdGoPkgHasElem_floatchoicefx_common_float_or_param_typeschema_Float_TxsdFxCommonFloatOrParamTypeChoiceFloat_                                                                                                                                             func(*XsdGoPkgHasElem_floatchoicefx_common_float_or_param_typeschema_Float_TxsdFxCommonFloatOrParamTypeChoiceFloat_, bool) error
	XsdGoPkgHasElem_texture3D_enablechoicegl_pipeline_settings_groupschema_Texture3DEnable_TxsdGlPipelineSettingsGroupChoiceTexture3DEnable_                                                                                                                  func(*XsdGoPkgHasElem_texture3D_enablechoicegl_pipeline_settings_groupschema_Texture3DEnable_TxsdGlPipelineSettingsGroupChoiceTexture3DEnable_, bool) error
	XsdGoPkgHasElem_texcoordsequencegles_sampler_typeschema_Texcoord_TxsdGlesSamplerTypeSequenceTexcoord_                                                                                                                                                     func(*XsdGoPkgHasElem_texcoordsequencegles_sampler_typeschema_Texcoord_TxsdGlesSamplerTypeSequenceTexcoord_, bool) error
	TxsdGlPipelineSettingsGroupChoiceClipPlaneEnable                                                                                                                                                                                                          func(*TxsdGlPipelineSettingsGroupChoiceClipPlaneEnable, bool) error
	XsdGoPkgHasElem_axissequenceaxis_constraint_typeschema_Axis_TaxisType_                                                                                                                                                                                    func(*XsdGoPkgHasElem_axissequenceaxis_constraint_typeschema_Axis_TaxisType_, bool) error
	XsdGoPkgHasElem_blend_equationchoicegles2_pipeline_settings_groupschema_BlendEquation_TxsdGles2PipelineSettingsGroupChoiceBlendEquation_                                                                                                                  func(*XsdGoPkgHasElem_blend_equationchoicegles2_pipeline_settings_groupschema_BlendEquation_TxsdGles2PipelineSettingsGroupChoiceBlendEquation_, bool) error
	XsdGoPkgHasElem_float2choicefx_annotate_groupschema_Float2_Tfloat2Type_                                                                                                                                                                                   func(*XsdGoPkgHasElem_float2choicefx_annotate_groupschema_Float2_Tfloat2Type_, bool) error
	XsdGoPkgHasElems_instance_kinematics_scenesequencescenesequenceCOLLADAschema_InstanceKinematicsScene_TinstanceKinematicsSceneType_                                                                                                                        func(*XsdGoPkgHasElems_instance_kinematics_scenesequencescenesequenceCOLLADAschema_InstanceKinematicsScene_TinstanceKinematicsSceneType_, bool) error
	TxsdGles2PipelineSettingsGroupChoiceStencilFunc                                                                                                                                                                                                           func(*TxsdGles2PipelineSettingsGroupChoiceStencilFunc, bool) error
	XsdGoPkgHasElem_half3choicecg_param_groupschema_Half3_Tfloat3Type_                                                                                                                                                                                        func(*XsdGoPkgHasElem_half3choicecg_param_groupschema_Half3_Tfloat3Type_, bool) error
	XsdGoPkgHasElem_half4x2choicecg_param_groupschema_Half4X2_Tfloat4X2Type_                                                                                                                                                                                  func(*XsdGoPkgHasElem_half4x2choicecg_param_groupschema_Half4X2_Tfloat4X2Type_, bool) error
	TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceValue                                                                                                                                                                                           func(*TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceValue, bool) error
	XsdGoPkgHasElems_jointchoicesequencekinematics_model_technique_typeschema_Joint_TjointType_                                                                                                                                                               func(*XsdGoPkgHasElems_jointchoicesequencekinematics_model_technique_typeschema_Joint_TjointType_, bool) error
	XsdGoPkgHasElems_library_controllerschoicesequenceCOLLADAschema_LibraryControllers_TlibraryControllersType_                                                                                                                                               func(*XsdGoPkgHasElems_library_controllerschoicesequenceCOLLADAschema_LibraryControllers_TlibraryControllersType_, bool) error
	TxsdGlesPipelineSettingsGroupChoiceTexturePipeline                                                                                                                                                                                                        func(*TxsdGlesPipelineSettingsGroupChoiceTexturePipeline, bool) error
	TkinematicsSceneType                                                                                                                                                                                                                                      func(*TkinematicsSceneType, bool) error
	XsdGoPkgHasElems_bind_attributesequencegles2_program_typeschema_BindAttribute_TxsdGles2ProgramTypeSequenceBindAttribute_                                                                                                                                  func(*XsdGoPkgHasElems_bind_attributesequencegles2_program_typeschema_BindAttribute_TxsdGles2ProgramTypeSequenceBindAttribute_, bool) error
	XsdGoPkgHasElem_int4x2choicecg_param_groupschema_Int4X2_Tint4X2Type_                                                                                                                                                                                      func(*XsdGoPkgHasElem_int4x2choicecg_param_groupschema_Int4X2_Tint4X2Type_, bool) error
	XsdGoPkgHasElem_profile_GLSLchoicefx_profile_groupschema_ProfileGlsl_TprofileGlslType_                                                                                                                                                                    func(*XsdGoPkgHasElem_profile_GLSLchoicefx_profile_groupschema_ProfileGlsl_TprofileGlslType_, bool) error
	XsdGoPkgHasElem_commentssequencecontributorsequenceasset_typeschema_Comments_XsdtString_                                                                                                                                                                  func(*XsdGoPkgHasElem_commentssequencecontributorsequenceasset_typeschema_Comments_XsdtString_, bool) error
	XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Stiffness_TtargetableFloatType_10                                                                                                       func(*XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Stiffness_TtargetableFloatType_10, bool) error
	TxsdGles2PipelineSettingsGroupChoiceBlendColor                                                                                                                                                                                                            func(*TxsdGles2PipelineSettingsGroupChoiceBlendColor, bool) error
	XsdGoPkgHasElem_speedsequencemotion_effector_info_typeschema_Speed_TcommonFloat2OrParamType_                                                                                                                                                              func(*XsdGoPkgHasElem_speedsequencemotion_effector_info_typeschema_Speed_TcommonFloat2OrParamType_, bool) error
	XsdGoPkgHasElems_bind_joint_axissequenceinstance_kinematics_scene_typeschema_BindJointAxis_TbindJointAxisType_                                                                                                                                            func(*XsdGoPkgHasElems_bind_joint_axissequenceinstance_kinematics_scene_typeschema_BindJointAxis_TbindJointAxisType_, bool) error
	TxsdGlPipelineSettingsGroupChoiceCullFace                                                                                                                                                                                                                 func(*TxsdGlPipelineSettingsGroupChoiceCullFace, bool) error
	XsdGoPkgHasElem_float2x4choicegles_param_groupschema_Float2X4_Tfloat2X4Type_                                                                                                                                                                              func(*XsdGoPkgHasElem_float2x4choicegles_param_groupschema_Float2X4_Tfloat2X4Type_, bool) error
	XsdGoPkgHasElem_brepchoicesequencegeometry_typeschema_Brep_TbrepType_                                                                                                                                                                                     func(*XsdGoPkgHasElem_brepchoicesequencegeometry_typeschema_Brep_TbrepType_, bool) error
	XsdGoPkgHasElem_modifiedsequenceasset_typeschema_Modified_XsdtDateTime_                                                                                                                                                                                   func(*XsdGoPkgHasElem_modifiedsequenceasset_typeschema_Modified_XsdtDateTime_, bool) error
	XsdGoPkgHasElem_angularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Angular_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceAngular_                                                                     func(*XsdGoPkgHasElem_angularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Angular_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceAngular_, bool) error
	TxsdCollada                                                                                                                                                                                                                                               func(*TxsdCollada, bool) error
	TxsdGlPipelineSettingsGroupChoiceStencilOpSeparate                                                                                                                                                                                                        func(*TxsdGlPipelineSettingsGroupChoiceStencilOpSeparate, bool) error
	XsdGoPkgHasElem_line_smooth_enablechoicegles_pipeline_settings_groupschema_LineSmoothEnable_TxsdGlesPipelineSettingsGroupChoiceLineSmoothEnable_                                                                                                          func(*XsdGoPkgHasElem_line_smooth_enablechoicegles_pipeline_settings_groupschema_LineSmoothEnable_TxsdGlesPipelineSettingsGroupChoiceLineSmoothEnable_, bool) error
	TxsdGles2PipelineSettingsGroupChoiceColorMask                                                                                                                                                                                                             func(*TxsdGles2PipelineSettingsGroupChoiceColorMask, bool) error
	XsdGoPkgHasElem_modifiersequenceglsl_newparam_typeschema_Modifier_TfxModifierEnum_                                                                                                                                                                        func(*XsdGoPkgHasElem_modifiersequenceglsl_newparam_typeschema_Modifier_TfxModifierEnum_, bool) error
	XsdGoPkgHasElem_point_sizechoicegles_pipeline_settings_groupschema_PointSize_TxsdGlesPipelineSettingsGroupChoicePointSize_                                                                                                                                func(*XsdGoPkgHasElem_point_sizechoicegles_pipeline_settings_groupschema_PointSize_TxsdGlesPipelineSettingsGroupChoicePointSize_, bool) error
	XsdGoPkgHasElem_paramchoicefx_rendertarget_typeschema_Param_TxsdFxRendertargetTypeChoiceParam_                                                                                                                                                            func(*XsdGoPkgHasElem_paramchoicefx_rendertarget_typeschema_Param_TxsdFxRendertargetTypeChoiceParam_, bool) error
	XsdGoPkgHasElem_refsequencestencil_funcchoicegles2_pipeline_settings_groupschema_Ref_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSequenceRef_                                                                                                          func(*XsdGoPkgHasElem_refsequencestencil_funcchoicegles2_pipeline_settings_groupschema_Ref_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSequenceRef_, bool) error
	XsdGoPkgHasElem_cylinderchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Cylinder_TcylinderType_                                                                                                                         func(*XsdGoPkgHasElem_cylinderchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Cylinder_TcylinderType_, bool) error
	XsdGoPkgHasElem_inertiasequencetechnique_commonsequenceinstance_rigid_body_typeschema_Inertia_TtargetableFloat3Type_                                                                                                                                      func(*XsdGoPkgHasElem_inertiasequencetechnique_commonsequenceinstance_rigid_body_typeschema_Inertia_TtargetableFloat3Type_, bool) error
	XsdGoPkgHasElem_targetssequencemorph_typeschema_Targets_TxsdMorphTypeSequenceTargets_                                                                                                                                                                     func(*XsdGoPkgHasElem_targetssequencemorph_typeschema_Targets_TxsdMorphTypeSequenceTargets_, bool) error
	TxsdSkinTypeSequenceJoints                                                                                                                                                                                                                                func(*TxsdSkinTypeSequenceJoints, bool) error
	XsdGoPkgHasElem_samplerRECTchoiceglsl_value_groupschema_SamplerRECT_TfxSamplerRECTType_                                                                                                                                                                   func(*XsdGoPkgHasElem_samplerRECTchoiceglsl_value_groupschema_SamplerRECT_TfxSamplerRECTType_, bool) error
	TxsdProfileGlslTypeSequenceTechnique                                                                                                                                                                                                                      func(*TxsdProfileGlslTypeSequenceTechnique, bool) error
	XsdGoPkgHasElem_fog_colorchoicegles_pipeline_settings_groupschema_FogColor_TxsdGlesPipelineSettingsGroupChoiceFogColor_                                                                                                                                   func(*XsdGoPkgHasElem_fog_colorchoicegles_pipeline_settings_groupschema_FogColor_TxsdGlesPipelineSettingsGroupChoiceFogColor_, bool) error
	XsdGoPkgHasElems_bind_uniformsequenceglsl_program_typeschema_BindUniform_TxsdGlslProgramTypeSequenceBindUniform_                                                                                                                                          func(*XsdGoPkgHasElems_bind_uniformsequenceglsl_program_typeschema_BindUniform_TxsdGlslProgramTypeSequenceBindUniform_, bool) error
	TxsdProfileCommonTypeSequenceTechnique                                                                                                                                                                                                                    func(*TxsdProfileCommonTypeSequenceTechnique, bool) error
	XsdGoPkgHasElem_polygon_offset_line_enablechoicegl_pipeline_settings_groupschema_PolygonOffsetLineEnable_TxsdGlPipelineSettingsGroupChoicePolygonOffsetLineEnable_                                                                                        func(*XsdGoPkgHasElem_polygon_offset_line_enablechoicegl_pipeline_settings_groupschema_PolygonOffsetLineEnable_TxsdGlPipelineSettingsGroupChoicePolygonOffsetLineEnable_, bool) error
	XsdGoPkgHasElem_swing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_SwingConeAndTwist_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist_                                    func(*XsdGoPkgHasElem_swing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_SwingConeAndTwist_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist_, bool) error
	XsdGoPkgHasElem_falloff_exponentsequencespotchoicetechnique_commonsequencelight_typeschema_FalloffExponent_TtargetableFloatType_00                                                                                                                        func(*XsdGoPkgHasElem_falloff_exponentsequencespotchoicetechnique_commonsequencelight_typeschema_FalloffExponent_TtargetableFloatType_00, bool) error
	XsdGoPkgHasElem_wrap_ssequencegles_sampler_states_groupschema_WrapS_TglesSamplerWrapEnum_Repeat                                                                                                                                                           func(*XsdGoPkgHasElem_wrap_ssequencegles_sampler_states_groupschema_WrapS_TglesSamplerWrapEnum_Repeat, bool) error
	XsdGoPkgHasElem_technique_commonsequencephysics_scene_typeschema_TechniqueCommon_TxsdPhysicsSceneTypeSequenceTechniqueCommon_                                                                                                                             func(*XsdGoPkgHasElem_technique_commonsequencephysics_scene_typeschema_TechniqueCommon_TxsdPhysicsSceneTypeSequenceTechniqueCommon_, bool) error
	XsdGoPkgHasElem_modesequencecolor_materialchoicegl_pipeline_settings_groupschema_Mode_TxsdGlPipelineSettingsGroupChoiceColorMaterialSequenceMode_                                                                                                         func(*XsdGoPkgHasElem_modesequencecolor_materialchoicegl_pipeline_settings_groupschema_Mode_TxsdGlPipelineSettingsGroupChoiceColorMaterialSequenceMode_, bool) error
	XsdGoPkgHasElem_material_ambientchoicegl_pipeline_settings_groupschema_MaterialAmbient_TxsdGlPipelineSettingsGroupChoiceMaterialAmbient_                                                                                                                  func(*XsdGoPkgHasElem_material_ambientchoicegl_pipeline_settings_groupschema_MaterialAmbient_TxsdGlPipelineSettingsGroupChoiceMaterialAmbient_, bool) error
	XsdGoPkgHasElem_control_verticessequencenurbs_surface_typeschema_ControlVertices_TxsdNurbsSurfaceTypeSequenceControlVertices_                                                                                                                             func(*XsdGoPkgHasElem_control_verticessequencenurbs_surface_typeschema_ControlVertices_TxsdNurbsSurfaceTypeSequenceControlVertices_, bool) error
	XsdGoPkgHasElem_linksequenceattachment_fullchoicesequencelink_typeschema_Link_TlinkType_                                                                                                                                                                  func(*XsdGoPkgHasElem_linksequenceattachment_fullchoicesequencelink_typeschema_Link_TlinkType_, bool) error
	XsdGoPkgHasElem_paramchoicefx_common_color_or_texture_typeschema_Param_TxsdFxCommonColorOrTextureTypeChoiceParam_                                                                                                                                         func(*XsdGoPkgHasElem_paramchoicefx_common_color_or_texture_typeschema_Param_TxsdFxCommonColorOrTextureTypeChoiceParam_, bool) error
	XsdGoPkgHasElems_animationsequencelibrary_animations_typeschema_Animation_TanimationType_                                                                                                                                                                 func(*XsdGoPkgHasElems_animationsequencelibrary_animations_typeschema_Animation_TanimationType_, bool) error
	TsurfacesType                                                                                                                                                                                                                                             func(*TsurfacesType, bool) error
	TxsdFxCommonColorOrTextureTypeChoiceColor                                                                                                                                                                                                                 func(*TxsdFxCommonColorOrTextureTypeChoiceColor, bool) error
	XsdGoPkgHasElems_inputsequencevertex_weightssequenceskin_typeschema_Input_TinputLocalOffsetType_                                                                                                                                                          func(*XsdGoPkgHasElems_inputsequencevertex_weightssequenceskin_typeschema_Input_TinputLocalOffsetType_, bool) error
	TxsdBindMaterialTypeSequenceTechniqueCommon                                                                                                                                                                                                               func(*TxsdBindMaterialTypeSequenceTechniqueCommon, bool) error
	XsdGoPkgHasElem_float2x3choicegles_param_groupschema_Float2X3_Tfloat2X3Type_                                                                                                                                                                              func(*XsdGoPkgHasElem_float2x3choicegles_param_groupschema_Float2X3_Tfloat2X3Type_, bool) error
	TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceBlinn                                                                                                                                                                                                 func(*TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceBlinn, bool) error
	TxsdInstanceMaterialTypeSequenceBind                                                                                                                                                                                                                      func(*TxsdInstanceMaterialTypeSequenceBind, bool) error
	XsdGoPkgHasElem_light_model_two_side_enablechoicegl_pipeline_settings_groupschema_LightModelTwoSideEnable_TxsdGlPipelineSettingsGroupChoiceLightModelTwoSideEnable_                                                                                       func(*XsdGoPkgHasElem_light_model_two_side_enablechoicegl_pipeline_settings_groupschema_LightModelTwoSideEnable_TxsdGlPipelineSettingsGroupChoiceLightModelTwoSideEnable_, bool) error
	TxsdGles2PassTypeSequenceEvaluate                                                                                                                                                                                                                         func(*TxsdGles2PassTypeSequenceEvaluate, bool) error
	XsdGoPkgHasElems_library_formulaschoicesequenceCOLLADAschema_LibraryFormulas_TlibraryFormulasType_                                                                                                                                                        func(*XsdGoPkgHasElems_library_formulaschoicesequenceCOLLADAschema_LibraryFormulas_TlibraryFormulasType_, bool) error
	XsdGoPkgHasElem_blend_enablechoicegl_pipeline_settings_groupschema_BlendEnable_TxsdGlPipelineSettingsGroupChoiceBlendEnable_                                                                                                                              func(*XsdGoPkgHasElem_blend_enablechoicegl_pipeline_settings_groupschema_BlendEnable_TxsdGlPipelineSettingsGroupChoiceBlendEnable_, bool) error
	TglesTexcombinerCommandRgbType                                                                                                                                                                                                                            func(*TglesTexcombinerCommandRgbType, bool) error
	XsdGoPkgHasElem_front_facechoicegles2_pipeline_settings_groupschema_FrontFace_TxsdGles2PipelineSettingsGroupChoiceFrontFace_                                                                                                                              func(*XsdGoPkgHasElem_front_facechoicegles2_pipeline_settings_groupschema_FrontFace_TxsdGles2PipelineSettingsGroupChoiceFrontFace_, bool) error
	XsdGoPkgHasElem_stencil_mask_separatechoicegles2_pipeline_settings_groupschema_StencilMaskSeparate_TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparate_                                                                                               func(*XsdGoPkgHasElem_stencil_mask_separatechoicegles2_pipeline_settings_groupschema_StencilMaskSeparate_TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparate_, bool) error
	XsdGoPkgHasElem_stencil_opchoicegles_pipeline_settings_groupschema_StencilOp_TxsdGlesPipelineSettingsGroupChoiceStencilOp_                                                                                                                                func(*XsdGoPkgHasElem_stencil_opchoicegles_pipeline_settings_groupschema_StencilOp_TxsdGlesPipelineSettingsGroupChoiceStencilOp_, bool) error
	XsdGoPkgHasElem_front_facechoicegles_pipeline_settings_groupschema_FrontFace_TxsdGlesPipelineSettingsGroupChoiceFrontFace_                                                                                                                                func(*XsdGoPkgHasElem_front_facechoicegles_pipeline_settings_groupschema_FrontFace_TxsdGlesPipelineSettingsGroupChoiceFrontFace_, bool) error
	TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparate                                                                                                                                                                                                    func(*TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparate, bool) error
	XsdGoPkgHasElem_point_sizechoicegl_pipeline_settings_groupschema_PointSize_TxsdGlPipelineSettingsGroupChoicePointSize_                                                                                                                                    func(*XsdGoPkgHasElem_point_sizechoicegl_pipeline_settings_groupschema_PointSize_TxsdGlPipelineSettingsGroupChoicePointSize_, bool) error
	TxsdLightTypeSequenceTechniqueCommon                                                                                                                                                                                                                      func(*TxsdLightTypeSequenceTechniqueCommon, bool) error
	TtranslateType                                                                                                                                                                                                                                            func(*TtranslateType, bool) error
	TcircleType                                                                                                                                                                                                                                               func(*TcircleType, bool) error
	XsdGoPkgHasElem_axissequencechoicesequenceswept_surface_typeschema_Axis_Tfloat3Type_                                                                                                                                                                      func(*XsdGoPkgHasElem_axissequencechoicesequenceswept_surface_typeschema_Axis_Tfloat3Type_, bool) error
	XsdGoPkgHasElem_create_2dchoicesequenceimage_typeschema_Create2D_TxsdImageTypeSequenceChoiceCreate2D_                                                                                                                                                     func(*XsdGoPkgHasElem_create_2dchoicesequenceimage_typeschema_Create2D_TxsdImageTypeSequenceChoiceCreate2D_, bool) error
	TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist                                                                                                                                                                     func(*TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist, bool) error
	XsdGoPkgHasElem_scissor_test_enablechoicegl_pipeline_settings_groupschema_ScissorTestEnable_TxsdGlPipelineSettingsGroupChoiceScissorTestEnable_                                                                                                           func(*XsdGoPkgHasElem_scissor_test_enablechoicegl_pipeline_settings_groupschema_ScissorTestEnable_TxsdGlPipelineSettingsGroupChoiceScissorTestEnable_, bool) error
	TkinematicsType                                                                                                                                                                                                                                           func(*TkinematicsType, bool) error
	XsdGoPkgHasElem_point_size_minchoicegles_pipeline_settings_groupschema_PointSizeMin_TxsdGlesPipelineSettingsGroupChoicePointSizeMin_                                                                                                                      func(*XsdGoPkgHasElem_point_size_minchoicegles_pipeline_settings_groupschema_PointSizeMin_TxsdGlesPipelineSettingsGroupChoicePointSizeMin_, bool) error
	XsdGoPkgHasElem_int_arraychoicesequencesource_typeschema_IntArray_TintArrayType_                                                                                                                                                                          func(*XsdGoPkgHasElem_int_arraychoicesequencesource_typeschema_IntArray_TintArrayType_, bool) error
	XsdGoPkgHasElem_blend_enablechoicegles2_pipeline_settings_groupschema_BlendEnable_TxsdGles2PipelineSettingsGroupChoiceBlendEnable_                                                                                                                        func(*XsdGoPkgHasElem_blend_enablechoicegles2_pipeline_settings_groupschema_BlendEnable_TxsdGles2PipelineSettingsGroupChoiceBlendEnable_, bool) error
	XsdGoPkgHasElem_kinematicschoicesequencearticulated_system_typeschema_Kinematics_TkinematicsType_                                                                                                                                                         func(*XsdGoPkgHasElem_kinematicschoicesequencearticulated_system_typeschema_Kinematics_TkinematicsType_, bool) error
	TinstanceCameraType                                                                                                                                                                                                                                       func(*TinstanceCameraType, bool) error
	TxsdProfileGlslTypeSequenceTechniqueSequencePass                                                                                                                                                                                                          func(*TxsdProfileGlslTypeSequenceTechniqueSequencePass, bool) error
	TxsdRigidConstraintTypeSequenceAttachment                                                                                                                                                                                                                 func(*TxsdRigidConstraintTypeSequenceAttachment, bool) error
	XsdGoPkgHasElem_bool3x1choicecg_param_groupschema_Bool3X1_Tbool3Type_                                                                                                                                                                                     func(*XsdGoPkgHasElem_bool3x1choicecg_param_groupschema_Bool3X1_Tbool3Type_, bool) error
	XsdGoPkgHasElem_restitutionsequencetechnique_commonsequencephysics_material_typeschema_Restitution_TtargetableFloatType_                                                                                                                                  func(*XsdGoPkgHasElem_restitutionsequencetechnique_commonsequencephysics_material_typeschema_Restitution_TtargetableFloatType_, bool) error
	XsdGoPkgHasElem_bvec4choicegles2_value_groupschema_Bvec4_Tbool4Type_                                                                                                                                                                                      func(*XsdGoPkgHasElem_bvec4choicegles2_value_groupschema_Bvec4_Tbool4Type_, bool) error
	XsdGoPkgHasElem_zpasssequencestencil_opchoicegles2_pipeline_settings_groupschema_Zpass_TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceZpass_                                                                                                        func(*XsdGoPkgHasElem_zpasssequencestencil_opchoicegles2_pipeline_settings_groupschema_Zpass_TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceZpass_, bool) error
	TimageMipsType                                                                                                                                                                                                                                            func(*TimageMipsType, bool) error
	XsdGoPkgHasElem_valuesequencealpha_funcchoicegles_pipeline_settings_groupschema_Value_TxsdGlesPipelineSettingsGroupChoiceAlphaFuncSequenceValue_                                                                                                          func(*XsdGoPkgHasElem_valuesequencealpha_funcchoicegles_pipeline_settings_groupschema_Value_TxsdGlesPipelineSettingsGroupChoiceAlphaFuncSequenceValue_, bool) error
	TxsdProfileCommonTypeSequenceTechniqueSequenceChoicePhong                                                                                                                                                                                                 func(*TxsdProfileCommonTypeSequenceTechniqueSequenceChoicePhong, bool) error
	XsdGoPkgHasElem_textureCUBEchoicegl_pipeline_settings_groupschema_TextureCUBE_TxsdGlPipelineSettingsGroupChoiceTextureCUBE_                                                                                                                               func(*XsdGoPkgHasElem_textureCUBEchoicegl_pipeline_settings_groupschema_TextureCUBE_TxsdGlPipelineSettingsGroupChoiceTextureCUBE_, bool) error
	XsdGoPkgHasElem_zfailsequencestencil_opchoicegl_pipeline_settings_groupschema_Zfail_TxsdGlPipelineSettingsGroupChoiceStencilOpSequenceZfail_                                                                                                              func(*XsdGoPkgHasElem_zfailsequencestencil_opchoicegl_pipeline_settings_groupschema_Zfail_TxsdGlPipelineSettingsGroupChoiceStencilOpSequenceZfail_, bool) error
	XsdGoPkgHasElem_fixed2x2choicecg_param_groupschema_Fixed2X2_Tfloat2X2Type_                                                                                                                                                                                func(*XsdGoPkgHasElem_fixed2x2choicecg_param_groupschema_Fixed2X2_Tfloat2X2Type_, bool) error
	TxsdGlslProgramTypeSequenceBindUniform                                                                                                                                                                                                                    func(*TxsdGlslProgramTypeSequenceBindUniform, bool) error
	TrotateType                                                                                                                                                                                                                                               func(*TrotateType, bool) error
	TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace                                                                                                                                                                                          func(*TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace, bool) error
	TlibraryAnimationsType                                                                                                                                                                                                                                    func(*TlibraryAnimationsType, bool) error
	XsdGoPkgHasElems_bind_vertex_inputsequenceinstance_material_typeschema_BindVertexInput_TxsdInstanceMaterialTypeSequenceBindVertexInput_                                                                                                                   func(*XsdGoPkgHasElems_bind_vertex_inputsequenceinstance_material_typeschema_BindVertexInput_TxsdInstanceMaterialTypeSequenceBindVertexInput_, bool) error
	XsdGoPkgHasElem_quadratic_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_QuadraticAttenuation_TtargetableFloatType_00                                                                                                              func(*XsdGoPkgHasElem_quadratic_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_QuadraticAttenuation_TtargetableFloatType_00, bool) error
	XsdGoPkgHasElem_ambientsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Ambient_TfxCommonColorOrTextureType_                                                                                                                       func(*XsdGoPkgHasElem_ambientsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Ambient_TfxCommonColorOrTextureType_, bool) error
	XsdGoPkgHasElems_instance_lightsequencenode_typeschema_InstanceLight_TinstanceLightType_                                                                                                                                                                  func(*XsdGoPkgHasElems_instance_lightsequencenode_typeschema_InstanceLight_TinstanceLightType_, bool) error
	TxsdGlPipelineSettingsGroupChoiceColorMaterial                                                                                                                                                                                                            func(*TxsdGlPipelineSettingsGroupChoiceColorMaterial, bool) error
	XsdGoPkgHasElems_annotatesequenceglsl_newparam_typeschema_Annotate_TfxAnnotateType_                                                                                                                                                                       func(*XsdGoPkgHasElems_annotatesequenceglsl_newparam_typeschema_Annotate_TfxAnnotateType_, bool) error
	XsdGoPkgHasElem_reflectivitysequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Reflectivity_TfxCommonFloatOrParamType_                                                                                                               func(*XsdGoPkgHasElem_reflectivitysequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Reflectivity_TfxCommonFloatOrParamType_, bool) error
	TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestAlpha                                                                                                                                                                                    func(*TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestAlpha, bool) error
	XsdGoPkgHasElem_instance_effectsequencematerial_typeschema_InstanceEffect_TinstanceEffectType_                                                                                                                                                            func(*XsdGoPkgHasElem_instance_effectsequencematerial_typeschema_InstanceEffect_TinstanceEffectType_, bool) error
	XsdGoPkgHasElem_authorsequencecontributorsequenceasset_typeschema_Author_XsdtString_                                                                                                                                                                      func(*XsdGoPkgHasElem_authorsequencecontributorsequenceasset_typeschema_Author_XsdtString_, bool) error
	TphysicsSceneType                                                                                                                                                                                                                                         func(*TphysicsSceneType, bool) error
	XsdGoPkgHasElem_createdsequenceasset_typeschema_Created_XsdtDateTime_                                                                                                                                                                                     func(*XsdGoPkgHasElem_createdsequenceasset_typeschema_Created_XsdtDateTime_, bool) error
	TminmaxType                                                                                                                                                                                                                                               func(*TminmaxType, bool) error
	XsdGoPkgHasElem_splinechoicesequencegeometry_typeschema_Spline_TsplineType_                                                                                                                                                                               func(*XsdGoPkgHasElem_splinechoicesequencegeometry_typeschema_Spline_TsplineType_, bool) error
	XsdGoPkgHasElem_renderablesequenceimage_typeschema_Renderable_TxsdImageTypeSequenceRenderable_                                                                                                                                                            func(*XsdGoPkgHasElem_renderablesequenceimage_typeschema_Renderable_TxsdImageTypeSequenceRenderable_, bool) error
	TlibraryKinematicsModelsType                                                                                                                                                                                                                              func(*TlibraryKinematicsModelsType, bool) error
	XsdGoPkgHasElems_texenvchoicegles_texture_pipeline_typeschema_Texenv_TglesTexenvCommandType_                                                                                                                                                              func(*XsdGoPkgHasElems_texenvchoicegles_texture_pipeline_typeschema_Texenv_TglesTexenvCommandType_, bool) error
	XsdGoPkgHasElem_copyrightsequencecontributorsequenceasset_typeschema_Copyright_XsdtString_                                                                                                                                                                func(*XsdGoPkgHasElem_copyrightsequencecontributorsequenceasset_typeschema_Copyright_XsdtString_, bool) error
	XsdGoPkgHasElems_newparamsequenceformula_typeschema_Newparam_TformulaNewparamType_                                                                                                                                                                        func(*XsdGoPkgHasElems_newparamsequenceformula_typeschema_Newparam_TformulaNewparamType_, bool) error
	TforceFieldType                                                                                                                                                                                                                                           func(*TforceFieldType, bool) error
	TxsdAssetTypeSequenceCoverageSequenceGeographicLocation                                                                                                                                                                                                   func(*TxsdAssetTypeSequenceCoverageSequenceGeographicLocation, bool) error
	XsdGoPkgHasElem_light_quadratic_attenuationchoicegles_pipeline_settings_groupschema_LightQuadraticAttenuation_TxsdGlesPipelineSettingsGroupChoiceLightQuadraticAttenuation_                                                                               func(*XsdGoPkgHasElem_light_quadratic_attenuationchoicegles_pipeline_settings_groupschema_LightQuadraticAttenuation_TxsdGlesPipelineSettingsGroupChoiceLightQuadraticAttenuation_, bool) error
	TxsdImageTypeSequenceChoiceCreate3DSequenceSize                                                                                                                                                                                                           func(*TxsdImageTypeSequenceChoiceCreate3DSequenceSize, bool) error
	TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceStates                                                                                                                                                                                            func(*TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceStates, bool) error
	TinstanceJointType                                                                                                                                                                                                                                        func(*TinstanceJointType, bool) error
	XsdGoPkgHasElem_int2x4choicecg_param_groupschema_Int2X4_Tint2X4Type_                                                                                                                                                                                      func(*XsdGoPkgHasElem_int2x4choicecg_param_groupschema_Int2X4_Tint2X4Type_, bool) error
	XsdGoPkgHasGroup_GlesParamGroup                                                                                                                                                                                                                           func(*XsdGoPkgHasGroup_GlesParamGroup, bool) error
	XsdGoPkgHasElems_library_visual_sceneschoicesequenceCOLLADAschema_LibraryVisualScenes_TlibraryVisualScenesType_                                                                                                                                           func(*XsdGoPkgHasElems_library_visual_sceneschoicesequenceCOLLADAschema_LibraryVisualScenes_TlibraryVisualScenesType_, bool) error
	TlibraryAnimationClipsType                                                                                                                                                                                                                                func(*TlibraryAnimationClipsType, bool) error
	XsdGoPkgHasElem_backsequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Back_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceBack_                                                                                            func(*XsdGoPkgHasElem_backsequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Back_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceBack_, bool) error
	TinstanceGeometryType                                                                                                                                                                                                                                     func(*TinstanceGeometryType, bool) error
	TskinType                                                                                                                                                                                                                                                 func(*TskinType, bool) error
	XsdGoPkgHasElems_physics_modelsequencelibrary_physics_models_typeschema_PhysicsModel_TphysicsModelType_                                                                                                                                                   func(*XsdGoPkgHasElems_physics_modelsequencelibrary_physics_models_typeschema_PhysicsModel_TphysicsModelType_, bool) error
	XsdGoPkgHasElem_fixed3x2choicecg_param_groupschema_Fixed3X2_Tfloat3X2Type_                                                                                                                                                                                func(*XsdGoPkgHasElem_fixed3x2choicecg_param_groupschema_Fixed3X2_Tfloat3X2Type_, bool) error
	XsdGoPkgHasElem_formatsequencecreate_2dchoicesequenceimage_typeschema_Format_TxsdImageTypeSequenceChoiceCreate2DSequenceFormat_                                                                                                                           func(*XsdGoPkgHasElem_formatsequencecreate_2dchoicesequenceimage_typeschema_Format_TxsdImageTypeSequenceChoiceCreate2DSequenceFormat_, bool) error
	Tgles2ShaderType                                                                                                                                                                                                                                          func(*Tgles2ShaderType, bool) error
	XsdGoPkgHasElems_library_cameraschoicesequenceCOLLADAschema_LibraryCameras_TlibraryCamerasType_                                                                                                                                                           func(*XsdGoPkgHasElems_library_cameraschoicesequenceCOLLADAschema_LibraryCameras_TlibraryCamerasType_, bool) error
	XsdGoPkgHasElems_bind_kinematics_modelsequenceinstance_kinematics_scene_typeschema_BindKinematicsModel_TbindKinematicsModelType_                                                                                                                          func(*XsdGoPkgHasElems_bind_kinematics_modelsequenceinstance_kinematics_scene_typeschema_BindKinematicsModel_TbindKinematicsModelType_, bool) error
	XsdGoPkgHasElem_edgessequencebrep_typeschema_Edges_TedgesType_                                                                                                                                                                                            func(*XsdGoPkgHasElem_edgessequencebrep_typeschema_Edges_TedgesType_, bool) error
	XsdGoPkgHasElem_technique_commonsequencephysics_material_typeschema_TechniqueCommon_TxsdPhysicsMaterialTypeSequenceTechniqueCommon_                                                                                                                       func(*XsdGoPkgHasElem_technique_commonsequencephysics_material_typeschema_TechniqueCommon_TxsdPhysicsMaterialTypeSequenceTechniqueCommon_, bool) error
	XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_                                                                                                                                                                                      func(*XsdGoPkgHasElems_extrasequenceanimation_typeschema_Extra_TextraType_, bool) error
	TxsdGlPipelineSettingsGroupChoicePointSizeMin                                                                                                                                                                                                             func(*TxsdGlPipelineSettingsGroupChoicePointSizeMin, bool) error
	XsdGoPkgHasElem_lighting_enablechoicegles_pipeline_settings_groupschema_LightingEnable_TxsdGlesPipelineSettingsGroupChoiceLightingEnable_                                                                                                                 func(*XsdGoPkgHasElem_lighting_enablechoicegles_pipeline_settings_groupschema_LightingEnable_TxsdGlesPipelineSettingsGroupChoiceLightingEnable_, bool) error
	TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceFail                                                                                                                                                                                                  func(*TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceFail, bool) error
	XsdGoPkgHasElem_valuesequencealpha_funcchoicegl_pipeline_settings_groupschema_Value_TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceValue_                                                                                                              func(*XsdGoPkgHasElem_valuesequencealpha_funcchoicegl_pipeline_settings_groupschema_Value_TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceValue_, bool) error
	XsdGoPkgHasElem_alpha_test_enablechoicegl_pipeline_settings_groupschema_AlphaTestEnable_TxsdGlPipelineSettingsGroupChoiceAlphaTestEnable_                                                                                                                 func(*XsdGoPkgHasElem_alpha_test_enablechoicegl_pipeline_settings_groupschema_AlphaTestEnable_TxsdGlPipelineSettingsGroupChoiceAlphaTestEnable_, bool) error
	TbindKinematicsModelType                                                                                                                                                                                                                                  func(*TbindKinematicsModelType, bool) error
	XsdGoPkgHasElem_gravitysequencetechnique_commonsequencephysics_scene_typeschema_Gravity_TtargetableFloat3Type_                                                                                                                                            func(*XsdGoPkgHasElem_gravitysequencetechnique_commonsequencephysics_scene_typeschema_Gravity_TtargetableFloat3Type_, bool) error
	XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegl_pipeline_settings_groupschema_Rgb_TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparateSequenceRgb_                                                                                           func(*XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegl_pipeline_settings_groupschema_Rgb_TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparateSequenceRgb_, bool) error
	XsdGoPkgHasElem_physics_materialchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_PhysicsMaterial_TphysicsMaterialType_                                                                                                   func(*XsdGoPkgHasElem_physics_materialchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_PhysicsMaterial_TphysicsMaterialType_, bool) error
	TxsdImageTypeSequenceChoiceCreate3DSequenceFormat                                                                                                                                                                                                         func(*TxsdImageTypeSequenceChoiceCreate3DSequenceFormat, bool) error
	TxsdInstanceEffectTypeSequenceSetparam                                                                                                                                                                                                                    func(*TxsdInstanceEffectTypeSequenceSetparam, bool) error
	TaccessorType                                                                                                                                                                                                                                             func(*TaccessorType, bool) error
	XsdGoPkgHasElem_hexchoiceimage_source_typeschema_Hex_TxsdImageSourceTypeChoiceHex_                                                                                                                                                                        func(*XsdGoPkgHasElem_hexchoiceimage_source_typeschema_Hex_TxsdImageSourceTypeChoiceHex_, bool) error
	XsdGoPkgHasElem_swept_surfacechoicesequencesurface_typeschema_SweptSurface_TsweptSurfaceType_                                                                                                                                                             func(*XsdGoPkgHasElem_swept_surfacechoicesequencesurface_typeschema_SweptSurface_TsweptSurfaceType_, bool) error
	XsdGoPkgHasElem_stencil_func_separatechoicegl_pipeline_settings_groupschema_StencilFuncSeparate_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparate_                                                                                                     func(*XsdGoPkgHasElem_stencil_func_separatechoicegl_pipeline_settings_groupschema_StencilFuncSeparate_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparate_, bool) error
	XsdGoPkgHasElems_materialsequencelibrary_materials_typeschema_Material_TmaterialType_                                                                                                                                                                     func(*XsdGoPkgHasElems_materialsequencelibrary_materials_typeschema_Material_TmaterialType_, bool) error
	TxsdProfileGlesTypeSequenceTechniqueSequencePass                                                                                                                                                                                                          func(*TxsdProfileGlesTypeSequenceTechniqueSequencePass, bool) error
	XsdGoPkgHasElem_bool2x3choicecg_param_groupschema_Bool2X3_Tbool2X3Type_                                                                                                                                                                                   func(*XsdGoPkgHasElem_bool2x3choicecg_param_groupschema_Bool2X3_Tbool2X3Type_, bool) error
	TxsdProfileGlesTypeSequenceTechnique                                                                                                                                                                                                                      func(*TxsdProfileGlesTypeSequenceTechnique, bool) error
	XsdGoPkgHasElem_polygon_offsetchoicegles2_pipeline_settings_groupschema_PolygonOffset_TxsdGles2PipelineSettingsGroupChoicePolygonOffset_                                                                                                                  func(*XsdGoPkgHasElem_polygon_offsetchoicegles2_pipeline_settings_groupschema_PolygonOffset_TxsdGles2PipelineSettingsGroupChoicePolygonOffset_, bool) error
	TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame                                                                                                                                                                                         func(*TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame, bool) error
	XsdGoPkgHasElem_cull_facechoicegles_pipeline_settings_groupschema_CullFace_TxsdGlesPipelineSettingsGroupChoiceCullFace_                                                                                                                                   func(*XsdGoPkgHasElem_cull_facechoicegles_pipeline_settings_groupschema_CullFace_TxsdGlesPipelineSettingsGroupChoiceCullFace_, bool) error
	TconvexMeshType                                                                                                                                                                                                                                           func(*TconvexMeshType, bool) error
	XsdGoPkgHasElems_sourcesequencechoicesequenceanimation_typeschema_Source_TsourceType_                                                                                                                                                                     func(*XsdGoPkgHasElems_sourcesequencechoicesequenceanimation_typeschema_Source_TsourceType_, bool) error
	TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceFront                                                                                                                                                                                      func(*TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceFront, bool) error
	XsdGoPkgHasElems_linkersequencegles2_program_typeschema_Linker_TfxTargetType_                                                                                                                                                                             func(*XsdGoPkgHasElems_linkersequencegles2_program_typeschema_Linker_TfxTargetType_, bool) error
	TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpring                                                                                                                                                                                              func(*TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpring, bool) error
	XsdGoPkgHasElem_point_fade_threshold_sizechoicegl_pipeline_settings_groupschema_PointFadeThresholdSize_TxsdGlPipelineSettingsGroupChoicePointFadeThresholdSize_                                                                                           func(*XsdGoPkgHasElem_point_fade_threshold_sizechoicegl_pipeline_settings_groupschema_PointFadeThresholdSize_TxsdGlPipelineSettingsGroupChoicePointFadeThresholdSize_, bool) error
	XsdGoPkgHasElem_fog_colorchoicegl_pipeline_settings_groupschema_FogColor_TxsdGlPipelineSettingsGroupChoiceFogColor_                                                                                                                                       func(*XsdGoPkgHasElem_fog_colorchoicegl_pipeline_settings_groupschema_FogColor_TxsdGlPipelineSettingsGroupChoiceFogColor_, bool) error
	TxsdGlPipelineSettingsGroupChoiceMaterialAmbient                                                                                                                                                                                                          func(*TxsdGlPipelineSettingsGroupChoiceMaterialAmbient, bool) error
	XsdGoPkgHasElem_limitssequenceaxis_constraint_typeschema_Limits_TjointLimitsType_                                                                                                                                                                         func(*XsdGoPkgHasElem_limitssequenceaxis_constraint_typeschema_Limits_TjointLimitsType_, bool) error
	TxsdGles2PipelineSettingsGroupChoiceCullFace                                                                                                                                                                                                              func(*TxsdGles2PipelineSettingsGroupChoiceCullFace, bool) error
	TkinematicsNewparamType                                                                                                                                                                                                                                   func(*TkinematicsNewparamType, bool) error
	XsdGoPkgHasElems_library_kinematics_modelschoicesequenceCOLLADAschema_LibraryKinematicsModels_TlibraryKinematicsModelsType_                                                                                                                               func(*XsdGoPkgHasElems_library_kinematics_modelschoicesequenceCOLLADAschema_LibraryKinematicsModels_TlibraryKinematicsModelsType_, bool) error
	XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Zfail_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceZfail_                                                                                             func(*XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Zfail_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceZfail_, bool) error
	XsdGoPkgHasElems_axis_infosequencemotion_technique_typeschema_AxisInfo_TmotionAxisInfoType_                                                                                                                                                               func(*XsdGoPkgHasElems_axis_infosequencemotion_technique_typeschema_AxisInfo_TmotionAxisInfoType_, bool) error
	TxsdAssetTypeSequenceContributor                                                                                                                                                                                                                          func(*TxsdAssetTypeSequenceContributor, bool) error
	TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparate                                                                                                                                                                                                     func(*TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparate, bool) error
	XsdGoPkgHasElem_depth_clamp_enablechoicegl_pipeline_settings_groupschema_DepthClampEnable_TxsdGlPipelineSettingsGroupChoiceDepthClampEnable_                                                                                                              func(*XsdGoPkgHasElem_depth_clamp_enablechoicegl_pipeline_settings_groupschema_DepthClampEnable_TxsdGlPipelineSettingsGroupChoiceDepthClampEnable_, bool) error
	XsdGoPkgHasElems_evaluate_scenesequencevisual_scene_typeschema_EvaluateScene_TxsdVisualSceneTypeSequenceEvaluateScene_                                                                                                                                    func(*XsdGoPkgHasElems_evaluate_scenesequencevisual_scene_typeschema_EvaluateScene_TxsdVisualSceneTypeSequenceEvaluateScene_, bool) error
	XsdGoPkgHasElem_stencil_func_separatechoicegles2_pipeline_settings_groupschema_StencilFuncSeparate_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparate_                                                                                               func(*XsdGoPkgHasElem_stencil_func_separatechoicegles2_pipeline_settings_groupschema_StencilFuncSeparate_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparate_, bool) error
	XsdGoPkgHasElems_paramsequenceaccessor_typeschema_Param_TparamType_                                                                                                                                                                                       func(*XsdGoPkgHasElems_paramsequenceaccessor_typeschema_Param_TparamType_, bool) error
	XsdGoPkgHasElem_facesequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Face_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceFace_                                                                                          func(*XsdGoPkgHasElem_facesequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Face_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceFace_, bool) error
	XsdGoPkgHasElems_translatechoiceattachment_endchoicesequencelink_typeschema_Translate_TtranslateType_                                                                                                                                                     func(*XsdGoPkgHasElems_translatechoiceattachment_endchoicesequencelink_typeschema_Translate_TtranslateType_, bool) error
	TinstanceRigidBodyType                                                                                                                                                                                                                                    func(*TinstanceRigidBodyType, bool) error
	TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceLambert                                                                                                                                                                                               func(*TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceLambert, bool) error
	XsdGoPkgHasElem_decelerationsequencemotion_axis_info_typeschema_Deceleration_TcommonFloatOrParamType_                                                                                                                                                     func(*XsdGoPkgHasElem_decelerationsequencemotion_axis_info_typeschema_Deceleration_TcommonFloatOrParamType_, bool) error
	XsdGoPkgHasElem_line_widthchoicegles2_pipeline_settings_groupschema_LineWidth_TxsdGles2PipelineSettingsGroupChoiceLineWidth_                                                                                                                              func(*XsdGoPkgHasElem_line_widthchoicegles2_pipeline_settings_groupschema_LineWidth_TxsdGles2PipelineSettingsGroupChoiceLineWidth_, bool) error
	XsdGoPkgHasElem_bool2x1choicecg_param_groupschema_Bool2X1_Tbool2Type_                                                                                                                                                                                     func(*XsdGoPkgHasElem_bool2x1choicecg_param_groupschema_Bool2X1_Tbool2Type_, bool) error
	XsdGoPkgHasElem_titlesequenceasset_typeschema_Title_XsdtString_                                                                                                                                                                                           func(*XsdGoPkgHasElem_titlesequenceasset_typeschema_Title_XsdtString_, bool) error
	XsdGoPkgHasElem_znearsequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Znear_TtargetableFloatType_                                                                                                                        func(*XsdGoPkgHasElem_znearsequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Znear_TtargetableFloatType_, bool) error
	TfxDepthtargetType                                                                                                                                                                                                                                        func(*TfxDepthtargetType, bool) error
	TwiresType                                                                                                                                                                                                                                                func(*TwiresType, bool) error
	XsdGoPkgHasElem_logic_opchoicegles_pipeline_settings_groupschema_LogicOp_TxsdGlesPipelineSettingsGroupChoiceLogicOp_                                                                                                                                      func(*XsdGoPkgHasElem_logic_opchoicegles_pipeline_settings_groupschema_LogicOp_TxsdGlesPipelineSettingsGroupChoiceLogicOp_, bool) error
	TglesTextureConstantType                                                                                                                                                                                                                                  func(*TglesTextureConstantType, bool) error
	TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceLinear                                                                                                                                                                                func(*TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceLinear, bool) error
	XsdGoPkgHasElem_arraysequencecreate_2dchoicesequenceimage_typeschema_Array_TxsdImageTypeSequenceChoiceCreate2DSequenceArray_                                                                                                                              func(*XsdGoPkgHasElem_arraysequencecreate_2dchoicesequenceimage_typeschema_Array_TxsdImageTypeSequenceChoiceCreate2DSequenceArray_, bool) error
	XsdGoPkgHasElem_half3x4choicecg_param_groupschema_Half3X4_Tfloat3X4Type_                                                                                                                                                                                  func(*XsdGoPkgHasElem_half3x4choicecg_param_groupschema_Half3X4_Tfloat3X4Type_, bool) error
	TxsdGlesPipelineSettingsGroupChoiceStencilFunc                                                                                                                                                                                                            func(*TxsdGlesPipelineSettingsGroupChoiceStencilFunc, bool) error
	TxsdAssetTypeSequenceCoverage                                                                                                                                                                                                                             func(*TxsdAssetTypeSequenceCoverage, bool) error
	XsdGoPkgHasElem_paramchoicebind_uniformsequenceshadersequenceprogramsequencecg_pass_typeschema_Param_TxsdCgPassTypeSequenceProgramSequenceShaderSequenceBindUniformChoiceParam_                                                                           func(*XsdGoPkgHasElem_paramchoicebind_uniformsequenceshadersequenceprogramsequencecg_pass_typeschema_Param_TxsdCgPassTypeSequenceProgramSequenceShaderSequenceBindUniformChoiceParam_, bool) error
	TkinematicsAxisInfoType                                                                                                                                                                                                                                   func(*TkinematicsAxisInfoType, bool) error
	TcameraType                                                                                                                                                                                                                                               func(*TcameraType, bool) error
	XsdGoPkgHasElem_alpha_test_enablechoicegles_pipeline_settings_groupschema_AlphaTestEnable_TxsdGlesPipelineSettingsGroupChoiceAlphaTestEnable_                                                                                                             func(*XsdGoPkgHasElem_alpha_test_enablechoicegles_pipeline_settings_groupschema_AlphaTestEnable_TxsdGlesPipelineSettingsGroupChoiceAlphaTestEnable_, bool) error
	XsdGoPkgHasElem_fog_startchoicegl_pipeline_settings_groupschema_FogStart_TxsdGlPipelineSettingsGroupChoiceFogStart_                                                                                                                                       func(*XsdGoPkgHasElem_fog_startchoicegl_pipeline_settings_groupschema_FogStart_TxsdGlPipelineSettingsGroupChoiceFogStart_, bool) error
	XsdGoPkgHasElem_textureRECTchoicegl_pipeline_settings_groupschema_TextureRECT_TxsdGlPipelineSettingsGroupChoiceTextureRECT_                                                                                                                               func(*XsdGoPkgHasElem_textureRECTchoicegl_pipeline_settings_groupschema_TextureRECT_TxsdGlPipelineSettingsGroupChoiceTextureRECT_, bool) error
	TxsdGlPipelineSettingsGroupChoiceFogMode                                                                                                                                                                                                                  func(*TxsdGlPipelineSettingsGroupChoiceFogMode, bool) error
	TmotionAxisInfoType                                                                                                                                                                                                                                       func(*TmotionAxisInfoType, bool) error
	XsdGoPkgHasElem_float1x1choicegles_param_groupschema_Float1X1_TfloatType_                                                                                                                                                                                 func(*XsdGoPkgHasElem_float1x1choicegles_param_groupschema_Float1X1_TfloatType_, bool) error
	XsdGoPkgHasElem_depth_rangechoicegles2_pipeline_settings_groupschema_DepthRange_TxsdGles2PipelineSettingsGroupChoiceDepthRange_                                                                                                                           func(*XsdGoPkgHasElem_depth_rangechoicegles2_pipeline_settings_groupschema_DepthRange_TxsdGles2PipelineSettingsGroupChoiceDepthRange_, bool) error
	XsdGoPkgHasElem_light_diffusechoicegl_pipeline_settings_groupschema_LightDiffuse_TxsdGlPipelineSettingsGroupChoiceLightDiffuse_                                                                                                                           func(*XsdGoPkgHasElem_light_diffusechoicegl_pipeline_settings_groupschema_LightDiffuse_TxsdGlPipelineSettingsGroupChoiceLightDiffuse_, bool) error
	TskewType                                                                                                                                                                                                                                                 func(*TskewType, bool) error
	TxsdGles2ValueGroupChoiceUsertypeSequenceSetparam                                                                                                                                                                                                         func(*TxsdGles2ValueGroupChoiceUsertypeSequenceSetparam, bool) error
	TxsdGlPipelineSettingsGroupChoiceFogCoordSrc                                                                                                                                                                                                              func(*TxsdGlPipelineSettingsGroupChoiceFogCoordSrc, bool) error
	XsdGoPkgHasElem_fog_modechoicegl_pipeline_settings_groupschema_FogMode_TxsdGlPipelineSettingsGroupChoiceFogMode_                                                                                                                                          func(*XsdGoPkgHasElem_fog_modechoicegl_pipeline_settings_groupschema_FogMode_TxsdGlPipelineSettingsGroupChoiceFogMode_, bool) error
	TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShape                                                                                                                                                                                             func(*TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShape, bool) error
	XsdGoPkgHasElem_material_emissionchoicegl_pipeline_settings_groupschema_MaterialEmission_TxsdGlPipelineSettingsGroupChoiceMaterialEmission_                                                                                                               func(*XsdGoPkgHasElem_material_emissionchoicegl_pipeline_settings_groupschema_MaterialEmission_TxsdGlPipelineSettingsGroupChoiceMaterialEmission_, bool) error
	XsdGoPkgHasElem_fog_coord_srcchoicegl_pipeline_settings_groupschema_FogCoordSrc_TxsdGlPipelineSettingsGroupChoiceFogCoordSrc_                                                                                                                             func(*XsdGoPkgHasElem_fog_coord_srcchoicegl_pipeline_settings_groupschema_FogCoordSrc_TxsdGlPipelineSettingsGroupChoiceFogCoordSrc_, bool) error
	XsdGoPkgHasElems_codechoicesequenceprofile_glsl_typeschema_Code_TfxCodeType_                                                                                                                                                                              func(*XsdGoPkgHasElems_codechoicesequenceprofile_glsl_typeschema_Code_TfxCodeType_, bool) error
	XsdGoPkgHasElem_verticessequencemesh_typeschema_Vertices_TverticesType_                                                                                                                                                                                   func(*XsdGoPkgHasElem_verticessequencemesh_typeschema_Vertices_TverticesType_, bool) error
	TxsdGlPipelineSettingsGroupChoiceTextureRECT                                                                                                                                                                                                              func(*TxsdGlPipelineSettingsGroupChoiceTextureRECT, bool) error
	XsdGoPkgHasElem_bool4x3choicecg_param_groupschema_Bool4X3_Tbool4X3Type_                                                                                                                                                                                   func(*XsdGoPkgHasElem_bool4x3choicecg_param_groupschema_Bool4X3_Tbool4X3Type_, bool) error
	XsdGoPkgHasElem_magfiltersequencefx_sampler_states_groupschema_Magfilter_TfxSamplerMagFilterEnum_Linear                                                                                                                                                   func(*XsdGoPkgHasElem_magfiltersequencefx_sampler_states_groupschema_Magfilter_TfxSamplerMagFilterEnum_Linear, bool) error
	TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceMask                                                                                                                                                                                          func(*TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceMask, bool) error
	XsdGoPkgHasGroup_GlslValueGroup                                                                                                                                                                                                                           func(*XsdGoPkgHasGroup_GlslValueGroup, bool) error
	XsdGoPkgHasElem_int4choicefx_annotate_groupschema_Int4_Tint4Type_                                                                                                                                                                                         func(*XsdGoPkgHasElem_int4choicefx_annotate_groupschema_Int4_Tint4Type_, bool) error
	TtargetableFloat4Type                                                                                                                                                                                                                                     func(*TtargetableFloat4Type, bool) error
	XsdGoPkgHasElem_bool4x4choicecg_param_groupschema_Bool4X4_Tbool4X4Type_                                                                                                                                                                                   func(*XsdGoPkgHasElem_bool4x4choicecg_param_groupschema_Bool4X4_Tbool4X4Type_, bool) error
	XsdGoPkgHasElem_light_ambientchoicegl_pipeline_settings_groupschema_LightAmbient_TxsdGlPipelineSettingsGroupChoiceLightAmbient_                                                                                                                           func(*XsdGoPkgHasElem_light_ambientchoicegl_pipeline_settings_groupschema_LightAmbient_TxsdGlPipelineSettingsGroupChoiceLightAmbient_, bool) error
	XsdGoPkgHasElem_fixed3x4choicecg_param_groupschema_Fixed3X4_Tfloat3X4Type_                                                                                                                                                                                func(*XsdGoPkgHasElem_fixed3x4choicecg_param_groupschema_Fixed3X4_Tfloat3X4Type_, bool) error
	TxsdSplineTypeSequenceControlVertices                                                                                                                                                                                                                     func(*TxsdSplineTypeSequenceControlVertices, bool) error
	XsdGoPkgHasElem_masksequencestencil_funcchoicegl_pipeline_settings_groupschema_Mask_TxsdGlPipelineSettingsGroupChoiceStencilFuncSequenceMask_                                                                                                             func(*XsdGoPkgHasElem_masksequencestencil_funcchoicegl_pipeline_settings_groupschema_Mask_TxsdGlPipelineSettingsGroupChoiceStencilFuncSequenceMask_, bool) error
	TinstanceMaterialType                                                                                                                                                                                                                                     func(*TinstanceMaterialType, bool) error
	TlibraryControllersType                                                                                                                                                                                                                                   func(*TlibraryControllersType, bool) error
	TxsdGlPipelineSettingsGroupChoiceMaterialSpecular                                                                                                                                                                                                         func(*TxsdGlPipelineSettingsGroupChoiceMaterialSpecular, bool) error
	XsdGoPkgHasElem_sample_coverage_enablechoicegles_pipeline_settings_groupschema_SampleCoverageEnable_TxsdGlesPipelineSettingsGroupChoiceSampleCoverageEnable_                                                                                              func(*XsdGoPkgHasElem_sample_coverage_enablechoicegles_pipeline_settings_groupschema_SampleCoverageEnable_TxsdGlesPipelineSettingsGroupChoiceSampleCoverageEnable_, bool) error
	TsourceType                                                                                                                                                                                                                                               func(*TsourceType, bool) error
	XsdGoPkgHasElem_srcsequenceblend_funcchoicegles2_pipeline_settings_groupschema_Src_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSequenceSrc_                                                                                                              func(*XsdGoPkgHasElem_srcsequenceblend_funcchoicegles2_pipeline_settings_groupschema_Src_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSequenceSrc_, bool) error
	XsdGoPkgHasElem_masksequencestencil_funcchoicegles_pipeline_settings_groupschema_Mask_TxsdGlesPipelineSettingsGroupChoiceStencilFuncSequenceMask_                                                                                                         func(*XsdGoPkgHasElem_masksequencestencil_funcchoicegles_pipeline_settings_groupschema_Mask_TxsdGlesPipelineSettingsGroupChoiceStencilFuncSequenceMask_, bool) error
	XsdGoPkgHasElems_tristripschoicesequencemesh_typeschema_Tristrips_TtristripsType_                                                                                                                                                                         func(*XsdGoPkgHasElems_tristripschoicesequencemesh_typeschema_Tristrips_TtristripsType_, bool) error
	TlightType                                                                                                                                                                                                                                                func(*TlightType, bool) error
	XsdGoPkgHasElem_fog_endchoicegles_pipeline_settings_groupschema_FogEnd_TxsdGlesPipelineSettingsGroupChoiceFogEnd_                                                                                                                                         func(*XsdGoPkgHasElem_fog_endchoicegles_pipeline_settings_groupschema_FogEnd_TxsdGlesPipelineSettingsGroupChoiceFogEnd_, bool) error
	XsdGoPkgHasElems_stencil_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_StencilClear_TfxClearstencilType_                                                                                                              func(*XsdGoPkgHasElems_stencil_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_StencilClear_TfxClearstencilType_, bool) error
	TxsdGlPipelineSettingsGroupChoiceLightConstantAttenuation                                                                                                                                                                                                 func(*TxsdGlPipelineSettingsGroupChoiceLightConstantAttenuation, bool) error
	XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequencerigid_body_typeschema_Hollow_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceShapeSequenceHollow_                                                                                      func(*XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequencerigid_body_typeschema_Hollow_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceShapeSequenceHollow_, bool) error
	XsdGoPkgHasElem_facesequencecolor_materialchoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoiceColorMaterialSequenceFace_                                                                                                         func(*XsdGoPkgHasElem_facesequencecolor_materialchoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoiceColorMaterialSequenceFace_, bool) error
	XsdGoPkgHasElem_depth_funcchoicegles_pipeline_settings_groupschema_DepthFunc_TxsdGlesPipelineSettingsGroupChoiceDepthFunc_                                                                                                                                func(*XsdGoPkgHasElem_depth_funcchoicegles_pipeline_settings_groupschema_DepthFunc_TxsdGlesPipelineSettingsGroupChoiceDepthFunc_, bool) error
	TinputLocalType                                                                                                                                                                                                                                           func(*TinputLocalType, bool) error
	XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles_pipeline_settings_groupschema_PolygonOffsetFillEnable_TxsdGlesPipelineSettingsGroupChoicePolygonOffsetFillEnable_                                                                                    func(*XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles_pipeline_settings_groupschema_PolygonOffsetFillEnable_TxsdGlesPipelineSettingsGroupChoicePolygonOffsetFillEnable_, bool) error
	TformulaType                                                                                                                                                                                                                                              func(*TformulaType, bool) error
	XsdGoPkgHasElem_enabledsequencetechnique_commonsequencerigid_constraint_typeschema_Enabled_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceEnabled_True                                                                                             func(*XsdGoPkgHasElem_enabledsequencetechnique_commonsequencerigid_constraint_typeschema_Enabled_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceEnabled_True, bool) error
	TxsdPhysicsMaterialTypeSequenceTechniqueCommon                                                                                                                                                                                                            func(*TxsdPhysicsMaterialTypeSequenceTechniqueCommon, bool) error
	XsdGoPkgHasElem_enumchoicegles_param_groupschema_Enum_TglesEnumerationType_                                                                                                                                                                               func(*XsdGoPkgHasElem_enumchoicegles_param_groupschema_Enum_TglesEnumerationType_, bool) error
	XsdGoPkgHasElem_material_specularchoicegles_pipeline_settings_groupschema_MaterialSpecular_TxsdGlesPipelineSettingsGroupChoiceMaterialSpecular_                                                                                                           func(*XsdGoPkgHasElem_material_specularchoicegles_pipeline_settings_groupschema_MaterialSpecular_TxsdGlesPipelineSettingsGroupChoiceMaterialSpecular_, bool) error
	XsdGoPkgHasElem_vec2choicegles2_value_groupschema_Vec2_Tfloat2Type_                                                                                                                                                                                       func(*XsdGoPkgHasElem_vec2choicegles2_value_groupschema_Vec2_Tfloat2Type_, bool) error
	XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskin_typeschema_Vcount_TlistOfUintsType_                                                                                                                                                              func(*XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskin_typeschema_Vcount_TlistOfUintsType_, bool) error
	TxsdGles2ProgramTypeSequenceBindUniform                                                                                                                                                                                                                   func(*TxsdGles2ProgramTypeSequenceBindUniform, bool) error
	TxsdGles2PipelineSettingsGroupChoiceStencilTestEnable                                                                                                                                                                                                     func(*TxsdGles2PipelineSettingsGroupChoiceStencilTestEnable, bool) error
	XsdGoPkgHasElems_samplersequencechoicesequenceanimation_typeschema_Sampler_TsamplerType_                                                                                                                                                                  func(*XsdGoPkgHasElems_samplersequencechoicesequenceanimation_typeschema_Sampler_TsamplerType_, bool) error
	TxsdGlPipelineSettingsGroupChoicePolygonOffset                                                                                                                                                                                                            func(*TxsdGlPipelineSettingsGroupChoicePolygonOffset, bool) error
	XsdGoPkgHasElem_point_smooth_enablechoicegles_pipeline_settings_groupschema_PointSmoothEnable_TxsdGlesPipelineSettingsGroupChoicePointSmoothEnable_                                                                                                       func(*XsdGoPkgHasElem_point_smooth_enablechoicegles_pipeline_settings_groupschema_PointSmoothEnable_TxsdGlesPipelineSettingsGroupChoicePointSmoothEnable_, bool) error
	TxsdGlPipelineSettingsGroupChoiceDepthMask                                                                                                                                                                                                                func(*TxsdGlPipelineSettingsGroupChoiceDepthMask, bool) error
	XsdGoPkgHasElem_depth_test_enablechoicegles_pipeline_settings_groupschema_DepthTestEnable_TxsdGlesPipelineSettingsGroupChoiceDepthTestEnable_                                                                                                             func(*XsdGoPkgHasElem_depth_test_enablechoicegles_pipeline_settings_groupschema_DepthTestEnable_TxsdGlesPipelineSettingsGroupChoiceDepthTestEnable_, bool) error
	TcgArrayType                                                                                                                                                                                                                                              func(*TcgArrayType, bool) error
	XsdGoPkgHasElems_library_lightschoicesequenceCOLLADAschema_LibraryLights_TlibraryLightsType_                                                                                                                                                              func(*XsdGoPkgHasElems_library_lightschoicesequenceCOLLADAschema_LibraryLights_TlibraryLightsType_, bool) error
	XsdGoPkgHasElems_lineschoicesequencemesh_typeschema_Lines_TlinesType_                                                                                                                                                                                     func(*XsdGoPkgHasElems_lineschoicesequencemesh_typeschema_Lines_TlinesType_, bool) error
	TcommonParamType                                                                                                                                                                                                                                          func(*TcommonParamType, bool) error
	XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegles_pipeline_settings_groupschema_SampleAlphaToOneEnable_TxsdGlesPipelineSettingsGroupChoiceSampleAlphaToOneEnable_                                                                                      func(*XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegles_pipeline_settings_groupschema_SampleAlphaToOneEnable_TxsdGlesPipelineSettingsGroupChoiceSampleAlphaToOneEnable_, bool) error
	XsdGoPkgHasElems_attachment_startchoicesequencelink_typeschema_AttachmentStart_TxsdLinkTypeSequenceChoiceAttachmentStart_                                                                                                                                 func(*XsdGoPkgHasElems_attachment_startchoicesequencelink_typeschema_AttachmentStart_TxsdLinkTypeSequenceChoiceAttachmentStart_, bool) error
	TxsdGlesPipelineSettingsGroupChoiceBlendFunc                                                                                                                                                                                                              func(*TxsdGlesPipelineSettingsGroupChoiceBlendFunc, bool) error
	XsdGoPkgHasElem_srcsequenceblend_funcchoicegles_pipeline_settings_groupschema_Src_TxsdGlesPipelineSettingsGroupChoiceBlendFuncSequenceSrc_                                                                                                                func(*XsdGoPkgHasElem_srcsequenceblend_funcchoicegles_pipeline_settings_groupschema_Src_TxsdGlesPipelineSettingsGroupChoiceBlendFuncSequenceSrc_, bool) error
	TpolygonsType                                                                                                                                                                                                                                             func(*TpolygonsType, bool) error
	XsdGoPkgHasElem_radiussequencesphere_typeschema_Radius_TfloatType_                                                                                                                                                                                        func(*XsdGoPkgHasElem_radiussequencesphere_typeschema_Radius_TfloatType_, bool) error
	TxsdSkinTypeSequenceVertexWeights                                                                                                                                                                                                                         func(*TxsdSkinTypeSequenceVertexWeights, bool) error
	XsdGoPkgHasElem_masssequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Mass_TtargetableFloatType_                                                                                                                                func(*XsdGoPkgHasElem_masssequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Mass_TtargetableFloatType_, bool) error
	TxsdGles2PipelineSettingsGroupChoiceFrontFace                                                                                                                                                                                                             func(*TxsdGles2PipelineSettingsGroupChoiceFrontFace, bool) error
	TfxCommonNewparamType                                                                                                                                                                                                                                     func(*TfxCommonNewparamType, bool) error
	XsdGoPkgHasElem_material_emissionchoicegles_pipeline_settings_groupschema_MaterialEmission_TxsdGlesPipelineSettingsGroupChoiceMaterialEmission_                                                                                                           func(*XsdGoPkgHasElem_material_emissionchoicegles_pipeline_settings_groupschema_MaterialEmission_TxsdGlesPipelineSettingsGroupChoiceMaterialEmission_, bool) error
	XsdGoPkgHasElem_time_stepsequencetechnique_commonsequencephysics_scene_typeschema_TimeStep_TtargetableFloatType_                                                                                                                                          func(*XsdGoPkgHasElem_time_stepsequencetechnique_commonsequencephysics_scene_typeschema_TimeStep_TtargetableFloatType_, bool) error
	TlibraryPhysicsModelsType                                                                                                                                                                                                                                 func(*TlibraryPhysicsModelsType, bool) error
	TxsdGles2ValueGroupChoiceUsertype                                                                                                                                                                                                                         func(*TxsdGles2ValueGroupChoiceUsertype, bool) error
	XsdGoPkgHasElems_stencil_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_StencilTarget_TfxStenciltargetType_                                                                                                           func(*XsdGoPkgHasElems_stencil_targetsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_StencilTarget_TfxStenciltargetType_, bool) error
	XsdGoPkgHasElem_enumchoicefx_newparam_groupschema_Enum_XsdtString_                                                                                                                                                                                        func(*XsdGoPkgHasElem_enumchoicefx_newparam_groupschema_Enum_XsdtString_, bool) error
	XsdGoPkgHasElem_floatchoicekinematics_newparam_typeschema_Float_TfloatType_                                                                                                                                                                               func(*XsdGoPkgHasElem_floatchoicekinematics_newparam_typeschema_Float_TfloatType_, bool) error
	TxsdSourceTypeSequenceTechniqueCommon                                                                                                                                                                                                                     func(*TxsdSourceTypeSequenceTechniqueCommon, bool) error
	TxsdImageTypeSequenceRenderable                                                                                                                                                                                                                           func(*TxsdImageTypeSequenceRenderable, bool) error
	XsdGoPkgHasElem_bind_shape_matrixsequenceskin_typeschema_BindShapeMatrix_Tfloat4X4Type_                                                                                                                                                                   func(*XsdGoPkgHasElem_bind_shape_matrixsequenceskin_typeschema_BindShapeMatrix_Tfloat4X4Type_, bool) error
	TlibraryArticulatedSystemsType                                                                                                                                                                                                                            func(*TlibraryArticulatedSystemsType, bool) error
	XsdGoPkgHasElems_bind_attributesequenceglsl_program_typeschema_BindAttribute_TxsdGlslProgramTypeSequenceBindAttribute_                                                                                                                                    func(*XsdGoPkgHasElems_bind_attributesequenceglsl_program_typeschema_BindAttribute_TxsdGlslProgramTypeSequenceBindAttribute_, bool) error
	TxsdGlPipelineSettingsGroupChoiceFogColor                                                                                                                                                                                                                 func(*TxsdGlPipelineSettingsGroupChoiceFogColor, bool) error
	TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef                                                                                                                                                                                        func(*TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef, bool) error
	XsdGoPkgHasElem_limitssequencekinematics_axis_info_typeschema_Limits_TkinematicsLimitsType_                                                                                                                                                               func(*XsdGoPkgHasElem_limitssequencekinematics_axis_info_typeschema_Limits_TkinematicsLimitsType_, bool) error
	TxsdProfileGles2TypeSequenceTechnique                                                                                                                                                                                                                     func(*TxsdProfileGles2TypeSequenceTechnique, bool) error
	TfxIncludeType                                                                                                                                                                                                                                            func(*TfxIncludeType, bool) error
	XsdGoPkgHasGroup_FxProfileGroup                                                                                                                                                                                                                           func(*XsdGoPkgHasGroup_FxProfileGroup, bool) error
	TxsdCameraTypeSequenceOpticsSequenceTechniqueCommon                                                                                                                                                                                                       func(*TxsdCameraTypeSequenceOpticsSequenceTechniqueCommon, bool) error
	XsdGoPkgHasElem_diffusesequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Diffuse_TfxCommonColorOrTextureType_                                                                                                                       func(*XsdGoPkgHasElem_diffusesequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Diffuse_TfxCommonColorOrTextureType_, bool) error
	XsdGoPkgHasElems_rendersequenceevaluate_scenesequencevisual_scene_typeschema_Render_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRender_                                                                                                               func(*XsdGoPkgHasElems_rendersequenceevaluate_scenesequencevisual_scene_typeschema_Render_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRender_, bool) error
	XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_DestRgb_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestRgb_                                                                                func(*XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_DestRgb_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestRgb_, bool) error
	XsdGoPkgHasElem_color_logic_op_enablechoicegles_pipeline_settings_groupschema_ColorLogicOpEnable_TxsdGlesPipelineSettingsGroupChoiceColorLogicOpEnable_                                                                                                   func(*XsdGoPkgHasElem_color_logic_op_enablechoicegles_pipeline_settings_groupschema_ColorLogicOpEnable_TxsdGlesPipelineSettingsGroupChoiceColorLogicOpEnable_, bool) error
	XsdGoPkgHasElem_fixed4choicecg_param_groupschema_Fixed4_Tfloat4Type_                                                                                                                                                                                      func(*XsdGoPkgHasElem_fixed4choicecg_param_groupschema_Fixed4_Tfloat4Type_, bool) error
	TnodeType                                                                                                                                                                                                                                                 func(*TnodeType, bool) error
	XsdGoPkgHasElem_color_maskchoicegl_pipeline_settings_groupschema_ColorMask_TxsdGlPipelineSettingsGroupChoiceColorMask_                                                                                                                                    func(*XsdGoPkgHasElem_color_maskchoicegl_pipeline_settings_groupschema_ColorMask_TxsdGlPipelineSettingsGroupChoiceColorMask_, bool) error
	XsdGoPkgHasElems_curvesequencesurface_curves_typeschema_Curve_TcurveType_                                                                                                                                                                                 func(*XsdGoPkgHasElems_curvesequencesurface_curves_typeschema_Curve_TcurveType_, bool) error
	XsdGoPkgHasElems_library_physics_materialschoicesequenceCOLLADAschema_LibraryPhysicsMaterials_TlibraryPhysicsMaterialsType_                                                                                                                               func(*XsdGoPkgHasElems_library_physics_materialschoicesequenceCOLLADAschema_LibraryPhysicsMaterials_TlibraryPhysicsMaterialsType_, bool) error
	TxsdGles2ProgramTypeSequenceBindAttribute                                                                                                                                                                                                                 func(*TxsdGles2ProgramTypeSequenceBindAttribute, bool) error
	TxsdCgPassTypeSequenceProgramSequenceShaderSequenceBindUniform                                                                                                                                                                                            func(*TxsdCgPassTypeSequenceProgramSequenceShaderSequenceBindUniform, bool) error
	TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRender                                                                                                                                                                                                    func(*TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRender, bool) error
	XsdGoPkgHasElem_blend_funcchoicegles2_pipeline_settings_groupschema_BlendFunc_TxsdGles2PipelineSettingsGroupChoiceBlendFunc_                                                                                                                              func(*XsdGoPkgHasElem_blend_funcchoicegles2_pipeline_settings_groupschema_BlendFunc_TxsdGles2PipelineSettingsGroupChoiceBlendFunc_, bool) error
	XsdGoPkgHasElems_setparamsequenceinstance_kinematics_model_typeschema_Setparam_TkinematicsSetparamType_                                                                                                                                                   func(*XsdGoPkgHasElems_setparamsequenceinstance_kinematics_model_typeschema_Setparam_TkinematicsSetparamType_, bool) error
	TanimationClipType                                                                                                                                                                                                                                        func(*TanimationClipType, bool) error
	XsdGoPkgHasElem_point_size_minchoicegl_pipeline_settings_groupschema_PointSizeMin_TxsdGlPipelineSettingsGroupChoicePointSizeMin_                                                                                                                          func(*XsdGoPkgHasElem_point_size_minchoicegl_pipeline_settings_groupschema_PointSizeMin_TxsdGlPipelineSettingsGroupChoicePointSizeMin_, bool) error
	TxsdGlPipelineSettingsGroupChoiceTextureEnvColor                                                                                                                                                                                                          func(*TxsdGlPipelineSettingsGroupChoiceTextureEnvColor, bool) error
	XsdGoPkgHasElems_technique_hintsequenceinstance_effect_typeschema_TechniqueHint_TxsdInstanceEffectTypeSequenceTechniqueHint_                                                                                                                              func(*XsdGoPkgHasElems_technique_hintsequenceinstance_effect_typeschema_TechniqueHint_TxsdInstanceEffectTypeSequenceTechniqueHint_, bool) error
	TxsdNurbsTypeSequenceControlVertices                                                                                                                                                                                                                      func(*TxsdNurbsTypeSequenceControlVertices, bool) error
	TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace                                                                                                                                                                                       func(*TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace, bool) error
	XsdGoPkgHasElem_mip_biassequencefx_sampler_states_groupschema_MipBias_XsdtFloat_00                                                                                                                                                                        func(*XsdGoPkgHasElem_mip_biassequencefx_sampler_states_groupschema_MipBias_XsdtFloat_00, bool) error
	TcommonIntOrParamType                                                                                                                                                                                                                                     func(*TcommonIntOrParamType, bool) error
	XsdGoPkgHasElem_samplerCUBEchoiceglsl_value_groupschema_SamplerCUBE_TfxSamplerCUBEType_                                                                                                                                                                   func(*XsdGoPkgHasElem_samplerCUBEchoiceglsl_value_groupschema_SamplerCUBE_TfxSamplerCUBEType_, bool) error
	TcontrollerType                                                                                                                                                                                                                                           func(*TcontrollerType, bool) error
	XsdGoPkgHasElem_profile_GLES2choicefx_profile_groupschema_ProfileGles2_TprofileGles2Type_                                                                                                                                                                 func(*XsdGoPkgHasElem_profile_GLES2choicefx_profile_groupschema_ProfileGles2_TprofileGles2Type_, bool) error
	XsdGoPkgHasElem_lighting_enablechoicegl_pipeline_settings_groupschema_LightingEnable_TxsdGlPipelineSettingsGroupChoiceLightingEnable_                                                                                                                     func(*XsdGoPkgHasElem_lighting_enablechoicegl_pipeline_settings_groupschema_LightingEnable_TxsdGlPipelineSettingsGroupChoiceLightingEnable_, bool) error
	XsdGoPkgHasElem_clip_plane_enablechoicegl_pipeline_settings_groupschema_ClipPlaneEnable_TxsdGlPipelineSettingsGroupChoiceClipPlaneEnable_                                                                                                                 func(*XsdGoPkgHasElem_clip_plane_enablechoicegl_pipeline_settings_groupschema_ClipPlaneEnable_TxsdGlPipelineSettingsGroupChoiceClipPlaneEnable_, bool) error
	TglesTexcombinerCommandType                                                                                                                                                                                                                               func(*TglesTexcombinerCommandType, bool) error
	XsdGoPkgHasElems_newparamsequenceprofile_gles_typeschema_Newparam_TglesNewparamType_                                                                                                                                                                      func(*XsdGoPkgHasElems_newparamsequenceprofile_gles_typeschema_Newparam_TglesNewparamType_, bool) error
	XsdGoPkgHasElem_sampler_stateschoicefx_setparam_groupschema_SamplerStates_TxsdFxSetparamGroupChoiceSamplerStates_                                                                                                                                         func(*XsdGoPkgHasElem_sampler_stateschoicefx_setparam_groupschema_SamplerStates_TxsdFxSetparamGroupChoiceSamplerStates_, bool) error
	XsdGoPkgHasElems_newparamsequenceprofile_common_typeschema_Newparam_TfxCommonNewparamType_                                                                                                                                                                func(*XsdGoPkgHasElems_newparamsequenceprofile_common_typeschema_Newparam_TfxCommonNewparamType_, bool) error
	TxsdGlPipelineSettingsGroupChoiceModelViewMatrix                                                                                                                                                                                                          func(*TxsdGlPipelineSettingsGroupChoiceModelViewMatrix, bool) error
	XsdGoPkgHasElem_unitsequenceasset_typeschema_Unit_TxsdAssetTypeSequenceUnit_                                                                                                                                                                              func(*XsdGoPkgHasElem_unitsequenceasset_typeschema_Unit_TxsdAssetTypeSequenceUnit_, bool) error
	XsdGoPkgHasElems_instance_formulachoicesequencekinematics_model_technique_typeschema_InstanceFormula_TinstanceFormulaType_                                                                                                                                func(*XsdGoPkgHasElems_instance_formulachoicesequencekinematics_model_technique_typeschema_InstanceFormula_TinstanceFormulaType_, bool) error
	XsdGoPkgHasElem_pointchoicetechnique_commonsequencelight_typeschema_Point_TxsdLightTypeSequenceTechniqueCommonChoicePoint_                                                                                                                                func(*XsdGoPkgHasElem_pointchoicetechnique_commonsequencelight_typeschema_Point_TxsdLightTypeSequenceTechniqueCommonChoicePoint_, bool) error
	TxsdInstanceRigidBodyTypeSequenceTechniqueCommon                                                                                                                                                                                                          func(*TxsdInstanceRigidBodyTypeSequenceTechniqueCommon, bool) error
	TxsdImageTypeSequenceChoiceCreate2D                                                                                                                                                                                                                       func(*TxsdImageTypeSequenceChoiceCreate2D, bool) error
	XsdGoPkgHasElem_depth_funcchoicegles2_pipeline_settings_groupschema_DepthFunc_TxsdGles2PipelineSettingsGroupChoiceDepthFunc_                                                                                                                              func(*XsdGoPkgHasElem_depth_funcchoicegles2_pipeline_settings_groupschema_DepthFunc_TxsdGles2PipelineSettingsGroupChoiceDepthFunc_, bool) error
	TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceMask                                                                                                                                                                                       func(*TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceMask, bool) error
	XsdGoPkgHasElem_srcsequenceblend_funcchoicegl_pipeline_settings_groupschema_Src_TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceSrc_                                                                                                                    func(*XsdGoPkgHasElem_srcsequenceblend_funcchoicegl_pipeline_settings_groupschema_Src_TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceSrc_, bool) error
	XsdGoPkgHasElems_revolutechoicesequencejoint_typeschema_Revolute_TaxisConstraintType_                                                                                                                                                                     func(*XsdGoPkgHasElems_revolutechoicesequencejoint_typeschema_Revolute_TaxisConstraintType_, bool) error
	XsdGoPkgHasElem_half3x1choicecg_param_groupschema_Half3X1_Tfloat3Type_                                                                                                                                                                                    func(*XsdGoPkgHasElem_half3x1choicecg_param_groupschema_Half3X1_Tfloat3Type_, bool) error
	XsdGoPkgHasElem_statessequencecg_pass_typeschema_States_TxsdCgPassTypeSequenceStates_                                                                                                                                                                     func(*XsdGoPkgHasElem_statessequencecg_pass_typeschema_States_TxsdCgPassTypeSequenceStates_, bool) error
	XsdGoPkgHasElem_stencil_op_separatechoicegles2_pipeline_settings_groupschema_StencilOpSeparate_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparate_                                                                                                     func(*XsdGoPkgHasElem_stencil_op_separatechoicegles2_pipeline_settings_groupschema_StencilOpSeparate_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparate_, bool) error
	TxsdImageTypeSequenceChoiceCreateCubeSequenceInitFrom                                                                                                                                                                                                     func(*TxsdImageTypeSequenceChoiceCreateCubeSequenceInitFrom, bool) error
	XsdGoPkgHasElem_evaluatesequencegles2_pass_typeschema_Evaluate_TxsdGles2PassTypeSequenceEvaluate_                                                                                                                                                         func(*XsdGoPkgHasElem_evaluatesequencegles2_pass_typeschema_Evaluate_TxsdGles2PassTypeSequenceEvaluate_, bool) error
	XsdGoPkgHasElem_point_distance_attenuationchoicegl_pipeline_settings_groupschema_PointDistanceAttenuation_TxsdGlPipelineSettingsGroupChoicePointDistanceAttenuation_                                                                                      func(*XsdGoPkgHasElem_point_distance_attenuationchoicegl_pipeline_settings_groupschema_PointDistanceAttenuation_TxsdGlPipelineSettingsGroupChoicePointDistanceAttenuation_, bool) error
	XsdGoPkgHasElem_light_spot_cutoffchoicegl_pipeline_settings_groupschema_LightSpotCutoff_TxsdGlPipelineSettingsGroupChoiceLightSpotCutoff_                                                                                                                 func(*XsdGoPkgHasElem_light_spot_cutoffchoicegl_pipeline_settings_groupschema_LightSpotCutoff_TxsdGlPipelineSettingsGroupChoiceLightSpotCutoff_, bool) error
	XsdGoPkgHasElem_evaluatesequencepasssequencetechniquesequenceprofile_gles_typeschema_Evaluate_TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceEvaluate_                                                                                           func(*XsdGoPkgHasElem_evaluatesequencepasssequencetechniquesequenceprofile_gles_typeschema_Evaluate_TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceEvaluate_, bool) error
	XsdGoPkgHasElem_wrap_ssequencefx_sampler_states_groupschema_WrapS_TfxSamplerWrapEnum_Wrap                                                                                                                                                                 func(*XsdGoPkgHasElem_wrap_ssequencefx_sampler_states_groupschema_WrapS_TfxSamplerWrapEnum_Wrap, bool) error
	XsdGoPkgHasElem_multisample_enablechoicegl_pipeline_settings_groupschema_MultisampleEnable_TxsdGlPipelineSettingsGroupChoiceMultisampleEnable_                                                                                                            func(*XsdGoPkgHasElem_multisample_enablechoicegl_pipeline_settings_groupschema_MultisampleEnable_TxsdGlPipelineSettingsGroupChoiceMultisampleEnable_, bool) error
	TxsdPolygonsTypeSequenceChoicePh                                                                                                                                                                                                                          func(*TxsdPolygonsTypeSequenceChoicePh, bool) error
	TimageSourceType                                                                                                                                                                                                                                          func(*TimageSourceType, bool) error
	XsdGoPkgHasElem_half3x3choicecg_param_groupschema_Half3X3_Tfloat3X3Type_                                                                                                                                                                                  func(*XsdGoPkgHasElem_half3x3choicecg_param_groupschema_Half3X3_Tfloat3X3Type_, bool) error
	XsdGoPkgHasElem_half4choicecg_param_groupschema_Half4_Tfloat4Type_                                                                                                                                                                                        func(*XsdGoPkgHasElem_half4choicecg_param_groupschema_Half4_Tfloat4Type_, bool) error
	TxsdGlPipelineSettingsGroupChoiceScissor                                                                                                                                                                                                                  func(*TxsdGlPipelineSettingsGroupChoiceScissor, bool) error
	XsdGoPkgHasElem_directionalchoicetechnique_commonsequencelight_typeschema_Directional_TxsdLightTypeSequenceTechniqueCommonChoiceDirectional_                                                                                                              func(*XsdGoPkgHasElem_directionalchoicetechnique_commonsequencelight_typeschema_Directional_TxsdLightTypeSequenceTechniqueCommonChoiceDirectional_, bool) error
	XsdGoPkgHasElems_matrixchoicesequencenode_typeschema_Matrix_TmatrixType_                                                                                                                                                                                  func(*XsdGoPkgHasElems_matrixchoicesequencenode_typeschema_Matrix_TmatrixType_, bool) error
	XsdGoPkgHasElem_fog_modechoicegles_pipeline_settings_groupschema_FogMode_TxsdGlesPipelineSettingsGroupChoiceFogMode_                                                                                                                                      func(*XsdGoPkgHasElem_fog_modechoicegles_pipeline_settings_groupschema_FogMode_TxsdGlesPipelineSettingsGroupChoiceFogMode_, bool) error
	XsdGoPkgHasElem_facessequencebrep_typeschema_Faces_TfacesType_                                                                                                                                                                                            func(*XsdGoPkgHasElem_facessequencebrep_typeschema_Faces_TfacesType_, bool) error
	TfxNewparamType                                                                                                                                                                                                                                           func(*TfxNewparamType, bool) error
	XsdGoPkgHasElem_color_maskchoicegles2_pipeline_settings_groupschema_ColorMask_TxsdGles2PipelineSettingsGroupChoiceColorMask_                                                                                                                              func(*XsdGoPkgHasElem_color_maskchoicegles2_pipeline_settings_groupschema_ColorMask_TxsdGles2PipelineSettingsGroupChoiceColorMask_, bool) error
	XsdGoPkgHasElems_passsequencetechniquesequenceprofile_glsl_typeschema_Pass_TxsdProfileGlslTypeSequenceTechniqueSequencePass_                                                                                                                              func(*XsdGoPkgHasElems_passsequencetechniquesequenceprofile_glsl_typeschema_Pass_TxsdProfileGlslTypeSequenceTechniqueSequencePass_, bool) error
	TintArrayType                                                                                                                                                                                                                                             func(*TintArrayType, bool) error
	TxsdGlesPipelineSettingsGroupChoiceStencilOp                                                                                                                                                                                                              func(*TxsdGlesPipelineSettingsGroupChoiceStencilOp, bool) error
	TfxColortargetType                                                                                                                                                                                                                                        func(*TfxColortargetType, bool) error
	TlibraryLightsType                                                                                                                                                                                                                                        func(*TlibraryLightsType, bool) error
	TkinematicsIndexType                                                                                                                                                                                                                                      func(*TkinematicsIndexType, bool) error
	TpolylistType                                                                                                                                                                                                                                             func(*TpolylistType, bool) error
	XsdGoPkgHasElem_capsulechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Capsule_TcapsuleType_                                                                                                                            func(*XsdGoPkgHasElem_capsulechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Capsule_TcapsuleType_, bool) error
	XsdGoPkgHasElem_spotchoicetechnique_commonsequencelight_typeschema_Spot_TxsdLightTypeSequenceTechniqueCommonChoiceSpot_                                                                                                                                   func(*XsdGoPkgHasElem_spotchoicetechnique_commonsequencelight_typeschema_Spot_TxsdLightTypeSequenceTechniqueCommonChoiceSpot_, bool) error
	XsdGoPkgHasElem_sourcessequencegles2_shader_typeschema_Sources_TxsdGles2ShaderTypeSequenceSources_                                                                                                                                                        func(*XsdGoPkgHasElem_sourcessequencegles2_shader_typeschema_Sources_TxsdGles2ShaderTypeSequenceSources_, bool) error
	XsdGoPkgHasElem_paramchoicekinematics_bind_typeschema_Param_TkinematicsParamType_                                                                                                                                                                         func(*XsdGoPkgHasElem_paramchoicekinematics_bind_typeschema_Param_TkinematicsParamType_, bool) error
	XsdGoPkgHasElem_half2x3choicecg_param_groupschema_Half2X3_Tfloat2X3Type_                                                                                                                                                                                  func(*XsdGoPkgHasElem_half2x3choicecg_param_groupschema_Half2X3_Tfloat2X3Type_, bool) error
	XsdGoPkgHasElem_scissor_test_enablechoicegles_pipeline_settings_groupschema_ScissorTestEnable_TxsdGlesPipelineSettingsGroupChoiceScissorTestEnable_                                                                                                       func(*XsdGoPkgHasElem_scissor_test_enablechoicegles_pipeline_settings_groupschema_ScissorTestEnable_TxsdGlesPipelineSettingsGroupChoiceScissorTestEnable_, bool) error
	XsdGoPkgHasElem_frame_objectsequencekinematics_technique_typeschema_FrameObject_TkinematicsFrameType_                                                                                                                                                     func(*XsdGoPkgHasElem_frame_objectsequencekinematics_technique_typeschema_FrameObject_TkinematicsFrameType_, bool) error
	XsdGoPkgHasElem_line_smooth_enablechoicegl_pipeline_settings_groupschema_LineSmoothEnable_TxsdGlPipelineSettingsGroupChoiceLineSmoothEnable_                                                                                                              func(*XsdGoPkgHasElem_line_smooth_enablechoicegl_pipeline_settings_groupschema_LineSmoothEnable_TxsdGlPipelineSettingsGroupChoiceLineSmoothEnable_, bool) error
	TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceSrc                                                                                                                                                                                                     func(*TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceSrc, bool) error
	XsdGoPkgHasElem_textureDEPTH_enablechoicegl_pipeline_settings_groupschema_TextureDEPTHEnable_TxsdGlPipelineSettingsGroupChoiceTextureDEPTHEnable_                                                                                                         func(*XsdGoPkgHasElem_textureDEPTH_enablechoicegl_pipeline_settings_groupschema_TextureDEPTHEnable_TxsdGlPipelineSettingsGroupChoiceTextureDEPTHEnable_, bool) error
	TglesSamplerType                                                                                                                                                                                                                                          func(*TglesSamplerType, bool) error
	XsdGoPkgHasElem_usertypechoicegles2_value_groupschema_Usertype_TxsdGles2ValueGroupChoiceUsertype_                                                                                                                                                         func(*XsdGoPkgHasElem_usertypechoicegles2_value_groupschema_Usertype_TxsdGles2ValueGroupChoiceUsertype_, bool) error
	XsdGoPkgHasElems_instance_jointchoicesequencekinematics_model_technique_typeschema_InstanceJoint_TinstanceJointType_                                                                                                                                      func(*XsdGoPkgHasElems_instance_jointchoicesequencekinematics_model_technique_typeschema_InstanceJoint_TinstanceJointType_, bool) error
	XsdGoPkgHasElem_springsequencetechnique_commonsequencerigid_constraint_typeschema_Spring_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpring_                                                                                                    func(*XsdGoPkgHasElem_springsequencetechnique_commonsequencerigid_constraint_typeschema_Spring_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpring_, bool) error
	TboxType                                                                                                                                                                                                                                                  func(*TboxType, bool) error
	XsdGoPkgHasElem_imagersequencecamera_typeschema_Imager_TxsdCameraTypeSequenceImager_                                                                                                                                                                      func(*XsdGoPkgHasElem_imagersequencecamera_typeschema_Imager_TxsdCameraTypeSequenceImager_, bool) error
	XsdGoPkgHasElems_attachment_fullchoicesequencelink_typeschema_AttachmentFull_TxsdLinkTypeSequenceChoiceAttachmentFull_                                                                                                                                    func(*XsdGoPkgHasElems_attachment_fullchoicesequencelink_typeschema_AttachmentFull_TxsdLinkTypeSequenceChoiceAttachmentFull_, bool) error
	XsdGoPkgHasElem_light_spot_exponentchoicegl_pipeline_settings_groupschema_LightSpotExponent_TxsdGlPipelineSettingsGroupChoiceLightSpotExponent_                                                                                                           func(*XsdGoPkgHasElem_light_spot_exponentchoicegl_pipeline_settings_groupschema_LightSpotExponent_TxsdGlPipelineSettingsGroupChoiceLightSpotExponent_, bool) error
	XsdGoPkgHasElem_polygon_offset_fill_enablechoicegl_pipeline_settings_groupschema_PolygonOffsetFillEnable_TxsdGlPipelineSettingsGroupChoicePolygonOffsetFillEnable_                                                                                        func(*XsdGoPkgHasElem_polygon_offset_fill_enablechoicegl_pipeline_settings_groupschema_PolygonOffsetFillEnable_TxsdGlPipelineSettingsGroupChoicePolygonOffsetFillEnable_, bool) error
	TfloatArrayType                                                                                                                                                                                                                                           func(*TfloatArrayType, bool) error
	TxsdGles2ShaderTypeSequenceSources                                                                                                                                                                                                                        func(*TxsdGles2ShaderTypeSequenceSources, bool) error
	TtechniqueType                                                                                                                                                                                                                                            func(*TtechniqueType, bool) error
	TsplineType                                                                                                                                                                                                                                               func(*TsplineType, bool) error
	TxsdGlPipelineSettingsGroupChoiceBlendFunc                                                                                                                                                                                                                func(*TxsdGlPipelineSettingsGroupChoiceBlendFunc, bool) error
	TcurvesType                                                                                                                                                                                                                                               func(*TcurvesType, bool) error
	XsdGoPkgHasElems_init_fromsequencecreate_3dchoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceCreate3DSequenceInitFrom_                                                                                                                   func(*XsdGoPkgHasElems_init_fromsequencecreate_3dchoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceCreate3DSequenceInitFrom_, bool) error
	XsdGoPkgHasElem_bool2x4choicecg_param_groupschema_Bool2X4_Tbool2X4Type_                                                                                                                                                                                   func(*XsdGoPkgHasElem_bool2x4choicecg_param_groupschema_Bool2X4_Tbool2X4Type_, bool) error
	XsdGoPkgHasElem_stencil_funcchoicegles_pipeline_settings_groupschema_StencilFunc_TxsdGlesPipelineSettingsGroupChoiceStencilFunc_                                                                                                                          func(*XsdGoPkgHasElem_stencil_funcchoicegles_pipeline_settings_groupschema_StencilFunc_TxsdGlesPipelineSettingsGroupChoiceStencilFunc_, bool) error
	XsdGoPkgHasElem_light_model_two_side_enablechoicegles_pipeline_settings_groupschema_LightModelTwoSideEnable_TxsdGlesPipelineSettingsGroupChoiceLightModelTwoSideEnable_                                                                                   func(*XsdGoPkgHasElem_light_model_two_side_enablechoicegles_pipeline_settings_groupschema_LightModelTwoSideEnable_TxsdGlesPipelineSettingsGroupChoiceLightModelTwoSideEnable_, bool) error
	XsdGoPkgHasElems_phchoicesequencepolygons_typeschema_Ph_TxsdPolygonsTypeSequenceChoicePh_                                                                                                                                                                 func(*XsdGoPkgHasElems_phchoicesequencepolygons_typeschema_Ph_TxsdPolygonsTypeSequenceChoicePh_, bool) error
	TfxSampler3DType                                                                                                                                                                                                                                          func(*TfxSampler3DType, bool) error
	XsdGoPkgHasElem_attachmentsequencerigid_constraint_typeschema_Attachment_TxsdRigidConstraintTypeSequenceAttachment_                                                                                                                                       func(*XsdGoPkgHasElem_attachmentsequencerigid_constraint_typeschema_Attachment_TxsdRigidConstraintTypeSequenceAttachment_, bool) error
	TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparate                                                                                                                                                                                                   func(*TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparate, bool) error
	XsdGoPkgHasElem_programsequencegles2_pass_typeschema_Program_Tgles2ProgramType_                                                                                                                                                                           func(*XsdGoPkgHasElem_programsequencegles2_pass_typeschema_Program_Tgles2ProgramType_, bool) error
	XsdGoPkgHasElem_init_fromchoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceInitFrom_                                                                                                                                                     func(*XsdGoPkgHasElem_init_fromchoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceInitFrom_, bool) error
	TxsdCgPassTypeSequenceEvaluate                                                                                                                                                                                                                            func(*TxsdCgPassTypeSequenceEvaluate, bool) error
	XsdGoPkgHasElems_indexsequencekinematics_axis_info_typeschema_Index_TkinematicsIndexType_                                                                                                                                                                 func(*XsdGoPkgHasElems_indexsequencekinematics_axis_info_typeschema_Index_TkinematicsIndexType_, bool) error
	XsdGoPkgHasElem_maxsequencejoint_limits_typeschema_Max_TminmaxType_                                                                                                                                                                                       func(*XsdGoPkgHasElem_maxsequencejoint_limits_typeschema_Max_TminmaxType_, bool) error
	TfxTargetType                                                                                                                                                                                                                                             func(*TfxTargetType, bool) error
	XsdGoPkgHasElem_instance_materialsequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_InstanceMaterial_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterial_                                                     func(*XsdGoPkgHasElem_instance_materialsequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_InstanceMaterial_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterial_, bool) error
	TimageType                                                                                                                                                                                                                                                func(*TimageType, bool) error
	XsdGoPkgHasElem_bool2x2choicecg_param_groupschema_Bool2X2_Tbool2X2Type_                                                                                                                                                                                   func(*XsdGoPkgHasElem_bool2x2choicecg_param_groupschema_Bool2X2_Tbool2X2Type_, bool) error
	XsdGoPkgHasElem_stencil_test_enablechoicegles_pipeline_settings_groupschema_StencilTestEnable_TxsdGlesPipelineSettingsGroupChoiceStencilTestEnable_                                                                                                       func(*XsdGoPkgHasElem_stencil_test_enablechoicegles_pipeline_settings_groupschema_StencilTestEnable_TxsdGlesPipelineSettingsGroupChoiceStencilTestEnable_, bool) error
	XsdGoPkgHasElems_rigid_bodysequencephysics_model_typeschema_RigidBody_TrigidBodyType_                                                                                                                                                                     func(*XsdGoPkgHasElems_rigid_bodysequencephysics_model_typeschema_RigidBody_TrigidBodyType_, bool) error
	XsdGoPkgHasElem_texture_pipelinechoicegles_pipeline_settings_groupschema_TexturePipeline_TxsdGlesPipelineSettingsGroupChoiceTexturePipeline_                                                                                                              func(*XsdGoPkgHasElem_texture_pipelinechoicegles_pipeline_settings_groupschema_TexturePipeline_TxsdGlesPipelineSettingsGroupChoiceTexturePipeline_, bool) error
	TglesTexenvCommandType                                                                                                                                                                                                                                    func(*TglesTexenvCommandType, bool) error
	XsdGoPkgHasElem_masksequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Mask_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceMask_                                                                                            func(*XsdGoPkgHasElem_masksequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Mask_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceMask_, bool) error
	XsdGoPkgHasElem_color_material_enablechoicegl_pipeline_settings_groupschema_ColorMaterialEnable_TxsdGlPipelineSettingsGroupChoiceColorMaterialEnable_                                                                                                     func(*XsdGoPkgHasElem_color_material_enablechoicegl_pipeline_settings_groupschema_ColorMaterialEnable_TxsdGlPipelineSettingsGroupChoiceColorMaterialEnable_, bool) error
	TlibraryImagesType                                                                                                                                                                                                                                        func(*TlibraryImagesType, bool) error
	TxsdGlesSamplerTypeSequenceTexcoord                                                                                                                                                                                                                       func(*TxsdGlesSamplerTypeSequenceTexcoord, bool) error
	TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef                                                                                                                                                                                           func(*TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef, bool) error
	TxsdGlPipelineSettingsGroupChoiceShadeModel                                                                                                                                                                                                               func(*TxsdGlPipelineSettingsGroupChoiceShadeModel, bool) error
	XsdGoPkgHasElem_material_specularchoicegl_pipeline_settings_groupschema_MaterialSpecular_TxsdGlPipelineSettingsGroupChoiceMaterialSpecular_                                                                                                               func(*XsdGoPkgHasElem_material_specularchoicegl_pipeline_settings_groupschema_MaterialSpecular_TxsdGlPipelineSettingsGroupChoiceMaterialSpecular_, bool) error
	XsdGoPkgHasElem_mass_framesequencetechnique_commonsequenceinstance_rigid_body_typeschema_MassFrame_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame_                                                                                     func(*XsdGoPkgHasElem_mass_framesequencetechnique_commonsequenceinstance_rigid_body_typeschema_MassFrame_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame_, bool) error
	XsdGoPkgHasElems_shapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Shape_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShape_                                                                                                 func(*XsdGoPkgHasElems_shapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Shape_TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShape_, bool) error
	XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles_pipeline_settings_groupschema_SampleAlphaToCoverageEnable_TxsdGlesPipelineSettingsGroupChoiceSampleAlphaToCoverageEnable_                                                                       func(*XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles_pipeline_settings_groupschema_SampleAlphaToCoverageEnable_TxsdGlesPipelineSettingsGroupChoiceSampleAlphaToCoverageEnable_, bool) error
	XsdGoPkgHasElems_setparamsequenceinstance_effect_typeschema_Setparam_TxsdInstanceEffectTypeSequenceSetparam_                                                                                                                                              func(*XsdGoPkgHasElems_setparamsequenceinstance_effect_typeschema_Setparam_TxsdInstanceEffectTypeSequenceSetparam_, bool) error
	XsdGoPkgHasElem_constantchoicesequencetechniquesequenceprofile_common_typeschema_Constant_TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceConstant_                                                                                                   func(*XsdGoPkgHasElem_constantchoicesequencetechniquesequenceprofile_common_typeschema_Constant_TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceConstant_, bool) error
	TxsdMorphTypeSequenceTargets                                                                                                                                                                                                                              func(*TxsdMorphTypeSequenceTargets, bool) error
	XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Zfail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceZfail_                                                                                       func(*XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Zfail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceZfail_, bool) error
	XsdGoPkgHasElem_valuesequencetexture_pipelinechoicegles_pipeline_settings_groupschema_Value_TglesTexturePipelineType_                                                                                                                                     func(*XsdGoPkgHasElem_valuesequencetexture_pipelinechoicegles_pipeline_settings_groupschema_Value_TglesTexturePipelineType_, bool) error
	TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparate                                                                                                                                                                                                 func(*TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparate, bool) error
	XsdGoPkgHasElem_psequencetriangles_typeschema_P_TpType_                                                                                                                                                                                                   func(*XsdGoPkgHasElem_psequencetriangles_typeschema_P_TpType_, bool) error
	XsdGoPkgHasElem_technique_commonsequencemotion_typeschema_TechniqueCommon_TmotionTechniqueType_                                                                                                                                                           func(*XsdGoPkgHasElem_technique_commonsequencemotion_typeschema_TechniqueCommon_TmotionTechniqueType_, bool) error
	XsdGoPkgHasElem_light_spot_directionchoicegl_pipeline_settings_groupschema_LightSpotDirection_TxsdGlPipelineSettingsGroupChoiceLightSpotDirection_                                                                                                        func(*XsdGoPkgHasElem_light_spot_directionchoicegl_pipeline_settings_groupschema_LightSpotDirection_TxsdGlPipelineSettingsGroupChoiceLightSpotDirection_, bool) error
	XsdGoPkgHasElem_altitudesequencegeographic_locationsequencecoveragesequenceasset_typeschema_Altitude_TxsdAssetTypeSequenceCoverageSequenceGeographicLocationSequenceAltitude_                                                                             func(*XsdGoPkgHasElem_altitudesequencegeographic_locationsequencecoveragesequenceasset_typeschema_Altitude_TxsdAssetTypeSequenceCoverageSequenceGeographicLocationSequenceAltitude_, bool) error
	XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Zpass_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceZpass_                                                                                             func(*XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Zpass_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceZpass_, bool) error
	XsdGoPkgHasElems_camerasequencelibrary_cameras_typeschema_Camera_TcameraType_                                                                                                                                                                             func(*XsdGoPkgHasElems_camerasequencelibrary_cameras_typeschema_Camera_TcameraType_, bool) error
	XsdGoPkgHasElems_instance_camerasequencenode_typeschema_InstanceCamera_TinstanceCameraType_                                                                                                                                                               func(*XsdGoPkgHasElems_instance_camerasequencenode_typeschema_InstanceCamera_TinstanceCameraType_, bool) error
	XsdGoPkgHasElems_psequencetrifans_typeschema_P_TpType_                                                                                                                                                                                                    func(*XsdGoPkgHasElems_psequencetrifans_typeschema_P_TpType_, bool) error
	XsdGoPkgHasElem_half2choicecg_param_groupschema_Half2_Tfloat2Type_                                                                                                                                                                                        func(*XsdGoPkgHasElem_half2choicecg_param_groupschema_Half2_Tfloat2Type_, bool) error
	XsdGoPkgHasElem_minfiltersequencefx_sampler_states_groupschema_Minfilter_TfxSamplerMinFilterEnum_Linear                                                                                                                                                   func(*XsdGoPkgHasElem_minfiltersequencefx_sampler_states_groupschema_Minfilter_TfxSamplerMinFilterEnum_Linear, bool) error
	XsdGoPkgHasElem_falloff_anglesequencespotchoicetechnique_commonsequencelight_typeschema_FalloffAngle_TtargetableFloatType_1800                                                                                                                            func(*XsdGoPkgHasElem_falloff_anglesequencespotchoicetechnique_commonsequencelight_typeschema_FalloffAngle_TtargetableFloatType_1800, bool) error
	XsdGoPkgHasElem_radiussequencecylinder_typeschema_Radius_Tfloat2Type_                                                                                                                                                                                     func(*XsdGoPkgHasElem_radiussequencecylinder_typeschema_Radius_Tfloat2Type_, bool) error
	XsdGoPkgHasElem_technique_commonsequencelight_typeschema_TechniqueCommon_TxsdLightTypeSequenceTechniqueCommon_                                                                                                                                            func(*XsdGoPkgHasElem_technique_commonsequencelight_typeschema_TechniqueCommon_TxsdLightTypeSequenceTechniqueCommon_, bool) error
	XsdGoPkgHasElem_texture2D_enablechoicegl_pipeline_settings_groupschema_Texture2DEnable_TxsdGlPipelineSettingsGroupChoiceTexture2DEnable_                                                                                                                  func(*XsdGoPkgHasElem_texture2D_enablechoicegl_pipeline_settings_groupschema_Texture2DEnable_TxsdGlPipelineSettingsGroupChoiceTexture2DEnable_, bool) error
	TkinematicsBindType                                                                                                                                                                                                                                       func(*TkinematicsBindType, bool) error
	XsdGoPkgHasElem_perspectivechoicetechnique_commonsequenceopticssequencecamera_typeschema_Perspective_TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoicePerspective_                                                                                func(*XsdGoPkgHasElem_perspectivechoicetechnique_commonsequenceopticssequencecamera_typeschema_Perspective_TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoicePerspective_, bool) error
	TinstanceEffectType                                                                                                                                                                                                                                       func(*TinstanceEffectType, bool) error
	XsdGoPkgHasElem_paramchoicebind_uniformsequenceglsl_program_typeschema_Param_TxsdGlslProgramTypeSequenceBindUniformChoiceParam_                                                                                                                           func(*XsdGoPkgHasElem_paramchoicebind_uniformsequenceglsl_program_typeschema_Param_TxsdGlslProgramTypeSequenceBindUniformChoiceParam_, bool) error
	TcgUserType                                                                                                                                                                                                                                               func(*TcgUserType, bool) error
	XsdGoPkgHasElems_shapesequencetechnique_commonsequencerigid_body_typeschema_Shape_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceShape_                                                                                                                  func(*XsdGoPkgHasElems_shapesequencetechnique_commonsequencerigid_body_typeschema_Shape_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceShape_, bool) error
	XsdGoPkgHasElem_material_ambientchoicegles_pipeline_settings_groupschema_MaterialAmbient_TxsdGlesPipelineSettingsGroupChoiceMaterialAmbient_                                                                                                              func(*XsdGoPkgHasElem_material_ambientchoicegles_pipeline_settings_groupschema_MaterialAmbient_TxsdGlesPipelineSettingsGroupChoiceMaterialAmbient_, bool) error
	TcommonFloat2OrParamType                                                                                                                                                                                                                                  func(*TcommonFloat2OrParamType, bool) error
	XsdGoPkgHasElem_arraychoicegles2_value_groupschema_Array_TxsdGles2ValueGroupChoiceArray_                                                                                                                                                                  func(*XsdGoPkgHasElem_arraychoicegles2_value_groupschema_Array_TxsdGles2ValueGroupChoiceArray_, bool) error
	XsdGoPkgHasElem_phongchoicesequencetechniquesequenceprofile_common_typeschema_Phong_TxsdProfileCommonTypeSequenceTechniqueSequenceChoicePhong_                                                                                                            func(*XsdGoPkgHasElem_phongchoicesequencetechniquesequenceprofile_common_typeschema_Phong_TxsdProfileCommonTypeSequenceTechniqueSequenceChoicePhong_, bool) error
	TinstanceKinematicsModelType                                                                                                                                                                                                                              func(*TinstanceKinematicsModelType, bool) error
	XsdGoPkgHasElem_color_logic_op_enablechoicegl_pipeline_settings_groupschema_ColorLogicOpEnable_TxsdGlPipelineSettingsGroupChoiceColorLogicOpEnable_                                                                                                       func(*XsdGoPkgHasElem_color_logic_op_enablechoicegl_pipeline_settings_groupschema_ColorLogicOpEnable_TxsdGlPipelineSettingsGroupChoiceColorLogicOpEnable_, bool) error
	XsdGoPkgHasElem_ivec4choicegles2_value_groupschema_Ivec4_Tint4Type_                                                                                                                                                                                       func(*XsdGoPkgHasElem_ivec4choicegles2_value_groupschema_Ivec4_Tint4Type_, bool) error
	XsdGoPkgHasElem_fixed2x3choicecg_param_groupschema_Fixed2X3_Tfloat2X3Type_                                                                                                                                                                                func(*XsdGoPkgHasElem_fixed2x3choicecg_param_groupschema_Fixed2X3_Tfloat2X3Type_, bool) error
	XsdGoPkgHasElems_library_articulated_systemschoicesequenceCOLLADAschema_LibraryArticulatedSystems_TlibraryArticulatedSystemsType_                                                                                                                         func(*XsdGoPkgHasElems_library_articulated_systemschoicesequenceCOLLADAschema_LibraryArticulatedSystems_TlibraryArticulatedSystemsType_, bool) error
	TlinesType                                                                                                                                                                                                                                                func(*TlinesType, bool) error
	XsdGoPkgHasElem_refchoicebinarysequencefx_target_typeschema_Ref_XsdtAnyURI_                                                                                                                                                                               func(*XsdGoPkgHasElem_refchoicebinarysequencefx_target_typeschema_Ref_XsdtAnyURI_, bool) error
	TxsdGlPipelineSettingsGroupChoiceLineStipple                                                                                                                                                                                                              func(*TxsdGlPipelineSettingsGroupChoiceLineStipple, bool) error
	XsdGoPkgHasElem_model_view_matrixchoicegl_pipeline_settings_groupschema_ModelViewMatrix_TxsdGlPipelineSettingsGroupChoiceModelViewMatrix_                                                                                                                 func(*XsdGoPkgHasElem_model_view_matrixchoicegl_pipeline_settings_groupschema_ModelViewMatrix_TxsdGlPipelineSettingsGroupChoiceModelViewMatrix_, bool) error
	XsdGoPkgHasElems_instance_materialsequencetechnique_commonsequencebind_material_typeschema_InstanceMaterial_TinstanceMaterialType_                                                                                                                        func(*XsdGoPkgHasElems_instance_materialsequencetechnique_commonsequencebind_material_typeschema_InstanceMaterial_TinstanceMaterialType_, bool) error
	XsdGoPkgHasElem_instance_visual_scenesequencescenesequenceCOLLADAschema_InstanceVisualScene_TinstanceWithExtraType_                                                                                                                                       func(*XsdGoPkgHasElem_instance_visual_scenesequencescenesequenceCOLLADAschema_InstanceVisualScene_TinstanceWithExtraType_, bool) error
	XsdGoPkgHasElems_setparamsequencecg_user_typeschema_Setparam_TcgSetparamType_                                                                                                                                                                             func(*XsdGoPkgHasElems_setparamsequencecg_user_typeschema_Setparam_TcgSetparamType_, bool) error
	XsdGoPkgHasElem_instance_physics_materialchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_InstancePhysicsMaterial_TinstancePhysicsMaterialType_                                                                          func(*XsdGoPkgHasElem_instance_physics_materialchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_InstancePhysicsMaterial_TinstancePhysicsMaterialType_, bool) error
	XsdGoPkgHasElem_arraychoiceglsl_value_groupschema_Array_TglslArrayType_                                                                                                                                                                                   func(*XsdGoPkgHasElem_arraychoiceglsl_value_groupschema_Array_TglslArrayType_, bool) error
	TscaleType                                                                                                                                                                                                                                                func(*TscaleType, bool) error
	XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_                                                                                                                                                                              func(*XsdGoPkgHasElems_techniquesequenceextra_typeschema_Technique_TtechniqueType_, bool) error
	XsdGoPkgHasElem_mip_max_levelsequencegles_sampler_states_groupschema_MipMaxLevel_XsdtUnsignedByte_255                                                                                                                                                     func(*XsdGoPkgHasElem_mip_max_levelsequencegles_sampler_states_groupschema_MipMaxLevel_XsdtUnsignedByte_255, bool) error
	TprofileCgType                                                                                                                                                                                                                                            func(*TprofileCgType, bool) error
	XsdGoPkgHasElem_failsequencestencil_opchoicegl_pipeline_settings_groupschema_Fail_TxsdGlPipelineSettingsGroupChoiceStencilOpSequenceFail_                                                                                                                 func(*XsdGoPkgHasElem_failsequencestencil_opchoicegl_pipeline_settings_groupschema_Fail_TxsdGlPipelineSettingsGroupChoiceStencilOpSequenceFail_, bool) error
	XsdGoPkgHasElem_facesequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceFace_                                                                                                func(*XsdGoPkgHasElem_facesequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceFace_, bool) error
	XsdGoPkgHasElem_light_model_color_controlchoicegl_pipeline_settings_groupschema_LightModelColorControl_TxsdGlPipelineSettingsGroupChoiceLightModelColorControl_                                                                                           func(*XsdGoPkgHasElem_light_model_color_controlchoicegl_pipeline_settings_groupschema_LightModelColorControl_TxsdGlPipelineSettingsGroupChoiceLightModelColorControl_, bool) error
	TkinematicsSetparamType                                                                                                                                                                                                                                   func(*TkinematicsSetparamType, bool) error
	XsdGoPkgHasElem_mipssequencecreate_cubechoicesequenceimage_typeschema_Mips_TimageMipsType_                                                                                                                                                                func(*XsdGoPkgHasElem_mipssequencecreate_cubechoicesequenceimage_typeschema_Mips_TimageMipsType_, bool) error
	XsdGoPkgHasElem_paramchoicefx_common_float_or_param_typeschema_Param_TxsdFxCommonFloatOrParamTypeChoiceParam_                                                                                                                                             func(*XsdGoPkgHasElem_paramchoicefx_common_float_or_param_typeschema_Param_TxsdFxCommonFloatOrParamTypeChoiceParam_, bool) error
	XsdGoPkgHasElem_int2x2choicecg_param_groupschema_Int2X2_Tint2X2Type_                                                                                                                                                                                      func(*XsdGoPkgHasElem_int2x2choicecg_param_groupschema_Int2X2_Tint2X2Type_, bool) error
	TxsdGlPipelineSettingsGroupChoicePointDistanceAttenuation                                                                                                                                                                                                 func(*TxsdGlPipelineSettingsGroupChoicePointDistanceAttenuation, bool) error
	XsdGoPkgHasElem_light_enablechoicegles_pipeline_settings_groupschema_LightEnable_TxsdGlesPipelineSettingsGroupChoiceLightEnable_                                                                                                                          func(*XsdGoPkgHasElem_light_enablechoicegles_pipeline_settings_groupschema_LightEnable_TxsdGlesPipelineSettingsGroupChoiceLightEnable_, bool) error
	TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparate                                                                                                                                                                                                     func(*TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparate, bool) error
	XsdGoPkgHasElem_bool4x1choicecg_param_groupschema_Bool4X1_Tbool4Type_                                                                                                                                                                                     func(*XsdGoPkgHasElem_bool4x1choicecg_param_groupschema_Bool4X1_Tbool4Type_, bool) error
	XsdGoPkgHasElem_int2x3choicecg_param_groupschema_Int2X3_Tint2X3Type_                                                                                                                                                                                      func(*XsdGoPkgHasElem_int2x3choicecg_param_groupschema_Int2X3_Tint2X3Type_, bool) error
	XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegles2_pipeline_settings_groupschema_Face_TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace_                                                                                      func(*XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegles2_pipeline_settings_groupschema_Face_TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace_, bool) error
	XsdGoPkgHasElem_funcsequencestencil_funcchoicegles2_pipeline_settings_groupschema_Func_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSequenceFunc_                                                                                                       func(*XsdGoPkgHasElem_funcsequencestencil_funcchoicegles2_pipeline_settings_groupschema_Func_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSequenceFunc_, bool) error
	XsdGoPkgHasElems_compilersequenceshadersequenceprogramsequencecg_pass_typeschema_Compiler_TfxTargetType_                                                                                                                                                  func(*XsdGoPkgHasElems_compilersequenceshadersequenceprogramsequencecg_pass_typeschema_Compiler_TfxTargetType_, bool) error
	XsdGoPkgHasElem_float4x2choicegles_param_groupschema_Float4X2_Tfloat4X2Type_                                                                                                                                                                              func(*XsdGoPkgHasElem_float4x2choicegles_param_groupschema_Float4X2_Tfloat4X2Type_, bool) error
	TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoiceOrthographic                                                                                                                                                                                     func(*TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoiceOrthographic, bool) error
	XsdGoPkgHasElem_bool_arraychoicesequencesource_typeschema_BoolArray_TboolArrayType_                                                                                                                                                                       func(*XsdGoPkgHasElem_bool_arraychoicesequencesource_typeschema_BoolArray_TboolArrayType_, bool) error
	XsdGoPkgHasElem_texture_env_modechoicegl_pipeline_settings_groupschema_TextureEnvMode_TxsdGlPipelineSettingsGroupChoiceTextureEnvMode_                                                                                                                    func(*XsdGoPkgHasElem_texture_env_modechoicegl_pipeline_settings_groupschema_TextureEnvMode_TxsdGlPipelineSettingsGroupChoiceTextureEnvMode_, bool) error
	XsdGoPkgHasElems_newparamsequencekinematics_model_technique_typeschema_Newparam_TkinematicsNewparamType_                                                                                                                                                  func(*XsdGoPkgHasElems_newparamsequencekinematics_model_technique_typeschema_Newparam_TkinematicsNewparamType_, bool) error
	XsdGoPkgHasElem_line_stipplechoicegl_pipeline_settings_groupschema_LineStipple_TxsdGlPipelineSettingsGroupChoiceLineStipple_                                                                                                                              func(*XsdGoPkgHasElem_line_stipplechoicegl_pipeline_settings_groupschema_LineStipple_TxsdGlPipelineSettingsGroupChoiceLineStipple_, bool) error
	XsdGoPkgHasGroup_Gles2ValueGroup                                                                                                                                                                                                                          func(*XsdGoPkgHasGroup_Gles2ValueGroup, bool) error
	TxsdCgPassTypeSequenceProgram                                                                                                                                                                                                                             func(*TxsdCgPassTypeSequenceProgram, bool) error
	TfxCommonFloatOrParamType                                                                                                                                                                                                                                 func(*TfxCommonFloatOrParamType, bool) error
	XsdGoPkgHasElem_fog_enablechoicegl_pipeline_settings_groupschema_FogEnable_TxsdGlPipelineSettingsGroupChoiceFogEnable_                                                                                                                                    func(*XsdGoPkgHasElem_fog_enablechoicegl_pipeline_settings_groupschema_FogEnable_TxsdGlPipelineSettingsGroupChoiceFogEnable_, bool) error
	TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparate                                                                                                                                                                                                   func(*TxsdGles2PipelineSettingsGroupChoiceStencilMaskSeparate, bool) error
	XsdGoPkgHasElem_boolchoicekinematics_newparam_typeschema_Bool_XsdtBoolean_                                                                                                                                                                                func(*XsdGoPkgHasElem_boolchoicekinematics_newparam_typeschema_Bool_XsdtBoolean_, bool) error
	TxsdGlPipelineSettingsGroupChoiceTexture3D                                                                                                                                                                                                                func(*TxsdGlPipelineSettingsGroupChoiceTexture3D, bool) error
	XsdGoPkgHasElem_fixed4x4choicecg_param_groupschema_Fixed4X4_Tfloat4X4Type_                                                                                                                                                                                func(*XsdGoPkgHasElem_fixed4x4choicecg_param_groupschema_Fixed4X4_Tfloat4X4Type_, bool) error
	TinstanceKinematicsSceneType                                                                                                                                                                                                                              func(*TinstanceKinematicsSceneType, bool) error
	XsdGoPkgHasElem_point_size_enablechoicegles2_pipeline_settings_groupschema_PointSizeEnable_TxsdGles2PipelineSettingsGroupChoicePointSizeEnable_                                                                                                           func(*XsdGoPkgHasElem_point_size_enablechoicegles2_pipeline_settings_groupschema_PointSizeEnable_TxsdGles2PipelineSettingsGroupChoicePointSizeEnable_, bool) error
	XsdGoPkgHasElem_heightsequencecapsule_typeschema_Height_TfloatType_                                                                                                                                                                                       func(*XsdGoPkgHasElem_heightsequencecapsule_typeschema_Height_TfloatType_, bool) error
	XsdGoPkgHasElems_prismaticchoicesequencejoint_typeschema_Prismatic_TaxisConstraintType_                                                                                                                                                                   func(*XsdGoPkgHasElems_prismaticchoicesequencejoint_typeschema_Prismatic_TaxisConstraintType_, bool) error
	TxsdGlPipelineSettingsGroupChoiceTexture1D                                                                                                                                                                                                                func(*TxsdGlPipelineSettingsGroupChoiceTexture1D, bool) error
	XsdGoPkgHasElem_sampler1Dchoiceglsl_value_groupschema_Sampler1D_TfxSampler1DType_                                                                                                                                                                         func(*XsdGoPkgHasElem_sampler1Dchoiceglsl_value_groupschema_Sampler1D_TfxSampler1DType_, bool) error
	XsdGoPkgHasElems_instance_controllersequencenode_typeschema_InstanceController_TinstanceControllerType_                                                                                                                                                   func(*XsdGoPkgHasElems_instance_controllersequencenode_typeschema_InstanceController_TinstanceControllerType_, bool) error
	XsdGoPkgHasElems_instance_rigid_constraintsequenceinstance_physics_model_typeschema_InstanceRigidConstraint_TinstanceRigidConstraintType_                                                                                                                 func(*XsdGoPkgHasElems_instance_rigid_constraintsequenceinstance_physics_model_typeschema_InstanceRigidConstraint_TinstanceRigidConstraintType_, bool) error
	XsdGoPkgHasElems_instance_rigid_bodysequenceinstance_physics_model_typeschema_InstanceRigidBody_TinstanceRigidBodyType_                                                                                                                                   func(*XsdGoPkgHasElems_instance_rigid_bodysequenceinstance_physics_model_typeschema_InstanceRigidBody_TinstanceRigidBodyType_, bool) error
	XsdGoPkgHasElem_profile_CGchoicefx_profile_groupschema_ProfileCg_TprofileCgType_                                                                                                                                                                          func(*XsdGoPkgHasElem_profile_CGchoicefx_profile_groupschema_ProfileCg_TprofileCgType_, bool) error
	XsdGoPkgHasElem_blend_func_separatechoicegl_pipeline_settings_groupschema_BlendFuncSeparate_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparate_                                                                                                           func(*XsdGoPkgHasElem_blend_func_separatechoicegl_pipeline_settings_groupschema_BlendFuncSeparate_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparate_, bool) error
	TxsdRigidBodyTypeSequenceTechniqueCommon                                                                                                                                                                                                                  func(*TxsdRigidBodyTypeSequenceTechniqueCommon, bool) error
	XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace_                                                                                            func(*XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegl_pipeline_settings_groupschema_Face_TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceFace_, bool) error
	XsdGoPkgHasElems_triangleschoicesequencemesh_typeschema_Triangles_TtrianglesType_                                                                                                                                                                         func(*XsdGoPkgHasElems_triangleschoicesequencemesh_typeschema_Triangles_TtrianglesType_, bool) error
	TverticesType                                                                                                                                                                                                                                             func(*TverticesType, bool) error
	XsdGoPkgHasElem_control_verticessequencespline_typeschema_ControlVertices_TxsdSplineTypeSequenceControlVertices_                                                                                                                                          func(*XsdGoPkgHasElem_control_verticessequencespline_typeschema_ControlVertices_TxsdSplineTypeSequenceControlVertices_, bool) error
	TxsdGles2PipelineSettingsGroupChoiceStencilOp                                                                                                                                                                                                             func(*TxsdGles2PipelineSettingsGroupChoiceStencilOp, bool) error
	XsdGoPkgHasGroup_GlesSamplerStatesGroup                                                                                                                                                                                                                   func(*XsdGoPkgHasGroup_GlesSamplerStatesGroup, bool) error
	TxsdFxTargetTypeSequenceBinaryChoiceHex                                                                                                                                                                                                                   func(*TxsdFxTargetTypeSequenceBinaryChoiceHex, bool) error
	XsdGoPkgHasElem_half4x1choicecg_param_groupschema_Half4X1_Tfloat4Type_                                                                                                                                                                                    func(*XsdGoPkgHasElem_half4x1choicecg_param_groupschema_Half4X1_Tfloat4Type_, bool) error
	TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcAlpha                                                                                                                                                                                     func(*TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcAlpha, bool) error
	XsdGoPkgHasElem_stencil_maskchoicegles_pipeline_settings_groupschema_StencilMask_TxsdGlesPipelineSettingsGroupChoiceStencilMask_                                                                                                                          func(*XsdGoPkgHasElem_stencil_maskchoicegles_pipeline_settings_groupschema_StencilMask_TxsdGlesPipelineSettingsGroupChoiceStencilMask_, bool) error
	TphysicsMaterialType                                                                                                                                                                                                                                      func(*TphysicsMaterialType, bool) error
	Tgles2NewparamType                                                                                                                                                                                                                                        func(*Tgles2NewparamType, bool) error
	XsdGoPkgHasElem_originsequencecurve_typeschema_Origin_ToriginType_                                                                                                                                                                                        func(*XsdGoPkgHasElem_originsequencecurve_typeschema_Origin_ToriginType_, bool) error
	XsdGoPkgHasElem_destsequenceblend_funcchoicegles_pipeline_settings_groupschema_Dest_TxsdGlesPipelineSettingsGroupChoiceBlendFuncSequenceDest_                                                                                                             func(*XsdGoPkgHasElem_destsequenceblend_funcchoicegles_pipeline_settings_groupschema_Dest_TxsdGlesPipelineSettingsGroupChoiceBlendFuncSequenceDest_, bool) error
	XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_Min_TtargetableFloat3Type_000000                                                                                                               func(*XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_Min_TtargetableFloat3Type_000000, bool) error
	XsdGoPkgHasElems_lookatchoicesequencenode_typeschema_Lookat_TlookatType_                                                                                                                                                                                  func(*XsdGoPkgHasElems_lookatchoicesequencenode_typeschema_Lookat_TlookatType_, bool) error
	XsdGoPkgHasElems_passsequencetechniquesequenceprofile_cg_typeschema_Pass_TcgPassType_                                                                                                                                                                     func(*XsdGoPkgHasElems_passsequencetechniquesequenceprofile_cg_typeschema_Pass_TcgPassType_, bool) error
	XsdGoPkgHasElem_polygon_offset_point_enablechoicegl_pipeline_settings_groupschema_PolygonOffsetPointEnable_TxsdGlPipelineSettingsGroupChoicePolygonOffsetPointEnable_                                                                                     func(*XsdGoPkgHasElem_polygon_offset_point_enablechoicegl_pipeline_settings_groupschema_PolygonOffsetPointEnable_TxsdGlPipelineSettingsGroupChoicePolygonOffsetPointEnable_, bool) error
	XsdGoPkgHasElem_conechoicesequencesurface_typeschema_Cone_TconeType_                                                                                                                                                                                      func(*XsdGoPkgHasElem_conechoicesequencesurface_typeschema_Cone_TconeType_, bool) error
	XsdGoPkgHasElem_surface_curvessequencebrep_typeschema_SurfaceCurves_TsurfaceCurvesType_                                                                                                                                                                   func(*XsdGoPkgHasElem_surface_curvessequencebrep_typeschema_SurfaceCurves_TsurfaceCurvesType_, bool) error
	TsamplerType                                                                                                                                                                                                                                              func(*TsamplerType, bool) error
	XsdGoPkgHasElem_surfacessequencebrep_typeschema_Surfaces_TsurfacesType_                                                                                                                                                                                   func(*XsdGoPkgHasElem_surfacessequencebrep_typeschema_Surfaces_TsurfacesType_, bool) error
	XsdGoPkgHasElem_sampler3Dchoiceglsl_value_groupschema_Sampler3D_TfxSampler3DType_                                                                                                                                                                         func(*XsdGoPkgHasElem_sampler3Dchoiceglsl_value_groupschema_Sampler3D_TfxSampler3DType_, bool) error
	XsdGoPkgHasElem_valuesequencebind_joint_axis_typeschema_Value_TcommonFloatOrParamType_                                                                                                                                                                    func(*XsdGoPkgHasElem_valuesequencebind_joint_axis_typeschema_Value_TcommonFloatOrParamType_, bool) error
	XsdGoPkgHasElem_shininesssequenceblinnchoicesequencetechniquesequenceprofile_common_typeschema_Shininess_TfxCommonFloatOrParamType_                                                                                                                       func(*XsdGoPkgHasElem_shininesssequenceblinnchoicesequencetechniquesequenceprofile_common_typeschema_Shininess_TfxCommonFloatOrParamType_, bool) error
	XsdGoPkgHasElem_float1x2choicegles_param_groupschema_Float1X2_Tfloat2Type_                                                                                                                                                                                func(*XsdGoPkgHasElem_float1x2choicegles_param_groupschema_Float1X2_Tfloat2Type_, bool) error
	XsdGoPkgHasElem_keywordssequenceasset_typeschema_Keywords_XsdtToken_                                                                                                                                                                                      func(*XsdGoPkgHasElem_keywordssequenceasset_typeschema_Keywords_XsdtToken_, bool) error
	TxsdProfileGles2TypeSequenceNewparam                                                                                                                                                                                                                      func(*TxsdProfileGles2TypeSequenceNewparam, bool) error
	TglesTexcombinerArgumentAlphaType                                                                                                                                                                                                                         func(*TglesTexcombinerArgumentAlphaType, bool) error
	TcylinderType                                                                                                                                                                                                                                             func(*TcylinderType, bool) error
	XsdGoPkgHasElems_bindsequenceinstance_material_typeschema_Bind_TxsdInstanceMaterialTypeSequenceBind_                                                                                                                                                      func(*XsdGoPkgHasElems_bindsequenceinstance_material_typeschema_Bind_TxsdInstanceMaterialTypeSequenceBind_, bool) error
	XsdGoPkgHasElem_statessequencegles2_pass_typeschema_States_TxsdGles2PassTypeSequenceStates_                                                                                                                                                               func(*XsdGoPkgHasElem_statessequencegles2_pass_typeschema_States_TxsdGles2PassTypeSequenceStates_, bool) error
	Tgles2PassType                                                                                                                                                                                                                                            func(*Tgles2PassType, bool) error
	XsdGoPkgHasElem_masksequencestencil_funcchoicegles2_pipeline_settings_groupschema_Mask_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSequenceMask_                                                                                                       func(*XsdGoPkgHasElem_masksequencestencil_funcchoicegles2_pipeline_settings_groupschema_Mask_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSequenceMask_, bool) error
	XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Front_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceFront_                                                                                         func(*XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegl_pipeline_settings_groupschema_Front_TxsdGlPipelineSettingsGroupChoiceStencilFuncSeparateSequenceFront_, bool) error
	TmotionType                                                                                                                                                                                                                                               func(*TmotionType, bool) error
	XsdGoPkgHasElem_control_verticessequencenurbs_typeschema_ControlVertices_TxsdNurbsTypeSequenceControlVertices_                                                                                                                                            func(*XsdGoPkgHasElem_control_verticessequencenurbs_typeschema_ControlVertices_TxsdNurbsTypeSequenceControlVertices_, bool) error
	TprofileGles2Type                                                                                                                                                                                                                                         func(*TprofileGles2Type, bool) error
	XsdGoPkgHasElem_ambientchoicetechnique_commonsequencelight_typeschema_Ambient_TxsdLightTypeSequenceTechniqueCommonChoiceAmbient_                                                                                                                          func(*XsdGoPkgHasElem_ambientchoicetechnique_commonsequencelight_typeschema_Ambient_TxsdLightTypeSequenceTechniqueCommonChoiceAmbient_, bool) error
	TxsdGlesPipelineSettingsGroupChoiceColorMask                                                                                                                                                                                                              func(*TxsdGlesPipelineSettingsGroupChoiceColorMask, bool) error
	XsdGoPkgHasElem_float3x1choicegles_param_groupschema_Float3X1_Tfloat3Type_                                                                                                                                                                                func(*XsdGoPkgHasElem_float3x1choicegles_param_groupschema_Float3X1_Tfloat3Type_, bool) error
	TxsdAssetTypeSequenceCoverageSequenceGeographicLocationSequenceAltitude                                                                                                                                                                                   func(*TxsdAssetTypeSequenceCoverageSequenceGeographicLocationSequenceAltitude, bool) error
	TnurbsSurfaceType                                                                                                                                                                                                                                         func(*TnurbsSurfaceType, bool) error
	XsdGoPkgHasElems_articulated_systemsequencelibrary_articulated_systems_typeschema_ArticulatedSystem_TarticulatedSystemType_                                                                                                                               func(*XsdGoPkgHasElems_articulated_systemsequencelibrary_articulated_systems_typeschema_ArticulatedSystem_TarticulatedSystemType_, bool) error
	XsdGoPkgHasElem_stencil_test_enablechoicegles2_pipeline_settings_groupschema_StencilTestEnable_TxsdGles2PipelineSettingsGroupChoiceStencilTestEnable_                                                                                                     func(*XsdGoPkgHasElem_stencil_test_enablechoicegles2_pipeline_settings_groupschema_StencilTestEnable_TxsdGles2PipelineSettingsGroupChoiceStencilTestEnable_, bool) error
	XsdGoPkgHasElem_light_spot_cutoffchoicegles_pipeline_settings_groupschema_LightSpotCutoff_TxsdGlesPipelineSettingsGroupChoiceLightSpotCutoff_                                                                                                             func(*XsdGoPkgHasElem_light_spot_cutoffchoicegles_pipeline_settings_groupschema_LightSpotCutoff_TxsdGlesPipelineSettingsGroupChoiceLightSpotCutoff_, bool) error
	XsdGoPkgHasElem_sizesequencecreate_3dchoicesequenceimage_typeschema_Size_TxsdImageTypeSequenceChoiceCreate3DSequenceSize_                                                                                                                                 func(*XsdGoPkgHasElem_sizesequencecreate_3dchoicesequenceimage_typeschema_Size_TxsdImageTypeSequenceChoiceCreate3DSequenceSize_, bool) error
	XsdGoPkgHasElem_stencil_mask_separatechoicegl_pipeline_settings_groupschema_StencilMaskSeparate_TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparate_                                                                                                     func(*XsdGoPkgHasElem_stencil_mask_separatechoicegl_pipeline_settings_groupschema_StencilMaskSeparate_TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparate_, bool) error
	XsdGoPkgHasElem_refsequencestencil_funcchoicegles_pipeline_settings_groupschema_Ref_TxsdGlesPipelineSettingsGroupChoiceStencilFuncSequenceRef_                                                                                                            func(*XsdGoPkgHasElem_refsequencestencil_funcchoicegles_pipeline_settings_groupschema_Ref_TxsdGlesPipelineSettingsGroupChoiceStencilFuncSequenceRef_, bool) error
	XsdGoPkgHasElem_sampler2Dchoiceglsl_value_groupschema_Sampler2D_TfxSampler2DType_                                                                                                                                                                         func(*XsdGoPkgHasElem_sampler2Dchoiceglsl_value_groupschema_Sampler2D_TfxSampler2DType_, bool) error
	XsdGoPkgHasElem_valuechoicetexture3Dchoicegl_pipeline_settings_groupschema_Value_TfxSampler3DType_                                                                                                                                                        func(*XsdGoPkgHasElem_valuechoicetexture3Dchoicegl_pipeline_settings_groupschema_Value_TfxSampler3DType_, bool) error
	XsdGoPkgHasElem_light_specularchoicegl_pipeline_settings_groupschema_LightSpecular_TxsdGlPipelineSettingsGroupChoiceLightSpecular_                                                                                                                        func(*XsdGoPkgHasElem_light_specularchoicegl_pipeline_settings_groupschema_LightSpecular_TxsdGlPipelineSettingsGroupChoiceLightSpecular_, bool) error
	XsdGoPkgHasElem_linearsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Linear_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceLinear_                                                                        func(*XsdGoPkgHasElem_linearsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_Linear_TxsdRigidConstraintTypeSequenceTechniqueCommonSequenceSpringSequenceLinear_, bool) error
	XsdGoPkgHasElem_funcsequencealpha_funcchoicegles_pipeline_settings_groupschema_Func_TxsdGlesPipelineSettingsGroupChoiceAlphaFuncSequenceFunc_                                                                                                             func(*XsdGoPkgHasElem_funcsequencealpha_funcchoicegles_pipeline_settings_groupschema_Func_TxsdGlesPipelineSettingsGroupChoiceAlphaFuncSequenceFunc_, bool) error
	TchannelType                                                                                                                                                                                                                                              func(*TchannelType, bool) error
	XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Zpass_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceZpass_                                                                                       func(*XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegles2_pipeline_settings_groupschema_Zpass_TxsdGles2PipelineSettingsGroupChoiceStencilOpSeparateSequenceZpass_, bool) error
	TxsdGlPipelineSettingsGroupChoiceBlendEquation                                                                                                                                                                                                            func(*TxsdGlPipelineSettingsGroupChoiceBlendEquation, bool) error
	TarticulatedSystemType                                                                                                                                                                                                                                    func(*TarticulatedSystemType, bool) error
	XsdGoPkgHasElems_nodesequencelibrary_nodes_typeschema_Node_TnodeType_                                                                                                                                                                                     func(*XsdGoPkgHasElems_nodesequencelibrary_nodes_typeschema_Node_TnodeType_, bool) error
	XsdGoPkgHasElem_stencil_funcchoicegles2_pipeline_settings_groupschema_StencilFunc_TxsdGles2PipelineSettingsGroupChoiceStencilFunc_                                                                                                                        func(*XsdGoPkgHasElem_stencil_funcchoicegles2_pipeline_settings_groupschema_StencilFunc_TxsdGles2PipelineSettingsGroupChoiceStencilFunc_, bool) error
	XsdGoPkgHasElem_model_view_matrixchoicegles_pipeline_settings_groupschema_ModelViewMatrix_TxsdGlesPipelineSettingsGroupChoiceModelViewMatrix_                                                                                                             func(*XsdGoPkgHasElem_model_view_matrixchoicegles_pipeline_settings_groupschema_ModelViewMatrix_TxsdGlesPipelineSettingsGroupChoiceModelViewMatrix_, bool) error
	XsdGoPkgHasElem_point_fade_threshold_sizechoicegles_pipeline_settings_groupschema_PointFadeThresholdSize_TxsdGlesPipelineSettingsGroupChoicePointFadeThresholdSize_                                                                                       func(*XsdGoPkgHasElem_point_fade_threshold_sizechoicegles_pipeline_settings_groupschema_PointFadeThresholdSize_TxsdGlesPipelineSettingsGroupChoicePointFadeThresholdSize_, bool) error
	XsdGoPkgHasElem_max_anisotropysequencefx_sampler_states_groupschema_MaxAnisotropy_XsdtUnsignedInt_1                                                                                                                                                       func(*XsdGoPkgHasElem_max_anisotropysequencefx_sampler_states_groupschema_MaxAnisotropy_XsdtUnsignedInt_1, bool) error
	TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceDest                                                                                                                                                                                                    func(*TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceDest, bool) error
	TxsdGlesPipelineSettingsGroupChoiceLightAmbient                                                                                                                                                                                                           func(*TxsdGlesPipelineSettingsGroupChoiceLightAmbient, bool) error
	XsdGoPkgHasElem_directionsequenceline_typeschema_Direction_Tfloat3Type_                                                                                                                                                                                   func(*XsdGoPkgHasElem_directionsequenceline_typeschema_Direction_Tfloat3Type_, bool) error
	XsdGoPkgHasElems_instance_animationsequenceanimation_clip_typeschema_InstanceAnimation_TinstanceWithExtraType_                                                                                                                                            func(*XsdGoPkgHasElems_instance_animationsequenceanimation_clip_typeschema_InstanceAnimation_TinstanceWithExtraType_, bool) error
	XsdGoPkgHasElem_hexchoicebinarysequencefx_target_typeschema_Hex_TxsdFxTargetTypeSequenceBinaryChoiceHex_                                                                                                                                                  func(*XsdGoPkgHasElem_hexchoicebinarysequencefx_target_typeschema_Hex_TxsdFxTargetTypeSequenceBinaryChoiceHex_, bool) error
	XsdGoPkgHasElem_multisample_enablechoicegles_pipeline_settings_groupschema_MultisampleEnable_TxsdGlesPipelineSettingsGroupChoiceMultisampleEnable_                                                                                                        func(*XsdGoPkgHasElem_multisample_enablechoicegles_pipeline_settings_groupschema_MultisampleEnable_TxsdGlesPipelineSettingsGroupChoiceMultisampleEnable_, bool) error
	XsdGoPkgHasElem_alphasequencegles_texcombiner_command_typeschema_Alpha_TglesTexcombinerCommandAlphaType_                                                                                                                                                  func(*XsdGoPkgHasElem_alphasequencegles_texcombiner_command_typeschema_Alpha_TglesTexcombinerCommandAlphaType_, bool) error
	XsdGoPkgHasElems_physics_scenesequencelibrary_physics_scenes_typeschema_PhysicsScene_TphysicsSceneType_                                                                                                                                                   func(*XsdGoPkgHasElems_physics_scenesequencelibrary_physics_scenes_typeschema_PhysicsScene_TphysicsSceneType_, bool) error
	XsdGoPkgHasElem_exactsequenceformatsequencecreate_cubechoicesequenceimage_typeschema_Exact_XsdtToken_                                                                                                                                                     func(*XsdGoPkgHasElem_exactsequenceformatsequencecreate_cubechoicesequenceimage_typeschema_Exact_XsdtToken_, bool) error
	XsdGoPkgHasElems_init_fromsequencecreate_cubechoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceCreateCubeSequenceInitFrom_                                                                                                               func(*XsdGoPkgHasElems_init_fromsequencecreate_cubechoicesequenceimage_typeschema_InitFrom_TxsdImageTypeSequenceChoiceCreateCubeSequenceInitFrom_, bool) error
	XsdGoPkgHasElems_physics_materialsequencelibrary_physics_materials_typeschema_PhysicsMaterial_TphysicsMaterialType_                                                                                                                                       func(*XsdGoPkgHasElems_physics_materialsequencelibrary_physics_materials_typeschema_PhysicsMaterial_TphysicsMaterialType_, bool) error
	XsdGoPkgHasGroup_FxAnnotateGroup                                                                                                                                                                                                                          func(*XsdGoPkgHasGroup_FxAnnotateGroup, bool) error
	TlibraryPhysicsMaterialsType                                                                                                                                                                                                                              func(*TlibraryPhysicsMaterialsType, bool) error
	XsdGoPkgHasElem_failsequencestencil_opchoicegles2_pipeline_settings_groupschema_Fail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceFail_                                                                                                           func(*XsdGoPkgHasElem_failsequencestencil_opchoicegles2_pipeline_settings_groupschema_Fail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceFail_, bool) error
	XsdGoPkgHasElem_light_quadratic_attenuationchoicegl_pipeline_settings_groupschema_LightQuadraticAttenuation_TxsdGlPipelineSettingsGroupChoiceLightQuadraticAttenuation_                                                                                   func(*XsdGoPkgHasElem_light_quadratic_attenuationchoicegl_pipeline_settings_groupschema_LightQuadraticAttenuation_TxsdGlPipelineSettingsGroupChoiceLightQuadraticAttenuation_, bool) error
	XsdGoPkgHasElem_minsequencejoint_limits_typeschema_Min_TminmaxType_                                                                                                                                                                                       func(*XsdGoPkgHasElem_minsequencejoint_limits_typeschema_Min_TminmaxType_, bool) error
	XsdGoPkgHasElem_color_material_enablechoicegles_pipeline_settings_groupschema_ColorMaterialEnable_TxsdGlesPipelineSettingsGroupChoiceColorMaterialEnable_                                                                                                 func(*XsdGoPkgHasElem_color_material_enablechoicegles_pipeline_settings_groupschema_ColorMaterialEnable_TxsdGlesPipelineSettingsGroupChoiceColorMaterialEnable_, bool) error
	TglesNewparamType                                                                                                                                                                                                                                         func(*TglesNewparamType, bool) error
	TcapsuleType                                                                                                                                                                                                                                              func(*TcapsuleType, bool) error
	XsdGoPkgHasElems_argumentsequencegles_texcombiner_command_alpha_typeschema_Argument_TglesTexcombinerArgumentAlphaType_                                                                                                                                    func(*XsdGoPkgHasElems_argumentsequencegles_texcombiner_command_alpha_typeschema_Argument_TglesTexcombinerArgumentAlphaType_, bool) error
	TxsdGlPipelineSettingsGroupChoiceDepthBounds                                                                                                                                                                                                              func(*TxsdGlPipelineSettingsGroupChoiceDepthBounds, bool) error
	XsdGoPkgHasElem_speedsequencemotion_axis_info_typeschema_Speed_TcommonFloatOrParamType_                                                                                                                                                                   func(*XsdGoPkgHasElem_speedsequencemotion_axis_info_typeschema_Speed_TcommonFloatOrParamType_, bool) error
	TnameArrayType                                                                                                                                                                                                                                            func(*TnameArrayType, bool) error
	XsdGoPkgHasElem_fixed2choicecg_param_groupschema_Fixed2_Tfloat2Type_                                                                                                                                                                                      func(*XsdGoPkgHasElem_fixed2choicecg_param_groupschema_Fixed2_Tfloat2Type_, bool) error
	XsdGoPkgHasElems_newparamsequenceprofile_glsl_typeschema_Newparam_TglslNewparamType_                                                                                                                                                                      func(*XsdGoPkgHasElems_newparamsequenceprofile_glsl_typeschema_Newparam_TglslNewparamType_, bool) error
	TxsdColladaSequenceScene                                                                                                                                                                                                                                  func(*TxsdColladaSequenceScene, bool) error
	TlibraryPhysicsScenesType                                                                                                                                                                                                                                 func(*TlibraryPhysicsScenesType, bool) error
	XsdGoPkgHasGroup_CgParamGroup                                                                                                                                                                                                                             func(*XsdGoPkgHasGroup_CgParamGroup, bool) error
	TxsdGles2PipelineSettingsGroupChoiceDitherEnable                                                                                                                                                                                                          func(*TxsdGles2PipelineSettingsGroupChoiceDitherEnable, bool) error
	TxsdImageTypeSequenceChoiceCreateCubeSequenceFormatSequenceHint                                                                                                                                                                                           func(*TxsdImageTypeSequenceChoiceCreateCubeSequenceFormatSequenceHint, bool) error
	TxsdFxTargetTypeSequenceBinary                                                                                                                                                                                                                            func(*TxsdFxTargetTypeSequenceBinary, bool) error
	XsdGoPkgHasElems_newparamsequenceprofile_gles2_typeschema_Newparam_TxsdProfileGles2TypeSequenceNewparam_                                                                                                                                                  func(*XsdGoPkgHasElems_newparamsequenceprofile_gles2_typeschema_Newparam_TxsdProfileGles2TypeSequenceNewparam_, bool) error
	XsdGoPkgHasElem_arraysequencecreate_cubechoicesequenceimage_typeschema_Array_TxsdImageTypeSequenceChoiceCreateCubeSequenceArray_                                                                                                                          func(*XsdGoPkgHasElem_arraysequencecreate_cubechoicesequenceimage_typeschema_Array_TxsdImageTypeSequenceChoiceCreateCubeSequenceArray_, bool) error
	TglesTexturePipelineType                                                                                                                                                                                                                                  func(*TglesTexturePipelineType, bool) error
	TlibraryNodesType                                                                                                                                                                                                                                         func(*TlibraryNodesType, bool) error
	XsdGoPkgHasElem_lambertchoicesequencetechniquesequenceprofile_common_typeschema_Lambert_TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceLambert_                                                                                                      func(*XsdGoPkgHasElem_lambertchoicesequencetechniquesequenceprofile_common_typeschema_Lambert_TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceLambert_, bool) error
	XsdGoPkgHasElem_bool4choicefx_annotate_groupschema_Bool4_Tbool4Type_                                                                                                                                                                                      func(*XsdGoPkgHasElem_bool4choicefx_annotate_groupschema_Bool4_Tbool4Type_, bool) error
	XsdGoPkgHasElem_front_facechoicegl_pipeline_settings_groupschema_FrontFace_TxsdGlPipelineSettingsGroupChoiceFrontFace_                                                                                                                                    func(*XsdGoPkgHasElem_front_facechoicegl_pipeline_settings_groupschema_FrontFace_TxsdGlPipelineSettingsGroupChoiceFrontFace_, bool) error
	XsdGoPkgHasElem_texture3Dchoicegl_pipeline_settings_groupschema_Texture3D_TxsdGlPipelineSettingsGroupChoiceTexture3D_                                                                                                                                     func(*XsdGoPkgHasElem_texture3Dchoicegl_pipeline_settings_groupschema_Texture3D_TxsdGlPipelineSettingsGroupChoiceTexture3D_, bool) error
	XsdGoPkgHasElem_decelerationsequencemotion_effector_info_typeschema_Deceleration_TcommonFloat2OrParamType_                                                                                                                                                func(*XsdGoPkgHasElem_decelerationsequencemotion_effector_info_typeschema_Deceleration_TcommonFloat2OrParamType_, bool) error
	XsdGoPkgHasElem_yfovchoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecamera_typeschema_Yfov_TtargetableFloatType_                                                                                                       func(*XsdGoPkgHasElem_yfovchoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecamera_typeschema_Yfov_TtargetableFloatType_, bool) error
	XsdGoPkgHasElem_accelerationsequencemotion_axis_info_typeschema_Acceleration_TcommonFloatOrParamType_                                                                                                                                                     func(*XsdGoPkgHasElem_accelerationsequencemotion_axis_info_typeschema_Acceleration_TcommonFloatOrParamType_, bool) error
	XsdGoPkgHasElem_fixedchoicecg_param_groupschema_Fixed_TfloatType_                                                                                                                                                                                         func(*XsdGoPkgHasElem_fixedchoicecg_param_groupschema_Fixed_TfloatType_, bool) error
	XsdGoPkgHasElem_bind_materialsequenceinstance_geometry_typeschema_BindMaterial_TbindMaterialType_                                                                                                                                                         func(*XsdGoPkgHasElem_bind_materialsequenceinstance_geometry_typeschema_BindMaterial_TbindMaterialType_, bool) error
	TxsdLightTypeSequenceTechniqueCommonChoiceSpot                                                                                                                                                                                                            func(*TxsdLightTypeSequenceTechniqueCommonChoiceSpot, bool) error
	TxsdPhysicsSceneTypeSequenceTechniqueCommon                                                                                                                                                                                                               func(*TxsdPhysicsSceneTypeSequenceTechniqueCommon, bool) error
	TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceZpass                                                                                                                                                                                           func(*TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceZpass, bool) error
	XsdGoPkgHasElem_blend_colorchoicegl_pipeline_settings_groupschema_BlendColor_TxsdGlPipelineSettingsGroupChoiceBlendColor_                                                                                                                                 func(*XsdGoPkgHasElem_blend_colorchoicegl_pipeline_settings_groupschema_BlendColor_TxsdGlPipelineSettingsGroupChoiceBlendColor_, bool) error
	XsdGoPkgHasElem_programsequencecg_pass_typeschema_Program_TxsdCgPassTypeSequenceProgram_                                                                                                                                                                  func(*XsdGoPkgHasElem_programsequencecg_pass_typeschema_Program_TxsdCgPassTypeSequenceProgram_, bool) error
	TfxStenciltargetType                                                                                                                                                                                                                                      func(*TfxStenciltargetType, bool) error
	TglslArrayType                                                                                                                                                                                                                                            func(*TglslArrayType, bool) error
	XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Front_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceFront_                                                                                   func(*XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Front_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceFront_, bool) error
	XsdGoPkgHasElems_color_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_ColorClear_TfxClearcolorType_                                                                                                                    func(*XsdGoPkgHasElems_color_clearsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_ColorClear_TfxClearcolorType_, bool) error
	XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_DestAlpha_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestAlpha_                                                                          func(*XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_DestAlpha_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestAlpha_, bool) error
	XsdGoPkgHasElems_passsequencetechniquesequenceprofile_gles_typeschema_Pass_TxsdProfileGlesTypeSequenceTechniqueSequencePass_                                                                                                                              func(*XsdGoPkgHasElems_passsequencetechniquesequenceprofile_gles_typeschema_Pass_TxsdProfileGlesTypeSequenceTechniqueSequencePass_, bool) error
	TxsdGlPipelineSettingsGroupChoiceDepthRange                                                                                                                                                                                                               func(*TxsdGlPipelineSettingsGroupChoiceDepthRange, bool) error
	TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoicePerspective                                                                                                                                                                                      func(*TxsdCameraTypeSequenceOpticsSequenceTechniqueCommonChoicePerspective, bool) error
	XsdGoPkgHasElem_ellipsechoicesequencecurve_typeschema_Ellipse_TellipseType_                                                                                                                                                                               func(*XsdGoPkgHasElem_ellipsechoicesequencecurve_typeschema_Ellipse_TellipseType_, bool) error
	XsdGoPkgHasElem_linechoicesequencecurve_typeschema_Line_TlineType_                                                                                                                                                                                        func(*XsdGoPkgHasElem_linechoicesequencecurve_typeschema_Line_TlineType_, bool) error
	XsdGoPkgHasElem_wiressequencebrep_typeschema_Wires_TwiresType_                                                                                                                                                                                            func(*XsdGoPkgHasElem_wiressequencebrep_typeschema_Wires_TwiresType_, bool) error
	XsdGoPkgHasElem_refsequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Ref_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef_                                                                                         func(*XsdGoPkgHasElem_refsequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Ref_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceRef_, bool) error
	XsdGoPkgHasElem_xfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecamera_typeschema_Xfov_TtargetableFloatType_                                                                                                             func(*XsdGoPkgHasElem_xfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecamera_typeschema_Xfov_TtargetableFloatType_, bool) error
	XsdGoPkgHasElem_evaluatesequencecg_pass_typeschema_Evaluate_TxsdCgPassTypeSequenceEvaluate_                                                                                                                                                               func(*XsdGoPkgHasElem_evaluatesequencecg_pass_typeschema_Evaluate_TxsdCgPassTypeSequenceEvaluate_, bool) error
	XsdGoPkgHasElems_bindsequenceinstance_materialsequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_Bind_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterialSequenceBind_                                        func(*XsdGoPkgHasElems_bindsequenceinstance_materialsequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_Bind_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterialSequenceBind_, bool) error
	TfxSampler1DType                                                                                                                                                                                                                                          func(*TfxSampler1DType, bool) error
	TxsdGlesPipelineSettingsGroupChoiceLightSpotExponent                                                                                                                                                                                                      func(*TxsdGlesPipelineSettingsGroupChoiceLightSpotExponent, bool) error
	TxsdCameraTypeSequenceImager                                                                                                                                                                                                                              func(*TxsdCameraTypeSequenceImager, bool) error
	XsdGoPkgHasElem_mat2choicegles2_value_groupschema_Mat2_Tfloat2X2Type_                                                                                                                                                                                     func(*XsdGoPkgHasElem_mat2choicegles2_value_groupschema_Mat2_Tfloat2X2Type_, bool) error
	XsdGoPkgHasElem_textureCUBE_enablechoicegl_pipeline_settings_groupschema_TextureCUBEEnable_TxsdGlPipelineSettingsGroupChoiceTextureCUBEEnable_                                                                                                            func(*XsdGoPkgHasElem_textureCUBE_enablechoicegl_pipeline_settings_groupschema_TextureCUBEEnable_TxsdGlPipelineSettingsGroupChoiceTextureCUBEEnable_, bool) error
	XsdGoPkgHasElems_importchoicesequencefx_sources_typeschema_Import_TxsdFxSourcesTypeSequenceChoiceImport_                                                                                                                                                  func(*XsdGoPkgHasElems_importchoicesequencefx_sources_typeschema_Import_TxsdFxSourcesTypeSequenceChoiceImport_, bool) error
	XsdGoPkgHasElem_valuechoicetextureCUBEchoicegl_pipeline_settings_groupschema_Value_TfxSamplerCUBEType_                                                                                                                                                    func(*XsdGoPkgHasElem_valuechoicetextureCUBEchoicegl_pipeline_settings_groupschema_Value_TfxSamplerCUBEType_, bool) error
	XsdGoPkgHasElem_light_model_ambientchoicegl_pipeline_settings_groupschema_LightModelAmbient_TxsdGlPipelineSettingsGroupChoiceLightModelAmbient_                                                                                                           func(*XsdGoPkgHasElem_light_model_ambientchoicegl_pipeline_settings_groupschema_LightModelAmbient_TxsdGlPipelineSettingsGroupChoiceLightModelAmbient_, bool) error
	TxsdImageTypeSequenceChoiceCreate2DSequenceArray                                                                                                                                                                                                          func(*TxsdImageTypeSequenceChoiceCreate2DSequenceArray, bool) error
	TxsdGlPipelineSettingsGroupChoiceLightModelColorControl                                                                                                                                                                                                   func(*TxsdGlPipelineSettingsGroupChoiceLightModelColorControl, bool) error
	TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceValue                                                                                                                                                                                                   func(*TxsdGlPipelineSettingsGroupChoiceAlphaFuncSequenceValue, bool) error
	TxsdImageTypeSequenceChoiceCreateCubeSequenceFormat                                                                                                                                                                                                       func(*TxsdImageTypeSequenceChoiceCreateCubeSequenceFormat, bool) error
	XsdGoPkgHasElems_texcombinerchoicegles_texture_pipeline_typeschema_Texcombiner_TglesTexcombinerCommandType_                                                                                                                                               func(*XsdGoPkgHasElems_texcombinerchoicegles_texture_pipeline_typeschema_Texcombiner_TglesTexcombinerCommandType_, bool) error
	TglesTexcombinerCommandAlphaType                                                                                                                                                                                                                          func(*TglesTexcombinerCommandAlphaType, bool) error
	XsdGoPkgHasElem_paramchoicetextureCUBEchoicegl_pipeline_settings_groupschema_Param_XsdtNCName_                                                                                                                                                            func(*XsdGoPkgHasElem_paramchoicetextureCUBEchoicegl_pipeline_settings_groupschema_Param_XsdtNCName_, bool) error
	XsdGoPkgHasElem_ivec2choicegles2_value_groupschema_Ivec2_Tint2Type_                                                                                                                                                                                       func(*XsdGoPkgHasElem_ivec2choicegles2_value_groupschema_Ivec2_Tint2Type_, bool) error
	XsdGoPkgHasElem_scissorchoicegles2_pipeline_settings_groupschema_Scissor_TxsdGles2PipelineSettingsGroupChoiceScissor_                                                                                                                                     func(*XsdGoPkgHasElem_scissorchoicegles2_pipeline_settings_groupschema_Scissor_TxsdGles2PipelineSettingsGroupChoiceScissor_, bool) error
	TxsdGlPipelineSettingsGroupChoiceTextureRECTEnable                                                                                                                                                                                                        func(*TxsdGlPipelineSettingsGroupChoiceTextureRECTEnable, bool) error
	XsdGoPkgHasElem_vec4choicegles2_value_groupschema_Vec4_Tfloat4Type_                                                                                                                                                                                       func(*XsdGoPkgHasElem_vec4choicegles2_value_groupschema_Vec4_Tfloat4Type_, bool) error
	TxsdNurbsSurfaceTypeSequenceControlVertices                                                                                                                                                                                                               func(*TxsdNurbsSurfaceTypeSequenceControlVertices, bool) error
	XsdGoPkgHasElems_library_physics_sceneschoicesequenceCOLLADAschema_LibraryPhysicsScenes_TlibraryPhysicsScenesType_                                                                                                                                        func(*XsdGoPkgHasElems_library_physics_sceneschoicesequenceCOLLADAschema_LibraryPhysicsScenes_TlibraryPhysicsScenesType_, bool) error
	XsdGoPkgHasElem_material_shininesschoicegl_pipeline_settings_groupschema_MaterialShininess_TxsdGlPipelineSettingsGroupChoiceMaterialShininess_                                                                                                            func(*XsdGoPkgHasElem_material_shininesschoicegl_pipeline_settings_groupschema_MaterialShininess_TxsdGlPipelineSettingsGroupChoiceMaterialShininess_, bool) error
	XsdGoPkgHasElem_static_frictionsequencetechnique_commonsequencephysics_material_typeschema_StaticFriction_TtargetableFloatType_                                                                                                                           func(*XsdGoPkgHasElem_static_frictionsequencetechnique_commonsequencephysics_material_typeschema_StaticFriction_TtargetableFloatType_, bool) error
	XsdGoPkgHasElem_depth_rangechoicegles_pipeline_settings_groupschema_DepthRange_TxsdGlesPipelineSettingsGroupChoiceDepthRange_                                                                                                                             func(*XsdGoPkgHasElem_depth_rangechoicegles_pipeline_settings_groupschema_DepthRange_TxsdGlesPipelineSettingsGroupChoiceDepthRange_, bool) error
	XsdGoPkgHasElems_instance_geometrysequencenode_typeschema_InstanceGeometry_TinstanceGeometryType_                                                                                                                                                         func(*XsdGoPkgHasElems_instance_geometrysequencenode_typeschema_InstanceGeometry_TinstanceGeometryType_, bool) error
	TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceConstant                                                                                                                                                                                              func(*TxsdProfileCommonTypeSequenceTechniqueSequenceChoiceConstant, bool) error
	XsdGoPkgHasGroup_FxSamplerStatesGroup                                                                                                                                                                                                                     func(*XsdGoPkgHasGroup_FxSamplerStatesGroup, bool) error
	XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegl_pipeline_settings_groupschema_SampleAlphaToOneEnable_TxsdGlPipelineSettingsGroupChoiceSampleAlphaToOneEnable_                                                                                          func(*XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegl_pipeline_settings_groupschema_SampleAlphaToOneEnable_TxsdGlPipelineSettingsGroupChoiceSampleAlphaToOneEnable_, bool) error
	XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegles2_pipeline_settings_groupschema_Alpha_TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparateSequenceAlpha_                                                                               func(*XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegles2_pipeline_settings_groupschema_Alpha_TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparateSequenceAlpha_, bool) error
	TtrifansType                                                                                                                                                                                                                                              func(*TtrifansType, bool) error
	XsdGoPkgHasElem_technique_overridesequenceinstance_materialsequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_TechniqueOverride_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterialSequenceTechniqueOverride_ func(*XsdGoPkgHasElem_technique_overridesequenceinstance_materialsequencerendersequenceevaluate_scenesequencevisual_scene_typeschema_TechniqueOverride_TxsdVisualSceneTypeSequenceEvaluateSceneSequenceRenderSequenceInstanceMaterialSequenceTechniqueOverride_, bool) error
	XsdGoPkgHasElem_projection_matrixchoicegles_pipeline_settings_groupschema_ProjectionMatrix_TxsdGlesPipelineSettingsGroupChoiceProjectionMatrix_                                                                                                           func(*XsdGoPkgHasElem_projection_matrixchoicegles_pipeline_settings_groupschema_ProjectionMatrix_TxsdGlesPipelineSettingsGroupChoiceProjectionMatrix_, bool) error
	TshellsType                                                                                                                                                                                                                                               func(*TshellsType, bool) error
	TxsdRigidConstraintTypeSequenceRefAttachment                                                                                                                                                                                                              func(*TxsdRigidConstraintTypeSequenceRefAttachment, bool) error
	XsdGoPkgHasElem_int3choicefx_annotate_groupschema_Int3_Tint3Type_                                                                                                                                                                                         func(*XsdGoPkgHasElem_int3choicefx_annotate_groupschema_Int3_Tint3Type_, bool) error
	XsdGoPkgHasElem_mass_framesequencetechnique_commonsequencerigid_body_typeschema_MassFrame_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame_                                                                                                      func(*XsdGoPkgHasElem_mass_framesequencetechnique_commonsequencerigid_body_typeschema_MassFrame_TxsdRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame_, bool) error
	TkinematicsParamType                                                                                                                                                                                                                                      func(*TkinematicsParamType, bool) error
	TxsdCgPassTypeSequenceProgramSequenceShader                                                                                                                                                                                                               func(*TxsdCgPassTypeSequenceProgramSequenceShader, bool) error
	TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeExact                                                                                                                                                                                                func(*TxsdImageTypeSequenceChoiceCreate2DSequenceChoiceSizeExact, bool) error
	XsdGoPkgHasElem_shade_modelchoicegles_pipeline_settings_groupschema_ShadeModel_TxsdGlesPipelineSettingsGroupChoiceShadeModel_                                                                                                                             func(*XsdGoPkgHasElem_shade_modelchoicegles_pipeline_settings_groupschema_ShadeModel_TxsdGlesPipelineSettingsGroupChoiceShadeModel_, bool) error
	XsdGoPkgHasElem_emissionsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Emission_TfxCommonColorOrTextureType_                                                                                                                     func(*XsdGoPkgHasElem_emissionsequencelambertchoicesequencetechniquesequenceprofile_common_typeschema_Emission_TfxCommonColorOrTextureType_, bool) error
	XsdGoPkgHasElem_boxchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Box_TboxType_                                                                                                                                        func(*XsdGoPkgHasElem_boxchoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Box_TboxType_, bool) error
	TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceZfail                                                                                                                                                                                                func(*TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceZfail, bool) error
	XsdGoPkgHasElem_valuesequencesample_coveragechoicegles2_pipeline_settings_groupschema_Value_TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceValue_                                                                                              func(*XsdGoPkgHasElem_valuesequencesample_coveragechoicegles2_pipeline_settings_groupschema_Value_TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceValue_, bool) error
	XsdGoPkgHasElem_polygon_smooth_enablechoicegl_pipeline_settings_groupschema_PolygonSmoothEnable_TxsdGlPipelineSettingsGroupChoicePolygonSmoothEnable_                                                                                                     func(*XsdGoPkgHasElem_polygon_smooth_enablechoicegl_pipeline_settings_groupschema_PolygonSmoothEnable_TxsdGlPipelineSettingsGroupChoicePolygonSmoothEnable_, bool) error
	XsdGoPkgHasElem_zfailsequencestencil_opchoicegles2_pipeline_settings_groupschema_Zfail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceZfail_                                                                                                        func(*XsdGoPkgHasElem_zfailsequencestencil_opchoicegles2_pipeline_settings_groupschema_Zfail_TxsdGles2PipelineSettingsGroupChoiceStencilOpSequenceZfail_, bool) error
	XsdGoPkgHasElem_zfailsequencestencil_opchoicegles_pipeline_settings_groupschema_Zfail_TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceZfail_                                                                                                          func(*XsdGoPkgHasElem_zfailsequencestencil_opchoicegles_pipeline_settings_groupschema_Zfail_TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceZfail_, bool) error
	TxsdGles2PipelineSettingsGroupChoiceStencilMask                                                                                                                                                                                                           func(*TxsdGles2PipelineSettingsGroupChoiceStencilMask, bool) error
	XsdGoPkgHasElem_point_size_maxchoicegles_pipeline_settings_groupschema_PointSizeMax_TxsdGlesPipelineSettingsGroupChoicePointSizeMax_                                                                                                                      func(*XsdGoPkgHasElem_point_size_maxchoicegles_pipeline_settings_groupschema_PointSizeMax_TxsdGlesPipelineSettingsGroupChoicePointSizeMax_, bool) error
	XsdGoPkgHasElems_includechoicesequenceprofile_glsl_typeschema_Include_TfxIncludeType_                                                                                                                                                                     func(*XsdGoPkgHasElems_includechoicesequenceprofile_glsl_typeschema_Include_TfxIncludeType_, bool) error
	XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_SrcAlpha_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcAlpha_                                                                             func(*XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegles2_pipeline_settings_groupschema_SrcAlpha_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcAlpha_, bool) error
	XsdGoPkgHasElem_funcsequencestencil_funcchoicegles_pipeline_settings_groupschema_Func_TxsdGlesPipelineSettingsGroupChoiceStencilFuncSequenceFunc_                                                                                                         func(*XsdGoPkgHasElem_funcsequencestencil_funcchoicegles_pipeline_settings_groupschema_Func_TxsdGlesPipelineSettingsGroupChoiceStencilFuncSequenceFunc_, bool) error
	XsdGoPkgHasElem_token_arraychoicesequencesource_typeschema_TokenArray_TtokenArrayType_                                                                                                                                                                    func(*XsdGoPkgHasElem_token_arraychoicesequencesource_typeschema_TokenArray_TtokenArrayType_, bool) error
	TellipseType                                                                                                                                                                                                                                              func(*TellipseType, bool) error
	XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegl_pipeline_settings_groupschema_Mask_TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceMask_                                                                                            func(*XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegl_pipeline_settings_groupschema_Mask_TxsdGlPipelineSettingsGroupChoiceStencilMaskSeparateSequenceMask_, bool) error
	XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegl_pipeline_settings_groupschema_DestAlpha_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestAlpha_                                                                                func(*XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegl_pipeline_settings_groupschema_DestAlpha_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestAlpha_, bool) error
	XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_Max_TtargetableFloat3Type_000000                                                                                                               func(*XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraint_typeschema_Max_TtargetableFloat3Type_000000, bool) error
	XsdGoPkgHasGroup_FxNewparamGroup                                                                                                                                                                                                                          func(*XsdGoPkgHasGroup_FxNewparamGroup, bool) error
	XsdGoPkgHasElem_colorchoicefx_common_color_or_texture_typeschema_Color_TxsdFxCommonColorOrTextureTypeChoiceColor_                                                                                                                                         func(*XsdGoPkgHasElem_colorchoicefx_common_color_or_texture_typeschema_Color_TxsdFxCommonColorOrTextureTypeChoiceColor_, bool) error
	XsdGoPkgHasElem_circlechoicesequencecurve_typeschema_Circle_TcircleType_                                                                                                                                                                                  func(*XsdGoPkgHasElem_circlechoicesequencecurve_typeschema_Circle_TcircleType_, bool) error
	TfxClearcolorType                                                                                                                                                                                                                                         func(*TfxClearcolorType, bool) error
	XsdGoPkgHasElem_bool4x2choicecg_param_groupschema_Bool4X2_Tbool4X2Type_                                                                                                                                                                                   func(*XsdGoPkgHasElem_bool4x2choicecg_param_groupschema_Bool4X2_Tbool4X2Type_, bool) error
	XsdGoPkgHasElem_dither_enablechoicegles2_pipeline_settings_groupschema_DitherEnable_TxsdGles2PipelineSettingsGroupChoiceDitherEnable_                                                                                                                     func(*XsdGoPkgHasElem_dither_enablechoicegles2_pipeline_settings_groupschema_DitherEnable_TxsdGles2PipelineSettingsGroupChoiceDitherEnable_, bool) error
	XsdGoPkgHasElem_half_extentssequencebox_typeschema_HalfExtents_Tfloat3Type_                                                                                                                                                                               func(*XsdGoPkgHasElem_half_extentssequencebox_typeschema_HalfExtents_Tfloat3Type_, bool) error
	TcgSetparamType                                                                                                                                                                                                                                           func(*TcgSetparamType, bool) error
	XsdGoPkgHasElem_fixed4x2choicecg_param_groupschema_Fixed4X2_Tfloat4X2Type_                                                                                                                                                                                func(*XsdGoPkgHasElem_fixed4x2choicecg_param_groupschema_Fixed4X2_Tfloat4X2Type_, bool) error
	TxsdImageTypeSequenceChoiceCreate3DSequenceInitFrom                                                                                                                                                                                                       func(*TxsdImageTypeSequenceChoiceCreate3DSequenceInitFrom, bool) error
	XsdGoPkgHasElems_inlinechoicesequencefx_sources_typeschema_Inline_XsdtString_                                                                                                                                                                             func(*XsdGoPkgHasElems_inlinechoicesequencefx_sources_typeschema_Inline_XsdtString_, bool) error
	XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles2_pipeline_settings_groupschema_PolygonOffsetFillEnable_TxsdGles2PipelineSettingsGroupChoicePolygonOffsetFillEnable_                                                                                  func(*XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles2_pipeline_settings_groupschema_PolygonOffsetFillEnable_TxsdGles2PipelineSettingsGroupChoicePolygonOffsetFillEnable_, bool) error
	XsdGoPkgHasElems_library_geometrieschoicesequenceCOLLADAschema_LibraryGeometries_TlibraryGeometriesType_                                                                                                                                                  func(*XsdGoPkgHasElems_library_geometrieschoicesequenceCOLLADAschema_LibraryGeometries_TlibraryGeometriesType_, bool) error
	XsdGoPkgHasElem_blend_func_separatechoicegles2_pipeline_settings_groupschema_BlendFuncSeparate_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparate_                                                                                                     func(*XsdGoPkgHasElem_blend_func_separatechoicegles2_pipeline_settings_groupschema_BlendFuncSeparate_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSeparate_, bool) error
	XsdGoPkgHasElem_scissorchoicegles_pipeline_settings_groupschema_Scissor_TxsdGlesPipelineSettingsGroupChoiceScissor_                                                                                                                                       func(*XsdGoPkgHasElem_scissorchoicegles_pipeline_settings_groupschema_Scissor_TxsdGlesPipelineSettingsGroupChoiceScissor_, bool) error
	TmotionEffectorInfoType                                                                                                                                                                                                                                   func(*TmotionEffectorInfoType, bool) error
	XsdGoPkgHasElem_drawsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_Draw_TfxDrawType_                                                                                                                                        func(*XsdGoPkgHasElem_drawsequenceevaluatesequencepasssequencetechniquesequenceprofile_glsl_typeschema_Draw_TfxDrawType_, bool) error
	XsdGoPkgHasElem_blend_equationchoicegl_pipeline_settings_groupschema_BlendEquation_TxsdGlPipelineSettingsGroupChoiceBlendEquation_                                                                                                                        func(*XsdGoPkgHasElem_blend_equationchoicegl_pipeline_settings_groupschema_BlendEquation_TxsdGlPipelineSettingsGroupChoiceBlendEquation_, bool) error
	TbindJointAxisType                                                                                                                                                                                                                                        func(*TbindJointAxisType, bool) error
	TxsdGlPipelineSettingsGroupChoiceLightPosition                                                                                                                                                                                                            func(*TxsdGlPipelineSettingsGroupChoiceLightPosition, bool) error
	XsdGoPkgHasElem_light_ambientchoicegles_pipeline_settings_groupschema_LightAmbient_TxsdGlesPipelineSettingsGroupChoiceLightAmbient_                                                                                                                       func(*XsdGoPkgHasElem_light_ambientchoicegles_pipeline_settings_groupschema_LightAmbient_TxsdGlesPipelineSettingsGroupChoiceLightAmbient_, bool) error
	XsdGoPkgHasElem_technique_commonsequenceformula_typeschema_TechniqueCommon_TformulaTechniqueType_                                                                                                                                                         func(*XsdGoPkgHasElem_technique_commonsequenceformula_typeschema_TechniqueCommon_TformulaTechniqueType_, bool) error
	XsdGoPkgHasElem_light_positionchoicegl_pipeline_settings_groupschema_LightPosition_TxsdGlPipelineSettingsGroupChoiceLightPosition_                                                                                                                        func(*XsdGoPkgHasElem_light_positionchoicegl_pipeline_settings_groupschema_LightPosition_TxsdGlPipelineSettingsGroupChoiceLightPosition_, bool) error
	XsdGoPkgHasElem_constant_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_ConstantAttenuation_TtargetableFloatType_10                                                                                                                func(*XsdGoPkgHasElem_constant_attenuationsequencespotchoicetechnique_commonsequencelight_typeschema_ConstantAttenuation_TtargetableFloatType_10, bool) error
	TfxCleardepthType                                                                                                                                                                                                                                         func(*TfxCleardepthType, bool) error
	TmaterialType                                                                                                                                                                                                                                             func(*TmaterialType, bool) error
	XsdGoPkgHasElem_originsequenceline_typeschema_Origin_Tfloat3Type_                                                                                                                                                                                         func(*XsdGoPkgHasElem_originsequenceline_typeschema_Origin_Tfloat3Type_, bool) error
	XsdGoPkgHasElem_destsequenceblend_funcchoicegl_pipeline_settings_groupschema_Dest_TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceDest_                                                                                                                 func(*XsdGoPkgHasElem_destsequenceblend_funcchoicegl_pipeline_settings_groupschema_Dest_TxsdGlPipelineSettingsGroupChoiceBlendFuncSequenceDest_, bool) error
	XsdGoPkgHasElem_nurbschoicesequencecurve_typeschema_Nurbs_TnurbsType_                                                                                                                                                                                     func(*XsdGoPkgHasElem_nurbschoicesequencecurve_typeschema_Nurbs_TnurbsType_, bool) error
	TjointLimitsType                                                                                                                                                                                                                                          func(*TjointLimitsType, bool) error
	XsdGoPkgHasElem_line_widthchoicegl_pipeline_settings_groupschema_LineWidth_TxsdGlPipelineSettingsGroupChoiceLineWidth_                                                                                                                                    func(*XsdGoPkgHasElem_line_widthchoicegl_pipeline_settings_groupschema_LineWidth_TxsdGlPipelineSettingsGroupChoiceLineWidth_, bool) error
	XsdGoPkgHasElem_textureDEPTHchoicegl_pipeline_settings_groupschema_TextureDEPTH_TxsdGlPipelineSettingsGroupChoiceTextureDEPTH_                                                                                                                            func(*XsdGoPkgHasElem_textureDEPTHchoicegl_pipeline_settings_groupschema_TextureDEPTH_TxsdGlPipelineSettingsGroupChoiceTextureDEPTH_, bool) error
	TsurfaceType                                                                                                                                                                                                                                              func(*TsurfaceType, bool) error
	XsdGoPkgHasElem_polygon_stipple_enablechoicegl_pipeline_settings_groupschema_PolygonStippleEnable_TxsdGlPipelineSettingsGroupChoicePolygonStippleEnable_                                                                                                  func(*XsdGoPkgHasElem_polygon_stipple_enablechoicegl_pipeline_settings_groupschema_PolygonStippleEnable_TxsdGlPipelineSettingsGroupChoicePolygonStippleEnable_, bool) error
	TinputLocalOffsetType                                                                                                                                                                                                                                     func(*TinputLocalOffsetType, bool) error
	XsdGoPkgHasElems_force_fieldsequencelibrary_force_fields_typeschema_ForceField_TforceFieldType_                                                                                                                                                           func(*XsdGoPkgHasElems_force_fieldsequencelibrary_force_fields_typeschema_ForceField_TforceFieldType_, bool) error
	XsdGoPkgHasElem_bool3x2choicecg_param_groupschema_Bool3X2_Tbool3X2Type_                                                                                                                                                                                   func(*XsdGoPkgHasElem_bool3x2choicecg_param_groupschema_Bool3X2_Tbool3X2Type_, bool) error
	TorientType                                                                                                                                                                                                                                               func(*TorientType, bool) error
	TtokenArrayType                                                                                                                                                                                                                                           func(*TtokenArrayType, bool) error
	XsdGoPkgHasElems_imagesequencelibrary_images_typeschema_Image_TimageType_                                                                                                                                                                                 func(*XsdGoPkgHasElems_imagesequencelibrary_images_typeschema_Image_TimageType_, bool) error
	XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegl_pipeline_settings_groupschema_SrcAlpha_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcAlpha_                                                                                   func(*XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegl_pipeline_settings_groupschema_SrcAlpha_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcAlpha_, bool) error
	TboolArrayType                                                                                                                                                                                                                                            func(*TboolArrayType, bool) error
	TxsdLightTypeSequenceTechniqueCommonChoiceAmbient                                                                                                                                                                                                         func(*TxsdLightTypeSequenceTechniqueCommonChoiceAmbient, bool) error
	XsdGoPkgHasElem_pcurvessequencebrep_typeschema_Pcurves_TpcurvesType_                                                                                                                                                                                      func(*XsdGoPkgHasElem_pcurvessequencebrep_typeschema_Pcurves_TpcurvesType_, bool) error
	XsdGoPkgHasElem_accessorsequencetechnique_commonsequencesource_typeschema_Accessor_TaccessorType_                                                                                                                                                         func(*XsdGoPkgHasElem_accessorsequencetechnique_commonsequencesource_typeschema_Accessor_TaccessorType_, bool) error
	XsdGoPkgHasElems_axis_infosequencekinematics_technique_typeschema_AxisInfo_TkinematicsAxisInfoType_                                                                                                                                                       func(*XsdGoPkgHasElems_axis_infosequencekinematics_technique_typeschema_AxisInfo_TkinematicsAxisInfoType_, bool) error
	XsdGoPkgHasElem_mat3choicegles2_value_groupschema_Mat3_Tfloat3X3Type_                                                                                                                                                                                     func(*XsdGoPkgHasElem_mat3choicegles2_value_groupschema_Mat3_Tfloat3X3Type_, bool) error
	XsdGoPkgHasElems_geometrysequencelibrary_geometries_typeschema_Geometry_TgeometryType_                                                                                                                                                                    func(*XsdGoPkgHasElems_geometrysequencelibrary_geometries_typeschema_Geometry_TgeometryType_, bool) error
	XsdGoPkgHasElem_zpasssequencestencil_opchoicegles_pipeline_settings_groupschema_Zpass_TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceZpass_                                                                                                          func(*XsdGoPkgHasElem_zpasssequencestencil_opchoicegles_pipeline_settings_groupschema_Zpass_TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceZpass_, bool) error
	XsdGoPkgHasElem_normalize_enablechoicegl_pipeline_settings_groupschema_NormalizeEnable_TxsdGlPipelineSettingsGroupChoiceNormalizeEnable_                                                                                                                  func(*XsdGoPkgHasElem_normalize_enablechoicegl_pipeline_settings_groupschema_NormalizeEnable_TxsdGlPipelineSettingsGroupChoiceNormalizeEnable_, bool) error
	XsdGoPkgHasElem_int4x4choicecg_param_groupschema_Int4X4_Tint4X4Type_                                                                                                                                                                                      func(*XsdGoPkgHasElem_int4x4choicecg_param_groupschema_Int4X4_Tint4X4Type_, bool) error
	TxsdGlPipelineSettingsGroupChoiceTextureCUBE                                                                                                                                                                                                              func(*TxsdGlPipelineSettingsGroupChoiceTextureCUBE, bool) error
	TkinematicsFrameType                                                                                                                                                                                                                                      func(*TkinematicsFrameType, bool) error
	XsdGoPkgHasElem_targetsequenceformula_typeschema_Target_TcommonFloatOrParamType_                                                                                                                                                                          func(*XsdGoPkgHasElem_targetsequenceformula_typeschema_Target_TcommonFloatOrParamType_, bool) error
	TxsdRigidConstraintTypeSequenceTechniqueCommon                                                                                                                                                                                                            func(*TxsdRigidConstraintTypeSequenceTechniqueCommon, bool) error
	TxsdRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame                                                                                                                                                                                                 func(*TxsdRigidBodyTypeSequenceTechniqueCommonSequenceMassFrame, bool) error
	TformulaTechniqueType                                                                                                                                                                                                                                     func(*TformulaTechniqueType, bool) error
	TxsdCameraTypeSequenceOptics                                                                                                                                                                                                                              func(*TxsdCameraTypeSequenceOptics, bool) error
	TxsdGles2PipelineSettingsGroupChoiceScissor                                                                                                                                                                                                               func(*TxsdGles2PipelineSettingsGroupChoiceScissor, bool) error
	TtargetableFloat3Type                                                                                                                                                                                                                                     func(*TtargetableFloat3Type, bool) error
	XsdGoPkgHasElem_float1x4choicegles_param_groupschema_Float1X4_Tfloat4Type_                                                                                                                                                                                func(*XsdGoPkgHasElem_float1x4choicegles_param_groupschema_Float1X4_Tfloat4Type_, bool) error
	XsdGoPkgHasElem_valuechoicetextureDEPTHchoicegl_pipeline_settings_groupschema_Value_TfxSamplerDEPTHType_                                                                                                                                                  func(*XsdGoPkgHasElem_valuechoicetextureDEPTHchoicegl_pipeline_settings_groupschema_Value_TfxSamplerDEPTHType_, bool) error
	XsdGoPkgHasElem_light_positionchoicegles_pipeline_settings_groupschema_LightPosition_TxsdGlesPipelineSettingsGroupChoiceLightPosition_                                                                                                                    func(*XsdGoPkgHasElem_light_positionchoicegles_pipeline_settings_groupschema_LightPosition_TxsdGlesPipelineSettingsGroupChoiceLightPosition_, bool) error
	XsdGoPkgHasElem_semanticchoicebind_attributesequenceglsl_program_typeschema_Semantic_XsdtToken_                                                                                                                                                           func(*XsdGoPkgHasElem_semanticchoicebind_attributesequenceglsl_program_typeschema_Semantic_XsdtToken_, bool) error
	XsdGoPkgHasElem_failsequencestencil_opchoicegles_pipeline_settings_groupschema_Fail_TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceFail_                                                                                                             func(*XsdGoPkgHasElem_failsequencestencil_opchoicegles_pipeline_settings_groupschema_Fail_TxsdGlesPipelineSettingsGroupChoiceStencilOpSequenceFail_, bool) error
	XsdGoPkgHasElem_frame_originsequencekinematics_technique_typeschema_FrameOrigin_TkinematicsFrameType_                                                                                                                                                     func(*XsdGoPkgHasElem_frame_originsequencekinematics_technique_typeschema_FrameOrigin_TkinematicsFrameType_, bool) error
	XsdGoPkgHasElems_instance_physics_modelsequencephysics_model_typeschema_InstancePhysicsModel_TinstancePhysicsModelType_                                                                                                                                   func(*XsdGoPkgHasElems_instance_physics_modelsequencephysics_model_typeschema_InstancePhysicsModel_TinstancePhysicsModelType_, bool) error
	XsdGoPkgHasElem_technique_commonsequencekinematics_model_typeschema_TechniqueCommon_TkinematicsModelTechniqueType_                                                                                                                                        func(*XsdGoPkgHasElem_technique_commonsequencekinematics_model_typeschema_TechniqueCommon_TkinematicsModelTechniqueType_, bool) error
	XsdGoPkgHasGroup_GlPipelineSettingsGroup                                                                                                                                                                                                                  func(*XsdGoPkgHasGroup_GlPipelineSettingsGroup, bool) error
	TextraType                                                                                                                                                                                                                                                func(*TextraType, bool) error
	XsdGoPkgHasElems_library_animationschoicesequenceCOLLADAschema_LibraryAnimations_TlibraryAnimationsType_                                                                                                                                                  func(*XsdGoPkgHasElems_library_animationschoicesequenceCOLLADAschema_LibraryAnimations_TlibraryAnimationsType_, bool) error
	XsdGoPkgHasElem_fixed2x1choicecg_param_groupschema_Fixed2X1_Tfloat2Type_                                                                                                                                                                                  func(*XsdGoPkgHasElem_fixed2x1choicecg_param_groupschema_Fixed2X1_Tfloat2Type_, bool) error
	XsdGoPkgHasElem_scissorchoicegl_pipeline_settings_groupschema_Scissor_TxsdGlPipelineSettingsGroupChoiceScissor_                                                                                                                                           func(*XsdGoPkgHasElem_scissorchoicegl_pipeline_settings_groupschema_Scissor_TxsdGlPipelineSettingsGroupChoiceScissor_, bool) error
	XsdGoPkgHasElem_Collada                                                                                                                                                                                                                                   func(*XsdGoPkgHasElem_Collada, bool) error
	TxsdGlPipelineSettingsGroupChoiceColorMask                                                                                                                                                                                                                func(*TxsdGlPipelineSettingsGroupChoiceColorMask, bool) error
	XsdGoPkgHasElem_curvesequenceswept_surface_typeschema_Curve_TcurveType_                                                                                                                                                                                   func(*XsdGoPkgHasElem_curvesequenceswept_surface_typeschema_Curve_TcurveType_, bool) error
	XsdGoPkgHasElem_point_distance_attenuationchoicegles_pipeline_settings_groupschema_PointDistanceAttenuation_TxsdGlesPipelineSettingsGroupChoicePointDistanceAttenuation_                                                                                  func(*XsdGoPkgHasElem_point_distance_attenuationchoicegles_pipeline_settings_groupschema_PointDistanceAttenuation_TxsdGlesPipelineSettingsGroupChoicePointDistanceAttenuation_, bool) error
	TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceInvert                                                                                                                                                                                          func(*TxsdGles2PipelineSettingsGroupChoiceSampleCoverageSequenceInvert, bool) error
	TxsdImageTypeSequenceChoiceCreateCubeSequenceArray                                                                                                                                                                                                        func(*TxsdImageTypeSequenceChoiceCreateCubeSequenceArray, bool) error
	XsdGoPkgHasElem_unnormalizedchoicesequencecreate_2dchoicesequenceimage_typeschema_Unnormalized_XsdtString_                                                                                                                                                func(*XsdGoPkgHasElem_unnormalizedchoicesequencecreate_2dchoicesequenceimage_typeschema_Unnormalized_XsdtString_, bool) error
	XsdGoPkgHasElem_effector_infosequencemotion_technique_typeschema_EffectorInfo_TmotionEffectorInfoType_                                                                                                                                                    func(*XsdGoPkgHasElem_effector_infosequencemotion_technique_typeschema_EffectorInfo_TmotionEffectorInfoType_, bool) error
	XsdGoPkgHasElems_shadersequenceprogramsequencecg_pass_typeschema_Shader_TxsdCgPassTypeSequenceProgramSequenceShader_                                                                                                                                      func(*XsdGoPkgHasElems_shadersequenceprogramsequencecg_pass_typeschema_Shader_TxsdCgPassTypeSequenceProgramSequenceShader_, bool) error
	XsdGoPkgHasElem_technique_commonsequencebind_material_typeschema_TechniqueCommon_TxsdBindMaterialTypeSequenceTechniqueCommon_                                                                                                                             func(*XsdGoPkgHasElem_technique_commonsequencebind_material_typeschema_TechniqueCommon_TxsdBindMaterialTypeSequenceTechniqueCommon_, bool) error
	XsdGoPkgHasElems_newparamsequenceprofile_cg_typeschema_Newparam_TcgNewparamType_                                                                                                                                                                          func(*XsdGoPkgHasElems_newparamsequenceprofile_cg_typeschema_Newparam_TcgNewparamType_, bool) error
	TxsdGles2ValueGroupChoiceArray                                                                                                                                                                                                                            func(*TxsdGles2ValueGroupChoiceArray, bool) error
	XsdGoPkgHasElem_spherechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Sphere_TsphereType_                                                                                                                               func(*XsdGoPkgHasElem_spherechoicesequenceshapesequencetechnique_commonsequenceinstance_rigid_body_typeschema_Sphere_TsphereType_, bool) error
	XsdGoPkgHasElem_bool2choicefx_annotate_groupschema_Bool2_Tbool2Type_                                                                                                                                                                                      func(*XsdGoPkgHasElem_bool2choicefx_annotate_groupschema_Bool2_Tbool2Type_, bool) error
	XsdGoPkgHasElem_velocitysequencetechnique_commonsequenceinstance_rigid_body_typeschema_Velocity_Tfloat3Type_000000                                                                                                                                        func(*XsdGoPkgHasElem_velocitysequencetechnique_commonsequenceinstance_rigid_body_typeschema_Velocity_Tfloat3Type_000000, bool) error
	TxsdLinkTypeSequenceChoiceAttachmentStart                                                                                                                                                                                                                 func(*TxsdLinkTypeSequenceChoiceAttachmentStart, bool) error
	XsdGoPkgHasElem_meshchoicesequencegeometry_typeschema_Mesh_TmeshType_                                                                                                                                                                                     func(*XsdGoPkgHasElem_meshchoicesequencegeometry_typeschema_Mesh_TmeshType_, bool) error
	TxsdProfileCgTypeSequenceTechnique                                                                                                                                                                                                                        func(*TxsdProfileCgTypeSequenceTechnique, bool) error
	TxsdGlPipelineSettingsGroupChoiceColorMaterialSequenceMode                                                                                                                                                                                                func(*TxsdGlPipelineSettingsGroupChoiceColorMaterialSequenceMode, bool) error
	XsdGoPkgHasElems_nodesequencenode_typeschema_Node_TnodeType_                                                                                                                                                                                              func(*XsdGoPkgHasElems_nodesequencenode_typeschema_Node_TnodeType_, bool) error
	TrigidConstraintType                                                                                                                                                                                                                                      func(*TrigidConstraintType, bool) error
	TsolidsType                                                                                                                                                                                                                                               func(*TsolidsType, bool) error
	XsdGoPkgHasElem_backsequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Back_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceBack_                                                                                      func(*XsdGoPkgHasElem_backsequencestencil_func_separatechoicegles2_pipeline_settings_groupschema_Back_TxsdGles2PipelineSettingsGroupChoiceStencilFuncSeparateSequenceBack_, bool) error
	XsdGoPkgHasElem_sampler2Dchoicegles_param_groupschema_Sampler2D_TglesSamplerType_                                                                                                                                                                         func(*XsdGoPkgHasElem_sampler2Dchoicegles_param_groupschema_Sampler2D_TglesSamplerType_, bool) error
	XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegles2_pipeline_settings_groupschema_Rgb_TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparateSequenceRgb_                                                                                     func(*XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegles2_pipeline_settings_groupschema_Rgb_TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparateSequenceRgb_, bool) error
	XsdGoPkgHasElem_texture_env_colorchoicegl_pipeline_settings_groupschema_TextureEnvColor_TxsdGlPipelineSettingsGroupChoiceTextureEnvColor_                                                                                                                 func(*XsdGoPkgHasElem_texture_env_colorchoicegl_pipeline_settings_groupschema_TextureEnvColor_TxsdGlPipelineSettingsGroupChoiceTextureEnvColor_, bool) error
	XsdGoPkgHasElem_fixed3x1choicecg_param_groupschema_Fixed3X1_Tfloat3Type_                                                                                                                                                                                  func(*XsdGoPkgHasElem_fixed3x1choicecg_param_groupschema_Fixed3X1_Tfloat3Type_, bool) error
	TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShapeSequenceHollow                                                                                                                                                                               func(*TxsdInstanceRigidBodyTypeSequenceTechniqueCommonSequenceShapeSequenceHollow, bool) error
	XsdGoPkgHasElem_opticssequencecamera_typeschema_Optics_TxsdCameraTypeSequenceOptics_                                                                                                                                                                      func(*XsdGoPkgHasElem_opticssequencecamera_typeschema_Optics_TxsdCameraTypeSequenceOptics_, bool) error
	XsdGoPkgHasElem_radiussequencecapsule_typeschema_Radius_Tfloat3Type_                                                                                                                                                                                      func(*XsdGoPkgHasElem_radiussequencecapsule_typeschema_Radius_Tfloat3Type_, bool) error
	XsdGoPkgHasElem_colorsequenceambientchoicetechnique_commonsequencelight_typeschema_Color_TtargetableFloat3Type_                                                                                                                                           func(*XsdGoPkgHasElem_colorsequenceambientchoicetechnique_commonsequencelight_typeschema_Color_TtargetableFloat3Type_, bool) error
	XsdGoPkgHasElems_lightsequencelibrary_lights_typeschema_Light_TlightType_                                                                                                                                                                                 func(*XsdGoPkgHasElems_lightsequencelibrary_lights_typeschema_Light_TlightType_, bool) error
	TeffectType                                                                                                                                                                                                                                               func(*TeffectType, bool) error
	XsdGoPkgHasElem_blend_equation_separatechoicegl_pipeline_settings_groupschema_BlendEquationSeparate_TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparate_                                                                                               func(*XsdGoPkgHasElem_blend_equation_separatechoicegl_pipeline_settings_groupschema_BlendEquationSeparate_TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparate_, bool) error
	TtristripsType                                                                                                                                                                                                                                            func(*TtristripsType, bool) error
	XsdGoPkgHasElem_stencil_funcchoicegl_pipeline_settings_groupschema_StencilFunc_TxsdGlPipelineSettingsGroupChoiceStencilFunc_                                                                                                                              func(*XsdGoPkgHasElem_stencil_funcchoicegl_pipeline_settings_groupschema_StencilFunc_TxsdGlPipelineSettingsGroupChoiceStencilFunc_, bool) error
	XsdGoPkgHasElem_wrap_tsequencegles_sampler_states_groupschema_WrapT_TglesSamplerWrapEnum_Repeat                                                                                                                                                           func(*XsdGoPkgHasElem_wrap_tsequencegles_sampler_states_groupschema_WrapT_TglesSamplerWrapEnum_Repeat, bool) error
	XsdGoPkgHasElems_controllersequencelibrary_controllers_typeschema_Controller_TcontrollerType_                                                                                                                                                             func(*XsdGoPkgHasElems_controllersequencelibrary_controllers_typeschema_Controller_TcontrollerType_, bool) error
	XsdGoPkgHasElems_rigid_constraintsequencephysics_model_typeschema_RigidConstraint_TrigidConstraintType_                                                                                                                                                   func(*XsdGoPkgHasElems_rigid_constraintsequencephysics_model_typeschema_RigidConstraint_TrigidConstraintType_, bool) error
	TxsdGles2PipelineSettingsGroupChoiceBlendEquation                                                                                                                                                                                                         func(*TxsdGles2PipelineSettingsGroupChoiceBlendEquation, bool) error
	TlineType                                                                                                                                                                                                                                                 func(*TlineType, bool) error
	TxsdGlslProgramTypeSequenceBindAttribute                                                                                                                                                                                                                  func(*TxsdGlslProgramTypeSequenceBindAttribute, bool) error
	XsdGoPkgHasElem_failsequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Fail_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceFail_                                                                                                func(*XsdGoPkgHasElem_failsequencestencil_op_separatechoicegl_pipeline_settings_groupschema_Fail_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparateSequenceFail_, bool) error
	XsdGoPkgHasElem_half2x4choicecg_param_groupschema_Half2X4_Tfloat2X4Type_                                                                                                                                                                                  func(*XsdGoPkgHasElem_half2x4choicecg_param_groupschema_Half2X4_Tfloat2X4Type_, bool) error
	XsdGoPkgHasElem_mip_max_levelsequencefx_sampler_states_groupschema_MipMaxLevel_XsdtUnsignedByte_0                                                                                                                                                         func(*XsdGoPkgHasElem_mip_max_levelsequencefx_sampler_states_groupschema_MipMaxLevel_XsdtUnsignedByte_0, bool) error
	TxsdInstanceMaterialTypeSequenceBindVertexInput                                                                                                                                                                                                           func(*TxsdInstanceMaterialTypeSequenceBindVertexInput, bool) error
	XsdGoPkgHasElem_profile_GLESchoicefx_profile_groupschema_ProfileGles_TprofileGlesType_                                                                                                                                                                    func(*XsdGoPkgHasElem_profile_GLESchoicefx_profile_groupschema_ProfileGles_TprofileGlesType_, bool) error
	TmeshType                                                                                                                                                                                                                                                 func(*TmeshType, bool) error
	XsdGoPkgHasElem_light_linear_attenuationchoicegl_pipeline_settings_groupschema_LightLinearAttenuation_TxsdGlPipelineSettingsGroupChoiceLightLinearAttenuation_                                                                                            func(*XsdGoPkgHasElem_light_linear_attenuationchoicegl_pipeline_settings_groupschema_LightLinearAttenuation_TxsdGlPipelineSettingsGroupChoiceLightLinearAttenuation_, bool) error
	TlibraryCamerasType                                                                                                                                                                                                                                       func(*TlibraryCamerasType, bool) error
	XsdGoPkgHasElem_half4x3choicecg_param_groupschema_Half4X3_Tfloat4X3Type_                                                                                                                                                                                  func(*XsdGoPkgHasElem_half4x3choicecg_param_groupschema_Half4X3_Tfloat4X3Type_, bool) error
	XsdGoPkgHasElem_clip_plane_enablechoicegles_pipeline_settings_groupschema_ClipPlaneEnable_TxsdGlesPipelineSettingsGroupChoiceClipPlaneEnable_                                                                                                             func(*XsdGoPkgHasElem_clip_plane_enablechoicegles_pipeline_settings_groupschema_ClipPlaneEnable_TxsdGlesPipelineSettingsGroupChoiceClipPlaneEnable_, bool) error
	XsdGoPkgHasElem_depth_test_enablechoicegl_pipeline_settings_groupschema_DepthTestEnable_TxsdGlPipelineSettingsGroupChoiceDepthTestEnable_                                                                                                                 func(*XsdGoPkgHasElem_depth_test_enablechoicegl_pipeline_settings_groupschema_DepthTestEnable_TxsdGlPipelineSettingsGroupChoiceDepthTestEnable_, bool) error
	XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_TargetValue_TtargetableFloatType_00                                                                                                  func(*XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraint_typeschema_TargetValue_TtargetableFloatType_00, bool) error
	XsdGoPkgHasElems_instance_articulated_systemsequencekinematics_scene_typeschema_InstanceArticulatedSystem_TinstanceArticulatedSystemType_                                                                                                                 func(*XsdGoPkgHasElems_instance_articulated_systemsequencekinematics_scene_typeschema_InstanceArticulatedSystem_TinstanceArticulatedSystemType_, bool) error
	TxsdAssetTypeSequenceUnit                                                                                                                                                                                                                                 func(*TxsdAssetTypeSequenceUnit, bool) error
	XsdGoPkgHasElem_float3x3choicefx_annotate_groupschema_Float3X3_Tfloat3X3Type_                                                                                                                                                                             func(*XsdGoPkgHasElem_float3x3choicefx_annotate_groupschema_Float3X3_Tfloat3X3Type_, bool) error
	XsdGoPkgHasElem_blend_equation_separatechoicegles2_pipeline_settings_groupschema_BlendEquationSeparate_TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparate_                                                                                         func(*XsdGoPkgHasElem_blend_equation_separatechoicegles2_pipeline_settings_groupschema_BlendEquationSeparate_TxsdGles2PipelineSettingsGroupChoiceBlendEquationSeparate_, bool) error
	TcommonSidrefOrParamType                                                                                                                                                                                                                                  func(*TcommonSidrefOrParamType, bool) error
	XsdGoPkgHasElems_library_kinematics_sceneschoicesequenceCOLLADAschema_LibraryKinematicsScenes_TlibraryKinematicsScenesType_                                                                                                                               func(*XsdGoPkgHasElems_library_kinematics_sceneschoicesequenceCOLLADAschema_LibraryKinematicsScenes_TlibraryKinematicsScenesType_, bool) error
	XsdGoPkgHasElem_bool3x3choicecg_param_groupschema_Bool3X3_Tbool3X3Type_                                                                                                                                                                                   func(*XsdGoPkgHasElem_bool3x3choicecg_param_groupschema_Bool3X3_Tbool3X3Type_, bool) error
	XsdGoPkgHasElem_sampler_imagechoicefx_setparam_groupschema_SamplerImage_TinstanceImageType_                                                                                                                                                               func(*XsdGoPkgHasElem_sampler_imagechoicefx_setparam_groupschema_SamplerImage_TinstanceImageType_, bool) error
	TxsdGlPipelineSettingsGroupChoiceMaterialDiffuse                                                                                                                                                                                                          func(*TxsdGlPipelineSettingsGroupChoiceMaterialDiffuse, bool) error
	XsdGoPkgHasElem_blend_colorchoicegles2_pipeline_settings_groupschema_BlendColor_TxsdGles2PipelineSettingsGroupChoiceBlendColor_                                                                                                                           func(*XsdGoPkgHasElem_blend_colorchoicegles2_pipeline_settings_groupschema_BlendColor_TxsdGles2PipelineSettingsGroupChoiceBlendColor_, bool) error
	XsdGoPkgHasElem_fog_densitychoicegl_pipeline_settings_groupschema_FogDensity_TxsdGlPipelineSettingsGroupChoiceFogDensity_                                                                                                                                 func(*XsdGoPkgHasElem_fog_densitychoicegl_pipeline_settings_groupschema_FogDensity_TxsdGlPipelineSettingsGroupChoiceFogDensity_, bool) error
	TfxClearstencilType                                                                                                                                                                                                                                       func(*TfxClearstencilType, bool) error
	TxsdGlPipelineSettingsGroupChoiceClipPlane                                                                                                                                                                                                                func(*TxsdGlPipelineSettingsGroupChoiceClipPlane, bool) error
	XsdGoPkgHasElem_blend_funcchoicegles_pipeline_settings_groupschema_BlendFunc_TxsdGlesPipelineSettingsGroupChoiceBlendFunc_                                                                                                                                func(*XsdGoPkgHasElem_blend_funcchoicegles_pipeline_settings_groupschema_BlendFunc_TxsdGlesPipelineSettingsGroupChoiceBlendFunc_, bool) error
	XsdGoPkgHasElems_setparamsequenceusertypechoicegles2_value_groupschema_Setparam_TxsdGles2ValueGroupChoiceUsertypeSequenceSetparam_                                                                                                                        func(*XsdGoPkgHasElems_setparamsequenceusertypechoicegles2_value_groupschema_Setparam_TxsdGles2ValueGroupChoiceUsertypeSequenceSetparam_, bool) error
	XsdGoPkgHasElems_argumentsequencegles_texcombiner_command_rgb_typeschema_Argument_TglesTexcombinerArgumentRgbType_                                                                                                                                        func(*XsdGoPkgHasElems_argumentsequencegles_texcombiner_command_rgb_typeschema_Argument_TglesTexcombinerArgumentRgbType_, bool) error
	TplaneType                                                                                                                                                                                                                                                func(*TplaneType, bool) error
	XsdGoPkgHasElem_technique_commonsequencerigid_constraint_typeschema_TechniqueCommon_TxsdRigidConstraintTypeSequenceTechniqueCommon_                                                                                                                       func(*XsdGoPkgHasElem_technique_commonsequencerigid_constraint_typeschema_TechniqueCommon_TxsdRigidConstraintTypeSequenceTechniqueCommon_, bool) error
	XsdGoPkgHasElem_fixed3x3choicecg_param_groupschema_Fixed3X3_Tfloat3X3Type_                                                                                                                                                                                func(*XsdGoPkgHasElem_fixed3x3choicecg_param_groupschema_Fixed3X3_Tfloat3X3Type_, bool) error
	XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegl_pipeline_settings_groupschema_DestRgb_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestRgb_                                                                                      func(*XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegl_pipeline_settings_groupschema_DestRgb_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceDestRgb_, bool) error
	XsdGoPkgHasElem_depth_maskchoicegles_pipeline_settings_groupschema_DepthMask_TxsdGlesPipelineSettingsGroupChoiceDepthMask_                                                                                                                                func(*XsdGoPkgHasElem_depth_maskchoicegles_pipeline_settings_groupschema_DepthMask_TxsdGlesPipelineSettingsGroupChoiceDepthMask_, bool) error
	XsdGoPkgHasElem_stencil_op_separatechoicegl_pipeline_settings_groupschema_StencilOpSeparate_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparate_                                                                                                           func(*XsdGoPkgHasElem_stencil_op_separatechoicegl_pipeline_settings_groupschema_StencilOpSeparate_TxsdGlPipelineSettingsGroupChoiceStencilOpSeparate_, bool) error
	XsdGoPkgHasElems_library_physics_modelschoicesequenceCOLLADAschema_LibraryPhysicsModels_TlibraryPhysicsModelsType_                                                                                                                                        func(*XsdGoPkgHasElems_library_physics_modelschoicesequenceCOLLADAschema_LibraryPhysicsModels_TlibraryPhysicsModelsType_, bool) error
	XsdGoPkgHasElem_float_arraychoicesequencesource_typeschema_FloatArray_TfloatArrayType_                                                                                                                                                                    func(*XsdGoPkgHasElem_float_arraychoicesequencesource_typeschema_FloatArray_TfloatArrayType_, bool) error
	XsdGoPkgHasElem_fixed2x4choicecg_param_groupschema_Fixed2X4_Tfloat2X4Type_                                                                                                                                                                                func(*XsdGoPkgHasElem_fixed2x4choicecg_param_groupschema_Fixed2X4_Tfloat2X4Type_, bool) error
	XsdGoPkgHasElems_inputsequencesampler_typeschema_Input_TinputLocalType_                                                                                                                                                                                   func(*XsdGoPkgHasElems_inputsequencesampler_typeschema_Input_TinputLocalType_, bool) error
	TxsdGles2PipelineSettingsGroupChoicePolygonOffset                                                                                                                                                                                                         func(*TxsdGles2PipelineSettingsGroupChoicePolygonOffset, bool) error
	XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegl_pipeline_settings_groupschema_Alpha_TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparateSequenceAlpha_                                                                                     func(*XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegl_pipeline_settings_groupschema_Alpha_TxsdGlPipelineSettingsGroupChoiceBlendEquationSeparateSequenceAlpha_, bool) error
	XsdGoPkgHasElem_line_stipple_enablechoicegl_pipeline_settings_groupschema_LineStippleEnable_TxsdGlPipelineSettingsGroupChoiceLineStippleEnable_                                                                                                           func(*XsdGoPkgHasElem_line_stipple_enablechoicegl_pipeline_settings_groupschema_LineStippleEnable_TxsdGlPipelineSettingsGroupChoiceLineStippleEnable_, bool) error
	XsdGoPkgHasElems_skeletonsequenceinstance_controller_typeschema_Skeleton_XsdtAnyURI_                                                                                                                                                                      func(*XsdGoPkgHasElems_skeletonsequenceinstance_controller_typeschema_Skeleton_XsdtAnyURI_, bool) error
	XsdGoPkgHasElem_constantsequencegles_texcombiner_command_typeschema_Constant_TglesTextureConstantType_                                                                                                                                                    func(*XsdGoPkgHasElem_constantsequencegles_texcombiner_command_typeschema_Constant_TglesTextureConstantType_, bool) error
	XsdGoPkgHasElem_lockedsequencekinematics_axis_info_typeschema_Locked_TcommonBoolOrParamType_                                                                                                                                                              func(*XsdGoPkgHasElem_lockedsequencekinematics_axis_info_typeschema_Locked_TcommonBoolOrParamType_, bool) error
	XsdGoPkgHasElem_material_shininesschoicegles_pipeline_settings_groupschema_MaterialShininess_TxsdGlesPipelineSettingsGroupChoiceMaterialShininess_                                                                                                        func(*XsdGoPkgHasElem_material_shininesschoicegles_pipeline_settings_groupschema_MaterialShininess_TxsdGlesPipelineSettingsGroupChoiceMaterialShininess_, bool) error
	XsdGoPkgHasElem_angular_velocitysequencetechnique_commonsequenceinstance_rigid_body_typeschema_AngularVelocity_Tfloat3Type_000000                                                                                                                         func(*XsdGoPkgHasElem_angular_velocitysequencetechnique_commonsequenceinstance_rigid_body_typeschema_AngularVelocity_Tfloat3Type_000000, bool) error
	TnurbsType                                                                                                                                                                                                                                                func(*TnurbsType, bool) error
	XsdGoPkgHasElems_library_animation_clipschoicesequenceCOLLADAschema_LibraryAnimationClips_TlibraryAnimationClipsType_                                                                                                                                     func(*XsdGoPkgHasElems_library_animation_clipschoicesequenceCOLLADAschema_LibraryAnimationClips_TlibraryAnimationClipsType_, bool) error
	TxsdGlPipelineSettingsGroupChoiceLogicOp                                                                                                                                                                                                                  func(*TxsdGlPipelineSettingsGroupChoiceLogicOp, bool) error
	TkinematicsTechniqueType                                                                                                                                                                                                                                  func(*TkinematicsTechniqueType, bool) error
	TfxAnnotateType                                                                                                                                                                                                                                           func(*TfxAnnotateType, bool) error
	TkinematicsConnectParamType                                                                                                                                                                                                                               func(*TkinematicsConnectParamType, bool) error
	XsdGoPkgHasElem_normalize_enablechoicegles_pipeline_settings_groupschema_NormalizeEnable_TxsdGlesPipelineSettingsGroupChoiceNormalizeEnable_                                                                                                              func(*XsdGoPkgHasElem_normalize_enablechoicegles_pipeline_settings_groupschema_NormalizeEnable_TxsdGlesPipelineSettingsGroupChoiceNormalizeEnable_, bool) error
	TxsdImageTypeSequenceChoiceCreate2DSequenceInitFrom                                                                                                                                                                                                       func(*TxsdImageTypeSequenceChoiceCreate2DSequenceInitFrom, bool) error
	XsdGoPkgHasElem_int4x3choicecg_param_groupschema_Int4X3_Tint4X3Type_                                                                                                                                                                                      func(*XsdGoPkgHasElem_int4x3choicecg_param_groupschema_Int4X3_Tint4X3Type_, bool) error
	XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegl_pipeline_settings_groupschema_SrcRgb_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcRgb_                                                                                         func(*XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegl_pipeline_settings_groupschema_SrcRgb_TxsdGlPipelineSettingsGroupChoiceBlendFuncSeparateSequenceSrcRgb_, bool) error
	XsdGoPkgHasElem_halfchoicecg_param_groupschema_Half_TfloatType_                                                                                                                                                                                           func(*XsdGoPkgHasElem_halfchoicecg_param_groupschema_Half_TfloatType_, bool) error
	XsdGoPkgHasElem_technique_commonsequencekinematics_typeschema_TechniqueCommon_TkinematicsTechniqueType_                                                                                                                                                   func(*XsdGoPkgHasElem_technique_commonsequencekinematics_typeschema_TechniqueCommon_TkinematicsTechniqueType_, bool) error
	XsdGoPkgHasElem_blend_funcchoicegl_pipeline_settings_groupschema_BlendFunc_TxsdGlPipelineSettingsGroupChoiceBlendFunc_                                                                                                                                    func(*XsdGoPkgHasElem_blend_funcchoicegl_pipeline_settings_groupschema_BlendFunc_TxsdGlPipelineSettingsGroupChoiceBlendFunc_, bool) error
	TfxSampler2DType                                                                                                                                                                                                                                          func(*TfxSampler2DType, bool) error
	XsdGoPkgHasElem_material_diffusechoicegles_pipeline_settings_groupschema_MaterialDiffuse_TxsdGlesPipelineSettingsGroupChoiceMaterialDiffuse_                                                                                                              func(*XsdGoPkgHasElem_material_diffusechoicegles_pipeline_settings_groupschema_MaterialDiffuse_TxsdGlesPipelineSettingsGroupChoiceMaterialDiffuse_, bool) error
	TfxCodeType                                                                                                                                                                                                                                               func(*TfxCodeType, bool) error
	XsdGoPkgHasElem_alpha_funcchoicegl_pipeline_settings_groupschema_AlphaFunc_TxsdGlPipelineSettingsGroupChoiceAlphaFunc_                                                                                                                                    func(*XsdGoPkgHasElem_alpha_funcchoicegl_pipeline_settings_groupschema_AlphaFunc_TxsdGlPipelineSettingsGroupChoiceAlphaFunc_, bool) error
	XsdGoPkgHasElems_bind_uniformsequenceshadersequenceprogramsequencecg_pass_typeschema_BindUniform_TxsdCgPassTypeSequenceProgramSequenceShaderSequenceBindUniform_                                                                                          func(*XsdGoPkgHasElems_bind_uniformsequenceshadersequenceprogramsequencecg_pass_typeschema_BindUniform_TxsdCgPassTypeSequenceProgramSequenceShaderSequenceBindUniform_, bool) error
	XsdGoPkgHasElem_destsequenceblend_funcchoicegles2_pipeline_settings_groupschema_Dest_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSequenceDest_                                                                                                           func(*XsdGoPkgHasElem_destsequenceblend_funcchoicegles2_pipeline_settings_groupschema_Dest_TxsdGles2PipelineSettingsGroupChoiceBlendFuncSequenceDest_, bool) error
	XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles2_pipeline_settings_groupschema_SampleAlphaToCoverageEnable_TxsdGles2PipelineSettingsGroupChoiceSampleAlphaToCoverageEnable_                                                                     func(*XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles2_pipeline_settings_groupschema_SampleAlphaToCoverageEnable_TxsdGles2PipelineSettingsGroupChoiceSampleAlphaToCoverageEnable_, bool) error
	XsdGoPkgHasElem_programsequencepasssequencetechniquesequenceprofile_glsl_typeschema_Program_TglslProgramType_                                                                                                                                             func(*XsdGoPkgHasElem_programsequencepasssequencetechniquesequenceprofile_glsl_typeschema_Program_TglslProgramType_, bool) error
	XsdGoPkgHasElem_color_maskchoicegles_pipeline_settings_groupschema_ColorMask_TxsdGlesPipelineSettingsGroupChoiceColorMask_                                                                                                                                func(*XsdGoPkgHasElem_color_maskchoicegles_pipeline_settings_groupschema_ColorMask_TxsdGlesPipelineSettingsGroupChoiceColorMask_, bool) error
	XsdGoPkgHasElem_toruschoicesequencesurface_typeschema_Torus_TtorusType_                                                                                                                                                                                   func(*XsdGoPkgHasElem_toruschoicesequencesurface_typeschema_Torus_TtorusType_, bool) error
	TxsdGlesPipelineSettingsGroupChoiceClipPlane                                                                                                                                                                                                              func(*TxsdGlesPipelineSettingsGroupChoiceClipPlane, bool) error
	TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceStates                                                                                                                                                                                            func(*TxsdProfileGlesTypeSequenceTechniqueSequencePassSequenceStates, bool) error
	TinstancePhysicsModelType                                                                                                                                                                                                                                 func(*TinstancePhysicsModelType, bool) error
	TxsdGlPipelineSettingsGroupChoiceTexture2D                                                                                                                                                                                                                func(*TxsdGlPipelineSettingsGroupChoiceTexture2D, bool) error
	XsdGoPkgHasElem_valuechoicetexture2Dchoicegl_pipeline_settings_groupschema_Value_TfxSampler2DType_                                                                                                                                                        func(*XsdGoPkgHasElem_valuechoicetexture2Dchoicegl_pipeline_settings_groupschema_Value_TfxSampler2DType_, bool) error
	XsdGoPkgHasElem_activesequencekinematics_axis_info_typeschema_Active_TcommonBoolOrParamType_                                                                                                                                                              func(*XsdGoPkgHasElem_activesequencekinematics_axis_info_typeschema_Active_TcommonBoolOrParamType_, bool) error
	TxsdGlPipelineSettingsGroupChoicePolygonModeSequenceMode                                                                                                                                                                                                  func(*TxsdGlPipelineSettingsGroupChoicePolygonModeSequenceMode, bool) error
	TformulaSetparamType                                                                                                                                                                                                                                      func(*TformulaSetparamType, bool) error
	XsdGoPkgHasElem_skinchoicesequencecontroller_typeschema_Skin_TskinType_                                                                                                                                                                                   func(*XsdGoPkgHasElem_skinchoicesequencecontroller_typeschema_Skin_TskinType_, bool) error
	TkinematicsModelType                                                                                                                                                                                                                                      func(*TkinematicsModelType, bool) error
	XsdGoPkgHasElem_depth_maskchoicegl_pipeline_settings_groupschema_DepthMask_TxsdGlPipelineSettingsGroupChoiceDepthMask_                                                                                                                                    func(*XsdGoPkgHasElem_depth_maskchoicegl_pipeline_settings_groupschema_DepthMask_TxsdGlPipelineSettingsGroupChoiceDepthMask_, bool) error
	XsdGoPkgHasElem_fog_endchoicegl_pipeline_settings_groupschema_FogEnd_TxsdGlPipelineSettingsGroupChoiceFogEnd_                                                                                                                                             func(*XsdGoPkgHasElem_fog_endchoicegl_pipeline_settings_groupschema_FogEnd_TxsdGlPipelineSettingsGroupChoiceFogEnd_, bool) error
	XsdGoPkgHasElems_orientsequencecurve_typeschema_Orient_TorientType_                                                                                                                                                                                       func(*XsdGoPkgHasElems_orientsequencecurve_typeschema_Orient_TorientType_, bool) error
	XsdGoPkgHasElems_instance_kinematics_modelsequencekinematics_typeschema_InstanceKinematicsModel_TinstanceKinematicsModelType_                                                                                                                             func(*XsdGoPkgHasElems_instance_kinematics_modelsequencekinematics_typeschema_InstanceKinematicsModel_TinstanceKinematicsModelType_, bool) error
	XsdGoPkgHasElem_specularsequenceblinnchoicesequencetechniquesequenceprofile_common_typeschema_Specular_TfxCommonColorOrTextureType_                                                                                                                       func(*XsdGoPkgHasElem_specularsequenceblinnchoicesequencetechniquesequenceprofile_common_typeschema_Specular_TfxCommonColorOrTextureType_, bool) error
	TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceEvaluate                                                                                                                                                                                          func(*TxsdProfileGlslTypeSequenceTechniqueSequencePassSequenceEvaluate, bool) error
	XsdGoPkgHasElem_ymagchoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Ymag_TtargetableFloatType_                                                                                                      func(*XsdGoPkgHasElem_ymagchoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecamera_typeschema_Ymag_TtargetableFloatType_, bool) error
	XsdGoPkgHasElem_motionchoicesequencearticulated_system_typeschema_Motion_TmotionType_                                                                                                                                                                     func(*XsdGoPkgHasElem_motionchoicesequencearticulated_system_typeschema_Motion_TmotionType_, bool) error
	TxsdGles2PipelineSettingsGroupChoiceDepthRange                                                                                                                                                                                                            func(*TxsdGles2PipelineSettingsGroupChoiceDepthRange, bool) error
	XsdGoPkgHasElem_fog_startchoicegles_pipeline_settings_groupschema_FogStart_TxsdGlesPipelineSettingsGroupChoiceFogStart_                                                                                                                                   func(*XsdGoPkgHasElem_fog_startchoicegles_pipeline_settings_groupschema_FogStart_TxsdGlesPipelineSettingsGroupChoiceFogStart_, bool) error
	XsdGoPkgHasElem_jerksequencemotion_effector_info_typeschema_Jerk_TcommonFloat2OrParamType_                                                                                                                                                                func(*XsdGoPkgHasElem_jerksequencemotion_effector_info_typeschema_Jerk_TcommonFloat2OrParamType_, bool) error
	TsphereType                                                                                                                                                                                                                                               func(*TsphereType, bool) error
	XsdGoPkgHasElem_texture1Dchoicegl_pipeline_settings_groupschema_Texture1D_TxsdGlPipelineSettingsGroupChoiceTexture1D_                                                                                                                                     func(*XsdGoPkgHasElem_texture1Dchoicegl_pipeline_settings_groupschema_Texture1D_TxsdGlPipelineSettingsGroupChoiceTexture1D_, bool) error
	TxsdGlPipelineSettingsGroupChoiceStencilOp                                                                                                                                                                                                                func(*TxsdGlPipelineSettingsGroupChoiceStencilOp, bool) error
	TxsdGlPipelineSettingsGroupChoiceAlphaFunc                                                                                                                                                                                                                func(*TxsdGlPipelineSettingsGroupChoiceAlphaFunc, bool) error
	XsdGoPkgHasElem_SIDREF_arraychoicesequencesource_typeschema_SidrefArray_TsidrefArrayType_                                                                                                                                                                 func(*XsdGoPkgHasElem_SIDREF_arraychoicesequencesource_typeschema_SidrefArray_TsidrefArrayType_, bool) error
	TsidrefArrayType                                                                                                                                                                                                                                          func(*TsidrefArrayType, bool) error
	TxsdGlesPipelineSettingsGroupChoiceLightPosition                                                                                                                                                                                                          func(*TxsdGlesPipelineSettingsGroupChoiceLightPosition, bool) error
	XsdGoPkgHasElem_minsequencekinematics_limits_typeschema_Min_TcommonFloatOrParamType_                                                                                                                                                                      func(*XsdGoPkgHasElem_minsequencekinematics_limits_typeschema_Min_TcommonFloatOrParamType_, bool) error
	XsdGoPkgHasElems_hsequencephchoicesequencepolygons_typeschema_H_TlistOfUintsType_                                                                                                                                                                         func(*XsdGoPkgHasElems_hsequencephchoicesequencepolygons_typeschema_H_TlistOfUintsType_, bool) error
	XsdGoPkgHasElem_sample_coveragechoicegles2_pipeline_settings_groupschema_SampleCoverage_TxsdGles2PipelineSettingsGroupChoiceSampleCoverage_                                                                                                               func(*XsdGoPkgHasElem_sample_coveragechoicegles2_pipeline_settings_groupschema_SampleCoverage_TxsdGles2PipelineSettingsGroupChoiceSampleCoverage_, bool) error
	XsdGoPkgHasElem_textureRECT_enablechoicegl_pipeline_settings_groupschema_TextureRECTEnable_TxsdGlPipelineSettingsGroupChoiceTextureRECTEnable_                                                                                                            func(*XsdGoPkgHasElem_textureRECT_enablechoicegl_pipeline_settings_groupschema_TextureRECTEnable_TxsdGlPipelineSettingsGroupChoiceTextureRECTEnable_, bool) error
	XsdGoPkgHasElem_depth_boundschoicegl_pipeline_settings_groupschema_DepthBounds_TxsdGlPipelineSettingsGroupChoiceDepthBounds_                                                                                                                              func(*XsdGoPkgHasElem_depth_boundschoicegl_pipeline_settings_groupschema_DepthBounds_TxsdGlPipelineSettingsGroupChoiceDepthBounds_, bool) error
}

//	A convenience interface that declares a type conversion to TlistOfSidrefsType.
type ToTlistOfSidrefsType interface {
	ToTlistOfSidrefsType() TlistOfSidrefsType
}

//	A convenience interface that declares a type conversion to TfloatType.
type ToTfloatType interface {
	ToTfloatType() TfloatType
}

//	A convenience interface that declares a type conversion to TtargetableFloat3Type.
type ToTtargetableFloat3Type interface {
	ToTtargetableFloat3Type() TtargetableFloat3Type
}

//	A convenience interface that declares a type conversion to TlistOfNamesType.
type ToTlistOfNamesType interface {
	ToTlistOfNamesType() TlistOfNamesType
}

//	A convenience interface that declares a type conversion to TlistOfIntsType.
type ToTlistOfIntsType interface {
	ToTlistOfIntsType() TlistOfIntsType
}

//	A convenience interface that declares a type conversion to Tfloat4Type.
type ToTfloat4Type interface {
	ToTfloat4Type() Tfloat4Type
}

//	A convenience interface that declares a type conversion to TlistOfHexBinaryType.
type ToTlistOfHexBinaryType interface {
	ToTlistOfHexBinaryType() TlistOfHexBinaryType
}

//	A convenience interface that declares a type conversion to TlistOfBoolsType.
type ToTlistOfBoolsType interface {
	ToTlistOfBoolsType() TlistOfBoolsType
}

//	A convenience interface that declares a type conversion to Tfloat7Type.
type ToTfloat7Type interface {
	ToTfloat7Type() Tfloat7Type
}

//	A convenience interface that declares a type conversion to TlistOfUintsType.
type ToTlistOfUintsType interface {
	ToTlistOfUintsType() TlistOfUintsType
}

//	A convenience interface that declares a type conversion to Tfloat3Type.
type ToTfloat3Type interface {
	ToTfloat3Type() Tfloat3Type
}

//	A convenience interface that declares a type conversion to TtargetableFloat4Type.
type ToTtargetableFloat4Type interface {
	ToTtargetableFloat4Type() TtargetableFloat4Type
}

//	A convenience interface that declares a type conversion to TfxColorType.
type ToTfxColorType interface {
	ToTfxColorType() TfxColorType
}

//	A convenience interface that declares a type conversion to TlistOfTokensType.
type ToTlistOfTokensType interface {
	ToTlistOfTokensType() TlistOfTokensType
}

//	A convenience interface that declares a type conversion to Tfloat4X4Type.
type ToTfloat4X4Type interface {
	ToTfloat4X4Type() Tfloat4X4Type
}

//	A convenience interface that declares a type conversion to TlistOfFloatsType.
type ToTlistOfFloatsType interface {
	ToTlistOfFloatsType() TlistOfFloatsType
}

//	A convenience interface that declares a type conversion to Tfloat3X3Type.
type ToTfloat3X3Type interface {
	ToTfloat3X3Type() Tfloat3X3Type
}
