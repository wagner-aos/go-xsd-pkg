//	Auto-generated by the "go-xsd" package located at:
//		github.com/wagner-aos/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		khronos.org/files/collada_schema_1_4
package go_Collada14

//	COLLADA Schema
//	Version 1.4.1 (June 23, 2006)
//	Copyright (C) 2005, 2006 The Khronos Group Inc., Sony Computer Entertainment Inc.
//	All Rights Reserved.
//	Khronos is a trademark of The Khronos Group Inc.
//	COLLADA is a trademark of Sony Computer Entertainment Inc. used by permission by Khronos.
//	Note that this software document is distributed on an "AS IS" basis, with ALL EXPRESS AND
//	IMPLIED WARRANTIES AND CONDITIONS DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED
//	WARRANTIES AND CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A PARTICULAR
//	PURPOSE, AND NON-INFRINGEMENT.

import (
	xml "github.com/wagner-aos/go-xsd-pkg/www.w3.org/2001/03/xml.xsd_go"
	xsdt "github.com/wagner-aos/go-xsd/types"
)

//	The COLLADA element declares the root of the document that comprises some of the content
//	in the COLLADA schema.
//	The library_lights element declares a module of light elements.
//	The extra element declares additional information regarding its parent element.
//	The name attribute is the text string name of this element. Optional attribute.
type XsdGoPkgHasAttr_Name_XsdtNCName_ struct {
	//	The name attribute is the text string name of this element. Optional attribute.
	Name xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema name,attr"`
}

//	The technique element declares the information used to process some portion of the content. Each
//	technique conforms to an associated profile. Techniques generally act as a “switch”. If more than
//	one is present for a particular portion of content, on import, one or the other is picked, but
//	usually not both. Selection should be based on which profile the importing application can support.
//	Techniques contain application data and programs, making them assets that can be managed as a unit.
//	The profile attribute indicates the type of profile. This is a vendor defined character
//	string that indicates the platform or capability target for the technique. Required attribute.
type XsdGoPkgHasAttr_Profile_XsdtNmtoken_ struct {
	//	The profile attribute indicates the type of profile. This is a vendor defined character
	//	string that indicates the platform or capability target for the technique. Required attribute.
	Profile xsdt.Nmtoken `xml:"http://www.collada.org/2005/11/COLLADASchema profile,attr"`
}

type TxsdTechnique struct {
	//	The profile attribute indicates the type of profile. This is a vendor defined character
	//	string that indicates the platform or capability target for the technique. Required attribute.
	XsdGoPkgHasAttr_Profile_XsdtNmtoken_
}

//	If the WalkHandlers.TxsdTechnique function is not nil (ie. was set by outside code), calls it with this TxsdTechnique instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TxsdTechnique instance.
func (me *TxsdTechnique) Walk() (err error) {
	if fn := WalkHandlers.TxsdTechnique; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Technique struct {
	//	The technique element declares the information used to process some portion of the content. Each
	//	technique conforms to an associated profile. Techniques generally act as a “switch”. If more than
	//	one is present for a particular portion of content, on import, one or the other is picked, but
	//	usually not both. Selection should be based on which profile the importing application can support.
	//	Techniques contain application data and programs, making them assets that can be managed as a unit.
	Techniques []*TxsdTechnique `xml:"http://www.collada.org/2005/11/COLLADASchema technique"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Technique function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Technique instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Technique instance.
func (me *XsdGoPkgHasElems_Technique) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Technique; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Techniques {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The type attribute indicates the type of the value data. This text string must be understood
//	by the application. Required attribute.
type XsdGoPkgHasAttr_Type_XsdtNmtoken_ struct {
	//	The type attribute indicates the type of the value data. This text string must be understood
	//	by the application. Required attribute.
	Type xsdt.Nmtoken `xml:"http://www.collada.org/2005/11/COLLADASchema type,attr"`
}

//	The asset element defines asset management information regarding its parent element.
//	The subject element contains a description of the topical subject of the parent element. The
//	subject element may appear zero or one time.
type XsdGoPkgHasElem_subjectsequenceassetschema_Subject_XsdtString_ struct {
	//	The subject element contains a description of the topical subject of the parent element. The
	//	subject element may appear zero or one time.
	Subject xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema subject"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_subjectsequenceassetschema_Subject_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_subjectsequenceassetschema_Subject_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_subjectsequenceassetschema_Subject_XsdtString_ instance.
func (me *XsdGoPkgHasElem_subjectsequenceassetschema_Subject_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_subjectsequenceassetschema_Subject_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The created element contains the date and time that the parent element was created and is
//	represented in an ISO 8601 format.  The created element may appear zero or one time.
type XsdGoPkgHasElem_createdsequenceassetschema_Created_XsdtDateTime_ struct {
	//	The created element contains the date and time that the parent element was created and is
	//	represented in an ISO 8601 format.  The created element may appear zero or one time.
	Created xsdt.DateTime `xml:"http://www.collada.org/2005/11/COLLADASchema created"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_createdsequenceassetschema_Created_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_createdsequenceassetschema_Created_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_createdsequenceassetschema_Created_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElem_createdsequenceassetschema_Created_XsdtDateTime_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_createdsequenceassetschema_Created_XsdtDateTime_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The unit element contains descriptive information about unit of measure. It has attributes for
//	the name of the unit and the measurement with respect to the meter. The unit element may appear
//	zero or one time.
//	The meter attribute specifies the measurement with respect to the meter. The default
//	value for the meter attribute is “1.0”.
type Tfloat xsdt.Double

//	Since Tfloat is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *Tfloat) Set(s string) { (*xsdt.Double)(me).Set(s) }

//	Returns a string representation of this Tfloat's current non-string scalar value.
func (me Tfloat) String() string { return xsdt.Double(me).String() }

//	This convenience method just performs a simple type conversion to Tfloat's alias type xsdt.Double.
func (me Tfloat) ToXsdtDouble() xsdt.Double { return xsdt.Double(me) }

type XsdGoPkgHasAttr_Meter_Tfloat_10 struct {
	//	The meter attribute specifies the measurement with respect to the meter. The default
	//	value for the meter attribute is “1.0”.
	Meter Tfloat `xml:"http://www.collada.org/2005/11/COLLADASchema meter,attr"`
}

//	Returns the default value for Meter -- 1.0
func (me XsdGoPkgHasAttr_Meter_Tfloat_10) MeterDefault() Tfloat { return Tfloat(1.0) }

//	The name attribute specifies the name of the unit. The default value for the name
//	attribute is “meter”.
type XsdGoPkgHasAttr_Name_XsdtNmtoken_Meter struct {
	//	The name attribute specifies the name of the unit. The default value for the name
	//	attribute is “meter”.
	Name xsdt.Nmtoken `xml:"http://www.collada.org/2005/11/COLLADASchema name,attr"`
}

//	Returns the default value for Name -- "meter"
func (me XsdGoPkgHasAttr_Name_XsdtNmtoken_Meter) NameDefault() xsdt.Nmtoken {
	return xsdt.Nmtoken("meter")
}

type TxsdAssetSequenceUnit struct {
	//	The meter attribute specifies the measurement with respect to the meter. The default
	//	value for the meter attribute is “1.0”.
	XsdGoPkgHasAttr_Meter_Tfloat_10

	//	The name attribute specifies the name of the unit. The default value for the name
	//	attribute is “meter”.
	XsdGoPkgHasAttr_Name_XsdtNmtoken_Meter
}

//	If the WalkHandlers.TxsdAssetSequenceUnit function is not nil (ie. was set by outside code), calls it with this TxsdAssetSequenceUnit instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdAssetSequenceUnit instance.
func (me *TxsdAssetSequenceUnit) Walk() (err error) {
	if fn := WalkHandlers.TxsdAssetSequenceUnit; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_unitsequenceassetschema_Unit_TxsdAssetSequenceUnit_ struct {
	//	The unit element contains descriptive information about unit of measure. It has attributes for
	//	the name of the unit and the measurement with respect to the meter. The unit element may appear
	//	zero or one time.
	Unit *TxsdAssetSequenceUnit `xml:"http://www.collada.org/2005/11/COLLADASchema unit"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_unitsequenceassetschema_Unit_TxsdAssetSequenceUnit_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_unitsequenceassetschema_Unit_TxsdAssetSequenceUnit_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_unitsequenceassetschema_Unit_TxsdAssetSequenceUnit_ instance.
func (me *XsdGoPkgHasElem_unitsequenceassetschema_Unit_TxsdAssetSequenceUnit_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_unitsequenceassetschema_Unit_TxsdAssetSequenceUnit_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Unit.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The keywords element contains a list of words used as search criteria for the parent element.
//	The keywords element may appear zero or more times.
type XsdGoPkgHasElem_keywordssequenceassetschema_Keywords_XsdtString_ struct {
	//	The keywords element contains a list of words used as search criteria for the parent element.
	//	The keywords element may appear zero or more times.
	Keywords xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema keywords"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_keywordssequenceassetschema_Keywords_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_keywordssequenceassetschema_Keywords_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_keywordssequenceassetschema_Keywords_XsdtString_ instance.
func (me *XsdGoPkgHasElem_keywordssequenceassetschema_Keywords_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_keywordssequenceassetschema_Keywords_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The revision element contains the revision information for the parent element. The revision
//	element may appear zero or one time.
type XsdGoPkgHasElem_revisionsequenceassetschema_Revision_XsdtString_ struct {
	//	The revision element contains the revision information for the parent element. The revision
	//	element may appear zero or one time.
	Revision xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema revision"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_revisionsequenceassetschema_Revision_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_revisionsequenceassetschema_Revision_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_revisionsequenceassetschema_Revision_XsdtString_ instance.
func (me *XsdGoPkgHasElem_revisionsequenceassetschema_Revision_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_revisionsequenceassetschema_Revision_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The up_axis element contains descriptive information about coordinate system of the geometric
//	data. All coordinates are right-handed by definition. This element specifies which axis is
//	considered up. The default is the Y-axis. The up_axis element may appear zero or one time.
//	An enumerated type specifying the acceptable up-axis values.
type TUpAxisType xsdt.String

//	Returns true if the value of this enumerated TUpAxisType is "Y_UP".
func (me TUpAxisType) IsYUp() bool { return me == "Y_UP" }

//	Returns true if the value of this enumerated TUpAxisType is "Z_UP".
func (me TUpAxisType) IsZUp() bool { return me == "Z_UP" }

//	Since TUpAxisType is just a simple String type, this merely sets the current value from the specified string.
func (me *TUpAxisType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TUpAxisType is just a simple String type, this merely returns the current string value.
func (me TUpAxisType) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TUpAxisType is "X_UP".
func (me TUpAxisType) IsXUp() bool { return me == "X_UP" }

//	This convenience method just performs a simple type conversion to TUpAxisType's alias type xsdt.String.
func (me TUpAxisType) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_up_axissequenceassetschema_UpAxis_TUpAxisType_YUp struct {
	//	The up_axis element contains descriptive information about coordinate system of the geometric
	//	data. All coordinates are right-handed by definition. This element specifies which axis is
	//	considered up. The default is the Y-axis. The up_axis element may appear zero or one time.
	UpAxis TUpAxisType `xml:"http://www.collada.org/2005/11/COLLADASchema up_axis"`
}

//	Returns the default value for UpAxis -- "Y_UP"
func (me XsdGoPkgHasElem_up_axissequenceassetschema_UpAxis_TUpAxisType_YUp) UpAxisDefault() TUpAxisType {
	return TUpAxisType("Y_UP")
}

//	If the WalkHandlers.XsdGoPkgHasElem_up_axissequenceassetschema_UpAxis_TUpAxisType_YUp function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_up_axissequenceassetschema_UpAxis_TUpAxisType_YUp instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_up_axissequenceassetschema_UpAxis_TUpAxisType_YUp instance.
func (me *XsdGoPkgHasElem_up_axissequenceassetschema_UpAxis_TUpAxisType_YUp) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_up_axissequenceassetschema_UpAxis_TUpAxisType_YUp; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The contributor element defines authoring information for asset management
//	The author element contains a string with the author's name.
//	There may be only one author element.
type XsdGoPkgHasElem_authorsequencecontributorsequenceassetschema_Author_XsdtString_ struct {
	//	The author element contains a string with the author's name.
	//	There may be only one author element.
	Author xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema author"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_authorsequencecontributorsequenceassetschema_Author_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_authorsequencecontributorsequenceassetschema_Author_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_authorsequencecontributorsequenceassetschema_Author_XsdtString_ instance.
func (me *XsdGoPkgHasElem_authorsequencecontributorsequenceassetschema_Author_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_authorsequencecontributorsequenceassetschema_Author_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The authoring_tool element contains a string with the authoring tool's name.
//	There may be only one authoring_tool element.
type XsdGoPkgHasElem_authoring_toolsequencecontributorsequenceassetschema_AuthoringTool_XsdtString_ struct {
	//	The authoring_tool element contains a string with the authoring tool's name.
	//	There may be only one authoring_tool element.
	AuthoringTool xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema authoring_tool"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_authoring_toolsequencecontributorsequenceassetschema_AuthoringTool_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_authoring_toolsequencecontributorsequenceassetschema_AuthoringTool_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_authoring_toolsequencecontributorsequenceassetschema_AuthoringTool_XsdtString_ instance.
func (me *XsdGoPkgHasElem_authoring_toolsequencecontributorsequenceassetschema_AuthoringTool_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_authoring_toolsequencecontributorsequenceassetschema_AuthoringTool_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The copyright element contains a string with copyright information.
//	There may be only one copyright element.
type XsdGoPkgHasElem_copyrightsequencecontributorsequenceassetschema_Copyright_XsdtString_ struct {
	//	The copyright element contains a string with copyright information.
	//	There may be only one copyright element.
	Copyright xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema copyright"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_copyrightsequencecontributorsequenceassetschema_Copyright_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_copyrightsequencecontributorsequenceassetschema_Copyright_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_copyrightsequencecontributorsequenceassetschema_Copyright_XsdtString_ instance.
func (me *XsdGoPkgHasElem_copyrightsequencecontributorsequenceassetschema_Copyright_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_copyrightsequencecontributorsequenceassetschema_Copyright_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The source_data element contains a URI reference to the source data used for this asset.
//	There may be only one source_data element.
type XsdGoPkgHasElem_source_datasequencecontributorsequenceassetschema_SourceData_XsdtAnyURI_ struct {
	//	The source_data element contains a URI reference to the source data used for this asset.
	//	There may be only one source_data element.
	SourceData xsdt.AnyURI `xml:"http://www.collada.org/2005/11/COLLADASchema source_data"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_source_datasequencecontributorsequenceassetschema_SourceData_XsdtAnyURI_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_source_datasequencecontributorsequenceassetschema_SourceData_XsdtAnyURI_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_source_datasequencecontributorsequenceassetschema_SourceData_XsdtAnyURI_ instance.
func (me *XsdGoPkgHasElem_source_datasequencecontributorsequenceassetschema_SourceData_XsdtAnyURI_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_source_datasequencecontributorsequenceassetschema_SourceData_XsdtAnyURI_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The comments element contains a string with comments from this contributor.
//	There may be only one comments element.
type XsdGoPkgHasElem_commentssequencecontributorsequenceassetschema_Comments_XsdtString_ struct {
	//	The comments element contains a string with comments from this contributor.
	//	There may be only one comments element.
	Comments xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema comments"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_commentssequencecontributorsequenceassetschema_Comments_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_commentssequencecontributorsequenceassetschema_Comments_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_commentssequencecontributorsequenceassetschema_Comments_XsdtString_ instance.
func (me *XsdGoPkgHasElem_commentssequencecontributorsequenceassetschema_Comments_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_commentssequencecontributorsequenceassetschema_Comments_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAssetSequenceContributor struct {
	//	The comments element contains a string with comments from this contributor.
	//	There may be only one comments element.
	XsdGoPkgHasElem_commentssequencecontributorsequenceassetschema_Comments_XsdtString_

	//	The author element contains a string with the author's name.
	//	There may be only one author element.
	XsdGoPkgHasElem_authorsequencecontributorsequenceassetschema_Author_XsdtString_

	//	The authoring_tool element contains a string with the authoring tool's name.
	//	There may be only one authoring_tool element.
	XsdGoPkgHasElem_authoring_toolsequencecontributorsequenceassetschema_AuthoringTool_XsdtString_

	//	The copyright element contains a string with copyright information.
	//	There may be only one copyright element.
	XsdGoPkgHasElem_copyrightsequencecontributorsequenceassetschema_Copyright_XsdtString_

	//	The source_data element contains a URI reference to the source data used for this asset.
	//	There may be only one source_data element.
	XsdGoPkgHasElem_source_datasequencecontributorsequenceassetschema_SourceData_XsdtAnyURI_
}

//	If the WalkHandlers.TxsdAssetSequenceContributor function is not nil (ie. was set by outside code), calls it with this TxsdAssetSequenceContributor instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TxsdAssetSequenceContributor instance.
func (me *TxsdAssetSequenceContributor) Walk() (err error) {
	if fn := WalkHandlers.TxsdAssetSequenceContributor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_authoring_toolsequencecontributorsequenceassetschema_AuthoringTool_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_copyrightsequencecontributorsequenceassetschema_Copyright_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_source_datasequencecontributorsequenceassetschema_SourceData_XsdtAnyURI_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_commentssequencecontributorsequenceassetschema_Comments_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_authorsequencecontributorsequenceassetschema_Author_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_contributorsequenceassetschema_Contributor_TxsdAssetSequenceContributor_ struct {
	//	The contributor element defines authoring information for asset management
	Contributors []*TxsdAssetSequenceContributor `xml:"http://www.collada.org/2005/11/COLLADASchema contributor"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_contributorsequenceassetschema_Contributor_TxsdAssetSequenceContributor_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_contributorsequenceassetschema_Contributor_TxsdAssetSequenceContributor_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_contributorsequenceassetschema_Contributor_TxsdAssetSequenceContributor_ instance.
func (me *XsdGoPkgHasElems_contributorsequenceassetschema_Contributor_TxsdAssetSequenceContributor_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_contributorsequenceassetschema_Contributor_TxsdAssetSequenceContributor_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Contributors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The modified element contains the date and time that the parent element was last modified and
//	represented in an ISO 8601 format. The modified element may appear zero or one time.
type XsdGoPkgHasElem_modifiedsequenceassetschema_Modified_XsdtDateTime_ struct {
	//	The modified element contains the date and time that the parent element was last modified and
	//	represented in an ISO 8601 format. The modified element may appear zero or one time.
	Modified xsdt.DateTime `xml:"http://www.collada.org/2005/11/COLLADASchema modified"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_modifiedsequenceassetschema_Modified_XsdtDateTime_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_modifiedsequenceassetschema_Modified_XsdtDateTime_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_modifiedsequenceassetschema_Modified_XsdtDateTime_ instance.
func (me *XsdGoPkgHasElem_modifiedsequenceassetschema_Modified_XsdtDateTime_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_modifiedsequenceassetschema_Modified_XsdtDateTime_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The title element contains the title information for the parent element. The title element may
//	appear zero or one time.
type XsdGoPkgHasElem_titlesequenceassetschema_Title_XsdtString_ struct {
	//	The title element contains the title information for the parent element. The title element may
	//	appear zero or one time.
	Title xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema title"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_titlesequenceassetschema_Title_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_titlesequenceassetschema_Title_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_titlesequenceassetschema_Title_XsdtString_ instance.
func (me *XsdGoPkgHasElem_titlesequenceassetschema_Title_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_titlesequenceassetschema_Title_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAsset struct {
	//	The subject element contains a description of the topical subject of the parent element. The
	//	subject element may appear zero or one time.
	XsdGoPkgHasElem_subjectsequenceassetschema_Subject_XsdtString_

	//	The created element contains the date and time that the parent element was created and is
	//	represented in an ISO 8601 format.  The created element may appear zero or one time.
	XsdGoPkgHasElem_createdsequenceassetschema_Created_XsdtDateTime_

	//	The unit element contains descriptive information about unit of measure. It has attributes for
	//	the name of the unit and the measurement with respect to the meter. The unit element may appear
	//	zero or one time.
	XsdGoPkgHasElem_unitsequenceassetschema_Unit_TxsdAssetSequenceUnit_

	//	The keywords element contains a list of words used as search criteria for the parent element.
	//	The keywords element may appear zero or more times.
	XsdGoPkgHasElem_keywordssequenceassetschema_Keywords_XsdtString_

	//	The revision element contains the revision information for the parent element. The revision
	//	element may appear zero or one time.
	XsdGoPkgHasElem_revisionsequenceassetschema_Revision_XsdtString_

	//	The up_axis element contains descriptive information about coordinate system of the geometric
	//	data. All coordinates are right-handed by definition. This element specifies which axis is
	//	considered up. The default is the Y-axis. The up_axis element may appear zero or one time.
	XsdGoPkgHasElem_up_axissequenceassetschema_UpAxis_TUpAxisType_YUp

	//	The contributor element defines authoring information for asset management
	XsdGoPkgHasElems_contributorsequenceassetschema_Contributor_TxsdAssetSequenceContributor_

	//	The modified element contains the date and time that the parent element was last modified and
	//	represented in an ISO 8601 format. The modified element may appear zero or one time.
	XsdGoPkgHasElem_modifiedsequenceassetschema_Modified_XsdtDateTime_

	//	The title element contains the title information for the parent element. The title element may
	//	appear zero or one time.
	XsdGoPkgHasElem_titlesequenceassetschema_Title_XsdtString_
}

//	If the WalkHandlers.TxsdAsset function is not nil (ie. was set by outside code), calls it with this TxsdAsset instance as the single argument. Then calls the Walk() method on 9/9 embed(s) and 0/0 field(s) belonging to this TxsdAsset instance.
func (me *TxsdAsset) Walk() (err error) {
	if fn := WalkHandlers.TxsdAsset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_titlesequenceassetschema_Title_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_subjectsequenceassetschema_Subject_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_createdsequenceassetschema_Created_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_unitsequenceassetschema_Unit_TxsdAssetSequenceUnit_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_keywordssequenceassetschema_Keywords_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_revisionsequenceassetschema_Revision_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_up_axissequenceassetschema_UpAxis_TUpAxisType_YUp.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_contributorsequenceassetschema_Contributor_TxsdAssetSequenceContributor_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_modifiedsequenceassetschema_Modified_XsdtDateTime_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Asset struct {
	//	The asset element defines asset management information regarding its parent element.
	Asset *TxsdAsset `xml:"http://www.collada.org/2005/11/COLLADASchema asset"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Asset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Asset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Asset instance.
func (me *XsdGoPkgHasElem_Asset) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Asset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The id attribute is a text string containing the unique identifier of this element. This value
//	must be unique within the instance document. Optional attribute.
type XsdGoPkgHasAttr_Id_XsdtId_ struct {
	//	The id attribute is a text string containing the unique identifier of this element. This value
	//	must be unique within the instance document. Optional attribute.
	Id xsdt.Id `xml:"http://www.collada.org/2005/11/COLLADASchema id,attr"`
}

type TxsdExtra struct {
	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	This element must contain at least one non-common profile technique.
	XsdGoPkgHasElems_Technique

	//	The type attribute indicates the type of the value data. This text string must be understood by
	//	the application. Optional attribute.
	XsdGoPkgHasAttr_Type_XsdtNmtoken_

	//	The extra element may contain an asset element.
	XsdGoPkgHasElem_Asset

	//	The id attribute is a text string containing the unique identifier of this element. This value
	//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_
}

//	If the WalkHandlers.TxsdExtra function is not nil (ie. was set by outside code), calls it with this TxsdExtra instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TxsdExtra instance.
func (me *TxsdExtra) Walk() (err error) {
	if fn := WalkHandlers.TxsdExtra; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Technique.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Extra struct {
	//	The extra element declares additional information regarding its parent element.
	Extras []*TxsdExtra `xml:"http://www.collada.org/2005/11/COLLADASchema extra"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Extra function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Extra instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Extra instance.
func (me *XsdGoPkgHasElems_Extra) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Extra; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Extras {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The light element declares a light source that illuminates the scene.
//	Light sources have many different properties and radiate light in many different patterns and
//	frequencies.
//	The technique_common element specifies the light information for the common profile which all
//	COLLADA implementations need to support.
//	The point element declares the parameters required to describe a point light source.  A point light
//	source radiates light in all directions from a known location in space. The intensity of a point
//	light source is attenuated as the distance to the light source increases. The position of the light
//	is defined by the transform of the node in which it is instantiated.
//	The constant_attenuation is used to calculate the total attenuation of this light given a distance.
//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
//	The TargetableFloat type is used to represent elements which contain a single float value which can
//	be targeted for animation.
//	The sid attribute is a text string value containing the sub-identifier of this element. This
//	value must be unique within the scope of the parent element. Optional attribute.
type XsdGoPkgHasAttr_Sid_XsdtNCName_ struct {
	//	The sid attribute is a text string value containing the sub-identifier of this element. This
	//	value must be unique within the scope of the parent element. Optional attribute.
	Sid xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema sid,attr"`
}

type TargetableFloat struct {
	XsdGoPkgValue Tfloat `xml:",chardata"`

	//	The sid attribute is a text string value containing the sub-identifier of this element. This
	//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_
}

//	If the WalkHandlers.TargetableFloat function is not nil (ie. was set by outside code), calls it with this TargetableFloat instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TargetableFloat instance.
func (me *TargetableFloat) Walk() (err error) {
	if fn := WalkHandlers.TargetableFloat; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the value of its XsdGoPkgValue field as a xsdt.Double (which Tfloat is just aliasing).
func (me *TargetableFloat) ToXsdtDouble() xsdt.Double { return me.XsdGoPkgValue.ToXsdtDouble() }

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TargetableFloat) ToTfloat() Tfloat { return me.XsdGoPkgValue }

type XsdGoPkgHasElem_constant_attenuationsequencepointchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10 struct {
	//	The constant_attenuation is used to calculate the total attenuation of this light given a distance.
	//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	ConstantAttenuation *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema constant_attenuation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_constant_attenuationsequencepointchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_constant_attenuationsequencepointchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_constant_attenuationsequencepointchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10 instance.
func (me *XsdGoPkgHasElem_constant_attenuationsequencepointchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_constant_attenuationsequencepointchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ConstantAttenuation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for ConstantAttenuation -- 1.0
func (me XsdGoPkgHasElem_constant_attenuationsequencepointchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10) ConstantAttenuationDefault() Tfloat {
	return Tfloat(1.0)
}

//	The color element contains three floating point numbers specifying the color of the light.
//	The color element must occur exactly once.
//	The TargetableFloat3 type is used to represent elements which contain a float3 value which can
//	be targeted for animation.
type TListOfFloats xsdt.String

//	TListOfFloats declares a String containing a whitespace-separated list of Tfloat values. This Values() method creates and returns a slice of all elements in that list, typed as xsdt.Double.
func (me TListOfFloats) ValuesXsdtDouble() (list []xsdt.Double) {
	svals := xsdt.ListValues(string(me))
	list = make([]xsdt.Double, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	This convenience method just performs a simple type conversion to TListOfFloats's alias type xsdt.String.
func (me TListOfFloats) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TListOfFloats declares a String containing a whitespace-separated list of Tfloat values. This Values() method creates and returns a slice of all elements in that list.
func (me TListOfFloats) Values() (list []Tfloat) {
	svals := xsdt.ListValues(string(me))
	list = make([]Tfloat, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	Since TListOfFloats is just a simple String type, this merely returns the current string value.
func (me TListOfFloats) String() string { return xsdt.String(me).String() }

//	Since TListOfFloats is just a simple String type, this merely sets the current value from the specified string.
func (me *TListOfFloats) Set(s string) { (*xsdt.String)(me).Set(s) }

type Tfloat3 TListOfFloats

//	This convenience method just performs a simple type conversion to Tfloat3's alias type TListOfFloats.
func (me Tfloat3) ToTListOfFloats() TListOfFloats { return TListOfFloats(me) }

//	Since Tfloat3 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat3) Set(s string) { (*TListOfFloats)(me).Set(s) }

//	Since Tfloat3 is just a simple String type, this merely returns the current string value.
func (me Tfloat3) String() string { return TListOfFloats(me).String() }

type TargetableFloat3 struct {
	XsdGoPkgValue Tfloat3 `xml:",chardata"`

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_
}

//	Returns the value of its XsdGoPkgValue field as a TListOfFloats (which Tfloat3 is just aliasing).
func (me *TargetableFloat3) ToTListOfFloats() TListOfFloats {
	return me.XsdGoPkgValue.ToTListOfFloats()
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TargetableFloat3) ToTfloat3() Tfloat3 { return me.XsdGoPkgValue }

//	If the WalkHandlers.TargetableFloat3 function is not nil (ie. was set by outside code), calls it with this TargetableFloat3 instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TargetableFloat3 instance.
func (me *TargetableFloat3) Walk() (err error) {
	if fn := WalkHandlers.TargetableFloat3; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the value of its XsdGoPkgValue field as a xsdt.String (which Tfloat3 is just aliasing).
func (me *TargetableFloat3) ToXsdtString() xsdt.String {
	return me.XsdGoPkgValue.ToTListOfFloats().ToXsdtString()
}

type XsdGoPkgHasElem_colorsequencepointchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_ struct {
	//	The color element contains three floating point numbers specifying the color of the light.
	//	The color element must occur exactly once.
	Color *TargetableFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema color"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_colorsequencepointchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_colorsequencepointchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_colorsequencepointchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_ instance.
func (me *XsdGoPkgHasElem_colorsequencepointchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_colorsequencepointchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Color.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The quadratic_attenuation is used to calculate the total attenuation of this light given a distance.
//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
type XsdGoPkgHasElem_quadratic_attenuationsequencepointchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00 struct {
	//	The quadratic_attenuation is used to calculate the total attenuation of this light given a distance.
	//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	QuadraticAttenuation *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema quadratic_attenuation"`
}

//	Returns the default value for QuadraticAttenuation -- 0.0
func (me XsdGoPkgHasElem_quadratic_attenuationsequencepointchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00) QuadraticAttenuationDefault() Tfloat {
	return Tfloat(0.0)
}

//	If the WalkHandlers.XsdGoPkgHasElem_quadratic_attenuationsequencepointchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_quadratic_attenuationsequencepointchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_quadratic_attenuationsequencepointchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00 instance.
func (me *XsdGoPkgHasElem_quadratic_attenuationsequencepointchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_quadratic_attenuationsequencepointchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.QuadraticAttenuation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The linear_attenuation is used to calculate the total attenuation of this light given a distance.
//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
type XsdGoPkgHasElem_linear_attenuationsequencepointchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00 struct {
	//	The linear_attenuation is used to calculate the total attenuation of this light given a distance.
	//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	LinearAttenuation *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema linear_attenuation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_linear_attenuationsequencepointchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_linear_attenuationsequencepointchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_linear_attenuationsequencepointchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00 instance.
func (me *XsdGoPkgHasElem_linear_attenuationsequencepointchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_linear_attenuationsequencepointchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LinearAttenuation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for LinearAttenuation -- 0.0
func (me XsdGoPkgHasElem_linear_attenuationsequencepointchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00) LinearAttenuationDefault() Tfloat {
	return Tfloat(0.0)
}

type TxsdLightSequenceTechniqueCommonChoicePoint struct {
	//	The quadratic_attenuation is used to calculate the total attenuation of this light given a distance.
	//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	XsdGoPkgHasElem_quadratic_attenuationsequencepointchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00

	//	The linear_attenuation is used to calculate the total attenuation of this light given a distance.
	//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	XsdGoPkgHasElem_linear_attenuationsequencepointchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00

	//	The constant_attenuation is used to calculate the total attenuation of this light given a distance.
	//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	XsdGoPkgHasElem_constant_attenuationsequencepointchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10

	//	The color element contains three floating point numbers specifying the color of the light.
	//	The color element must occur exactly once.
	XsdGoPkgHasElem_colorsequencepointchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_
}

//	If the WalkHandlers.TxsdLightSequenceTechniqueCommonChoicePoint function is not nil (ie. was set by outside code), calls it with this TxsdLightSequenceTechniqueCommonChoicePoint instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdLightSequenceTechniqueCommonChoicePoint instance.
func (me *TxsdLightSequenceTechniqueCommonChoicePoint) Walk() (err error) {
	if fn := WalkHandlers.TxsdLightSequenceTechniqueCommonChoicePoint; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_quadratic_attenuationsequencepointchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_linear_attenuationsequencepointchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_constant_attenuationsequencepointchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_colorsequencepointchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_pointchoicetechnique_commonsequencelightschema_Point_TxsdLightSequenceTechniqueCommonChoicePoint_ struct {
	//	The point element declares the parameters required to describe a point light source.  A point light
	//	source radiates light in all directions from a known location in space. The intensity of a point
	//	light source is attenuated as the distance to the light source increases. The position of the light
	//	is defined by the transform of the node in which it is instantiated.
	Point *TxsdLightSequenceTechniqueCommonChoicePoint `xml:"http://www.collada.org/2005/11/COLLADASchema point"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_pointchoicetechnique_commonsequencelightschema_Point_TxsdLightSequenceTechniqueCommonChoicePoint_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_pointchoicetechnique_commonsequencelightschema_Point_TxsdLightSequenceTechniqueCommonChoicePoint_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_pointchoicetechnique_commonsequencelightschema_Point_TxsdLightSequenceTechniqueCommonChoicePoint_ instance.
func (me *XsdGoPkgHasElem_pointchoicetechnique_commonsequencelightschema_Point_TxsdLightSequenceTechniqueCommonChoicePoint_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_pointchoicetechnique_commonsequencelightschema_Point_TxsdLightSequenceTechniqueCommonChoicePoint_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Point.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The spot element declares the parameters required to describe a spot light source.  A spot light
//	source radiates light in one direction from a known location in space. The light radiates from
//	the spot light source in a cone shape. The intensity of the light is attenuated as the radiation
//	angle increases away from the direction of the light source. The intensity of a spot light source
//	is also attenuated as the distance to the light source increases. The position of the light is
//	defined by the transform of the node in which it is instantiated. The light’s default direction
//	vector in local coordinates is [0,0,-1], pointing down the -Z axis. The actual direction of the
//	light is defined by the transform of the node where the light is instantiated.
//	The falloff_exponent is used to specify the amount of attenuation based on the direction of the light.
type XsdGoPkgHasElem_falloff_exponentsequencespotchoicetechnique_commonsequencelightschema_FalloffExponent_TargetableFloat_00 struct {
	//	The falloff_exponent is used to specify the amount of attenuation based on the direction of the light.
	FalloffExponent *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema falloff_exponent"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_falloff_exponentsequencespotchoicetechnique_commonsequencelightschema_FalloffExponent_TargetableFloat_00 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_falloff_exponentsequencespotchoicetechnique_commonsequencelightschema_FalloffExponent_TargetableFloat_00 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_falloff_exponentsequencespotchoicetechnique_commonsequencelightschema_FalloffExponent_TargetableFloat_00 instance.
func (me *XsdGoPkgHasElem_falloff_exponentsequencespotchoicetechnique_commonsequencelightschema_FalloffExponent_TargetableFloat_00) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_falloff_exponentsequencespotchoicetechnique_commonsequencelightschema_FalloffExponent_TargetableFloat_00; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FalloffExponent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for FalloffExponent -- 0.0
func (me XsdGoPkgHasElem_falloff_exponentsequencespotchoicetechnique_commonsequencelightschema_FalloffExponent_TargetableFloat_00) FalloffExponentDefault() Tfloat {
	return Tfloat(0.0)
}

//	The falloff_angle is used to specify the amount of attenuation based on the direction of the light.
type XsdGoPkgHasElem_falloff_anglesequencespotchoicetechnique_commonsequencelightschema_FalloffAngle_TargetableFloat_1800 struct {
	//	The falloff_angle is used to specify the amount of attenuation based on the direction of the light.
	FalloffAngle *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema falloff_angle"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_falloff_anglesequencespotchoicetechnique_commonsequencelightschema_FalloffAngle_TargetableFloat_1800 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_falloff_anglesequencespotchoicetechnique_commonsequencelightschema_FalloffAngle_TargetableFloat_1800 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_falloff_anglesequencespotchoicetechnique_commonsequencelightschema_FalloffAngle_TargetableFloat_1800 instance.
func (me *XsdGoPkgHasElem_falloff_anglesequencespotchoicetechnique_commonsequencelightschema_FalloffAngle_TargetableFloat_1800) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_falloff_anglesequencespotchoicetechnique_commonsequencelightschema_FalloffAngle_TargetableFloat_1800; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FalloffAngle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for FalloffAngle -- 180.0
func (me XsdGoPkgHasElem_falloff_anglesequencespotchoicetechnique_commonsequencelightschema_FalloffAngle_TargetableFloat_1800) FalloffAngleDefault() Tfloat {
	return Tfloat(180.0)
}

type TxsdLightSequenceTechniqueCommonChoiceSpot struct {
	//	The linear_attenuation is used to calculate the total attenuation of this light given a distance.
	//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	XsdGoPkgHasElem_linear_attenuationsequencepointchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00

	//	The falloff_angle is used to specify the amount of attenuation based on the direction of the light.
	XsdGoPkgHasElem_falloff_anglesequencespotchoicetechnique_commonsequencelightschema_FalloffAngle_TargetableFloat_1800

	//	The color element contains three floating point numbers specifying the color of the light.
	//	The color element must occur exactly once.
	XsdGoPkgHasElem_colorsequencepointchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_

	//	The quadratic_attenuation is used to calculate the total attenuation of this light given a distance.
	//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	XsdGoPkgHasElem_quadratic_attenuationsequencepointchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00

	//	The falloff_exponent is used to specify the amount of attenuation based on the direction of the light.
	XsdGoPkgHasElem_falloff_exponentsequencespotchoicetechnique_commonsequencelightschema_FalloffExponent_TargetableFloat_00

	//	The constant_attenuation is used to calculate the total attenuation of this light given a distance.
	//	The equation used is A = constant_attenuation + Dist*linear_attenuation + Dist^2*quadratic_attenuation.
	XsdGoPkgHasElem_constant_attenuationsequencepointchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10
}

//	If the WalkHandlers.TxsdLightSequenceTechniqueCommonChoiceSpot function is not nil (ie. was set by outside code), calls it with this TxsdLightSequenceTechniqueCommonChoiceSpot instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdLightSequenceTechniqueCommonChoiceSpot instance.
func (me *TxsdLightSequenceTechniqueCommonChoiceSpot) Walk() (err error) {
	if fn := WalkHandlers.TxsdLightSequenceTechniqueCommonChoiceSpot; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_colorsequencepointchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_quadratic_attenuationsequencepointchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_falloff_exponentsequencespotchoicetechnique_commonsequencelightschema_FalloffExponent_TargetableFloat_00.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_constant_attenuationsequencepointchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_linear_attenuationsequencepointchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_falloff_anglesequencespotchoicetechnique_commonsequencelightschema_FalloffAngle_TargetableFloat_1800.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_spotchoicetechnique_commonsequencelightschema_Spot_TxsdLightSequenceTechniqueCommonChoiceSpot_ struct {
	//	The spot element declares the parameters required to describe a spot light source.  A spot light
	//	source radiates light in one direction from a known location in space. The light radiates from
	//	the spot light source in a cone shape. The intensity of the light is attenuated as the radiation
	//	angle increases away from the direction of the light source. The intensity of a spot light source
	//	is also attenuated as the distance to the light source increases. The position of the light is
	//	defined by the transform of the node in which it is instantiated. The light’s default direction
	//	vector in local coordinates is [0,0,-1], pointing down the -Z axis. The actual direction of the
	//	light is defined by the transform of the node where the light is instantiated.
	Spot *TxsdLightSequenceTechniqueCommonChoiceSpot `xml:"http://www.collada.org/2005/11/COLLADASchema spot"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_spotchoicetechnique_commonsequencelightschema_Spot_TxsdLightSequenceTechniqueCommonChoiceSpot_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_spotchoicetechnique_commonsequencelightschema_Spot_TxsdLightSequenceTechniqueCommonChoiceSpot_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_spotchoicetechnique_commonsequencelightschema_Spot_TxsdLightSequenceTechniqueCommonChoiceSpot_ instance.
func (me *XsdGoPkgHasElem_spotchoicetechnique_commonsequencelightschema_Spot_TxsdLightSequenceTechniqueCommonChoiceSpot_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_spotchoicetechnique_commonsequencelightschema_Spot_TxsdLightSequenceTechniqueCommonChoiceSpot_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Spot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The ambient element declares the parameters required to describe an ambient light source.
//	An ambient light is one that lights everything evenly, regardless of location or orientation.
type TxsdLightSequenceTechniqueCommonChoiceAmbient struct {
	//	The color element contains three floating point numbers specifying the color of the light.
	//	The color element must occur exactly once.
	XsdGoPkgHasElem_colorsequencepointchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_
}

//	If the WalkHandlers.TxsdLightSequenceTechniqueCommonChoiceAmbient function is not nil (ie. was set by outside code), calls it with this TxsdLightSequenceTechniqueCommonChoiceAmbient instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdLightSequenceTechniqueCommonChoiceAmbient instance.
func (me *TxsdLightSequenceTechniqueCommonChoiceAmbient) Walk() (err error) {
	if fn := WalkHandlers.TxsdLightSequenceTechniqueCommonChoiceAmbient; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_colorsequencepointchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ambientchoicetechnique_commonsequencelightschema_Ambient_TxsdLightSequenceTechniqueCommonChoiceAmbient_ struct {
	//	The ambient element declares the parameters required to describe an ambient light source.
	//	An ambient light is one that lights everything evenly, regardless of location or orientation.
	Ambient *TxsdLightSequenceTechniqueCommonChoiceAmbient `xml:"http://www.collada.org/2005/11/COLLADASchema ambient"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ambientchoicetechnique_commonsequencelightschema_Ambient_TxsdLightSequenceTechniqueCommonChoiceAmbient_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ambientchoicetechnique_commonsequencelightschema_Ambient_TxsdLightSequenceTechniqueCommonChoiceAmbient_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ambientchoicetechnique_commonsequencelightschema_Ambient_TxsdLightSequenceTechniqueCommonChoiceAmbient_ instance.
func (me *XsdGoPkgHasElem_ambientchoicetechnique_commonsequencelightschema_Ambient_TxsdLightSequenceTechniqueCommonChoiceAmbient_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ambientchoicetechnique_commonsequencelightschema_Ambient_TxsdLightSequenceTechniqueCommonChoiceAmbient_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ambient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The directional element declares the parameters required to describe a directional light source.
//	A directional light is one that lights everything from the same direction, regardless of location.
//	The light’s default direction vector in local coordinates is [0,0,-1], pointing down the -Z axis.
//	The actual direction of the light is defined by the transform of the node where the light is
//	instantiated.
type TxsdLightSequenceTechniqueCommonChoiceDirectional struct {
	//	The color element contains three floating point numbers specifying the color of the light.
	//	The color element must occur exactly once.
	XsdGoPkgHasElem_colorsequencepointchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_
}

//	If the WalkHandlers.TxsdLightSequenceTechniqueCommonChoiceDirectional function is not nil (ie. was set by outside code), calls it with this TxsdLightSequenceTechniqueCommonChoiceDirectional instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdLightSequenceTechniqueCommonChoiceDirectional instance.
func (me *TxsdLightSequenceTechniqueCommonChoiceDirectional) Walk() (err error) {
	if fn := WalkHandlers.TxsdLightSequenceTechniqueCommonChoiceDirectional; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_colorsequencepointchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_directionalchoicetechnique_commonsequencelightschema_Directional_TxsdLightSequenceTechniqueCommonChoiceDirectional_ struct {
	//	The directional element declares the parameters required to describe a directional light source.
	//	A directional light is one that lights everything from the same direction, regardless of location.
	//	The light’s default direction vector in local coordinates is [0,0,-1], pointing down the -Z axis.
	//	The actual direction of the light is defined by the transform of the node where the light is
	//	instantiated.
	Directional *TxsdLightSequenceTechniqueCommonChoiceDirectional `xml:"http://www.collada.org/2005/11/COLLADASchema directional"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_directionalchoicetechnique_commonsequencelightschema_Directional_TxsdLightSequenceTechniqueCommonChoiceDirectional_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_directionalchoicetechnique_commonsequencelightschema_Directional_TxsdLightSequenceTechniqueCommonChoiceDirectional_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_directionalchoicetechnique_commonsequencelightschema_Directional_TxsdLightSequenceTechniqueCommonChoiceDirectional_ instance.
func (me *XsdGoPkgHasElem_directionalchoicetechnique_commonsequencelightschema_Directional_TxsdLightSequenceTechniqueCommonChoiceDirectional_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_directionalchoicetechnique_commonsequencelightschema_Directional_TxsdLightSequenceTechniqueCommonChoiceDirectional_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Directional.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdLightSequenceTechniqueCommon struct {
	//	The spot element declares the parameters required to describe a spot light source.  A spot light
	//	source radiates light in one direction from a known location in space. The light radiates from
	//	the spot light source in a cone shape. The intensity of the light is attenuated as the radiation
	//	angle increases away from the direction of the light source. The intensity of a spot light source
	//	is also attenuated as the distance to the light source increases. The position of the light is
	//	defined by the transform of the node in which it is instantiated. The light’s default direction
	//	vector in local coordinates is [0,0,-1], pointing down the -Z axis. The actual direction of the
	//	light is defined by the transform of the node where the light is instantiated.
	XsdGoPkgHasElem_spotchoicetechnique_commonsequencelightschema_Spot_TxsdLightSequenceTechniqueCommonChoiceSpot_

	//	The ambient element declares the parameters required to describe an ambient light source.
	//	An ambient light is one that lights everything evenly, regardless of location or orientation.
	XsdGoPkgHasElem_ambientchoicetechnique_commonsequencelightschema_Ambient_TxsdLightSequenceTechniqueCommonChoiceAmbient_

	//	The directional element declares the parameters required to describe a directional light source.
	//	A directional light is one that lights everything from the same direction, regardless of location.
	//	The light’s default direction vector in local coordinates is [0,0,-1], pointing down the -Z axis.
	//	The actual direction of the light is defined by the transform of the node where the light is
	//	instantiated.
	XsdGoPkgHasElem_directionalchoicetechnique_commonsequencelightschema_Directional_TxsdLightSequenceTechniqueCommonChoiceDirectional_

	//	The point element declares the parameters required to describe a point light source.  A point light
	//	source radiates light in all directions from a known location in space. The intensity of a point
	//	light source is attenuated as the distance to the light source increases. The position of the light
	//	is defined by the transform of the node in which it is instantiated.
	XsdGoPkgHasElem_pointchoicetechnique_commonsequencelightschema_Point_TxsdLightSequenceTechniqueCommonChoicePoint_
}

//	If the WalkHandlers.TxsdLightSequenceTechniqueCommon function is not nil (ie. was set by outside code), calls it with this TxsdLightSequenceTechniqueCommon instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdLightSequenceTechniqueCommon instance.
func (me *TxsdLightSequenceTechniqueCommon) Walk() (err error) {
	if fn := WalkHandlers.TxsdLightSequenceTechniqueCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ambientchoicetechnique_commonsequencelightschema_Ambient_TxsdLightSequenceTechniqueCommonChoiceAmbient_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_directionalchoicetechnique_commonsequencelightschema_Directional_TxsdLightSequenceTechniqueCommonChoiceDirectional_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_pointchoicetechnique_commonsequencelightschema_Point_TxsdLightSequenceTechniqueCommonChoicePoint_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_spotchoicetechnique_commonsequencelightschema_Spot_TxsdLightSequenceTechniqueCommonChoiceSpot_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_technique_commonsequencelightschema_TechniqueCommon_TxsdLightSequenceTechniqueCommon_ struct {
	//	The technique_common element specifies the light information for the common profile which all
	//	COLLADA implementations need to support.
	TechniqueCommon *TxsdLightSequenceTechniqueCommon `xml:"http://www.collada.org/2005/11/COLLADASchema technique_common"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_technique_commonsequencelightschema_TechniqueCommon_TxsdLightSequenceTechniqueCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_technique_commonsequencelightschema_TechniqueCommon_TxsdLightSequenceTechniqueCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_technique_commonsequencelightschema_TechniqueCommon_TxsdLightSequenceTechniqueCommon_ instance.
func (me *XsdGoPkgHasElem_technique_commonsequencelightschema_TechniqueCommon_TxsdLightSequenceTechniqueCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_technique_commonsequencelightschema_TechniqueCommon_TxsdLightSequenceTechniqueCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TechniqueCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdLight struct {
	//	The light element may contain an asset element.
	XsdGoPkgHasElem_Asset

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	This element may contain any number of non-common profile techniques.
	XsdGoPkgHasElems_Technique

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The technique_common element specifies the light information for the common profile which all
	//	COLLADA implementations need to support.
	XsdGoPkgHasElem_technique_commonsequencelightschema_TechniqueCommon_TxsdLightSequenceTechniqueCommon_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra
}

//	If the WalkHandlers.TxsdLight function is not nil (ie. was set by outside code), calls it with this TxsdLight instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TxsdLight instance.
func (me *TxsdLight) Walk() (err error) {
	if fn := WalkHandlers.TxsdLight; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Technique.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_technique_commonsequencelightschema_TechniqueCommon_TxsdLightSequenceTechniqueCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Light struct {
	//	The light element declares a light source that illuminates the scene.
	//	Light sources have many different properties and radiate light in many different patterns and
	//	frequencies.
	Lights []*TxsdLight `xml:"http://www.collada.org/2005/11/COLLADASchema light"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Light function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Light instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Light instance.
func (me *XsdGoPkgHasElems_Light) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Light; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Lights {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdLibraryLights struct {
	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The library_lights element may contain an asset element.
	XsdGoPkgHasElem_Asset

	//	There must be at least one light element.
	XsdGoPkgHasElems_Light

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_
}

//	If the WalkHandlers.TxsdLibraryLights function is not nil (ie. was set by outside code), calls it with this TxsdLibraryLights instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdLibraryLights instance.
func (me *TxsdLibraryLights) Walk() (err error) {
	if fn := WalkHandlers.TxsdLibraryLights; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Light.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LibraryLights struct {
	//	The library_lights element declares a module of light elements.
	LightsLibraries []*TxsdLibraryLights `xml:"http://www.collada.org/2005/11/COLLADASchema library_lights"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LibraryLights function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LibraryLights instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LibraryLights instance.
func (me *XsdGoPkgHasElems_LibraryLights) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LibraryLights; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.LightsLibraries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The library_force_fields element declares a module of force_field elements.
//	A general container for force-fields. At the moment, it only has techniques and extra elements.
type TxsdForceField struct {
	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	This element must contain at least one non-common profile technique.
	XsdGoPkgHasElems_Technique

	//	The id attribute is a text string containing the unique identifier of this element. This value
	//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The force_field element may contain an asset element.
	XsdGoPkgHasElem_Asset

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra
}

//	If the WalkHandlers.TxsdForceField function is not nil (ie. was set by outside code), calls it with this TxsdForceField instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdForceField instance.
func (me *TxsdForceField) Walk() (err error) {
	if fn := WalkHandlers.TxsdForceField; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Technique.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ForceField struct {
	//	A general container for force-fields. At the moment, it only has techniques and extra elements.
	ForceFields []*TxsdForceField `xml:"http://www.collada.org/2005/11/COLLADASchema force_field"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ForceField function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ForceField instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ForceField instance.
func (me *XsdGoPkgHasElems_ForceField) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ForceField; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ForceFields {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdLibraryForceFields struct {
	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	There must be at least one force_field element.
	XsdGoPkgHasElems_ForceField

	//	The library_force_fields element may contain an asset element.
	XsdGoPkgHasElem_Asset

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_
}

//	If the WalkHandlers.TxsdLibraryForceFields function is not nil (ie. was set by outside code), calls it with this TxsdLibraryForceFields instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdLibraryForceFields instance.
func (me *TxsdLibraryForceFields) Walk() (err error) {
	if fn := WalkHandlers.TxsdLibraryForceFields; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_ForceField.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LibraryForceFields struct {
	//	The library_force_fields element declares a module of force_field elements.
	ForceFieldsLibraries []*TxsdLibraryForceFields `xml:"http://www.collada.org/2005/11/COLLADASchema library_force_fields"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LibraryForceFields function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LibraryForceFields instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LibraryForceFields instance.
func (me *XsdGoPkgHasElems_LibraryForceFields) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LibraryForceFields; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ForceFieldsLibraries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The library_images element declares a module of image elements.
//	The image element declares the storage for the graphical representation of an object.
//	The image element best describes raster image data, but can conceivably handle other
//	forms of imagery. The image elements allows for specifying an external image file with
//	the init_from element or embed image data with the data element.
//	The height attribute is an integer value that indicates the height of the image in pixel
//	units. Optional attribute.
type Tuint xsdt.UnsignedLong

//	This convenience method just performs a simple type conversion to Tuint's alias type xsdt.UnsignedLong.
func (me Tuint) ToXsdtUnsignedLong() xsdt.UnsignedLong { return xsdt.UnsignedLong(me) }

//	Since Tuint is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *Tuint) Set(s string) { (*xsdt.UnsignedLong)(me).Set(s) }

//	Returns a string representation of this Tuint's current non-string scalar value.
func (me Tuint) String() string { return xsdt.UnsignedLong(me).String() }

type XsdGoPkgHasAttr_Height_Tuint_ struct {
	//	The height attribute is an integer value that indicates the height of the image in pixel
	//	units. Optional attribute.
	Height Tuint `xml:"http://www.collada.org/2005/11/COLLADASchema height,attr"`
}

//	The format attribute is a text string value that indicates the image format. Optional attribute.
type XsdGoPkgHasAttr_Format_XsdtToken_ struct {
	//	The format attribute is a text string value that indicates the image format. Optional attribute.
	Format xsdt.Token `xml:"http://www.collada.org/2005/11/COLLADASchema format,attr"`
}

//	The depth attribute is an integer value that indicates the depth of the image in pixel units.
//	A 2-D image has a depth of 1, which is also the default value. Optional attribute.
type XsdGoPkgHasAttr_Depth_Tuint_1 struct {
	//	The depth attribute is an integer value that indicates the depth of the image in pixel units.
	//	A 2-D image has a depth of 1, which is also the default value. Optional attribute.
	Depth Tuint `xml:"http://www.collada.org/2005/11/COLLADASchema depth,attr"`
}

//	Returns the default value for Depth -- 1
func (me XsdGoPkgHasAttr_Depth_Tuint_1) DepthDefault() Tuint { return Tuint(1) }

//	The init_from element allows you to specify an external image file to use for the image element.
type XsdGoPkgHasElem_init_fromchoicesequenceimageschema_InitFrom_XsdtAnyURI_ struct {
	//	The init_from element allows you to specify an external image file to use for the image element.
	InitFrom xsdt.AnyURI `xml:"http://www.collada.org/2005/11/COLLADASchema init_from"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_init_fromchoicesequenceimageschema_InitFrom_XsdtAnyURI_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_init_fromchoicesequenceimageschema_InitFrom_XsdtAnyURI_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_init_fromchoicesequenceimageschema_InitFrom_XsdtAnyURI_ instance.
func (me *XsdGoPkgHasElem_init_fromchoicesequenceimageschema_InitFrom_XsdtAnyURI_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_init_fromchoicesequenceimageschema_InitFrom_XsdtAnyURI_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The data child element contains a sequence of hexadecimal encoded  binary octets representing
//	the embedded image data.
type TListOfHexBinary xsdt.String

//	TListOfHexBinary declares a String containing a whitespace-separated list of xsdt.HexBinary values. This Values() method creates and returns a slice of all elements in that list.
func (me TListOfHexBinary) Values() (list []xsdt.HexBinary) {
	svals := xsdt.ListValues(string(me))
	list = make([]xsdt.HexBinary, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	This convenience method just performs a simple type conversion to TListOfHexBinary's alias type xsdt.String.
func (me TListOfHexBinary) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TListOfHexBinary is just a simple String type, this merely sets the current value from the specified string.
func (me *TListOfHexBinary) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TListOfHexBinary is just a simple String type, this merely returns the current string value.
func (me TListOfHexBinary) String() string { return xsdt.String(me).String() }

type XsdGoPkgHasElem_datachoicesequenceimageschema_Data_TListOfHexBinary_ struct {
	//	The data child element contains a sequence of hexadecimal encoded  binary octets representing
	//	the embedded image data.
	Data TListOfHexBinary `xml:"http://www.collada.org/2005/11/COLLADASchema data"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_datachoicesequenceimageschema_Data_TListOfHexBinary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_datachoicesequenceimageschema_Data_TListOfHexBinary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_datachoicesequenceimageschema_Data_TListOfHexBinary_ instance.
func (me *XsdGoPkgHasElem_datachoicesequenceimageschema_Data_TListOfHexBinary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_datachoicesequenceimageschema_Data_TListOfHexBinary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The width attribute is an integer value that indicates the width of the image in pixel units.
//	Optional attribute.
type XsdGoPkgHasAttr_Width_Tuint_ struct {
	//	The width attribute is an integer value that indicates the width of the image in pixel units.
	//	Optional attribute.
	Width Tuint `xml:"http://www.collada.org/2005/11/COLLADASchema width,attr"`
}

type TxsdImage struct {
	//	The width attribute is an integer value that indicates the width of the image in pixel units.
	//	Optional attribute.
	XsdGoPkgHasAttr_Width_Tuint_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The image element may contain an asset element.
	XsdGoPkgHasElem_Asset

	//	The height attribute is an integer value that indicates the height of the image in pixel
	//	units. Optional attribute.
	XsdGoPkgHasAttr_Height_Tuint_

	//	The format attribute is a text string value that indicates the image format. Optional attribute.
	XsdGoPkgHasAttr_Format_XsdtToken_

	//	The id attribute is a text string containing the unique identifier of this element. This value
	//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The depth attribute is an integer value that indicates the depth of the image in pixel units.
	//	A 2-D image has a depth of 1, which is also the default value. Optional attribute.
	XsdGoPkgHasAttr_Depth_Tuint_1

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The init_from element allows you to specify an external image file to use for the image element.
	XsdGoPkgHasElem_init_fromchoicesequenceimageschema_InitFrom_XsdtAnyURI_

	//	The data child element contains a sequence of hexadecimal encoded  binary octets representing
	//	the embedded image data.
	XsdGoPkgHasElem_datachoicesequenceimageschema_Data_TListOfHexBinary_
}

//	If the WalkHandlers.TxsdImage function is not nil (ie. was set by outside code), calls it with this TxsdImage instance as the single argument. Then calls the Walk() method on 4/10 embed(s) and 0/0 field(s) belonging to this TxsdImage instance.
func (me *TxsdImage) Walk() (err error) {
	if fn := WalkHandlers.TxsdImage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_init_fromchoicesequenceimageschema_InitFrom_XsdtAnyURI_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_datachoicesequenceimageschema_Data_TListOfHexBinary_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Image struct {
	//	The image element declares the storage for the graphical representation of an object.
	//	The image element best describes raster image data, but can conceivably handle other
	//	forms of imagery. The image elements allows for specifying an external image file with
	//	the init_from element or embed image data with the data element.
	Images []*TxsdImage `xml:"http://www.collada.org/2005/11/COLLADASchema image"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Image function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Image instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Image instance.
func (me *XsdGoPkgHasElems_Image) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Image; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Images {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdLibraryImages struct {
	//	There must be at least one image element.
	XsdGoPkgHasElems_Image

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The library_images element may contain an asset element.
	XsdGoPkgHasElem_Asset

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_
}

//	If the WalkHandlers.TxsdLibraryImages function is not nil (ie. was set by outside code), calls it with this TxsdLibraryImages instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdLibraryImages instance.
func (me *TxsdLibraryImages) Walk() (err error) {
	if fn := WalkHandlers.TxsdLibraryImages; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Image.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LibraryImages struct {
	//	The library_images element declares a module of image elements.
	ImagesLibraries []*TxsdLibraryImages `xml:"http://www.collada.org/2005/11/COLLADASchema library_images"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LibraryImages function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LibraryImages instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LibraryImages instance.
func (me *XsdGoPkgHasElems_LibraryImages) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LibraryImages; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ImagesLibraries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The library_cameras element declares a module of camera elements.
//	The camera element declares a view into the scene hierarchy or scene graph. The camera contains
//	elements that describe the camera’s optics and imager.
//	Optics represents the apparatus on a camera that projects the image onto the image sensor.
//	The technique_common element specifies the optics information for the common profile
//	which all COLLADA implementations need to support.
//	The perspective element describes the optics of a perspective camera.
//	The zfar element contains a floating point number that describes the distance to the far
//	clipping plane. The zfar element must occur exactly once.
type XsdGoPkgHasElem_zfarsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Zfar_TargetableFloat_ struct {
	//	The zfar element contains a floating point number that describes the distance to the far
	//	clipping plane. The zfar element must occur exactly once.
	Zfar *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema zfar"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_zfarsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Zfar_TargetableFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_zfarsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Zfar_TargetableFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_zfarsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Zfar_TargetableFloat_ instance.
func (me *XsdGoPkgHasElem_zfarsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Zfar_TargetableFloat_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_zfarsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Zfar_TargetableFloat_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Zfar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The aspect_ratio element contains a floating point number describing the aspect ratio of the field
//	of view. If the aspect_ratio element is not present the aspect ratio is to be calculated from the
//	xfov or yfov elements and the current viewport.
type XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_ struct {
	//	The aspect_ratio element contains a floating point number describing the aspect ratio of the field
	//	of view. If the aspect_ratio element is not present the aspect ratio is to be calculated from the
	//	xfov or yfov elements and the current viewport.
	AspectRatio *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema aspect_ratio"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_ instance.
func (me *XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AspectRatio.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The znear element contains a floating point number that describes the distance to the near
//	clipping plane. The znear element must occur exactly once.
type XsdGoPkgHasElem_znearsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Znear_TargetableFloat_ struct {
	//	The znear element contains a floating point number that describes the distance to the near
	//	clipping plane. The znear element must occur exactly once.
	Znear *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema znear"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_znearsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Znear_TargetableFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_znearsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Znear_TargetableFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_znearsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Znear_TargetableFloat_ instance.
func (me *XsdGoPkgHasElem_znearsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Znear_TargetableFloat_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_znearsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Znear_TargetableFloat_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Znear.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The yfov element contains a floating point number describing the verticle field of view in degrees.
type XsdGoPkgHasElem_yfovchoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Yfov_TargetableFloat_ struct {
	//	The yfov element contains a floating point number describing the verticle field of view in degrees.
	Yfov *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema yfov"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_yfovchoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Yfov_TargetableFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_yfovchoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Yfov_TargetableFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_yfovchoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Yfov_TargetableFloat_ instance.
func (me *XsdGoPkgHasElem_yfovchoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Yfov_TargetableFloat_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_yfovchoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Yfov_TargetableFloat_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Yfov.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The xfov element contains a floating point number describing the horizontal field of view in degrees.
type XsdGoPkgHasElem_xfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Xfov_TargetableFloat_ struct {
	//	The xfov element contains a floating point number describing the horizontal field of view in degrees.
	Xfov *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema xfov"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_xfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Xfov_TargetableFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_xfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Xfov_TargetableFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_xfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Xfov_TargetableFloat_ instance.
func (me *XsdGoPkgHasElem_xfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Xfov_TargetableFloat_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_xfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Xfov_TargetableFloat_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xfov.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective struct {
	//	The yfov element contains a floating point number describing the verticle field of view in degrees.
	XsdGoPkgHasElem_yfovchoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Yfov_TargetableFloat_

	//	The xfov element contains a floating point number describing the horizontal field of view in degrees.
	XsdGoPkgHasElem_xfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Xfov_TargetableFloat_

	XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_

	//	The zfar element contains a floating point number that describes the distance to the far
	//	clipping plane. The zfar element must occur exactly once.
	XsdGoPkgHasElem_zfarsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Zfar_TargetableFloat_

	//	The znear element contains a floating point number that describes the distance to the near
	//	clipping plane. The znear element must occur exactly once.
	XsdGoPkgHasElem_znearsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Znear_TargetableFloat_
}

//	If the WalkHandlers.TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective function is not nil (ie. was set by outside code), calls it with this TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective instance as the single argument. Then calls the Walk() method on 5/7 embed(s) and 0/0 field(s) belonging to this TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective instance.
func (me *TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective) Walk() (err error) {
	if fn := WalkHandlers.TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_zfarsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Zfar_TargetableFloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_znearsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Znear_TargetableFloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_yfovchoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Yfov_TargetableFloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_xfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Xfov_TargetableFloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_perspectivechoicetechnique_commonsequenceopticssequencecameraschema_Perspective_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective_ struct {
	//	The perspective element describes the optics of a perspective camera.
	Perspective *TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective `xml:"http://www.collada.org/2005/11/COLLADASchema perspective"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_perspectivechoicetechnique_commonsequenceopticssequencecameraschema_Perspective_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_perspectivechoicetechnique_commonsequenceopticssequencecameraschema_Perspective_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_perspectivechoicetechnique_commonsequenceopticssequencecameraschema_Perspective_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective_ instance.
func (me *XsdGoPkgHasElem_perspectivechoicetechnique_commonsequenceopticssequencecameraschema_Perspective_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_perspectivechoicetechnique_commonsequenceopticssequencecameraschema_Perspective_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Perspective.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The orthographic element describes the field of view of an orthographic camera.
//	The ymag element contains a floating point number describing the vertical
//	magnification of the view.  It can also have a sid.
type XsdGoPkgHasElem_ymagchoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Ymag_TargetableFloat_ struct {
	//	The ymag element contains a floating point number describing the vertical
	//	magnification of the view.  It can also have a sid.
	Ymag *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema ymag"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ymagchoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Ymag_TargetableFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ymagchoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Ymag_TargetableFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ymagchoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Ymag_TargetableFloat_ instance.
func (me *XsdGoPkgHasElem_ymagchoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Ymag_TargetableFloat_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ymagchoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Ymag_TargetableFloat_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ymag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The xmag element contains a floating point number describing the horizontal
//	magnification of the view.
type XsdGoPkgHasElem_xmagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Xmag_TargetableFloat_ struct {
	//	The xmag element contains a floating point number describing the horizontal
	//	magnification of the view.
	Xmag *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema xmag"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_xmagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Xmag_TargetableFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_xmagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Xmag_TargetableFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_xmagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Xmag_TargetableFloat_ instance.
func (me *XsdGoPkgHasElem_xmagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Xmag_TargetableFloat_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_xmagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Xmag_TargetableFloat_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xmag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic struct {
	//	The xmag element contains a floating point number describing the horizontal
	//	magnification of the view.
	XsdGoPkgHasElem_xmagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Xmag_TargetableFloat_

	//	The ymag element contains a floating point number describing the vertical
	//	magnification of the view.  It can also have a sid.
	XsdGoPkgHasElem_ymagchoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Ymag_TargetableFloat_

	//	The zfar element contains a floating point number that describes the distance to the far
	//	clipping plane. The zfar element must occur exactly once.
	XsdGoPkgHasElem_zfarsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Zfar_TargetableFloat_

	//	The aspect_ratio element contains a floating point number describing the aspect ratio of
	//	the field of view. If the aspect_ratio element is not present the aspect ratio is to be
	//	calculated from the xmag or ymag elements and the current viewport.
	XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_

	//	The znear element contains a floating point number that describes the distance to the near
	//	clipping plane. The znear element must occur exactly once.
	XsdGoPkgHasElem_znearsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Znear_TargetableFloat_
}

//	If the WalkHandlers.TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic function is not nil (ie. was set by outside code), calls it with this TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic instance as the single argument. Then calls the Walk() method on 5/7 embed(s) and 0/0 field(s) belonging to this TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic instance.
func (me *TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic) Walk() (err error) {
	if fn := WalkHandlers.TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_xmagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Xmag_TargetableFloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ymagchoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Ymag_TargetableFloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_zfarsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Zfar_TargetableFloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_znearsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Znear_TargetableFloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_orthographicchoicetechnique_commonsequenceopticssequencecameraschema_Orthographic_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic_ struct {
	//	The orthographic element describes the field of view of an orthographic camera.
	Orthographic *TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic `xml:"http://www.collada.org/2005/11/COLLADASchema orthographic"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_orthographicchoicetechnique_commonsequenceopticssequencecameraschema_Orthographic_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_orthographicchoicetechnique_commonsequenceopticssequencecameraschema_Orthographic_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_orthographicchoicetechnique_commonsequenceopticssequencecameraschema_Orthographic_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic_ instance.
func (me *XsdGoPkgHasElem_orthographicchoicetechnique_commonsequenceopticssequencecameraschema_Orthographic_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_orthographicchoicetechnique_commonsequenceopticssequencecameraschema_Orthographic_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Orthographic.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCameraSequenceOpticsSequenceTechniqueCommon struct {
	//	The perspective element describes the optics of a perspective camera.
	XsdGoPkgHasElem_perspectivechoicetechnique_commonsequenceopticssequencecameraschema_Perspective_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective_

	//	The orthographic element describes the field of view of an orthographic camera.
	XsdGoPkgHasElem_orthographicchoicetechnique_commonsequenceopticssequencecameraschema_Orthographic_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic_
}

//	If the WalkHandlers.TxsdCameraSequenceOpticsSequenceTechniqueCommon function is not nil (ie. was set by outside code), calls it with this TxsdCameraSequenceOpticsSequenceTechniqueCommon instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdCameraSequenceOpticsSequenceTechniqueCommon instance.
func (me *TxsdCameraSequenceOpticsSequenceTechniqueCommon) Walk() (err error) {
	if fn := WalkHandlers.TxsdCameraSequenceOpticsSequenceTechniqueCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_perspectivechoicetechnique_commonsequenceopticssequencecameraschema_Perspective_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_orthographicchoicetechnique_commonsequenceopticssequencecameraschema_Orthographic_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_technique_commonsequenceopticssequencecameraschema_TechniqueCommon_TxsdCameraSequenceOpticsSequenceTechniqueCommon_ struct {
	//	The technique_common element specifies the optics information for the common profile
	//	which all COLLADA implementations need to support.
	TechniqueCommon *TxsdCameraSequenceOpticsSequenceTechniqueCommon `xml:"http://www.collada.org/2005/11/COLLADASchema technique_common"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_technique_commonsequenceopticssequencecameraschema_TechniqueCommon_TxsdCameraSequenceOpticsSequenceTechniqueCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_technique_commonsequenceopticssequencecameraschema_TechniqueCommon_TxsdCameraSequenceOpticsSequenceTechniqueCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_technique_commonsequenceopticssequencecameraschema_TechniqueCommon_TxsdCameraSequenceOpticsSequenceTechniqueCommon_ instance.
func (me *XsdGoPkgHasElem_technique_commonsequenceopticssequencecameraschema_TechniqueCommon_TxsdCameraSequenceOpticsSequenceTechniqueCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_technique_commonsequenceopticssequencecameraschema_TechniqueCommon_TxsdCameraSequenceOpticsSequenceTechniqueCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TechniqueCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCameraSequenceOptics struct {
	//	The technique_common element specifies the optics information for the common profile
	//	which all COLLADA implementations need to support.
	XsdGoPkgHasElem_technique_commonsequenceopticssequencecameraschema_TechniqueCommon_TxsdCameraSequenceOpticsSequenceTechniqueCommon_

	//	This element may contain any number of non-common profile techniques.
	XsdGoPkgHasElems_Technique

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra
}

//	If the WalkHandlers.TxsdCameraSequenceOptics function is not nil (ie. was set by outside code), calls it with this TxsdCameraSequenceOptics instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdCameraSequenceOptics instance.
func (me *TxsdCameraSequenceOptics) Walk() (err error) {
	if fn := WalkHandlers.TxsdCameraSequenceOptics; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_technique_commonsequenceopticssequencecameraschema_TechniqueCommon_TxsdCameraSequenceOpticsSequenceTechniqueCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Technique.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_opticssequencecameraschema_Optics_TxsdCameraSequenceOptics_ struct {
	//	Optics represents the apparatus on a camera that projects the image onto the image sensor.
	Optics *TxsdCameraSequenceOptics `xml:"http://www.collada.org/2005/11/COLLADASchema optics"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_opticssequencecameraschema_Optics_TxsdCameraSequenceOptics_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_opticssequencecameraschema_Optics_TxsdCameraSequenceOptics_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_opticssequencecameraschema_Optics_TxsdCameraSequenceOptics_ instance.
func (me *XsdGoPkgHasElem_opticssequencecameraschema_Optics_TxsdCameraSequenceOptics_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_opticssequencecameraschema_Optics_TxsdCameraSequenceOptics_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Optics.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Imagers represent the image sensor of a camera (for example film or CCD).
type TxsdCameraSequenceImager struct {
	//	This element may contain any number of non-common profile techniques.
	//	There is no common technique for imager.
	XsdGoPkgHasElems_Technique

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra
}

//	If the WalkHandlers.TxsdCameraSequenceImager function is not nil (ie. was set by outside code), calls it with this TxsdCameraSequenceImager instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdCameraSequenceImager instance.
func (me *TxsdCameraSequenceImager) Walk() (err error) {
	if fn := WalkHandlers.TxsdCameraSequenceImager; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Technique.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_imagersequencecameraschema_Imager_TxsdCameraSequenceImager_ struct {
	//	Imagers represent the image sensor of a camera (for example film or CCD).
	Imager *TxsdCameraSequenceImager `xml:"http://www.collada.org/2005/11/COLLADASchema imager"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_imagersequencecameraschema_Imager_TxsdCameraSequenceImager_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_imagersequencecameraschema_Imager_TxsdCameraSequenceImager_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_imagersequencecameraschema_Imager_TxsdCameraSequenceImager_ instance.
func (me *XsdGoPkgHasElem_imagersequencecameraschema_Imager_TxsdCameraSequenceImager_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_imagersequencecameraschema_Imager_TxsdCameraSequenceImager_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Imager.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCamera struct {
	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	Imagers represent the image sensor of a camera (for example film or CCD).
	XsdGoPkgHasElem_imagersequencecameraschema_Imager_TxsdCameraSequenceImager_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The camera element may contain an asset element.
	XsdGoPkgHasElem_Asset

	//	Optics represents the apparatus on a camera that projects the image onto the image sensor.
	XsdGoPkgHasElem_opticssequencecameraschema_Optics_TxsdCameraSequenceOptics_

	//	The id attribute is a text string containing the unique identifier of this element. This value
	//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_
}

//	If the WalkHandlers.TxsdCamera function is not nil (ie. was set by outside code), calls it with this TxsdCamera instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TxsdCamera instance.
func (me *TxsdCamera) Walk() (err error) {
	if fn := WalkHandlers.TxsdCamera; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_opticssequencecameraschema_Optics_TxsdCameraSequenceOptics_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_imagersequencecameraschema_Imager_TxsdCameraSequenceImager_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Camera struct {
	//	The camera element declares a view into the scene hierarchy or scene graph. The camera contains
	//	elements that describe the camera’s optics and imager.
	Cameras []*TxsdCamera `xml:"http://www.collada.org/2005/11/COLLADASchema camera"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Camera function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Camera instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Camera instance.
func (me *XsdGoPkgHasElems_Camera) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Camera; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Cameras {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdLibraryCameras struct {
	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	There must be at least one camera element.
	XsdGoPkgHasElems_Camera

	//	The library_cameras element may contain an asset element.
	XsdGoPkgHasElem_Asset

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra
}

//	If the WalkHandlers.TxsdLibraryCameras function is not nil (ie. was set by outside code), calls it with this TxsdLibraryCameras instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdLibraryCameras instance.
func (me *TxsdLibraryCameras) Walk() (err error) {
	if fn := WalkHandlers.TxsdLibraryCameras; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Camera.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LibraryCameras struct {
	//	The library_cameras element declares a module of camera elements.
	CamerasLibraries []*TxsdLibraryCameras `xml:"http://www.collada.org/2005/11/COLLADASchema library_cameras"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LibraryCameras function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LibraryCameras instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LibraryCameras instance.
func (me *XsdGoPkgHasElems_LibraryCameras) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LibraryCameras; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CamerasLibraries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The version attribute is the COLLADA schema revision with which the instance document
//	conforms. Required Attribute.
//	An enumerated type specifying the acceptable document versions.
type TVersionType xsdt.String

//	Returns true if the value of this enumerated TVersionType is "1.4.1".
func (me TVersionType) Is141() bool { return me == "1.4.1" }

//	Since TVersionType is just a simple String type, this merely sets the current value from the specified string.
func (me *TVersionType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TVersionType's alias type xsdt.String.
func (me TVersionType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TVersionType is just a simple String type, this merely returns the current string value.
func (me TVersionType) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TVersionType is "1.4.0".
func (me TVersionType) Is140() bool { return me == "1.4.0" }

type XsdGoPkgHasAttr_Version_TVersionType_ struct {
	//	The version attribute is the COLLADA schema revision with which the instance document
	//	conforms. Required Attribute.
	Version TVersionType `xml:"http://www.collada.org/2005/11/COLLADASchema version,attr"`
}

//	The library_physics_materials element declares a module of physics_material elements.
//	This element defines the physical properties of an object. It contains a technique/profile with
//	parameters. The COMMON profile defines the built-in names, such as static_friction.
//	The technique_common element specifies the physics_material information for the common profile
//	which all COLLADA implementations need to support.
//	The proportion of the kinetic energy preserved in the impact (typically ranges from 0.0 to 1.0)
type XsdGoPkgHasElem_restitutionsequencetechnique_commonsequencephysics_materialschema_Restitution_TargetableFloat_ struct {
	//	The proportion of the kinetic energy preserved in the impact (typically ranges from 0.0 to 1.0)
	Restitution *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema restitution"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_restitutionsequencetechnique_commonsequencephysics_materialschema_Restitution_TargetableFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_restitutionsequencetechnique_commonsequencephysics_materialschema_Restitution_TargetableFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_restitutionsequencetechnique_commonsequencephysics_materialschema_Restitution_TargetableFloat_ instance.
func (me *XsdGoPkgHasElem_restitutionsequencetechnique_commonsequencephysics_materialschema_Restitution_TargetableFloat_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_restitutionsequencetechnique_commonsequencephysics_materialschema_Restitution_TargetableFloat_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Restitution.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Static friction coefficient
type XsdGoPkgHasElem_static_frictionsequencetechnique_commonsequencephysics_materialschema_StaticFriction_TargetableFloat_ struct {
	//	Static friction coefficient
	StaticFriction *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema static_friction"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_static_frictionsequencetechnique_commonsequencephysics_materialschema_StaticFriction_TargetableFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_static_frictionsequencetechnique_commonsequencephysics_materialschema_StaticFriction_TargetableFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_static_frictionsequencetechnique_commonsequencephysics_materialschema_StaticFriction_TargetableFloat_ instance.
func (me *XsdGoPkgHasElem_static_frictionsequencetechnique_commonsequencephysics_materialschema_StaticFriction_TargetableFloat_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_static_frictionsequencetechnique_commonsequencephysics_materialschema_StaticFriction_TargetableFloat_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StaticFriction.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Dynamic friction coefficient
type XsdGoPkgHasElem_dynamic_frictionsequencetechnique_commonsequencephysics_materialschema_DynamicFriction_TargetableFloat_ struct {
	//	Dynamic friction coefficient
	DynamicFriction *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema dynamic_friction"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_dynamic_frictionsequencetechnique_commonsequencephysics_materialschema_DynamicFriction_TargetableFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_dynamic_frictionsequencetechnique_commonsequencephysics_materialschema_DynamicFriction_TargetableFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_dynamic_frictionsequencetechnique_commonsequencephysics_materialschema_DynamicFriction_TargetableFloat_ instance.
func (me *XsdGoPkgHasElem_dynamic_frictionsequencetechnique_commonsequencephysics_materialschema_DynamicFriction_TargetableFloat_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_dynamic_frictionsequencetechnique_commonsequencephysics_materialschema_DynamicFriction_TargetableFloat_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DynamicFriction.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPhysicsMaterialSequenceTechniqueCommon struct {
	//	The proportion of the kinetic energy preserved in the impact (typically ranges from 0.0 to 1.0)
	XsdGoPkgHasElem_restitutionsequencetechnique_commonsequencephysics_materialschema_Restitution_TargetableFloat_

	//	Static friction coefficient
	XsdGoPkgHasElem_static_frictionsequencetechnique_commonsequencephysics_materialschema_StaticFriction_TargetableFloat_

	//	Dynamic friction coefficient
	XsdGoPkgHasElem_dynamic_frictionsequencetechnique_commonsequencephysics_materialschema_DynamicFriction_TargetableFloat_
}

//	If the WalkHandlers.TxsdPhysicsMaterialSequenceTechniqueCommon function is not nil (ie. was set by outside code), calls it with this TxsdPhysicsMaterialSequenceTechniqueCommon instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdPhysicsMaterialSequenceTechniqueCommon instance.
func (me *TxsdPhysicsMaterialSequenceTechniqueCommon) Walk() (err error) {
	if fn := WalkHandlers.TxsdPhysicsMaterialSequenceTechniqueCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_restitutionsequencetechnique_commonsequencephysics_materialschema_Restitution_TargetableFloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_static_frictionsequencetechnique_commonsequencephysics_materialschema_StaticFriction_TargetableFloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_dynamic_frictionsequencetechnique_commonsequencephysics_materialschema_DynamicFriction_TargetableFloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_technique_commonsequencephysics_materialschema_TechniqueCommon_TxsdPhysicsMaterialSequenceTechniqueCommon_ struct {
	//	The technique_common element specifies the physics_material information for the common profile
	//	which all COLLADA implementations need to support.
	TechniqueCommon *TxsdPhysicsMaterialSequenceTechniqueCommon `xml:"http://www.collada.org/2005/11/COLLADASchema technique_common"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_technique_commonsequencephysics_materialschema_TechniqueCommon_TxsdPhysicsMaterialSequenceTechniqueCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_technique_commonsequencephysics_materialschema_TechniqueCommon_TxsdPhysicsMaterialSequenceTechniqueCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_technique_commonsequencephysics_materialschema_TechniqueCommon_TxsdPhysicsMaterialSequenceTechniqueCommon_ instance.
func (me *XsdGoPkgHasElem_technique_commonsequencephysics_materialschema_TechniqueCommon_TxsdPhysicsMaterialSequenceTechniqueCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_technique_commonsequencephysics_materialschema_TechniqueCommon_TxsdPhysicsMaterialSequenceTechniqueCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TechniqueCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPhysicsMaterial struct {
	//	This element may contain any number of non-common profile techniques.
	XsdGoPkgHasElems_Technique

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The technique_common element specifies the physics_material information for the common profile
	//	which all COLLADA implementations need to support.
	XsdGoPkgHasElem_technique_commonsequencephysics_materialschema_TechniqueCommon_TxsdPhysicsMaterialSequenceTechniqueCommon_

	//	The physics_material element may contain an asset element.
	XsdGoPkgHasElem_Asset
}

//	If the WalkHandlers.TxsdPhysicsMaterial function is not nil (ie. was set by outside code), calls it with this TxsdPhysicsMaterial instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TxsdPhysicsMaterial instance.
func (me *TxsdPhysicsMaterial) Walk() (err error) {
	if fn := WalkHandlers.TxsdPhysicsMaterial; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_technique_commonsequencephysics_materialschema_TechniqueCommon_TxsdPhysicsMaterialSequenceTechniqueCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Technique.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PhysicsMaterial struct {
	//	This element defines the physical properties of an object. It contains a technique/profile with
	//	parameters. The COMMON profile defines the built-in names, such as static_friction.
	PhysicsMaterials []*TxsdPhysicsMaterial `xml:"http://www.collada.org/2005/11/COLLADASchema physics_material"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PhysicsMaterial function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PhysicsMaterial instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PhysicsMaterial instance.
func (me *XsdGoPkgHasElems_PhysicsMaterial) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PhysicsMaterial; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PhysicsMaterials {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdLibraryPhysicsMaterials struct {
	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The library_physics_materials element may contain an asset element.
	XsdGoPkgHasElem_Asset

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	There must be at least one physics_material element.
	XsdGoPkgHasElems_PhysicsMaterial
}

//	If the WalkHandlers.TxsdLibraryPhysicsMaterials function is not nil (ie. was set by outside code), calls it with this TxsdLibraryPhysicsMaterials instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdLibraryPhysicsMaterials instance.
func (me *TxsdLibraryPhysicsMaterials) Walk() (err error) {
	if fn := WalkHandlers.TxsdLibraryPhysicsMaterials; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_PhysicsMaterial.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LibraryPhysicsMaterials struct {
	//	The library_physics_materials element declares a module of physics_material elements.
	PhysicsMaterialsLibraries []*TxsdLibraryPhysicsMaterials `xml:"http://www.collada.org/2005/11/COLLADASchema library_physics_materials"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LibraryPhysicsMaterials function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LibraryPhysicsMaterials instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LibraryPhysicsMaterials instance.
func (me *XsdGoPkgHasElems_LibraryPhysicsMaterials) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LibraryPhysicsMaterials; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PhysicsMaterialsLibraries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The library_visual_scenes element declares a module of visual_scene elements.
//	The visual_scene element declares the base of the visual_scene hierarchy or scene graph. The
//	scene contains elements that comprise much of the visual and transformational information
//	content as created by the authoring tools.
//	Nodes embody the hierarchical relationship of elements in the scene.
//	Matrix transformations embody mathematical changes to points within a coordinate systems or the
//	coordinate system itself. The matrix element contains a 4-by-4 matrix of floating-point values.
type Tfloat4X4 TListOfFloats

//	Since Tfloat4X4 is just a simple String type, this merely returns the current string value.
func (me Tfloat4X4) String() string { return TListOfFloats(me).String() }

//	Since Tfloat4X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat4X4) Set(s string) { (*TListOfFloats)(me).Set(s) }

//	This convenience method just performs a simple type conversion to Tfloat4X4's alias type TListOfFloats.
func (me Tfloat4X4) ToTListOfFloats() TListOfFloats { return TListOfFloats(me) }

type TxsdMatrix struct {
	XsdGoPkgValue Tfloat4X4 `xml:",chardata"`

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TxsdMatrix) ToTfloat4X4() Tfloat4X4 { return me.XsdGoPkgValue }

//	Returns the value of its XsdGoPkgValue field as a TListOfFloats (which Tfloat4X4 is just aliasing).
func (me *TxsdMatrix) ToTListOfFloats() TListOfFloats { return me.XsdGoPkgValue.ToTListOfFloats() }

//	If the WalkHandlers.TxsdMatrix function is not nil (ie. was set by outside code), calls it with this TxsdMatrix instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TxsdMatrix instance.
func (me *TxsdMatrix) Walk() (err error) {
	if fn := WalkHandlers.TxsdMatrix; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the value of its XsdGoPkgValue field as a xsdt.String (which Tfloat4X4 is just aliasing).
func (me *TxsdMatrix) ToXsdtString() xsdt.String {
	return me.XsdGoPkgValue.ToTListOfFloats().ToXsdtString()
}

type XsdGoPkgHasElems_Matrix struct {
	//	Matrix transformations embody mathematical changes to points within a coordinate systems or the
	//	coordinate system itself. The matrix element contains a 4-by-4 matrix of floating-point values.
	Matrixs []*TxsdMatrix `xml:"http://www.collada.org/2005/11/COLLADASchema matrix"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Matrix function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Matrix instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Matrix instance.
func (me *XsdGoPkgHasElems_Matrix) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Matrix; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Matrixs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The scale element contains a mathematical vector that represents the relative proportions of the
//	X, Y and Z axes of a coordinated system.
type XsdGoPkgHasElems_Scale struct {
	//	The scale element contains a mathematical vector that represents the relative proportions of the
	//	X, Y and Z axes of a coordinated system.
	Scales []*TargetableFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema scale"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Scale function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Scale instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Scale instance.
func (me *XsdGoPkgHasElems_Scale) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Scale; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Scales {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The instance_node element declares the instantiation of a COLLADA node resource.
//	The InstanceWithExtra type is used for all generic instance elements. A generic instance element
//	is one which does not have any specific child elements declared.
//	The url attribute refers to resource to instantiate. This may refer to a local resource using a
//	relative URL fragment identifier that begins with the “#” character. The url attribute may refer
//	to an external resource using an absolute or relative URL.
type XsdGoPkgHasAttr_Url_XsdtAnyURI_ struct {
	//	The url attribute refers to resource to instantiate. This may refer to a local resource using a
	//	relative URL fragment identifier that begins with the “#” character. The url attribute may refer
	//	to an external resource using an absolute or relative URL.
	Url xsdt.AnyURI `xml:"http://www.collada.org/2005/11/COLLADASchema url,attr"`
}

type TInstanceWithExtra struct {
	//	The url attribute refers to resource to instantiate. This may refer to a local resource using a
	//	relative URL fragment identifier that begins with the “#” character. The url attribute may refer
	//	to an external resource using an absolute or relative URL.
	XsdGoPkgHasAttr_Url_XsdtAnyURI_

	//	The sid attribute is a text string value containing the sub-identifier of this element. This
	//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	//	The extra element may occur any number of times.
	XsdGoPkgHasElems_Extra

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_
}

//	If the WalkHandlers.TInstanceWithExtra function is not nil (ie. was set by outside code), calls it with this TInstanceWithExtra instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TInstanceWithExtra instance.
func (me *TInstanceWithExtra) Walk() (err error) {
	if fn := WalkHandlers.TInstanceWithExtra; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_InstanceNode struct {
	//	The instance_node element declares the instantiation of a COLLADA node resource.
	NodeInstances []*TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_node"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InstanceNode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstanceNode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstanceNode instance.
func (me *XsdGoPkgHasElems_InstanceNode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InstanceNode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.NodeInstances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The instance_camera element declares the instantiation of a COLLADA camera resource.
type XsdGoPkgHasElems_InstanceCamera struct {
	//	The instance_camera element declares the instantiation of a COLLADA camera resource.
	CameraInstances []*TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_camera"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InstanceCamera function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstanceCamera instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstanceCamera instance.
func (me *XsdGoPkgHasElems_InstanceCamera) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InstanceCamera; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CameraInstances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The skew element contains an angle and two mathematical vectors that represent the axis of
//	rotation and the axis of translation.
type Tfloat7 TListOfFloats

//	This convenience method just performs a simple type conversion to Tfloat7's alias type TListOfFloats.
func (me Tfloat7) ToTListOfFloats() TListOfFloats { return TListOfFloats(me) }

//	Since Tfloat7 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat7) Set(s string) { (*TListOfFloats)(me).Set(s) }

//	Since Tfloat7 is just a simple String type, this merely returns the current string value.
func (me Tfloat7) String() string { return TListOfFloats(me).String() }

type TxsdSkew struct {
	XsdGoPkgValue Tfloat7 `xml:",chardata"`

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_
}

//	Returns the value of its XsdGoPkgValue field as a xsdt.String (which Tfloat7 is just aliasing).
func (me *TxsdSkew) ToXsdtString() xsdt.String {
	return me.XsdGoPkgValue.ToTListOfFloats().ToXsdtString()
}

//	If the WalkHandlers.TxsdSkew function is not nil (ie. was set by outside code), calls it with this TxsdSkew instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TxsdSkew instance.
func (me *TxsdSkew) Walk() (err error) {
	if fn := WalkHandlers.TxsdSkew; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TxsdSkew) ToTfloat7() Tfloat7 { return me.XsdGoPkgValue }

//	Returns the value of its XsdGoPkgValue field as a TListOfFloats (which Tfloat7 is just aliasing).
func (me *TxsdSkew) ToTListOfFloats() TListOfFloats { return me.XsdGoPkgValue.ToTListOfFloats() }

type XsdGoPkgHasElems_Skew struct {
	//	The skew element contains an angle and two mathematical vectors that represent the axis of
	//	rotation and the axis of translation.
	Skews []*TxsdSkew `xml:"http://www.collada.org/2005/11/COLLADASchema skew"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Skew function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Skew instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Skew instance.
func (me *XsdGoPkgHasElems_Skew) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Skew; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Skews {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The instance_geometry element declares the instantiation of a COLLADA geometry resource.
//	Bind a specific material to a piece of geometry, binding varying and uniform parameters at the
//	same time.
//	The technique_common element specifies the bind_material information for the common
//	profile which all COLLADA implementations need to support.
//	The instance_material element declares the instantiation of a COLLADA material resource.
//	The bind element binds values to effect parameters upon instantiation.
//	The target attribute indicates the location of the element bound to the output of the sampler.
//	This text string is a path-name following a simple syntax described in Address Syntax.
//	Required attribute.
type XsdGoPkgHasAttr_Target_XsdtToken_ struct {
	//	The target attribute indicates the location of the element bound to the output of the sampler.
	//	This text string is a path-name following a simple syntax described in Address Syntax.
	//	Required attribute.
	Target xsdt.Token `xml:"http://www.collada.org/2005/11/COLLADASchema target,attr"`
}

type XsdGoPkgHasAttr_Semantic_XsdtNCName_ struct {
	Semantic xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema semantic,attr"`
}

type TxsdInstanceMaterialSequenceBind struct {
	//	The target attribute specifies the location of the value to bind to the specified semantic.
	//	This text string is a path-name following a simple syntax described in the “Addressing Syntax”
	//	section.
	XsdGoPkgHasAttr_Target_XsdtToken_

	//	The semantic attribute specifies which effect parameter to bind.
	XsdGoPkgHasAttr_Semantic_XsdtNCName_
}

//	If the WalkHandlers.TxsdInstanceMaterialSequenceBind function is not nil (ie. was set by outside code), calls it with this TxsdInstanceMaterialSequenceBind instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdInstanceMaterialSequenceBind instance.
func (me *TxsdInstanceMaterialSequenceBind) Walk() (err error) {
	if fn := WalkHandlers.TxsdInstanceMaterialSequenceBind; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_bindsequenceinstance_materialschema_Bind_TxsdInstanceMaterialSequenceBind_ struct {
	//	The bind element binds values to effect parameters upon instantiation.
	Binds []*TxsdInstanceMaterialSequenceBind `xml:"http://www.collada.org/2005/11/COLLADASchema bind"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_bindsequenceinstance_materialschema_Bind_TxsdInstanceMaterialSequenceBind_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_bindsequenceinstance_materialschema_Bind_TxsdInstanceMaterialSequenceBind_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_bindsequenceinstance_materialschema_Bind_TxsdInstanceMaterialSequenceBind_ instance.
func (me *XsdGoPkgHasElems_bindsequenceinstance_materialschema_Bind_TxsdInstanceMaterialSequenceBind_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_bindsequenceinstance_materialschema_Bind_TxsdInstanceMaterialSequenceBind_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Binds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The symbol attribute specifies which symbol defined from within the geometry this material binds to.
type XsdGoPkgHasAttr_Symbol_XsdtNCName_ struct {
	//	The symbol attribute specifies which symbol defined from within the geometry this material binds to.
	Symbol xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema symbol,attr"`
}

//	The bind_vertex_input element binds vertex inputs to effect parameters upon instantiation.
//	The input_semantic attribute specifies which input semantic to bind.
type XsdGoPkgHasAttr_InputSemantic_XsdtNCName_ struct {
	//	The input_semantic attribute specifies which input semantic to bind.
	InputSemantic xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema input_semantic,attr"`
}

//	The input_set attribute specifies which input set to bind.
type XsdGoPkgHasAttr_InputSet_Tuint_ struct {
	//	The input_set attribute specifies which input set to bind.
	InputSet Tuint `xml:"http://www.collada.org/2005/11/COLLADASchema input_set,attr"`
}

type TxsdInstanceMaterialSequenceBindVertexInput struct {
	//	The input_set attribute specifies which input set to bind.
	XsdGoPkgHasAttr_InputSet_Tuint_

	//	The semantic attribute specifies which effect parameter to bind.
	XsdGoPkgHasAttr_Semantic_XsdtNCName_

	//	The input_semantic attribute specifies which input semantic to bind.
	XsdGoPkgHasAttr_InputSemantic_XsdtNCName_
}

//	If the WalkHandlers.TxsdInstanceMaterialSequenceBindVertexInput function is not nil (ie. was set by outside code), calls it with this TxsdInstanceMaterialSequenceBindVertexInput instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdInstanceMaterialSequenceBindVertexInput instance.
func (me *TxsdInstanceMaterialSequenceBindVertexInput) Walk() (err error) {
	if fn := WalkHandlers.TxsdInstanceMaterialSequenceBindVertexInput; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_bind_vertex_inputsequenceinstance_materialschema_BindVertexInput_TxsdInstanceMaterialSequenceBindVertexInput_ struct {
	//	The bind_vertex_input element binds vertex inputs to effect parameters upon instantiation.
	BindVertexInputs []*TxsdInstanceMaterialSequenceBindVertexInput `xml:"http://www.collada.org/2005/11/COLLADASchema bind_vertex_input"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_bind_vertex_inputsequenceinstance_materialschema_BindVertexInput_TxsdInstanceMaterialSequenceBindVertexInput_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_bind_vertex_inputsequenceinstance_materialschema_BindVertexInput_TxsdInstanceMaterialSequenceBindVertexInput_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_bind_vertex_inputsequenceinstance_materialschema_BindVertexInput_TxsdInstanceMaterialSequenceBindVertexInput_ instance.
func (me *XsdGoPkgHasElems_bind_vertex_inputsequenceinstance_materialschema_BindVertexInput_TxsdInstanceMaterialSequenceBindVertexInput_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_bind_vertex_inputsequenceinstance_materialschema_BindVertexInput_TxsdInstanceMaterialSequenceBindVertexInput_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BindVertexInputs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The target attribute specifies the URL of the location of the object to instantiate.
type XsdGoPkgHasAttr_Target_XsdtAnyURI_ struct {
	//	The target attribute specifies the URL of the location of the object to instantiate.
	Target xsdt.AnyURI `xml:"http://www.collada.org/2005/11/COLLADASchema target,attr"`
}

type TxsdInstanceMaterial struct {
	//	The symbol attribute specifies which symbol defined from within the geometry this material binds to.
	XsdGoPkgHasAttr_Symbol_XsdtNCName_

	//	The bind_vertex_input element binds vertex inputs to effect parameters upon instantiation.
	XsdGoPkgHasElems_bind_vertex_inputsequenceinstance_materialschema_BindVertexInput_TxsdInstanceMaterialSequenceBindVertexInput_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The sid attribute is a text string value containing the sub-identifier of this element. This
	//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The target attribute specifies the URL of the location of the object to instantiate.
	XsdGoPkgHasAttr_Target_XsdtAnyURI_

	//	The bind element binds values to effect parameters upon instantiation.
	XsdGoPkgHasElems_bindsequenceinstance_materialschema_Bind_TxsdInstanceMaterialSequenceBind_
}

//	If the WalkHandlers.TxsdInstanceMaterial function is not nil (ie. was set by outside code), calls it with this TxsdInstanceMaterial instance as the single argument. Then calls the Walk() method on 3/7 embed(s) and 0/0 field(s) belonging to this TxsdInstanceMaterial instance.
func (me *TxsdInstanceMaterial) Walk() (err error) {
	if fn := WalkHandlers.TxsdInstanceMaterial; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_bind_vertex_inputsequenceinstance_materialschema_BindVertexInput_TxsdInstanceMaterialSequenceBindVertexInput_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_bindsequenceinstance_materialschema_Bind_TxsdInstanceMaterialSequenceBind_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_InstanceMaterial struct {
	//	The instance_material element declares the instantiation of a COLLADA material resource.
	MaterialInstances []*TxsdInstanceMaterial `xml:"http://www.collada.org/2005/11/COLLADASchema instance_material"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InstanceMaterial function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstanceMaterial instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstanceMaterial instance.
func (me *XsdGoPkgHasElems_InstanceMaterial) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InstanceMaterial; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MaterialInstances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdBindMaterialSequenceTechniqueCommon struct {
	//	The instance_material element specifies the information needed to bind a geometry
	//	to a material. This element must appear at least once.
	XsdGoPkgHasElems_InstanceMaterial
}

//	If the WalkHandlers.TxsdBindMaterialSequenceTechniqueCommon function is not nil (ie. was set by outside code), calls it with this TxsdBindMaterialSequenceTechniqueCommon instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdBindMaterialSequenceTechniqueCommon instance.
func (me *TxsdBindMaterialSequenceTechniqueCommon) Walk() (err error) {
	if fn := WalkHandlers.TxsdBindMaterialSequenceTechniqueCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_InstanceMaterial.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_technique_commonsequencebind_materialschema_TechniqueCommon_TxsdBindMaterialSequenceTechniqueCommon_ struct {
	//	The technique_common element specifies the bind_material information for the common
	//	profile which all COLLADA implementations need to support.
	TechniqueCommon *TxsdBindMaterialSequenceTechniqueCommon `xml:"http://www.collada.org/2005/11/COLLADASchema technique_common"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_technique_commonsequencebind_materialschema_TechniqueCommon_TxsdBindMaterialSequenceTechniqueCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_technique_commonsequencebind_materialschema_TechniqueCommon_TxsdBindMaterialSequenceTechniqueCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_technique_commonsequencebind_materialschema_TechniqueCommon_TxsdBindMaterialSequenceTechniqueCommon_ instance.
func (me *XsdGoPkgHasElem_technique_commonsequencebind_materialschema_TechniqueCommon_TxsdBindMaterialSequenceTechniqueCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_technique_commonsequencebind_materialschema_TechniqueCommon_TxsdBindMaterialSequenceTechniqueCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TechniqueCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The param element declares parametric information regarding its parent element.
//	The semantic attribute is the user-defined meaning of the input connection. Required attribute.
type XsdGoPkgHasAttr_Semantic_XsdtNmtoken_ struct {
	//	The semantic attribute is the user-defined meaning of the input connection. Required attribute.
	Semantic xsdt.Nmtoken `xml:"http://www.collada.org/2005/11/COLLADASchema semantic,attr"`
}

type TxsdParam struct {
	XsdGoPkgValue xsdt.String `xml:",chardata"`

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	//	The type attribute indicates the type of the value data. This text string must be understood
	//	by the application. Required attribute.
	XsdGoPkgHasAttr_Type_XsdtNmtoken_

	//	The semantic attribute is the user-defined meaning of the parameter. Optional attribute.
	XsdGoPkgHasAttr_Semantic_XsdtNmtoken_
}

//	If the WalkHandlers.TxsdParam function is not nil (ie. was set by outside code), calls it with this TxsdParam instance as the single argument. Then calls the Walk() method on 0/4 embed(s) and 0/1 field(s) belonging to this TxsdParam instance.
func (me *TxsdParam) Walk() (err error) {
	if fn := WalkHandlers.TxsdParam; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TxsdParam) ToXsdtString() xsdt.String { return me.XsdGoPkgValue }

type XsdGoPkgHasElems_Param struct {
	//	The param element declares parametric information regarding its parent element.
	Params []*TxsdParam `xml:"http://www.collada.org/2005/11/COLLADASchema param"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Param function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Param instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Param instance.
func (me *XsdGoPkgHasElems_Param) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Param; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Params {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdBindMaterial struct {
	//	The technique_common element specifies the bind_material information for the common
	//	profile which all COLLADA implementations need to support.
	XsdGoPkgHasElem_technique_commonsequencebind_materialschema_TechniqueCommon_TxsdBindMaterialSequenceTechniqueCommon_

	//	This element may contain any number of non-common profile techniques.
	XsdGoPkgHasElems_Technique

	//	The bind_material element may contain any number of param elements.
	XsdGoPkgHasElems_Param

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra
}

//	If the WalkHandlers.TxsdBindMaterial function is not nil (ie. was set by outside code), calls it with this TxsdBindMaterial instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdBindMaterial instance.
func (me *TxsdBindMaterial) Walk() (err error) {
	if fn := WalkHandlers.TxsdBindMaterial; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_technique_commonsequencebind_materialschema_TechniqueCommon_TxsdBindMaterialSequenceTechniqueCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Technique.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Param.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_BindMaterial struct {
	//	Bind a specific material to a piece of geometry, binding varying and uniform parameters at the
	//	same time.
	BindMaterial *TxsdBindMaterial `xml:"http://www.collada.org/2005/11/COLLADASchema bind_material"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BindMaterial function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BindMaterial instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_BindMaterial instance.
func (me *XsdGoPkgHasElem_BindMaterial) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_BindMaterial; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BindMaterial.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdInstanceGeometry struct {
	//	The sid attribute is a text string value containing the sub-identifier of this element. This
	//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	//	Bind a specific material to a piece of geometry, binding varying and uniform parameters at the
	//	same time.
	XsdGoPkgHasElem_BindMaterial

	//	The url attribute refers to resource.  This may refer to a local resource using a relative URL
	//	fragment identifier that begins with the “#” character. The url attribute may refer to an external
	//	resource using an absolute or relative URL.
	XsdGoPkgHasAttr_Url_XsdtAnyURI_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra
}

//	If the WalkHandlers.TxsdInstanceGeometry function is not nil (ie. was set by outside code), calls it with this TxsdInstanceGeometry instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TxsdInstanceGeometry instance.
func (me *TxsdInstanceGeometry) Walk() (err error) {
	if fn := WalkHandlers.TxsdInstanceGeometry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_BindMaterial.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_InstanceGeometry struct {
	//	The instance_geometry element declares the instantiation of a COLLADA geometry resource.
	GeometryInstances []*TxsdInstanceGeometry `xml:"http://www.collada.org/2005/11/COLLADASchema instance_geometry"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InstanceGeometry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstanceGeometry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstanceGeometry instance.
func (me *XsdGoPkgHasElems_InstanceGeometry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InstanceGeometry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GeometryInstances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The instance_light element declares the instantiation of a COLLADA light resource.
type XsdGoPkgHasElems_InstanceLight struct {
	//	The instance_light element declares the instantiation of a COLLADA light resource.
	LightInstances []*TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_light"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InstanceLight function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstanceLight instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstanceLight instance.
func (me *XsdGoPkgHasElems_InstanceLight) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InstanceLight; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.LightInstances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The type attribute indicates the type of the node element. The default value is “NODE”.
//	Optional attribute.
//	An enumerated type specifying the acceptable node types.
type TNodeType xsdt.String

//	This convenience method just performs a simple type conversion to TNodeType's alias type xsdt.String.
func (me TNodeType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TNodeType is "NODE".
func (me TNodeType) IsNode() bool { return me == "NODE" }

//	Returns true if the value of this enumerated TNodeType is "JOINT".
func (me TNodeType) IsJoint() bool { return me == "JOINT" }

//	Since TNodeType is just a simple String type, this merely returns the current string value.
func (me TNodeType) String() string { return xsdt.String(me).String() }

//	Since TNodeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TNodeType) Set(s string) { (*xsdt.String)(me).Set(s) }

type XsdGoPkgHasAttr_Type_TNodeType_Node struct {
	//	The type attribute indicates the type of the node element. The default value is “NODE”.
	//	Optional attribute.
	Type TNodeType `xml:"http://www.collada.org/2005/11/COLLADASchema type,attr"`
}

//	Returns the default value for Type -- "NODE"
func (me XsdGoPkgHasAttr_Type_TNodeType_Node) TypeDefault() TNodeType { return TNodeType("NODE") }

//	The layer attribute indicates the names of the layers to which this node belongs.  For example,
//	a value of “foreground glowing” indicates that this node belongs to both the ‘foreground’ layer
//	and the ‘glowing’ layer.  The default value is empty, indicating that the node doesn’t belong to
//	any layer.  Optional attribute.
type TName xsdt.Name

//	Since TName is just a simple String type, this merely sets the current value from the specified string.
func (me *TName) Set(s string) { (*xsdt.Name)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TName's alias type xsdt.Name.
func (me TName) ToXsdtName() xsdt.Name { return xsdt.Name(me) }

//	Since TName is just a simple String type, this merely returns the current string value.
func (me TName) String() string { return xsdt.Name(me).String() }

type TListOfNames xsdt.String

//	Since TListOfNames is just a simple String type, this merely returns the current string value.
func (me TListOfNames) String() string { return xsdt.String(me).String() }

//	TListOfNames declares a String containing a whitespace-separated list of TName values. This Values() method creates and returns a slice of all elements in that list, typed as xsdt.Name.
func (me TListOfNames) ValuesXsdtName() (list []xsdt.Name) {
	svals := xsdt.ListValues(string(me))
	list = make([]xsdt.Name, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	Since TListOfNames is just a simple String type, this merely sets the current value from the specified string.
func (me *TListOfNames) Set(s string) { (*xsdt.String)(me).Set(s) }

//	TListOfNames declares a String containing a whitespace-separated list of TName values. This Values() method creates and returns a slice of all elements in that list.
func (me TListOfNames) Values() (list []TName) {
	svals := xsdt.ListValues(string(me))
	list = make([]TName, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	This convenience method just performs a simple type conversion to TListOfNames's alias type xsdt.String.
func (me TListOfNames) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasAttr_Layer_TListOfNames_ struct {
	//	The layer attribute indicates the names of the layers to which this node belongs.  For example,
	//	a value of “foreground glowing” indicates that this node belongs to both the ‘foreground’ layer
	//	and the ‘glowing’ layer.  The default value is empty, indicating that the node doesn’t belong to
	//	any layer.  Optional attribute.
	Layer TListOfNames `xml:"http://www.collada.org/2005/11/COLLADASchema layer,attr"`
}

//	The translate element contains a mathematical vector that represents the distance along the
//	X, Y and Z-axes.
type XsdGoPkgHasElems_Translate struct {
	//	The translate element contains a mathematical vector that represents the distance along the
	//	X, Y and Z-axes.
	Translates []*TargetableFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema translate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Translate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Translate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Translate instance.
func (me *XsdGoPkgHasElems_Translate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Translate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Translates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The rotate element contains an angle and a mathematical vector that represents the axis of rotation.
type Tfloat4 TListOfFloats

//	Since Tfloat4 is just a simple String type, this merely returns the current string value.
func (me Tfloat4) String() string { return TListOfFloats(me).String() }

//	This convenience method just performs a simple type conversion to Tfloat4's alias type TListOfFloats.
func (me Tfloat4) ToTListOfFloats() TListOfFloats { return TListOfFloats(me) }

//	Since Tfloat4 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat4) Set(s string) { (*TListOfFloats)(me).Set(s) }

type TxsdRotate struct {
	XsdGoPkgValue Tfloat4 `xml:",chardata"`

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_
}

//	Returns the value of its XsdGoPkgValue field as a xsdt.String (which Tfloat4 is just aliasing).
func (me *TxsdRotate) ToXsdtString() xsdt.String {
	return me.XsdGoPkgValue.ToTListOfFloats().ToXsdtString()
}

//	If the WalkHandlers.TxsdRotate function is not nil (ie. was set by outside code), calls it with this TxsdRotate instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TxsdRotate instance.
func (me *TxsdRotate) Walk() (err error) {
	if fn := WalkHandlers.TxsdRotate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the value of its XsdGoPkgValue field as a TListOfFloats (which Tfloat4 is just aliasing).
func (me *TxsdRotate) ToTListOfFloats() TListOfFloats { return me.XsdGoPkgValue.ToTListOfFloats() }

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TxsdRotate) ToTfloat4() Tfloat4 { return me.XsdGoPkgValue }

type XsdGoPkgHasElems_Rotate struct {
	//	The rotate element contains an angle and a mathematical vector that represents the axis of rotation.
	Rotates []*TxsdRotate `xml:"http://www.collada.org/2005/11/COLLADASchema rotate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Rotate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Rotate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Rotate instance.
func (me *XsdGoPkgHasElems_Rotate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Rotate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Rotates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The instance_controller element declares the instantiation of a COLLADA controller resource.
//	The skeleton element is used to indicate where a skin controller is to start to search for
//	the joint nodes it needs.  This element is meaningless for morph controllers.
type XsdGoPkgHasElems_skeletonsequenceinstance_controllerschema_Skeleton_XsdtAnyURI_ struct {
	//	The skeleton element is used to indicate where a skin controller is to start to search for
	//	the joint nodes it needs.  This element is meaningless for morph controllers.
	Skeletons []xsdt.AnyURI `xml:"http://www.collada.org/2005/11/COLLADASchema skeleton"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_skeletonsequenceinstance_controllerschema_Skeleton_XsdtAnyURI_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_skeletonsequenceinstance_controllerschema_Skeleton_XsdtAnyURI_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_skeletonsequenceinstance_controllerschema_Skeleton_XsdtAnyURI_ instance.
func (me *XsdGoPkgHasElems_skeletonsequenceinstance_controllerschema_Skeleton_XsdtAnyURI_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_skeletonsequenceinstance_controllerschema_Skeleton_XsdtAnyURI_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdInstanceController struct {
	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The skeleton element is used to indicate where a skin controller is to start to search for
	//	the joint nodes it needs.  This element is meaningless for morph controllers.
	XsdGoPkgHasElems_skeletonsequenceinstance_controllerschema_Skeleton_XsdtAnyURI_

	//	The url attribute refers to resource. This may refer to a local resource using a relative
	//	URL fragment identifier that begins with the “#” character. The url attribute may refer to an
	//	external resource using an absolute or relative URL.
	XsdGoPkgHasAttr_Url_XsdtAnyURI_

	//	The sid attribute is a text string value containing the sub-identifier of this element. This
	//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	//	Bind a specific material to a piece of geometry, binding varying and uniform parameters at the
	//	same time.
	XsdGoPkgHasElem_BindMaterial
}

//	If the WalkHandlers.TxsdInstanceController function is not nil (ie. was set by outside code), calls it with this TxsdInstanceController instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TxsdInstanceController instance.
func (me *TxsdInstanceController) Walk() (err error) {
	if fn := WalkHandlers.TxsdInstanceController; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_skeletonsequenceinstance_controllerschema_Skeleton_XsdtAnyURI_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_BindMaterial.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_InstanceController struct {
	//	The instance_controller element declares the instantiation of a COLLADA controller resource.
	ControllerInstances []*TxsdInstanceController `xml:"http://www.collada.org/2005/11/COLLADASchema instance_controller"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InstanceController function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstanceController instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstanceController instance.
func (me *XsdGoPkgHasElems_InstanceController) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InstanceController; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ControllerInstances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The lookat element contains a position and orientation transformation suitable for aiming a camera.
//	The lookat element contains three mathematical vectors within it that describe:
//	1.	The position of the object;
//	2.	The position of the interest point;
//	3.	The direction that points up.
type Tfloat3X3 TListOfFloats

//	Since Tfloat3X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat3X3) Set(s string) { (*TListOfFloats)(me).Set(s) }

//	This convenience method just performs a simple type conversion to Tfloat3X3's alias type TListOfFloats.
func (me Tfloat3X3) ToTListOfFloats() TListOfFloats { return TListOfFloats(me) }

//	Since Tfloat3X3 is just a simple String type, this merely returns the current string value.
func (me Tfloat3X3) String() string { return TListOfFloats(me).String() }

type TxsdLookat struct {
	XsdGoPkgValue Tfloat3X3 `xml:",chardata"`

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_
}

//	Returns the value of its XsdGoPkgValue field as a xsdt.String (which Tfloat3X3 is just aliasing).
func (me *TxsdLookat) ToXsdtString() xsdt.String {
	return me.XsdGoPkgValue.ToTListOfFloats().ToXsdtString()
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TxsdLookat) ToTfloat3X3() Tfloat3X3 { return me.XsdGoPkgValue }

//	Returns the value of its XsdGoPkgValue field as a TListOfFloats (which Tfloat3X3 is just aliasing).
func (me *TxsdLookat) ToTListOfFloats() TListOfFloats { return me.XsdGoPkgValue.ToTListOfFloats() }

//	If the WalkHandlers.TxsdLookat function is not nil (ie. was set by outside code), calls it with this TxsdLookat instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TxsdLookat instance.
func (me *TxsdLookat) Walk() (err error) {
	if fn := WalkHandlers.TxsdLookat; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Lookat struct {
	//	The lookat element contains a position and orientation transformation suitable for aiming a camera.
	//	The lookat element contains three mathematical vectors within it that describe:
	//	1.	The position of the object;
	//	2.	The position of the interest point;
	//	3.	The direction that points up.
	Lookats []*TxsdLookat `xml:"http://www.collada.org/2005/11/COLLADASchema lookat"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Lookat function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Lookat instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Lookat instance.
func (me *XsdGoPkgHasElems_Lookat) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Lookat; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Lookats {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdNode struct {
	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	//	The node element may instance any number of node elements or hierarchies objects.
	XsdGoPkgHasElems_InstanceNode

	//	The node element may be hierarchical and be the parent of any number of other node elements.
	XsdGoPkgHasElems_Node

	//	The node element may instance any number of camera objects.
	XsdGoPkgHasElems_InstanceCamera

	//	The node element may contain any number of skew elements.
	XsdGoPkgHasElems_Skew

	//	The node element may instance any number of geometry objects.
	XsdGoPkgHasElems_InstanceGeometry

	//	The node element may instance any number of light objects.
	XsdGoPkgHasElems_InstanceLight

	//	The type attribute indicates the type of the node element. The default value is “NODE”.
	//	Optional attribute.
	XsdGoPkgHasAttr_Type_TNodeType_Node

	//	The layer attribute indicates the names of the layers to which this node belongs.  For example,
	//	a value of “foreground glowing” indicates that this node belongs to both the ‘foreground’ layer
	//	and the ‘glowing’ layer.  The default value is empty, indicating that the node doesn’t belong to
	//	any layer.  Optional attribute.
	XsdGoPkgHasAttr_Layer_TListOfNames_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The node element may contain any number of translate elements.
	XsdGoPkgHasElems_Translate

	//	The node element may contain any number of rotate elements.
	XsdGoPkgHasElems_Rotate

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The node element may instance any number of controller objects.
	XsdGoPkgHasElems_InstanceController

	//	The node element may contain an asset element.
	XsdGoPkgHasElem_Asset

	//	The node element may contain any number of lookat elements.
	XsdGoPkgHasElems_Lookat

	//	The node element may contain any number of matrix elements.
	XsdGoPkgHasElems_Matrix

	//	The node element may contain any number of scale elements.
	XsdGoPkgHasElems_Scale
}

//	If the WalkHandlers.TxsdNode function is not nil (ie. was set by outside code), calls it with this TxsdNode instance as the single argument. Then calls the Walk() method on 13/19 embed(s) and 0/0 field(s) belonging to this TxsdNode instance.
func (me *TxsdNode) Walk() (err error) {
	if fn := WalkHandlers.TxsdNode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Lookat.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Matrix.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Scale.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_InstanceNode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_InstanceCamera.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Skew.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_InstanceGeometry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_InstanceLight.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Translate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Rotate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_InstanceController.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Node struct {
	//	Nodes embody the hierarchical relationship of elements in the scene.
	Nodes []*TxsdNode `xml:"http://www.collada.org/2005/11/COLLADASchema node"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Node function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Node instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Node instance.
func (me *XsdGoPkgHasElems_Node) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Node; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Nodes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The evaluate_scene element declares information specifying a specific way to evaluate this
//	visual_scene. There may be any number of evaluate_scene elements.
//	The render element describes one effect pass to evaluate the scene.
//	There must be at least one render element.
//	The camera_node attribute refers to a node that contains a camera describing the viewpoint to
//	render this compositing step from.
type XsdGoPkgHasAttr_CameraNode_XsdtAnyURI_ struct {
	//	The camera_node attribute refers to a node that contains a camera describing the viewpoint to
	//	render this compositing step from.
	CameraNode xsdt.AnyURI `xml:"http://www.collada.org/2005/11/COLLADASchema camera_node,attr"`
}

//	The instance_effect element declares the instantiation of a COLLADA effect resource.
//	Add a hint for a platform of which technique to use in this effect.
//	A profile defines a string that specifies which API profile this is hint is aimed for.
type XsdGoPkgHasAttr_Profile_XsdtNCName_ struct {
	//	A profile defines a string that specifies which API profile this is hint is aimed for.
	Profile xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema profile,attr"`
}

//	A platform defines a string that specifies which platform this is hint is aimed for.
type XsdGoPkgHasAttr_Platform_XsdtNCName_ struct {
	//	A platform defines a string that specifies which platform this is hint is aimed for.
	Platform xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema platform,attr"`
}

type XsdGoPkgHasAttr_Ref_XsdtNCName_ struct {
	Ref xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema ref,attr"`
}

type TxsdInstanceEffectSequenceTechniqueHint struct {
	//	A profile defines a string that specifies which API profile this is hint is aimed for.
	XsdGoPkgHasAttr_Profile_XsdtNCName_

	//	A platform defines a string that specifies which platform this is hint is aimed for.
	XsdGoPkgHasAttr_Platform_XsdtNCName_

	//	A reference to the technique to use for the specified platform.
	XsdGoPkgHasAttr_Ref_XsdtNCName_
}

//	If the WalkHandlers.TxsdInstanceEffectSequenceTechniqueHint function is not nil (ie. was set by outside code), calls it with this TxsdInstanceEffectSequenceTechniqueHint instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdInstanceEffectSequenceTechniqueHint instance.
func (me *TxsdInstanceEffectSequenceTechniqueHint) Walk() (err error) {
	if fn := WalkHandlers.TxsdInstanceEffectSequenceTechniqueHint; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_technique_hintsequenceinstance_effectschema_TechniqueHint_TxsdInstanceEffectSequenceTechniqueHint_ struct {
	//	Add a hint for a platform of which technique to use in this effect.
	TechniqueHints []*TxsdInstanceEffectSequenceTechniqueHint `xml:"http://www.collada.org/2005/11/COLLADASchema technique_hint"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_technique_hintsequenceinstance_effectschema_TechniqueHint_TxsdInstanceEffectSequenceTechniqueHint_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_technique_hintsequenceinstance_effectschema_TechniqueHint_TxsdInstanceEffectSequenceTechniqueHint_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_technique_hintsequenceinstance_effectschema_TechniqueHint_TxsdInstanceEffectSequenceTechniqueHint_ instance.
func (me *XsdGoPkgHasElems_technique_hintsequenceinstance_effectschema_TechniqueHint_TxsdInstanceEffectSequenceTechniqueHint_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_technique_hintsequenceinstance_effectschema_TechniqueHint_TxsdInstanceEffectSequenceTechniqueHint_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.TechniqueHints {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Assigns a new value to a previously defined parameter
type XsdGoPkgHasAttr_Ref_XsdtToken_ struct {
	Ref xsdt.Token `xml:"http://www.collada.org/2005/11/COLLADASchema ref,attr"`
}

//	A group that specifies the allowable types for effect scoped parameters.
type Tint xsdt.Long

//	Since Tint is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *Tint) Set(s string) { (*xsdt.Long)(me).Set(s) }

//	This convenience method just performs a simple type conversion to Tint's alias type xsdt.Long.
func (me Tint) ToXsdtLong() xsdt.Long { return xsdt.Long(me) }

//	Returns a string representation of this Tint's current non-string scalar value.
func (me Tint) String() string { return xsdt.Long(me).String() }

type TListOfInts xsdt.String

//	TListOfInts declares a String containing a whitespace-separated list of Tint values. This Values() method creates and returns a slice of all elements in that list, typed as xsdt.Long.
func (me TListOfInts) ValuesXsdtLong() (list []xsdt.Long) {
	svals := xsdt.ListValues(string(me))
	list = make([]xsdt.Long, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	This convenience method just performs a simple type conversion to TListOfInts's alias type xsdt.String.
func (me TListOfInts) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TListOfInts declares a String containing a whitespace-separated list of Tint values. This Values() method creates and returns a slice of all elements in that list.
func (me TListOfInts) Values() (list []Tint) {
	svals := xsdt.ListValues(string(me))
	list = make([]Tint, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	Since TListOfInts is just a simple String type, this merely returns the current string value.
func (me TListOfInts) String() string { return xsdt.String(me).String() }

//	Since TListOfInts is just a simple String type, this merely sets the current value from the specified string.
func (me *TListOfInts) Set(s string) { (*xsdt.String)(me).Set(s) }

type Tint3 TListOfInts

//	Since Tint3 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tint3) Set(s string) { (*TListOfInts)(me).Set(s) }

//	Since Tint3 is just a simple String type, this merely returns the current string value.
func (me Tint3) String() string { return TListOfInts(me).String() }

//	This convenience method just performs a simple type conversion to Tint3's alias type TListOfInts.
func (me Tint3) ToTListOfInts() TListOfInts { return TListOfInts(me) }

type XsdGoPkgHasElem_int3choicefx_basic_type_commonschema_Int3_Tint3_ struct {
	Int3 Tint3 `xml:"http://www.collada.org/2005/11/COLLADASchema int3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int3choicefx_basic_type_commonschema_Int3_Tint3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int3choicefx_basic_type_commonschema_Int3_Tint3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int3choicefx_basic_type_commonschema_Int3_Tint3_ instance.
func (me *XsdGoPkgHasElem_int3choicefx_basic_type_commonschema_Int3_Tint3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int3choicefx_basic_type_commonschema_Int3_Tint3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tfloat2X3 TListOfFloats

//	This convenience method just performs a simple type conversion to Tfloat2X3's alias type TListOfFloats.
func (me Tfloat2X3) ToTListOfFloats() TListOfFloats { return TListOfFloats(me) }

//	Since Tfloat2X3 is just a simple String type, this merely returns the current string value.
func (me Tfloat2X3) String() string { return TListOfFloats(me).String() }

//	Since Tfloat2X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat2X3) Set(s string) { (*TListOfFloats)(me).Set(s) }

type XsdGoPkgHasElem_float2x3choicefx_basic_type_commonschema_Float2X3_Tfloat2X3_ struct {
	Float2X3 Tfloat2X3 `xml:"http://www.collada.org/2005/11/COLLADASchema float2x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float2x3choicefx_basic_type_commonschema_Float2X3_Tfloat2X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float2x3choicefx_basic_type_commonschema_Float2X3_Tfloat2X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float2x3choicefx_basic_type_commonschema_Float2X3_Tfloat2X3_ instance.
func (me *XsdGoPkgHasElem_float2x3choicefx_basic_type_commonschema_Float2X3_Tfloat2X3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float2x3choicefx_basic_type_commonschema_Float2X3_Tfloat2X3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tfloat3X2 TListOfFloats

//	This convenience method just performs a simple type conversion to Tfloat3X2's alias type TListOfFloats.
func (me Tfloat3X2) ToTListOfFloats() TListOfFloats { return TListOfFloats(me) }

//	Since Tfloat3X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat3X2) Set(s string) { (*TListOfFloats)(me).Set(s) }

//	Since Tfloat3X2 is just a simple String type, this merely returns the current string value.
func (me Tfloat3X2) String() string { return TListOfFloats(me).String() }

type XsdGoPkgHasElem_float3x2choicefx_basic_type_commonschema_Float3X2_Tfloat3X2_ struct {
	Float3X2 Tfloat3X2 `xml:"http://www.collada.org/2005/11/COLLADASchema float3x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float3x2choicefx_basic_type_commonschema_Float3X2_Tfloat3X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float3x2choicefx_basic_type_commonschema_Float3X2_Tfloat3X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float3x2choicefx_basic_type_commonschema_Float3X2_Tfloat3X2_ instance.
func (me *XsdGoPkgHasElem_float3x2choicefx_basic_type_commonschema_Float3X2_Tfloat3X2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float3x2choicefx_basic_type_commonschema_Float3X2_Tfloat3X2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_float3x1choicefx_basic_type_commonschema_Float3X1_Tfloat3_ struct {
	Float3X1 Tfloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema float3x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float3x1choicefx_basic_type_commonschema_Float3X1_Tfloat3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float3x1choicefx_basic_type_commonschema_Float3X1_Tfloat3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float3x1choicefx_basic_type_commonschema_Float3X1_Tfloat3_ instance.
func (me *XsdGoPkgHasElem_float3x1choicefx_basic_type_commonschema_Float3X1_Tfloat3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float3x1choicefx_basic_type_commonschema_Float3X1_Tfloat3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_float4x4choicefx_basic_type_commonschema_Float4X4_Tfloat4X4_ struct {
	Float4X4 Tfloat4X4 `xml:"http://www.collada.org/2005/11/COLLADASchema float4x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float4x4choicefx_basic_type_commonschema_Float4X4_Tfloat4X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float4x4choicefx_basic_type_commonschema_Float4X4_Tfloat4X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float4x4choicefx_basic_type_commonschema_Float4X4_Tfloat4X4_ instance.
func (me *XsdGoPkgHasElem_float4x4choicefx_basic_type_commonschema_Float4X4_Tfloat4X4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float4x4choicefx_basic_type_commonschema_Float4X4_Tfloat4X4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_enumchoicefx_basic_type_commonschema_Enum_XsdtString_ struct {
	Enum xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema enum"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_enumchoicefx_basic_type_commonschema_Enum_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_enumchoicefx_basic_type_commonschema_Enum_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_enumchoicefx_basic_type_commonschema_Enum_XsdtString_ instance.
func (me *XsdGoPkgHasElem_enumchoicefx_basic_type_commonschema_Enum_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_enumchoicefx_basic_type_commonschema_Enum_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tfloat2 TListOfFloats

//	This convenience method just performs a simple type conversion to Tfloat2's alias type TListOfFloats.
func (me Tfloat2) ToTListOfFloats() TListOfFloats { return TListOfFloats(me) }

//	Since Tfloat2 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat2) Set(s string) { (*TListOfFloats)(me).Set(s) }

//	Since Tfloat2 is just a simple String type, this merely returns the current string value.
func (me Tfloat2) String() string { return TListOfFloats(me).String() }

type XsdGoPkgHasElem_float2x1choicefx_basic_type_commonschema_Float2X1_Tfloat2_ struct {
	Float2X1 Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema float2x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float2x1choicefx_basic_type_commonschema_Float2X1_Tfloat2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float2x1choicefx_basic_type_commonschema_Float2X1_Tfloat2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float2x1choicefx_basic_type_commonschema_Float2X1_Tfloat2_ instance.
func (me *XsdGoPkgHasElem_float2x1choicefx_basic_type_commonschema_Float2X1_Tfloat2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float2x1choicefx_basic_type_commonschema_Float2X1_Tfloat2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tbool xsdt.Boolean

//	Since Tbool is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *Tbool) Set(s string) { (*xsdt.Boolean)(me).Set(s) }

//	This convenience method just performs a simple type conversion to Tbool's alias type xsdt.Boolean.
func (me Tbool) ToXsdtBoolean() xsdt.Boolean { return xsdt.Boolean(me) }

//	Returns a string representation of this Tbool's current non-string scalar value.
func (me Tbool) String() string { return xsdt.Boolean(me).String() }

type TListOfBools xsdt.String

//	Since TListOfBools is just a simple String type, this merely returns the current string value.
func (me TListOfBools) String() string { return xsdt.String(me).String() }

//	TListOfBools declares a String containing a whitespace-separated list of Tbool values. This Values() method creates and returns a slice of all elements in that list.
func (me TListOfBools) Values() (list []Tbool) {
	svals := xsdt.ListValues(string(me))
	list = make([]Tbool, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	TListOfBools declares a String containing a whitespace-separated list of Tbool values. This Values() method creates and returns a slice of all elements in that list, typed as xsdt.Boolean.
func (me TListOfBools) ValuesXsdtBoolean() (list []xsdt.Boolean) {
	svals := xsdt.ListValues(string(me))
	list = make([]xsdt.Boolean, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	Since TListOfBools is just a simple String type, this merely sets the current value from the specified string.
func (me *TListOfBools) Set(s string) { (*xsdt.String)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TListOfBools's alias type xsdt.String.
func (me TListOfBools) ToXsdtString() xsdt.String { return xsdt.String(me) }

type Tbool2 TListOfBools

//	This convenience method just performs a simple type conversion to Tbool2's alias type TListOfBools.
func (me Tbool2) ToTListOfBools() TListOfBools { return TListOfBools(me) }

//	Since Tbool2 is just a simple String type, this merely returns the current string value.
func (me Tbool2) String() string { return TListOfBools(me).String() }

//	Since Tbool2 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tbool2) Set(s string) { (*TListOfBools)(me).Set(s) }

type XsdGoPkgHasElem_bool2choicefx_basic_type_commonschema_Bool2_Tbool2_ struct {
	Bool2 Tbool2 `xml:"http://www.collada.org/2005/11/COLLADASchema bool2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool2choicefx_basic_type_commonschema_Bool2_Tbool2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool2choicefx_basic_type_commonschema_Bool2_Tbool2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool2choicefx_basic_type_commonschema_Bool2_Tbool2_ instance.
func (me *XsdGoPkgHasElem_bool2choicefx_basic_type_commonschema_Bool2_Tbool2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool2choicefx_basic_type_commonschema_Bool2_Tbool2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_float1x2choicefx_basic_type_commonschema_Float1X2_Tfloat2_ struct {
	Float1X2 Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema float1x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float1x2choicefx_basic_type_commonschema_Float1X2_Tfloat2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float1x2choicefx_basic_type_commonschema_Float1X2_Tfloat2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float1x2choicefx_basic_type_commonschema_Float1X2_Tfloat2_ instance.
func (me *XsdGoPkgHasElem_float1x2choicefx_basic_type_commonschema_Float1X2_Tfloat2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float1x2choicefx_basic_type_commonschema_Float1X2_Tfloat2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tfloat2X2 TListOfFloats

//	Since Tfloat2X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat2X2) Set(s string) { (*TListOfFloats)(me).Set(s) }

//	Since Tfloat2X2 is just a simple String type, this merely returns the current string value.
func (me Tfloat2X2) String() string { return TListOfFloats(me).String() }

//	This convenience method just performs a simple type conversion to Tfloat2X2's alias type TListOfFloats.
func (me Tfloat2X2) ToTListOfFloats() TListOfFloats { return TListOfFloats(me) }

type XsdGoPkgHasElem_float2x2choicefx_basic_type_commonschema_Float2X2_Tfloat2X2_ struct {
	Float2X2 Tfloat2X2 `xml:"http://www.collada.org/2005/11/COLLADASchema float2x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float2x2choicefx_basic_type_commonschema_Float2X2_Tfloat2X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float2x2choicefx_basic_type_commonschema_Float2X2_Tfloat2X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float2x2choicefx_basic_type_commonschema_Float2X2_Tfloat2X2_ instance.
func (me *XsdGoPkgHasElem_float2x2choicefx_basic_type_commonschema_Float2X2_Tfloat2X2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float2x2choicefx_basic_type_commonschema_Float2X2_Tfloat2X2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tbool4 TListOfBools

//	Since Tbool4 is just a simple String type, this merely returns the current string value.
func (me Tbool4) String() string { return TListOfBools(me).String() }

//	This convenience method just performs a simple type conversion to Tbool4's alias type TListOfBools.
func (me Tbool4) ToTListOfBools() TListOfBools { return TListOfBools(me) }

//	Since Tbool4 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tbool4) Set(s string) { (*TListOfBools)(me).Set(s) }

type XsdGoPkgHasElem_bool4choicefx_basic_type_commonschema_Bool4_Tbool4_ struct {
	Bool4 Tbool4 `xml:"http://www.collada.org/2005/11/COLLADASchema bool4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool4choicefx_basic_type_commonschema_Bool4_Tbool4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool4choicefx_basic_type_commonschema_Bool4_Tbool4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool4choicefx_basic_type_commonschema_Bool4_Tbool4_ instance.
func (me *XsdGoPkgHasElem_bool4choicefx_basic_type_commonschema_Bool4_Tbool4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool4choicefx_basic_type_commonschema_Bool4_Tbool4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_floatchoicefx_basic_type_commonschema_Float_Tfloat_ struct {
	Float *Tfloat `xml:"http://www.collada.org/2005/11/COLLADASchema float"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_floatchoicefx_basic_type_commonschema_Float_Tfloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_floatchoicefx_basic_type_commonschema_Float_Tfloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_floatchoicefx_basic_type_commonschema_Float_Tfloat_ instance.
func (me *XsdGoPkgHasElem_floatchoicefx_basic_type_commonschema_Float_Tfloat_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_floatchoicefx_basic_type_commonschema_Float_Tfloat_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A texture sampler for depth maps.
type TfxSamplerWrapCommon xsdt.Nmtoken

//	Returns true if the value of this enumerated TfxSamplerWrapCommon is "BORDER".
func (me TfxSamplerWrapCommon) IsBorder() bool { return me == "BORDER" }

//	Returns true if the value of this enumerated TfxSamplerWrapCommon is "NONE".
func (me TfxSamplerWrapCommon) IsNone() bool { return me == "NONE" }

//	Since TfxSamplerWrapCommon is just a simple String type, this merely returns the current string value.
func (me TfxSamplerWrapCommon) String() string { return xsdt.Nmtoken(me).String() }

//	Returns true if the value of this enumerated TfxSamplerWrapCommon is "CLAMP".
func (me TfxSamplerWrapCommon) IsClamp() bool { return me == "CLAMP" }

//	Returns true if the value of this enumerated TfxSamplerWrapCommon is "WRAP".
func (me TfxSamplerWrapCommon) IsWrap() bool { return me == "WRAP" }

//	Since TfxSamplerWrapCommon is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxSamplerWrapCommon) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TfxSamplerWrapCommon's alias type xsdt.Nmtoken.
func (me TfxSamplerWrapCommon) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TfxSamplerWrapCommon is "MIRROR".
func (me TfxSamplerWrapCommon) IsMirror() bool { return me == "MIRROR" }

type XsdGoPkgHasElem_wrap_tsequencefx_samplerDEPTH_commonschema_WrapT_TfxSamplerWrapCommon_Wrap struct {
	WrapT TfxSamplerWrapCommon `xml:"http://www.collada.org/2005/11/COLLADASchema wrap_t"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_wrap_tsequencefx_samplerDEPTH_commonschema_WrapT_TfxSamplerWrapCommon_Wrap function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_wrap_tsequencefx_samplerDEPTH_commonschema_WrapT_TfxSamplerWrapCommon_Wrap instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_wrap_tsequencefx_samplerDEPTH_commonschema_WrapT_TfxSamplerWrapCommon_Wrap instance.
func (me *XsdGoPkgHasElem_wrap_tsequencefx_samplerDEPTH_commonschema_WrapT_TfxSamplerWrapCommon_Wrap) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_wrap_tsequencefx_samplerDEPTH_commonschema_WrapT_TfxSamplerWrapCommon_Wrap; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for WrapT -- "WRAP"
func (me XsdGoPkgHasElem_wrap_tsequencefx_samplerDEPTH_commonschema_WrapT_TfxSamplerWrapCommon_Wrap) WrapTDefault() TfxSamplerWrapCommon {
	return TfxSamplerWrapCommon("WRAP")
}

type TfxSamplerFilterCommon xsdt.Nmtoken

//	Returns true if the value of this enumerated TfxSamplerFilterCommon is "NEAREST_MIPMAP_LINEAR".
func (me TfxSamplerFilterCommon) IsNearestMipmapLinear() bool { return me == "NEAREST_MIPMAP_LINEAR" }

//	Since TfxSamplerFilterCommon is just a simple String type, this merely returns the current string value.
func (me TfxSamplerFilterCommon) String() string { return xsdt.Nmtoken(me).String() }

//	Since TfxSamplerFilterCommon is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxSamplerFilterCommon) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TfxSamplerFilterCommon's alias type xsdt.Nmtoken.
func (me TfxSamplerFilterCommon) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TfxSamplerFilterCommon is "LINEAR_MIPMAP_LINEAR".
func (me TfxSamplerFilterCommon) IsLinearMipmapLinear() bool { return me == "LINEAR_MIPMAP_LINEAR" }

//	Returns true if the value of this enumerated TfxSamplerFilterCommon is "LINEAR_MIPMAP_NEAREST".
func (me TfxSamplerFilterCommon) IsLinearMipmapNearest() bool { return me == "LINEAR_MIPMAP_NEAREST" }

//	Returns true if the value of this enumerated TfxSamplerFilterCommon is "NONE".
func (me TfxSamplerFilterCommon) IsNone() bool { return me == "NONE" }

//	Returns true if the value of this enumerated TfxSamplerFilterCommon is "LINEAR".
func (me TfxSamplerFilterCommon) IsLinear() bool { return me == "LINEAR" }

//	Returns true if the value of this enumerated TfxSamplerFilterCommon is "NEAREST".
func (me TfxSamplerFilterCommon) IsNearest() bool { return me == "NEAREST" }

//	Returns true if the value of this enumerated TfxSamplerFilterCommon is "NEAREST_MIPMAP_NEAREST".
func (me TfxSamplerFilterCommon) IsNearestMipmapNearest() bool { return me == "NEAREST_MIPMAP_NEAREST" }

type XsdGoPkgHasElem_magfiltersequencefx_samplerDEPTH_commonschema_Magfilter_TfxSamplerFilterCommon_None struct {
	Magfilter TfxSamplerFilterCommon `xml:"http://www.collada.org/2005/11/COLLADASchema magfilter"`
}

//	Returns the default value for Magfilter -- "NONE"
func (me XsdGoPkgHasElem_magfiltersequencefx_samplerDEPTH_commonschema_Magfilter_TfxSamplerFilterCommon_None) MagfilterDefault() TfxSamplerFilterCommon {
	return TfxSamplerFilterCommon("NONE")
}

//	If the WalkHandlers.XsdGoPkgHasElem_magfiltersequencefx_samplerDEPTH_commonschema_Magfilter_TfxSamplerFilterCommon_None function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_magfiltersequencefx_samplerDEPTH_commonschema_Magfilter_TfxSamplerFilterCommon_None instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_magfiltersequencefx_samplerDEPTH_commonschema_Magfilter_TfxSamplerFilterCommon_None instance.
func (me *XsdGoPkgHasElem_magfiltersequencefx_samplerDEPTH_commonschema_Magfilter_TfxSamplerFilterCommon_None) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_magfiltersequencefx_samplerDEPTH_commonschema_Magfilter_TfxSamplerFilterCommon_None; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_minfiltersequencefx_samplerDEPTH_commonschema_Minfilter_TfxSamplerFilterCommon_None struct {
	Minfilter TfxSamplerFilterCommon `xml:"http://www.collada.org/2005/11/COLLADASchema minfilter"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_minfiltersequencefx_samplerDEPTH_commonschema_Minfilter_TfxSamplerFilterCommon_None function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_minfiltersequencefx_samplerDEPTH_commonschema_Minfilter_TfxSamplerFilterCommon_None instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_minfiltersequencefx_samplerDEPTH_commonschema_Minfilter_TfxSamplerFilterCommon_None instance.
func (me *XsdGoPkgHasElem_minfiltersequencefx_samplerDEPTH_commonschema_Minfilter_TfxSamplerFilterCommon_None) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_minfiltersequencefx_samplerDEPTH_commonschema_Minfilter_TfxSamplerFilterCommon_None; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for Minfilter -- "NONE"
func (me XsdGoPkgHasElem_minfiltersequencefx_samplerDEPTH_commonschema_Minfilter_TfxSamplerFilterCommon_None) MinfilterDefault() TfxSamplerFilterCommon {
	return TfxSamplerFilterCommon("NONE")
}

type XsdGoPkgHasElem_wrap_ssequencefx_samplerDEPTH_commonschema_WrapS_TfxSamplerWrapCommon_Wrap struct {
	WrapS TfxSamplerWrapCommon `xml:"http://www.collada.org/2005/11/COLLADASchema wrap_s"`
}

//	Returns the default value for WrapS -- "WRAP"
func (me XsdGoPkgHasElem_wrap_ssequencefx_samplerDEPTH_commonschema_WrapS_TfxSamplerWrapCommon_Wrap) WrapSDefault() TfxSamplerWrapCommon {
	return TfxSamplerWrapCommon("WRAP")
}

//	If the WalkHandlers.XsdGoPkgHasElem_wrap_ssequencefx_samplerDEPTH_commonschema_WrapS_TfxSamplerWrapCommon_Wrap function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_wrap_ssequencefx_samplerDEPTH_commonschema_WrapS_TfxSamplerWrapCommon_Wrap instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_wrap_ssequencefx_samplerDEPTH_commonschema_WrapS_TfxSamplerWrapCommon_Wrap instance.
func (me *XsdGoPkgHasElem_wrap_ssequencefx_samplerDEPTH_commonschema_WrapS_TfxSamplerWrapCommon_Wrap) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_wrap_ssequencefx_samplerDEPTH_commonschema_WrapS_TfxSamplerWrapCommon_Wrap; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_sourcesequencefx_samplerDEPTH_commonschema_Source_XsdtNCName_ struct {
	Source xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema source"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sourcesequencefx_samplerDEPTH_commonschema_Source_XsdtNCName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sourcesequencefx_samplerDEPTH_commonschema_Source_XsdtNCName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_sourcesequencefx_samplerDEPTH_commonschema_Source_XsdtNCName_ instance.
func (me *XsdGoPkgHasElem_sourcesequencefx_samplerDEPTH_commonschema_Source_XsdtNCName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sourcesequencefx_samplerDEPTH_commonschema_Source_XsdtNCName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TfxSamplerDEPTHCommon struct {
	XsdGoPkgHasElem_minfiltersequencefx_samplerDEPTH_commonschema_Minfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_wrap_ssequencefx_samplerDEPTH_commonschema_WrapS_TfxSamplerWrapCommon_Wrap

	XsdGoPkgHasElem_sourcesequencefx_samplerDEPTH_commonschema_Source_XsdtNCName_

	XsdGoPkgHasElem_wrap_tsequencefx_samplerDEPTH_commonschema_WrapT_TfxSamplerWrapCommon_Wrap

	XsdGoPkgHasElem_magfiltersequencefx_samplerDEPTH_commonschema_Magfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElems_Extra
}

//	If the WalkHandlers.TfxSamplerDEPTHCommon function is not nil (ie. was set by outside code), calls it with this TfxSamplerDEPTHCommon instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TfxSamplerDEPTHCommon instance.
func (me *TfxSamplerDEPTHCommon) Walk() (err error) {
	if fn := WalkHandlers.TfxSamplerDEPTHCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_minfiltersequencefx_samplerDEPTH_commonschema_Minfilter_TfxSamplerFilterCommon_None.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_wrap_ssequencefx_samplerDEPTH_commonschema_WrapS_TfxSamplerWrapCommon_Wrap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sourcesequencefx_samplerDEPTH_commonschema_Source_XsdtNCName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_wrap_tsequencefx_samplerDEPTH_commonschema_WrapT_TfxSamplerWrapCommon_Wrap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_magfiltersequencefx_samplerDEPTH_commonschema_Magfilter_TfxSamplerFilterCommon_None.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_samplerDEPTHchoicefx_basic_type_commonschema_SamplerDEPTH_TfxSamplerDEPTHCommon_ struct {
	SamplerDEPTH *TfxSamplerDEPTHCommon `xml:"http://www.collada.org/2005/11/COLLADASchema samplerDEPTH"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_samplerDEPTHchoicefx_basic_type_commonschema_SamplerDEPTH_TfxSamplerDEPTHCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_samplerDEPTHchoicefx_basic_type_commonschema_SamplerDEPTH_TfxSamplerDEPTHCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_samplerDEPTHchoicefx_basic_type_commonschema_SamplerDEPTH_TfxSamplerDEPTHCommon_ instance.
func (me *XsdGoPkgHasElem_samplerDEPTHchoicefx_basic_type_commonschema_SamplerDEPTH_TfxSamplerDEPTHCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_samplerDEPTHchoicefx_basic_type_commonschema_SamplerDEPTH_TfxSamplerDEPTHCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SamplerDEPTH.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_intchoicefx_basic_type_commonschema_Int_Tint_ struct {
	Int *Tint `xml:"http://www.collada.org/2005/11/COLLADASchema int"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_intchoicefx_basic_type_commonschema_Int_Tint_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_intchoicefx_basic_type_commonschema_Int_Tint_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_intchoicefx_basic_type_commonschema_Int_Tint_ instance.
func (me *XsdGoPkgHasElem_intchoicefx_basic_type_commonschema_Int_Tint_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_intchoicefx_basic_type_commonschema_Int_Tint_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_float3choicefx_basic_type_commonschema_Float3_Tfloat3_ struct {
	Float3 Tfloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema float3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float3choicefx_basic_type_commonschema_Float3_Tfloat3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float3choicefx_basic_type_commonschema_Float3_Tfloat3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float3choicefx_basic_type_commonschema_Float3_Tfloat3_ instance.
func (me *XsdGoPkgHasElem_float3choicefx_basic_type_commonschema_Float3_Tfloat3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float3choicefx_basic_type_commonschema_Float3_Tfloat3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tfloat4X3 TListOfFloats

//	This convenience method just performs a simple type conversion to Tfloat4X3's alias type TListOfFloats.
func (me Tfloat4X3) ToTListOfFloats() TListOfFloats { return TListOfFloats(me) }

//	Since Tfloat4X3 is just a simple String type, this merely returns the current string value.
func (me Tfloat4X3) String() string { return TListOfFloats(me).String() }

//	Since Tfloat4X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat4X3) Set(s string) { (*TListOfFloats)(me).Set(s) }

type XsdGoPkgHasElem_float4x3choicefx_basic_type_commonschema_Float4X3_Tfloat4X3_ struct {
	Float4X3 Tfloat4X3 `xml:"http://www.collada.org/2005/11/COLLADASchema float4x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float4x3choicefx_basic_type_commonschema_Float4X3_Tfloat4X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float4x3choicefx_basic_type_commonschema_Float4X3_Tfloat4X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float4x3choicefx_basic_type_commonschema_Float4X3_Tfloat4X3_ instance.
func (me *XsdGoPkgHasElem_float4x3choicefx_basic_type_commonschema_Float4X3_Tfloat4X3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float4x3choicefx_basic_type_commonschema_Float4X3_Tfloat4X3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The fx_surface_common type is used to declare a resource that can be used both as the source for texture samples and as the target of a rendering pass.
//	The surface should be sized to a dimension based on this ratio of the viewport's dimensions in pixels
type XsdGoPkgHasElem_viewport_ratiochoicesequencefx_surface_commonschema_ViewportRatio_Tfloat2_11 struct {
	//	The surface should be sized to a dimension based on this ratio of the viewport's dimensions in pixels
	ViewportRatio Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema viewport_ratio"`
}

//	Returns the default value for ViewportRatio -- "1 1"
func (me XsdGoPkgHasElem_viewport_ratiochoicesequencefx_surface_commonschema_ViewportRatio_Tfloat2_11) ViewportRatioDefault() Tfloat2 {
	return Tfloat2("1 1")
}

//	If the WalkHandlers.XsdGoPkgHasElem_viewport_ratiochoicesequencefx_surface_commonschema_ViewportRatio_Tfloat2_11 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_viewport_ratiochoicesequencefx_surface_commonschema_ViewportRatio_Tfloat2_11 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_viewport_ratiochoicesequencefx_surface_commonschema_ViewportRatio_Tfloat2_11 instance.
func (me *XsdGoPkgHasElem_viewport_ratiochoicesequencefx_surface_commonschema_ViewportRatio_Tfloat2_11) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_viewport_ratiochoicesequencefx_surface_commonschema_ViewportRatio_Tfloat2_11; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The surface should be sized to these exact dimensions
type XsdGoPkgHasElem_sizechoicesequencefx_surface_commonschema_Size_Tint3_000 struct {
	//	The surface should be sized to these exact dimensions
	Size Tint3 `xml:"http://www.collada.org/2005/11/COLLADASchema size"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sizechoicesequencefx_surface_commonschema_Size_Tint3_000 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sizechoicesequencefx_surface_commonschema_Size_Tint3_000 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_sizechoicesequencefx_surface_commonschema_Size_Tint3_000 instance.
func (me *XsdGoPkgHasElem_sizechoicesequencefx_surface_commonschema_Size_Tint3_000) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sizechoicesequencefx_surface_commonschema_Size_Tint3_000; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for Size -- "0 0 0"
func (me XsdGoPkgHasElem_sizechoicesequencefx_surface_commonschema_Size_Tint3_000) SizeDefault() Tint3 {
	return Tint3("0 0 0")
}

//	If the exact format cannot be resolved via the "format" element then the format_hint will describe the important features of the format so that the application may select a compatable or close format
//	If the exact format cannot be resolve via other methods then the format_hint will describe the important features of the format so that the application may select a compatable or close format
//	The per-texel layout of the format.  The length of the string indicate how many channels there are and the letter respresents the name of the channel.  There are typically 0 to 4 channels.
//	The per-texel layout of the format.  The length of the string indicate how many channels there are and the letter respresents the name of the channel.  There are typically 0 to 4 channels.
type TfxSurfaceFormatHintChannelsEnum xsdt.String

//	Since TfxSurfaceFormatHintChannelsEnum is just a simple String type, this merely returns the current string value.
func (me TfxSurfaceFormatHintChannelsEnum) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintChannelsEnum is "LA".
func (me TfxSurfaceFormatHintChannelsEnum) IsLa() bool { return me == "LA" }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintChannelsEnum is "XYZW".
func (me TfxSurfaceFormatHintChannelsEnum) IsXyzw() bool { return me == "XYZW" }

//	This convenience method just performs a simple type conversion to TfxSurfaceFormatHintChannelsEnum's alias type xsdt.String.
func (me TfxSurfaceFormatHintChannelsEnum) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintChannelsEnum is "XYZ".
func (me TfxSurfaceFormatHintChannelsEnum) IsXyz() bool { return me == "XYZ" }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintChannelsEnum is "D".
func (me TfxSurfaceFormatHintChannelsEnum) IsD() bool { return me == "D" }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintChannelsEnum is "RGB".
func (me TfxSurfaceFormatHintChannelsEnum) IsRgb() bool { return me == "RGB" }

//	Since TfxSurfaceFormatHintChannelsEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxSurfaceFormatHintChannelsEnum) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintChannelsEnum is "L".
func (me TfxSurfaceFormatHintChannelsEnum) IsL() bool { return me == "L" }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintChannelsEnum is "RGBA".
func (me TfxSurfaceFormatHintChannelsEnum) IsRgba() bool { return me == "RGBA" }

type XsdGoPkgHasElem_channelssequencefx_surface_format_hint_commonschema_Channels_TfxSurfaceFormatHintChannelsEnum_ struct {
	//	The per-texel layout of the format.  The length of the string indicate how many channels there are and the letter respresents the name of the channel.  There are typically 0 to 4 channels.
	Channels TfxSurfaceFormatHintChannelsEnum `xml:"http://www.collada.org/2005/11/COLLADASchema channels"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_channelssequencefx_surface_format_hint_commonschema_Channels_TfxSurfaceFormatHintChannelsEnum_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_channelssequencefx_surface_format_hint_commonschema_Channels_TfxSurfaceFormatHintChannelsEnum_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_channelssequencefx_surface_format_hint_commonschema_Channels_TfxSurfaceFormatHintChannelsEnum_ instance.
func (me *XsdGoPkgHasElem_channelssequencefx_surface_format_hint_commonschema_Channels_TfxSurfaceFormatHintChannelsEnum_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_channelssequencefx_surface_format_hint_commonschema_Channels_TfxSurfaceFormatHintChannelsEnum_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Each channel of the texel has a precision.  Typically these are all linked together.  An exact format lay lower the precision of an individual channel but applying a higher precision by linking the channels together may still convey the same information.
//	Each channel of the texel has a precision.  Typically these are all linked together.  An exact format lay lower the precision of an individual channel but applying a higher precision by linking the channels together may still convey the same information.
type TfxSurfaceFormatHintPrecisionEnum xsdt.String

//	Returns true if the value of this enumerated TfxSurfaceFormatHintPrecisionEnum is "HIGH".
func (me TfxSurfaceFormatHintPrecisionEnum) IsHigh() bool { return me == "HIGH" }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintPrecisionEnum is "MID".
func (me TfxSurfaceFormatHintPrecisionEnum) IsMid() bool { return me == "MID" }

//	This convenience method just performs a simple type conversion to TfxSurfaceFormatHintPrecisionEnum's alias type xsdt.String.
func (me TfxSurfaceFormatHintPrecisionEnum) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TfxSurfaceFormatHintPrecisionEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxSurfaceFormatHintPrecisionEnum) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TfxSurfaceFormatHintPrecisionEnum is just a simple String type, this merely returns the current string value.
func (me TfxSurfaceFormatHintPrecisionEnum) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintPrecisionEnum is "LOW".
func (me TfxSurfaceFormatHintPrecisionEnum) IsLow() bool { return me == "LOW" }

type XsdGoPkgHasElem_precisionsequencefx_surface_format_hint_commonschema_Precision_TfxSurfaceFormatHintPrecisionEnum_ struct {
	//	Each channel of the texel has a precision.  Typically these are all linked together.  An exact format lay lower the precision of an individual channel but applying a higher precision by linking the channels together may still convey the same information.
	Precision TfxSurfaceFormatHintPrecisionEnum `xml:"http://www.collada.org/2005/11/COLLADASchema precision"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_precisionsequencefx_surface_format_hint_commonschema_Precision_TfxSurfaceFormatHintPrecisionEnum_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_precisionsequencefx_surface_format_hint_commonschema_Precision_TfxSurfaceFormatHintPrecisionEnum_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_precisionsequencefx_surface_format_hint_commonschema_Precision_TfxSurfaceFormatHintPrecisionEnum_ instance.
func (me *XsdGoPkgHasElem_precisionsequencefx_surface_format_hint_commonschema_Precision_TfxSurfaceFormatHintPrecisionEnum_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_precisionsequencefx_surface_format_hint_commonschema_Precision_TfxSurfaceFormatHintPrecisionEnum_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Additional hints about data relationships and other things to help the application pick the best format.
//	Additional hints about data relationships and other things to help the application pick the best format.
type TfxSurfaceFormatHintOptionEnum xsdt.String

//	Returns true if the value of this enumerated TfxSurfaceFormatHintOptionEnum is "NORMALIZED4".
func (me TfxSurfaceFormatHintOptionEnum) IsNormalized4() bool { return me == "NORMALIZED4" }

//	This convenience method just performs a simple type conversion to TfxSurfaceFormatHintOptionEnum's alias type xsdt.String.
func (me TfxSurfaceFormatHintOptionEnum) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintOptionEnum is "NORMALIZED3".
func (me TfxSurfaceFormatHintOptionEnum) IsNormalized3() bool { return me == "NORMALIZED3" }

//	Since TfxSurfaceFormatHintOptionEnum is just a simple String type, this merely returns the current string value.
func (me TfxSurfaceFormatHintOptionEnum) String() string { return xsdt.String(me).String() }

//	Since TfxSurfaceFormatHintOptionEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxSurfaceFormatHintOptionEnum) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintOptionEnum is "SRGB_GAMMA".
func (me TfxSurfaceFormatHintOptionEnum) IsSrgbGamma() bool { return me == "SRGB_GAMMA" }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintOptionEnum is "COMPRESSABLE".
func (me TfxSurfaceFormatHintOptionEnum) IsCompressable() bool { return me == "COMPRESSABLE" }

type XsdGoPkgHasElems_optionsequencefx_surface_format_hint_commonschema_Option_TfxSurfaceFormatHintOptionEnum_ struct {
	//	Additional hints about data relationships and other things to help the application pick the best format.
	Options []TfxSurfaceFormatHintOptionEnum `xml:"http://www.collada.org/2005/11/COLLADASchema option"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_optionsequencefx_surface_format_hint_commonschema_Option_TfxSurfaceFormatHintOptionEnum_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_optionsequencefx_surface_format_hint_commonschema_Option_TfxSurfaceFormatHintOptionEnum_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_optionsequencefx_surface_format_hint_commonschema_Option_TfxSurfaceFormatHintOptionEnum_ instance.
func (me *XsdGoPkgHasElems_optionsequencefx_surface_format_hint_commonschema_Option_TfxSurfaceFormatHintOptionEnum_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_optionsequencefx_surface_format_hint_commonschema_Option_TfxSurfaceFormatHintOptionEnum_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Each channel represents a range of values. Some example ranges are signed or unsigned integers, or between between a clamped range such as 0.0f to 1.0f, or high dynamic range via floating point
//	Each channel represents a range of values. Some example ranges are signed or unsigned integers, or between between a clamped range such as 0.0f to 1.0f, or high dynamic range via floating point
type TfxSurfaceFormatHintRangeEnum xsdt.String

//	Returns true if the value of this enumerated TfxSurfaceFormatHintRangeEnum is "FLOAT".
func (me TfxSurfaceFormatHintRangeEnum) IsFloat() bool { return me == "FLOAT" }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintRangeEnum is "SINT".
func (me TfxSurfaceFormatHintRangeEnum) IsSint() bool { return me == "SINT" }

//	This convenience method just performs a simple type conversion to TfxSurfaceFormatHintRangeEnum's alias type xsdt.String.
func (me TfxSurfaceFormatHintRangeEnum) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintRangeEnum is "SNORM".
func (me TfxSurfaceFormatHintRangeEnum) IsSnorm() bool { return me == "SNORM" }

//	Since TfxSurfaceFormatHintRangeEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxSurfaceFormatHintRangeEnum) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintRangeEnum is "UINT".
func (me TfxSurfaceFormatHintRangeEnum) IsUint() bool { return me == "UINT" }

//	Since TfxSurfaceFormatHintRangeEnum is just a simple String type, this merely returns the current string value.
func (me TfxSurfaceFormatHintRangeEnum) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TfxSurfaceFormatHintRangeEnum is "UNORM".
func (me TfxSurfaceFormatHintRangeEnum) IsUnorm() bool { return me == "UNORM" }

type XsdGoPkgHasElem_rangesequencefx_surface_format_hint_commonschema_Range_TfxSurfaceFormatHintRangeEnum_ struct {
	//	Each channel represents a range of values. Some example ranges are signed or unsigned integers, or between between a clamped range such as 0.0f to 1.0f, or high dynamic range via floating point
	Range TfxSurfaceFormatHintRangeEnum `xml:"http://www.collada.org/2005/11/COLLADASchema range"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_rangesequencefx_surface_format_hint_commonschema_Range_TfxSurfaceFormatHintRangeEnum_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_rangesequencefx_surface_format_hint_commonschema_Range_TfxSurfaceFormatHintRangeEnum_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_rangesequencefx_surface_format_hint_commonschema_Range_TfxSurfaceFormatHintRangeEnum_ instance.
func (me *XsdGoPkgHasElem_rangesequencefx_surface_format_hint_commonschema_Range_TfxSurfaceFormatHintRangeEnum_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_rangesequencefx_surface_format_hint_commonschema_Range_TfxSurfaceFormatHintRangeEnum_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TfxSurfaceFormatHintCommon struct {
	XsdGoPkgHasElems_Extra

	//	The per-texel layout of the format.  The length of the string indicate how many channels there are and the letter respresents the name of the channel.  There are typically 0 to 4 channels.
	XsdGoPkgHasElem_channelssequencefx_surface_format_hint_commonschema_Channels_TfxSurfaceFormatHintChannelsEnum_

	//	Each channel of the texel has a precision.  Typically these are all linked together.  An exact format lay lower the precision of an individual channel but applying a higher precision by linking the channels together may still convey the same information.
	XsdGoPkgHasElem_precisionsequencefx_surface_format_hint_commonschema_Precision_TfxSurfaceFormatHintPrecisionEnum_

	//	Additional hints about data relationships and other things to help the application pick the best format.
	XsdGoPkgHasElems_optionsequencefx_surface_format_hint_commonschema_Option_TfxSurfaceFormatHintOptionEnum_

	//	Each channel represents a range of values. Some example ranges are signed or unsigned integers, or between between a clamped range such as 0.0f to 1.0f, or high dynamic range via floating point
	XsdGoPkgHasElem_rangesequencefx_surface_format_hint_commonschema_Range_TfxSurfaceFormatHintRangeEnum_
}

//	If the WalkHandlers.TfxSurfaceFormatHintCommon function is not nil (ie. was set by outside code), calls it with this TfxSurfaceFormatHintCommon instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TfxSurfaceFormatHintCommon instance.
func (me *TfxSurfaceFormatHintCommon) Walk() (err error) {
	if fn := WalkHandlers.TfxSurfaceFormatHintCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_channelssequencefx_surface_format_hint_commonschema_Channels_TfxSurfaceFormatHintChannelsEnum_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_precisionsequencefx_surface_format_hint_commonschema_Precision_TfxSurfaceFormatHintPrecisionEnum_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_optionsequencefx_surface_format_hint_commonschema_Option_TfxSurfaceFormatHintOptionEnum_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_rangesequencefx_surface_format_hint_commonschema_Range_TfxSurfaceFormatHintRangeEnum_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_format_hintsequencefx_surface_commonschema_FormatHint_TfxSurfaceFormatHintCommon_ struct {
	//	If the exact format cannot be resolved via the "format" element then the format_hint will describe the important features of the format so that the application may select a compatable or close format
	FormatHint *TfxSurfaceFormatHintCommon `xml:"http://www.collada.org/2005/11/COLLADASchema format_hint"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_format_hintsequencefx_surface_commonschema_FormatHint_TfxSurfaceFormatHintCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_format_hintsequencefx_surface_commonschema_FormatHint_TfxSurfaceFormatHintCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_format_hintsequencefx_surface_commonschema_FormatHint_TfxSurfaceFormatHintCommon_ instance.
func (me *XsdGoPkgHasElem_format_hintsequencefx_surface_commonschema_FormatHint_TfxSurfaceFormatHintCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_format_hintsequencefx_surface_commonschema_FormatHint_TfxSurfaceFormatHintCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FormatHint.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The common set of initalization options for surfaces.  Choose which is appropriate for your surface based on type and other characteristics. described by the annotation docs on the child elements.
//	This surface is intended to be initialized later externally by a "setparam" element.  If it is used before being initialized there is profile and platform specific behavior.  Most elements on the surface element containing this will be ignored including mip_levels, mipmap_generate, size, viewport_ratio, and format.
type XsdGoPkgHasElem_init_as_nullchoicefx_surface_init_commonschema_InitAsNull_XsdtString_ struct {
	//	This surface is intended to be initialized later externally by a "setparam" element.  If it is used before being initialized there is profile and platform specific behavior.  Most elements on the surface element containing this will be ignored including mip_levels, mipmap_generate, size, viewport_ratio, and format.
	InitAsNull xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema init_as_null"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_init_as_nullchoicefx_surface_init_commonschema_InitAsNull_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_init_as_nullchoicefx_surface_init_commonschema_InitAsNull_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_init_as_nullchoicefx_surface_init_commonschema_InitAsNull_XsdtString_ instance.
func (me *XsdGoPkgHasElem_init_as_nullchoicefx_surface_init_commonschema_InitAsNull_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_init_as_nullchoicefx_surface_init_commonschema_InitAsNull_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Init a CUBE from a compound image such as DDS
//	Init each face mipchain with one compound image such as DDS
type XsdGoPkgHasAttr_Ref_XsdtIdref_ struct {
	Ref xsdt.Idref `xml:"http://www.collada.org/2005/11/COLLADASchema ref,attr"`
}

type TxsdFxSurfaceInitCubeCommonChoiceFace struct {
	XsdGoPkgHasAttr_Ref_XsdtIdref_
}

//	If the WalkHandlers.TxsdFxSurfaceInitCubeCommonChoiceFace function is not nil (ie. was set by outside code), calls it with this TxsdFxSurfaceInitCubeCommonChoiceFace instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TxsdFxSurfaceInitCubeCommonChoiceFace instance.
func (me *TxsdFxSurfaceInitCubeCommonChoiceFace) Walk() (err error) {
	if fn := WalkHandlers.TxsdFxSurfaceInitCubeCommonChoiceFace; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_facechoicefx_surface_init_cube_commonschema_Face_TxsdFxSurfaceInitCubeCommonChoiceFace_ struct {
	//	Init each face mipchain with one compound image such as DDS
	Faces []*TxsdFxSurfaceInitCubeCommonChoiceFace `xml:"http://www.collada.org/2005/11/COLLADASchema face"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_facechoicefx_surface_init_cube_commonschema_Face_TxsdFxSurfaceInitCubeCommonChoiceFace_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_facechoicefx_surface_init_cube_commonschema_Face_TxsdFxSurfaceInitCubeCommonChoiceFace_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_facechoicefx_surface_init_cube_commonschema_Face_TxsdFxSurfaceInitCubeCommonChoiceFace_ instance.
func (me *XsdGoPkgHasElems_facechoicefx_surface_init_cube_commonschema_Face_TxsdFxSurfaceInitCubeCommonChoiceFace_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_facechoicefx_surface_init_cube_commonschema_Face_TxsdFxSurfaceInitCubeCommonChoiceFace_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Faces {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Init the entire surface with one compound image such as DDS
type XsdGoPkgHasElem_allchoicefx_surface_init_cube_commonschema_All_TxsdFxSurfaceInitCubeCommonChoiceAll_ struct {
	//	Init the entire surface with one compound image such as DDS
	All *TxsdFxSurfaceInitCubeCommonChoiceFace `xml:"http://www.collada.org/2005/11/COLLADASchema all"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_allchoicefx_surface_init_cube_commonschema_All_TxsdFxSurfaceInitCubeCommonChoiceAll_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_allchoicefx_surface_init_cube_commonschema_All_TxsdFxSurfaceInitCubeCommonChoiceAll_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_allchoicefx_surface_init_cube_commonschema_All_TxsdFxSurfaceInitCubeCommonChoiceAll_ instance.
func (me *XsdGoPkgHasElem_allchoicefx_surface_init_cube_commonschema_All_TxsdFxSurfaceInitCubeCommonChoiceAll_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_allchoicefx_surface_init_cube_commonschema_All_TxsdFxSurfaceInitCubeCommonChoiceAll_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.All.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Init all primary mip level 0 subsurfaces with one compound image such as DDS.  Use of this element expects that the surface has element mip_levels=0 or mipmap_generate.
//	If the image dues not natively describe the face ordering then this series of order elements will describe which face the index belongs too
type TfxSurfaceFaceEnum xsdt.String

//	Returns true if the value of this enumerated TfxSurfaceFaceEnum is "POSITIVE_Z".
func (me TfxSurfaceFaceEnum) IsPositiveZ() bool { return me == "POSITIVE_Z" }

//	This convenience method just performs a simple type conversion to TfxSurfaceFaceEnum's alias type xsdt.String.
func (me TfxSurfaceFaceEnum) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TfxSurfaceFaceEnum is "NEGATIVE_Z".
func (me TfxSurfaceFaceEnum) IsNegativeZ() bool { return me == "NEGATIVE_Z" }

//	Returns true if the value of this enumerated TfxSurfaceFaceEnum is "POSITIVE_X".
func (me TfxSurfaceFaceEnum) IsPositiveX() bool { return me == "POSITIVE_X" }

//	Since TfxSurfaceFaceEnum is just a simple String type, this merely returns the current string value.
func (me TfxSurfaceFaceEnum) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TfxSurfaceFaceEnum is "NEGATIVE_Y".
func (me TfxSurfaceFaceEnum) IsNegativeY() bool { return me == "NEGATIVE_Y" }

//	Returns true if the value of this enumerated TfxSurfaceFaceEnum is "NEGATIVE_X".
func (me TfxSurfaceFaceEnum) IsNegativeX() bool { return me == "NEGATIVE_X" }

//	Returns true if the value of this enumerated TfxSurfaceFaceEnum is "POSITIVE_Y".
func (me TfxSurfaceFaceEnum) IsPositiveY() bool { return me == "POSITIVE_Y" }

//	Since TfxSurfaceFaceEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxSurfaceFaceEnum) Set(s string) { (*xsdt.String)(me).Set(s) }

type XsdGoPkgHasElems_ordersequenceprimarychoicefx_surface_init_cube_commonschema_Order_TfxSurfaceFaceEnum_ struct {
	//	If the image dues not natively describe the face ordering then this series of order elements will describe which face the index belongs too
	Orders []TfxSurfaceFaceEnum `xml:"http://www.collada.org/2005/11/COLLADASchema order"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ordersequenceprimarychoicefx_surface_init_cube_commonschema_Order_TfxSurfaceFaceEnum_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ordersequenceprimarychoicefx_surface_init_cube_commonschema_Order_TfxSurfaceFaceEnum_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ordersequenceprimarychoicefx_surface_init_cube_commonschema_Order_TfxSurfaceFaceEnum_ instance.
func (me *XsdGoPkgHasElems_ordersequenceprimarychoicefx_surface_init_cube_commonschema_Order_TfxSurfaceFaceEnum_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ordersequenceprimarychoicefx_surface_init_cube_commonschema_Order_TfxSurfaceFaceEnum_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFxSurfaceInitCubeCommonChoicePrimary struct {
	XsdGoPkgHasAttr_Ref_XsdtIdref_

	//	This sequence exists to allow the order elements to be optional but require that if they exist there must be 6 of them.
	//	If the image dues not natively describe the face ordering then this series of order elements will describe which face the index belongs too
	XsdGoPkgHasElems_ordersequenceprimarychoicefx_surface_init_cube_commonschema_Order_TfxSurfaceFaceEnum_
}

//	If the WalkHandlers.TxsdFxSurfaceInitCubeCommonChoicePrimary function is not nil (ie. was set by outside code), calls it with this TxsdFxSurfaceInitCubeCommonChoicePrimary instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TxsdFxSurfaceInitCubeCommonChoicePrimary instance.
func (me *TxsdFxSurfaceInitCubeCommonChoicePrimary) Walk() (err error) {
	if fn := WalkHandlers.TxsdFxSurfaceInitCubeCommonChoicePrimary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_ordersequenceprimarychoicefx_surface_init_cube_commonschema_Order_TfxSurfaceFaceEnum_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_primarychoicefx_surface_init_cube_commonschema_Primary_TxsdFxSurfaceInitCubeCommonChoicePrimary_ struct {
	//	Init all primary mip level 0 subsurfaces with one compound image such as DDS.  Use of this element expects that the surface has element mip_levels=0 or mipmap_generate.
	Primary *TxsdFxSurfaceInitCubeCommonChoicePrimary `xml:"http://www.collada.org/2005/11/COLLADASchema primary"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_primarychoicefx_surface_init_cube_commonschema_Primary_TxsdFxSurfaceInitCubeCommonChoicePrimary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_primarychoicefx_surface_init_cube_commonschema_Primary_TxsdFxSurfaceInitCubeCommonChoicePrimary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_primarychoicefx_surface_init_cube_commonschema_Primary_TxsdFxSurfaceInitCubeCommonChoicePrimary_ instance.
func (me *XsdGoPkgHasElem_primarychoicefx_surface_init_cube_commonschema_Primary_TxsdFxSurfaceInitCubeCommonChoicePrimary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_primarychoicefx_surface_init_cube_commonschema_Primary_TxsdFxSurfaceInitCubeCommonChoicePrimary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Primary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TfxSurfaceInitCubeCommon struct {
	//	Init the entire surface with one compound image such as DDS
	XsdGoPkgHasElem_allchoicefx_surface_init_cube_commonschema_All_TxsdFxSurfaceInitCubeCommonChoiceAll_

	//	Init all primary mip level 0 subsurfaces with one compound image such as DDS.  Use of this element expects that the surface has element mip_levels=0 or mipmap_generate.
	XsdGoPkgHasElem_primarychoicefx_surface_init_cube_commonschema_Primary_TxsdFxSurfaceInitCubeCommonChoicePrimary_

	//	Init each face mipchain with one compound image such as DDS
	XsdGoPkgHasElems_facechoicefx_surface_init_cube_commonschema_Face_TxsdFxSurfaceInitCubeCommonChoiceFace_
}

//	If the WalkHandlers.TfxSurfaceInitCubeCommon function is not nil (ie. was set by outside code), calls it with this TfxSurfaceInitCubeCommon instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TfxSurfaceInitCubeCommon instance.
func (me *TfxSurfaceInitCubeCommon) Walk() (err error) {
	if fn := WalkHandlers.TfxSurfaceInitCubeCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_facechoicefx_surface_init_cube_commonschema_Face_TxsdFxSurfaceInitCubeCommonChoiceFace_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_allchoicefx_surface_init_cube_commonschema_All_TxsdFxSurfaceInitCubeCommonChoiceAll_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_primarychoicefx_surface_init_cube_commonschema_Primary_TxsdFxSurfaceInitCubeCommonChoicePrimary_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_init_cubechoicefx_surface_init_commonschema_InitCube_TfxSurfaceInitCubeCommon_ struct {
	//	Init a CUBE from a compound image such as DDS
	InitCube *TfxSurfaceInitCubeCommon `xml:"http://www.collada.org/2005/11/COLLADASchema init_cube"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_init_cubechoicefx_surface_init_commonschema_InitCube_TfxSurfaceInitCubeCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_init_cubechoicefx_surface_init_commonschema_InitCube_TfxSurfaceInitCubeCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_init_cubechoicefx_surface_init_commonschema_InitCube_TfxSurfaceInitCubeCommon_ instance.
func (me *XsdGoPkgHasElem_init_cubechoicefx_surface_init_commonschema_InitCube_TfxSurfaceInitCubeCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_init_cubechoicefx_surface_init_commonschema_InitCube_TfxSurfaceInitCubeCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.InitCube.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Init a 3D from a compound image such as DDS
//	Init the entire surface with one compound image such as DDS
type XsdGoPkgHasElem_allchoicefx_surface_init_volume_commonschema_All_TxsdFxSurfaceInitVolumeCommonChoiceAll_ struct {
	//	Init the entire surface with one compound image such as DDS
	All *TxsdFxSurfaceInitCubeCommonChoiceFace `xml:"http://www.collada.org/2005/11/COLLADASchema all"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_allchoicefx_surface_init_volume_commonschema_All_TxsdFxSurfaceInitVolumeCommonChoiceAll_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_allchoicefx_surface_init_volume_commonschema_All_TxsdFxSurfaceInitVolumeCommonChoiceAll_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_allchoicefx_surface_init_volume_commonschema_All_TxsdFxSurfaceInitVolumeCommonChoiceAll_ instance.
func (me *XsdGoPkgHasElem_allchoicefx_surface_init_volume_commonschema_All_TxsdFxSurfaceInitVolumeCommonChoiceAll_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_allchoicefx_surface_init_volume_commonschema_All_TxsdFxSurfaceInitVolumeCommonChoiceAll_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.All.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Init mip level 0 of the surface with one compound image such as DDS.  Use of this element expects that the surface has element mip_levels=0 or mipmap_generate.
type XsdGoPkgHasElem_primarychoicefx_surface_init_volume_commonschema_Primary_TxsdFxSurfaceInitVolumeCommonChoicePrimary_ struct {
	//	Init mip level 0 of the surface with one compound image such as DDS.  Use of this element expects that the surface has element mip_levels=0 or mipmap_generate.
	Primary *TxsdFxSurfaceInitCubeCommonChoiceFace `xml:"http://www.collada.org/2005/11/COLLADASchema primary"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_primarychoicefx_surface_init_volume_commonschema_Primary_TxsdFxSurfaceInitVolumeCommonChoicePrimary_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_primarychoicefx_surface_init_volume_commonschema_Primary_TxsdFxSurfaceInitVolumeCommonChoicePrimary_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_primarychoicefx_surface_init_volume_commonschema_Primary_TxsdFxSurfaceInitVolumeCommonChoicePrimary_ instance.
func (me *XsdGoPkgHasElem_primarychoicefx_surface_init_volume_commonschema_Primary_TxsdFxSurfaceInitVolumeCommonChoicePrimary_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_primarychoicefx_surface_init_volume_commonschema_Primary_TxsdFxSurfaceInitVolumeCommonChoicePrimary_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Primary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TfxSurfaceInitVolumeCommon struct {
	//	Init the entire surface with one compound image such as DDS
	XsdGoPkgHasElem_allchoicefx_surface_init_volume_commonschema_All_TxsdFxSurfaceInitVolumeCommonChoiceAll_

	//	Init mip level 0 of the surface with one compound image such as DDS.  Use of this element expects that the surface has element mip_levels=0 or mipmap_generate.
	XsdGoPkgHasElem_primarychoicefx_surface_init_volume_commonschema_Primary_TxsdFxSurfaceInitVolumeCommonChoicePrimary_
}

//	If the WalkHandlers.TfxSurfaceInitVolumeCommon function is not nil (ie. was set by outside code), calls it with this TfxSurfaceInitVolumeCommon instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TfxSurfaceInitVolumeCommon instance.
func (me *TfxSurfaceInitVolumeCommon) Walk() (err error) {
	if fn := WalkHandlers.TfxSurfaceInitVolumeCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_primarychoicefx_surface_init_volume_commonschema_Primary_TxsdFxSurfaceInitVolumeCommonChoicePrimary_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_allchoicefx_surface_init_volume_commonschema_All_TxsdFxSurfaceInitVolumeCommonChoiceAll_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_init_volumechoicefx_surface_init_commonschema_InitVolume_TfxSurfaceInitVolumeCommon_ struct {
	//	Init a 3D from a compound image such as DDS
	InitVolume *TfxSurfaceInitVolumeCommon `xml:"http://www.collada.org/2005/11/COLLADASchema init_volume"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_init_volumechoicefx_surface_init_commonschema_InitVolume_TfxSurfaceInitVolumeCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_init_volumechoicefx_surface_init_commonschema_InitVolume_TfxSurfaceInitVolumeCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_init_volumechoicefx_surface_init_commonschema_InitVolume_TfxSurfaceInitVolumeCommon_ instance.
func (me *XsdGoPkgHasElem_init_volumechoicefx_surface_init_commonschema_InitVolume_TfxSurfaceInitVolumeCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_init_volumechoicefx_surface_init_commonschema_InitVolume_TfxSurfaceInitVolumeCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.InitVolume.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Init as a target for depth, stencil, or color.  It does not need image data. Surface should not have mipmap_generate when using this.
type XsdGoPkgHasElem_init_as_targetchoicefx_surface_init_commonschema_InitAsTarget_XsdtString_ struct {
	//	Init as a target for depth, stencil, or color.  It does not need image data. Surface should not have mipmap_generate when using this.
	InitAsTarget xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema init_as_target"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_init_as_targetchoicefx_surface_init_commonschema_InitAsTarget_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_init_as_targetchoicefx_surface_init_commonschema_InitAsTarget_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_init_as_targetchoicefx_surface_init_commonschema_InitAsTarget_XsdtString_ instance.
func (me *XsdGoPkgHasElem_init_as_targetchoicefx_surface_init_commonschema_InitAsTarget_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_init_as_targetchoicefx_surface_init_commonschema_InitAsTarget_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Init a 1D,2D,RECT,DEPTH from a compound image such as DDS
//	For 1D, 2D, RECT surface types
//	Init the entire surface with one compound image such as DDS
type XsdGoPkgHasElem_allchoicefx_surface_init_planar_commonschema_All_TxsdFxSurfaceInitPlanarCommonChoiceAll_ struct {
	//	Init the entire surface with one compound image such as DDS
	All *TxsdFxSurfaceInitCubeCommonChoiceFace `xml:"http://www.collada.org/2005/11/COLLADASchema all"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_allchoicefx_surface_init_planar_commonschema_All_TxsdFxSurfaceInitPlanarCommonChoiceAll_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_allchoicefx_surface_init_planar_commonschema_All_TxsdFxSurfaceInitPlanarCommonChoiceAll_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_allchoicefx_surface_init_planar_commonschema_All_TxsdFxSurfaceInitPlanarCommonChoiceAll_ instance.
func (me *XsdGoPkgHasElem_allchoicefx_surface_init_planar_commonschema_All_TxsdFxSurfaceInitPlanarCommonChoiceAll_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_allchoicefx_surface_init_planar_commonschema_All_TxsdFxSurfaceInitPlanarCommonChoiceAll_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.All.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TfxSurfaceInitPlanarCommon struct {
	//	This choice exists for consistancy with other init types (volume and cube).  When other initialization methods are needed.
	//	Init the entire surface with one compound image such as DDS
	XsdGoPkgHasElem_allchoicefx_surface_init_planar_commonschema_All_TxsdFxSurfaceInitPlanarCommonChoiceAll_
}

//	If the WalkHandlers.TfxSurfaceInitPlanarCommon function is not nil (ie. was set by outside code), calls it with this TfxSurfaceInitPlanarCommon instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TfxSurfaceInitPlanarCommon instance.
func (me *TfxSurfaceInitPlanarCommon) Walk() (err error) {
	if fn := WalkHandlers.TfxSurfaceInitPlanarCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_allchoicefx_surface_init_planar_commonschema_All_TxsdFxSurfaceInitPlanarCommonChoiceAll_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_init_planarchoicefx_surface_init_commonschema_InitPlanar_TfxSurfaceInitPlanarCommon_ struct {
	//	Init a 1D,2D,RECT,DEPTH from a compound image such as DDS
	InitPlanar *TfxSurfaceInitPlanarCommon `xml:"http://www.collada.org/2005/11/COLLADASchema init_planar"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_init_planarchoicefx_surface_init_commonschema_InitPlanar_TfxSurfaceInitPlanarCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_init_planarchoicefx_surface_init_commonschema_InitPlanar_TfxSurfaceInitPlanarCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_init_planarchoicefx_surface_init_commonschema_InitPlanar_TfxSurfaceInitPlanarCommon_ instance.
func (me *XsdGoPkgHasElem_init_planarchoicefx_surface_init_commonschema_InitPlanar_TfxSurfaceInitPlanarCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_init_planarchoicefx_surface_init_commonschema_InitPlanar_TfxSurfaceInitPlanarCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.InitPlanar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Initialize the surface one sub-surface at a time by specifying combinations of mip, face, and slice which make sense for a particular surface type.  Each sub-surface is initialized by a common 2D image, not a complex compound image such as DDS. If not all subsurfaces are initialized, it is invalid and will result in profile and platform specific behavior unless mipmap_generate is responsible for initializing the remainder of the sub-surfaces
//	This element is an IDREF which specifies the image to use to initialize a specific mip of a 1D or 2D surface, 3D slice, or Cube face.
type XsdGoPkgHasAttr_Mip_XsdtUnsignedInt_0 struct {
	Mip xsdt.UnsignedInt `xml:"http://www.collada.org/2005/11/COLLADASchema mip,attr"`
}

//	Returns the default value for Mip -- 0
func (me XsdGoPkgHasAttr_Mip_XsdtUnsignedInt_0) MipDefault() xsdt.UnsignedInt {
	return xsdt.UnsignedInt(0)
}

type XsdGoPkgHasAttr_Slice_XsdtUnsignedInt_0 struct {
	Slice xsdt.UnsignedInt `xml:"http://www.collada.org/2005/11/COLLADASchema slice,attr"`
}

//	Returns the default value for Slice -- 0
func (me XsdGoPkgHasAttr_Slice_XsdtUnsignedInt_0) SliceDefault() xsdt.UnsignedInt {
	return xsdt.UnsignedInt(0)
}

type XsdGoPkgHasAttr_Face_TfxSurfaceFaceEnum_PositiveX struct {
	Face TfxSurfaceFaceEnum `xml:"http://www.collada.org/2005/11/COLLADASchema face,attr"`
}

//	Returns the default value for Face -- "POSITIVE_X"
func (me XsdGoPkgHasAttr_Face_TfxSurfaceFaceEnum_PositiveX) FaceDefault() TfxSurfaceFaceEnum {
	return TfxSurfaceFaceEnum("POSITIVE_X")
}

type TfxSurfaceInitFromCommon struct {
	XsdGoPkgValue xsdt.Idref `xml:",chardata"`

	XsdGoPkgHasAttr_Face_TfxSurfaceFaceEnum_PositiveX

	XsdGoPkgHasAttr_Mip_XsdtUnsignedInt_0

	XsdGoPkgHasAttr_Slice_XsdtUnsignedInt_0
}

//	If the WalkHandlers.TfxSurfaceInitFromCommon function is not nil (ie. was set by outside code), calls it with this TfxSurfaceInitFromCommon instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/1 field(s) belonging to this TfxSurfaceInitFromCommon instance.
func (me *TfxSurfaceInitFromCommon) Walk() (err error) {
	if fn := WalkHandlers.TfxSurfaceInitFromCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TfxSurfaceInitFromCommon) ToXsdtIdref() xsdt.Idref { return me.XsdGoPkgValue }

type XsdGoPkgHasElems_init_fromchoicefx_surface_init_commonschema_InitFrom_TfxSurfaceInitFromCommon_ struct {
	//	Initialize the surface one sub-surface at a time by specifying combinations of mip, face, and slice which make sense for a particular surface type.  Each sub-surface is initialized by a common 2D image, not a complex compound image such as DDS. If not all subsurfaces are initialized, it is invalid and will result in profile and platform specific behavior unless mipmap_generate is responsible for initializing the remainder of the sub-surfaces
	InitFroms []*TfxSurfaceInitFromCommon `xml:"http://www.collada.org/2005/11/COLLADASchema init_from"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_init_fromchoicefx_surface_init_commonschema_InitFrom_TfxSurfaceInitFromCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_init_fromchoicefx_surface_init_commonschema_InitFrom_TfxSurfaceInitFromCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_init_fromchoicefx_surface_init_commonschema_InitFrom_TfxSurfaceInitFromCommon_ instance.
func (me *XsdGoPkgHasElems_init_fromchoicefx_surface_init_commonschema_InitFrom_TfxSurfaceInitFromCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_init_fromchoicefx_surface_init_commonschema_InitFrom_TfxSurfaceInitFromCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.InitFroms {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasGroup_FxSurfaceInitCommon struct {
	//	Init as a target for depth, stencil, or color.  It does not need image data. Surface should not have mipmap_generate when using this.
	XsdGoPkgHasElem_init_as_targetchoicefx_surface_init_commonschema_InitAsTarget_XsdtString_

	//	Init a 1D,2D,RECT,DEPTH from a compound image such as DDS
	XsdGoPkgHasElem_init_planarchoicefx_surface_init_commonschema_InitPlanar_TfxSurfaceInitPlanarCommon_

	//	Initialize the surface one sub-surface at a time by specifying combinations of mip, face, and slice which make sense for a particular surface type.  Each sub-surface is initialized by a common 2D image, not a complex compound image such as DDS. If not all subsurfaces are initialized, it is invalid and will result in profile and platform specific behavior unless mipmap_generate is responsible for initializing the remainder of the sub-surfaces
	XsdGoPkgHasElems_init_fromchoicefx_surface_init_commonschema_InitFrom_TfxSurfaceInitFromCommon_

	//	This surface is intended to be initialized later externally by a "setparam" element.  If it is used before being initialized there is profile and platform specific behavior.  Most elements on the surface element containing this will be ignored including mip_levels, mipmap_generate, size, viewport_ratio, and format.
	XsdGoPkgHasElem_init_as_nullchoicefx_surface_init_commonschema_InitAsNull_XsdtString_

	//	Init a CUBE from a compound image such as DDS
	XsdGoPkgHasElem_init_cubechoicefx_surface_init_commonschema_InitCube_TfxSurfaceInitCubeCommon_

	//	Init a 3D from a compound image such as DDS
	XsdGoPkgHasElem_init_volumechoicefx_surface_init_commonschema_InitVolume_TfxSurfaceInitVolumeCommon_
}

//	If the WalkHandlers.XsdGoPkgHasGroup_FxSurfaceInitCommon function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_FxSurfaceInitCommon instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_FxSurfaceInitCommon instance.
func (me *XsdGoPkgHasGroup_FxSurfaceInitCommon) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasGroup_FxSurfaceInitCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_init_as_targetchoicefx_surface_init_commonschema_InitAsTarget_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_init_planarchoicefx_surface_init_commonschema_InitPlanar_TfxSurfaceInitPlanarCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_init_fromchoicefx_surface_init_commonschema_InitFrom_TfxSurfaceInitFromCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_init_as_nullchoicefx_surface_init_commonschema_InitAsNull_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_init_cubechoicefx_surface_init_commonschema_InitCube_TfxSurfaceInitCubeCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_init_volumechoicefx_surface_init_commonschema_InitVolume_TfxSurfaceInitVolumeCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	By default it is assumed that mipmaps are supplied by the author so, if not all subsurfaces are initialized, it is invalid and will result in profile and platform specific behavior unless mipmap_generate is responsible for initializing the remainder of the sub-surfaces
type XsdGoPkgHasElem_mipmap_generatesequencefx_surface_commonschema_MipmapGenerate_XsdtBoolean_ struct {
	//	By default it is assumed that mipmaps are supplied by the author so, if not all subsurfaces are initialized, it is invalid and will result in profile and platform specific behavior unless mipmap_generate is responsible for initializing the remainder of the sub-surfaces
	MipmapGenerate xsdt.Boolean `xml:"http://www.collada.org/2005/11/COLLADASchema mipmap_generate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_mipmap_generatesequencefx_surface_commonschema_MipmapGenerate_XsdtBoolean_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mipmap_generatesequencefx_surface_commonschema_MipmapGenerate_XsdtBoolean_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_mipmap_generatesequencefx_surface_commonschema_MipmapGenerate_XsdtBoolean_ instance.
func (me *XsdGoPkgHasElem_mipmap_generatesequencefx_surface_commonschema_MipmapGenerate_XsdtBoolean_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_mipmap_generatesequencefx_surface_commonschema_MipmapGenerate_XsdtBoolean_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Specifying the type of a surface is mandatory though the type may be "UNTYPED".  When a surface is typed as UNTYPED, it is said to be temporarily untyped and instead will be typed later by the context it is used in such as which samplers reference it in that are used in a particular technique or pass.   If there is a type mismatch between what is set into it later and what the runtime decides the type should be the result in profile and platform specific behavior.
type TfxSurfaceTypeEnum xsdt.String

//	Since TfxSurfaceTypeEnum is just a simple String type, this merely returns the current string value.
func (me TfxSurfaceTypeEnum) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TfxSurfaceTypeEnum is "3D".
func (me TfxSurfaceTypeEnum) Is3D() bool { return me == "3D" }

//	Returns true if the value of this enumerated TfxSurfaceTypeEnum is "RECT".
func (me TfxSurfaceTypeEnum) IsRect() bool { return me == "RECT" }

//	Returns true if the value of this enumerated TfxSurfaceTypeEnum is "2D".
func (me TfxSurfaceTypeEnum) Is2D() bool { return me == "2D" }

//	This convenience method just performs a simple type conversion to TfxSurfaceTypeEnum's alias type xsdt.String.
func (me TfxSurfaceTypeEnum) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TfxSurfaceTypeEnum is "UNTYPED".
func (me TfxSurfaceTypeEnum) IsUntyped() bool { return me == "UNTYPED" }

//	Since TfxSurfaceTypeEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxSurfaceTypeEnum) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TfxSurfaceTypeEnum is "1D".
func (me TfxSurfaceTypeEnum) Is1D() bool { return me == "1D" }

//	Returns true if the value of this enumerated TfxSurfaceTypeEnum is "DEPTH".
func (me TfxSurfaceTypeEnum) IsDepth() bool { return me == "DEPTH" }

//	Returns true if the value of this enumerated TfxSurfaceTypeEnum is "CUBE".
func (me TfxSurfaceTypeEnum) IsCube() bool { return me == "CUBE" }

type XsdGoPkgHasAttr_Type_TfxSurfaceTypeEnum_ struct {
	//	Specifying the type of a surface is mandatory though the type may be "UNTYPED".  When a surface is typed as UNTYPED, it is said to be temporarily untyped and instead will be typed later by the context it is used in such as which samplers reference it in that are used in a particular technique or pass.   If there is a type mismatch between what is set into it later and what the runtime decides the type should be the result in profile and platform specific behavior.
	Type TfxSurfaceTypeEnum `xml:"http://www.collada.org/2005/11/COLLADASchema type,attr"`
}

//	the surface should contain the following number of MIP levels.  If this element is not present it is assumed that all miplevels exist until a dimension becomes 1 texel.  To create a surface that has only one level of mip maps (mip=0) set this to 1.  If the value is 0 the result is the same as if mip_levels was unspecified, all possible mip_levels will exist.
type XsdGoPkgHasElem_mip_levelssequencefx_surface_commonschema_MipLevels_XsdtUnsignedInt_0 struct {
	//	the surface should contain the following number of MIP levels.  If this element is not present it is assumed that all miplevels exist until a dimension becomes 1 texel.  To create a surface that has only one level of mip maps (mip=0) set this to 1.  If the value is 0 the result is the same as if mip_levels was unspecified, all possible mip_levels will exist.
	MipLevels xsdt.UnsignedInt `xml:"http://www.collada.org/2005/11/COLLADASchema mip_levels"`
}

//	Returns the default value for MipLevels -- 0
func (me XsdGoPkgHasElem_mip_levelssequencefx_surface_commonschema_MipLevels_XsdtUnsignedInt_0) MipLevelsDefault() xsdt.UnsignedInt {
	return xsdt.UnsignedInt(0)
}

//	If the WalkHandlers.XsdGoPkgHasElem_mip_levelssequencefx_surface_commonschema_MipLevels_XsdtUnsignedInt_0 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mip_levelssequencefx_surface_commonschema_MipLevels_XsdtUnsignedInt_0 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_mip_levelssequencefx_surface_commonschema_MipLevels_XsdtUnsignedInt_0 instance.
func (me *XsdGoPkgHasElem_mip_levelssequencefx_surface_commonschema_MipLevels_XsdtUnsignedInt_0) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_mip_levelssequencefx_surface_commonschema_MipLevels_XsdtUnsignedInt_0; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Contains a string representing the profile and platform specific texel format that the author would like this surface to use.  If this element is not specified then the application will use a common format R8G8B8A8 with linear color gradient, not  sRGB.
type XsdGoPkgHasElem_formatsequencefx_surface_commonschema_Format_XsdtToken_ struct {
	//	Contains a string representing the profile and platform specific texel format that the author would like this surface to use.  If this element is not specified then the application will use a common format R8G8B8A8 with linear color gradient, not  sRGB.
	Format xsdt.Token `xml:"http://www.collada.org/2005/11/COLLADASchema format"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_formatsequencefx_surface_commonschema_Format_XsdtToken_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_formatsequencefx_surface_commonschema_Format_XsdtToken_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_formatsequencefx_surface_commonschema_Format_XsdtToken_ instance.
func (me *XsdGoPkgHasElem_formatsequencefx_surface_commonschema_Format_XsdtToken_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_formatsequencefx_surface_commonschema_Format_XsdtToken_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TfxSurfaceCommon struct {
	//	The surface should be sized to a dimension based on this ratio of the viewport's dimensions in pixels
	XsdGoPkgHasElem_viewport_ratiochoicesequencefx_surface_commonschema_ViewportRatio_Tfloat2_11

	//	The surface should be sized to these exact dimensions
	XsdGoPkgHasElem_sizechoicesequencefx_surface_commonschema_Size_Tint3_000

	//	If the exact format cannot be resolved via the "format" element then the format_hint will describe the important features of the format so that the application may select a compatable or close format
	XsdGoPkgHasElem_format_hintsequencefx_surface_commonschema_FormatHint_TfxSurfaceFormatHintCommon_

	//	The common set of initalization options for surfaces.  Choose which is appropriate for your surface based on the type attribute and other characteristics described by the annotation docs on the choiced child elements of this type.
	XsdGoPkgHasGroup_FxSurfaceInitCommon

	//	By default it is assumed that mipmaps are supplied by the author so, if not all subsurfaces are initialized, it is invalid and will result in profile and platform specific behavior unless mipmap_generate is responsible for initializing the remainder of the sub-surfaces
	XsdGoPkgHasElem_mipmap_generatesequencefx_surface_commonschema_MipmapGenerate_XsdtBoolean_

	//	Specifying the type of a surface is mandatory though the type may be "UNTYPED".  When a surface is typed as UNTYPED, it is said to be temporarily untyped and instead will be typed later by the context it is used in such as which samplers reference it in that are used in a particular technique or pass.   If there is a type mismatch between what is set into it later and what the runtime decides the type should be the result in profile and platform specific behavior.
	XsdGoPkgHasAttr_Type_TfxSurfaceTypeEnum_

	XsdGoPkgHasElems_Extra

	//	the surface should contain the following number of MIP levels.  If this element is not present it is assumed that all miplevels exist until a dimension becomes 1 texel.  To create a surface that has only one level of mip maps (mip=0) set this to 1.  If the value is 0 the result is the same as if mip_levels was unspecified, all possible mip_levels will exist.
	XsdGoPkgHasElem_mip_levelssequencefx_surface_commonschema_MipLevels_XsdtUnsignedInt_0

	//	Contains a string representing the profile and platform specific texel format that the author would like this surface to use.  If this element is not specified then the application will use a common format R8G8B8A8 with linear color gradient, not  sRGB.
	XsdGoPkgHasElem_formatsequencefx_surface_commonschema_Format_XsdtToken_
}

//	If the WalkHandlers.TfxSurfaceCommon function is not nil (ie. was set by outside code), calls it with this TfxSurfaceCommon instance as the single argument. Then calls the Walk() method on 8/9 embed(s) and 0/0 field(s) belonging to this TfxSurfaceCommon instance.
func (me *TfxSurfaceCommon) Walk() (err error) {
	if fn := WalkHandlers.TfxSurfaceCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_format_hintsequencefx_surface_commonschema_FormatHint_TfxSurfaceFormatHintCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroup_FxSurfaceInitCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_mipmap_generatesequencefx_surface_commonschema_MipmapGenerate_XsdtBoolean_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_mip_levelssequencefx_surface_commonschema_MipLevels_XsdtUnsignedInt_0.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_formatsequencefx_surface_commonschema_Format_XsdtToken_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_viewport_ratiochoicesequencefx_surface_commonschema_ViewportRatio_Tfloat2_11.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sizechoicesequencefx_surface_commonschema_Size_Tint3_000.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_surfacechoicefx_basic_type_commonschema_Surface_TfxSurfaceCommon_ struct {
	Surface *TfxSurfaceCommon `xml:"http://www.collada.org/2005/11/COLLADASchema surface"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_surfacechoicefx_basic_type_commonschema_Surface_TfxSurfaceCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_surfacechoicefx_basic_type_commonschema_Surface_TfxSurfaceCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_surfacechoicefx_basic_type_commonschema_Surface_TfxSurfaceCommon_ instance.
func (me *XsdGoPkgHasElem_surfacechoicefx_basic_type_commonschema_Surface_TfxSurfaceCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_surfacechoicefx_basic_type_commonschema_Surface_TfxSurfaceCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Surface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tfloat3X4 TListOfFloats

//	This convenience method just performs a simple type conversion to Tfloat3X4's alias type TListOfFloats.
func (me Tfloat3X4) ToTListOfFloats() TListOfFloats { return TListOfFloats(me) }

//	Since Tfloat3X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat3X4) Set(s string) { (*TListOfFloats)(me).Set(s) }

//	Since Tfloat3X4 is just a simple String type, this merely returns the current string value.
func (me Tfloat3X4) String() string { return TListOfFloats(me).String() }

type XsdGoPkgHasElem_float3x4choicefx_basic_type_commonschema_Float3X4_Tfloat3X4_ struct {
	Float3X4 Tfloat3X4 `xml:"http://www.collada.org/2005/11/COLLADASchema float3x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float3x4choicefx_basic_type_commonschema_Float3X4_Tfloat3X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float3x4choicefx_basic_type_commonschema_Float3X4_Tfloat3X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float3x4choicefx_basic_type_commonschema_Float3X4_Tfloat3X4_ instance.
func (me *XsdGoPkgHasElem_float3x4choicefx_basic_type_commonschema_Float3X4_Tfloat3X4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float3x4choicefx_basic_type_commonschema_Float3X4_Tfloat3X4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tint4 TListOfInts

//	Since Tint4 is just a simple String type, this merely returns the current string value.
func (me Tint4) String() string { return TListOfInts(me).String() }

//	Since Tint4 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tint4) Set(s string) { (*TListOfInts)(me).Set(s) }

//	This convenience method just performs a simple type conversion to Tint4's alias type TListOfInts.
func (me Tint4) ToTListOfInts() TListOfInts { return TListOfInts(me) }

type XsdGoPkgHasElem_int4choicefx_basic_type_commonschema_Int4_Tint4_ struct {
	Int4 Tint4 `xml:"http://www.collada.org/2005/11/COLLADASchema int4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int4choicefx_basic_type_commonschema_Int4_Tint4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int4choicefx_basic_type_commonschema_Int4_Tint4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int4choicefx_basic_type_commonschema_Int4_Tint4_ instance.
func (me *XsdGoPkgHasElem_int4choicefx_basic_type_commonschema_Int4_Tint4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int4choicefx_basic_type_commonschema_Int4_Tint4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_boolchoicefx_basic_type_commonschema_Bool_Tbool_ struct {
	Bool *Tbool `xml:"http://www.collada.org/2005/11/COLLADASchema bool"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_boolchoicefx_basic_type_commonschema_Bool_Tbool_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_boolchoicefx_basic_type_commonschema_Bool_Tbool_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_boolchoicefx_basic_type_commonschema_Bool_Tbool_ instance.
func (me *XsdGoPkgHasElem_boolchoicefx_basic_type_commonschema_Bool_Tbool_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_boolchoicefx_basic_type_commonschema_Bool_Tbool_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A one-dimensional texture sampler.
type TfxColorCommon Tfloat4

//	This convenience method just performs a simple type conversion to TfxColorCommon's alias type Tfloat4.
func (me TfxColorCommon) ToTfloat4() Tfloat4 { return Tfloat4(me) }

//	Since TfxColorCommon is just a simple String type, this merely returns the current string value.
func (me TfxColorCommon) String() string { return Tfloat4(me).String() }

//	Since TfxColorCommon is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxColorCommon) Set(s string) { (*Tfloat4)(me).Set(s) }

type XsdGoPkgHasElem_border_colorsequencefx_sampler1D_commonschema_BorderColor_TfxColorCommon_ struct {
	BorderColor TfxColorCommon `xml:"http://www.collada.org/2005/11/COLLADASchema border_color"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_border_colorsequencefx_sampler1D_commonschema_BorderColor_TfxColorCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_border_colorsequencefx_sampler1D_commonschema_BorderColor_TfxColorCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_border_colorsequencefx_sampler1D_commonschema_BorderColor_TfxColorCommon_ instance.
func (me *XsdGoPkgHasElem_border_colorsequencefx_sampler1D_commonschema_BorderColor_TfxColorCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_border_colorsequencefx_sampler1D_commonschema_BorderColor_TfxColorCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler1D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_0 struct {
	MipmapMaxlevel xsdt.UnsignedByte `xml:"http://www.collada.org/2005/11/COLLADASchema mipmap_maxlevel"`
}

//	Returns the default value for MipmapMaxlevel -- 0
func (me XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler1D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_0) MipmapMaxlevelDefault() xsdt.UnsignedByte {
	return xsdt.UnsignedByte(0)
}

//	If the WalkHandlers.XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler1D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_0 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler1D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_0 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler1D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_0 instance.
func (me *XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler1D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_0) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler1D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_0; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_mipmap_biassequencefx_sampler1D_commonschema_MipmapBias_XsdtFloat_00 struct {
	MipmapBias xsdt.Float `xml:"http://www.collada.org/2005/11/COLLADASchema mipmap_bias"`
}

//	Returns the default value for MipmapBias -- 0.0
func (me XsdGoPkgHasElem_mipmap_biassequencefx_sampler1D_commonschema_MipmapBias_XsdtFloat_00) MipmapBiasDefault() xsdt.Float {
	return xsdt.Float(0.0)
}

//	If the WalkHandlers.XsdGoPkgHasElem_mipmap_biassequencefx_sampler1D_commonschema_MipmapBias_XsdtFloat_00 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mipmap_biassequencefx_sampler1D_commonschema_MipmapBias_XsdtFloat_00 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_mipmap_biassequencefx_sampler1D_commonschema_MipmapBias_XsdtFloat_00 instance.
func (me *XsdGoPkgHasElem_mipmap_biassequencefx_sampler1D_commonschema_MipmapBias_XsdtFloat_00) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_mipmap_biassequencefx_sampler1D_commonschema_MipmapBias_XsdtFloat_00; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_mipfiltersequencefx_sampler1D_commonschema_Mipfilter_TfxSamplerFilterCommon_None struct {
	Mipfilter TfxSamplerFilterCommon `xml:"http://www.collada.org/2005/11/COLLADASchema mipfilter"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_mipfiltersequencefx_sampler1D_commonschema_Mipfilter_TfxSamplerFilterCommon_None function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mipfiltersequencefx_sampler1D_commonschema_Mipfilter_TfxSamplerFilterCommon_None instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_mipfiltersequencefx_sampler1D_commonschema_Mipfilter_TfxSamplerFilterCommon_None instance.
func (me *XsdGoPkgHasElem_mipfiltersequencefx_sampler1D_commonschema_Mipfilter_TfxSamplerFilterCommon_None) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_mipfiltersequencefx_sampler1D_commonschema_Mipfilter_TfxSamplerFilterCommon_None; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for Mipfilter -- "NONE"
func (me XsdGoPkgHasElem_mipfiltersequencefx_sampler1D_commonschema_Mipfilter_TfxSamplerFilterCommon_None) MipfilterDefault() TfxSamplerFilterCommon {
	return TfxSamplerFilterCommon("NONE")
}

type TfxSampler1DCommon struct {
	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElem_border_colorsequencefx_sampler1D_commonschema_BorderColor_TfxColorCommon_

	XsdGoPkgHasElem_wrap_ssequencefx_samplerDEPTH_commonschema_WrapS_TfxSamplerWrapCommon_Wrap

	XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler1D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_0

	XsdGoPkgHasElem_sourcesequencefx_samplerDEPTH_commonschema_Source_XsdtNCName_

	XsdGoPkgHasElem_mipmap_biassequencefx_sampler1D_commonschema_MipmapBias_XsdtFloat_00

	XsdGoPkgHasElem_mipfiltersequencefx_sampler1D_commonschema_Mipfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_magfiltersequencefx_samplerDEPTH_commonschema_Magfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_minfiltersequencefx_samplerDEPTH_commonschema_Minfilter_TfxSamplerFilterCommon_None
}

//	If the WalkHandlers.TfxSampler1DCommon function is not nil (ie. was set by outside code), calls it with this TfxSampler1DCommon instance as the single argument. Then calls the Walk() method on 9/9 embed(s) and 0/0 field(s) belonging to this TfxSampler1DCommon instance.
func (me *TfxSampler1DCommon) Walk() (err error) {
	if fn := WalkHandlers.TfxSampler1DCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_wrap_ssequencefx_samplerDEPTH_commonschema_WrapS_TfxSamplerWrapCommon_Wrap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler1D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_0.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sourcesequencefx_samplerDEPTH_commonschema_Source_XsdtNCName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_mipmap_biassequencefx_sampler1D_commonschema_MipmapBias_XsdtFloat_00.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_mipfiltersequencefx_sampler1D_commonschema_Mipfilter_TfxSamplerFilterCommon_None.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_magfiltersequencefx_samplerDEPTH_commonschema_Magfilter_TfxSamplerFilterCommon_None.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_minfiltersequencefx_samplerDEPTH_commonschema_Minfilter_TfxSamplerFilterCommon_None.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_border_colorsequencefx_sampler1D_commonschema_BorderColor_TfxColorCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_sampler1Dchoicefx_basic_type_commonschema_Sampler1D_TfxSampler1DCommon_ struct {
	Sampler1D *TfxSampler1DCommon `xml:"http://www.collada.org/2005/11/COLLADASchema sampler1D"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sampler1Dchoicefx_basic_type_commonschema_Sampler1D_TfxSampler1DCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sampler1Dchoicefx_basic_type_commonschema_Sampler1D_TfxSampler1DCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sampler1Dchoicefx_basic_type_commonschema_Sampler1D_TfxSampler1DCommon_ instance.
func (me *XsdGoPkgHasElem_sampler1Dchoicefx_basic_type_commonschema_Sampler1D_TfxSampler1DCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sampler1Dchoicefx_basic_type_commonschema_Sampler1D_TfxSampler1DCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Sampler1D.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_float4choicefx_basic_type_commonschema_Float4_Tfloat4_ struct {
	Float4 Tfloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema float4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float4choicefx_basic_type_commonschema_Float4_Tfloat4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float4choicefx_basic_type_commonschema_Float4_Tfloat4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float4choicefx_basic_type_commonschema_Float4_Tfloat4_ instance.
func (me *XsdGoPkgHasElem_float4choicefx_basic_type_commonschema_Float4_Tfloat4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float4choicefx_basic_type_commonschema_Float4_Tfloat4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tfloat4X2 TListOfFloats

//	Since Tfloat4X2 is just a simple String type, this merely returns the current string value.
func (me Tfloat4X2) String() string { return TListOfFloats(me).String() }

//	This convenience method just performs a simple type conversion to Tfloat4X2's alias type TListOfFloats.
func (me Tfloat4X2) ToTListOfFloats() TListOfFloats { return TListOfFloats(me) }

//	Since Tfloat4X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat4X2) Set(s string) { (*TListOfFloats)(me).Set(s) }

type XsdGoPkgHasElem_float4x2choicefx_basic_type_commonschema_Float4X2_Tfloat4X2_ struct {
	Float4X2 Tfloat4X2 `xml:"http://www.collada.org/2005/11/COLLADASchema float4x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float4x2choicefx_basic_type_commonschema_Float4X2_Tfloat4X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float4x2choicefx_basic_type_commonschema_Float4X2_Tfloat4X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float4x2choicefx_basic_type_commonschema_Float4X2_Tfloat4X2_ instance.
func (me *XsdGoPkgHasElem_float4x2choicefx_basic_type_commonschema_Float4X2_Tfloat4X2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float4x2choicefx_basic_type_commonschema_Float4X2_Tfloat4X2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A three-dimensional texture sampler.
type XsdGoPkgHasElem_wrap_psequencefx_sampler3D_commonschema_WrapP_TfxSamplerWrapCommon_Wrap struct {
	WrapP TfxSamplerWrapCommon `xml:"http://www.collada.org/2005/11/COLLADASchema wrap_p"`
}

//	Returns the default value for WrapP -- "WRAP"
func (me XsdGoPkgHasElem_wrap_psequencefx_sampler3D_commonschema_WrapP_TfxSamplerWrapCommon_Wrap) WrapPDefault() TfxSamplerWrapCommon {
	return TfxSamplerWrapCommon("WRAP")
}

//	If the WalkHandlers.XsdGoPkgHasElem_wrap_psequencefx_sampler3D_commonschema_WrapP_TfxSamplerWrapCommon_Wrap function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_wrap_psequencefx_sampler3D_commonschema_WrapP_TfxSamplerWrapCommon_Wrap instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_wrap_psequencefx_sampler3D_commonschema_WrapP_TfxSamplerWrapCommon_Wrap instance.
func (me *XsdGoPkgHasElem_wrap_psequencefx_sampler3D_commonschema_WrapP_TfxSamplerWrapCommon_Wrap) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_wrap_psequencefx_sampler3D_commonschema_WrapP_TfxSamplerWrapCommon_Wrap; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler3D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255 struct {
	MipmapMaxlevel xsdt.UnsignedByte `xml:"http://www.collada.org/2005/11/COLLADASchema mipmap_maxlevel"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler3D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler3D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler3D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255 instance.
func (me *XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler3D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler3D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for MipmapMaxlevel -- 255
func (me XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler3D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255) MipmapMaxlevelDefault() xsdt.UnsignedByte {
	return xsdt.UnsignedByte(255)
}

type TfxSampler3DCommon struct {
	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElem_wrap_psequencefx_sampler3D_commonschema_WrapP_TfxSamplerWrapCommon_Wrap

	XsdGoPkgHasElem_border_colorsequencefx_sampler1D_commonschema_BorderColor_TfxColorCommon_

	XsdGoPkgHasElem_magfiltersequencefx_samplerDEPTH_commonschema_Magfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler3D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255

	XsdGoPkgHasElem_wrap_tsequencefx_samplerDEPTH_commonschema_WrapT_TfxSamplerWrapCommon_Wrap

	XsdGoPkgHasElem_mipmap_biassequencefx_sampler1D_commonschema_MipmapBias_XsdtFloat_00

	XsdGoPkgHasElem_minfiltersequencefx_samplerDEPTH_commonschema_Minfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_sourcesequencefx_samplerDEPTH_commonschema_Source_XsdtNCName_

	XsdGoPkgHasElem_wrap_ssequencefx_samplerDEPTH_commonschema_WrapS_TfxSamplerWrapCommon_Wrap

	XsdGoPkgHasElem_mipfiltersequencefx_sampler1D_commonschema_Mipfilter_TfxSamplerFilterCommon_None
}

//	If the WalkHandlers.TfxSampler3DCommon function is not nil (ie. was set by outside code), calls it with this TfxSampler3DCommon instance as the single argument. Then calls the Walk() method on 11/11 embed(s) and 0/0 field(s) belonging to this TfxSampler3DCommon instance.
func (me *TfxSampler3DCommon) Walk() (err error) {
	if fn := WalkHandlers.TfxSampler3DCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_wrap_psequencefx_sampler3D_commonschema_WrapP_TfxSamplerWrapCommon_Wrap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_border_colorsequencefx_sampler1D_commonschema_BorderColor_TfxColorCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_magfiltersequencefx_samplerDEPTH_commonschema_Magfilter_TfxSamplerFilterCommon_None.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler3D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_wrap_tsequencefx_samplerDEPTH_commonschema_WrapT_TfxSamplerWrapCommon_Wrap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_mipmap_biassequencefx_sampler1D_commonschema_MipmapBias_XsdtFloat_00.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_minfiltersequencefx_samplerDEPTH_commonschema_Minfilter_TfxSamplerFilterCommon_None.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sourcesequencefx_samplerDEPTH_commonschema_Source_XsdtNCName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_wrap_ssequencefx_samplerDEPTH_commonschema_WrapS_TfxSamplerWrapCommon_Wrap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_mipfiltersequencefx_sampler1D_commonschema_Mipfilter_TfxSamplerFilterCommon_None.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_sampler3Dchoicefx_basic_type_commonschema_Sampler3D_TfxSampler3DCommon_ struct {
	Sampler3D *TfxSampler3DCommon `xml:"http://www.collada.org/2005/11/COLLADASchema sampler3D"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sampler3Dchoicefx_basic_type_commonschema_Sampler3D_TfxSampler3DCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sampler3Dchoicefx_basic_type_commonschema_Sampler3D_TfxSampler3DCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sampler3Dchoicefx_basic_type_commonschema_Sampler3D_TfxSampler3DCommon_ instance.
func (me *XsdGoPkgHasElem_sampler3Dchoicefx_basic_type_commonschema_Sampler3D_TfxSampler3DCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sampler3Dchoicefx_basic_type_commonschema_Sampler3D_TfxSampler3DCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Sampler3D.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_float1x1choicefx_basic_type_commonschema_Float1X1_Tfloat_ struct {
	Float1X1 *Tfloat `xml:"http://www.collada.org/2005/11/COLLADASchema float1x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float1x1choicefx_basic_type_commonschema_Float1X1_Tfloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float1x1choicefx_basic_type_commonschema_Float1X1_Tfloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float1x1choicefx_basic_type_commonschema_Float1X1_Tfloat_ instance.
func (me *XsdGoPkgHasElem_float1x1choicefx_basic_type_commonschema_Float1X1_Tfloat_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float1x1choicefx_basic_type_commonschema_Float1X1_Tfloat_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A two-dimensional texture sampler.
type TfxSamplerRECTCommon struct {
	XsdGoPkgHasElem_wrap_ssequencefx_samplerDEPTH_commonschema_WrapS_TfxSamplerWrapCommon_Wrap

	XsdGoPkgHasElem_mipmap_biassequencefx_sampler1D_commonschema_MipmapBias_XsdtFloat_00

	XsdGoPkgHasElem_sourcesequencefx_samplerDEPTH_commonschema_Source_XsdtNCName_

	XsdGoPkgHasElem_minfiltersequencefx_samplerDEPTH_commonschema_Minfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_mipfiltersequencefx_sampler1D_commonschema_Mipfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_magfiltersequencefx_samplerDEPTH_commonschema_Magfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_border_colorsequencefx_sampler1D_commonschema_BorderColor_TfxColorCommon_

	XsdGoPkgHasElem_wrap_tsequencefx_samplerDEPTH_commonschema_WrapT_TfxSamplerWrapCommon_Wrap

	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler3D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255
}

//	If the WalkHandlers.TfxSamplerRECTCommon function is not nil (ie. was set by outside code), calls it with this TfxSamplerRECTCommon instance as the single argument. Then calls the Walk() method on 10/10 embed(s) and 0/0 field(s) belonging to this TfxSamplerRECTCommon instance.
func (me *TfxSamplerRECTCommon) Walk() (err error) {
	if fn := WalkHandlers.TfxSamplerRECTCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_wrap_ssequencefx_samplerDEPTH_commonschema_WrapS_TfxSamplerWrapCommon_Wrap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_mipmap_biassequencefx_sampler1D_commonschema_MipmapBias_XsdtFloat_00.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sourcesequencefx_samplerDEPTH_commonschema_Source_XsdtNCName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_minfiltersequencefx_samplerDEPTH_commonschema_Minfilter_TfxSamplerFilterCommon_None.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_mipfiltersequencefx_sampler1D_commonschema_Mipfilter_TfxSamplerFilterCommon_None.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_magfiltersequencefx_samplerDEPTH_commonschema_Magfilter_TfxSamplerFilterCommon_None.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_border_colorsequencefx_sampler1D_commonschema_BorderColor_TfxColorCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_wrap_tsequencefx_samplerDEPTH_commonschema_WrapT_TfxSamplerWrapCommon_Wrap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler3D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_samplerRECTchoicefx_basic_type_commonschema_SamplerRECT_TfxSamplerRECTCommon_ struct {
	SamplerRECT *TfxSamplerRECTCommon `xml:"http://www.collada.org/2005/11/COLLADASchema samplerRECT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_samplerRECTchoicefx_basic_type_commonschema_SamplerRECT_TfxSamplerRECTCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_samplerRECTchoicefx_basic_type_commonschema_SamplerRECT_TfxSamplerRECTCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_samplerRECTchoicefx_basic_type_commonschema_SamplerRECT_TfxSamplerRECTCommon_ instance.
func (me *XsdGoPkgHasElem_samplerRECTchoicefx_basic_type_commonschema_SamplerRECT_TfxSamplerRECTCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_samplerRECTchoicefx_basic_type_commonschema_SamplerRECT_TfxSamplerRECTCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SamplerRECT.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A texture sampler for cube maps.
type TfxSamplerCUBECommon struct {
	XsdGoPkgHasElem_mipmap_biassequencefx_sampler1D_commonschema_MipmapBias_XsdtFloat_00

	XsdGoPkgHasElem_sourcesequencefx_samplerDEPTH_commonschema_Source_XsdtNCName_

	XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler3D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255

	XsdGoPkgHasElem_magfiltersequencefx_samplerDEPTH_commonschema_Magfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_wrap_psequencefx_sampler3D_commonschema_WrapP_TfxSamplerWrapCommon_Wrap

	XsdGoPkgHasElem_wrap_tsequencefx_samplerDEPTH_commonschema_WrapT_TfxSamplerWrapCommon_Wrap

	XsdGoPkgHasElem_minfiltersequencefx_samplerDEPTH_commonschema_Minfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElem_border_colorsequencefx_sampler1D_commonschema_BorderColor_TfxColorCommon_

	XsdGoPkgHasElem_mipfiltersequencefx_sampler1D_commonschema_Mipfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_wrap_ssequencefx_samplerDEPTH_commonschema_WrapS_TfxSamplerWrapCommon_Wrap
}

//	If the WalkHandlers.TfxSamplerCUBECommon function is not nil (ie. was set by outside code), calls it with this TfxSamplerCUBECommon instance as the single argument. Then calls the Walk() method on 11/11 embed(s) and 0/0 field(s) belonging to this TfxSamplerCUBECommon instance.
func (me *TfxSamplerCUBECommon) Walk() (err error) {
	if fn := WalkHandlers.TfxSamplerCUBECommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_wrap_tsequencefx_samplerDEPTH_commonschema_WrapT_TfxSamplerWrapCommon_Wrap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_minfiltersequencefx_samplerDEPTH_commonschema_Minfilter_TfxSamplerFilterCommon_None.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_border_colorsequencefx_sampler1D_commonschema_BorderColor_TfxColorCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_mipfiltersequencefx_sampler1D_commonschema_Mipfilter_TfxSamplerFilterCommon_None.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_wrap_ssequencefx_samplerDEPTH_commonschema_WrapS_TfxSamplerWrapCommon_Wrap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_mipmap_biassequencefx_sampler1D_commonschema_MipmapBias_XsdtFloat_00.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sourcesequencefx_samplerDEPTH_commonschema_Source_XsdtNCName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler3D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_magfiltersequencefx_samplerDEPTH_commonschema_Magfilter_TfxSamplerFilterCommon_None.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_wrap_psequencefx_sampler3D_commonschema_WrapP_TfxSamplerWrapCommon_Wrap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_samplerCUBEchoicefx_basic_type_commonschema_SamplerCUBE_TfxSamplerCUBECommon_ struct {
	SamplerCUBE *TfxSamplerCUBECommon `xml:"http://www.collada.org/2005/11/COLLADASchema samplerCUBE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_samplerCUBEchoicefx_basic_type_commonschema_SamplerCUBE_TfxSamplerCUBECommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_samplerCUBEchoicefx_basic_type_commonschema_SamplerCUBE_TfxSamplerCUBECommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_samplerCUBEchoicefx_basic_type_commonschema_SamplerCUBE_TfxSamplerCUBECommon_ instance.
func (me *XsdGoPkgHasElem_samplerCUBEchoicefx_basic_type_commonschema_SamplerCUBE_TfxSamplerCUBECommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_samplerCUBEchoicefx_basic_type_commonschema_SamplerCUBE_TfxSamplerCUBECommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SamplerCUBE.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tfloat2X4 TListOfFloats

//	Since Tfloat2X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tfloat2X4) Set(s string) { (*TListOfFloats)(me).Set(s) }

//	This convenience method just performs a simple type conversion to Tfloat2X4's alias type TListOfFloats.
func (me Tfloat2X4) ToTListOfFloats() TListOfFloats { return TListOfFloats(me) }

//	Since Tfloat2X4 is just a simple String type, this merely returns the current string value.
func (me Tfloat2X4) String() string { return TListOfFloats(me).String() }

type XsdGoPkgHasElem_float2x4choicefx_basic_type_commonschema_Float2X4_Tfloat2X4_ struct {
	Float2X4 Tfloat2X4 `xml:"http://www.collada.org/2005/11/COLLADASchema float2x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float2x4choicefx_basic_type_commonschema_Float2X4_Tfloat2X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float2x4choicefx_basic_type_commonschema_Float2X4_Tfloat2X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float2x4choicefx_basic_type_commonschema_Float2X4_Tfloat2X4_ instance.
func (me *XsdGoPkgHasElem_float2x4choicefx_basic_type_commonschema_Float2X4_Tfloat2X4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float2x4choicefx_basic_type_commonschema_Float2X4_Tfloat2X4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_float3x3choicefx_basic_type_commonschema_Float3X3_Tfloat3X3_ struct {
	Float3X3 Tfloat3X3 `xml:"http://www.collada.org/2005/11/COLLADASchema float3x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float3x3choicefx_basic_type_commonschema_Float3X3_Tfloat3X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float3x3choicefx_basic_type_commonschema_Float3X3_Tfloat3X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float3x3choicefx_basic_type_commonschema_Float3X3_Tfloat3X3_ instance.
func (me *XsdGoPkgHasElem_float3x3choicefx_basic_type_commonschema_Float3X3_Tfloat3X3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float3x3choicefx_basic_type_commonschema_Float3X3_Tfloat3X3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_float1x4choicefx_basic_type_commonschema_Float1X4_Tfloat4_ struct {
	Float1X4 Tfloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema float1x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float1x4choicefx_basic_type_commonschema_Float1X4_Tfloat4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float1x4choicefx_basic_type_commonschema_Float1X4_Tfloat4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float1x4choicefx_basic_type_commonschema_Float1X4_Tfloat4_ instance.
func (me *XsdGoPkgHasElem_float1x4choicefx_basic_type_commonschema_Float1X4_Tfloat4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float1x4choicefx_basic_type_commonschema_Float1X4_Tfloat4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tbool3 TListOfBools

//	This convenience method just performs a simple type conversion to Tbool3's alias type TListOfBools.
func (me Tbool3) ToTListOfBools() TListOfBools { return TListOfBools(me) }

//	Since Tbool3 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tbool3) Set(s string) { (*TListOfBools)(me).Set(s) }

//	Since Tbool3 is just a simple String type, this merely returns the current string value.
func (me Tbool3) String() string { return TListOfBools(me).String() }

type XsdGoPkgHasElem_bool3choicefx_basic_type_commonschema_Bool3_Tbool3_ struct {
	Bool3 Tbool3 `xml:"http://www.collada.org/2005/11/COLLADASchema bool3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool3choicefx_basic_type_commonschema_Bool3_Tbool3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool3choicefx_basic_type_commonschema_Bool3_Tbool3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool3choicefx_basic_type_commonschema_Bool3_Tbool3_ instance.
func (me *XsdGoPkgHasElem_bool3choicefx_basic_type_commonschema_Bool3_Tbool3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool3choicefx_basic_type_commonschema_Bool3_Tbool3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tint2 TListOfInts

//	Since Tint2 is just a simple String type, this merely returns the current string value.
func (me Tint2) String() string { return TListOfInts(me).String() }

//	This convenience method just performs a simple type conversion to Tint2's alias type TListOfInts.
func (me Tint2) ToTListOfInts() TListOfInts { return TListOfInts(me) }

//	Since Tint2 is just a simple String type, this merely sets the current value from the specified string.
func (me *Tint2) Set(s string) { (*TListOfInts)(me).Set(s) }

type XsdGoPkgHasElem_int2choicefx_basic_type_commonschema_Int2_Tint2_ struct {
	Int2 Tint2 `xml:"http://www.collada.org/2005/11/COLLADASchema int2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int2choicefx_basic_type_commonschema_Int2_Tint2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int2choicefx_basic_type_commonschema_Int2_Tint2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int2choicefx_basic_type_commonschema_Int2_Tint2_ instance.
func (me *XsdGoPkgHasElem_int2choicefx_basic_type_commonschema_Int2_Tint2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int2choicefx_basic_type_commonschema_Int2_Tint2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A two-dimensional texture sampler.
type TfxSampler2DCommon struct {
	XsdGoPkgHasElem_magfiltersequencefx_samplerDEPTH_commonschema_Magfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_border_colorsequencefx_sampler1D_commonschema_BorderColor_TfxColorCommon_

	XsdGoPkgHasElem_sourcesequencefx_samplerDEPTH_commonschema_Source_XsdtNCName_

	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElem_wrap_tsequencefx_samplerDEPTH_commonschema_WrapT_TfxSamplerWrapCommon_Wrap

	XsdGoPkgHasElem_mipmap_biassequencefx_sampler1D_commonschema_MipmapBias_XsdtFloat_00

	XsdGoPkgHasElem_mipfiltersequencefx_sampler1D_commonschema_Mipfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_wrap_ssequencefx_samplerDEPTH_commonschema_WrapS_TfxSamplerWrapCommon_Wrap

	XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler3D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255

	XsdGoPkgHasElem_minfiltersequencefx_samplerDEPTH_commonschema_Minfilter_TfxSamplerFilterCommon_None
}

//	If the WalkHandlers.TfxSampler2DCommon function is not nil (ie. was set by outside code), calls it with this TfxSampler2DCommon instance as the single argument. Then calls the Walk() method on 10/10 embed(s) and 0/0 field(s) belonging to this TfxSampler2DCommon instance.
func (me *TfxSampler2DCommon) Walk() (err error) {
	if fn := WalkHandlers.TfxSampler2DCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_wrap_ssequencefx_samplerDEPTH_commonschema_WrapS_TfxSamplerWrapCommon_Wrap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler3D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_minfiltersequencefx_samplerDEPTH_commonschema_Minfilter_TfxSamplerFilterCommon_None.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_magfiltersequencefx_samplerDEPTH_commonschema_Magfilter_TfxSamplerFilterCommon_None.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_border_colorsequencefx_sampler1D_commonschema_BorderColor_TfxColorCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sourcesequencefx_samplerDEPTH_commonschema_Source_XsdtNCName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_wrap_tsequencefx_samplerDEPTH_commonschema_WrapT_TfxSamplerWrapCommon_Wrap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_mipmap_biassequencefx_sampler1D_commonschema_MipmapBias_XsdtFloat_00.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_mipfiltersequencefx_sampler1D_commonschema_Mipfilter_TfxSamplerFilterCommon_None.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_sampler2Dchoicefx_basic_type_commonschema_Sampler2D_TfxSampler2DCommon_ struct {
	Sampler2D *TfxSampler2DCommon `xml:"http://www.collada.org/2005/11/COLLADASchema sampler2D"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sampler2Dchoicefx_basic_type_commonschema_Sampler2D_TfxSampler2DCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sampler2Dchoicefx_basic_type_commonschema_Sampler2D_TfxSampler2DCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sampler2Dchoicefx_basic_type_commonschema_Sampler2D_TfxSampler2DCommon_ instance.
func (me *XsdGoPkgHasElem_sampler2Dchoicefx_basic_type_commonschema_Sampler2D_TfxSampler2DCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sampler2Dchoicefx_basic_type_commonschema_Sampler2D_TfxSampler2DCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Sampler2D.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_float4x1choicefx_basic_type_commonschema_Float4X1_Tfloat4_ struct {
	Float4X1 Tfloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema float4x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float4x1choicefx_basic_type_commonschema_Float4X1_Tfloat4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float4x1choicefx_basic_type_commonschema_Float4X1_Tfloat4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float4x1choicefx_basic_type_commonschema_Float4X1_Tfloat4_ instance.
func (me *XsdGoPkgHasElem_float4x1choicefx_basic_type_commonschema_Float4X1_Tfloat4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float4x1choicefx_basic_type_commonschema_Float4X1_Tfloat4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_float2choicefx_basic_type_commonschema_Float2_Tfloat2_ struct {
	Float2 Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema float2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float2choicefx_basic_type_commonschema_Float2_Tfloat2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float2choicefx_basic_type_commonschema_Float2_Tfloat2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float2choicefx_basic_type_commonschema_Float2_Tfloat2_ instance.
func (me *XsdGoPkgHasElem_float2choicefx_basic_type_commonschema_Float2_Tfloat2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float2choicefx_basic_type_commonschema_Float2_Tfloat2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_float1x3choicefx_basic_type_commonschema_Float1X3_Tfloat3_ struct {
	Float1X3 Tfloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema float1x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float1x3choicefx_basic_type_commonschema_Float1X3_Tfloat3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float1x3choicefx_basic_type_commonschema_Float1X3_Tfloat3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float1x3choicefx_basic_type_commonschema_Float1X3_Tfloat3_ instance.
func (me *XsdGoPkgHasElem_float1x3choicefx_basic_type_commonschema_Float1X3_Tfloat3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float1x3choicefx_basic_type_commonschema_Float1X3_Tfloat3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasGroup_FxBasicTypeCommon struct {
	XsdGoPkgHasElem_float2x2choicefx_basic_type_commonschema_Float2X2_Tfloat2X2_

	XsdGoPkgHasElem_bool4choicefx_basic_type_commonschema_Bool4_Tbool4_

	XsdGoPkgHasElem_floatchoicefx_basic_type_commonschema_Float_Tfloat_

	XsdGoPkgHasElem_samplerDEPTHchoicefx_basic_type_commonschema_SamplerDEPTH_TfxSamplerDEPTHCommon_

	XsdGoPkgHasElem_intchoicefx_basic_type_commonschema_Int_Tint_

	XsdGoPkgHasElem_float3choicefx_basic_type_commonschema_Float3_Tfloat3_

	XsdGoPkgHasElem_float4x3choicefx_basic_type_commonschema_Float4X3_Tfloat4X3_

	XsdGoPkgHasElem_surfacechoicefx_basic_type_commonschema_Surface_TfxSurfaceCommon_

	XsdGoPkgHasElem_float3x4choicefx_basic_type_commonschema_Float3X4_Tfloat3X4_

	XsdGoPkgHasElem_int4choicefx_basic_type_commonschema_Int4_Tint4_

	XsdGoPkgHasElem_boolchoicefx_basic_type_commonschema_Bool_Tbool_

	XsdGoPkgHasElem_sampler1Dchoicefx_basic_type_commonschema_Sampler1D_TfxSampler1DCommon_

	XsdGoPkgHasElem_float4choicefx_basic_type_commonschema_Float4_Tfloat4_

	XsdGoPkgHasElem_float4x2choicefx_basic_type_commonschema_Float4X2_Tfloat4X2_

	XsdGoPkgHasElem_sampler3Dchoicefx_basic_type_commonschema_Sampler3D_TfxSampler3DCommon_

	XsdGoPkgHasElem_float1x1choicefx_basic_type_commonschema_Float1X1_Tfloat_

	XsdGoPkgHasElem_samplerRECTchoicefx_basic_type_commonschema_SamplerRECT_TfxSamplerRECTCommon_

	XsdGoPkgHasElem_samplerCUBEchoicefx_basic_type_commonschema_SamplerCUBE_TfxSamplerCUBECommon_

	XsdGoPkgHasElem_float2x4choicefx_basic_type_commonschema_Float2X4_Tfloat2X4_

	XsdGoPkgHasElem_float3x3choicefx_basic_type_commonschema_Float3X3_Tfloat3X3_

	XsdGoPkgHasElem_float1x4choicefx_basic_type_commonschema_Float1X4_Tfloat4_

	XsdGoPkgHasElem_bool3choicefx_basic_type_commonschema_Bool3_Tbool3_

	XsdGoPkgHasElem_int2choicefx_basic_type_commonschema_Int2_Tint2_

	XsdGoPkgHasElem_sampler2Dchoicefx_basic_type_commonschema_Sampler2D_TfxSampler2DCommon_

	XsdGoPkgHasElem_float4x1choicefx_basic_type_commonschema_Float4X1_Tfloat4_

	XsdGoPkgHasElem_float2choicefx_basic_type_commonschema_Float2_Tfloat2_

	XsdGoPkgHasElem_float1x3choicefx_basic_type_commonschema_Float1X3_Tfloat3_

	XsdGoPkgHasElem_int3choicefx_basic_type_commonschema_Int3_Tint3_

	XsdGoPkgHasElem_float2x3choicefx_basic_type_commonschema_Float2X3_Tfloat2X3_

	XsdGoPkgHasElem_float3x2choicefx_basic_type_commonschema_Float3X2_Tfloat3X2_

	XsdGoPkgHasElem_float3x1choicefx_basic_type_commonschema_Float3X1_Tfloat3_

	XsdGoPkgHasElem_float4x4choicefx_basic_type_commonschema_Float4X4_Tfloat4X4_

	XsdGoPkgHasElem_enumchoicefx_basic_type_commonschema_Enum_XsdtString_

	XsdGoPkgHasElem_float2x1choicefx_basic_type_commonschema_Float2X1_Tfloat2_

	XsdGoPkgHasElem_bool2choicefx_basic_type_commonschema_Bool2_Tbool2_

	XsdGoPkgHasElem_float1x2choicefx_basic_type_commonschema_Float1X2_Tfloat2_
}

//	If the WalkHandlers.XsdGoPkgHasGroup_FxBasicTypeCommon function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_FxBasicTypeCommon instance as the single argument. Then calls the Walk() method on 36/36 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_FxBasicTypeCommon instance.
func (me *XsdGoPkgHasGroup_FxBasicTypeCommon) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasGroup_FxBasicTypeCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_samplerDEPTHchoicefx_basic_type_commonschema_SamplerDEPTH_TfxSamplerDEPTHCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_intchoicefx_basic_type_commonschema_Int_Tint_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3choicefx_basic_type_commonschema_Float3_Tfloat3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4x3choicefx_basic_type_commonschema_Float4X3_Tfloat4X3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_surfacechoicefx_basic_type_commonschema_Surface_TfxSurfaceCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3x4choicefx_basic_type_commonschema_Float3X4_Tfloat3X4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int4choicefx_basic_type_commonschema_Int4_Tint4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_boolchoicefx_basic_type_commonschema_Bool_Tbool_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sampler1Dchoicefx_basic_type_commonschema_Sampler1D_TfxSampler1DCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4choicefx_basic_type_commonschema_Float4_Tfloat4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4x2choicefx_basic_type_commonschema_Float4X2_Tfloat4X2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sampler3Dchoicefx_basic_type_commonschema_Sampler3D_TfxSampler3DCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float1x1choicefx_basic_type_commonschema_Float1X1_Tfloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_samplerRECTchoicefx_basic_type_commonschema_SamplerRECT_TfxSamplerRECTCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_samplerCUBEchoicefx_basic_type_commonschema_SamplerCUBE_TfxSamplerCUBECommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2x4choicefx_basic_type_commonschema_Float2X4_Tfloat2X4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3x3choicefx_basic_type_commonschema_Float3X3_Tfloat3X3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float1x4choicefx_basic_type_commonschema_Float1X4_Tfloat4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool3choicefx_basic_type_commonschema_Bool3_Tbool3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int2choicefx_basic_type_commonschema_Int2_Tint2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sampler2Dchoicefx_basic_type_commonschema_Sampler2D_TfxSampler2DCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4x1choicefx_basic_type_commonschema_Float4X1_Tfloat4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2choicefx_basic_type_commonschema_Float2_Tfloat2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float1x3choicefx_basic_type_commonschema_Float1X3_Tfloat3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int3choicefx_basic_type_commonschema_Int3_Tint3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2x3choicefx_basic_type_commonschema_Float2X3_Tfloat2X3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3x2choicefx_basic_type_commonschema_Float3X2_Tfloat3X2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3x1choicefx_basic_type_commonschema_Float3X1_Tfloat3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4x4choicefx_basic_type_commonschema_Float4X4_Tfloat4X4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_enumchoicefx_basic_type_commonschema_Enum_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2x1choicefx_basic_type_commonschema_Float2X1_Tfloat2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool2choicefx_basic_type_commonschema_Bool2_Tbool2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float1x2choicefx_basic_type_commonschema_Float1X2_Tfloat2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2x2choicefx_basic_type_commonschema_Float2X2_Tfloat2X2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool4choicefx_basic_type_commonschema_Bool4_Tbool4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_floatchoicefx_basic_type_commonschema_Float_Tfloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdInstanceEffectSequenceSetparam struct {
	XsdGoPkgHasGroup_FxBasicTypeCommon

	XsdGoPkgHasAttr_Ref_XsdtToken_
}

//	If the WalkHandlers.TxsdInstanceEffectSequenceSetparam function is not nil (ie. was set by outside code), calls it with this TxsdInstanceEffectSequenceSetparam instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TxsdInstanceEffectSequenceSetparam instance.
func (me *TxsdInstanceEffectSequenceSetparam) Walk() (err error) {
	if fn := WalkHandlers.TxsdInstanceEffectSequenceSetparam; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasGroup_FxBasicTypeCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_setparamsequenceinstance_effectschema_Setparam_TxsdInstanceEffectSequenceSetparam_ struct {
	//	Assigns a new value to a previously defined parameter
	Setparams []*TxsdInstanceEffectSequenceSetparam `xml:"http://www.collada.org/2005/11/COLLADASchema setparam"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_setparamsequenceinstance_effectschema_Setparam_TxsdInstanceEffectSequenceSetparam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_setparamsequenceinstance_effectschema_Setparam_TxsdInstanceEffectSequenceSetparam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_setparamsequenceinstance_effectschema_Setparam_TxsdInstanceEffectSequenceSetparam_ instance.
func (me *XsdGoPkgHasElems_setparamsequenceinstance_effectschema_Setparam_TxsdInstanceEffectSequenceSetparam_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_setparamsequenceinstance_effectschema_Setparam_TxsdInstanceEffectSequenceSetparam_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Setparams {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdInstanceEffect struct {
	//	The sid attribute is a text string value containing the sub-identifier of this element. This
	//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	//	The url attribute refers to resource.  This may refer to a local resource using a relative URL
	//	fragment identifier that begins with the “#” character. The url attribute may refer to an external
	//	resource using an absolute or relative URL.
	XsdGoPkgHasAttr_Url_XsdtAnyURI_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	Add a hint for a platform of which technique to use in this effect.
	XsdGoPkgHasElems_technique_hintsequenceinstance_effectschema_TechniqueHint_TxsdInstanceEffectSequenceTechniqueHint_

	//	Assigns a new value to a previously defined parameter
	XsdGoPkgHasElems_setparamsequenceinstance_effectschema_Setparam_TxsdInstanceEffectSequenceSetparam_
}

//	If the WalkHandlers.TxsdInstanceEffect function is not nil (ie. was set by outside code), calls it with this TxsdInstanceEffect instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TxsdInstanceEffect instance.
func (me *TxsdInstanceEffect) Walk() (err error) {
	if fn := WalkHandlers.TxsdInstanceEffect; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_technique_hintsequenceinstance_effectschema_TechniqueHint_TxsdInstanceEffectSequenceTechniqueHint_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_setparamsequenceinstance_effectschema_Setparam_TxsdInstanceEffectSequenceSetparam_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_InstanceEffect struct {
	//	The instance_effect element declares the instantiation of a COLLADA effect resource.
	InstanceEffect *TxsdInstanceEffect `xml:"http://www.collada.org/2005/11/COLLADASchema instance_effect"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InstanceEffect function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstanceEffect instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_InstanceEffect instance.
func (me *XsdGoPkgHasElem_InstanceEffect) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InstanceEffect; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.InstanceEffect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The layer element specifies which layer to render in this compositing step
//	while evaluating the scene. You may specify any number of layers.
type XsdGoPkgHasElems_layersequencerendersequenceevaluate_scenesequencevisual_sceneschema_Layer_XsdtNCName_ struct {
	//	The layer element specifies which layer to render in this compositing step
	//	while evaluating the scene. You may specify any number of layers.
	Layers []xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema layer"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_layersequencerendersequenceevaluate_scenesequencevisual_sceneschema_Layer_XsdtNCName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_layersequencerendersequenceevaluate_scenesequencevisual_sceneschema_Layer_XsdtNCName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_layersequencerendersequenceevaluate_scenesequencevisual_sceneschema_Layer_XsdtNCName_ instance.
func (me *XsdGoPkgHasElems_layersequencerendersequenceevaluate_scenesequencevisual_sceneschema_Layer_XsdtNCName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_layersequencerendersequenceevaluate_scenesequencevisual_sceneschema_Layer_XsdtNCName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdVisualSceneSequenceEvaluateSceneSequenceRender struct {
	//	The camera_node attribute refers to a node that contains a camera describing the viewpoint to
	//	render this compositing step from.
	XsdGoPkgHasAttr_CameraNode_XsdtAnyURI_

	//	The instance_effect element specifies which effect to render in this compositing step
	//	while evaluating the scene.
	XsdGoPkgHasElem_InstanceEffect

	//	The layer element specifies which layer to render in this compositing step
	//	while evaluating the scene. You may specify any number of layers.
	XsdGoPkgHasElems_layersequencerendersequenceevaluate_scenesequencevisual_sceneschema_Layer_XsdtNCName_
}

//	If the WalkHandlers.TxsdVisualSceneSequenceEvaluateSceneSequenceRender function is not nil (ie. was set by outside code), calls it with this TxsdVisualSceneSequenceEvaluateSceneSequenceRender instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TxsdVisualSceneSequenceEvaluateSceneSequenceRender instance.
func (me *TxsdVisualSceneSequenceEvaluateSceneSequenceRender) Walk() (err error) {
	if fn := WalkHandlers.TxsdVisualSceneSequenceEvaluateSceneSequenceRender; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_InstanceEffect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_layersequencerendersequenceevaluate_scenesequencevisual_sceneschema_Layer_XsdtNCName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_rendersequenceevaluate_scenesequencevisual_sceneschema_Render_TxsdVisualSceneSequenceEvaluateSceneSequenceRender_ struct {
	//	The render element describes one effect pass to evaluate the scene.
	//	There must be at least one render element.
	Renders []*TxsdVisualSceneSequenceEvaluateSceneSequenceRender `xml:"http://www.collada.org/2005/11/COLLADASchema render"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_rendersequenceevaluate_scenesequencevisual_sceneschema_Render_TxsdVisualSceneSequenceEvaluateSceneSequenceRender_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_rendersequenceevaluate_scenesequencevisual_sceneschema_Render_TxsdVisualSceneSequenceEvaluateSceneSequenceRender_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_rendersequenceevaluate_scenesequencevisual_sceneschema_Render_TxsdVisualSceneSequenceEvaluateSceneSequenceRender_ instance.
func (me *XsdGoPkgHasElems_rendersequenceevaluate_scenesequencevisual_sceneschema_Render_TxsdVisualSceneSequenceEvaluateSceneSequenceRender_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_rendersequenceevaluate_scenesequencevisual_sceneschema_Render_TxsdVisualSceneSequenceEvaluateSceneSequenceRender_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Renders {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdVisualSceneSequenceEvaluateScene struct {
	//	The render element describes one effect pass to evaluate the scene.
	//	There must be at least one render element.
	XsdGoPkgHasElems_rendersequenceevaluate_scenesequencevisual_sceneschema_Render_TxsdVisualSceneSequenceEvaluateSceneSequenceRender_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_
}

//	If the WalkHandlers.TxsdVisualSceneSequenceEvaluateScene function is not nil (ie. was set by outside code), calls it with this TxsdVisualSceneSequenceEvaluateScene instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TxsdVisualSceneSequenceEvaluateScene instance.
func (me *TxsdVisualSceneSequenceEvaluateScene) Walk() (err error) {
	if fn := WalkHandlers.TxsdVisualSceneSequenceEvaluateScene; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_rendersequenceevaluate_scenesequencevisual_sceneschema_Render_TxsdVisualSceneSequenceEvaluateSceneSequenceRender_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_evaluate_scenesequencevisual_sceneschema_EvaluateScene_TxsdVisualSceneSequenceEvaluateScene_ struct {
	//	The evaluate_scene element declares information specifying a specific way to evaluate this
	//	visual_scene. There may be any number of evaluate_scene elements.
	EvaluateScenes []*TxsdVisualSceneSequenceEvaluateScene `xml:"http://www.collada.org/2005/11/COLLADASchema evaluate_scene"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_evaluate_scenesequencevisual_sceneschema_EvaluateScene_TxsdVisualSceneSequenceEvaluateScene_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_evaluate_scenesequencevisual_sceneschema_EvaluateScene_TxsdVisualSceneSequenceEvaluateScene_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_evaluate_scenesequencevisual_sceneschema_EvaluateScene_TxsdVisualSceneSequenceEvaluateScene_ instance.
func (me *XsdGoPkgHasElems_evaluate_scenesequencevisual_sceneschema_EvaluateScene_TxsdVisualSceneSequenceEvaluateScene_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_evaluate_scenesequencevisual_sceneschema_EvaluateScene_TxsdVisualSceneSequenceEvaluateScene_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EvaluateScenes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdVisualScene struct {
	//	The visual_scene element may contain an asset element.
	XsdGoPkgHasElem_Asset

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The evaluate_scene element declares information specifying a specific way to evaluate this
	//	visual_scene. There may be any number of evaluate_scene elements.
	XsdGoPkgHasElems_evaluate_scenesequencevisual_sceneschema_EvaluateScene_TxsdVisualSceneSequenceEvaluateScene_

	//	The visual_scene element must have at least one node element.
	XsdGoPkgHasElems_Node

	//	The id attribute is a text string containing the unique identifier of this element. This
	//	value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra
}

//	If the WalkHandlers.TxsdVisualScene function is not nil (ie. was set by outside code), calls it with this TxsdVisualScene instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TxsdVisualScene instance.
func (me *TxsdVisualScene) Walk() (err error) {
	if fn := WalkHandlers.TxsdVisualScene; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_evaluate_scenesequencevisual_sceneschema_EvaluateScene_TxsdVisualSceneSequenceEvaluateScene_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Node.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_VisualScene struct {
	//	The visual_scene element declares the base of the visual_scene hierarchy or scene graph. The
	//	scene contains elements that comprise much of the visual and transformational information
	//	content as created by the authoring tools.
	VisualScenes []*TxsdVisualScene `xml:"http://www.collada.org/2005/11/COLLADASchema visual_scene"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_VisualScene function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_VisualScene instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_VisualScene instance.
func (me *XsdGoPkgHasElems_VisualScene) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_VisualScene; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.VisualScenes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdLibraryVisualScenes struct {
	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	There must be at least one visual_scene element.
	XsdGoPkgHasElems_VisualScene

	//	The library_visual_scenes element may contain an asset element.
	XsdGoPkgHasElem_Asset

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_
}

//	If the WalkHandlers.TxsdLibraryVisualScenes function is not nil (ie. was set by outside code), calls it with this TxsdLibraryVisualScenes instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdLibraryVisualScenes instance.
func (me *TxsdLibraryVisualScenes) Walk() (err error) {
	if fn := WalkHandlers.TxsdLibraryVisualScenes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_VisualScene.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LibraryVisualScenes struct {
	//	The library_visual_scenes element declares a module of visual_scene elements.
	VisualScenesLibraries []*TxsdLibraryVisualScenes `xml:"http://www.collada.org/2005/11/COLLADASchema library_visual_scenes"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LibraryVisualScenes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LibraryVisualScenes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LibraryVisualScenes instance.
func (me *XsdGoPkgHasElems_LibraryVisualScenes) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LibraryVisualScenes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.VisualScenesLibraries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The library_animations element declares a module of animation elements.
//	The animation element categorizes the declaration of animation information. The animation
//	hierarchy contains elements that describe the animation’s key-frame data and sampler functions,
//	ordered in such a way to group together animations that should be executed together.
//	The channel element declares an output channel of an animation.
//	The source attribute indicates the location of the data source. Required attribute.
//	This type is used for URI reference which can only reference a resource declared within it's same document.
type TURIFragmentType xsdt.String

//	Since TURIFragmentType is just a simple String type, this merely sets the current value from the specified string.
func (me *TURIFragmentType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TURIFragmentType's alias type xsdt.String.
func (me TURIFragmentType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TURIFragmentType is just a simple String type, this merely returns the current string value.
func (me TURIFragmentType) String() string { return xsdt.String(me).String() }

type XsdGoPkgHasAttr_Source_TURIFragmentType_ struct {
	//	The source attribute indicates the location of the data source. Required attribute.
	Source TURIFragmentType `xml:"http://www.collada.org/2005/11/COLLADASchema source,attr"`
}

type TxsdChannel struct {
	//	The source attribute indicates the location of the sampler using a URL expression.
	//	The sampler must be declared within the same document. Required attribute.
	XsdGoPkgHasAttr_Source_TURIFragmentType_

	//	The target attribute indicates the location of the element bound to the output of the sampler.
	//	This text string is a path-name following a simple syntax described in Address Syntax.
	//	Required attribute.
	XsdGoPkgHasAttr_Target_XsdtToken_
}

//	If the WalkHandlers.TxsdChannel function is not nil (ie. was set by outside code), calls it with this TxsdChannel instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdChannel instance.
func (me *TxsdChannel) Walk() (err error) {
	if fn := WalkHandlers.TxsdChannel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Channel struct {
	//	The channel element declares an output channel of an animation.
	Channels []*TxsdChannel `xml:"http://www.collada.org/2005/11/COLLADASchema channel"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Channel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Channel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Channel instance.
func (me *XsdGoPkgHasElems_Channel) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Channel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Channels {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The source element declares a data repository that provides values according to the semantics of an
//	input element that refers to it.
//	The technique common specifies the common method for accessing this source element's data.
//	The accessor element declares an access pattern to one of the array elements: float_array,
//	int_array, Name_array, bool_array, and IDREF_array. The accessor element describes access
//	to arrays that are organized in either an interleaved or non-interleaved manner, depending
//	on the offset and stride attributes.
//	The count attribute indicates the number of values in the array. Required attribute.
type XsdGoPkgHasAttr_Count_Tuint_ struct {
	//	The count attribute indicates the number of values in the array. Required attribute.
	Count Tuint `xml:"http://www.collada.org/2005/11/COLLADASchema count,attr"`
}

//	The stride attribute indicates number of values to be considered a unit during each access to
//	the array. The default value is 1, indicating that a single value is accessed. Optional attribute.
type XsdGoPkgHasAttr_Stride_Tuint_1 struct {
	//	The stride attribute indicates number of values to be considered a unit during each access to
	//	the array. The default value is 1, indicating that a single value is accessed. Optional attribute.
	Stride Tuint `xml:"http://www.collada.org/2005/11/COLLADASchema stride,attr"`
}

//	Returns the default value for Stride -- 1
func (me XsdGoPkgHasAttr_Stride_Tuint_1) StrideDefault() Tuint { return Tuint(1) }

//	The source attribute indicates the location of the data source. Required attribute.
type XsdGoPkgHasAttr_Source_XsdtAnyURI_ struct {
	//	The source attribute indicates the location of the data source. Required attribute.
	Source xsdt.AnyURI `xml:"http://www.collada.org/2005/11/COLLADASchema source,attr"`
}

//	The offset attribute indicates the index of the first value to be read from the array.
//	The default value is 0. Optional attribute.
type XsdGoPkgHasAttr_Offset_Tuint_0 struct {
	//	The offset attribute indicates the index of the first value to be read from the array.
	//	The default value is 0. Optional attribute.
	Offset Tuint `xml:"http://www.collada.org/2005/11/COLLADASchema offset,attr"`
}

//	Returns the default value for Offset -- 0
func (me XsdGoPkgHasAttr_Offset_Tuint_0) OffsetDefault() Tuint { return Tuint(0) }

type TxsdAccessor struct {
	//	The source attribute indicates the location of the array to access using a URL expression. Required attribute.
	XsdGoPkgHasAttr_Source_XsdtAnyURI_

	//	The offset attribute indicates the index of the first value to be read from the array.
	//	The default value is 0. Optional attribute.
	XsdGoPkgHasAttr_Offset_Tuint_0

	//	The accessor element may have any number of param elements.
	XsdGoPkgHasElems_Param

	//	The count attribute indicates the number of times the array is accessed. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_

	//	The stride attribute indicates number of values to be considered a unit during each access to
	//	the array. The default value is 1, indicating that a single value is accessed. Optional attribute.
	XsdGoPkgHasAttr_Stride_Tuint_1
}

//	If the WalkHandlers.TxsdAccessor function is not nil (ie. was set by outside code), calls it with this TxsdAccessor instance as the single argument. Then calls the Walk() method on 1/5 embed(s) and 0/0 field(s) belonging to this TxsdAccessor instance.
func (me *TxsdAccessor) Walk() (err error) {
	if fn := WalkHandlers.TxsdAccessor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Param.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Accessor struct {
	//	The accessor element declares an access pattern to one of the array elements: float_array,
	//	int_array, Name_array, bool_array, and IDREF_array. The accessor element describes access
	//	to arrays that are organized in either an interleaved or non-interleaved manner, depending
	//	on the offset and stride attributes.
	Accessor *TxsdAccessor `xml:"http://www.collada.org/2005/11/COLLADASchema accessor"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Accessor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Accessor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Accessor instance.
func (me *XsdGoPkgHasElem_Accessor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Accessor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Accessor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSourceSequenceTechniqueCommon struct {
	//	The source's technique_common must have one and only one accessor.
	XsdGoPkgHasElem_Accessor
}

//	If the WalkHandlers.TxsdSourceSequenceTechniqueCommon function is not nil (ie. was set by outside code), calls it with this TxsdSourceSequenceTechniqueCommon instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdSourceSequenceTechniqueCommon instance.
func (me *TxsdSourceSequenceTechniqueCommon) Walk() (err error) {
	if fn := WalkHandlers.TxsdSourceSequenceTechniqueCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Accessor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_technique_commonsequencesourceschema_TechniqueCommon_TxsdSourceSequenceTechniqueCommon_ struct {
	//	The technique common specifies the common method for accessing this source element's data.
	TechniqueCommon *TxsdSourceSequenceTechniqueCommon `xml:"http://www.collada.org/2005/11/COLLADASchema technique_common"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_technique_commonsequencesourceschema_TechniqueCommon_TxsdSourceSequenceTechniqueCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_technique_commonsequencesourceschema_TechniqueCommon_TxsdSourceSequenceTechniqueCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_technique_commonsequencesourceschema_TechniqueCommon_TxsdSourceSequenceTechniqueCommon_ instance.
func (me *XsdGoPkgHasElem_technique_commonsequencesourceschema_TechniqueCommon_TxsdSourceSequenceTechniqueCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_technique_commonsequencesourceschema_TechniqueCommon_TxsdSourceSequenceTechniqueCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TechniqueCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The int_array element declares the storage for a homogenous array of integer values.
//	The maxInclusive attribute indicates the largest integer value that can be contained in
//	the array. The default value is 2147483647. Optional attribute.
type XsdGoPkgHasAttr_MaxInclusive_XsdtInteger_2147483647 struct {
	//	The maxInclusive attribute indicates the largest integer value that can be contained in
	//	the array. The default value is 2147483647. Optional attribute.
	MaxInclusive xsdt.Integer `xml:"http://www.collada.org/2005/11/COLLADASchema maxInclusive,attr"`
}

//	Returns the default value for MaxInclusive -- 2147483647
func (me XsdGoPkgHasAttr_MaxInclusive_XsdtInteger_2147483647) MaxInclusiveDefault() xsdt.Integer {
	return xsdt.Integer(2147483647)
}

//	The minInclusive attribute indicates the smallest integer value that can be contained in
//	the array. The default value is –2147483648. Optional attribute.
type XsdGoPkgHasAttr_MinInclusive_XsdtInteger_2147483648 struct {
	//	The minInclusive attribute indicates the smallest integer value that can be contained in
	//	the array. The default value is –2147483648. Optional attribute.
	MinInclusive xsdt.Integer `xml:"http://www.collada.org/2005/11/COLLADASchema minInclusive,attr"`
}

//	Returns the default value for MinInclusive -- -2147483648
func (me XsdGoPkgHasAttr_MinInclusive_XsdtInteger_2147483648) MinInclusiveDefault() xsdt.Integer {
	return xsdt.Integer(-2147483648)
}

type TxsdIntArray struct {
	XsdGoPkgValue TListOfInts `xml:",chardata"`

	//	The maxInclusive attribute indicates the largest integer value that can be contained in
	//	the array. The default value is 2147483647. Optional attribute.
	XsdGoPkgHasAttr_MaxInclusive_XsdtInteger_2147483647

	//	The minInclusive attribute indicates the smallest integer value that can be contained in
	//	the array. The default value is –2147483648. Optional attribute.
	XsdGoPkgHasAttr_MinInclusive_XsdtInteger_2147483648

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The count attribute indicates the number of values in the array. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_
}

//	Returns the value of its XsdGoPkgValue field as a xsdt.String (which TListOfInts is just aliasing).
func (me *TxsdIntArray) ToXsdtString() xsdt.String { return me.XsdGoPkgValue.ToXsdtString() }

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TxsdIntArray) ToTListOfInts() TListOfInts { return me.XsdGoPkgValue }

//	If the WalkHandlers.TxsdIntArray function is not nil (ie. was set by outside code), calls it with this TxsdIntArray instance as the single argument. Then calls the Walk() method on 0/5 embed(s) and 0/1 field(s) belonging to this TxsdIntArray instance.
func (me *TxsdIntArray) Walk() (err error) {
	if fn := WalkHandlers.TxsdIntArray; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IntArray struct {
	//	The int_array element declares the storage for a homogenous array of integer values.
	IntArray *TxsdIntArray `xml:"http://www.collada.org/2005/11/COLLADASchema int_array"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IntArray function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IntArray instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_IntArray instance.
func (me *XsdGoPkgHasElem_IntArray) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IntArray; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IntArray.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The bool_array element declares the storage for a homogenous array of boolean values.
type TxsdBoolArray struct {
	XsdGoPkgValue TListOfBools `xml:",chardata"`

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The count attribute indicates the number of values in the array. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TxsdBoolArray) ToTListOfBools() TListOfBools { return me.XsdGoPkgValue }

//	If the WalkHandlers.TxsdBoolArray function is not nil (ie. was set by outside code), calls it with this TxsdBoolArray instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/1 field(s) belonging to this TxsdBoolArray instance.
func (me *TxsdBoolArray) Walk() (err error) {
	if fn := WalkHandlers.TxsdBoolArray; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the value of its XsdGoPkgValue field as a xsdt.String (which TListOfBools is just aliasing).
func (me *TxsdBoolArray) ToXsdtString() xsdt.String { return me.XsdGoPkgValue.ToXsdtString() }

type XsdGoPkgHasElem_BoolArray struct {
	//	The bool_array element declares the storage for a homogenous array of boolean values.
	BoolArray *TxsdBoolArray `xml:"http://www.collada.org/2005/11/COLLADASchema bool_array"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BoolArray function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BoolArray instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_BoolArray instance.
func (me *XsdGoPkgHasElem_BoolArray) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_BoolArray; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BoolArray.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The float_array element declares the storage for a homogenous array of floating point values.
//	The magnitude attribute indicates the largest exponent of the float values that can be contained
//	in the array. The default value is 38. Optional attribute.
type XsdGoPkgHasAttr_Magnitude_XsdtShort_38 struct {
	//	The magnitude attribute indicates the largest exponent of the float values that can be contained
	//	in the array. The default value is 38. Optional attribute.
	Magnitude xsdt.Short `xml:"http://www.collada.org/2005/11/COLLADASchema magnitude,attr"`
}

//	Returns the default value for Magnitude -- 38
func (me XsdGoPkgHasAttr_Magnitude_XsdtShort_38) MagnitudeDefault() xsdt.Short { return xsdt.Short(38) }

//	The digits attribute indicates the number of significant decimal digits of the float values that
//	can be contained in the array. The default value is 6. Optional attribute.
type XsdGoPkgHasAttr_Digits_XsdtShort_6 struct {
	//	The digits attribute indicates the number of significant decimal digits of the float values that
	//	can be contained in the array. The default value is 6. Optional attribute.
	Digits xsdt.Short `xml:"http://www.collada.org/2005/11/COLLADASchema digits,attr"`
}

//	Returns the default value for Digits -- 6
func (me XsdGoPkgHasAttr_Digits_XsdtShort_6) DigitsDefault() xsdt.Short { return xsdt.Short(6) }

type TxsdFloatArray struct {
	XsdGoPkgValue TListOfFloats `xml:",chardata"`

	//	The magnitude attribute indicates the largest exponent of the float values that can be contained
	//	in the array. The default value is 38. Optional attribute.
	XsdGoPkgHasAttr_Magnitude_XsdtShort_38

	//	The digits attribute indicates the number of significant decimal digits of the float values that
	//	can be contained in the array. The default value is 6. Optional attribute.
	XsdGoPkgHasAttr_Digits_XsdtShort_6

	//	The id attribute is a text string containing the unique identifier of this element. This value
	//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The count attribute indicates the number of values in the array. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_
}

//	Returns the value of its XsdGoPkgValue field as a xsdt.String (which TListOfFloats is just aliasing).
func (me *TxsdFloatArray) ToXsdtString() xsdt.String { return me.XsdGoPkgValue.ToXsdtString() }

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TxsdFloatArray) ToTListOfFloats() TListOfFloats { return me.XsdGoPkgValue }

//	If the WalkHandlers.TxsdFloatArray function is not nil (ie. was set by outside code), calls it with this TxsdFloatArray instance as the single argument. Then calls the Walk() method on 0/5 embed(s) and 0/1 field(s) belonging to this TxsdFloatArray instance.
func (me *TxsdFloatArray) Walk() (err error) {
	if fn := WalkHandlers.TxsdFloatArray; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FloatArray struct {
	//	The float_array element declares the storage for a homogenous array of floating point values.
	FloatArray *TxsdFloatArray `xml:"http://www.collada.org/2005/11/COLLADASchema float_array"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FloatArray function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FloatArray instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FloatArray instance.
func (me *XsdGoPkgHasElem_FloatArray) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FloatArray; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FloatArray.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The IDREF_array element declares the storage for a homogenous array of ID reference values.
type TxsdIdrefArray struct {
	XsdGoPkgValue xsdt.Idrefs `xml:",chardata"`

	//	The id attribute is a text string containing the unique identifier of this element. This value
	//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The count attribute indicates the number of values in the array. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_
}

//	If the WalkHandlers.TxsdIdrefArray function is not nil (ie. was set by outside code), calls it with this TxsdIdrefArray instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/1 field(s) belonging to this TxsdIdrefArray instance.
func (me *TxsdIdrefArray) Walk() (err error) {
	if fn := WalkHandlers.TxsdIdrefArray; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TxsdIdrefArray) ToXsdtIdrefs() xsdt.Idrefs { return me.XsdGoPkgValue }

type XsdGoPkgHasElem_IdrefArray struct {
	//	The IDREF_array element declares the storage for a homogenous array of ID reference values.
	IdrefArray *TxsdIdrefArray `xml:"http://www.collada.org/2005/11/COLLADASchema IDREF_array"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IdrefArray function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IdrefArray instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_IdrefArray instance.
func (me *XsdGoPkgHasElem_IdrefArray) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IdrefArray; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IdrefArray.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The Name_array element declares the storage for a homogenous array of Name string values.
type TxsdNameArray struct {
	XsdGoPkgValue TListOfNames `xml:",chardata"`

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The count attribute indicates the number of values in the array. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TxsdNameArray) ToTListOfNames() TListOfNames { return me.XsdGoPkgValue }

//	If the WalkHandlers.TxsdNameArray function is not nil (ie. was set by outside code), calls it with this TxsdNameArray instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/1 field(s) belonging to this TxsdNameArray instance.
func (me *TxsdNameArray) Walk() (err error) {
	if fn := WalkHandlers.TxsdNameArray; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the value of its XsdGoPkgValue field as a xsdt.String (which TListOfNames is just aliasing).
func (me *TxsdNameArray) ToXsdtString() xsdt.String { return me.XsdGoPkgValue.ToXsdtString() }

type XsdGoPkgHasElem_NameArray struct {
	//	The Name_array element declares the storage for a homogenous array of Name string values.
	NameArray *TxsdNameArray `xml:"http://www.collada.org/2005/11/COLLADASchema Name_array"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NameArray function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NameArray instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_NameArray instance.
func (me *XsdGoPkgHasElem_NameArray) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NameArray; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.NameArray.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSource struct {
	//	The technique common specifies the common method for accessing this source element's data.
	XsdGoPkgHasElem_technique_commonsequencesourceschema_TechniqueCommon_TxsdSourceSequenceTechniqueCommon_

	//	The source element may contain an asset element.
	XsdGoPkgHasElem_Asset

	//	The source element may contain an int_array.
	XsdGoPkgHasElem_IntArray

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Required attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	This element may contain any number of non-common profile techniques.
	XsdGoPkgHasElems_Technique

	//	The source element may contain a bool_array.
	XsdGoPkgHasElem_BoolArray

	//	The source element may contain a float_array.
	XsdGoPkgHasElem_FloatArray

	//	The source element may contain an IDREF_array.
	XsdGoPkgHasElem_IdrefArray

	//	The source element may contain a Name_array.
	XsdGoPkgHasElem_NameArray
}

//	If the WalkHandlers.TxsdSource function is not nil (ie. was set by outside code), calls it with this TxsdSource instance as the single argument. Then calls the Walk() method on 8/10 embed(s) and 0/0 field(s) belonging to this TxsdSource instance.
func (me *TxsdSource) Walk() (err error) {
	if fn := WalkHandlers.TxsdSource; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_IdrefArray.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NameArray.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_technique_commonsequencesourceschema_TechniqueCommon_TxsdSourceSequenceTechniqueCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_IntArray.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Technique.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_BoolArray.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FloatArray.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Source struct {
	//	The source element declares a data repository that provides values according to the semantics of an
	//	input element that refers to it.
	Sources []*TxsdSource `xml:"http://www.collada.org/2005/11/COLLADASchema source"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Source function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Source instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Source instance.
func (me *XsdGoPkgHasElems_Source) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Source; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Sources {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The sampler element declares an N-dimensional function used for animation. Animation function curves
//	are represented by 1-D sampler elements in COLLADA. The sampler defines sampling points and how to
//	interpolate between them.
//	The input element must occur at least one time. These inputs are local inputs.
//	The InputLocal type is used to represent inputs that can only reference resources declared in the same document.
type TInputLocal struct {
	//	The source attribute indicates the location of the data source. Required attribute.
	XsdGoPkgHasAttr_Source_TURIFragmentType_

	//	The semantic attribute is the user-defined meaning of the input connection. Required attribute.
	XsdGoPkgHasAttr_Semantic_XsdtNmtoken_
}

//	If the WalkHandlers.TInputLocal function is not nil (ie. was set by outside code), calls it with this TInputLocal instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TInputLocal instance.
func (me *TInputLocal) Walk() (err error) {
	if fn := WalkHandlers.TInputLocal; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_inputsequencesamplerschema_Input_TInputLocal_ struct {
	//	The input element must occur at least one time. These inputs are local inputs.
	Inputs []*TInputLocal `xml:"http://www.collada.org/2005/11/COLLADASchema input"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_inputsequencesamplerschema_Input_TInputLocal_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_inputsequencesamplerschema_Input_TInputLocal_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_inputsequencesamplerschema_Input_TInputLocal_ instance.
func (me *XsdGoPkgHasElems_inputsequencesamplerschema_Input_TInputLocal_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_inputsequencesamplerschema_Input_TInputLocal_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Inputs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSampler struct {
	//	The id attribute is a text string containing the unique identifier of this element. This value
	//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The input element must occur at least one time. These inputs are local inputs.
	XsdGoPkgHasElems_inputsequencesamplerschema_Input_TInputLocal_
}

//	If the WalkHandlers.TxsdSampler function is not nil (ie. was set by outside code), calls it with this TxsdSampler instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TxsdSampler instance.
func (me *TxsdSampler) Walk() (err error) {
	if fn := WalkHandlers.TxsdSampler; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_inputsequencesamplerschema_Input_TInputLocal_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Sampler struct {
	//	The sampler element declares an N-dimensional function used for animation. Animation function curves
	//	are represented by 1-D sampler elements in COLLADA. The sampler defines sampling points and how to
	//	interpolate between them.
	Samplers []*TxsdSampler `xml:"http://www.collada.org/2005/11/COLLADASchema sampler"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Sampler function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Sampler instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Sampler instance.
func (me *XsdGoPkgHasElems_Sampler) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Sampler; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Samplers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAnimation struct {
	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The animation element may contain an asset element.
	XsdGoPkgHasElem_Asset

	//	The animation element may contain any number of channel elements.
	XsdGoPkgHasElems_Channel

	//	The animation element may contain any number of source elements.
	XsdGoPkgHasElems_Source

	//	The id attribute is a text string containing the unique identifier of this element. This value
	//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The animation element may contain any number of sampler elements.
	XsdGoPkgHasElems_Sampler

	XsdGoPkgHasElems_Animation
}

//	If the WalkHandlers.TxsdAnimation function is not nil (ie. was set by outside code), calls it with this TxsdAnimation instance as the single argument. Then calls the Walk() method on 5/8 embed(s) and 0/0 field(s) belonging to this TxsdAnimation instance.
func (me *TxsdAnimation) Walk() (err error) {
	if fn := WalkHandlers.TxsdAnimation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Source.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sampler.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Channel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Animation struct {
	//	The animation element categorizes the declaration of animation information. The animation
	//	hierarchy contains elements that describe the animation’s key-frame data and sampler functions,
	//	ordered in such a way to group together animations that should be executed together.
	Animations []*TxsdAnimation `xml:"http://www.collada.org/2005/11/COLLADASchema animation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Animation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Animation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Animation instance.
func (me *XsdGoPkgHasElems_Animation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Animation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Animations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdLibraryAnimations struct {
	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	There must be at least one animation element.
	XsdGoPkgHasElems_Animation

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The library_animations element may contain an asset element.
	XsdGoPkgHasElem_Asset
}

//	If the WalkHandlers.TxsdLibraryAnimations function is not nil (ie. was set by outside code), calls it with this TxsdLibraryAnimations instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdLibraryAnimations instance.
func (me *TxsdLibraryAnimations) Walk() (err error) {
	if fn := WalkHandlers.TxsdLibraryAnimations; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Animation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LibraryAnimations struct {
	//	The library_animations element declares a module of animation elements.
	AnimationsLibraries []*TxsdLibraryAnimations `xml:"http://www.collada.org/2005/11/COLLADASchema library_animations"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LibraryAnimations function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LibraryAnimations instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LibraryAnimations instance.
func (me *XsdGoPkgHasElems_LibraryAnimations) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LibraryAnimations; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AnimationsLibraries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The library_controllers element declares a module of controller elements.
//	The controller element categorizes the declaration of generic control information.
//	A controller is a device or mechanism that manages and directs the operations of another object.
//	The morph element describes the data required to blend between sets of static meshes. Each
//	possible mesh that can be blended (a morph target) must be specified.
//	The targets element declares the morph targets, their weights and any user defined attributes
//	associated with them.
type TxsdMorphSequenceTargets struct {
	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The input element must occur at least twice. These inputs are local inputs.
	XsdGoPkgHasElems_inputsequencesamplerschema_Input_TInputLocal_
}

//	If the WalkHandlers.TxsdMorphSequenceTargets function is not nil (ie. was set by outside code), calls it with this TxsdMorphSequenceTargets instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdMorphSequenceTargets instance.
func (me *TxsdMorphSequenceTargets) Walk() (err error) {
	if fn := WalkHandlers.TxsdMorphSequenceTargets; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_inputsequencesamplerschema_Input_TInputLocal_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_targetssequencemorphschema_Targets_TxsdMorphSequenceTargets_ struct {
	//	The targets element declares the morph targets, their weights and any user defined attributes
	//	associated with them.
	Targets *TxsdMorphSequenceTargets `xml:"http://www.collada.org/2005/11/COLLADASchema targets"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_targetssequencemorphschema_Targets_TxsdMorphSequenceTargets_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_targetssequencemorphschema_Targets_TxsdMorphSequenceTargets_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_targetssequencemorphschema_Targets_TxsdMorphSequenceTargets_ instance.
func (me *XsdGoPkgHasElem_targetssequencemorphschema_Targets_TxsdMorphSequenceTargets_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_targetssequencemorphschema_Targets_TxsdMorphSequenceTargets_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Targets.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The method attribute specifies the which blending technique to use. The accepted values are
//	NORMALIZED, and RELATIVE. The default value if not specified is NORMALIZED.  Optional attribute.
//	An enumuerated type specifying the acceptable morph methods.
type TMorphMethodType xsdt.String

//	This convenience method just performs a simple type conversion to TMorphMethodType's alias type xsdt.String.
func (me TMorphMethodType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TMorphMethodType is just a simple String type, this merely sets the current value from the specified string.
func (me *TMorphMethodType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TMorphMethodType is "RELATIVE".
func (me TMorphMethodType) IsRelative() bool { return me == "RELATIVE" }

//	Since TMorphMethodType is just a simple String type, this merely returns the current string value.
func (me TMorphMethodType) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TMorphMethodType is "NORMALIZED".
func (me TMorphMethodType) IsNormalized() bool { return me == "NORMALIZED" }

type XsdGoPkgHasAttr_Method_TMorphMethodType_Normalized struct {
	//	The method attribute specifies the which blending technique to use. The accepted values are
	//	NORMALIZED, and RELATIVE. The default value if not specified is NORMALIZED.  Optional attribute.
	Method TMorphMethodType `xml:"http://www.collada.org/2005/11/COLLADASchema method,attr"`
}

//	Returns the default value for Method -- "NORMALIZED"
func (me XsdGoPkgHasAttr_Method_TMorphMethodType_Normalized) MethodDefault() TMorphMethodType {
	return TMorphMethodType("NORMALIZED")
}

type TxsdMorph struct {
	//	The targets element declares the morph targets, their weights and any user defined attributes
	//	associated with them.
	XsdGoPkgHasElem_targetssequencemorphschema_Targets_TxsdMorphSequenceTargets_

	//	The morph element must contain at least two source elements.
	XsdGoPkgHasElems_Source

	//	The method attribute specifies the which blending technique to use. The accepted values are
	//	NORMALIZED, and RELATIVE. The default value if not specified is NORMALIZED.  Optional attribute.
	XsdGoPkgHasAttr_Method_TMorphMethodType_Normalized

	//	The source attribute indicates the base mesh. Required attribute.
	XsdGoPkgHasAttr_Source_XsdtAnyURI_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra
}

//	If the WalkHandlers.TxsdMorph function is not nil (ie. was set by outside code), calls it with this TxsdMorph instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdMorph instance.
func (me *TxsdMorph) Walk() (err error) {
	if fn := WalkHandlers.TxsdMorph; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_targetssequencemorphschema_Targets_TxsdMorphSequenceTargets_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Source.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Morph struct {
	//	The morph element describes the data required to blend between sets of static meshes. Each
	//	possible mesh that can be blended (a morph target) must be specified.
	Morph *TxsdMorph `xml:"http://www.collada.org/2005/11/COLLADASchema morph"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Morph function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Morph instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Morph instance.
func (me *XsdGoPkgHasElem_Morph) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Morph; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Morph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The skin element contains vertex and primitive information sufficient to describe blend-weight skinning.
//	This provides extra information about the position and orientation of the base mesh before binding.
//	If bind_shape_matrix is not specified then an identity matrix may be used as the bind_shape_matrix.
//	The bind_shape_matrix element may occur zero or one times.
type XsdGoPkgHasElem_bind_shape_matrixsequenceskinschema_BindShapeMatrix_Tfloat4X4_ struct {
	//	This provides extra information about the position and orientation of the base mesh before binding.
	//	If bind_shape_matrix is not specified then an identity matrix may be used as the bind_shape_matrix.
	//	The bind_shape_matrix element may occur zero or one times.
	BindShapeMatrix Tfloat4X4 `xml:"http://www.collada.org/2005/11/COLLADASchema bind_shape_matrix"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bind_shape_matrixsequenceskinschema_BindShapeMatrix_Tfloat4X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bind_shape_matrixsequenceskinschema_BindShapeMatrix_Tfloat4X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bind_shape_matrixsequenceskinschema_BindShapeMatrix_Tfloat4X4_ instance.
func (me *XsdGoPkgHasElem_bind_shape_matrixsequenceskinschema_BindShapeMatrix_Tfloat4X4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bind_shape_matrixsequenceskinschema_BindShapeMatrix_Tfloat4X4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The joints element associates joint, or skeleton, nodes with attribute data.
//	In COLLADA, this is specified by the inverse bind matrix of each joint (influence) in the skeleton.
type TxsdSkinSequenceJoints struct {
	//	The input element must occur at least twice. These inputs are local inputs.
	XsdGoPkgHasElems_inputsequencesamplerschema_Input_TInputLocal_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra
}

//	If the WalkHandlers.TxsdSkinSequenceJoints function is not nil (ie. was set by outside code), calls it with this TxsdSkinSequenceJoints instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdSkinSequenceJoints instance.
func (me *TxsdSkinSequenceJoints) Walk() (err error) {
	if fn := WalkHandlers.TxsdSkinSequenceJoints; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_inputsequencesamplerschema_Input_TInputLocal_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_jointssequenceskinschema_Joints_TxsdSkinSequenceJoints_ struct {
	//	The joints element associates joint, or skeleton, nodes with attribute data.
	//	In COLLADA, this is specified by the inverse bind matrix of each joint (influence) in the skeleton.
	Joints *TxsdSkinSequenceJoints `xml:"http://www.collada.org/2005/11/COLLADASchema joints"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_jointssequenceskinschema_Joints_TxsdSkinSequenceJoints_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_jointssequenceskinschema_Joints_TxsdSkinSequenceJoints_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_jointssequenceskinschema_Joints_TxsdSkinSequenceJoints_ instance.
func (me *XsdGoPkgHasElem_jointssequenceskinschema_Joints_TxsdSkinSequenceJoints_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_jointssequenceskinschema_Joints_TxsdSkinSequenceJoints_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Joints.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The vertex_weights element associates a set of joint-weight pairs with each vertex in the base mesh.
//	The input element must occur at least twice.
//	The InputLocalOffset type is used to represent indexed inputs that can only reference resources declared in the same document.
//	The set attribute indicates which inputs should be grouped together as a single set. This is helpful
//	when multiple inputs share the same semantics.
type XsdGoPkgHasAttr_Set_Tuint_ struct {
	//	The set attribute indicates which inputs should be grouped together as a single set. This is helpful
	//	when multiple inputs share the same semantics.
	Set Tuint `xml:"http://www.collada.org/2005/11/COLLADASchema set,attr"`
}

//	The offset attribute represents the offset into the list of indices.  If two input elements share
//	the same offset, they will be indexed the same.  This works as a simple form of compression for the
//	list of indices as well as defining the order the inputs should be used in.  Required attribute.
type XsdGoPkgHasAttr_Offset_Tuint_ struct {
	//	The offset attribute represents the offset into the list of indices.  If two input elements share
	//	the same offset, they will be indexed the same.  This works as a simple form of compression for the
	//	list of indices as well as defining the order the inputs should be used in.  Required attribute.
	Offset Tuint `xml:"http://www.collada.org/2005/11/COLLADASchema offset,attr"`
}

type TInputLocalOffset struct {
	//	The set attribute indicates which inputs should be grouped together as a single set. This is helpful
	//	when multiple inputs share the same semantics.
	XsdGoPkgHasAttr_Set_Tuint_

	//	The semantic attribute is the user-defined meaning of the input connection. Required attribute.
	XsdGoPkgHasAttr_Semantic_XsdtNmtoken_

	//	The offset attribute represents the offset into the list of indices.  If two input elements share
	//	the same offset, they will be indexed the same.  This works as a simple form of compression for the
	//	list of indices as well as defining the order the inputs should be used in.  Required attribute.
	XsdGoPkgHasAttr_Offset_Tuint_

	//	The source attribute indicates the location of the data source. Required attribute.
	XsdGoPkgHasAttr_Source_TURIFragmentType_
}

//	If the WalkHandlers.TInputLocalOffset function is not nil (ie. was set by outside code), calls it with this TInputLocalOffset instance as the single argument. Then calls the Walk() method on 0/4 embed(s) and 0/0 field(s) belonging to this TInputLocalOffset instance.
func (me *TInputLocalOffset) Walk() (err error) {
	if fn := WalkHandlers.TInputLocalOffset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_inputsequencevertex_weightssequenceskinschema_Input_TInputLocalOffset_ struct {
	//	The input element must occur at least twice.
	Inputs []*TInputLocalOffset `xml:"http://www.collada.org/2005/11/COLLADASchema input"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_inputsequencevertex_weightssequenceskinschema_Input_TInputLocalOffset_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_inputsequencevertex_weightssequenceskinschema_Input_TInputLocalOffset_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_inputsequencevertex_weightssequenceskinschema_Input_TInputLocalOffset_ instance.
func (me *XsdGoPkgHasElems_inputsequencevertex_weightssequenceskinschema_Input_TInputLocalOffset_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_inputsequencevertex_weightssequenceskinschema_Input_TInputLocalOffset_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Inputs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The v element describes which bones and attributes are associated with each vertex.  An index
//	of –1 into the array of joints refers to the bind shape.  Weights should be normalized before use.
//	The v element must occur zero or one times.
type XsdGoPkgHasElem_vsequencevertex_weightssequenceskinschema_V_TListOfInts_ struct {
	//	The v element describes which bones and attributes are associated with each vertex.  An index
	//	of –1 into the array of joints refers to the bind shape.  Weights should be normalized before use.
	//	The v element must occur zero or one times.
	V TListOfInts `xml:"http://www.collada.org/2005/11/COLLADASchema v"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_vsequencevertex_weightssequenceskinschema_V_TListOfInts_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_vsequencevertex_weightssequenceskinschema_V_TListOfInts_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_vsequencevertex_weightssequenceskinschema_V_TListOfInts_ instance.
func (me *XsdGoPkgHasElem_vsequencevertex_weightssequenceskinschema_V_TListOfInts_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_vsequencevertex_weightssequenceskinschema_V_TListOfInts_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The vcount element contains a list of integers describing the number of influences for each vertex.
//	The vcount element may occur once.
type TListOfUInts xsdt.String

//	Since TListOfUInts is just a simple String type, this merely sets the current value from the specified string.
func (me *TListOfUInts) Set(s string) { (*xsdt.String)(me).Set(s) }

//	TListOfUInts declares a String containing a whitespace-separated list of Tuint values. This Values() method creates and returns a slice of all elements in that list.
func (me TListOfUInts) Values() (list []Tuint) {
	svals := xsdt.ListValues(string(me))
	list = make([]Tuint, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	Since TListOfUInts is just a simple String type, this merely returns the current string value.
func (me TListOfUInts) String() string { return xsdt.String(me).String() }

//	TListOfUInts declares a String containing a whitespace-separated list of Tuint values. This Values() method creates and returns a slice of all elements in that list, typed as xsdt.UnsignedLong.
func (me TListOfUInts) ValuesXsdtUnsignedLong() (list []xsdt.UnsignedLong) {
	svals := xsdt.ListValues(string(me))
	list = make([]xsdt.UnsignedLong, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	This convenience method just performs a simple type conversion to TListOfUInts's alias type xsdt.String.
func (me TListOfUInts) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskinschema_Vcount_TListOfUInts_ struct {
	//	The vcount element contains a list of integers describing the number of influences for each vertex.
	//	The vcount element may occur once.
	Vcount TListOfUInts `xml:"http://www.collada.org/2005/11/COLLADASchema vcount"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskinschema_Vcount_TListOfUInts_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskinschema_Vcount_TListOfUInts_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskinschema_Vcount_TListOfUInts_ instance.
func (me *XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskinschema_Vcount_TListOfUInts_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskinschema_Vcount_TListOfUInts_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSkinSequenceVertexWeights struct {
	//	The vcount element contains a list of integers describing the number of influences for each vertex.
	//	The vcount element may occur once.
	XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskinschema_Vcount_TListOfUInts_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The input element must occur at least twice.
	XsdGoPkgHasElems_inputsequencevertex_weightssequenceskinschema_Input_TInputLocalOffset_

	//	The count attribute describes the number of vertices in the base mesh. Required element.
	XsdGoPkgHasAttr_Count_Tuint_

	//	The v element describes which bones and attributes are associated with each vertex.  An index
	//	of –1 into the array of joints refers to the bind shape.  Weights should be normalized before use.
	//	The v element must occur zero or one times.
	XsdGoPkgHasElem_vsequencevertex_weightssequenceskinschema_V_TListOfInts_
}

//	If the WalkHandlers.TxsdSkinSequenceVertexWeights function is not nil (ie. was set by outside code), calls it with this TxsdSkinSequenceVertexWeights instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TxsdSkinSequenceVertexWeights instance.
func (me *TxsdSkinSequenceVertexWeights) Walk() (err error) {
	if fn := WalkHandlers.TxsdSkinSequenceVertexWeights; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_inputsequencevertex_weightssequenceskinschema_Input_TInputLocalOffset_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_vsequencevertex_weightssequenceskinschema_V_TListOfInts_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskinschema_Vcount_TListOfUInts_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_vertex_weightssequenceskinschema_VertexWeights_TxsdSkinSequenceVertexWeights_ struct {
	//	The vertex_weights element associates a set of joint-weight pairs with each vertex in the base mesh.
	VertexWeights *TxsdSkinSequenceVertexWeights `xml:"http://www.collada.org/2005/11/COLLADASchema vertex_weights"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_vertex_weightssequenceskinschema_VertexWeights_TxsdSkinSequenceVertexWeights_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_vertex_weightssequenceskinschema_VertexWeights_TxsdSkinSequenceVertexWeights_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_vertex_weightssequenceskinschema_VertexWeights_TxsdSkinSequenceVertexWeights_ instance.
func (me *XsdGoPkgHasElem_vertex_weightssequenceskinschema_VertexWeights_TxsdSkinSequenceVertexWeights_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_vertex_weightssequenceskinschema_VertexWeights_TxsdSkinSequenceVertexWeights_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.VertexWeights.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSkin struct {
	//	The vertex_weights element associates a set of joint-weight pairs with each vertex in the base mesh.
	XsdGoPkgHasElem_vertex_weightssequenceskinschema_VertexWeights_TxsdSkinSequenceVertexWeights_

	//	This provides extra information about the position and orientation of the base mesh before binding.
	//	If bind_shape_matrix is not specified then an identity matrix may be used as the bind_shape_matrix.
	//	The bind_shape_matrix element may occur zero or one times.
	XsdGoPkgHasElem_bind_shape_matrixsequenceskinschema_BindShapeMatrix_Tfloat4X4_

	//	The source attribute contains a URI reference to the base mesh, (a static mesh or a morphed mesh).
	//	This also provides the bind-shape of the skinned mesh.  Required attribute.
	XsdGoPkgHasAttr_Source_XsdtAnyURI_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The skin element must contain at least three source elements.
	XsdGoPkgHasElems_Source

	//	The joints element associates joint, or skeleton, nodes with attribute data.
	//	In COLLADA, this is specified by the inverse bind matrix of each joint (influence) in the skeleton.
	XsdGoPkgHasElem_jointssequenceskinschema_Joints_TxsdSkinSequenceJoints_
}

//	If the WalkHandlers.TxsdSkin function is not nil (ie. was set by outside code), calls it with this TxsdSkin instance as the single argument. Then calls the Walk() method on 5/6 embed(s) and 0/0 field(s) belonging to this TxsdSkin instance.
func (me *TxsdSkin) Walk() (err error) {
	if fn := WalkHandlers.TxsdSkin; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_bind_shape_matrixsequenceskinschema_BindShapeMatrix_Tfloat4X4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Source.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_jointssequenceskinschema_Joints_TxsdSkinSequenceJoints_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_vertex_weightssequenceskinschema_VertexWeights_TxsdSkinSequenceVertexWeights_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Skin struct {
	//	The skin element contains vertex and primitive information sufficient to describe blend-weight skinning.
	Skin *TxsdSkin `xml:"http://www.collada.org/2005/11/COLLADASchema skin"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Skin function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Skin instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Skin instance.
func (me *XsdGoPkgHasElem_Skin) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Skin; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Skin.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdController struct {
	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The controller element may contain either a skin element or a morph element.
	XsdGoPkgHasElem_Skin

	//	The id attribute is a text string containing the unique identifier of this element. This value
	//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The controller element may contain an asset element.
	XsdGoPkgHasElem_Asset

	//	The controller element may contain either a skin element or a morph element.
	XsdGoPkgHasElem_Morph
}

//	If the WalkHandlers.TxsdController function is not nil (ie. was set by outside code), calls it with this TxsdController instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TxsdController instance.
func (me *TxsdController) Walk() (err error) {
	if fn := WalkHandlers.TxsdController; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Morph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Skin.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Controller struct {
	//	The controller element categorizes the declaration of generic control information.
	//	A controller is a device or mechanism that manages and directs the operations of another object.
	Controllers []*TxsdController `xml:"http://www.collada.org/2005/11/COLLADASchema controller"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Controller function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Controller instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Controller instance.
func (me *XsdGoPkgHasElems_Controller) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Controller; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Controllers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdLibraryControllers struct {
	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The library_controllers element may contain an asset element.
	XsdGoPkgHasElem_Asset

	//	There must be at least one controller element.
	XsdGoPkgHasElems_Controller

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra
}

//	If the WalkHandlers.TxsdLibraryControllers function is not nil (ie. was set by outside code), calls it with this TxsdLibraryControllers instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdLibraryControllers instance.
func (me *TxsdLibraryControllers) Walk() (err error) {
	if fn := WalkHandlers.TxsdLibraryControllers; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Controller.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LibraryControllers struct {
	//	The library_controllers element declares a module of controller elements.
	ControllersLibraries []*TxsdLibraryControllers `xml:"http://www.collada.org/2005/11/COLLADASchema library_controllers"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LibraryControllers function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LibraryControllers instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LibraryControllers instance.
func (me *XsdGoPkgHasElems_LibraryControllers) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LibraryControllers; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ControllersLibraries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The scene embodies the entire set of information that can be visualized from the
//	contents of a COLLADA resource. The scene element declares the base of the scene
//	hierarchy or scene graph. The scene contains elements that comprise much of the
//	visual and transformational information content as created by the authoring tools.
//	The instance_physics_scene element declares the instantiation of a COLLADA physics_scene resource.
//	The instance_physics_scene element may appear any number of times.
type XsdGoPkgHasElems_instance_physics_scenesequencescenesequenceCOLLADAschema_InstancePhysicsScene_TInstanceWithExtra_ struct {
	//	The instance_physics_scene element declares the instantiation of a COLLADA physics_scene resource.
	//	The instance_physics_scene element may appear any number of times.
	PhysicsSceneInstances []*TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_physics_scene"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_instance_physics_scenesequencescenesequenceCOLLADAschema_InstancePhysicsScene_TInstanceWithExtra_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_instance_physics_scenesequencescenesequenceCOLLADAschema_InstancePhysicsScene_TInstanceWithExtra_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_instance_physics_scenesequencescenesequenceCOLLADAschema_InstancePhysicsScene_TInstanceWithExtra_ instance.
func (me *XsdGoPkgHasElems_instance_physics_scenesequencescenesequenceCOLLADAschema_InstancePhysicsScene_TInstanceWithExtra_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_instance_physics_scenesequencescenesequenceCOLLADAschema_InstancePhysicsScene_TInstanceWithExtra_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PhysicsSceneInstances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The instance_visual_scene element declares the instantiation of a COLLADA visual_scene resource.
//	The instance_visual_scene element may only appear once.
type XsdGoPkgHasElem_instance_visual_scenesequencescenesequenceCOLLADAschema_InstanceVisualScene_TInstanceWithExtra_ struct {
	//	The instance_visual_scene element declares the instantiation of a COLLADA visual_scene resource.
	//	The instance_visual_scene element may only appear once.
	InstanceVisualScene *TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_visual_scene"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_instance_visual_scenesequencescenesequenceCOLLADAschema_InstanceVisualScene_TInstanceWithExtra_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_instance_visual_scenesequencescenesequenceCOLLADAschema_InstanceVisualScene_TInstanceWithExtra_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_instance_visual_scenesequencescenesequenceCOLLADAschema_InstanceVisualScene_TInstanceWithExtra_ instance.
func (me *XsdGoPkgHasElem_instance_visual_scenesequencescenesequenceCOLLADAschema_InstanceVisualScene_TInstanceWithExtra_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_instance_visual_scenesequencescenesequenceCOLLADAschema_InstanceVisualScene_TInstanceWithExtra_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.InstanceVisualScene.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdColladaSequenceScene struct {
	//	The instance_visual_scene element declares the instantiation of a COLLADA visual_scene resource.
	//	The instance_visual_scene element may only appear once.
	XsdGoPkgHasElem_instance_visual_scenesequencescenesequenceCOLLADAschema_InstanceVisualScene_TInstanceWithExtra_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The instance_physics_scene element declares the instantiation of a COLLADA physics_scene resource.
	//	The instance_physics_scene element may appear any number of times.
	XsdGoPkgHasElems_instance_physics_scenesequencescenesequenceCOLLADAschema_InstancePhysicsScene_TInstanceWithExtra_
}

//	If the WalkHandlers.TxsdColladaSequenceScene function is not nil (ie. was set by outside code), calls it with this TxsdColladaSequenceScene instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdColladaSequenceScene instance.
func (me *TxsdColladaSequenceScene) Walk() (err error) {
	if fn := WalkHandlers.TxsdColladaSequenceScene; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_instance_physics_scenesequencescenesequenceCOLLADAschema_InstancePhysicsScene_TInstanceWithExtra_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_instance_visual_scenesequencescenesequenceCOLLADAschema_InstanceVisualScene_TInstanceWithExtra_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_scenesequenceCOLLADAschema_Scene_TxsdColladaSequenceScene_ struct {
	//	The scene embodies the entire set of information that can be visualized from the
	//	contents of a COLLADA resource. The scene element declares the base of the scene
	//	hierarchy or scene graph. The scene contains elements that comprise much of the
	//	visual and transformational information content as created by the authoring tools.
	Scene *TxsdColladaSequenceScene `xml:"http://www.collada.org/2005/11/COLLADASchema scene"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_scenesequenceCOLLADAschema_Scene_TxsdColladaSequenceScene_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_scenesequenceCOLLADAschema_Scene_TxsdColladaSequenceScene_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_scenesequenceCOLLADAschema_Scene_TxsdColladaSequenceScene_ instance.
func (me *XsdGoPkgHasElem_scenesequenceCOLLADAschema_Scene_TxsdColladaSequenceScene_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_scenesequenceCOLLADAschema_Scene_TxsdColladaSequenceScene_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Scene.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The library_animation_clips element declares a module of animation_clip elements.
//	The animation_clip element defines a section of the animation curves to be used together as
//	an animation clip.
//	The start attribute is the time in seconds of the beginning of the clip.  This time is
//	the same as that used in the key-frame data and is used to determine which set of
//	key-frames will be included in the clip.  The start time does not specify when the clip
//	will be played.  If the time falls between two keyframes of a referenced animation, an
//	interpolated value should be used.  The default value is 0.0.  Optional attribute.
type XsdGoPkgHasAttr_Start_XsdtDouble_00 struct {
	//	The start attribute is the time in seconds of the beginning of the clip.  This time is
	//	the same as that used in the key-frame data and is used to determine which set of
	//	key-frames will be included in the clip.  The start time does not specify when the clip
	//	will be played.  If the time falls between two keyframes of a referenced animation, an
	//	interpolated value should be used.  The default value is 0.0.  Optional attribute.
	Start xsdt.Double `xml:"http://www.collada.org/2005/11/COLLADASchema start,attr"`
}

//	Returns the default value for Start -- 0.0
func (me XsdGoPkgHasAttr_Start_XsdtDouble_00) StartDefault() xsdt.Double { return xsdt.Double(0.0) }

//	The animation_clip must instance at least one animation element.
type XsdGoPkgHasElems_instance_animationsequenceanimation_clipschema_InstanceAnimation_TInstanceWithExtra_ struct {
	//	The animation_clip must instance at least one animation element.
	AnimationInstances []*TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_animation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_instance_animationsequenceanimation_clipschema_InstanceAnimation_TInstanceWithExtra_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_instance_animationsequenceanimation_clipschema_InstanceAnimation_TInstanceWithExtra_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_instance_animationsequenceanimation_clipschema_InstanceAnimation_TInstanceWithExtra_ instance.
func (me *XsdGoPkgHasElems_instance_animationsequenceanimation_clipschema_InstanceAnimation_TInstanceWithExtra_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_instance_animationsequenceanimation_clipschema_InstanceAnimation_TInstanceWithExtra_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AnimationInstances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The end attribute is the time in seconds of the end of the clip.  This is used in the
//	same way as the start time.  If end is not specified, the value is taken to be the end
//	time of the longest animation.  Optional attribute.
type XsdGoPkgHasAttr_End_XsdtDouble_ struct {
	//	The end attribute is the time in seconds of the end of the clip.  This is used in the
	//	same way as the start time.  If end is not specified, the value is taken to be the end
	//	time of the longest animation.  Optional attribute.
	End xsdt.Double `xml:"http://www.collada.org/2005/11/COLLADASchema end,attr"`
}

type TxsdAnimationClip struct {
	//	The animation_clip element may contain an asset element.
	XsdGoPkgHasElem_Asset

	//	The end attribute is the time in seconds of the end of the clip.  This is used in the
	//	same way as the start time.  If end is not specified, the value is taken to be the end
	//	time of the longest animation.  Optional attribute.
	XsdGoPkgHasAttr_End_XsdtDouble_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The start attribute is the time in seconds of the beginning of the clip.  This time is
	//	the same as that used in the key-frame data and is used to determine which set of
	//	key-frames will be included in the clip.  The start time does not specify when the clip
	//	will be played.  If the time falls between two keyframes of a referenced animation, an
	//	interpolated value should be used.  The default value is 0.0.  Optional attribute.
	XsdGoPkgHasAttr_Start_XsdtDouble_00

	//	The animation_clip must instance at least one animation element.
	XsdGoPkgHasElems_instance_animationsequenceanimation_clipschema_InstanceAnimation_TInstanceWithExtra_

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_
}

//	If the WalkHandlers.TxsdAnimationClip function is not nil (ie. was set by outside code), calls it with this TxsdAnimationClip instance as the single argument. Then calls the Walk() method on 3/7 embed(s) and 0/0 field(s) belonging to this TxsdAnimationClip instance.
func (me *TxsdAnimationClip) Walk() (err error) {
	if fn := WalkHandlers.TxsdAnimationClip; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_instance_animationsequenceanimation_clipschema_InstanceAnimation_TInstanceWithExtra_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AnimationClip struct {
	//	The animation_clip element defines a section of the animation curves to be used together as
	//	an animation clip.
	AnimationClips []*TxsdAnimationClip `xml:"http://www.collada.org/2005/11/COLLADASchema animation_clip"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AnimationClip function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AnimationClip instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AnimationClip instance.
func (me *XsdGoPkgHasElems_AnimationClip) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AnimationClip; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AnimationClips {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdLibraryAnimationClips struct {
	//	The library_animation_clips element may contain an asset element.
	XsdGoPkgHasElem_Asset

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	There must be at least one animation_clip element.
	XsdGoPkgHasElems_AnimationClip
}

//	If the WalkHandlers.TxsdLibraryAnimationClips function is not nil (ie. was set by outside code), calls it with this TxsdLibraryAnimationClips instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdLibraryAnimationClips instance.
func (me *TxsdLibraryAnimationClips) Walk() (err error) {
	if fn := WalkHandlers.TxsdLibraryAnimationClips; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AnimationClip.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LibraryAnimationClips struct {
	//	The library_animation_clips element declares a module of animation_clip elements.
	AnimationClipsLibraries []*TxsdLibraryAnimationClips `xml:"http://www.collada.org/2005/11/COLLADASchema library_animation_clips"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LibraryAnimationClips function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LibraryAnimationClips instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LibraryAnimationClips instance.
func (me *XsdGoPkgHasElems_LibraryAnimationClips) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LibraryAnimationClips; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AnimationClipsLibraries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The library_geometries element declares a module of geometry elements.
//	Geometry describes the visual shape and appearance of an object in the scene.
//	The geometry element categorizes the declaration of geometric information. Geometry is a
//	branch of mathematics that deals with the measurement, properties, and relationships of
//	points, lines, angles, surfaces, and solids.
//	The mesh element contains vertex and primitive information sufficient to describe basic geometric meshes.
//	The linestrips element provides the information needed to bind vertex attributes together and
//	then organize those vertices into connected line-strips. Each line-strip described by the mesh
//	has an arbitrary number of vertices. Each line segment within the line-strip is formed from the
//	current vertex and the preceding vertex.
//	The p element represents primitive data for the primitive types (lines, linestrips, polygons,
//	polylist, triangles, trifans, tristrips). The p element contains indices that reference into
//	the parent's source elements referenced by the input elements.
type XsdGoPkgHasElems_P struct {
	//	The p element represents primitive data for the primitive types (lines, linestrips, polygons,
	//	polylist, triangles, trifans, tristrips). The p element contains indices that reference into
	//	the parent's source elements referenced by the input elements.
	Ps []TListOfUInts `xml:"http://www.collada.org/2005/11/COLLADASchema p"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_P function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_P instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_P instance.
func (me *XsdGoPkgHasElems_P) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_P; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The material attribute declares a symbol for a material. This symbol is bound to a material at
//	the time of instantiation. If the material attribute is not specified then the lighting and
//	shading results are application defined. Optional attribute.
type XsdGoPkgHasAttr_Material_XsdtNCName_ struct {
	//	The material attribute declares a symbol for a material. This symbol is bound to a material at
	//	the time of instantiation. If the material attribute is not specified then the lighting and
	//	shading results are application defined. Optional attribute.
	Material xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema material,attr"`
}

type TxsdLinestrips struct {
	//	The input element may occur any number of times. This input is a local input with the offset
	//	and set attributes.
	XsdGoPkgHasElems_inputsequencevertex_weightssequenceskinschema_Input_TInputLocalOffset_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The linestrips element may have any number of p elements.
	XsdGoPkgHasElems_P

	//	The count attribute indicates the number of linestrip primitives. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The material attribute declares a symbol for a material. This symbol is bound to a material
	//	at the time of instantiation. If the material attribute is not specified then the lighting
	//	and shading results are application defined. Optional attribute.
	XsdGoPkgHasAttr_Material_XsdtNCName_
}

//	If the WalkHandlers.TxsdLinestrips function is not nil (ie. was set by outside code), calls it with this TxsdLinestrips instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TxsdLinestrips instance.
func (me *TxsdLinestrips) Walk() (err error) {
	if fn := WalkHandlers.TxsdLinestrips; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_inputsequencevertex_weightssequenceskinschema_Input_TInputLocalOffset_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_P.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Linestrips struct {
	//	The linestrips element provides the information needed to bind vertex attributes together and
	//	then organize those vertices into connected line-strips. Each line-strip described by the mesh
	//	has an arbitrary number of vertices. Each line segment within the line-strip is formed from the
	//	current vertex and the preceding vertex.
	Linestripses []*TxsdLinestrips `xml:"http://www.collada.org/2005/11/COLLADASchema linestrips"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Linestrips function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Linestrips instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Linestrips instance.
func (me *XsdGoPkgHasElems_Linestrips) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Linestrips; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Linestripses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The triangles element provides the information needed to bind vertex attributes together and
//	then organize those vertices into individual triangles.	Each triangle described by the mesh has
//	three vertices. The first triangle is formed from the first, second, and third vertices. The
//	second triangle is formed from the fourth, fifth, and sixth vertices, and so on.
//	The p element represents primitive data for the primitive types (lines, linestrips, polygons,
//	polylist, triangles, trifans, tristrips). The p element contains indices that reference into
//	the parent's source elements referenced by the input elements.
type XsdGoPkgHasElem_P struct {
	//	The p element represents primitive data for the primitive types (lines, linestrips, polygons,
	//	polylist, triangles, trifans, tristrips). The p element contains indices that reference into
	//	the parent's source elements referenced by the input elements.
	P TListOfUInts `xml:"http://www.collada.org/2005/11/COLLADASchema p"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_P function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_P instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_P instance.
func (me *XsdGoPkgHasElem_P) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_P; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdTriangles struct {
	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The count attribute indicates the number of triangle primitives. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_

	//	The triangles element may have any number of p elements.
	XsdGoPkgHasElem_P

	//	The input element may occur any number of times. This input is a local input with the
	//	offset and set attributes.
	XsdGoPkgHasElems_inputsequencevertex_weightssequenceskinschema_Input_TInputLocalOffset_

	//	The material attribute declares a symbol for a material. This symbol is bound to a material at
	//	the time of instantiation. Optional attribute. If the material attribute is not specified then
	//	the lighting and shading results are application defined.
	XsdGoPkgHasAttr_Material_XsdtNCName_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra
}

//	If the WalkHandlers.TxsdTriangles function is not nil (ie. was set by outside code), calls it with this TxsdTriangles instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TxsdTriangles instance.
func (me *TxsdTriangles) Walk() (err error) {
	if fn := WalkHandlers.TxsdTriangles; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_P.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_inputsequencevertex_weightssequenceskinschema_Input_TInputLocalOffset_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Triangles struct {
	//	The triangles element provides the information needed to bind vertex attributes together and
	//	then organize those vertices into individual triangles.	Each triangle described by the mesh has
	//	three vertices. The first triangle is formed from the first, second, and third vertices. The
	//	second triangle is formed from the fourth, fifth, and sixth vertices, and so on.
	Triangleses []*TxsdTriangles `xml:"http://www.collada.org/2005/11/COLLADASchema triangles"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Triangles function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Triangles instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Triangles instance.
func (me *XsdGoPkgHasElems_Triangles) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Triangles; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Triangleses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The polygons element provides the information needed to bind vertex attributes together and
//	then organize those vertices into individual polygons. The polygons described can contain
//	arbitrary numbers of vertices. These polygons may be self intersecting and may also contain holes.
//	The ph element descripes a polygon with holes.
//	The h element represents a hole in the polygon specified. There must be at least one h element.
type XsdGoPkgHasElems_hsequencephchoicesequencepolygonsschema_H_TListOfUInts_ struct {
	//	The h element represents a hole in the polygon specified. There must be at least one h element.
	Hs []TListOfUInts `xml:"http://www.collada.org/2005/11/COLLADASchema h"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_hsequencephchoicesequencepolygonsschema_H_TListOfUInts_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_hsequencephchoicesequencepolygonsschema_H_TListOfUInts_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_hsequencephchoicesequencepolygonsschema_H_TListOfUInts_ instance.
func (me *XsdGoPkgHasElems_hsequencephchoicesequencepolygonsschema_H_TListOfUInts_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_hsequencephchoicesequencepolygonsschema_H_TListOfUInts_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPolygonsSequenceChoicePh struct {
	//	Theere may only be one p element.
	XsdGoPkgHasElem_P

	//	The h element represents a hole in the polygon specified. There must be at least one h element.
	XsdGoPkgHasElems_hsequencephchoicesequencepolygonsschema_H_TListOfUInts_
}

//	If the WalkHandlers.TxsdPolygonsSequenceChoicePh function is not nil (ie. was set by outside code), calls it with this TxsdPolygonsSequenceChoicePh instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdPolygonsSequenceChoicePh instance.
func (me *TxsdPolygonsSequenceChoicePh) Walk() (err error) {
	if fn := WalkHandlers.TxsdPolygonsSequenceChoicePh; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_P.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_hsequencephchoicesequencepolygonsschema_H_TListOfUInts_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_phchoicesequencepolygonsschema_Ph_TxsdPolygonsSequenceChoicePh_ struct {
	//	The ph element descripes a polygon with holes.
	Phs []*TxsdPolygonsSequenceChoicePh `xml:"http://www.collada.org/2005/11/COLLADASchema ph"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_phchoicesequencepolygonsschema_Ph_TxsdPolygonsSequenceChoicePh_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_phchoicesequencepolygonsschema_Ph_TxsdPolygonsSequenceChoicePh_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_phchoicesequencepolygonsschema_Ph_TxsdPolygonsSequenceChoicePh_ instance.
func (me *XsdGoPkgHasElems_phchoicesequencepolygonsschema_Ph_TxsdPolygonsSequenceChoicePh_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_phchoicesequencepolygonsschema_Ph_TxsdPolygonsSequenceChoicePh_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Phs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPolygons struct {
	//	The ph element descripes a polygon with holes.
	XsdGoPkgHasElems_phchoicesequencepolygonsschema_Ph_TxsdPolygonsSequenceChoicePh_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The input element may occur any number of times. This input is a local input with the
	//	offset and set attributes.
	XsdGoPkgHasElems_inputsequencevertex_weightssequenceskinschema_Input_TInputLocalOffset_

	//	The material attribute declares a symbol for a material. This symbol is bound to a material
	//	at the time of instantiation. If the material attribute is not specified then the lighting
	//	and shading results are application defined. Optional attribute.
	XsdGoPkgHasAttr_Material_XsdtNCName_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The p element may occur any number of times.
	XsdGoPkgHasElems_P

	//	The count attribute indicates the number of polygon primitives. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_
}

//	If the WalkHandlers.TxsdPolygons function is not nil (ie. was set by outside code), calls it with this TxsdPolygons instance as the single argument. Then calls the Walk() method on 4/7 embed(s) and 0/0 field(s) belonging to this TxsdPolygons instance.
func (me *TxsdPolygons) Walk() (err error) {
	if fn := WalkHandlers.TxsdPolygons; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_phchoicesequencepolygonsschema_Ph_TxsdPolygonsSequenceChoicePh_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_inputsequencevertex_weightssequenceskinschema_Input_TInputLocalOffset_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_P.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Polygons struct {
	//	The polygons element provides the information needed to bind vertex attributes together and
	//	then organize those vertices into individual polygons. The polygons described can contain
	//	arbitrary numbers of vertices. These polygons may be self intersecting and may also contain holes.
	Polygonses []*TxsdPolygons `xml:"http://www.collada.org/2005/11/COLLADASchema polygons"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Polygons function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Polygons instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Polygons instance.
func (me *XsdGoPkgHasElems_Polygons) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Polygons; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Polygonses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The vertices element declares the attributes and identity of mesh-vertices. The vertices element
//	describes mesh-vertices in a mesh geometry. The mesh-vertices represent the position (identity)
//	of the vertices comprising the mesh and other vertex attributes that are invariant to tessellation.
type TxsdVertices struct {
	//	The id attribute is a text string containing the unique identifier of this element. This
	//	value must be unique within the instance document. Required attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The input element must occur at least one time. These inputs are local inputs.
	XsdGoPkgHasElems_inputsequencesamplerschema_Input_TInputLocal_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra
}

//	If the WalkHandlers.TxsdVertices function is not nil (ie. was set by outside code), calls it with this TxsdVertices instance as the single argument. Then calls the Walk() method on 2/4 embed(s) and 0/0 field(s) belonging to this TxsdVertices instance.
func (me *TxsdVertices) Walk() (err error) {
	if fn := WalkHandlers.TxsdVertices; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_inputsequencesamplerschema_Input_TInputLocal_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Vertices struct {
	//	The vertices element declares the attributes and identity of mesh-vertices. The vertices element
	//	describes mesh-vertices in a mesh geometry. The mesh-vertices represent the position (identity)
	//	of the vertices comprising the mesh and other vertex attributes that are invariant to tessellation.
	Vertices *TxsdVertices `xml:"http://www.collada.org/2005/11/COLLADASchema vertices"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Vertices function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Vertices instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Vertices instance.
func (me *XsdGoPkgHasElem_Vertices) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Vertices; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Vertices.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The tristrips element provides the information needed to bind vertex attributes together and then
//	organize those vertices into connected triangles. Each triangle described by the mesh has three
//	vertices. The first triangle is formed from first, second, and third vertices. Each subsequent
//	triangle is formed from the current vertex, reusing the previous two vertices.
type TxsdTristrips struct {
	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The input element may occur any number of times. This input is a local input with the offset
	//	and set attributes.
	XsdGoPkgHasElems_inputsequencevertex_weightssequenceskinschema_Input_TInputLocalOffset_

	//	The tristrips element may have any number of p elements.
	XsdGoPkgHasElems_P

	//	The count attribute indicates the number of triangle strip primitives. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_

	//	The material attribute declares a symbol for a material. This symbol is bound to a material
	//	at the time of instantiation. If the material attribute is not specified then the lighting
	//	and shading results are application defined. Optional attribute.
	XsdGoPkgHasAttr_Material_XsdtNCName_
}

//	If the WalkHandlers.TxsdTristrips function is not nil (ie. was set by outside code), calls it with this TxsdTristrips instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TxsdTristrips instance.
func (me *TxsdTristrips) Walk() (err error) {
	if fn := WalkHandlers.TxsdTristrips; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_inputsequencevertex_weightssequenceskinschema_Input_TInputLocalOffset_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_P.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Tristrips struct {
	//	The tristrips element provides the information needed to bind vertex attributes together and then
	//	organize those vertices into connected triangles. Each triangle described by the mesh has three
	//	vertices. The first triangle is formed from first, second, and third vertices. Each subsequent
	//	triangle is formed from the current vertex, reusing the previous two vertices.
	Tristripses []*TxsdTristrips `xml:"http://www.collada.org/2005/11/COLLADASchema tristrips"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Tristrips function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Tristrips instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Tristrips instance.
func (me *XsdGoPkgHasElems_Tristrips) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Tristrips; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Tristripses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The lines element provides the information needed to bind vertex attributes together and then
//	organize those vertices into individual lines. Each line described by the mesh has two vertices.
//	The first line is formed from first and second vertices. The second line is formed from the
//	third and fourth vertices and so on.
type TxsdLines struct {
	//	The material attribute declares a symbol for a material. This symbol is bound to a material at
	//	the time of instantiation. If the material attribute is not specified then the lighting and
	//	shading results are application defined. Optional attribute.
	XsdGoPkgHasAttr_Material_XsdtNCName_

	//	The input element may occur any number of times. This input is a local input with the offset
	//	and set attributes.
	XsdGoPkgHasElems_inputsequencevertex_weightssequenceskinschema_Input_TInputLocalOffset_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The count attribute indicates the number of line primitives. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_

	//	The p element may occur once.
	XsdGoPkgHasElem_P
}

//	If the WalkHandlers.TxsdLines function is not nil (ie. was set by outside code), calls it with this TxsdLines instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TxsdLines instance.
func (me *TxsdLines) Walk() (err error) {
	if fn := WalkHandlers.TxsdLines; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_inputsequencevertex_weightssequenceskinschema_Input_TInputLocalOffset_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_P.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Lines struct {
	//	The lines element provides the information needed to bind vertex attributes together and then
	//	organize those vertices into individual lines. Each line described by the mesh has two vertices.
	//	The first line is formed from first and second vertices. The second line is formed from the
	//	third and fourth vertices and so on.
	Lineses []*TxsdLines `xml:"http://www.collada.org/2005/11/COLLADASchema lines"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Lines function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Lines instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Lines instance.
func (me *XsdGoPkgHasElems_Lines) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Lines; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Lineses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The trifans element provides the information needed to bind vertex attributes together and then
//	organize those vertices into connected triangles. Each triangle described by the mesh has three
//	vertices. The first triangle is formed from first, second, and third vertices. Each subsequent
//	triangle is formed from the current vertex, reusing the first and the previous vertices.
type TxsdTrifans struct {
	//	The trifans element may have any number of p elements.
	XsdGoPkgHasElems_P

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The material attribute declares a symbol for a material. This symbol is bound to a material
	//	at the time of instantiation. If the material attribute is not specified then the lighting
	//	and shading results are application defined. Optional attribute.
	XsdGoPkgHasAttr_Material_XsdtNCName_

	//	The input element may occur any number of times. This input is a local input with the
	//	offset and set attributes.
	XsdGoPkgHasElems_inputsequencevertex_weightssequenceskinschema_Input_TInputLocalOffset_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The count attribute indicates the number of triangle fan primitives. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_
}

//	If the WalkHandlers.TxsdTrifans function is not nil (ie. was set by outside code), calls it with this TxsdTrifans instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TxsdTrifans instance.
func (me *TxsdTrifans) Walk() (err error) {
	if fn := WalkHandlers.TxsdTrifans; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_P.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_inputsequencevertex_weightssequenceskinschema_Input_TInputLocalOffset_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Trifans struct {
	//	The trifans element provides the information needed to bind vertex attributes together and then
	//	organize those vertices into connected triangles. Each triangle described by the mesh has three
	//	vertices. The first triangle is formed from first, second, and third vertices. Each subsequent
	//	triangle is formed from the current vertex, reusing the first and the previous vertices.
	Trifanses []*TxsdTrifans `xml:"http://www.collada.org/2005/11/COLLADASchema trifans"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Trifans function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Trifans instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Trifans instance.
func (me *XsdGoPkgHasElems_Trifans) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Trifans; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Trifanses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The polylist element provides the information needed to bind vertex attributes together and
//	then organize those vertices into individual polygons. The polygons described in polylist can
//	contain arbitrary numbers of vertices. Unlike the polygons element, the polylist element cannot
//	contain polygons with holes.
type TxsdPolylist struct {
	//	The vcount element contains a list of integers describing the number of sides for each polygon
	//	described by the polylist element. The vcount element may occur once.
	XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskinschema_Vcount_TListOfUInts_

	//	The p element may occur once.
	XsdGoPkgHasElem_P

	//	The input element may occur any number of times. This input is a local input with the
	//	offset and set attributes.
	XsdGoPkgHasElems_inputsequencevertex_weightssequenceskinschema_Input_TInputLocalOffset_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The material attribute declares a symbol for a material. This symbol is bound to a material at
	//	the time of instantiation. If the material attribute is not specified then the lighting and
	//	shading results are application defined. Optional attribute.
	XsdGoPkgHasAttr_Material_XsdtNCName_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The count attribute indicates the number of polygon primitives. Required attribute.
	XsdGoPkgHasAttr_Count_Tuint_
}

//	If the WalkHandlers.TxsdPolylist function is not nil (ie. was set by outside code), calls it with this TxsdPolylist instance as the single argument. Then calls the Walk() method on 4/7 embed(s) and 0/0 field(s) belonging to this TxsdPolylist instance.
func (me *TxsdPolylist) Walk() (err error) {
	if fn := WalkHandlers.TxsdPolylist; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskinschema_Vcount_TListOfUInts_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_P.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_inputsequencevertex_weightssequenceskinschema_Input_TInputLocalOffset_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Polylist struct {
	//	The polylist element provides the information needed to bind vertex attributes together and
	//	then organize those vertices into individual polygons. The polygons described in polylist can
	//	contain arbitrary numbers of vertices. Unlike the polygons element, the polylist element cannot
	//	contain polygons with holes.
	Polylists []*TxsdPolylist `xml:"http://www.collada.org/2005/11/COLLADASchema polylist"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Polylist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Polylist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Polylist instance.
func (me *XsdGoPkgHasElems_Polylist) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Polylist; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Polylists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMesh struct {
	//	The mesh element must contain one or more source elements.
	XsdGoPkgHasElems_Source

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The mesh element may contain any number of linestrips elements.
	XsdGoPkgHasElems_Linestrips

	//	The mesh element may contain any number of triangles elements.
	XsdGoPkgHasElems_Triangles

	//	The mesh element may contain any number of polygons elements.
	XsdGoPkgHasElems_Polygons

	//	The mesh element must contain one vertices element.
	XsdGoPkgHasElem_Vertices

	//	The mesh element may contain any number of tristrips elements.
	XsdGoPkgHasElems_Tristrips

	//	The mesh element may contain any number of lines elements.
	XsdGoPkgHasElems_Lines

	//	The mesh element may contain any number of trifans elements.
	XsdGoPkgHasElems_Trifans

	//	The mesh element may contain any number of polylist elements.
	XsdGoPkgHasElems_Polylist
}

//	If the WalkHandlers.TxsdMesh function is not nil (ie. was set by outside code), calls it with this TxsdMesh instance as the single argument. Then calls the Walk() method on 10/10 embed(s) and 0/0 field(s) belonging to this TxsdMesh instance.
func (me *TxsdMesh) Walk() (err error) {
	if fn := WalkHandlers.TxsdMesh; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Source.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Linestrips.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Triangles.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Polygons.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Vertices.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tristrips.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Lines.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Trifans.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Polylist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Mesh struct {
	//	The mesh element contains vertex and primitive information sufficient to describe basic geometric meshes.
	Mesh *TxsdMesh `xml:"http://www.collada.org/2005/11/COLLADASchema mesh"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Mesh function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Mesh instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Mesh instance.
func (me *XsdGoPkgHasElem_Mesh) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Mesh; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Mesh.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The spline element contains control vertex information sufficient to describe basic splines.
//	The control vertices element  must occur  exactly one time. It is used to describe the CVs of the spline.
type TxsdSplineSequenceControlVertices struct {
	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The input element must occur at least one time. These inputs are local inputs.
	XsdGoPkgHasElems_inputsequencesamplerschema_Input_TInputLocal_
}

//	If the WalkHandlers.TxsdSplineSequenceControlVertices function is not nil (ie. was set by outside code), calls it with this TxsdSplineSequenceControlVertices instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdSplineSequenceControlVertices instance.
func (me *TxsdSplineSequenceControlVertices) Walk() (err error) {
	if fn := WalkHandlers.TxsdSplineSequenceControlVertices; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_inputsequencesamplerschema_Input_TInputLocal_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_control_verticessequencesplineschema_ControlVertices_TxsdSplineSequenceControlVertices_ struct {
	//	The control vertices element  must occur  exactly one time. It is used to describe the CVs of the spline.
	ControlVertices *TxsdSplineSequenceControlVertices `xml:"http://www.collada.org/2005/11/COLLADASchema control_vertices"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_control_verticessequencesplineschema_ControlVertices_TxsdSplineSequenceControlVertices_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_control_verticessequencesplineschema_ControlVertices_TxsdSplineSequenceControlVertices_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_control_verticessequencesplineschema_ControlVertices_TxsdSplineSequenceControlVertices_ instance.
func (me *XsdGoPkgHasElem_control_verticessequencesplineschema_ControlVertices_TxsdSplineSequenceControlVertices_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_control_verticessequencesplineschema_ControlVertices_TxsdSplineSequenceControlVertices_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ControlVertices.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Closed_Tbool_False struct {
	Closed Tbool `xml:"http://www.collada.org/2005/11/COLLADASchema closed,attr"`
}

//	Returns the default value for Closed -- false
func (me XsdGoPkgHasAttr_Closed_Tbool_False) ClosedDefault() Tbool { return Tbool(false) }

type TxsdSpline struct {
	XsdGoPkgHasAttr_Closed_Tbool_False

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The mesh element must contain one or more source elements.
	XsdGoPkgHasElems_Source

	//	The control vertices element  must occur  exactly one time. It is used to describe the CVs of the spline.
	XsdGoPkgHasElem_control_verticessequencesplineschema_ControlVertices_TxsdSplineSequenceControlVertices_
}

//	If the WalkHandlers.TxsdSpline function is not nil (ie. was set by outside code), calls it with this TxsdSpline instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TxsdSpline instance.
func (me *TxsdSpline) Walk() (err error) {
	if fn := WalkHandlers.TxsdSpline; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Source.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_control_verticessequencesplineschema_ControlVertices_TxsdSplineSequenceControlVertices_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Spline struct {
	//	The spline element contains control vertex information sufficient to describe basic splines.
	Spline *TxsdSpline `xml:"http://www.collada.org/2005/11/COLLADASchema spline"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Spline function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Spline instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Spline instance.
func (me *XsdGoPkgHasElem_Spline) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Spline; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Spline.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The definition of the convex_mesh element is identical to the mesh element with the exception that
//	instead of a complete description (source, vertices, polygons etc.), it may simply point to another
//	geometry to derive its shape. The latter case means that the convex hull of that geometry should
//	be computed and is indicated by the optional “convex_hull_of” attribute.
//	The convex_hull_of attribute is a URI string of geometry to compute the convex hull of.
//	Optional attribute.
type XsdGoPkgHasAttr_ConvexHullOf_XsdtAnyURI_ struct {
	//	The convex_hull_of attribute is a URI string of geometry to compute the convex hull of.
	//	Optional attribute.
	ConvexHullOf xsdt.AnyURI `xml:"http://www.collada.org/2005/11/COLLADASchema convex_hull_of,attr"`
}

type TxsdConvexMesh struct {
	XsdGoPkgHasElems_Trifans

	XsdGoPkgHasElems_Source

	XsdGoPkgHasElems_Polylist

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElems_Polygons

	//	The convex_hull_of attribute is a URI string of geometry to compute the convex hull of.
	//	Optional attribute.
	XsdGoPkgHasAttr_ConvexHullOf_XsdtAnyURI_

	XsdGoPkgHasElems_Lines

	XsdGoPkgHasElems_Linestrips

	XsdGoPkgHasElems_Tristrips

	XsdGoPkgHasElems_Triangles

	XsdGoPkgHasElem_Vertices
}

//	If the WalkHandlers.TxsdConvexMesh function is not nil (ie. was set by outside code), calls it with this TxsdConvexMesh instance as the single argument. Then calls the Walk() method on 10/11 embed(s) and 0/0 field(s) belonging to this TxsdConvexMesh instance.
func (me *TxsdConvexMesh) Walk() (err error) {
	if fn := WalkHandlers.TxsdConvexMesh; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Triangles.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Vertices.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Trifans.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Source.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Polylist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Polygons.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Lines.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Linestrips.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tristrips.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ConvexMesh struct {
	//	The definition of the convex_mesh element is identical to the mesh element with the exception that
	//	instead of a complete description (source, vertices, polygons etc.), it may simply point to another
	//	geometry to derive its shape. The latter case means that the convex hull of that geometry should
	//	be computed and is indicated by the optional “convex_hull_of” attribute.
	ConvexMesh *TxsdConvexMesh `xml:"http://www.collada.org/2005/11/COLLADASchema convex_mesh"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ConvexMesh function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ConvexMesh instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ConvexMesh instance.
func (me *XsdGoPkgHasElem_ConvexMesh) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ConvexMesh; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ConvexMesh.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGeometry struct {
	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The geometry element may contain only one mesh or convex_mesh.
	XsdGoPkgHasElem_Mesh

	XsdGoPkgHasElem_Spline

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The geometry element may contain an asset element.
	XsdGoPkgHasElem_Asset

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The geometry element may contain only one mesh or convex_mesh.
	XsdGoPkgHasElem_ConvexMesh
}

//	If the WalkHandlers.TxsdGeometry function is not nil (ie. was set by outside code), calls it with this TxsdGeometry instance as the single argument. Then calls the Walk() method on 5/7 embed(s) and 0/0 field(s) belonging to this TxsdGeometry instance.
func (me *TxsdGeometry) Walk() (err error) {
	if fn := WalkHandlers.TxsdGeometry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Mesh.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Spline.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ConvexMesh.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Geometry struct {
	//	Geometry describes the visual shape and appearance of an object in the scene.
	//	The geometry element categorizes the declaration of geometric information. Geometry is a
	//	branch of mathematics that deals with the measurement, properties, and relationships of
	//	points, lines, angles, surfaces, and solids.
	Geometries []*TxsdGeometry `xml:"http://www.collada.org/2005/11/COLLADASchema geometry"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Geometry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Geometry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Geometry instance.
func (me *XsdGoPkgHasElems_Geometry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Geometry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Geometries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdLibraryGeometries struct {
	//	There must be at least one geometry element.
	XsdGoPkgHasElems_Geometry

	//	The library_geometries element may contain an asset element.
	XsdGoPkgHasElem_Asset

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_
}

//	If the WalkHandlers.TxsdLibraryGeometries function is not nil (ie. was set by outside code), calls it with this TxsdLibraryGeometries instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdLibraryGeometries instance.
func (me *TxsdLibraryGeometries) Walk() (err error) {
	if fn := WalkHandlers.TxsdLibraryGeometries; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Geometry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LibraryGeometries struct {
	//	The library_geometries element declares a module of geometry elements.
	GeometriesLibraries []*TxsdLibraryGeometries `xml:"http://www.collada.org/2005/11/COLLADASchema library_geometries"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LibraryGeometries function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LibraryGeometries instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LibraryGeometries instance.
func (me *XsdGoPkgHasElems_LibraryGeometries) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LibraryGeometries; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GeometriesLibraries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The library_effects element declares a module of effect elements.
//	A self contained description of a shader effect.
//	The newparam element allows you to create new effect parameters which can be shared by multipe profiles.
//	This element creates a new, named param object in the FX Runtime, assigns it a type, an initial value, and additional attributes at declaration time.
//	The semantic element allows you to specify a semantic for this new param.
type XsdGoPkgHasElem_semanticsequencefx_newparam_commonschema_Semantic_XsdtNCName_ struct {
	//	The semantic element allows you to specify a semantic for this new param.
	Semantic xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema semantic"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_semanticsequencefx_newparam_commonschema_Semantic_XsdtNCName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_semanticsequencefx_newparam_commonschema_Semantic_XsdtNCName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_semanticsequencefx_newparam_commonschema_Semantic_XsdtNCName_ instance.
func (me *XsdGoPkgHasElem_semanticsequencefx_newparam_commonschema_Semantic_XsdtNCName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_semanticsequencefx_newparam_commonschema_Semantic_XsdtNCName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The annotate element allows you to specify an annotation for this new param.
//	A group that specifies the allowable types for an annotation.
type XsdGoPkgHasElem_stringchoicefx_annotate_type_commonschema_String_XsdtString_ struct {
	String xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema string"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_stringchoicefx_annotate_type_commonschema_String_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stringchoicefx_annotate_type_commonschema_String_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_stringchoicefx_annotate_type_commonschema_String_XsdtString_ instance.
func (me *XsdGoPkgHasElem_stringchoicefx_annotate_type_commonschema_String_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_stringchoicefx_annotate_type_commonschema_String_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasGroup_FxAnnotateTypeCommon struct {
	XsdGoPkgHasElem_floatchoicefx_basic_type_commonschema_Float_Tfloat_

	XsdGoPkgHasElem_int4choicefx_basic_type_commonschema_Int4_Tint4_

	XsdGoPkgHasElem_float4choicefx_basic_type_commonschema_Float4_Tfloat4_

	XsdGoPkgHasElem_int3choicefx_basic_type_commonschema_Int3_Tint3_

	XsdGoPkgHasElem_bool3choicefx_basic_type_commonschema_Bool3_Tbool3_

	XsdGoPkgHasElem_intchoicefx_basic_type_commonschema_Int_Tint_

	XsdGoPkgHasElem_int2choicefx_basic_type_commonschema_Int2_Tint2_

	XsdGoPkgHasElem_stringchoicefx_annotate_type_commonschema_String_XsdtString_

	XsdGoPkgHasElem_bool4choicefx_basic_type_commonschema_Bool4_Tbool4_

	XsdGoPkgHasElem_float2choicefx_basic_type_commonschema_Float2_Tfloat2_

	XsdGoPkgHasElem_float2x2choicefx_basic_type_commonschema_Float2X2_Tfloat2X2_

	XsdGoPkgHasElem_float4x4choicefx_basic_type_commonschema_Float4X4_Tfloat4X4_

	XsdGoPkgHasElem_bool2choicefx_basic_type_commonschema_Bool2_Tbool2_

	XsdGoPkgHasElem_float3x3choicefx_basic_type_commonschema_Float3X3_Tfloat3X3_

	XsdGoPkgHasElem_float3choicefx_basic_type_commonschema_Float3_Tfloat3_

	XsdGoPkgHasElem_boolchoicefx_basic_type_commonschema_Bool_Tbool_
}

//	If the WalkHandlers.XsdGoPkgHasGroup_FxAnnotateTypeCommon function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_FxAnnotateTypeCommon instance as the single argument. Then calls the Walk() method on 16/16 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_FxAnnotateTypeCommon instance.
func (me *XsdGoPkgHasGroup_FxAnnotateTypeCommon) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasGroup_FxAnnotateTypeCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_float3x3choicefx_basic_type_commonschema_Float3X3_Tfloat3X3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3choicefx_basic_type_commonschema_Float3_Tfloat3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_boolchoicefx_basic_type_commonschema_Bool_Tbool_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_floatchoicefx_basic_type_commonschema_Float_Tfloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int4choicefx_basic_type_commonschema_Int4_Tint4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4choicefx_basic_type_commonschema_Float4_Tfloat4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int3choicefx_basic_type_commonschema_Int3_Tint3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool3choicefx_basic_type_commonschema_Bool3_Tbool3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_intchoicefx_basic_type_commonschema_Int_Tint_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int2choicefx_basic_type_commonschema_Int2_Tint2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stringchoicefx_annotate_type_commonschema_String_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool4choicefx_basic_type_commonschema_Bool4_Tbool4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2choicefx_basic_type_commonschema_Float2_Tfloat2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2x2choicefx_basic_type_commonschema_Float2X2_Tfloat2X2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4x4choicefx_basic_type_commonschema_Float4X4_Tfloat4X4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool2choicefx_basic_type_commonschema_Bool2_Tbool2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TfxAnnotateCommon struct {
	XsdGoPkgHasGroup_FxAnnotateTypeCommon

	XsdGoPkgHasAttr_Name_XsdtNCName_
}

//	If the WalkHandlers.TfxAnnotateCommon function is not nil (ie. was set by outside code), calls it with this TfxAnnotateCommon instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TfxAnnotateCommon instance.
func (me *TfxAnnotateCommon) Walk() (err error) {
	if fn := WalkHandlers.TfxAnnotateCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasGroup_FxAnnotateTypeCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_ struct {
	//	The annotate element allows you to specify an annotation for this new param.
	Annotates []*TfxAnnotateCommon `xml:"http://www.collada.org/2005/11/COLLADASchema annotate"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_ instance.
func (me *XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Annotates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The modifier element allows you to specify a modifier for this new param.
type TfxModifierEnumCommon xsdt.Nmtoken

//	Returns true if the value of this enumerated TfxModifierEnumCommon is "SHARED".
func (me TfxModifierEnumCommon) IsShared() bool { return me == "SHARED" }

//	Returns true if the value of this enumerated TfxModifierEnumCommon is "VOLATILE".
func (me TfxModifierEnumCommon) IsVolatile() bool { return me == "VOLATILE" }

//	This convenience method just performs a simple type conversion to TfxModifierEnumCommon's alias type xsdt.Nmtoken.
func (me TfxModifierEnumCommon) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TfxModifierEnumCommon is "STATIC".
func (me TfxModifierEnumCommon) IsStatic() bool { return me == "STATIC" }

//	Returns true if the value of this enumerated TfxModifierEnumCommon is "CONST".
func (me TfxModifierEnumCommon) IsConst() bool { return me == "CONST" }

//	Since TfxModifierEnumCommon is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxModifierEnumCommon) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Returns true if the value of this enumerated TfxModifierEnumCommon is "EXTERN".
func (me TfxModifierEnumCommon) IsExtern() bool { return me == "EXTERN" }

//	Returns true if the value of this enumerated TfxModifierEnumCommon is "VARYING".
func (me TfxModifierEnumCommon) IsVarying() bool { return me == "VARYING" }

//	Since TfxModifierEnumCommon is just a simple String type, this merely returns the current string value.
func (me TfxModifierEnumCommon) String() string { return xsdt.Nmtoken(me).String() }

//	Returns true if the value of this enumerated TfxModifierEnumCommon is "UNIFORM".
func (me TfxModifierEnumCommon) IsUniform() bool { return me == "UNIFORM" }

type XsdGoPkgHasElem_modifiersequencefx_newparam_commonschema_Modifier_TfxModifierEnumCommon_ struct {
	//	The modifier element allows you to specify a modifier for this new param.
	Modifier TfxModifierEnumCommon `xml:"http://www.collada.org/2005/11/COLLADASchema modifier"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_modifiersequencefx_newparam_commonschema_Modifier_TfxModifierEnumCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_modifiersequencefx_newparam_commonschema_Modifier_TfxModifierEnumCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_modifiersequencefx_newparam_commonschema_Modifier_TfxModifierEnumCommon_ instance.
func (me *XsdGoPkgHasElem_modifiersequencefx_newparam_commonschema_Modifier_TfxModifierEnumCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_modifiersequencefx_newparam_commonschema_Modifier_TfxModifierEnumCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TfxNewparamCommon struct {
	//	The semantic element allows you to specify a semantic for this new param.
	XsdGoPkgHasElem_semanticsequencefx_newparam_commonschema_Semantic_XsdtNCName_

	//	The annotate element allows you to specify an annotation for this new param.
	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	//	The modifier element allows you to specify a modifier for this new param.
	XsdGoPkgHasElem_modifiersequencefx_newparam_commonschema_Modifier_TfxModifierEnumCommon_

	XsdGoPkgHasGroup_FxBasicTypeCommon
}

//	If the WalkHandlers.TfxNewparamCommon function is not nil (ie. was set by outside code), calls it with this TfxNewparamCommon instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TfxNewparamCommon instance.
func (me *TfxNewparamCommon) Walk() (err error) {
	if fn := WalkHandlers.TfxNewparamCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasGroup_FxBasicTypeCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_semanticsequencefx_newparam_commonschema_Semantic_XsdtNCName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_modifiersequencefx_newparam_commonschema_Modifier_TfxModifierEnumCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_newparamsequenceeffectschema_Newparam_TfxNewparamCommon_ struct {
	//	The newparam element allows you to create new effect parameters which can be shared by multipe profiles.
	Newparams []*TfxNewparamCommon `xml:"http://www.collada.org/2005/11/COLLADASchema newparam"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_newparamsequenceeffectschema_Newparam_TfxNewparamCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_newparamsequenceeffectschema_Newparam_TfxNewparamCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_newparamsequenceeffectschema_Newparam_TfxNewparamCommon_ instance.
func (me *XsdGoPkgHasElems_newparamsequenceeffectschema_Newparam_TfxNewparamCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_newparamsequenceeffectschema_Newparam_TfxNewparamCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Newparams {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The fx_profile_abstract element is only used as a substitution group hook for COLLADA FX profiles.
//	Opens a block of COMMON platform-specific data types and technique declarations.
type TcommonNewparamType struct {
	XsdGoPkgHasElem_semanticsequencefx_newparam_commonschema_Semantic_XsdtNCName_

	XsdGoPkgHasElem_sampler2Dchoicefx_basic_type_commonschema_Sampler2D_TfxSampler2DCommon_

	XsdGoPkgHasElem_float4choicefx_basic_type_commonschema_Float4_Tfloat4_

	XsdGoPkgHasElem_float2choicefx_basic_type_commonschema_Float2_Tfloat2_

	XsdGoPkgHasElem_float3choicefx_basic_type_commonschema_Float3_Tfloat3_

	XsdGoPkgHasElem_surfacechoicefx_basic_type_commonschema_Surface_TfxSurfaceCommon_

	XsdGoPkgHasElem_floatchoicefx_basic_type_commonschema_Float_Tfloat_

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_
}

//	If the WalkHandlers.TcommonNewparamType function is not nil (ie. was set by outside code), calls it with this TcommonNewparamType instance as the single argument. Then calls the Walk() method on 7/8 embed(s) and 0/0 field(s) belonging to this TcommonNewparamType instance.
func (me *TcommonNewparamType) Walk() (err error) {
	if fn := WalkHandlers.TcommonNewparamType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_float2choicefx_basic_type_commonschema_Float2_Tfloat2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3choicefx_basic_type_commonschema_Float3_Tfloat3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_surfacechoicefx_basic_type_commonschema_Surface_TfxSurfaceCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_floatchoicefx_basic_type_commonschema_Float_Tfloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_semanticsequencefx_newparam_commonschema_Semantic_XsdtNCName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sampler2Dchoicefx_basic_type_commonschema_Sampler2D_TfxSampler2DCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4choicefx_basic_type_commonschema_Float4_Tfloat4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_newparamchoicesequenceprofile_COMMONschema_Newparam_TcommonNewparamType_ struct {
	Newparams []*TcommonNewparamType `xml:"http://www.collada.org/2005/11/COLLADASchema newparam"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_newparamchoicesequenceprofile_COMMONschema_Newparam_TcommonNewparamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_newparamchoicesequenceprofile_COMMONschema_Newparam_TcommonNewparamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_newparamchoicesequenceprofile_COMMONschema_Newparam_TcommonNewparamType_ instance.
func (me *XsdGoPkgHasElems_newparamchoicesequenceprofile_COMMONschema_Newparam_TcommonNewparamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_newparamchoicesequenceprofile_COMMONschema_Newparam_TcommonNewparamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Newparams {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
type TxsdCommonColorOrTextureTypeChoiceParam struct {
	XsdGoPkgHasAttr_Ref_XsdtNCName_
}

//	If the WalkHandlers.TxsdCommonColorOrTextureTypeChoiceParam function is not nil (ie. was set by outside code), calls it with this TxsdCommonColorOrTextureTypeChoiceParam instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TxsdCommonColorOrTextureTypeChoiceParam instance.
func (me *TxsdCommonColorOrTextureTypeChoiceParam) Walk() (err error) {
	if fn := WalkHandlers.TxsdCommonColorOrTextureTypeChoiceParam; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_paramchoicecommon_color_or_texture_typeschema_Param_TxsdCommonColorOrTextureTypeChoiceParam_ struct {
	Param *TxsdCommonColorOrTextureTypeChoiceParam `xml:"http://www.collada.org/2005/11/COLLADASchema param"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_paramchoicecommon_color_or_texture_typeschema_Param_TxsdCommonColorOrTextureTypeChoiceParam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_paramchoicecommon_color_or_texture_typeschema_Param_TxsdCommonColorOrTextureTypeChoiceParam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_paramchoicecommon_color_or_texture_typeschema_Param_TxsdCommonColorOrTextureTypeChoiceParam_ instance.
func (me *XsdGoPkgHasElem_paramchoicecommon_color_or_texture_typeschema_Param_TxsdCommonColorOrTextureTypeChoiceParam_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_paramchoicecommon_color_or_texture_typeschema_Param_TxsdCommonColorOrTextureTypeChoiceParam_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Param.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Texture_XsdtNCName_ struct {
	Texture xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema texture,attr"`
}

type XsdGoPkgHasAttr_Texcoord_XsdtNCName_ struct {
	Texcoord xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema texcoord,attr"`
}

//	The extra element declares additional information regarding its parent element.
type XsdGoPkgHasElem_Extra struct {
	//	The extra element declares additional information regarding its parent element.
	Extra *TxsdExtra `xml:"http://www.collada.org/2005/11/COLLADASchema extra"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Extra function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Extra instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Extra instance.
func (me *XsdGoPkgHasElem_Extra) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Extra; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCommonColorOrTextureTypeChoiceTexture struct {
	XsdGoPkgHasAttr_Texcoord_XsdtNCName_

	XsdGoPkgHasElem_Extra

	XsdGoPkgHasAttr_Texture_XsdtNCName_
}

//	If the WalkHandlers.TxsdCommonColorOrTextureTypeChoiceTexture function is not nil (ie. was set by outside code), calls it with this TxsdCommonColorOrTextureTypeChoiceTexture instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TxsdCommonColorOrTextureTypeChoiceTexture instance.
func (me *TxsdCommonColorOrTextureTypeChoiceTexture) Walk() (err error) {
	if fn := WalkHandlers.TxsdCommonColorOrTextureTypeChoiceTexture; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_texturechoicecommon_color_or_texture_typeschema_Texture_TxsdCommonColorOrTextureTypeChoiceTexture_ struct {
	Texture *TxsdCommonColorOrTextureTypeChoiceTexture `xml:"http://www.collada.org/2005/11/COLLADASchema texture"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_texturechoicecommon_color_or_texture_typeschema_Texture_TxsdCommonColorOrTextureTypeChoiceTexture_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texturechoicecommon_color_or_texture_typeschema_Texture_TxsdCommonColorOrTextureTypeChoiceTexture_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texturechoicecommon_color_or_texture_typeschema_Texture_TxsdCommonColorOrTextureTypeChoiceTexture_ instance.
func (me *XsdGoPkgHasElem_texturechoicecommon_color_or_texture_typeschema_Texture_TxsdCommonColorOrTextureTypeChoiceTexture_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_texturechoicecommon_color_or_texture_typeschema_Texture_TxsdCommonColorOrTextureTypeChoiceTexture_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Texture.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCommonColorOrTextureTypeChoiceColor struct {
	XsdGoPkgValue TfxColorCommon `xml:",chardata"`

	XsdGoPkgHasAttr_Sid_XsdtNCName_
}

//	Returns the value of its XsdGoPkgValue field as a xsdt.String (which TfxColorCommon is just aliasing).
func (me *TxsdCommonColorOrTextureTypeChoiceColor) ToXsdtString() xsdt.String {
	return me.XsdGoPkgValue.ToTfloat4().ToTListOfFloats().ToXsdtString()
}

//	If the WalkHandlers.TxsdCommonColorOrTextureTypeChoiceColor function is not nil (ie. was set by outside code), calls it with this TxsdCommonColorOrTextureTypeChoiceColor instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TxsdCommonColorOrTextureTypeChoiceColor instance.
func (me *TxsdCommonColorOrTextureTypeChoiceColor) Walk() (err error) {
	if fn := WalkHandlers.TxsdCommonColorOrTextureTypeChoiceColor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the value of its XsdGoPkgValue field as a Tfloat4 (which TfxColorCommon is just aliasing).
func (me *TxsdCommonColorOrTextureTypeChoiceColor) ToTfloat4() Tfloat4 {
	return me.XsdGoPkgValue.ToTfloat4()
}

//	Returns the value of its XsdGoPkgValue field as a TListOfFloats (which TfxColorCommon is just aliasing).
func (me *TxsdCommonColorOrTextureTypeChoiceColor) ToTListOfFloats() TListOfFloats {
	return me.XsdGoPkgValue.ToTfloat4().ToTListOfFloats()
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TxsdCommonColorOrTextureTypeChoiceColor) ToTfxColorCommon() TfxColorCommon {
	return me.XsdGoPkgValue
}

type XsdGoPkgHasElem_colorchoicecommon_color_or_texture_typeschema_Color_TxsdCommonColorOrTextureTypeChoiceColor_ struct {
	Color *TxsdCommonColorOrTextureTypeChoiceColor `xml:"http://www.collada.org/2005/11/COLLADASchema color"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_colorchoicecommon_color_or_texture_typeschema_Color_TxsdCommonColorOrTextureTypeChoiceColor_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_colorchoicecommon_color_or_texture_typeschema_Color_TxsdCommonColorOrTextureTypeChoiceColor_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_colorchoicecommon_color_or_texture_typeschema_Color_TxsdCommonColorOrTextureTypeChoiceColor_ instance.
func (me *XsdGoPkgHasElem_colorchoicecommon_color_or_texture_typeschema_Color_TxsdCommonColorOrTextureTypeChoiceColor_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_colorchoicecommon_color_or_texture_typeschema_Color_TxsdCommonColorOrTextureTypeChoiceColor_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Color.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcommonColorOrTextureType struct {
	XsdGoPkgHasElem_paramchoicecommon_color_or_texture_typeschema_Param_TxsdCommonColorOrTextureTypeChoiceParam_

	XsdGoPkgHasElem_texturechoicecommon_color_or_texture_typeschema_Texture_TxsdCommonColorOrTextureTypeChoiceTexture_

	XsdGoPkgHasElem_colorchoicecommon_color_or_texture_typeschema_Color_TxsdCommonColorOrTextureTypeChoiceColor_
}

//	If the WalkHandlers.TcommonColorOrTextureType function is not nil (ie. was set by outside code), calls it with this TcommonColorOrTextureType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TcommonColorOrTextureType instance.
func (me *TcommonColorOrTextureType) Walk() (err error) {
	if fn := WalkHandlers.TcommonColorOrTextureType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_colorchoicecommon_color_or_texture_typeschema_Color_TxsdCommonColorOrTextureTypeChoiceColor_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_paramchoicecommon_color_or_texture_typeschema_Param_TxsdCommonColorOrTextureTypeChoiceParam_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_texturechoicecommon_color_or_texture_typeschema_Texture_TxsdCommonColorOrTextureTypeChoiceTexture_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_emissionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_ struct {
	Emission *TcommonColorOrTextureType `xml:"http://www.collada.org/2005/11/COLLADASchema emission"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_emissionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_emissionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_emissionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_ instance.
func (me *XsdGoPkgHasElem_emissionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_emissionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Emission.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_floatchoicecommon_float_or_param_typeschema_Float_TxsdCommonFloatOrParamTypeChoiceFloat_ struct {
	Float *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema float"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_floatchoicecommon_float_or_param_typeschema_Float_TxsdCommonFloatOrParamTypeChoiceFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_floatchoicecommon_float_or_param_typeschema_Float_TxsdCommonFloatOrParamTypeChoiceFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_floatchoicecommon_float_or_param_typeschema_Float_TxsdCommonFloatOrParamTypeChoiceFloat_ instance.
func (me *XsdGoPkgHasElem_floatchoicecommon_float_or_param_typeschema_Float_TxsdCommonFloatOrParamTypeChoiceFloat_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_floatchoicecommon_float_or_param_typeschema_Float_TxsdCommonFloatOrParamTypeChoiceFloat_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Float.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TxsdCommonFloatOrParamTypeChoiceParam_ struct {
	Param *TxsdCommonColorOrTextureTypeChoiceParam `xml:"http://www.collada.org/2005/11/COLLADASchema param"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TxsdCommonFloatOrParamTypeChoiceParam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TxsdCommonFloatOrParamTypeChoiceParam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TxsdCommonFloatOrParamTypeChoiceParam_ instance.
func (me *XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TxsdCommonFloatOrParamTypeChoiceParam_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TxsdCommonFloatOrParamTypeChoiceParam_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Param.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcommonFloatOrParamType struct {
	XsdGoPkgHasElem_floatchoicecommon_float_or_param_typeschema_Float_TxsdCommonFloatOrParamTypeChoiceFloat_

	XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TxsdCommonFloatOrParamTypeChoiceParam_
}

//	If the WalkHandlers.TcommonFloatOrParamType function is not nil (ie. was set by outside code), calls it with this TcommonFloatOrParamType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TcommonFloatOrParamType instance.
func (me *TcommonFloatOrParamType) Walk() (err error) {
	if fn := WalkHandlers.TcommonFloatOrParamType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_floatchoicecommon_float_or_param_typeschema_Float_TxsdCommonFloatOrParamTypeChoiceFloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TxsdCommonFloatOrParamTypeChoiceParam_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_shininesssequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Shininess_TcommonFloatOrParamType_ struct {
	Shininess *TcommonFloatOrParamType `xml:"http://www.collada.org/2005/11/COLLADASchema shininess"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_shininesssequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Shininess_TcommonFloatOrParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_shininesssequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Shininess_TcommonFloatOrParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_shininesssequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Shininess_TcommonFloatOrParamType_ instance.
func (me *XsdGoPkgHasElem_shininesssequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Shininess_TcommonFloatOrParamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_shininesssequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Shininess_TcommonFloatOrParamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Shininess.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ambientsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_ struct {
	Ambient *TcommonColorOrTextureType `xml:"http://www.collada.org/2005/11/COLLADASchema ambient"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ambientsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ambientsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ambientsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_ instance.
func (me *XsdGoPkgHasElem_ambientsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ambientsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ambient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TfxOpaqueEnum xsdt.String

//	Since TfxOpaqueEnum is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxOpaqueEnum) Set(s string) { (*xsdt.String)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TfxOpaqueEnum's alias type xsdt.String.
func (me TfxOpaqueEnum) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TfxOpaqueEnum is "RGB_ZERO".
func (me TfxOpaqueEnum) IsRgbZero() bool { return me == "RGB_ZERO" }

//	Since TfxOpaqueEnum is just a simple String type, this merely returns the current string value.
func (me TfxOpaqueEnum) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TfxOpaqueEnum is "A_ONE".
func (me TfxOpaqueEnum) IsAOne() bool { return me == "A_ONE" }

type XsdGoPkgHasAttr_Opaque_TfxOpaqueEnum_AOne struct {
	Opaque TfxOpaqueEnum `xml:"http://www.collada.org/2005/11/COLLADASchema opaque,attr"`
}

//	Returns the default value for Opaque -- "A_ONE"
func (me XsdGoPkgHasAttr_Opaque_TfxOpaqueEnum_AOne) OpaqueDefault() TfxOpaqueEnum {
	return TfxOpaqueEnum("A_ONE")
}

type TcommonTransparentType struct {
	TcommonColorOrTextureType

	XsdGoPkgHasAttr_Opaque_TfxOpaqueEnum_AOne
}

//	If the WalkHandlers.TcommonTransparentType function is not nil (ie. was set by outside code), calls it with this TcommonTransparentType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TcommonTransparentType instance.
func (me *TcommonTransparentType) Walk() (err error) {
	if fn := WalkHandlers.TcommonTransparentType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TcommonColorOrTextureType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_transparentsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_ struct {
	Transparent *TcommonTransparentType `xml:"http://www.collada.org/2005/11/COLLADASchema transparent"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_transparentsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_transparentsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_transparentsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_ instance.
func (me *XsdGoPkgHasElem_transparentsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_transparentsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Transparent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_index_of_refractionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_ struct {
	IndexOfRefraction *TcommonFloatOrParamType `xml:"http://www.collada.org/2005/11/COLLADASchema index_of_refraction"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_index_of_refractionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_index_of_refractionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_index_of_refractionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_ instance.
func (me *XsdGoPkgHasElem_index_of_refractionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_index_of_refractionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IndexOfRefraction.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_reflectivesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_ struct {
	Reflective *TcommonColorOrTextureType `xml:"http://www.collada.org/2005/11/COLLADASchema reflective"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_reflectivesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_reflectivesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_reflectivesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_ instance.
func (me *XsdGoPkgHasElem_reflectivesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_reflectivesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Reflective.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_diffusesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_ struct {
	Diffuse *TcommonColorOrTextureType `xml:"http://www.collada.org/2005/11/COLLADASchema diffuse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_diffusesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_diffusesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_diffusesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_ instance.
func (me *XsdGoPkgHasElem_diffusesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_diffusesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Diffuse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_specularsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Specular_TcommonColorOrTextureType_ struct {
	Specular *TcommonColorOrTextureType `xml:"http://www.collada.org/2005/11/COLLADASchema specular"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_specularsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Specular_TcommonColorOrTextureType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_specularsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Specular_TcommonColorOrTextureType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_specularsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Specular_TcommonColorOrTextureType_ instance.
func (me *XsdGoPkgHasElem_specularsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Specular_TcommonColorOrTextureType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_specularsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Specular_TcommonColorOrTextureType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Specular.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_reflectivitysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_ struct {
	Reflectivity *TcommonFloatOrParamType `xml:"http://www.collada.org/2005/11/COLLADASchema reflectivity"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_reflectivitysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_reflectivitysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_reflectivitysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_ instance.
func (me *XsdGoPkgHasElem_reflectivitysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_reflectivitysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Reflectivity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_transparencysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_ struct {
	Transparency *TcommonFloatOrParamType `xml:"http://www.collada.org/2005/11/COLLADASchema transparency"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_transparencysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_transparencysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_transparencysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_ instance.
func (me *XsdGoPkgHasElem_transparencysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_transparencysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Transparency.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn struct {
	XsdGoPkgHasElem_specularsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Specular_TcommonColorOrTextureType_

	XsdGoPkgHasElem_reflectivitysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_

	XsdGoPkgHasElem_transparencysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_

	XsdGoPkgHasElem_emissionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_

	XsdGoPkgHasElem_shininesssequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Shininess_TcommonFloatOrParamType_

	XsdGoPkgHasElem_ambientsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_

	XsdGoPkgHasElem_transparentsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_

	XsdGoPkgHasElem_index_of_refractionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_

	XsdGoPkgHasElem_reflectivesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_

	XsdGoPkgHasElem_diffusesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_
}

//	If the WalkHandlers.TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn function is not nil (ie. was set by outside code), calls it with this TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn instance as the single argument. Then calls the Walk() method on 10/10 embed(s) and 0/0 field(s) belonging to this TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn instance.
func (me *TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_index_of_refractionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_reflectivesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_diffusesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_specularsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Specular_TcommonColorOrTextureType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_reflectivitysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_transparencysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_emissionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_shininesssequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Shininess_TcommonFloatOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ambientsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_transparentsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_blinnchoicesequencetechniquesequenceprofile_COMMONschema_Blinn_TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn_ struct {
	Blinn *TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn `xml:"http://www.collada.org/2005/11/COLLADASchema blinn"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_blinnchoicesequencetechniquesequenceprofile_COMMONschema_Blinn_TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_blinnchoicesequencetechniquesequenceprofile_COMMONschema_Blinn_TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_blinnchoicesequencetechniquesequenceprofile_COMMONschema_Blinn_TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn_ instance.
func (me *XsdGoPkgHasElem_blinnchoicesequencetechniquesequenceprofile_COMMONschema_Blinn_TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_blinnchoicesequencetechniquesequenceprofile_COMMONschema_Blinn_TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Blinn.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProfileCommonSequenceTechniqueSequenceChoicePhong struct {
	XsdGoPkgHasElem_reflectivesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_

	XsdGoPkgHasElem_specularsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Specular_TcommonColorOrTextureType_

	XsdGoPkgHasElem_shininesssequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Shininess_TcommonFloatOrParamType_

	XsdGoPkgHasElem_transparencysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_

	XsdGoPkgHasElem_transparentsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_

	XsdGoPkgHasElem_ambientsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_

	XsdGoPkgHasElem_reflectivitysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_

	XsdGoPkgHasElem_emissionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_

	XsdGoPkgHasElem_diffusesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_

	XsdGoPkgHasElem_index_of_refractionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_
}

//	If the WalkHandlers.TxsdProfileCommonSequenceTechniqueSequenceChoicePhong function is not nil (ie. was set by outside code), calls it with this TxsdProfileCommonSequenceTechniqueSequenceChoicePhong instance as the single argument. Then calls the Walk() method on 10/10 embed(s) and 0/0 field(s) belonging to this TxsdProfileCommonSequenceTechniqueSequenceChoicePhong instance.
func (me *TxsdProfileCommonSequenceTechniqueSequenceChoicePhong) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileCommonSequenceTechniqueSequenceChoicePhong; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ambientsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_reflectivitysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_emissionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_diffusesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_index_of_refractionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_reflectivesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_specularsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Specular_TcommonColorOrTextureType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_shininesssequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Shininess_TcommonFloatOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_transparencysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_transparentsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_phongchoicesequencetechniquesequenceprofile_COMMONschema_Phong_TxsdProfileCommonSequenceTechniqueSequenceChoicePhong_ struct {
	Phong *TxsdProfileCommonSequenceTechniqueSequenceChoicePhong `xml:"http://www.collada.org/2005/11/COLLADASchema phong"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_phongchoicesequencetechniquesequenceprofile_COMMONschema_Phong_TxsdProfileCommonSequenceTechniqueSequenceChoicePhong_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_phongchoicesequencetechniquesequenceprofile_COMMONschema_Phong_TxsdProfileCommonSequenceTechniqueSequenceChoicePhong_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_phongchoicesequencetechniquesequenceprofile_COMMONschema_Phong_TxsdProfileCommonSequenceTechniqueSequenceChoicePhong_ instance.
func (me *XsdGoPkgHasElem_phongchoicesequencetechniquesequenceprofile_COMMONschema_Phong_TxsdProfileCommonSequenceTechniqueSequenceChoicePhong_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_phongchoicesequencetechniquesequenceprofile_COMMONschema_Phong_TxsdProfileCommonSequenceTechniqueSequenceChoicePhong_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Phong.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert struct {
	XsdGoPkgHasElem_reflectivitysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_

	XsdGoPkgHasElem_diffusesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_

	XsdGoPkgHasElem_index_of_refractionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_

	XsdGoPkgHasElem_reflectivesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_

	XsdGoPkgHasElem_transparentsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_

	XsdGoPkgHasElem_transparencysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_

	XsdGoPkgHasElem_emissionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_

	XsdGoPkgHasElem_ambientsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_
}

//	If the WalkHandlers.TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert function is not nil (ie. was set by outside code), calls it with this TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert instance as the single argument. Then calls the Walk() method on 8/8 embed(s) and 0/0 field(s) belonging to this TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert instance.
func (me *TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_transparencysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_emissionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ambientsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_reflectivitysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_diffusesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_index_of_refractionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_reflectivesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_transparentsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_lambertchoicesequencetechniquesequenceprofile_COMMONschema_Lambert_TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert_ struct {
	Lambert *TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert `xml:"http://www.collada.org/2005/11/COLLADASchema lambert"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_lambertchoicesequencetechniquesequenceprofile_COMMONschema_Lambert_TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_lambertchoicesequencetechniquesequenceprofile_COMMONschema_Lambert_TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_lambertchoicesequencetechniquesequenceprofile_COMMONschema_Lambert_TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert_ instance.
func (me *XsdGoPkgHasElem_lambertchoicesequencetechniquesequenceprofile_COMMONschema_Lambert_TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_lambertchoicesequencetechniquesequenceprofile_COMMONschema_Lambert_TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Lambert.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant struct {
	XsdGoPkgHasElem_transparencysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_

	XsdGoPkgHasElem_index_of_refractionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_

	XsdGoPkgHasElem_reflectivitysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_

	XsdGoPkgHasElem_emissionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_

	XsdGoPkgHasElem_transparentsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_

	XsdGoPkgHasElem_reflectivesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_
}

//	If the WalkHandlers.TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant function is not nil (ie. was set by outside code), calls it with this TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant instance.
func (me *TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_index_of_refractionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_reflectivitysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_emissionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_transparentsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_reflectivesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_transparencysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_constantchoicesequencetechniquesequenceprofile_COMMONschema_Constant_TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant_ struct {
	Constant *TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant `xml:"http://www.collada.org/2005/11/COLLADASchema constant"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_constantchoicesequencetechniquesequenceprofile_COMMONschema_Constant_TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_constantchoicesequencetechniquesequenceprofile_COMMONschema_Constant_TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_constantchoicesequencetechniquesequenceprofile_COMMONschema_Constant_TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant_ instance.
func (me *XsdGoPkgHasElem_constantchoicesequencetechniquesequenceprofile_COMMONschema_Constant_TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_constantchoicesequencetechniquesequenceprofile_COMMONschema_Constant_TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Constant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProfileCommonSequenceTechnique struct {
	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElems_newparamchoicesequenceprofile_COMMONschema_Newparam_TcommonNewparamType_

	//	The technique element may contain an asset element.
	XsdGoPkgHasElem_Asset

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	XsdGoPkgHasElem_blinnchoicesequencetechniquesequenceprofile_COMMONschema_Blinn_TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn_

	XsdGoPkgHasElem_phongchoicesequencetechniquesequenceprofile_COMMONschema_Phong_TxsdProfileCommonSequenceTechniqueSequenceChoicePhong_

	XsdGoPkgHasElem_lambertchoicesequencetechniquesequenceprofile_COMMONschema_Lambert_TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert_

	XsdGoPkgHasElem_constantchoicesequencetechniquesequenceprofile_COMMONschema_Constant_TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElems_Image
}

//	If the WalkHandlers.TxsdProfileCommonSequenceTechnique function is not nil (ie. was set by outside code), calls it with this TxsdProfileCommonSequenceTechnique instance as the single argument. Then calls the Walk() method on 8/10 embed(s) and 0/0 field(s) belonging to this TxsdProfileCommonSequenceTechnique instance.
func (me *TxsdProfileCommonSequenceTechnique) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileCommonSequenceTechnique; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Image.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_newparamchoicesequenceprofile_COMMONschema_Newparam_TcommonNewparamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_blinnchoicesequencetechniquesequenceprofile_COMMONschema_Blinn_TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_phongchoicesequencetechniquesequenceprofile_COMMONschema_Phong_TxsdProfileCommonSequenceTechniqueSequenceChoicePhong_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_lambertchoicesequencetechniquesequenceprofile_COMMONschema_Lambert_TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_constantchoicesequencetechniquesequenceprofile_COMMONschema_Constant_TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_techniquesequenceprofile_COMMONschema_Technique_TxsdProfileCommonSequenceTechnique_ struct {
	//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
	Technique *TxsdProfileCommonSequenceTechnique `xml:"http://www.collada.org/2005/11/COLLADASchema technique"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_techniquesequenceprofile_COMMONschema_Technique_TxsdProfileCommonSequenceTechnique_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_techniquesequenceprofile_COMMONschema_Technique_TxsdProfileCommonSequenceTechnique_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_techniquesequenceprofile_COMMONschema_Technique_TxsdProfileCommonSequenceTechnique_ instance.
func (me *XsdGoPkgHasElem_techniquesequenceprofile_COMMONschema_Technique_TxsdProfileCommonSequenceTechnique_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_techniquesequenceprofile_COMMONschema_Technique_TxsdProfileCommonSequenceTechnique_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Technique.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProfileCommon struct {
	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElems_Image

	XsdGoPkgHasElem_Asset

	XsdGoPkgHasElems_newparamchoicesequenceprofile_COMMONschema_Newparam_TcommonNewparamType_

	//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
	XsdGoPkgHasElem_techniquesequenceprofile_COMMONschema_Technique_TxsdProfileCommonSequenceTechnique_
}

//	If the WalkHandlers.TxsdProfileCommon function is not nil (ie. was set by outside code), calls it with this TxsdProfileCommon instance as the single argument. Then calls the Walk() method on 5/6 embed(s) and 0/0 field(s) belonging to this TxsdProfileCommon instance.
func (me *TxsdProfileCommon) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Image.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_newparamchoicesequenceprofile_COMMONschema_Newparam_TcommonNewparamType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_techniquesequenceprofile_COMMONschema_Technique_TxsdProfileCommonSequenceTechnique_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ProfileCommon struct {
	//	Opens a block of COMMON platform-specific data types and technique declarations.
	ProfileCommons []*TxsdProfileCommon `xml:"http://www.collada.org/2005/11/COLLADASchema profile_COMMON"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ProfileCommon function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ProfileCommon instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ProfileCommon instance.
func (me *XsdGoPkgHasElems_ProfileCommon) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ProfileCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ProfileCommons {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Opens a block of GLES platform-specific data types and technique declarations.
//	Create a new, named param object in the GLES Runtime, assign it a type, an initial value, and additional attributes at declaration time.
//	A group that defines the available variable types for GLES parameters.
//	Defines a set of texturing commands that will be converted into multitexturing operations using glTexEnv in regular and combiner mode.
//	Defines a texture_pipeline command. It is a simple noncombiner mode of texturing operations.
type XsdGoPkgHasAttr_Value_Tfloat4_ struct {
	Value Tfloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

type XsdGoPkgHasAttr_Param_XsdtNCName_ struct {
	Param xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema param,attr"`
}

type TglesTextureConstantType struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat4_
}

//	If the WalkHandlers.TglesTextureConstantType function is not nil (ie. was set by outside code), calls it with this TglesTextureConstantType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TglesTextureConstantType instance.
func (me *TglesTextureConstantType) Walk() (err error) {
	if fn := WalkHandlers.TglesTextureConstantType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_constantsequencegles_texenv_command_typeschema_Constant_TglesTextureConstantType_ struct {
	Constant *TglesTextureConstantType `xml:"http://www.collada.org/2005/11/COLLADASchema constant"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_constantsequencegles_texenv_command_typeschema_Constant_TglesTextureConstantType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_constantsequencegles_texenv_command_typeschema_Constant_TglesTextureConstantType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_constantsequencegles_texenv_command_typeschema_Constant_TglesTextureConstantType_ instance.
func (me *XsdGoPkgHasElem_constantsequencegles_texenv_command_typeschema_Constant_TglesTextureConstantType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_constantsequencegles_texenv_command_typeschema_Constant_TglesTextureConstantType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Constant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Unit_XsdtNCName_ struct {
	Unit xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema unit,attr"`
}

type TglesTexenvModeEnums xsdt.Token

//	Returns true if the value of this enumerated TglesTexenvModeEnums is "ADD".
func (me TglesTexenvModeEnums) IsAdd() bool { return me == "ADD" }

//	Returns true if the value of this enumerated TglesTexenvModeEnums is "DECAL".
func (me TglesTexenvModeEnums) IsDecal() bool { return me == "DECAL" }

//	Since TglesTexenvModeEnums is just a simple String type, this merely returns the current string value.
func (me TglesTexenvModeEnums) String() string { return xsdt.Token(me).String() }

//	Since TglesTexenvModeEnums is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesTexenvModeEnums) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Returns true if the value of this enumerated TglesTexenvModeEnums is "BLEND".
func (me TglesTexenvModeEnums) IsBlend() bool { return me == "BLEND" }

//	This convenience method just performs a simple type conversion to TglesTexenvModeEnums's alias type xsdt.Token.
func (me TglesTexenvModeEnums) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TglesTexenvModeEnums is "MODULATE".
func (me TglesTexenvModeEnums) IsModulate() bool { return me == "MODULATE" }

//	Returns true if the value of this enumerated TglesTexenvModeEnums is "REPLACE".
func (me TglesTexenvModeEnums) IsReplace() bool { return me == "REPLACE" }

type XsdGoPkgHasAttr_Operator_TglesTexenvModeEnums_ struct {
	Operator TglesTexenvModeEnums `xml:"http://www.collada.org/2005/11/COLLADASchema operator,attr"`
}

type TglesTexenvCommandType struct {
	XsdGoPkgHasAttr_Unit_XsdtNCName_

	XsdGoPkgHasAttr_Operator_TglesTexenvModeEnums_

	XsdGoPkgHasElem_constantsequencegles_texenv_command_typeschema_Constant_TglesTextureConstantType_
}

//	If the WalkHandlers.TglesTexenvCommandType function is not nil (ie. was set by outside code), calls it with this TglesTexenvCommandType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TglesTexenvCommandType instance.
func (me *TglesTexenvCommandType) Walk() (err error) {
	if fn := WalkHandlers.TglesTexenvCommandType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_constantsequencegles_texenv_command_typeschema_Constant_TglesTextureConstantType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_texenvchoicegles_texture_pipelineschema_Texenv_TglesTexenvCommandType_ struct {
	//	Defines a texture_pipeline command. It is a simple noncombiner mode of texturing operations.
	Texenvs []*TglesTexenvCommandType `xml:"http://www.collada.org/2005/11/COLLADASchema texenv"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_texenvchoicegles_texture_pipelineschema_Texenv_TglesTexenvCommandType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_texenvchoicegles_texture_pipelineschema_Texenv_TglesTexenvCommandType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_texenvchoicegles_texture_pipelineschema_Texenv_TglesTexenvCommandType_ instance.
func (me *XsdGoPkgHasElems_texenvchoicegles_texture_pipelineschema_Texenv_TglesTexenvCommandType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_texenvchoicegles_texture_pipelineschema_Texenv_TglesTexenvCommandType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Texenvs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Defines a texture_pipeline command. This is a combiner-mode texturing operation.
type TglBlendType xsdt.String

//	Returns true if the value of this enumerated TglBlendType is "ONE_MINUS_DST_ALPHA".
func (me TglBlendType) IsOneMinusDstAlpha() bool { return me == "ONE_MINUS_DST_ALPHA" }

//	Returns true if the value of this enumerated TglBlendType is "DST_ALPHA".
func (me TglBlendType) IsDstAlpha() bool { return me == "DST_ALPHA" }

//	Since TglBlendType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglBlendType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TglBlendType is "SRC_ALPHA".
func (me TglBlendType) IsSrcAlpha() bool { return me == "SRC_ALPHA" }

//	This convenience method just performs a simple type conversion to TglBlendType's alias type xsdt.String.
func (me TglBlendType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TglBlendType is "CONSTANT_ALPHA".
func (me TglBlendType) IsConstantAlpha() bool { return me == "CONSTANT_ALPHA" }

//	Returns true if the value of this enumerated TglBlendType is "ONE_MINUS_SRC_COLOR".
func (me TglBlendType) IsOneMinusSrcColor() bool { return me == "ONE_MINUS_SRC_COLOR" }

//	Returns true if the value of this enumerated TglBlendType is "ONE_MINUS_CONSTANT_ALPHA".
func (me TglBlendType) IsOneMinusConstantAlpha() bool { return me == "ONE_MINUS_CONSTANT_ALPHA" }

//	Returns true if the value of this enumerated TglBlendType is "ZERO".
func (me TglBlendType) IsZero() bool { return me == "ZERO" }

//	Returns true if the value of this enumerated TglBlendType is "SRC_COLOR".
func (me TglBlendType) IsSrcColor() bool { return me == "SRC_COLOR" }

//	Since TglBlendType is just a simple String type, this merely returns the current string value.
func (me TglBlendType) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TglBlendType is "ONE_MINUS_SRC_ALPHA".
func (me TglBlendType) IsOneMinusSrcAlpha() bool { return me == "ONE_MINUS_SRC_ALPHA" }

//	Returns true if the value of this enumerated TglBlendType is "CONSTANT_COLOR".
func (me TglBlendType) IsConstantColor() bool { return me == "CONSTANT_COLOR" }

//	Returns true if the value of this enumerated TglBlendType is "DEST_COLOR".
func (me TglBlendType) IsDestColor() bool { return me == "DEST_COLOR" }

//	Returns true if the value of this enumerated TglBlendType is "ONE_MINUS_DEST_COLOR".
func (me TglBlendType) IsOneMinusDestColor() bool { return me == "ONE_MINUS_DEST_COLOR" }

//	Returns true if the value of this enumerated TglBlendType is "ONE".
func (me TglBlendType) IsOne() bool { return me == "ONE" }

//	Returns true if the value of this enumerated TglBlendType is "SRC_ALPHA_SATURATE".
func (me TglBlendType) IsSrcAlphaSaturate() bool { return me == "SRC_ALPHA_SATURATE" }

//	Returns true if the value of this enumerated TglBlendType is "ONE_MINUS_CONSTANT_COLOR".
func (me TglBlendType) IsOneMinusConstantColor() bool { return me == "ONE_MINUS_CONSTANT_COLOR" }

type TglesTexcombinerOperandAlphaEnums TglBlendType

//	This convenience method just performs a simple type conversion to TglesTexcombinerOperandAlphaEnums's alias type TglBlendType.
func (me TglesTexcombinerOperandAlphaEnums) ToTglBlendType() TglBlendType { return TglBlendType(me) }

//	Since TglesTexcombinerOperandAlphaEnums is just a simple String type, this merely returns the current string value.
func (me TglesTexcombinerOperandAlphaEnums) String() string { return TglBlendType(me).String() }

//	Returns true if the value of this enumerated TglesTexcombinerOperandAlphaEnums is "ONE_MINUS_SRC_ALPHA".
func (me TglesTexcombinerOperandAlphaEnums) IsOneMinusSrcAlpha() bool {
	return me == "ONE_MINUS_SRC_ALPHA"
}

//	Returns true if the value of this enumerated TglesTexcombinerOperandAlphaEnums is "SRC_ALPHA".
func (me TglesTexcombinerOperandAlphaEnums) IsSrcAlpha() bool { return me == "SRC_ALPHA" }

//	Since TglesTexcombinerOperandAlphaEnums is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesTexcombinerOperandAlphaEnums) Set(s string) { (*TglBlendType)(me).Set(s) }

type XsdGoPkgHasAttr_Operand_TglesTexcombinerOperandAlphaEnums_SrcAlpha struct {
	Operand TglesTexcombinerOperandAlphaEnums `xml:"http://www.collada.org/2005/11/COLLADASchema operand,attr"`
}

//	Returns the default value for Operand -- "SRC_ALPHA"
func (me XsdGoPkgHasAttr_Operand_TglesTexcombinerOperandAlphaEnums_SrcAlpha) OperandDefault() TglesTexcombinerOperandAlphaEnums {
	return TglesTexcombinerOperandAlphaEnums("SRC_ALPHA")
}

type TglesTexcombinerSourceEnums xsdt.Token

//	Returns true if the value of this enumerated TglesTexcombinerSourceEnums is "CONSTANT".
func (me TglesTexcombinerSourceEnums) IsConstant() bool { return me == "CONSTANT" }

//	Since TglesTexcombinerSourceEnums is just a simple String type, this merely returns the current string value.
func (me TglesTexcombinerSourceEnums) String() string { return xsdt.Token(me).String() }

//	This convenience method just performs a simple type conversion to TglesTexcombinerSourceEnums's alias type xsdt.Token.
func (me TglesTexcombinerSourceEnums) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TglesTexcombinerSourceEnums is "PRIMARY".
func (me TglesTexcombinerSourceEnums) IsPrimary() bool { return me == "PRIMARY" }

//	Returns true if the value of this enumerated TglesTexcombinerSourceEnums is "TEXTURE".
func (me TglesTexcombinerSourceEnums) IsTexture() bool { return me == "TEXTURE" }

//	Returns true if the value of this enumerated TglesTexcombinerSourceEnums is "PREVIOUS".
func (me TglesTexcombinerSourceEnums) IsPrevious() bool { return me == "PREVIOUS" }

//	Since TglesTexcombinerSourceEnums is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesTexcombinerSourceEnums) Set(s string) { (*xsdt.Token)(me).Set(s) }

type XsdGoPkgHasAttr_Source_TglesTexcombinerSourceEnums_ struct {
	Source TglesTexcombinerSourceEnums `xml:"http://www.collada.org/2005/11/COLLADASchema source,attr"`
}

type TglesTexcombinerArgumentAlphaType struct {
	XsdGoPkgHasAttr_Operand_TglesTexcombinerOperandAlphaEnums_SrcAlpha

	XsdGoPkgHasAttr_Source_TglesTexcombinerSourceEnums_

	XsdGoPkgHasAttr_Unit_XsdtNCName_
}

//	If the WalkHandlers.TglesTexcombinerArgumentAlphaType function is not nil (ie. was set by outside code), calls it with this TglesTexcombinerArgumentAlphaType instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TglesTexcombinerArgumentAlphaType instance.
func (me *TglesTexcombinerArgumentAlphaType) Walk() (err error) {
	if fn := WalkHandlers.TglesTexcombinerArgumentAlphaType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandAlpha_typeschema_Argument_TglesTexcombinerArgumentAlphaType_ struct {
	Arguments []*TglesTexcombinerArgumentAlphaType `xml:"http://www.collada.org/2005/11/COLLADASchema argument"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandAlpha_typeschema_Argument_TglesTexcombinerArgumentAlphaType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandAlpha_typeschema_Argument_TglesTexcombinerArgumentAlphaType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandAlpha_typeschema_Argument_TglesTexcombinerArgumentAlphaType_ instance.
func (me *XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandAlpha_typeschema_Argument_TglesTexcombinerArgumentAlphaType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandAlpha_typeschema_Argument_TglesTexcombinerArgumentAlphaType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Arguments {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglesTexcombinerOperatorAlphaEnums xsdt.Token

//	Returns true if the value of this enumerated TglesTexcombinerOperatorAlphaEnums is "ADD_SIGNED".
func (me TglesTexcombinerOperatorAlphaEnums) IsAddSigned() bool { return me == "ADD_SIGNED" }

//	This convenience method just performs a simple type conversion to TglesTexcombinerOperatorAlphaEnums's alias type xsdt.Token.
func (me TglesTexcombinerOperatorAlphaEnums) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorAlphaEnums is "SUBTRACT".
func (me TglesTexcombinerOperatorAlphaEnums) IsSubtract() bool { return me == "SUBTRACT" }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorAlphaEnums is "REPLACE".
func (me TglesTexcombinerOperatorAlphaEnums) IsReplace() bool { return me == "REPLACE" }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorAlphaEnums is "INTERPOLATE".
func (me TglesTexcombinerOperatorAlphaEnums) IsInterpolate() bool { return me == "INTERPOLATE" }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorAlphaEnums is "ADD".
func (me TglesTexcombinerOperatorAlphaEnums) IsAdd() bool { return me == "ADD" }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorAlphaEnums is "MODULATE".
func (me TglesTexcombinerOperatorAlphaEnums) IsModulate() bool { return me == "MODULATE" }

//	Since TglesTexcombinerOperatorAlphaEnums is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesTexcombinerOperatorAlphaEnums) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TglesTexcombinerOperatorAlphaEnums is just a simple String type, this merely returns the current string value.
func (me TglesTexcombinerOperatorAlphaEnums) String() string { return xsdt.Token(me).String() }

type XsdGoPkgHasAttr_Operator_TglesTexcombinerOperatorAlphaEnums_ struct {
	Operator TglesTexcombinerOperatorAlphaEnums `xml:"http://www.collada.org/2005/11/COLLADASchema operator,attr"`
}

type XsdGoPkgHasAttr_Scale_XsdtFloat_ struct {
	Scale xsdt.Float `xml:"http://www.collada.org/2005/11/COLLADASchema scale,attr"`
}

type TglesTexcombinerCommandAlphaType struct {
	XsdGoPkgHasAttr_Scale_XsdtFloat_

	XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandAlpha_typeschema_Argument_TglesTexcombinerArgumentAlphaType_

	XsdGoPkgHasAttr_Operator_TglesTexcombinerOperatorAlphaEnums_
}

//	If the WalkHandlers.TglesTexcombinerCommandAlphaType function is not nil (ie. was set by outside code), calls it with this TglesTexcombinerCommandAlphaType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TglesTexcombinerCommandAlphaType instance.
func (me *TglesTexcombinerCommandAlphaType) Walk() (err error) {
	if fn := WalkHandlers.TglesTexcombinerCommandAlphaType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandAlpha_typeschema_Argument_TglesTexcombinerArgumentAlphaType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_alphasequencegles_texcombiner_command_typeschema_Alpha_TglesTexcombinerCommandAlphaType_ struct {
	Alpha *TglesTexcombinerCommandAlphaType `xml:"http://www.collada.org/2005/11/COLLADASchema alpha"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_alphasequencegles_texcombiner_command_typeschema_Alpha_TglesTexcombinerCommandAlphaType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_alphasequencegles_texcombiner_command_typeschema_Alpha_TglesTexcombinerCommandAlphaType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_alphasequencegles_texcombiner_command_typeschema_Alpha_TglesTexcombinerCommandAlphaType_ instance.
func (me *XsdGoPkgHasElem_alphasequencegles_texcombiner_command_typeschema_Alpha_TglesTexcombinerCommandAlphaType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_alphasequencegles_texcombiner_command_typeschema_Alpha_TglesTexcombinerCommandAlphaType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Alpha.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Defines the RGB portion of a texture_pipeline command. This is a combiner-mode texturing operation.
type TglesTexcombinerOperatorRGBEnums xsdt.Token

//	Returns true if the value of this enumerated TglesTexcombinerOperatorRGBEnums is "SUBTRACT".
func (me TglesTexcombinerOperatorRGBEnums) IsSubtract() bool { return me == "SUBTRACT" }

//	Since TglesTexcombinerOperatorRGBEnums is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesTexcombinerOperatorRGBEnums) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TglesTexcombinerOperatorRGBEnums's alias type xsdt.Token.
func (me TglesTexcombinerOperatorRGBEnums) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorRGBEnums is "MODULATE".
func (me TglesTexcombinerOperatorRGBEnums) IsModulate() bool { return me == "MODULATE" }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorRGBEnums is "REPLACE".
func (me TglesTexcombinerOperatorRGBEnums) IsReplace() bool { return me == "REPLACE" }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorRGBEnums is "DOT3_RGBA".
func (me TglesTexcombinerOperatorRGBEnums) IsDot3Rgba() bool { return me == "DOT3_RGBA" }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorRGBEnums is "ADD".
func (me TglesTexcombinerOperatorRGBEnums) IsAdd() bool { return me == "ADD" }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorRGBEnums is "DOT3_RGB".
func (me TglesTexcombinerOperatorRGBEnums) IsDot3Rgb() bool { return me == "DOT3_RGB" }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorRGBEnums is "ADD_SIGNED".
func (me TglesTexcombinerOperatorRGBEnums) IsAddSigned() bool { return me == "ADD_SIGNED" }

//	Returns true if the value of this enumerated TglesTexcombinerOperatorRGBEnums is "INTERPOLATE".
func (me TglesTexcombinerOperatorRGBEnums) IsInterpolate() bool { return me == "INTERPOLATE" }

//	Since TglesTexcombinerOperatorRGBEnums is just a simple String type, this merely returns the current string value.
func (me TglesTexcombinerOperatorRGBEnums) String() string { return xsdt.Token(me).String() }

type XsdGoPkgHasAttr_Operator_TglesTexcombinerOperatorRGBEnums_ struct {
	Operator TglesTexcombinerOperatorRGBEnums `xml:"http://www.collada.org/2005/11/COLLADASchema operator,attr"`
}

type TglesTexcombinerOperandRGBEnums TglBlendType

//	This convenience method just performs a simple type conversion to TglesTexcombinerOperandRGBEnums's alias type TglBlendType.
func (me TglesTexcombinerOperandRGBEnums) ToTglBlendType() TglBlendType { return TglBlendType(me) }

//	Returns true if the value of this enumerated TglesTexcombinerOperandRGBEnums is "ONE_MINUS_SRC_ALPHA".
func (me TglesTexcombinerOperandRGBEnums) IsOneMinusSrcAlpha() bool {
	return me == "ONE_MINUS_SRC_ALPHA"
}

//	Since TglesTexcombinerOperandRGBEnums is just a simple String type, this merely returns the current string value.
func (me TglesTexcombinerOperandRGBEnums) String() string { return TglBlendType(me).String() }

//	Since TglesTexcombinerOperandRGBEnums is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesTexcombinerOperandRGBEnums) Set(s string) { (*TglBlendType)(me).Set(s) }

//	Returns true if the value of this enumerated TglesTexcombinerOperandRGBEnums is "ONE_MINUS_SRC_COLOR".
func (me TglesTexcombinerOperandRGBEnums) IsOneMinusSrcColor() bool {
	return me == "ONE_MINUS_SRC_COLOR"
}

//	Returns true if the value of this enumerated TglesTexcombinerOperandRGBEnums is "SRC_COLOR".
func (me TglesTexcombinerOperandRGBEnums) IsSrcColor() bool { return me == "SRC_COLOR" }

//	Returns true if the value of this enumerated TglesTexcombinerOperandRGBEnums is "SRC_ALPHA".
func (me TglesTexcombinerOperandRGBEnums) IsSrcAlpha() bool { return me == "SRC_ALPHA" }

type XsdGoPkgHasAttr_Operand_TglesTexcombinerOperandRGBEnums_SrcColor struct {
	Operand TglesTexcombinerOperandRGBEnums `xml:"http://www.collada.org/2005/11/COLLADASchema operand,attr"`
}

//	Returns the default value for Operand -- "SRC_COLOR"
func (me XsdGoPkgHasAttr_Operand_TglesTexcombinerOperandRGBEnums_SrcColor) OperandDefault() TglesTexcombinerOperandRGBEnums {
	return TglesTexcombinerOperandRGBEnums("SRC_COLOR")
}

type TglesTexcombinerArgumentRGBType struct {
	XsdGoPkgHasAttr_Unit_XsdtNCName_

	XsdGoPkgHasAttr_Operand_TglesTexcombinerOperandRGBEnums_SrcColor

	XsdGoPkgHasAttr_Source_TglesTexcombinerSourceEnums_
}

//	If the WalkHandlers.TglesTexcombinerArgumentRGBType function is not nil (ie. was set by outside code), calls it with this TglesTexcombinerArgumentRGBType instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TglesTexcombinerArgumentRGBType instance.
func (me *TglesTexcombinerArgumentRGBType) Walk() (err error) {
	if fn := WalkHandlers.TglesTexcombinerArgumentRGBType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandRGB_typeschema_Argument_TglesTexcombinerArgumentRGBType_ struct {
	Arguments []*TglesTexcombinerArgumentRGBType `xml:"http://www.collada.org/2005/11/COLLADASchema argument"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandRGB_typeschema_Argument_TglesTexcombinerArgumentRGBType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandRGB_typeschema_Argument_TglesTexcombinerArgumentRGBType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandRGB_typeschema_Argument_TglesTexcombinerArgumentRGBType_ instance.
func (me *XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandRGB_typeschema_Argument_TglesTexcombinerArgumentRGBType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandRGB_typeschema_Argument_TglesTexcombinerArgumentRGBType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Arguments {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglesTexcombinerCommandRGBType struct {
	XsdGoPkgHasAttr_Operator_TglesTexcombinerOperatorRGBEnums_

	XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandRGB_typeschema_Argument_TglesTexcombinerArgumentRGBType_

	XsdGoPkgHasAttr_Scale_XsdtFloat_
}

//	If the WalkHandlers.TglesTexcombinerCommandRGBType function is not nil (ie. was set by outside code), calls it with this TglesTexcombinerCommandRGBType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TglesTexcombinerCommandRGBType instance.
func (me *TglesTexcombinerCommandRGBType) Walk() (err error) {
	if fn := WalkHandlers.TglesTexcombinerCommandRGBType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandRGB_typeschema_Argument_TglesTexcombinerArgumentRGBType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RGBsequencegles_texcombiner_command_typeschema_Rgb_TglesTexcombinerCommandRGBType_ struct {
	Rgb *TglesTexcombinerCommandRGBType `xml:"http://www.collada.org/2005/11/COLLADASchema RGB"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RGBsequencegles_texcombiner_command_typeschema_Rgb_TglesTexcombinerCommandRGBType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RGBsequencegles_texcombiner_command_typeschema_Rgb_TglesTexcombinerCommandRGBType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RGBsequencegles_texcombiner_command_typeschema_Rgb_TglesTexcombinerCommandRGBType_ instance.
func (me *XsdGoPkgHasElem_RGBsequencegles_texcombiner_command_typeschema_Rgb_TglesTexcombinerCommandRGBType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RGBsequencegles_texcombiner_command_typeschema_Rgb_TglesTexcombinerCommandRGBType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Rgb.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglesTexcombinerCommandType struct {
	XsdGoPkgHasElem_constantsequencegles_texenv_command_typeschema_Constant_TglesTextureConstantType_

	XsdGoPkgHasElem_alphasequencegles_texcombiner_command_typeschema_Alpha_TglesTexcombinerCommandAlphaType_

	XsdGoPkgHasElem_RGBsequencegles_texcombiner_command_typeschema_Rgb_TglesTexcombinerCommandRGBType_
}

//	If the WalkHandlers.TglesTexcombinerCommandType function is not nil (ie. was set by outside code), calls it with this TglesTexcombinerCommandType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TglesTexcombinerCommandType instance.
func (me *TglesTexcombinerCommandType) Walk() (err error) {
	if fn := WalkHandlers.TglesTexcombinerCommandType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_alphasequencegles_texcombiner_command_typeschema_Alpha_TglesTexcombinerCommandAlphaType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RGBsequencegles_texcombiner_command_typeschema_Rgb_TglesTexcombinerCommandRGBType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_constantsequencegles_texenv_command_typeschema_Constant_TglesTextureConstantType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_texcombinerchoicegles_texture_pipelineschema_Texcombiner_TglesTexcombinerCommandType_ struct {
	//	Defines a texture_pipeline command. This is a combiner-mode texturing operation.
	Texcombiners []*TglesTexcombinerCommandType `xml:"http://www.collada.org/2005/11/COLLADASchema texcombiner"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_texcombinerchoicegles_texture_pipelineschema_Texcombiner_TglesTexcombinerCommandType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_texcombinerchoicegles_texture_pipelineschema_Texcombiner_TglesTexcombinerCommandType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_texcombinerchoicegles_texture_pipelineschema_Texcombiner_TglesTexcombinerCommandType_ instance.
func (me *XsdGoPkgHasElems_texcombinerchoicegles_texture_pipelineschema_Texcombiner_TglesTexcombinerCommandType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_texcombinerchoicegles_texture_pipelineschema_Texcombiner_TglesTexcombinerCommandType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Texcombiners {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglesTexturePipeline struct {
	//	Defines a texture_pipeline command. This is a combiner-mode texturing operation.
	XsdGoPkgHasElems_texcombinerchoicegles_texture_pipelineschema_Texcombiner_TglesTexcombinerCommandType_

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	//	Defines a texture_pipeline command. It is a simple noncombiner mode of texturing operations.
	XsdGoPkgHasElems_texenvchoicegles_texture_pipelineschema_Texenv_TglesTexenvCommandType_

	//	The extra element may appear any number of times.
	//	OpenGL ES extensions may be used here.
	XsdGoPkgHasElems_Extra
}

//	If the WalkHandlers.TglesTexturePipeline function is not nil (ie. was set by outside code), calls it with this TglesTexturePipeline instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TglesTexturePipeline instance.
func (me *TglesTexturePipeline) Walk() (err error) {
	if fn := WalkHandlers.TglesTexturePipeline; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_texcombinerchoicegles_texture_pipelineschema_Texcombiner_TglesTexcombinerCommandType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_texenvchoicegles_texture_pipelineschema_Texenv_TglesTexenvCommandType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_texture_pipelinechoicegles_basic_type_commonschema_TexturePipeline_TglesTexturePipeline_ struct {
	TexturePipeline *TglesTexturePipeline `xml:"http://www.collada.org/2005/11/COLLADASchema texture_pipeline"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_texture_pipelinechoicegles_basic_type_commonschema_TexturePipeline_TglesTexturePipeline_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texture_pipelinechoicegles_basic_type_commonschema_TexturePipeline_TglesTexturePipeline_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texture_pipelinechoicegles_basic_type_commonschema_TexturePipeline_TglesTexturePipeline_ instance.
func (me *XsdGoPkgHasElem_texture_pipelinechoicegles_basic_type_commonschema_TexturePipeline_TglesTexturePipeline_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_texture_pipelinechoicegles_basic_type_commonschema_TexturePipeline_TglesTexturePipeline_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TexturePipeline.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglPolygonModeType xsdt.String

//	Returns true if the value of this enumerated TglPolygonModeType is "FILL".
func (me TglPolygonModeType) IsFill() bool { return me == "FILL" }

//	Since TglPolygonModeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglPolygonModeType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TglPolygonModeType's alias type xsdt.String.
func (me TglPolygonModeType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TglPolygonModeType is "POINT".
func (me TglPolygonModeType) IsPoint() bool { return me == "POINT" }

//	Returns true if the value of this enumerated TglPolygonModeType is "LINE".
func (me TglPolygonModeType) IsLine() bool { return me == "LINE" }

//	Since TglPolygonModeType is just a simple String type, this merely returns the current string value.
func (me TglPolygonModeType) String() string { return xsdt.String(me).String() }

type TglStencilOpType xsdt.String

//	Returns true if the value of this enumerated TglStencilOpType is "REPLACE".
func (me TglStencilOpType) IsReplace() bool { return me == "REPLACE" }

//	Returns true if the value of this enumerated TglStencilOpType is "ZERO".
func (me TglStencilOpType) IsZero() bool { return me == "ZERO" }

//	Since TglStencilOpType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglStencilOpType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TglStencilOpType is "DECR".
func (me TglStencilOpType) IsDecr() bool { return me == "DECR" }

//	Returns true if the value of this enumerated TglStencilOpType is "DECR_WRAP".
func (me TglStencilOpType) IsDecrWrap() bool { return me == "DECR_WRAP" }

//	Returns true if the value of this enumerated TglStencilOpType is "KEEP".
func (me TglStencilOpType) IsKeep() bool { return me == "KEEP" }

//	Returns true if the value of this enumerated TglStencilOpType is "INVERT".
func (me TglStencilOpType) IsInvert() bool { return me == "INVERT" }

//	Returns true if the value of this enumerated TglStencilOpType is "INCR_WRAP".
func (me TglStencilOpType) IsIncrWrap() bool { return me == "INCR_WRAP" }

//	This convenience method just performs a simple type conversion to TglStencilOpType's alias type xsdt.String.
func (me TglStencilOpType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TglStencilOpType is "INCR".
func (me TglStencilOpType) IsIncr() bool { return me == "INCR" }

//	Since TglStencilOpType is just a simple String type, this merely returns the current string value.
func (me TglStencilOpType) String() string { return xsdt.String(me).String() }

type TglMaterialType xsdt.String

//	Since TglMaterialType is just a simple String type, this merely returns the current string value.
func (me TglMaterialType) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TglMaterialType is "AMBIENT_AND_DIFFUSE".
func (me TglMaterialType) IsAmbientAndDiffuse() bool { return me == "AMBIENT_AND_DIFFUSE" }

//	Returns true if the value of this enumerated TglMaterialType is "AMBIENT".
func (me TglMaterialType) IsAmbient() bool { return me == "AMBIENT" }

//	This convenience method just performs a simple type conversion to TglMaterialType's alias type xsdt.String.
func (me TglMaterialType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TglMaterialType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglMaterialType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TglMaterialType is "DIFFUSE".
func (me TglMaterialType) IsDiffuse() bool { return me == "DIFFUSE" }

//	Returns true if the value of this enumerated TglMaterialType is "SPECULAR".
func (me TglMaterialType) IsSpecular() bool { return me == "SPECULAR" }

//	Returns true if the value of this enumerated TglMaterialType is "EMISSION".
func (me TglMaterialType) IsEmission() bool { return me == "EMISSION" }

type TglFaceType xsdt.String

//	Returns true if the value of this enumerated TglFaceType is "FRONT".
func (me TglFaceType) IsFront() bool { return me == "FRONT" }

//	Since TglFaceType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglFaceType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TglFaceType is "FRONT_AND_BACK".
func (me TglFaceType) IsFrontAndBack() bool { return me == "FRONT_AND_BACK" }

//	Returns true if the value of this enumerated TglFaceType is "BACK".
func (me TglFaceType) IsBack() bool { return me == "BACK" }

//	This convenience method just performs a simple type conversion to TglFaceType's alias type xsdt.String.
func (me TglFaceType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TglFaceType is just a simple String type, this merely returns the current string value.
func (me TglFaceType) String() string { return xsdt.String(me).String() }

type TglFrontFaceType xsdt.String

//	Since TglFrontFaceType is just a simple String type, this merely returns the current string value.
func (me TglFrontFaceType) String() string { return xsdt.String(me).String() }

//	Since TglFrontFaceType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglFrontFaceType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TglFrontFaceType is "CW".
func (me TglFrontFaceType) IsCw() bool { return me == "CW" }

//	This convenience method just performs a simple type conversion to TglFrontFaceType's alias type xsdt.String.
func (me TglFrontFaceType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TglFrontFaceType is "CCW".
func (me TglFrontFaceType) IsCcw() bool { return me == "CCW" }

type TglLightModelColorControlType xsdt.String

//	Since TglLightModelColorControlType is just a simple String type, this merely returns the current string value.
func (me TglLightModelColorControlType) String() string { return xsdt.String(me).String() }

//	Since TglLightModelColorControlType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglLightModelColorControlType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TglLightModelColorControlType is "SEPARATE_SPECULAR_COLOR".
func (me TglLightModelColorControlType) IsSeparateSpecularColor() bool {
	return me == "SEPARATE_SPECULAR_COLOR"
}

//	Returns true if the value of this enumerated TglLightModelColorControlType is "SINGLE_COLOR".
func (me TglLightModelColorControlType) IsSingleColor() bool { return me == "SINGLE_COLOR" }

//	This convenience method just performs a simple type conversion to TglLightModelColorControlType's alias type xsdt.String.
func (me TglLightModelColorControlType) ToXsdtString() xsdt.String { return xsdt.String(me) }

type TglShadeModelType xsdt.String

//	Since TglShadeModelType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglShadeModelType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TglShadeModelType is just a simple String type, this merely returns the current string value.
func (me TglShadeModelType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TglShadeModelType's alias type xsdt.String.
func (me TglShadeModelType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TglShadeModelType is "SMOOTH".
func (me TglShadeModelType) IsSmooth() bool { return me == "SMOOTH" }

//	Returns true if the value of this enumerated TglShadeModelType is "FLAT".
func (me TglShadeModelType) IsFlat() bool { return me == "FLAT" }

type TglFuncType xsdt.String

//	This convenience method just performs a simple type conversion to TglFuncType's alias type xsdt.String.
func (me TglFuncType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TglFuncType is "ALWAYS".
func (me TglFuncType) IsAlways() bool { return me == "ALWAYS" }

//	Since TglFuncType is just a simple String type, this merely returns the current string value.
func (me TglFuncType) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TglFuncType is "NEVER".
func (me TglFuncType) IsNever() bool { return me == "NEVER" }

//	Returns true if the value of this enumerated TglFuncType is "GREATER".
func (me TglFuncType) IsGreater() bool { return me == "GREATER" }

//	Returns true if the value of this enumerated TglFuncType is "NOTEQUAL".
func (me TglFuncType) IsNotequal() bool { return me == "NOTEQUAL" }

//	Returns true if the value of this enumerated TglFuncType is "EQUAL".
func (me TglFuncType) IsEqual() bool { return me == "EQUAL" }

//	Returns true if the value of this enumerated TglFuncType is "LESS".
func (me TglFuncType) IsLess() bool { return me == "LESS" }

//	Returns true if the value of this enumerated TglFuncType is "GEQUAL".
func (me TglFuncType) IsGequal() bool { return me == "GEQUAL" }

//	Returns true if the value of this enumerated TglFuncType is "LEQUAL".
func (me TglFuncType) IsLequal() bool { return me == "LEQUAL" }

//	Since TglFuncType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglFuncType) Set(s string) { (*xsdt.String)(me).Set(s) }

type TglFogType xsdt.String

//	Since TglFogType is just a simple String type, this merely returns the current string value.
func (me TglFogType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TglFogType's alias type xsdt.String.
func (me TglFogType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TglFogType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglFogType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TglFogType is "EXP".
func (me TglFogType) IsExp() bool { return me == "EXP" }

//	Returns true if the value of this enumerated TglFogType is "LINEAR".
func (me TglFogType) IsLinear() bool { return me == "LINEAR" }

//	Returns true if the value of this enumerated TglFogType is "EXP2".
func (me TglFogType) IsExp2() bool { return me == "EXP2" }

type TglLogicOpType xsdt.String

//	Since TglLogicOpType is just a simple String type, this merely returns the current string value.
func (me TglLogicOpType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TglLogicOpType's alias type xsdt.String.
func (me TglLogicOpType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TglLogicOpType is "COPY_INVERTED".
func (me TglLogicOpType) IsCopyInverted() bool { return me == "COPY_INVERTED" }

//	Returns true if the value of this enumerated TglLogicOpType is "COPY".
func (me TglLogicOpType) IsCopy() bool { return me == "COPY" }

//	Returns true if the value of this enumerated TglLogicOpType is "XOR".
func (me TglLogicOpType) IsXor() bool { return me == "XOR" }

//	Returns true if the value of this enumerated TglLogicOpType is "NOOP".
func (me TglLogicOpType) IsNoop() bool { return me == "NOOP" }

//	Returns true if the value of this enumerated TglLogicOpType is "SET".
func (me TglLogicOpType) IsSet() bool { return me == "SET" }

//	Returns true if the value of this enumerated TglLogicOpType is "NAND".
func (me TglLogicOpType) IsNand() bool { return me == "NAND" }

//	Since TglLogicOpType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglLogicOpType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TglLogicOpType is "INVERT".
func (me TglLogicOpType) IsInvert() bool { return me == "INVERT" }

//	Returns true if the value of this enumerated TglLogicOpType is "AND".
func (me TglLogicOpType) IsAnd() bool { return me == "AND" }

//	Returns true if the value of this enumerated TglLogicOpType is "CLEAR".
func (me TglLogicOpType) IsClear() bool { return me == "CLEAR" }

//	Returns true if the value of this enumerated TglLogicOpType is "OR".
func (me TglLogicOpType) IsOr() bool { return me == "OR" }

//	Returns true if the value of this enumerated TglLogicOpType is "OR_REVERSE".
func (me TglLogicOpType) IsOrReverse() bool { return me == "OR_REVERSE" }

//	Returns true if the value of this enumerated TglLogicOpType is "NOR".
func (me TglLogicOpType) IsNor() bool { return me == "NOR" }

//	Returns true if the value of this enumerated TglLogicOpType is "EQUIV".
func (me TglLogicOpType) IsEquiv() bool { return me == "EQUIV" }

//	Returns true if the value of this enumerated TglLogicOpType is "AND_REVERSE".
func (me TglLogicOpType) IsAndReverse() bool { return me == "AND_REVERSE" }

//	Returns true if the value of this enumerated TglLogicOpType is "AND_INVERTED".
func (me TglLogicOpType) IsAndInverted() bool { return me == "AND_INVERTED" }

type TglesEnumeration xsdt.String

//	TglesEnumeration is an XSD union-type of several types. This is a simple type conversion to TglFogType, but keep in mind the actual value may or may not be a valid TglFogType value.
func (me TglesEnumeration) ToTglFogType() TglFogType { return TglFogType(me) }

//	TglesEnumeration is an XSD union-type of several types. This is a simple type conversion to TglLogicOpType, but keep in mind the actual value may or may not be a valid TglLogicOpType value.
func (me TglesEnumeration) ToTglLogicOpType() TglLogicOpType { return TglLogicOpType(me) }

//	TglesEnumeration is an XSD union-type of several types. This is a simple type conversion to TglPolygonModeType, but keep in mind the actual value may or may not be a valid TglPolygonModeType value.
func (me TglesEnumeration) ToTglPolygonModeType() TglPolygonModeType { return TglPolygonModeType(me) }

//	TglesEnumeration is an XSD union-type of several types. This is a simple type conversion to TglStencilOpType, but keep in mind the actual value may or may not be a valid TglStencilOpType value.
func (me TglesEnumeration) ToTglStencilOpType() TglStencilOpType { return TglStencilOpType(me) }

//	This convenience method just performs a simple type conversion to TglesEnumeration's alias type xsdt.String.
func (me TglesEnumeration) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TglesEnumeration is just a simple String type, this merely returns the current string value.
func (me TglesEnumeration) String() string { return xsdt.String(me).String() }

//	TglesEnumeration is an XSD union-type of several types. This is a simple type conversion to TglMaterialType, but keep in mind the actual value may or may not be a valid TglMaterialType value.
func (me TglesEnumeration) ToTglMaterialType() TglMaterialType { return TglMaterialType(me) }

//	TglesEnumeration is an XSD union-type of several types. This is a simple type conversion to TglFaceType, but keep in mind the actual value may or may not be a valid TglFaceType value.
func (me TglesEnumeration) ToTglFaceType() TglFaceType { return TglFaceType(me) }

//	TglesEnumeration is an XSD union-type of several types. This is a simple type conversion to TglFrontFaceType, but keep in mind the actual value may or may not be a valid TglFrontFaceType value.
func (me TglesEnumeration) ToTglFrontFaceType() TglFrontFaceType { return TglFrontFaceType(me) }

//	TglesEnumeration is an XSD union-type of several types. This is a simple type conversion to TglLightModelColorControlType, but keep in mind the actual value may or may not be a valid TglLightModelColorControlType value.
func (me TglesEnumeration) ToTglLightModelColorControlType() TglLightModelColorControlType {
	return TglLightModelColorControlType(me)
}

//	Since TglesEnumeration is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesEnumeration) Set(s string) { (*xsdt.String)(me).Set(s) }

//	TglesEnumeration is an XSD union-type of several types. This is a simple type conversion to TglBlendType, but keep in mind the actual value may or may not be a valid TglBlendType value.
func (me TglesEnumeration) ToTglBlendType() TglBlendType { return TglBlendType(me) }

//	TglesEnumeration is an XSD union-type of several types. This is a simple type conversion to TglShadeModelType, but keep in mind the actual value may or may not be a valid TglShadeModelType value.
func (me TglesEnumeration) ToTglShadeModelType() TglShadeModelType { return TglShadeModelType(me) }

//	TglesEnumeration is an XSD union-type of several types. This is a simple type conversion to TglFuncType, but keep in mind the actual value may or may not be a valid TglFuncType value.
func (me TglesEnumeration) ToTglFuncType() TglFuncType { return TglFuncType(me) }

type XsdGoPkgHasElem_enumchoicegles_basic_type_commonschema_Enum_TglesEnumeration_ struct {
	Enum TglesEnumeration `xml:"http://www.collada.org/2005/11/COLLADASchema enum"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_enumchoicegles_basic_type_commonschema_Enum_TglesEnumeration_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_enumchoicegles_basic_type_commonschema_Enum_TglesEnumeration_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_enumchoicegles_basic_type_commonschema_Enum_TglesEnumeration_ instance.
func (me *XsdGoPkgHasElem_enumchoicegles_basic_type_commonschema_Enum_TglesEnumeration_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_enumchoicegles_basic_type_commonschema_Enum_TglesEnumeration_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_surfacesequencegles_texture_unitschema_Surface_XsdtNCName_ struct {
	Surface xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema surface"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_surfacesequencegles_texture_unitschema_Surface_XsdtNCName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_surfacesequencegles_texture_unitschema_Surface_XsdtNCName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_surfacesequencegles_texture_unitschema_Surface_XsdtNCName_ instance.
func (me *XsdGoPkgHasElem_surfacesequencegles_texture_unitschema_Surface_XsdtNCName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_surfacesequencegles_texture_unitschema_Surface_XsdtNCName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlesTextureUnitSequenceTexcoord struct {
	XsdGoPkgHasAttr_Semantic_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlesTextureUnitSequenceTexcoord function is not nil (ie. was set by outside code), calls it with this TxsdGlesTextureUnitSequenceTexcoord instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TxsdGlesTextureUnitSequenceTexcoord instance.
func (me *TxsdGlesTextureUnitSequenceTexcoord) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesTextureUnitSequenceTexcoord; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_texcoordsequencegles_texture_unitschema_Texcoord_TxsdGlesTextureUnitSequenceTexcoord_ struct {
	Texcoord *TxsdGlesTextureUnitSequenceTexcoord `xml:"http://www.collada.org/2005/11/COLLADASchema texcoord"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_texcoordsequencegles_texture_unitschema_Texcoord_TxsdGlesTextureUnitSequenceTexcoord_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texcoordsequencegles_texture_unitschema_Texcoord_TxsdGlesTextureUnitSequenceTexcoord_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texcoordsequencegles_texture_unitschema_Texcoord_TxsdGlesTextureUnitSequenceTexcoord_ instance.
func (me *XsdGoPkgHasElem_texcoordsequencegles_texture_unitschema_Texcoord_TxsdGlesTextureUnitSequenceTexcoord_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_texcoordsequencegles_texture_unitschema_Texcoord_TxsdGlesTextureUnitSequenceTexcoord_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Texcoord.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_sampler_statesequencegles_texture_unitschema_SamplerState_XsdtNCName_ struct {
	SamplerState xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema sampler_state"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sampler_statesequencegles_texture_unitschema_SamplerState_XsdtNCName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sampler_statesequencegles_texture_unitschema_SamplerState_XsdtNCName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_sampler_statesequencegles_texture_unitschema_SamplerState_XsdtNCName_ instance.
func (me *XsdGoPkgHasElem_sampler_statesequencegles_texture_unitschema_SamplerState_XsdtNCName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sampler_statesequencegles_texture_unitschema_SamplerState_XsdtNCName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglesTextureUnit struct {
	XsdGoPkgHasElem_sampler_statesequencegles_texture_unitschema_SamplerState_XsdtNCName_

	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElem_surfacesequencegles_texture_unitschema_Surface_XsdtNCName_

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	XsdGoPkgHasElem_texcoordsequencegles_texture_unitschema_Texcoord_TxsdGlesTextureUnitSequenceTexcoord_
}

//	If the WalkHandlers.TglesTextureUnit function is not nil (ie. was set by outside code), calls it with this TglesTextureUnit instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TglesTextureUnit instance.
func (me *TglesTextureUnit) Walk() (err error) {
	if fn := WalkHandlers.TglesTextureUnit; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_surfacesequencegles_texture_unitschema_Surface_XsdtNCName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_texcoordsequencegles_texture_unitschema_Texcoord_TxsdGlesTextureUnitSequenceTexcoord_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sampler_statesequencegles_texture_unitschema_SamplerState_XsdtNCName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_texture_unitchoicegles_basic_type_commonschema_TextureUnit_TglesTextureUnit_ struct {
	TextureUnit *TglesTextureUnit `xml:"http://www.collada.org/2005/11/COLLADASchema texture_unit"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_texture_unitchoicegles_basic_type_commonschema_TextureUnit_TglesTextureUnit_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texture_unitchoicegles_basic_type_commonschema_TextureUnit_TglesTextureUnit_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texture_unitchoicegles_basic_type_commonschema_TextureUnit_TglesTextureUnit_ instance.
func (me *XsdGoPkgHasElem_texture_unitchoicegles_basic_type_commonschema_TextureUnit_TglesTextureUnit_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_texture_unitchoicegles_basic_type_commonschema_TextureUnit_TglesTextureUnit_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TextureUnit.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Two-dimensional texture sampler state for profile_GLES. This is a bundle of sampler-specific states that will be referenced by one or more texture_units.
type TglesSamplerWrap xsdt.Nmtoken

//	Returns true if the value of this enumerated TglesSamplerWrap is "REPEAT".
func (me TglesSamplerWrap) IsRepeat() bool { return me == "REPEAT" }

//	Since TglesSamplerWrap is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesSamplerWrap) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Returns true if the value of this enumerated TglesSamplerWrap is "MIRRORED_REPEAT".
func (me TglesSamplerWrap) IsMirroredRepeat() bool { return me == "MIRRORED_REPEAT" }

//	Returns true if the value of this enumerated TglesSamplerWrap is "CLAMP_TO_EDGE".
func (me TglesSamplerWrap) IsClampToEdge() bool { return me == "CLAMP_TO_EDGE" }

//	This convenience method just performs a simple type conversion to TglesSamplerWrap's alias type xsdt.Nmtoken.
func (me TglesSamplerWrap) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TglesSamplerWrap is "CLAMP".
func (me TglesSamplerWrap) IsClamp() bool { return me == "CLAMP" }

//	Since TglesSamplerWrap is just a simple String type, this merely returns the current string value.
func (me TglesSamplerWrap) String() string { return xsdt.Nmtoken(me).String() }

type XsdGoPkgHasElem_wrap_ssequencegles_sampler_stateschema_WrapS_TglesSamplerWrap_Repeat struct {
	WrapS TglesSamplerWrap `xml:"http://www.collada.org/2005/11/COLLADASchema wrap_s"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_wrap_ssequencegles_sampler_stateschema_WrapS_TglesSamplerWrap_Repeat function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_wrap_ssequencegles_sampler_stateschema_WrapS_TglesSamplerWrap_Repeat instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_wrap_ssequencegles_sampler_stateschema_WrapS_TglesSamplerWrap_Repeat instance.
func (me *XsdGoPkgHasElem_wrap_ssequencegles_sampler_stateschema_WrapS_TglesSamplerWrap_Repeat) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_wrap_ssequencegles_sampler_stateschema_WrapS_TglesSamplerWrap_Repeat; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for WrapS -- "REPEAT"
func (me XsdGoPkgHasElem_wrap_ssequencegles_sampler_stateschema_WrapS_TglesSamplerWrap_Repeat) WrapSDefault() TglesSamplerWrap {
	return TglesSamplerWrap("REPEAT")
}

type XsdGoPkgHasElem_wrap_tsequencegles_sampler_stateschema_WrapT_TglesSamplerWrap_Repeat struct {
	WrapT TglesSamplerWrap `xml:"http://www.collada.org/2005/11/COLLADASchema wrap_t"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_wrap_tsequencegles_sampler_stateschema_WrapT_TglesSamplerWrap_Repeat function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_wrap_tsequencegles_sampler_stateschema_WrapT_TglesSamplerWrap_Repeat instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_wrap_tsequencegles_sampler_stateschema_WrapT_TglesSamplerWrap_Repeat instance.
func (me *XsdGoPkgHasElem_wrap_tsequencegles_sampler_stateschema_WrapT_TglesSamplerWrap_Repeat) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_wrap_tsequencegles_sampler_stateschema_WrapT_TglesSamplerWrap_Repeat; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for WrapT -- "REPEAT"
func (me XsdGoPkgHasElem_wrap_tsequencegles_sampler_stateschema_WrapT_TglesSamplerWrap_Repeat) WrapTDefault() TglesSamplerWrap {
	return TglesSamplerWrap("REPEAT")
}

type TglesSamplerState struct {
	XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler3D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255

	XsdGoPkgHasElem_magfiltersequencefx_samplerDEPTH_commonschema_Magfilter_TfxSamplerFilterCommon_None

	//	The extra element may appear any number of times.
	//	OpenGL ES extensions may be used here.
	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElem_wrap_ssequencegles_sampler_stateschema_WrapS_TglesSamplerWrap_Repeat

	XsdGoPkgHasElem_mipfiltersequencefx_sampler1D_commonschema_Mipfilter_TfxSamplerFilterCommon_None

	XsdGoPkgHasElem_wrap_tsequencegles_sampler_stateschema_WrapT_TglesSamplerWrap_Repeat

	XsdGoPkgHasElem_minfiltersequencefx_samplerDEPTH_commonschema_Minfilter_TfxSamplerFilterCommon_None

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	XsdGoPkgHasElem_mipmap_biassequencefx_sampler1D_commonschema_MipmapBias_XsdtFloat_00
}

//	If the WalkHandlers.TglesSamplerState function is not nil (ie. was set by outside code), calls it with this TglesSamplerState instance as the single argument. Then calls the Walk() method on 8/9 embed(s) and 0/0 field(s) belonging to this TglesSamplerState instance.
func (me *TglesSamplerState) Walk() (err error) {
	if fn := WalkHandlers.TglesSamplerState; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_magfiltersequencefx_samplerDEPTH_commonschema_Magfilter_TfxSamplerFilterCommon_None.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_wrap_ssequencegles_sampler_stateschema_WrapS_TglesSamplerWrap_Repeat.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_mipfiltersequencefx_sampler1D_commonschema_Mipfilter_TfxSamplerFilterCommon_None.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_wrap_tsequencegles_sampler_stateschema_WrapT_TglesSamplerWrap_Repeat.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_minfiltersequencefx_samplerDEPTH_commonschema_Minfilter_TfxSamplerFilterCommon_None.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_mipmap_biassequencefx_sampler1D_commonschema_MipmapBias_XsdtFloat_00.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler3D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_sampler_statechoicegles_basic_type_commonschema_SamplerState_TglesSamplerState_ struct {
	SamplerState *TglesSamplerState `xml:"http://www.collada.org/2005/11/COLLADASchema sampler_state"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sampler_statechoicegles_basic_type_commonschema_SamplerState_TglesSamplerState_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sampler_statechoicegles_basic_type_commonschema_SamplerState_TglesSamplerState_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sampler_statechoicegles_basic_type_commonschema_SamplerState_TglesSamplerState_ instance.
func (me *XsdGoPkgHasElem_sampler_statechoicegles_basic_type_commonschema_SamplerState_TglesSamplerState_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sampler_statechoicegles_basic_type_commonschema_SamplerState_TglesSamplerState_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SamplerState.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasGroup_GlesBasicTypeCommon struct {
	XsdGoPkgHasElem_surfacechoicefx_basic_type_commonschema_Surface_TfxSurfaceCommon_

	XsdGoPkgHasElem_floatchoicefx_basic_type_commonschema_Float_Tfloat_

	XsdGoPkgHasElem_float3choicefx_basic_type_commonschema_Float3_Tfloat3_

	XsdGoPkgHasElem_float3x2choicefx_basic_type_commonschema_Float3X2_Tfloat3X2_

	XsdGoPkgHasElem_boolchoicefx_basic_type_commonschema_Bool_Tbool_

	XsdGoPkgHasElem_float3x3choicefx_basic_type_commonschema_Float3X3_Tfloat3X3_

	XsdGoPkgHasElem_float4x2choicefx_basic_type_commonschema_Float4X2_Tfloat4X2_

	XsdGoPkgHasElem_float2x4choicefx_basic_type_commonschema_Float2X4_Tfloat2X4_

	XsdGoPkgHasElem_float4x3choicefx_basic_type_commonschema_Float4X3_Tfloat4X3_

	XsdGoPkgHasElem_texture_pipelinechoicegles_basic_type_commonschema_TexturePipeline_TglesTexturePipeline_

	XsdGoPkgHasElem_float2x2choicefx_basic_type_commonschema_Float2X2_Tfloat2X2_

	XsdGoPkgHasElem_float2choicefx_basic_type_commonschema_Float2_Tfloat2_

	XsdGoPkgHasElem_enumchoicegles_basic_type_commonschema_Enum_TglesEnumeration_

	XsdGoPkgHasElem_float1x4choicefx_basic_type_commonschema_Float1X4_Tfloat4_

	XsdGoPkgHasElem_float3x4choicefx_basic_type_commonschema_Float3X4_Tfloat3X4_

	XsdGoPkgHasElem_float1x1choicefx_basic_type_commonschema_Float1X1_Tfloat_

	XsdGoPkgHasElem_texture_unitchoicegles_basic_type_commonschema_TextureUnit_TglesTextureUnit_

	XsdGoPkgHasElem_float1x2choicefx_basic_type_commonschema_Float1X2_Tfloat2_

	XsdGoPkgHasElem_float4x4choicefx_basic_type_commonschema_Float4X4_Tfloat4X4_

	XsdGoPkgHasElem_int3choicefx_basic_type_commonschema_Int3_Tint3_

	XsdGoPkgHasElem_bool3choicefx_basic_type_commonschema_Bool3_Tbool3_

	XsdGoPkgHasElem_sampler_statechoicegles_basic_type_commonschema_SamplerState_TglesSamplerState_

	XsdGoPkgHasElem_float2x3choicefx_basic_type_commonschema_Float2X3_Tfloat2X3_

	XsdGoPkgHasElem_bool2choicefx_basic_type_commonschema_Bool2_Tbool2_

	XsdGoPkgHasElem_float2x1choicefx_basic_type_commonschema_Float2X1_Tfloat2_

	XsdGoPkgHasElem_float4choicefx_basic_type_commonschema_Float4_Tfloat4_

	XsdGoPkgHasElem_float4x1choicefx_basic_type_commonschema_Float4X1_Tfloat4_

	XsdGoPkgHasElem_float3x1choicefx_basic_type_commonschema_Float3X1_Tfloat3_

	XsdGoPkgHasElem_float1x3choicefx_basic_type_commonschema_Float1X3_Tfloat3_

	XsdGoPkgHasElem_int4choicefx_basic_type_commonschema_Int4_Tint4_

	XsdGoPkgHasElem_bool4choicefx_basic_type_commonschema_Bool4_Tbool4_

	XsdGoPkgHasElem_int2choicefx_basic_type_commonschema_Int2_Tint2_

	XsdGoPkgHasElem_intchoicefx_basic_type_commonschema_Int_Tint_
}

//	If the WalkHandlers.XsdGoPkgHasGroup_GlesBasicTypeCommon function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_GlesBasicTypeCommon instance as the single argument. Then calls the Walk() method on 33/33 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_GlesBasicTypeCommon instance.
func (me *XsdGoPkgHasGroup_GlesBasicTypeCommon) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasGroup_GlesBasicTypeCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_float1x1choicefx_basic_type_commonschema_Float1X1_Tfloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_texture_unitchoicegles_basic_type_commonschema_TextureUnit_TglesTextureUnit_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float1x2choicefx_basic_type_commonschema_Float1X2_Tfloat2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4x4choicefx_basic_type_commonschema_Float4X4_Tfloat4X4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int3choicefx_basic_type_commonschema_Int3_Tint3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool3choicefx_basic_type_commonschema_Bool3_Tbool3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sampler_statechoicegles_basic_type_commonschema_SamplerState_TglesSamplerState_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2x3choicefx_basic_type_commonschema_Float2X3_Tfloat2X3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool2choicefx_basic_type_commonschema_Bool2_Tbool2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2x1choicefx_basic_type_commonschema_Float2X1_Tfloat2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4choicefx_basic_type_commonschema_Float4_Tfloat4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4x1choicefx_basic_type_commonschema_Float4X1_Tfloat4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3x1choicefx_basic_type_commonschema_Float3X1_Tfloat3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float1x3choicefx_basic_type_commonschema_Float1X3_Tfloat3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int4choicefx_basic_type_commonschema_Int4_Tint4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool4choicefx_basic_type_commonschema_Bool4_Tbool4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int2choicefx_basic_type_commonschema_Int2_Tint2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_intchoicefx_basic_type_commonschema_Int_Tint_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_surfacechoicefx_basic_type_commonschema_Surface_TfxSurfaceCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_floatchoicefx_basic_type_commonschema_Float_Tfloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3choicefx_basic_type_commonschema_Float3_Tfloat3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3x2choicefx_basic_type_commonschema_Float3X2_Tfloat3X2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_boolchoicefx_basic_type_commonschema_Bool_Tbool_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3x3choicefx_basic_type_commonschema_Float3X3_Tfloat3X3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4x2choicefx_basic_type_commonschema_Float4X2_Tfloat4X2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2x4choicefx_basic_type_commonschema_Float2X4_Tfloat2X4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4x3choicefx_basic_type_commonschema_Float4X3_Tfloat4X3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_texture_pipelinechoicegles_basic_type_commonschema_TexturePipeline_TglesTexturePipeline_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2x2choicefx_basic_type_commonschema_Float2X2_Tfloat2X2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2choicefx_basic_type_commonschema_Float2_Tfloat2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_enumchoicegles_basic_type_commonschema_Enum_TglesEnumeration_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float1x4choicefx_basic_type_commonschema_Float1X4_Tfloat4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3x4choicefx_basic_type_commonschema_Float3X4_Tfloat3X4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglesNewparam struct {
	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	//	The modifier element allows you to specify a modifier for this new param.
	XsdGoPkgHasElem_modifiersequencefx_newparam_commonschema_Modifier_TfxModifierEnumCommon_

	//	The annotate element allows you to specify an annotation for this new param.
	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

	//	The semantic element allows you to specify a semantic for this new param.
	XsdGoPkgHasElem_semanticsequencefx_newparam_commonschema_Semantic_XsdtNCName_

	XsdGoPkgHasGroup_GlesBasicTypeCommon
}

//	If the WalkHandlers.TglesNewparam function is not nil (ie. was set by outside code), calls it with this TglesNewparam instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TglesNewparam instance.
func (me *TglesNewparam) Walk() (err error) {
	if fn := WalkHandlers.TglesNewparam; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_modifiersequencefx_newparam_commonschema_Modifier_TfxModifierEnumCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_semanticsequencefx_newparam_commonschema_Semantic_XsdtNCName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroup_GlesBasicTypeCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_newparamchoicesequenceprofile_GLESschema_Newparam_TglesNewparam_ struct {
	Newparams []*TglesNewparam `xml:"http://www.collada.org/2005/11/COLLADASchema newparam"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_newparamchoicesequenceprofile_GLESschema_Newparam_TglesNewparam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_newparamchoicesequenceprofile_GLESschema_Newparam_TglesNewparam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_newparamchoicesequenceprofile_GLESschema_Newparam_TglesNewparam_ instance.
func (me *XsdGoPkgHasElems_newparamchoicesequenceprofile_GLESschema_Newparam_TglesNewparam_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_newparamchoicesequenceprofile_GLESschema_Newparam_TglesNewparam_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Newparams {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
type TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam struct {
	XsdGoPkgHasGroup_GlesBasicTypeCommon

	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

	XsdGoPkgHasAttr_Ref_XsdtNCName_
}

//	If the WalkHandlers.TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam function is not nil (ie. was set by outside code), calls it with this TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam instance.
func (me *TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasGroup_GlesBasicTypeCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLESschema_Setparam_TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam_ struct {
	Setparams []*TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam `xml:"http://www.collada.org/2005/11/COLLADASchema setparam"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLESschema_Setparam_TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLESschema_Setparam_TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLESschema_Setparam_TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam_ instance.
func (me *XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLESschema_Setparam_TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLESschema_Setparam_TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Setparams {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
type TfxDrawCommon xsdt.String

//	Since TfxDrawCommon is just a simple String type, this merely returns the current string value.
func (me TfxDrawCommon) String() string { return xsdt.String(me).String() }

//	Since TfxDrawCommon is just a simple String type, this merely sets the current value from the specified string.
func (me *TfxDrawCommon) Set(s string) { (*xsdt.String)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TfxDrawCommon's alias type xsdt.String.
func (me TfxDrawCommon) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLESschema_Draw_TfxDrawCommon_ struct {
	Draw TfxDrawCommon `xml:"http://www.collada.org/2005/11/COLLADASchema draw"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLESschema_Draw_TfxDrawCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLESschema_Draw_TfxDrawCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLESschema_Draw_TfxDrawCommon_ instance.
func (me *XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLESschema_Draw_TfxDrawCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLESschema_Draw_TfxDrawCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglesRendertargetCommon xsdt.NCName

//	Since TglesRendertargetCommon is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesRendertargetCommon) Set(s string) { (*xsdt.NCName)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TglesRendertargetCommon's alias type xsdt.NCName.
func (me TglesRendertargetCommon) ToXsdtNCName() xsdt.NCName { return xsdt.NCName(me) }

//	Since TglesRendertargetCommon is just a simple String type, this merely returns the current string value.
func (me TglesRendertargetCommon) String() string { return xsdt.NCName(me).String() }

type XsdGoPkgHasElem_color_targetsequencepasssequencetechniquesequenceprofile_GLESschema_ColorTarget_TglesRendertargetCommon_ struct {
	ColorTarget TglesRendertargetCommon `xml:"http://www.collada.org/2005/11/COLLADASchema color_target"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_color_targetsequencepasssequencetechniquesequenceprofile_GLESschema_ColorTarget_TglesRendertargetCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_color_targetsequencepasssequencetechniquesequenceprofile_GLESschema_ColorTarget_TglesRendertargetCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_color_targetsequencepasssequencetechniquesequenceprofile_GLESschema_ColorTarget_TglesRendertargetCommon_ instance.
func (me *XsdGoPkgHasElem_color_targetsequencepasssequencetechniquesequenceprofile_GLESschema_ColorTarget_TglesRendertargetCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_color_targetsequencepasssequencetechniquesequenceprofile_GLESschema_ColorTarget_TglesRendertargetCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_stencil_targetsequencepasssequencetechniquesequenceprofile_GLESschema_StencilTarget_TglesRendertargetCommon_ struct {
	StencilTarget TglesRendertargetCommon `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_target"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_stencil_targetsequencepasssequencetechniquesequenceprofile_GLESschema_StencilTarget_TglesRendertargetCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_targetsequencepasssequencetechniquesequenceprofile_GLESschema_StencilTarget_TglesRendertargetCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_stencil_targetsequencepasssequencetechniquesequenceprofile_GLESschema_StencilTarget_TglesRendertargetCommon_ instance.
func (me *XsdGoPkgHasElem_stencil_targetsequencepasssequencetechniquesequenceprofile_GLESschema_StencilTarget_TglesRendertargetCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_stencil_targetsequencepasssequencetechniquesequenceprofile_GLESschema_StencilTarget_TglesRendertargetCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A group that contains the renderstates available for the GLES profile.
type XsdGoPkgHasAttr_Value_Tint_ struct {
	Value Tint `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

type TxsdGlesPipelineSettingsChoiceClearStencil struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tint_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceClearStencil function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceClearStencil instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceClearStencil instance.
func (me *TxsdGlesPipelineSettingsChoiceClearStencil) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceClearStencil; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_clear_stencilchoicegles_pipeline_settingsschema_ClearStencil_TxsdGlesPipelineSettingsChoiceClearStencil_ struct {
	ClearStencil *TxsdGlesPipelineSettingsChoiceClearStencil `xml:"http://www.collada.org/2005/11/COLLADASchema clear_stencil"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_clear_stencilchoicegles_pipeline_settingsschema_ClearStencil_TxsdGlesPipelineSettingsChoiceClearStencil_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_clear_stencilchoicegles_pipeline_settingsschema_ClearStencil_TxsdGlesPipelineSettingsChoiceClearStencil_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_clear_stencilchoicegles_pipeline_settingsschema_ClearStencil_TxsdGlesPipelineSettingsChoiceClearStencil_ instance.
func (me *XsdGoPkgHasElem_clear_stencilchoicegles_pipeline_settingsschema_ClearStencil_TxsdGlesPipelineSettingsChoiceClearStencil_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_clear_stencilchoicegles_pipeline_settingsschema_ClearStencil_TxsdGlesPipelineSettingsChoiceClearStencil_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ClearStencil.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tbool_False struct {
	Value Tbool `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- false
func (me XsdGoPkgHasAttr_Value_Tbool_False) ValueDefault() Tbool { return Tbool(false) }

type TxsdGlesPipelineSettingsChoiceTexturePipelineEnable struct {
	XsdGoPkgHasAttr_Value_Tbool_False

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceTexturePipelineEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceTexturePipelineEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceTexturePipelineEnable instance.
func (me *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceTexturePipelineEnable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_texture_pipeline_enablechoicegles_pipeline_settingsschema_TexturePipelineEnable_TxsdGlesPipelineSettingsChoiceTexturePipelineEnable_ struct {
	TexturePipelineEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema texture_pipeline_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_texture_pipeline_enablechoicegles_pipeline_settingsschema_TexturePipelineEnable_TxsdGlesPipelineSettingsChoiceTexturePipelineEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texture_pipeline_enablechoicegles_pipeline_settingsschema_TexturePipelineEnable_TxsdGlesPipelineSettingsChoiceTexturePipelineEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texture_pipeline_enablechoicegles_pipeline_settingsschema_TexturePipelineEnable_TxsdGlesPipelineSettingsChoiceTexturePipelineEnable_ instance.
func (me *XsdGoPkgHasElem_texture_pipeline_enablechoicegles_pipeline_settingsschema_TexturePipelineEnable_TxsdGlesPipelineSettingsChoiceTexturePipelineEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_texture_pipeline_enablechoicegles_pipeline_settingsschema_TexturePipelineEnable_TxsdGlesPipelineSettingsChoiceTexturePipelineEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TexturePipelineEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tfloat_ struct {
	Value Tfloat `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

type TxsdGlesPipelineSettingsChoiceClearDepth struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceClearDepth function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceClearDepth instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceClearDepth instance.
func (me *TxsdGlesPipelineSettingsChoiceClearDepth) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceClearDepth; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_clear_depthchoicegles_pipeline_settingsschema_ClearDepth_TxsdGlesPipelineSettingsChoiceClearDepth_ struct {
	ClearDepth *TxsdGlesPipelineSettingsChoiceClearDepth `xml:"http://www.collada.org/2005/11/COLLADASchema clear_depth"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_clear_depthchoicegles_pipeline_settingsschema_ClearDepth_TxsdGlesPipelineSettingsChoiceClearDepth_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_clear_depthchoicegles_pipeline_settingsschema_ClearDepth_TxsdGlesPipelineSettingsChoiceClearDepth_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_clear_depthchoicegles_pipeline_settingsschema_ClearDepth_TxsdGlesPipelineSettingsChoiceClearDepth_ instance.
func (me *XsdGoPkgHasElem_clear_depthchoicegles_pipeline_settingsschema_ClearDepth_TxsdGlesPipelineSettingsChoiceClearDepth_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_clear_depthchoicegles_pipeline_settingsschema_ClearDepth_TxsdGlesPipelineSettingsChoiceClearDepth_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ClearDepth.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tfloat2_01 struct {
	Value Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "0 1"
func (me XsdGoPkgHasAttr_Value_Tfloat2_01) ValueDefault() Tfloat2 { return Tfloat2("0 1") }

type TxsdGlesPipelineSettingsChoiceDepthRange struct {
	XsdGoPkgHasAttr_Value_Tfloat2_01

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceDepthRange function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceDepthRange instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceDepthRange instance.
func (me *TxsdGlesPipelineSettingsChoiceDepthRange) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceDepthRange; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_depth_rangechoicegles_pipeline_settingsschema_DepthRange_TxsdGlesPipelineSettingsChoiceDepthRange_ struct {
	DepthRange *TxsdGlesPipelineSettingsChoiceDepthRange `xml:"http://www.collada.org/2005/11/COLLADASchema depth_range"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_depth_rangechoicegles_pipeline_settingsschema_DepthRange_TxsdGlesPipelineSettingsChoiceDepthRange_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_rangechoicegles_pipeline_settingsschema_DepthRange_TxsdGlesPipelineSettingsChoiceDepthRange_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_depth_rangechoicegles_pipeline_settingsschema_DepthRange_TxsdGlesPipelineSettingsChoiceDepthRange_ instance.
func (me *XsdGoPkgHasElem_depth_rangechoicegles_pipeline_settingsschema_DepthRange_TxsdGlesPipelineSettingsChoiceDepthRange_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_depth_rangechoicegles_pipeline_settingsschema_DepthRange_TxsdGlesPipelineSettingsChoiceDepthRange_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DepthRange.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tfloat_0 struct {
	Value Tfloat `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- 0
func (me XsdGoPkgHasAttr_Value_Tfloat_0) ValueDefault() Tfloat { return Tfloat(0) }

type TxsdGlesPipelineSettingsChoicePointSizeMin struct {
	XsdGoPkgHasAttr_Value_Tfloat_0

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoicePointSizeMin function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoicePointSizeMin instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoicePointSizeMin instance.
func (me *TxsdGlesPipelineSettingsChoicePointSizeMin) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoicePointSizeMin; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_point_size_minchoicegles_pipeline_settingsschema_PointSizeMin_TxsdGlesPipelineSettingsChoicePointSizeMin_ struct {
	PointSizeMin *TxsdGlesPipelineSettingsChoicePointSizeMin `xml:"http://www.collada.org/2005/11/COLLADASchema point_size_min"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_point_size_minchoicegles_pipeline_settingsschema_PointSizeMin_TxsdGlesPipelineSettingsChoicePointSizeMin_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_size_minchoicegles_pipeline_settingsschema_PointSizeMin_TxsdGlesPipelineSettingsChoicePointSizeMin_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_size_minchoicegles_pipeline_settingsschema_PointSizeMin_TxsdGlesPipelineSettingsChoicePointSizeMin_ instance.
func (me *XsdGoPkgHasElem_point_size_minchoicegles_pipeline_settingsschema_PointSizeMin_TxsdGlesPipelineSettingsChoicePointSizeMin_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_point_size_minchoicegles_pipeline_settingsschema_PointSizeMin_TxsdGlesPipelineSettingsChoicePointSizeMin_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PointSizeMin.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tfloat2_00 struct {
	Value Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "0 0"
func (me XsdGoPkgHasAttr_Value_Tfloat2_00) ValueDefault() Tfloat2 { return Tfloat2("0 0") }

type TxsdGlesPipelineSettingsChoicePolygonOffset struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat2_00
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoicePolygonOffset function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoicePolygonOffset instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoicePolygonOffset instance.
func (me *TxsdGlesPipelineSettingsChoicePolygonOffset) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoicePolygonOffset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_polygon_offsetchoicegles_pipeline_settingsschema_PolygonOffset_TxsdGlesPipelineSettingsChoicePolygonOffset_ struct {
	PolygonOffset *TxsdGlesPipelineSettingsChoicePolygonOffset `xml:"http://www.collada.org/2005/11/COLLADASchema polygon_offset"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_polygon_offsetchoicegles_pipeline_settingsschema_PolygonOffset_TxsdGlesPipelineSettingsChoicePolygonOffset_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_polygon_offsetchoicegles_pipeline_settingsschema_PolygonOffset_TxsdGlesPipelineSettingsChoicePolygonOffset_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_polygon_offsetchoicegles_pipeline_settingsschema_PolygonOffset_TxsdGlesPipelineSettingsChoicePolygonOffset_ instance.
func (me *XsdGoPkgHasElem_polygon_offsetchoicegles_pipeline_settingsschema_PolygonOffset_TxsdGlesPipelineSettingsChoicePolygonOffset_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_polygon_offsetchoicegles_pipeline_settingsschema_PolygonOffset_TxsdGlesPipelineSettingsChoicePolygonOffset_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PolygonOffset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_point_smooth_enablechoicegles_pipeline_settingsschema_PointSmoothEnable_TxsdGlesPipelineSettingsChoicePointSmoothEnable_ struct {
	PointSmoothEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema point_smooth_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_point_smooth_enablechoicegles_pipeline_settingsschema_PointSmoothEnable_TxsdGlesPipelineSettingsChoicePointSmoothEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_smooth_enablechoicegles_pipeline_settingsschema_PointSmoothEnable_TxsdGlesPipelineSettingsChoicePointSmoothEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_smooth_enablechoicegles_pipeline_settingsschema_PointSmoothEnable_TxsdGlesPipelineSettingsChoicePointSmoothEnable_ instance.
func (me *XsdGoPkgHasElem_point_smooth_enablechoicegles_pipeline_settingsschema_PointSmoothEnable_TxsdGlesPipelineSettingsChoicePointSmoothEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_point_smooth_enablechoicegles_pipeline_settingsschema_PointSmoothEnable_TxsdGlesPipelineSettingsChoicePointSmoothEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PointSmoothEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_TglLogicOpType_Copy struct {
	Value TglLogicOpType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "COPY"
func (me XsdGoPkgHasAttr_Value_TglLogicOpType_Copy) ValueDefault() TglLogicOpType {
	return TglLogicOpType("COPY")
}

type TxsdGlesPipelineSettingsChoiceLogicOp struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglLogicOpType_Copy
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceLogicOp function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceLogicOp instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceLogicOp instance.
func (me *TxsdGlesPipelineSettingsChoiceLogicOp) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceLogicOp; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_logic_opchoicegles_pipeline_settingsschema_LogicOp_TxsdGlesPipelineSettingsChoiceLogicOp_ struct {
	LogicOp *TxsdGlesPipelineSettingsChoiceLogicOp `xml:"http://www.collada.org/2005/11/COLLADASchema logic_op"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_logic_opchoicegles_pipeline_settingsschema_LogicOp_TxsdGlesPipelineSettingsChoiceLogicOp_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_logic_opchoicegles_pipeline_settingsschema_LogicOp_TxsdGlesPipelineSettingsChoiceLogicOp_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_logic_opchoicegles_pipeline_settingsschema_LogicOp_TxsdGlesPipelineSettingsChoiceLogicOp_ instance.
func (me *XsdGoPkgHasElem_logic_opchoicegles_pipeline_settingsschema_LogicOp_TxsdGlesPipelineSettingsChoiceLogicOp_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_logic_opchoicegles_pipeline_settingsschema_LogicOp_TxsdGlesPipelineSettingsChoiceLogicOp_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LogicOp.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tbool_True struct {
	Value Tbool `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- true
func (me XsdGoPkgHasAttr_Value_Tbool_True) ValueDefault() Tbool { return Tbool(true) }

type TxsdGlesPipelineSettingsChoiceColorMaterialEnable struct {
	XsdGoPkgHasAttr_Value_Tbool_True

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceColorMaterialEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceColorMaterialEnable instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceColorMaterialEnable instance.
func (me *TxsdGlesPipelineSettingsChoiceColorMaterialEnable) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceColorMaterialEnable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_color_material_enablechoicegles_pipeline_settingsschema_ColorMaterialEnable_TxsdGlesPipelineSettingsChoiceColorMaterialEnable_ struct {
	ColorMaterialEnable *TxsdGlesPipelineSettingsChoiceColorMaterialEnable `xml:"http://www.collada.org/2005/11/COLLADASchema color_material_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_color_material_enablechoicegles_pipeline_settingsschema_ColorMaterialEnable_TxsdGlesPipelineSettingsChoiceColorMaterialEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_color_material_enablechoicegles_pipeline_settingsschema_ColorMaterialEnable_TxsdGlesPipelineSettingsChoiceColorMaterialEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_color_material_enablechoicegles_pipeline_settingsschema_ColorMaterialEnable_TxsdGlesPipelineSettingsChoiceColorMaterialEnable_ instance.
func (me *XsdGoPkgHasElem_color_material_enablechoicegles_pipeline_settingsschema_ColorMaterialEnable_TxsdGlesPipelineSettingsChoiceColorMaterialEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_color_material_enablechoicegles_pipeline_settingsschema_ColorMaterialEnable_TxsdGlesPipelineSettingsChoiceColorMaterialEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ColorMaterialEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tfloat4X4_1000010000100001 struct {
	Value Tfloat4X4 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1"
func (me XsdGoPkgHasAttr_Value_Tfloat4X4_1000010000100001) ValueDefault() Tfloat4X4 {
	return Tfloat4X4("1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1")
}

type TxsdGlesPipelineSettingsChoiceModelViewMatrix struct {
	XsdGoPkgHasAttr_Value_Tfloat4X4_1000010000100001

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceModelViewMatrix function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceModelViewMatrix instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceModelViewMatrix instance.
func (me *TxsdGlesPipelineSettingsChoiceModelViewMatrix) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceModelViewMatrix; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_model_view_matrixchoicegles_pipeline_settingsschema_ModelViewMatrix_TxsdGlesPipelineSettingsChoiceModelViewMatrix_ struct {
	ModelViewMatrix *TxsdGlesPipelineSettingsChoiceModelViewMatrix `xml:"http://www.collada.org/2005/11/COLLADASchema model_view_matrix"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_model_view_matrixchoicegles_pipeline_settingsschema_ModelViewMatrix_TxsdGlesPipelineSettingsChoiceModelViewMatrix_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_model_view_matrixchoicegles_pipeline_settingsschema_ModelViewMatrix_TxsdGlesPipelineSettingsChoiceModelViewMatrix_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_model_view_matrixchoicegles_pipeline_settingsschema_ModelViewMatrix_TxsdGlesPipelineSettingsChoiceModelViewMatrix_ instance.
func (me *XsdGoPkgHasElem_model_view_matrixchoicegles_pipeline_settingsschema_ModelViewMatrix_TxsdGlesPipelineSettingsChoiceModelViewMatrix_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_model_view_matrixchoicegles_pipeline_settingsschema_ModelViewMatrix_TxsdGlesPipelineSettingsChoiceModelViewMatrix_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ModelViewMatrix.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_color_logic_op_enablechoicegles_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlesPipelineSettingsChoiceColorLogicOpEnable_ struct {
	ColorLogicOpEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema color_logic_op_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_color_logic_op_enablechoicegles_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlesPipelineSettingsChoiceColorLogicOpEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_color_logic_op_enablechoicegles_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlesPipelineSettingsChoiceColorLogicOpEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_color_logic_op_enablechoicegles_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlesPipelineSettingsChoiceColorLogicOpEnable_ instance.
func (me *XsdGoPkgHasElem_color_logic_op_enablechoicegles_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlesPipelineSettingsChoiceColorLogicOpEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_color_logic_op_enablechoicegles_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlesPipelineSettingsChoiceColorLogicOpEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ColorLogicOpEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_rescale_normal_enablechoicegles_pipeline_settingsschema_RescaleNormalEnable_TxsdGlesPipelineSettingsChoiceRescaleNormalEnable_ struct {
	RescaleNormalEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema rescale_normal_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_rescale_normal_enablechoicegles_pipeline_settingsschema_RescaleNormalEnable_TxsdGlesPipelineSettingsChoiceRescaleNormalEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_rescale_normal_enablechoicegles_pipeline_settingsschema_RescaleNormalEnable_TxsdGlesPipelineSettingsChoiceRescaleNormalEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_rescale_normal_enablechoicegles_pipeline_settingsschema_RescaleNormalEnable_TxsdGlesPipelineSettingsChoiceRescaleNormalEnable_ instance.
func (me *XsdGoPkgHasElem_rescale_normal_enablechoicegles_pipeline_settingsschema_RescaleNormalEnable_TxsdGlesPipelineSettingsChoiceRescaleNormalEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_rescale_normal_enablechoicegles_pipeline_settingsschema_RescaleNormalEnable_TxsdGlesPipelineSettingsChoiceRescaleNormalEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RescaleNormalEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tfloat3_100 struct {
	Value Tfloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "1 0 0"
func (me XsdGoPkgHasAttr_Value_Tfloat3_100) ValueDefault() Tfloat3 { return Tfloat3("1 0 0") }

type TxsdGlesPipelineSettingsChoicePointDistanceAttenuation struct {
	XsdGoPkgHasAttr_Value_Tfloat3_100

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoicePointDistanceAttenuation function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoicePointDistanceAttenuation instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoicePointDistanceAttenuation instance.
func (me *TxsdGlesPipelineSettingsChoicePointDistanceAttenuation) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoicePointDistanceAttenuation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_point_distance_attenuationchoicegles_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlesPipelineSettingsChoicePointDistanceAttenuation_ struct {
	PointDistanceAttenuation *TxsdGlesPipelineSettingsChoicePointDistanceAttenuation `xml:"http://www.collada.org/2005/11/COLLADASchema point_distance_attenuation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_point_distance_attenuationchoicegles_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlesPipelineSettingsChoicePointDistanceAttenuation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_distance_attenuationchoicegles_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlesPipelineSettingsChoicePointDistanceAttenuation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_distance_attenuationchoicegles_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlesPipelineSettingsChoicePointDistanceAttenuation_ instance.
func (me *XsdGoPkgHasElem_point_distance_attenuationchoicegles_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlesPipelineSettingsChoicePointDistanceAttenuation_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_point_distance_attenuationchoicegles_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlesPipelineSettingsChoicePointDistanceAttenuation_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PointDistanceAttenuation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_valuesequencetexture_pipelinechoicegles_pipeline_settingsschema_Value_TglesTexturePipeline_ struct {
	Value *TglesTexturePipeline `xml:"http://www.collada.org/2005/11/COLLADASchema value"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_valuesequencetexture_pipelinechoicegles_pipeline_settingsschema_Value_TglesTexturePipeline_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_valuesequencetexture_pipelinechoicegles_pipeline_settingsschema_Value_TglesTexturePipeline_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_valuesequencetexture_pipelinechoicegles_pipeline_settingsschema_Value_TglesTexturePipeline_ instance.
func (me *XsdGoPkgHasElem_valuesequencetexture_pipelinechoicegles_pipeline_settingsschema_Value_TglesTexturePipeline_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_valuesequencetexture_pipelinechoicegles_pipeline_settingsschema_Value_TglesTexturePipeline_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Value.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlesPipelineSettingsChoiceTexturePipeline struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasElem_valuesequencetexture_pipelinechoicegles_pipeline_settingsschema_Value_TglesTexturePipeline_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceTexturePipeline function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceTexturePipeline instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceTexturePipeline instance.
func (me *TxsdGlesPipelineSettingsChoiceTexturePipeline) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceTexturePipeline; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_valuesequencetexture_pipelinechoicegles_pipeline_settingsschema_Value_TglesTexturePipeline_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_texture_pipelinechoicegles_pipeline_settingsschema_TexturePipeline_TxsdGlesPipelineSettingsChoiceTexturePipeline_ struct {
	TexturePipeline *TxsdGlesPipelineSettingsChoiceTexturePipeline `xml:"http://www.collada.org/2005/11/COLLADASchema texture_pipeline"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_texture_pipelinechoicegles_pipeline_settingsschema_TexturePipeline_TxsdGlesPipelineSettingsChoiceTexturePipeline_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texture_pipelinechoicegles_pipeline_settingsschema_TexturePipeline_TxsdGlesPipelineSettingsChoiceTexturePipeline_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texture_pipelinechoicegles_pipeline_settingsschema_TexturePipeline_TxsdGlesPipelineSettingsChoiceTexturePipeline_ instance.
func (me *XsdGoPkgHasElem_texture_pipelinechoicegles_pipeline_settingsschema_TexturePipeline_TxsdGlesPipelineSettingsChoiceTexturePipeline_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_texture_pipelinechoicegles_pipeline_settingsschema_TexturePipeline_TxsdGlesPipelineSettingsChoiceTexturePipeline_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TexturePipeline.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_XsdtUnsignedByte_255 struct {
	Value xsdt.UnsignedByte `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- 255
func (me XsdGoPkgHasAttr_Value_XsdtUnsignedByte_255) ValueDefault() xsdt.UnsignedByte {
	return xsdt.UnsignedByte(255)
}

type TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_XsdtUnsignedByte_255
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask instance.
func (me *TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_masksequencestencil_funcchoicegles_pipeline_settingsschema_Mask_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask_ struct {
	Mask *TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask `xml:"http://www.collada.org/2005/11/COLLADASchema mask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_masksequencestencil_funcchoicegles_pipeline_settingsschema_Mask_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_masksequencestencil_funcchoicegles_pipeline_settingsschema_Mask_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_masksequencestencil_funcchoicegles_pipeline_settingsschema_Mask_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask_ instance.
func (me *XsdGoPkgHasElem_masksequencestencil_funcchoicegles_pipeline_settingsschema_Mask_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_masksequencestencil_funcchoicegles_pipeline_settingsschema_Mask_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Mask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_TglFuncType_Always struct {
	Value TglFuncType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "ALWAYS"
func (me XsdGoPkgHasAttr_Value_TglFuncType_Always) ValueDefault() TglFuncType {
	return TglFuncType("ALWAYS")
}

type TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglFuncType_Always
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc instance.
func (me *TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_funcsequencestencil_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc_ struct {
	Func *TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc `xml:"http://www.collada.org/2005/11/COLLADASchema func"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_funcsequencestencil_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_funcsequencestencil_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_funcsequencestencil_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc_ instance.
func (me *XsdGoPkgHasElem_funcsequencestencil_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_funcsequencestencil_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Func.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_XsdtUnsignedByte_0 struct {
	Value xsdt.UnsignedByte `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- 0
func (me XsdGoPkgHasAttr_Value_XsdtUnsignedByte_0) ValueDefault() xsdt.UnsignedByte {
	return xsdt.UnsignedByte(0)
}

type TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef struct {
	XsdGoPkgHasAttr_Value_XsdtUnsignedByte_0

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef instance.
func (me *TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_refsequencestencil_funcchoicegles_pipeline_settingsschema_Ref_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef_ struct {
	Ref *TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef `xml:"http://www.collada.org/2005/11/COLLADASchema ref"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_refsequencestencil_funcchoicegles_pipeline_settingsschema_Ref_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_refsequencestencil_funcchoicegles_pipeline_settingsschema_Ref_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_refsequencestencil_funcchoicegles_pipeline_settingsschema_Ref_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef_ instance.
func (me *XsdGoPkgHasElem_refsequencestencil_funcchoicegles_pipeline_settingsschema_Ref_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_refsequencestencil_funcchoicegles_pipeline_settingsschema_Ref_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlesPipelineSettingsChoiceStencilFunc struct {
	XsdGoPkgHasElem_refsequencestencil_funcchoicegles_pipeline_settingsschema_Ref_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef_

	XsdGoPkgHasElem_masksequencestencil_funcchoicegles_pipeline_settingsschema_Mask_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask_

	XsdGoPkgHasElem_funcsequencestencil_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceStencilFunc function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceStencilFunc instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceStencilFunc instance.
func (me *TxsdGlesPipelineSettingsChoiceStencilFunc) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceStencilFunc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_funcsequencestencil_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_refsequencestencil_funcchoicegles_pipeline_settingsschema_Ref_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_masksequencestencil_funcchoicegles_pipeline_settingsschema_Mask_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_stencil_funcchoicegles_pipeline_settingsschema_StencilFunc_TxsdGlesPipelineSettingsChoiceStencilFunc_ struct {
	StencilFunc *TxsdGlesPipelineSettingsChoiceStencilFunc `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_func"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_stencil_funcchoicegles_pipeline_settingsschema_StencilFunc_TxsdGlesPipelineSettingsChoiceStencilFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_funcchoicegles_pipeline_settingsschema_StencilFunc_TxsdGlesPipelineSettingsChoiceStencilFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_funcchoicegles_pipeline_settingsschema_StencilFunc_TxsdGlesPipelineSettingsChoiceStencilFunc_ instance.
func (me *XsdGoPkgHasElem_stencil_funcchoicegles_pipeline_settingsschema_StencilFunc_TxsdGlesPipelineSettingsChoiceStencilFunc_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_stencil_funcchoicegles_pipeline_settingsschema_StencilFunc_TxsdGlesPipelineSettingsChoiceStencilFunc_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StencilFunc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tfloat4_0000 struct {
	Value Tfloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "0 0 0 0"
func (me XsdGoPkgHasAttr_Value_Tfloat4_0000) ValueDefault() Tfloat4 { return Tfloat4("0 0 0 0") }

type TglesMaxLightsIndex xsdt.NonNegativeInteger

//	This convenience method just performs a simple type conversion to TglesMaxLightsIndex's alias type xsdt.NonNegativeInteger.
func (me TglesMaxLightsIndex) ToXsdtNonNegativeInteger() xsdt.NonNegativeInteger {
	return xsdt.NonNegativeInteger(me)
}

//	Since TglesMaxLightsIndex is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TglesMaxLightsIndex) Set(s string) { (*xsdt.NonNegativeInteger)(me).Set(s) }

//	Returns a string representation of this TglesMaxLightsIndex's current non-string scalar value.
func (me TglesMaxLightsIndex) String() string { return xsdt.NonNegativeInteger(me).String() }

type XsdGoPkgHasAttr_Index_TglesMaxLightsIndex_ struct {
	Index TglesMaxLightsIndex `xml:"http://www.collada.org/2005/11/COLLADASchema index,attr"`
}

type TxsdGlesPipelineSettingsChoiceLightDiffuse struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat4_0000

	XsdGoPkgHasAttr_Index_TglesMaxLightsIndex_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceLightDiffuse function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceLightDiffuse instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceLightDiffuse instance.
func (me *TxsdGlesPipelineSettingsChoiceLightDiffuse) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceLightDiffuse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_diffusechoicegles_pipeline_settingsschema_LightDiffuse_TxsdGlesPipelineSettingsChoiceLightDiffuse_ struct {
	LightDiffuse *TxsdGlesPipelineSettingsChoiceLightDiffuse `xml:"http://www.collada.org/2005/11/COLLADASchema light_diffuse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_diffusechoicegles_pipeline_settingsschema_LightDiffuse_TxsdGlesPipelineSettingsChoiceLightDiffuse_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_diffusechoicegles_pipeline_settingsschema_LightDiffuse_TxsdGlesPipelineSettingsChoiceLightDiffuse_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_diffusechoicegles_pipeline_settingsschema_LightDiffuse_TxsdGlesPipelineSettingsChoiceLightDiffuse_ instance.
func (me *XsdGoPkgHasElem_light_diffusechoicegles_pipeline_settingsschema_LightDiffuse_TxsdGlesPipelineSettingsChoiceLightDiffuse_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_diffusechoicegles_pipeline_settingsschema_LightDiffuse_TxsdGlesPipelineSettingsChoiceLightDiffuse_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightDiffuse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_TglFrontFaceType_Ccw struct {
	Value TglFrontFaceType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "CCW"
func (me XsdGoPkgHasAttr_Value_TglFrontFaceType_Ccw) ValueDefault() TglFrontFaceType {
	return TglFrontFaceType("CCW")
}

type TxsdGlesPipelineSettingsChoiceFrontFace struct {
	XsdGoPkgHasAttr_Value_TglFrontFaceType_Ccw

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceFrontFace function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceFrontFace instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceFrontFace instance.
func (me *TxsdGlesPipelineSettingsChoiceFrontFace) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceFrontFace; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_front_facechoicegles_pipeline_settingsschema_FrontFace_TxsdGlesPipelineSettingsChoiceFrontFace_ struct {
	FrontFace *TxsdGlesPipelineSettingsChoiceFrontFace `xml:"http://www.collada.org/2005/11/COLLADASchema front_face"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_front_facechoicegles_pipeline_settingsschema_FrontFace_TxsdGlesPipelineSettingsChoiceFrontFace_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_front_facechoicegles_pipeline_settingsschema_FrontFace_TxsdGlesPipelineSettingsChoiceFrontFace_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_front_facechoicegles_pipeline_settingsschema_FrontFace_TxsdGlesPipelineSettingsChoiceFrontFace_ instance.
func (me *XsdGoPkgHasElem_front_facechoicegles_pipeline_settingsschema_FrontFace_TxsdGlesPipelineSettingsChoiceFrontFace_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_front_facechoicegles_pipeline_settingsschema_FrontFace_TxsdGlesPipelineSettingsChoiceFrontFace_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FrontFace.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tint4_ struct {
	Value Tint4 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

type TxsdGlesPipelineSettingsChoiceScissor struct {
	XsdGoPkgHasAttr_Value_Tint4_

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceScissor function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceScissor instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceScissor instance.
func (me *TxsdGlesPipelineSettingsChoiceScissor) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceScissor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_scissorchoicegles_pipeline_settingsschema_Scissor_TxsdGlesPipelineSettingsChoiceScissor_ struct {
	Scissor *TxsdGlesPipelineSettingsChoiceScissor `xml:"http://www.collada.org/2005/11/COLLADASchema scissor"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_scissorchoicegles_pipeline_settingsschema_Scissor_TxsdGlesPipelineSettingsChoiceScissor_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_scissorchoicegles_pipeline_settingsschema_Scissor_TxsdGlesPipelineSettingsChoiceScissor_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_scissorchoicegles_pipeline_settingsschema_Scissor_TxsdGlesPipelineSettingsChoiceScissor_ instance.
func (me *XsdGoPkgHasElem_scissorchoicegles_pipeline_settingsschema_Scissor_TxsdGlesPipelineSettingsChoiceScissor_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_scissorchoicegles_pipeline_settingsschema_Scissor_TxsdGlesPipelineSettingsChoiceScissor_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Scissor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_multisample_enablechoicegles_pipeline_settingsschema_MultisampleEnable_TxsdGlesPipelineSettingsChoiceMultisampleEnable_ struct {
	MultisampleEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema multisample_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_multisample_enablechoicegles_pipeline_settingsschema_MultisampleEnable_TxsdGlesPipelineSettingsChoiceMultisampleEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_multisample_enablechoicegles_pipeline_settingsschema_MultisampleEnable_TxsdGlesPipelineSettingsChoiceMultisampleEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_multisample_enablechoicegles_pipeline_settingsschema_MultisampleEnable_TxsdGlesPipelineSettingsChoiceMultisampleEnable_ instance.
func (me *XsdGoPkgHasElem_multisample_enablechoicegles_pipeline_settingsschema_MultisampleEnable_TxsdGlesPipelineSettingsChoiceMultisampleEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_multisample_enablechoicegles_pipeline_settingsschema_MultisampleEnable_TxsdGlesPipelineSettingsChoiceMultisampleEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MultisampleEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_TglFaceType_Back struct {
	Value TglFaceType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "BACK"
func (me XsdGoPkgHasAttr_Value_TglFaceType_Back) ValueDefault() TglFaceType {
	return TglFaceType("BACK")
}

type TxsdGlesPipelineSettingsChoiceCullFace struct {
	XsdGoPkgHasAttr_Value_TglFaceType_Back

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceCullFace function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceCullFace instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceCullFace instance.
func (me *TxsdGlesPipelineSettingsChoiceCullFace) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceCullFace; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_cull_facechoicegles_pipeline_settingsschema_CullFace_TxsdGlesPipelineSettingsChoiceCullFace_ struct {
	CullFace *TxsdGlesPipelineSettingsChoiceCullFace `xml:"http://www.collada.org/2005/11/COLLADASchema cull_face"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_cull_facechoicegles_pipeline_settingsschema_CullFace_TxsdGlesPipelineSettingsChoiceCullFace_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_cull_facechoicegles_pipeline_settingsschema_CullFace_TxsdGlesPipelineSettingsChoiceCullFace_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_cull_facechoicegles_pipeline_settingsschema_CullFace_TxsdGlesPipelineSettingsChoiceCullFace_ instance.
func (me *XsdGoPkgHasElem_cull_facechoicegles_pipeline_settingsschema_CullFace_TxsdGlesPipelineSettingsChoiceCullFace_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_cull_facechoicegles_pipeline_settingsschema_CullFace_TxsdGlesPipelineSettingsChoiceCullFace_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CullFace.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tfloat_1 struct {
	Value Tfloat `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- 1
func (me XsdGoPkgHasAttr_Value_Tfloat_1) ValueDefault() Tfloat { return Tfloat(1) }

type TxsdGlesPipelineSettingsChoicePointSizeMax struct {
	XsdGoPkgHasAttr_Value_Tfloat_1

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoicePointSizeMax function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoicePointSizeMax instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoicePointSizeMax instance.
func (me *TxsdGlesPipelineSettingsChoicePointSizeMax) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoicePointSizeMax; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_point_size_maxchoicegles_pipeline_settingsschema_PointSizeMax_TxsdGlesPipelineSettingsChoicePointSizeMax_ struct {
	PointSizeMax *TxsdGlesPipelineSettingsChoicePointSizeMax `xml:"http://www.collada.org/2005/11/COLLADASchema point_size_max"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_point_size_maxchoicegles_pipeline_settingsschema_PointSizeMax_TxsdGlesPipelineSettingsChoicePointSizeMax_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_size_maxchoicegles_pipeline_settingsschema_PointSizeMax_TxsdGlesPipelineSettingsChoicePointSizeMax_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_size_maxchoicegles_pipeline_settingsschema_PointSizeMax_TxsdGlesPipelineSettingsChoicePointSizeMax_ instance.
func (me *XsdGoPkgHasElem_point_size_maxchoicegles_pipeline_settingsschema_PointSizeMax_TxsdGlesPipelineSettingsChoicePointSizeMax_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_point_size_maxchoicegles_pipeline_settingsschema_PointSizeMax_TxsdGlesPipelineSettingsChoicePointSizeMax_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PointSizeMax.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_depth_test_enablechoicegles_pipeline_settingsschema_DepthTestEnable_TxsdGlesPipelineSettingsChoiceDepthTestEnable_ struct {
	DepthTestEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema depth_test_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_depth_test_enablechoicegles_pipeline_settingsschema_DepthTestEnable_TxsdGlesPipelineSettingsChoiceDepthTestEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_test_enablechoicegles_pipeline_settingsschema_DepthTestEnable_TxsdGlesPipelineSettingsChoiceDepthTestEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_depth_test_enablechoicegles_pipeline_settingsschema_DepthTestEnable_TxsdGlesPipelineSettingsChoiceDepthTestEnable_ instance.
func (me *XsdGoPkgHasElem_depth_test_enablechoicegles_pipeline_settingsschema_DepthTestEnable_TxsdGlesPipelineSettingsChoiceDepthTestEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_depth_test_enablechoicegles_pipeline_settingsschema_DepthTestEnable_TxsdGlesPipelineSettingsChoiceDepthTestEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DepthTestEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_TglFogType_Exp struct {
	Value TglFogType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "EXP"
func (me XsdGoPkgHasAttr_Value_TglFogType_Exp) ValueDefault() TglFogType { return TglFogType("EXP") }

type TxsdGlesPipelineSettingsChoiceFogMode struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglFogType_Exp
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceFogMode function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceFogMode instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceFogMode instance.
func (me *TxsdGlesPipelineSettingsChoiceFogMode) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceFogMode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fog_modechoicegles_pipeline_settingsschema_FogMode_TxsdGlesPipelineSettingsChoiceFogMode_ struct {
	FogMode *TxsdGlesPipelineSettingsChoiceFogMode `xml:"http://www.collada.org/2005/11/COLLADASchema fog_mode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fog_modechoicegles_pipeline_settingsschema_FogMode_TxsdGlesPipelineSettingsChoiceFogMode_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_modechoicegles_pipeline_settingsschema_FogMode_TxsdGlesPipelineSettingsChoiceFogMode_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_modechoicegles_pipeline_settingsschema_FogMode_TxsdGlesPipelineSettingsChoiceFogMode_ instance.
func (me *XsdGoPkgHasElem_fog_modechoicegles_pipeline_settingsschema_FogMode_TxsdGlesPipelineSettingsChoiceFogMode_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fog_modechoicegles_pipeline_settingsschema_FogMode_TxsdGlesPipelineSettingsChoiceFogMode_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FogMode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlesPipelineSettingsChoiceLightLinearAttenutation struct {
	XsdGoPkgHasAttr_Index_TglesMaxLightsIndex_

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat_1
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceLightLinearAttenutation function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceLightLinearAttenutation instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceLightLinearAttenutation instance.
func (me *TxsdGlesPipelineSettingsChoiceLightLinearAttenutation) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceLightLinearAttenutation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_linear_attenutationchoicegles_pipeline_settingsschema_LightLinearAttenutation_TxsdGlesPipelineSettingsChoiceLightLinearAttenutation_ struct {
	LightLinearAttenutation *TxsdGlesPipelineSettingsChoiceLightLinearAttenutation `xml:"http://www.collada.org/2005/11/COLLADASchema light_linear_attenutation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_linear_attenutationchoicegles_pipeline_settingsschema_LightLinearAttenutation_TxsdGlesPipelineSettingsChoiceLightLinearAttenutation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_linear_attenutationchoicegles_pipeline_settingsschema_LightLinearAttenutation_TxsdGlesPipelineSettingsChoiceLightLinearAttenutation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_linear_attenutationchoicegles_pipeline_settingsschema_LightLinearAttenutation_TxsdGlesPipelineSettingsChoiceLightLinearAttenutation_ instance.
func (me *XsdGoPkgHasElem_light_linear_attenutationchoicegles_pipeline_settingsschema_LightLinearAttenutation_TxsdGlesPipelineSettingsChoiceLightLinearAttenutation_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_linear_attenutationchoicegles_pipeline_settingsschema_LightLinearAttenutation_TxsdGlesPipelineSettingsChoiceLightLinearAttenutation_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightLinearAttenutation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_depth_funcchoicegles_pipeline_settingsschema_DepthFunc_TxsdGlesPipelineSettingsChoiceDepthFunc_ struct {
	DepthFunc *TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc `xml:"http://www.collada.org/2005/11/COLLADASchema depth_func"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_depth_funcchoicegles_pipeline_settingsschema_DepthFunc_TxsdGlesPipelineSettingsChoiceDepthFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_funcchoicegles_pipeline_settingsschema_DepthFunc_TxsdGlesPipelineSettingsChoiceDepthFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_depth_funcchoicegles_pipeline_settingsschema_DepthFunc_TxsdGlesPipelineSettingsChoiceDepthFunc_ instance.
func (me *XsdGoPkgHasElem_depth_funcchoicegles_pipeline_settingsschema_DepthFunc_TxsdGlesPipelineSettingsChoiceDepthFunc_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_depth_funcchoicegles_pipeline_settingsschema_DepthFunc_TxsdGlesPipelineSettingsChoiceDepthFunc_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DepthFunc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fog_endchoicegles_pipeline_settingsschema_FogEnd_TxsdGlesPipelineSettingsChoiceFogEnd_ struct {
	FogEnd *TxsdGlesPipelineSettingsChoicePointSizeMax `xml:"http://www.collada.org/2005/11/COLLADASchema fog_end"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fog_endchoicegles_pipeline_settingsschema_FogEnd_TxsdGlesPipelineSettingsChoiceFogEnd_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_endchoicegles_pipeline_settingsschema_FogEnd_TxsdGlesPipelineSettingsChoiceFogEnd_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_endchoicegles_pipeline_settingsschema_FogEnd_TxsdGlesPipelineSettingsChoiceFogEnd_ instance.
func (me *XsdGoPkgHasElem_fog_endchoicegles_pipeline_settingsschema_FogEnd_TxsdGlesPipelineSettingsChoiceFogEnd_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fog_endchoicegles_pipeline_settingsschema_FogEnd_TxsdGlesPipelineSettingsChoiceFogEnd_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FogEnd.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_material_shininesschoicegles_pipeline_settingsschema_MaterialShininess_TxsdGlesPipelineSettingsChoiceMaterialShininess_ struct {
	MaterialShininess *TxsdGlesPipelineSettingsChoicePointSizeMin `xml:"http://www.collada.org/2005/11/COLLADASchema material_shininess"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_material_shininesschoicegles_pipeline_settingsschema_MaterialShininess_TxsdGlesPipelineSettingsChoiceMaterialShininess_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_material_shininesschoicegles_pipeline_settingsschema_MaterialShininess_TxsdGlesPipelineSettingsChoiceMaterialShininess_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_material_shininesschoicegles_pipeline_settingsschema_MaterialShininess_TxsdGlesPipelineSettingsChoiceMaterialShininess_ instance.
func (me *XsdGoPkgHasElem_material_shininesschoicegles_pipeline_settingsschema_MaterialShininess_TxsdGlesPipelineSettingsChoiceMaterialShininess_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_material_shininesschoicegles_pipeline_settingsschema_MaterialShininess_TxsdGlesPipelineSettingsChoiceMaterialShininess_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MaterialShininess.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglesMaxClipPlanesIndex xsdt.NonNegativeInteger

//	Since TglesMaxClipPlanesIndex is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TglesMaxClipPlanesIndex) Set(s string) { (*xsdt.NonNegativeInteger)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TglesMaxClipPlanesIndex's alias type xsdt.NonNegativeInteger.
func (me TglesMaxClipPlanesIndex) ToXsdtNonNegativeInteger() xsdt.NonNegativeInteger {
	return xsdt.NonNegativeInteger(me)
}

//	Returns a string representation of this TglesMaxClipPlanesIndex's current non-string scalar value.
func (me TglesMaxClipPlanesIndex) String() string { return xsdt.NonNegativeInteger(me).String() }

type XsdGoPkgHasAttr_Index_TglesMaxClipPlanesIndex_ struct {
	Index TglesMaxClipPlanesIndex `xml:"http://www.collada.org/2005/11/COLLADASchema index,attr"`
}

type TxsdGlesPipelineSettingsChoiceClipPlaneEnable struct {
	XsdGoPkgHasAttr_Value_Tbool_False

	XsdGoPkgHasAttr_Index_TglesMaxClipPlanesIndex_

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceClipPlaneEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceClipPlaneEnable instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceClipPlaneEnable instance.
func (me *TxsdGlesPipelineSettingsChoiceClipPlaneEnable) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceClipPlaneEnable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_clip_plane_enablechoicegles_pipeline_settingsschema_ClipPlaneEnable_TxsdGlesPipelineSettingsChoiceClipPlaneEnable_ struct {
	ClipPlaneEnable *TxsdGlesPipelineSettingsChoiceClipPlaneEnable `xml:"http://www.collada.org/2005/11/COLLADASchema clip_plane_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_clip_plane_enablechoicegles_pipeline_settingsschema_ClipPlaneEnable_TxsdGlesPipelineSettingsChoiceClipPlaneEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_clip_plane_enablechoicegles_pipeline_settingsschema_ClipPlaneEnable_TxsdGlesPipelineSettingsChoiceClipPlaneEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_clip_plane_enablechoicegles_pipeline_settingsschema_ClipPlaneEnable_TxsdGlesPipelineSettingsChoiceClipPlaneEnable_ instance.
func (me *XsdGoPkgHasElem_clip_plane_enablechoicegles_pipeline_settingsschema_ClipPlaneEnable_TxsdGlesPipelineSettingsChoiceClipPlaneEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_clip_plane_enablechoicegles_pipeline_settingsschema_ClipPlaneEnable_TxsdGlesPipelineSettingsChoiceClipPlaneEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ClipPlaneEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_dither_enablechoicegles_pipeline_settingsschema_DitherEnable_TxsdGlesPipelineSettingsChoiceDitherEnable_ struct {
	DitherEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema dither_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_dither_enablechoicegles_pipeline_settingsschema_DitherEnable_TxsdGlesPipelineSettingsChoiceDitherEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_dither_enablechoicegles_pipeline_settingsschema_DitherEnable_TxsdGlesPipelineSettingsChoiceDitherEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_dither_enablechoicegles_pipeline_settingsschema_DitherEnable_TxsdGlesPipelineSettingsChoiceDitherEnable_ instance.
func (me *XsdGoPkgHasElem_dither_enablechoicegles_pipeline_settingsschema_DitherEnable_TxsdGlesPipelineSettingsChoiceDitherEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_dither_enablechoicegles_pipeline_settingsschema_DitherEnable_TxsdGlesPipelineSettingsChoiceDitherEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DitherEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_specularchoicegles_pipeline_settingsschema_LightSpecular_TxsdGlesPipelineSettingsChoiceLightSpecular_ struct {
	LightSpecular *TxsdGlesPipelineSettingsChoiceLightDiffuse `xml:"http://www.collada.org/2005/11/COLLADASchema light_specular"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_specularchoicegles_pipeline_settingsschema_LightSpecular_TxsdGlesPipelineSettingsChoiceLightSpecular_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_specularchoicegles_pipeline_settingsschema_LightSpecular_TxsdGlesPipelineSettingsChoiceLightSpecular_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_specularchoicegles_pipeline_settingsschema_LightSpecular_TxsdGlesPipelineSettingsChoiceLightSpecular_ instance.
func (me *XsdGoPkgHasElem_light_specularchoicegles_pipeline_settingsschema_LightSpecular_TxsdGlesPipelineSettingsChoiceLightSpecular_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_specularchoicegles_pipeline_settingsschema_LightSpecular_TxsdGlesPipelineSettingsChoiceLightSpecular_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightSpecular.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_point_fade_threshold_sizechoicegles_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlesPipelineSettingsChoicePointFadeThresholdSize_ struct {
	PointFadeThresholdSize *TxsdGlesPipelineSettingsChoicePointSizeMax `xml:"http://www.collada.org/2005/11/COLLADASchema point_fade_threshold_size"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_point_fade_threshold_sizechoicegles_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlesPipelineSettingsChoicePointFadeThresholdSize_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_fade_threshold_sizechoicegles_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlesPipelineSettingsChoicePointFadeThresholdSize_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_fade_threshold_sizechoicegles_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlesPipelineSettingsChoicePointFadeThresholdSize_ instance.
func (me *XsdGoPkgHasElem_point_fade_threshold_sizechoicegles_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlesPipelineSettingsChoicePointFadeThresholdSize_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_point_fade_threshold_sizechoicegles_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlesPipelineSettingsChoicePointFadeThresholdSize_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PointFadeThresholdSize.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_clear_colorchoicegles_pipeline_settingsschema_ClearColor_TxsdGlesPipelineSettingsChoiceClearColor_ struct {
	ClearColor *TglesTextureConstantType `xml:"http://www.collada.org/2005/11/COLLADASchema clear_color"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_clear_colorchoicegles_pipeline_settingsschema_ClearColor_TxsdGlesPipelineSettingsChoiceClearColor_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_clear_colorchoicegles_pipeline_settingsschema_ClearColor_TxsdGlesPipelineSettingsChoiceClearColor_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_clear_colorchoicegles_pipeline_settingsschema_ClearColor_TxsdGlesPipelineSettingsChoiceClearColor_ instance.
func (me *XsdGoPkgHasElem_clear_colorchoicegles_pipeline_settingsschema_ClearColor_TxsdGlesPipelineSettingsChoiceClearColor_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_clear_colorchoicegles_pipeline_settingsschema_ClearColor_TxsdGlesPipelineSettingsChoiceClearColor_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ClearColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_cull_face_enablechoicegles_pipeline_settingsschema_CullFaceEnable_TxsdGlesPipelineSettingsChoiceCullFaceEnable_ struct {
	CullFaceEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema cull_face_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_cull_face_enablechoicegles_pipeline_settingsschema_CullFaceEnable_TxsdGlesPipelineSettingsChoiceCullFaceEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_cull_face_enablechoicegles_pipeline_settingsschema_CullFaceEnable_TxsdGlesPipelineSettingsChoiceCullFaceEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_cull_face_enablechoicegles_pipeline_settingsschema_CullFaceEnable_TxsdGlesPipelineSettingsChoiceCullFaceEnable_ instance.
func (me *XsdGoPkgHasElem_cull_face_enablechoicegles_pipeline_settingsschema_CullFaceEnable_TxsdGlesPipelineSettingsChoiceCullFaceEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_cull_face_enablechoicegles_pipeline_settingsschema_CullFaceEnable_TxsdGlesPipelineSettingsChoiceCullFaceEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CullFaceEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_model_two_side_enablechoicegles_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlesPipelineSettingsChoiceLightModelTwoSideEnable_ struct {
	LightModelTwoSideEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema light_model_two_side_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_model_two_side_enablechoicegles_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlesPipelineSettingsChoiceLightModelTwoSideEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_model_two_side_enablechoicegles_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlesPipelineSettingsChoiceLightModelTwoSideEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_model_two_side_enablechoicegles_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlesPipelineSettingsChoiceLightModelTwoSideEnable_ instance.
func (me *XsdGoPkgHasElem_light_model_two_side_enablechoicegles_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlesPipelineSettingsChoiceLightModelTwoSideEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_model_two_side_enablechoicegles_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlesPipelineSettingsChoiceLightModelTwoSideEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightModelTwoSideEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_line_widthchoicegles_pipeline_settingsschema_LineWidth_TxsdGlesPipelineSettingsChoiceLineWidth_ struct {
	LineWidth *TxsdGlesPipelineSettingsChoicePointSizeMax `xml:"http://www.collada.org/2005/11/COLLADASchema line_width"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_line_widthchoicegles_pipeline_settingsschema_LineWidth_TxsdGlesPipelineSettingsChoiceLineWidth_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_line_widthchoicegles_pipeline_settingsschema_LineWidth_TxsdGlesPipelineSettingsChoiceLineWidth_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_line_widthchoicegles_pipeline_settingsschema_LineWidth_TxsdGlesPipelineSettingsChoiceLineWidth_ instance.
func (me *XsdGoPkgHasElem_line_widthchoicegles_pipeline_settingsschema_LineWidth_TxsdGlesPipelineSettingsChoiceLineWidth_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_line_widthchoicegles_pipeline_settingsschema_LineWidth_TxsdGlesPipelineSettingsChoiceLineWidth_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LineWidth.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_blend_enablechoicegles_pipeline_settingsschema_BlendEnable_TxsdGlesPipelineSettingsChoiceBlendEnable_ struct {
	BlendEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema blend_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_blend_enablechoicegles_pipeline_settingsschema_BlendEnable_TxsdGlesPipelineSettingsChoiceBlendEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_blend_enablechoicegles_pipeline_settingsschema_BlendEnable_TxsdGlesPipelineSettingsChoiceBlendEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_blend_enablechoicegles_pipeline_settingsschema_BlendEnable_TxsdGlesPipelineSettingsChoiceBlendEnable_ instance.
func (me *XsdGoPkgHasElem_blend_enablechoicegles_pipeline_settingsschema_BlendEnable_TxsdGlesPipelineSettingsChoiceBlendEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_blend_enablechoicegles_pipeline_settingsschema_BlendEnable_TxsdGlesPipelineSettingsChoiceBlendEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BlendEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_point_sizechoicegles_pipeline_settingsschema_PointSize_TxsdGlesPipelineSettingsChoicePointSize_ struct {
	PointSize *TxsdGlesPipelineSettingsChoicePointSizeMax `xml:"http://www.collada.org/2005/11/COLLADASchema point_size"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_point_sizechoicegles_pipeline_settingsschema_PointSize_TxsdGlesPipelineSettingsChoicePointSize_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_sizechoicegles_pipeline_settingsschema_PointSize_TxsdGlesPipelineSettingsChoicePointSize_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_sizechoicegles_pipeline_settingsschema_PointSize_TxsdGlesPipelineSettingsChoicePointSize_ instance.
func (me *XsdGoPkgHasElem_point_sizechoicegles_pipeline_settingsschema_PointSize_TxsdGlesPipelineSettingsChoicePointSize_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_point_sizechoicegles_pipeline_settingsschema_PointSize_TxsdGlesPipelineSettingsChoicePointSize_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PointSize.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_projection_matrixchoicegles_pipeline_settingsschema_ProjectionMatrix_TxsdGlesPipelineSettingsChoiceProjectionMatrix_ struct {
	ProjectionMatrix *TxsdGlesPipelineSettingsChoiceModelViewMatrix `xml:"http://www.collada.org/2005/11/COLLADASchema projection_matrix"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_projection_matrixchoicegles_pipeline_settingsschema_ProjectionMatrix_TxsdGlesPipelineSettingsChoiceProjectionMatrix_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_projection_matrixchoicegles_pipeline_settingsschema_ProjectionMatrix_TxsdGlesPipelineSettingsChoiceProjectionMatrix_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_projection_matrixchoicegles_pipeline_settingsschema_ProjectionMatrix_TxsdGlesPipelineSettingsChoiceProjectionMatrix_ instance.
func (me *XsdGoPkgHasElem_projection_matrixchoicegles_pipeline_settingsschema_ProjectionMatrix_TxsdGlesPipelineSettingsChoiceProjectionMatrix_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_projection_matrixchoicegles_pipeline_settingsschema_ProjectionMatrix_TxsdGlesPipelineSettingsChoiceProjectionMatrix_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ProjectionMatrix.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_sample_coverage_enablechoicegles_pipeline_settingsschema_SampleCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleCoverageEnable_ struct {
	SampleCoverageEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema sample_coverage_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sample_coverage_enablechoicegles_pipeline_settingsschema_SampleCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleCoverageEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sample_coverage_enablechoicegles_pipeline_settingsschema_SampleCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleCoverageEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sample_coverage_enablechoicegles_pipeline_settingsschema_SampleCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleCoverageEnable_ instance.
func (me *XsdGoPkgHasElem_sample_coverage_enablechoicegles_pipeline_settingsschema_SampleCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleCoverageEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sample_coverage_enablechoicegles_pipeline_settingsschema_SampleCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleCoverageEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SampleCoverageEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlesPipelineSettingsChoiceLightSpotExponent struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat_0

	XsdGoPkgHasAttr_Index_TglesMaxLightsIndex_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceLightSpotExponent function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceLightSpotExponent instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceLightSpotExponent instance.
func (me *TxsdGlesPipelineSettingsChoiceLightSpotExponent) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceLightSpotExponent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_spot_exponentchoicegles_pipeline_settingsschema_LightSpotExponent_TxsdGlesPipelineSettingsChoiceLightSpotExponent_ struct {
	LightSpotExponent *TxsdGlesPipelineSettingsChoiceLightSpotExponent `xml:"http://www.collada.org/2005/11/COLLADASchema light_spot_exponent"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_spot_exponentchoicegles_pipeline_settingsschema_LightSpotExponent_TxsdGlesPipelineSettingsChoiceLightSpotExponent_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_spot_exponentchoicegles_pipeline_settingsschema_LightSpotExponent_TxsdGlesPipelineSettingsChoiceLightSpotExponent_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_spot_exponentchoicegles_pipeline_settingsschema_LightSpotExponent_TxsdGlesPipelineSettingsChoiceLightSpotExponent_ instance.
func (me *XsdGoPkgHasElem_light_spot_exponentchoicegles_pipeline_settingsschema_LightSpotExponent_TxsdGlesPipelineSettingsChoiceLightSpotExponent_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_spot_exponentchoicegles_pipeline_settingsschema_LightSpotExponent_TxsdGlesPipelineSettingsChoiceLightSpotExponent_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightSpotExponent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_quadratic_attenuationchoicegles_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlesPipelineSettingsChoiceLightQuadraticAttenuation_ struct {
	LightQuadraticAttenuation *TxsdGlesPipelineSettingsChoiceLightLinearAttenutation `xml:"http://www.collada.org/2005/11/COLLADASchema light_quadratic_attenuation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_quadratic_attenuationchoicegles_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlesPipelineSettingsChoiceLightQuadraticAttenuation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_quadratic_attenuationchoicegles_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlesPipelineSettingsChoiceLightQuadraticAttenuation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_quadratic_attenuationchoicegles_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlesPipelineSettingsChoiceLightQuadraticAttenuation_ instance.
func (me *XsdGoPkgHasElem_light_quadratic_attenuationchoicegles_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlesPipelineSettingsChoiceLightQuadraticAttenuation_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_quadratic_attenuationchoicegles_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlesPipelineSettingsChoiceLightQuadraticAttenuation_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightQuadraticAttenuation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tfloat4_02020210 struct {
	Value Tfloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "0.2 0.2 0.2 1.0"
func (me XsdGoPkgHasAttr_Value_Tfloat4_02020210) ValueDefault() Tfloat4 {
	return Tfloat4("0.2 0.2 0.2 1.0")
}

type TxsdGlesPipelineSettingsChoiceMaterialAmbient struct {
	XsdGoPkgHasAttr_Value_Tfloat4_02020210

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceMaterialAmbient function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceMaterialAmbient instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceMaterialAmbient instance.
func (me *TxsdGlesPipelineSettingsChoiceMaterialAmbient) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceMaterialAmbient; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_material_ambientchoicegles_pipeline_settingsschema_MaterialAmbient_TxsdGlesPipelineSettingsChoiceMaterialAmbient_ struct {
	MaterialAmbient *TxsdGlesPipelineSettingsChoiceMaterialAmbient `xml:"http://www.collada.org/2005/11/COLLADASchema material_ambient"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_material_ambientchoicegles_pipeline_settingsschema_MaterialAmbient_TxsdGlesPipelineSettingsChoiceMaterialAmbient_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_material_ambientchoicegles_pipeline_settingsschema_MaterialAmbient_TxsdGlesPipelineSettingsChoiceMaterialAmbient_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_material_ambientchoicegles_pipeline_settingsschema_MaterialAmbient_TxsdGlesPipelineSettingsChoiceMaterialAmbient_ instance.
func (me *XsdGoPkgHasElem_material_ambientchoicegles_pipeline_settingsschema_MaterialAmbient_TxsdGlesPipelineSettingsChoiceMaterialAmbient_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_material_ambientchoicegles_pipeline_settingsschema_MaterialAmbient_TxsdGlesPipelineSettingsChoiceMaterialAmbient_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MaterialAmbient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tint_4294967295 struct {
	Value Tint `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- 4294967295
func (me XsdGoPkgHasAttr_Value_Tint_4294967295) ValueDefault() Tint { return Tint(4294967295) }

type TxsdGlesPipelineSettingsChoiceStencilMask struct {
	XsdGoPkgHasAttr_Value_Tint_4294967295

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceStencilMask function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceStencilMask instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceStencilMask instance.
func (me *TxsdGlesPipelineSettingsChoiceStencilMask) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceStencilMask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_stencil_maskchoicegles_pipeline_settingsschema_StencilMask_TxsdGlesPipelineSettingsChoiceStencilMask_ struct {
	StencilMask *TxsdGlesPipelineSettingsChoiceStencilMask `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_mask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_stencil_maskchoicegles_pipeline_settingsschema_StencilMask_TxsdGlesPipelineSettingsChoiceStencilMask_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_maskchoicegles_pipeline_settingsschema_StencilMask_TxsdGlesPipelineSettingsChoiceStencilMask_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_maskchoicegles_pipeline_settingsschema_StencilMask_TxsdGlesPipelineSettingsChoiceStencilMask_ instance.
func (me *XsdGoPkgHasElem_stencil_maskchoicegles_pipeline_settingsschema_StencilMask_TxsdGlesPipelineSettingsChoiceStencilMask_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_stencil_maskchoicegles_pipeline_settingsschema_StencilMask_TxsdGlesPipelineSettingsChoiceStencilMask_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StencilMask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tfloat4_08080810 struct {
	Value Tfloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "0.8 0.8 0.8 1.0"
func (me XsdGoPkgHasAttr_Value_Tfloat4_08080810) ValueDefault() Tfloat4 {
	return Tfloat4("0.8 0.8 0.8 1.0")
}

type TxsdGlesPipelineSettingsChoiceMaterialDiffuse struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat4_08080810
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceMaterialDiffuse function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceMaterialDiffuse instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceMaterialDiffuse instance.
func (me *TxsdGlesPipelineSettingsChoiceMaterialDiffuse) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceMaterialDiffuse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_material_diffusechoicegles_pipeline_settingsschema_MaterialDiffuse_TxsdGlesPipelineSettingsChoiceMaterialDiffuse_ struct {
	MaterialDiffuse *TxsdGlesPipelineSettingsChoiceMaterialDiffuse `xml:"http://www.collada.org/2005/11/COLLADASchema material_diffuse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_material_diffusechoicegles_pipeline_settingsschema_MaterialDiffuse_TxsdGlesPipelineSettingsChoiceMaterialDiffuse_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_material_diffusechoicegles_pipeline_settingsschema_MaterialDiffuse_TxsdGlesPipelineSettingsChoiceMaterialDiffuse_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_material_diffusechoicegles_pipeline_settingsschema_MaterialDiffuse_TxsdGlesPipelineSettingsChoiceMaterialDiffuse_ instance.
func (me *XsdGoPkgHasElem_material_diffusechoicegles_pipeline_settingsschema_MaterialDiffuse_TxsdGlesPipelineSettingsChoiceMaterialDiffuse_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_material_diffusechoicegles_pipeline_settingsschema_MaterialDiffuse_TxsdGlesPipelineSettingsChoiceMaterialDiffuse_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MaterialDiffuse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_model_ambientchoicegles_pipeline_settingsschema_LightModelAmbient_TxsdGlesPipelineSettingsChoiceLightModelAmbient_ struct {
	LightModelAmbient *TxsdGlesPipelineSettingsChoiceMaterialAmbient `xml:"http://www.collada.org/2005/11/COLLADASchema light_model_ambient"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_model_ambientchoicegles_pipeline_settingsschema_LightModelAmbient_TxsdGlesPipelineSettingsChoiceLightModelAmbient_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_model_ambientchoicegles_pipeline_settingsschema_LightModelAmbient_TxsdGlesPipelineSettingsChoiceLightModelAmbient_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_model_ambientchoicegles_pipeline_settingsschema_LightModelAmbient_TxsdGlesPipelineSettingsChoiceLightModelAmbient_ instance.
func (me *XsdGoPkgHasElem_light_model_ambientchoicegles_pipeline_settingsschema_LightModelAmbient_TxsdGlesPipelineSettingsChoiceLightModelAmbient_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_model_ambientchoicegles_pipeline_settingsschema_LightModelAmbient_TxsdGlesPipelineSettingsChoiceLightModelAmbient_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightModelAmbient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tbool4_ struct {
	Value Tbool4 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

type TxsdGlesPipelineSettingsChoiceColorMask struct {
	XsdGoPkgHasAttr_Value_Tbool4_

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceColorMask function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceColorMask instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceColorMask instance.
func (me *TxsdGlesPipelineSettingsChoiceColorMask) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceColorMask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_color_maskchoicegles_pipeline_settingsschema_ColorMask_TxsdGlesPipelineSettingsChoiceColorMask_ struct {
	ColorMask *TxsdGlesPipelineSettingsChoiceColorMask `xml:"http://www.collada.org/2005/11/COLLADASchema color_mask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_color_maskchoicegles_pipeline_settingsschema_ColorMask_TxsdGlesPipelineSettingsChoiceColorMask_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_color_maskchoicegles_pipeline_settingsschema_ColorMask_TxsdGlesPipelineSettingsChoiceColorMask_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_color_maskchoicegles_pipeline_settingsschema_ColorMask_TxsdGlesPipelineSettingsChoiceColorMask_ instance.
func (me *XsdGoPkgHasElem_color_maskchoicegles_pipeline_settingsschema_ColorMask_TxsdGlesPipelineSettingsChoiceColorMask_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_color_maskchoicegles_pipeline_settingsschema_ColorMask_TxsdGlesPipelineSettingsChoiceColorMask_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ColorMask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fog_densitychoicegles_pipeline_settingsschema_FogDensity_TxsdGlesPipelineSettingsChoiceFogDensity_ struct {
	FogDensity *TxsdGlesPipelineSettingsChoicePointSizeMax `xml:"http://www.collada.org/2005/11/COLLADASchema fog_density"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fog_densitychoicegles_pipeline_settingsschema_FogDensity_TxsdGlesPipelineSettingsChoiceFogDensity_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_densitychoicegles_pipeline_settingsschema_FogDensity_TxsdGlesPipelineSettingsChoiceFogDensity_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_densitychoicegles_pipeline_settingsschema_FogDensity_TxsdGlesPipelineSettingsChoiceFogDensity_ instance.
func (me *XsdGoPkgHasElem_fog_densitychoicegles_pipeline_settingsschema_FogDensity_TxsdGlesPipelineSettingsChoiceFogDensity_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fog_densitychoicegles_pipeline_settingsschema_FogDensity_TxsdGlesPipelineSettingsChoiceFogDensity_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FogDensity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tfloat4_0010 struct {
	Value Tfloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "0 0 1 0"
func (me XsdGoPkgHasAttr_Value_Tfloat4_0010) ValueDefault() Tfloat4 { return Tfloat4("0 0 1 0") }

type TxsdGlesPipelineSettingsChoiceLightPosition struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat4_0010

	XsdGoPkgHasAttr_Index_TglesMaxLightsIndex_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceLightPosition function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceLightPosition instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceLightPosition instance.
func (me *TxsdGlesPipelineSettingsChoiceLightPosition) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceLightPosition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_positionchoicegles_pipeline_settingsschema_LightPosition_TxsdGlesPipelineSettingsChoiceLightPosition_ struct {
	LightPosition *TxsdGlesPipelineSettingsChoiceLightPosition `xml:"http://www.collada.org/2005/11/COLLADASchema light_position"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_positionchoicegles_pipeline_settingsschema_LightPosition_TxsdGlesPipelineSettingsChoiceLightPosition_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_positionchoicegles_pipeline_settingsschema_LightPosition_TxsdGlesPipelineSettingsChoiceLightPosition_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_positionchoicegles_pipeline_settingsschema_LightPosition_TxsdGlesPipelineSettingsChoiceLightPosition_ instance.
func (me *XsdGoPkgHasElem_light_positionchoicegles_pipeline_settingsschema_LightPosition_TxsdGlesPipelineSettingsChoiceLightPosition_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_positionchoicegles_pipeline_settingsschema_LightPosition_TxsdGlesPipelineSettingsChoiceLightPosition_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightPosition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglesStencilOpType xsdt.String

//	Returns true if the value of this enumerated TglesStencilOpType is "INCR".
func (me TglesStencilOpType) IsIncr() bool { return me == "INCR" }

//	This convenience method just performs a simple type conversion to TglesStencilOpType's alias type xsdt.String.
func (me TglesStencilOpType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TglesStencilOpType is "INVERT".
func (me TglesStencilOpType) IsInvert() bool { return me == "INVERT" }

//	Returns true if the value of this enumerated TglesStencilOpType is "KEEP".
func (me TglesStencilOpType) IsKeep() bool { return me == "KEEP" }

//	Returns true if the value of this enumerated TglesStencilOpType is "ZERO".
func (me TglesStencilOpType) IsZero() bool { return me == "ZERO" }

//	Since TglesStencilOpType is just a simple String type, this merely returns the current string value.
func (me TglesStencilOpType) String() string { return xsdt.String(me).String() }

//	Since TglesStencilOpType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglesStencilOpType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TglesStencilOpType is "REPLACE".
func (me TglesStencilOpType) IsReplace() bool { return me == "REPLACE" }

//	Returns true if the value of this enumerated TglesStencilOpType is "DECR".
func (me TglesStencilOpType) IsDecr() bool { return me == "DECR" }

type XsdGoPkgHasAttr_Value_TglesStencilOpType_Keep struct {
	Value TglesStencilOpType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "KEEP"
func (me XsdGoPkgHasAttr_Value_TglesStencilOpType_Keep) ValueDefault() TglesStencilOpType {
	return TglesStencilOpType("KEEP")
}

type TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail struct {
	XsdGoPkgHasAttr_Value_TglesStencilOpType_Keep

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail instance.
func (me *TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_zfailsequencestencil_opchoicegles_pipeline_settingsschema_Zfail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail_ struct {
	Zfail *TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail `xml:"http://www.collada.org/2005/11/COLLADASchema zfail"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_zfailsequencestencil_opchoicegles_pipeline_settingsschema_Zfail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_zfailsequencestencil_opchoicegles_pipeline_settingsschema_Zfail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_zfailsequencestencil_opchoicegles_pipeline_settingsschema_Zfail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail_ instance.
func (me *XsdGoPkgHasElem_zfailsequencestencil_opchoicegles_pipeline_settingsschema_Zfail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_zfailsequencestencil_opchoicegles_pipeline_settingsschema_Zfail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Zfail.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_failsequencestencil_opchoicegles_pipeline_settingsschema_Fail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceFail_ struct {
	Fail *TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail `xml:"http://www.collada.org/2005/11/COLLADASchema fail"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_failsequencestencil_opchoicegles_pipeline_settingsschema_Fail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceFail_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_failsequencestencil_opchoicegles_pipeline_settingsschema_Fail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceFail_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_failsequencestencil_opchoicegles_pipeline_settingsschema_Fail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceFail_ instance.
func (me *XsdGoPkgHasElem_failsequencestencil_opchoicegles_pipeline_settingsschema_Fail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceFail_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_failsequencestencil_opchoicegles_pipeline_settingsschema_Fail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceFail_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Fail.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_zpasssequencestencil_opchoicegles_pipeline_settingsschema_Zpass_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZpass_ struct {
	Zpass *TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail `xml:"http://www.collada.org/2005/11/COLLADASchema zpass"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_zpasssequencestencil_opchoicegles_pipeline_settingsschema_Zpass_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZpass_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_zpasssequencestencil_opchoicegles_pipeline_settingsschema_Zpass_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZpass_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_zpasssequencestencil_opchoicegles_pipeline_settingsschema_Zpass_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZpass_ instance.
func (me *XsdGoPkgHasElem_zpasssequencestencil_opchoicegles_pipeline_settingsschema_Zpass_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZpass_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_zpasssequencestencil_opchoicegles_pipeline_settingsschema_Zpass_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZpass_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Zpass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlesPipelineSettingsChoiceStencilOp struct {
	XsdGoPkgHasElem_failsequencestencil_opchoicegles_pipeline_settingsschema_Fail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceFail_

	XsdGoPkgHasElem_zpasssequencestencil_opchoicegles_pipeline_settingsschema_Zpass_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZpass_

	XsdGoPkgHasElem_zfailsequencestencil_opchoicegles_pipeline_settingsschema_Zfail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceStencilOp function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceStencilOp instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceStencilOp instance.
func (me *TxsdGlesPipelineSettingsChoiceStencilOp) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceStencilOp; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_failsequencestencil_opchoicegles_pipeline_settingsschema_Fail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceFail_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_zpasssequencestencil_opchoicegles_pipeline_settingsschema_Zpass_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZpass_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_zfailsequencestencil_opchoicegles_pipeline_settingsschema_Zfail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_stencil_opchoicegles_pipeline_settingsschema_StencilOp_TxsdGlesPipelineSettingsChoiceStencilOp_ struct {
	StencilOp *TxsdGlesPipelineSettingsChoiceStencilOp `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_op"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_stencil_opchoicegles_pipeline_settingsschema_StencilOp_TxsdGlesPipelineSettingsChoiceStencilOp_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_opchoicegles_pipeline_settingsschema_StencilOp_TxsdGlesPipelineSettingsChoiceStencilOp_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_opchoicegles_pipeline_settingsschema_StencilOp_TxsdGlesPipelineSettingsChoiceStencilOp_ instance.
func (me *XsdGoPkgHasElem_stencil_opchoicegles_pipeline_settingsschema_StencilOp_TxsdGlesPipelineSettingsChoiceStencilOp_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_stencil_opchoicegles_pipeline_settingsschema_StencilOp_TxsdGlesPipelineSettingsChoiceStencilOp_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StencilOp.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlesPipelineSettingsChoiceFogColor struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat4_0000
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceFogColor function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceFogColor instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceFogColor instance.
func (me *TxsdGlesPipelineSettingsChoiceFogColor) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceFogColor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fog_colorchoicegles_pipeline_settingsschema_FogColor_TxsdGlesPipelineSettingsChoiceFogColor_ struct {
	FogColor *TxsdGlesPipelineSettingsChoiceFogColor `xml:"http://www.collada.org/2005/11/COLLADASchema fog_color"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fog_colorchoicegles_pipeline_settingsschema_FogColor_TxsdGlesPipelineSettingsChoiceFogColor_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_colorchoicegles_pipeline_settingsschema_FogColor_TxsdGlesPipelineSettingsChoiceFogColor_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_colorchoicegles_pipeline_settingsschema_FogColor_TxsdGlesPipelineSettingsChoiceFogColor_ instance.
func (me *XsdGoPkgHasElem_fog_colorchoicegles_pipeline_settingsschema_FogColor_TxsdGlesPipelineSettingsChoiceFogColor_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fog_colorchoicegles_pipeline_settingsschema_FogColor_TxsdGlesPipelineSettingsChoiceFogColor_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FogColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlesPipelineSettingsChoicePolygonOffsetFillEnable_ struct {
	PolygonOffsetFillEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema polygon_offset_fill_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlesPipelineSettingsChoicePolygonOffsetFillEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlesPipelineSettingsChoicePolygonOffsetFillEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlesPipelineSettingsChoicePolygonOffsetFillEnable_ instance.
func (me *XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlesPipelineSettingsChoicePolygonOffsetFillEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlesPipelineSettingsChoicePolygonOffsetFillEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PolygonOffsetFillEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlesPipelineSettingsChoiceLightEnable struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglesMaxLightsIndex_

	XsdGoPkgHasAttr_Value_Tbool_False
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceLightEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceLightEnable instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceLightEnable instance.
func (me *TxsdGlesPipelineSettingsChoiceLightEnable) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceLightEnable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_enablechoicegles_pipeline_settingsschema_LightEnable_TxsdGlesPipelineSettingsChoiceLightEnable_ struct {
	LightEnable *TxsdGlesPipelineSettingsChoiceLightEnable `xml:"http://www.collada.org/2005/11/COLLADASchema light_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_enablechoicegles_pipeline_settingsschema_LightEnable_TxsdGlesPipelineSettingsChoiceLightEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_enablechoicegles_pipeline_settingsschema_LightEnable_TxsdGlesPipelineSettingsChoiceLightEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_enablechoicegles_pipeline_settingsschema_LightEnable_TxsdGlesPipelineSettingsChoiceLightEnable_ instance.
func (me *XsdGoPkgHasElem_light_enablechoicegles_pipeline_settingsschema_LightEnable_TxsdGlesPipelineSettingsChoiceLightEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_enablechoicegles_pipeline_settingsschema_LightEnable_TxsdGlesPipelineSettingsChoiceLightEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_constant_attenuationchoicegles_pipeline_settingsschema_LightConstantAttenuation_TxsdGlesPipelineSettingsChoiceLightConstantAttenuation_ struct {
	LightConstantAttenuation *TxsdGlesPipelineSettingsChoiceLightLinearAttenutation `xml:"http://www.collada.org/2005/11/COLLADASchema light_constant_attenuation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_constant_attenuationchoicegles_pipeline_settingsschema_LightConstantAttenuation_TxsdGlesPipelineSettingsChoiceLightConstantAttenuation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_constant_attenuationchoicegles_pipeline_settingsschema_LightConstantAttenuation_TxsdGlesPipelineSettingsChoiceLightConstantAttenuation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_constant_attenuationchoicegles_pipeline_settingsschema_LightConstantAttenuation_TxsdGlesPipelineSettingsChoiceLightConstantAttenuation_ instance.
func (me *XsdGoPkgHasElem_light_constant_attenuationchoicegles_pipeline_settingsschema_LightConstantAttenuation_TxsdGlesPipelineSettingsChoiceLightConstantAttenuation_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_constant_attenuationchoicegles_pipeline_settingsschema_LightConstantAttenuation_TxsdGlesPipelineSettingsChoiceLightConstantAttenuation_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightConstantAttenuation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegles_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToOneEnable_ struct {
	SampleAlphaToOneEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema sample_alpha_to_one_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegles_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToOneEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegles_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToOneEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegles_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToOneEnable_ instance.
func (me *XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegles_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToOneEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegles_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToOneEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SampleAlphaToOneEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlesPipelineSettingsChoiceClipPlane struct {
	XsdGoPkgHasAttr_Index_TglesMaxClipPlanesIndex_

	XsdGoPkgHasAttr_Value_Tbool4_

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceClipPlane function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceClipPlane instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceClipPlane instance.
func (me *TxsdGlesPipelineSettingsChoiceClipPlane) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceClipPlane; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_clip_planechoicegles_pipeline_settingsschema_ClipPlane_TxsdGlesPipelineSettingsChoiceClipPlane_ struct {
	ClipPlane *TxsdGlesPipelineSettingsChoiceClipPlane `xml:"http://www.collada.org/2005/11/COLLADASchema clip_plane"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_clip_planechoicegles_pipeline_settingsschema_ClipPlane_TxsdGlesPipelineSettingsChoiceClipPlane_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_clip_planechoicegles_pipeline_settingsschema_ClipPlane_TxsdGlesPipelineSettingsChoiceClipPlane_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_clip_planechoicegles_pipeline_settingsschema_ClipPlane_TxsdGlesPipelineSettingsChoiceClipPlane_ instance.
func (me *XsdGoPkgHasElem_clip_planechoicegles_pipeline_settingsschema_ClipPlane_TxsdGlesPipelineSettingsChoiceClipPlane_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_clip_planechoicegles_pipeline_settingsschema_ClipPlane_TxsdGlesPipelineSettingsChoiceClipPlane_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ClipPlane.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fog_startchoicegles_pipeline_settingsschema_FogStart_TxsdGlesPipelineSettingsChoiceFogStart_ struct {
	FogStart *TxsdGlesPipelineSettingsChoicePointSizeMin `xml:"http://www.collada.org/2005/11/COLLADASchema fog_start"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fog_startchoicegles_pipeline_settingsschema_FogStart_TxsdGlesPipelineSettingsChoiceFogStart_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_startchoicegles_pipeline_settingsschema_FogStart_TxsdGlesPipelineSettingsChoiceFogStart_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_startchoicegles_pipeline_settingsschema_FogStart_TxsdGlesPipelineSettingsChoiceFogStart_ instance.
func (me *XsdGoPkgHasElem_fog_startchoicegles_pipeline_settingsschema_FogStart_TxsdGlesPipelineSettingsChoiceFogStart_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fog_startchoicegles_pipeline_settingsschema_FogStart_TxsdGlesPipelineSettingsChoiceFogStart_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FogStart.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tfloat_180 struct {
	Value Tfloat `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- 180
func (me XsdGoPkgHasAttr_Value_Tfloat_180) ValueDefault() Tfloat { return Tfloat(180) }

type TxsdGlesPipelineSettingsChoiceLightSpotCutoff struct {
	XsdGoPkgHasAttr_Value_Tfloat_180

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglesMaxLightsIndex_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceLightSpotCutoff function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceLightSpotCutoff instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceLightSpotCutoff instance.
func (me *TxsdGlesPipelineSettingsChoiceLightSpotCutoff) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceLightSpotCutoff; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_spot_cutoffchoicegles_pipeline_settingsschema_LightSpotCutoff_TxsdGlesPipelineSettingsChoiceLightSpotCutoff_ struct {
	LightSpotCutoff *TxsdGlesPipelineSettingsChoiceLightSpotCutoff `xml:"http://www.collada.org/2005/11/COLLADASchema light_spot_cutoff"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_spot_cutoffchoicegles_pipeline_settingsschema_LightSpotCutoff_TxsdGlesPipelineSettingsChoiceLightSpotCutoff_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_spot_cutoffchoicegles_pipeline_settingsschema_LightSpotCutoff_TxsdGlesPipelineSettingsChoiceLightSpotCutoff_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_spot_cutoffchoicegles_pipeline_settingsschema_LightSpotCutoff_TxsdGlesPipelineSettingsChoiceLightSpotCutoff_ instance.
func (me *XsdGoPkgHasElem_light_spot_cutoffchoicegles_pipeline_settingsschema_LightSpotCutoff_TxsdGlesPipelineSettingsChoiceLightSpotCutoff_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_spot_cutoffchoicegles_pipeline_settingsschema_LightSpotCutoff_TxsdGlesPipelineSettingsChoiceLightSpotCutoff_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightSpotCutoff.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tfloat3_001 struct {
	Value Tfloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "0 0 -1"
func (me XsdGoPkgHasAttr_Value_Tfloat3_001) ValueDefault() Tfloat3 { return Tfloat3("0 0 -1") }

type TxsdGlesPipelineSettingsChoiceLightSpotDirection struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglesMaxLightsIndex_

	XsdGoPkgHasAttr_Value_Tfloat3_001
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceLightSpotDirection function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceLightSpotDirection instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceLightSpotDirection instance.
func (me *TxsdGlesPipelineSettingsChoiceLightSpotDirection) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceLightSpotDirection; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_spot_directionchoicegles_pipeline_settingsschema_LightSpotDirection_TxsdGlesPipelineSettingsChoiceLightSpotDirection_ struct {
	LightSpotDirection *TxsdGlesPipelineSettingsChoiceLightSpotDirection `xml:"http://www.collada.org/2005/11/COLLADASchema light_spot_direction"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_spot_directionchoicegles_pipeline_settingsschema_LightSpotDirection_TxsdGlesPipelineSettingsChoiceLightSpotDirection_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_spot_directionchoicegles_pipeline_settingsschema_LightSpotDirection_TxsdGlesPipelineSettingsChoiceLightSpotDirection_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_spot_directionchoicegles_pipeline_settingsschema_LightSpotDirection_TxsdGlesPipelineSettingsChoiceLightSpotDirection_ instance.
func (me *XsdGoPkgHasElem_light_spot_directionchoicegles_pipeline_settingsschema_LightSpotDirection_TxsdGlesPipelineSettingsChoiceLightSpotDirection_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_spot_directionchoicegles_pipeline_settingsschema_LightSpotDirection_TxsdGlesPipelineSettingsChoiceLightSpotDirection_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightSpotDirection.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tfloat4_0001 struct {
	Value Tfloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "0 0 0 1"
func (me XsdGoPkgHasAttr_Value_Tfloat4_0001) ValueDefault() Tfloat4 { return Tfloat4("0 0 0 1") }

type TxsdGlesPipelineSettingsChoiceMaterialSpecular struct {
	XsdGoPkgHasAttr_Value_Tfloat4_0001

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceMaterialSpecular function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceMaterialSpecular instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceMaterialSpecular instance.
func (me *TxsdGlesPipelineSettingsChoiceMaterialSpecular) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceMaterialSpecular; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_material_specularchoicegles_pipeline_settingsschema_MaterialSpecular_TxsdGlesPipelineSettingsChoiceMaterialSpecular_ struct {
	MaterialSpecular *TxsdGlesPipelineSettingsChoiceMaterialSpecular `xml:"http://www.collada.org/2005/11/COLLADASchema material_specular"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_material_specularchoicegles_pipeline_settingsschema_MaterialSpecular_TxsdGlesPipelineSettingsChoiceMaterialSpecular_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_material_specularchoicegles_pipeline_settingsschema_MaterialSpecular_TxsdGlesPipelineSettingsChoiceMaterialSpecular_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_material_specularchoicegles_pipeline_settingsschema_MaterialSpecular_TxsdGlesPipelineSettingsChoiceMaterialSpecular_ instance.
func (me *XsdGoPkgHasElem_material_specularchoicegles_pipeline_settingsschema_MaterialSpecular_TxsdGlesPipelineSettingsChoiceMaterialSpecular_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_material_specularchoicegles_pipeline_settingsschema_MaterialSpecular_TxsdGlesPipelineSettingsChoiceMaterialSpecular_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MaterialSpecular.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_material_emissionchoicegles_pipeline_settingsschema_MaterialEmission_TxsdGlesPipelineSettingsChoiceMaterialEmission_ struct {
	MaterialEmission *TxsdGlesPipelineSettingsChoiceMaterialSpecular `xml:"http://www.collada.org/2005/11/COLLADASchema material_emission"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_material_emissionchoicegles_pipeline_settingsschema_MaterialEmission_TxsdGlesPipelineSettingsChoiceMaterialEmission_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_material_emissionchoicegles_pipeline_settingsschema_MaterialEmission_TxsdGlesPipelineSettingsChoiceMaterialEmission_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_material_emissionchoicegles_pipeline_settingsschema_MaterialEmission_TxsdGlesPipelineSettingsChoiceMaterialEmission_ instance.
func (me *XsdGoPkgHasElem_material_emissionchoicegles_pipeline_settingsschema_MaterialEmission_TxsdGlesPipelineSettingsChoiceMaterialEmission_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_material_emissionchoicegles_pipeline_settingsschema_MaterialEmission_TxsdGlesPipelineSettingsChoiceMaterialEmission_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MaterialEmission.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_TglShadeModelType_Smooth struct {
	Value TglShadeModelType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "SMOOTH"
func (me XsdGoPkgHasAttr_Value_TglShadeModelType_Smooth) ValueDefault() TglShadeModelType {
	return TglShadeModelType("SMOOTH")
}

type TxsdGlesPipelineSettingsChoiceShadeModel struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglShadeModelType_Smooth
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceShadeModel function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceShadeModel instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceShadeModel instance.
func (me *TxsdGlesPipelineSettingsChoiceShadeModel) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceShadeModel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_shade_modelchoicegles_pipeline_settingsschema_ShadeModel_TxsdGlesPipelineSettingsChoiceShadeModel_ struct {
	ShadeModel *TxsdGlesPipelineSettingsChoiceShadeModel `xml:"http://www.collada.org/2005/11/COLLADASchema shade_model"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_shade_modelchoicegles_pipeline_settingsschema_ShadeModel_TxsdGlesPipelineSettingsChoiceShadeModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_shade_modelchoicegles_pipeline_settingsschema_ShadeModel_TxsdGlesPipelineSettingsChoiceShadeModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_shade_modelchoicegles_pipeline_settingsschema_ShadeModel_TxsdGlesPipelineSettingsChoiceShadeModel_ instance.
func (me *XsdGoPkgHasElem_shade_modelchoicegles_pipeline_settingsschema_ShadeModel_TxsdGlesPipelineSettingsChoiceShadeModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_shade_modelchoicegles_pipeline_settingsschema_ShadeModel_TxsdGlesPipelineSettingsChoiceShadeModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ShadeModel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglAlphaValueType xsdt.Float

//	This convenience method just performs a simple type conversion to TglAlphaValueType's alias type xsdt.Float.
func (me TglAlphaValueType) ToXsdtFloat() xsdt.Float { return xsdt.Float(me) }

//	Returns a string representation of this TglAlphaValueType's current non-string scalar value.
func (me TglAlphaValueType) String() string { return xsdt.Float(me).String() }

//	Since TglAlphaValueType is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TglAlphaValueType) Set(s string) { (*xsdt.Float)(me).Set(s) }

type XsdGoPkgHasAttr_Value_TglAlphaValueType_00 struct {
	Value TglAlphaValueType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- 0.0
func (me XsdGoPkgHasAttr_Value_TglAlphaValueType_00) ValueDefault() TglAlphaValueType {
	return TglAlphaValueType(0.0)
}

type TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglAlphaValueType_00
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue instance.
func (me *TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_valuesequencealpha_funcchoicegles_pipeline_settingsschema_Value_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue_ struct {
	Value *TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue `xml:"http://www.collada.org/2005/11/COLLADASchema value"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_valuesequencealpha_funcchoicegles_pipeline_settingsschema_Value_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_valuesequencealpha_funcchoicegles_pipeline_settingsschema_Value_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_valuesequencealpha_funcchoicegles_pipeline_settingsschema_Value_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue_ instance.
func (me *XsdGoPkgHasElem_valuesequencealpha_funcchoicegles_pipeline_settingsschema_Value_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_valuesequencealpha_funcchoicegles_pipeline_settingsschema_Value_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Value.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_funcsequencealpha_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceFunc_ struct {
	Func *TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc `xml:"http://www.collada.org/2005/11/COLLADASchema func"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_funcsequencealpha_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_funcsequencealpha_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_funcsequencealpha_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceFunc_ instance.
func (me *XsdGoPkgHasElem_funcsequencealpha_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceFunc_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_funcsequencealpha_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceFunc_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Func.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlesPipelineSettingsChoiceAlphaFunc struct {
	XsdGoPkgHasElem_valuesequencealpha_funcchoicegles_pipeline_settingsschema_Value_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue_

	XsdGoPkgHasElem_funcsequencealpha_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceFunc_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceAlphaFunc function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceAlphaFunc instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceAlphaFunc instance.
func (me *TxsdGlesPipelineSettingsChoiceAlphaFunc) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceAlphaFunc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_valuesequencealpha_funcchoicegles_pipeline_settingsschema_Value_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_funcsequencealpha_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceFunc_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_alpha_funcchoicegles_pipeline_settingsschema_AlphaFunc_TxsdGlesPipelineSettingsChoiceAlphaFunc_ struct {
	AlphaFunc *TxsdGlesPipelineSettingsChoiceAlphaFunc `xml:"http://www.collada.org/2005/11/COLLADASchema alpha_func"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_alpha_funcchoicegles_pipeline_settingsschema_AlphaFunc_TxsdGlesPipelineSettingsChoiceAlphaFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_alpha_funcchoicegles_pipeline_settingsschema_AlphaFunc_TxsdGlesPipelineSettingsChoiceAlphaFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_alpha_funcchoicegles_pipeline_settingsschema_AlphaFunc_TxsdGlesPipelineSettingsChoiceAlphaFunc_ instance.
func (me *XsdGoPkgHasElem_alpha_funcchoicegles_pipeline_settingsschema_AlphaFunc_TxsdGlesPipelineSettingsChoiceAlphaFunc_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_alpha_funcchoicegles_pipeline_settingsschema_AlphaFunc_TxsdGlesPipelineSettingsChoiceAlphaFunc_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AlphaFunc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlesPipelineSettingsChoiceLightAmbient struct {
	XsdGoPkgHasAttr_Value_Tfloat4_0001

	XsdGoPkgHasAttr_Index_TglesMaxLightsIndex_

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceLightAmbient function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceLightAmbient instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceLightAmbient instance.
func (me *TxsdGlesPipelineSettingsChoiceLightAmbient) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceLightAmbient; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_ambientchoicegles_pipeline_settingsschema_LightAmbient_TxsdGlesPipelineSettingsChoiceLightAmbient_ struct {
	LightAmbient *TxsdGlesPipelineSettingsChoiceLightAmbient `xml:"http://www.collada.org/2005/11/COLLADASchema light_ambient"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_ambientchoicegles_pipeline_settingsschema_LightAmbient_TxsdGlesPipelineSettingsChoiceLightAmbient_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_ambientchoicegles_pipeline_settingsschema_LightAmbient_TxsdGlesPipelineSettingsChoiceLightAmbient_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_ambientchoicegles_pipeline_settingsschema_LightAmbient_TxsdGlesPipelineSettingsChoiceLightAmbient_ instance.
func (me *XsdGoPkgHasElem_light_ambientchoicegles_pipeline_settingsschema_LightAmbient_TxsdGlesPipelineSettingsChoiceLightAmbient_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_ambientchoicegles_pipeline_settingsschema_LightAmbient_TxsdGlesPipelineSettingsChoiceLightAmbient_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightAmbient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_lighting_enablechoicegles_pipeline_settingsschema_LightingEnable_TxsdGlesPipelineSettingsChoiceLightingEnable_ struct {
	LightingEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema lighting_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_lighting_enablechoicegles_pipeline_settingsschema_LightingEnable_TxsdGlesPipelineSettingsChoiceLightingEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_lighting_enablechoicegles_pipeline_settingsschema_LightingEnable_TxsdGlesPipelineSettingsChoiceLightingEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_lighting_enablechoicegles_pipeline_settingsschema_LightingEnable_TxsdGlesPipelineSettingsChoiceLightingEnable_ instance.
func (me *XsdGoPkgHasElem_lighting_enablechoicegles_pipeline_settingsschema_LightingEnable_TxsdGlesPipelineSettingsChoiceLightingEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_lighting_enablechoicegles_pipeline_settingsschema_LightingEnable_TxsdGlesPipelineSettingsChoiceLightingEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightingEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToCoverageEnable_ struct {
	SampleAlphaToCoverageEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema sample_alpha_to_coverage_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToCoverageEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToCoverageEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToCoverageEnable_ instance.
func (me *XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToCoverageEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToCoverageEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SampleAlphaToCoverageEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_depth_maskchoicegles_pipeline_settingsschema_DepthMask_TxsdGlesPipelineSettingsChoiceDepthMask_ struct {
	DepthMask *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema depth_mask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_depth_maskchoicegles_pipeline_settingsschema_DepthMask_TxsdGlesPipelineSettingsChoiceDepthMask_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_maskchoicegles_pipeline_settingsschema_DepthMask_TxsdGlesPipelineSettingsChoiceDepthMask_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_depth_maskchoicegles_pipeline_settingsschema_DepthMask_TxsdGlesPipelineSettingsChoiceDepthMask_ instance.
func (me *XsdGoPkgHasElem_depth_maskchoicegles_pipeline_settingsschema_DepthMask_TxsdGlesPipelineSettingsChoiceDepthMask_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_depth_maskchoicegles_pipeline_settingsschema_DepthMask_TxsdGlesPipelineSettingsChoiceDepthMask_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DepthMask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_alpha_test_enablechoicegles_pipeline_settingsschema_AlphaTestEnable_TxsdGlesPipelineSettingsChoiceAlphaTestEnable_ struct {
	AlphaTestEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema alpha_test_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_alpha_test_enablechoicegles_pipeline_settingsschema_AlphaTestEnable_TxsdGlesPipelineSettingsChoiceAlphaTestEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_alpha_test_enablechoicegles_pipeline_settingsschema_AlphaTestEnable_TxsdGlesPipelineSettingsChoiceAlphaTestEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_alpha_test_enablechoicegles_pipeline_settingsschema_AlphaTestEnable_TxsdGlesPipelineSettingsChoiceAlphaTestEnable_ instance.
func (me *XsdGoPkgHasElem_alpha_test_enablechoicegles_pipeline_settingsschema_AlphaTestEnable_TxsdGlesPipelineSettingsChoiceAlphaTestEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_alpha_test_enablechoicegles_pipeline_settingsschema_AlphaTestEnable_TxsdGlesPipelineSettingsChoiceAlphaTestEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AlphaTestEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_stencil_test_enablechoicegles_pipeline_settingsschema_StencilTestEnable_TxsdGlesPipelineSettingsChoiceStencilTestEnable_ struct {
	StencilTestEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_test_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_stencil_test_enablechoicegles_pipeline_settingsschema_StencilTestEnable_TxsdGlesPipelineSettingsChoiceStencilTestEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_test_enablechoicegles_pipeline_settingsschema_StencilTestEnable_TxsdGlesPipelineSettingsChoiceStencilTestEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_test_enablechoicegles_pipeline_settingsschema_StencilTestEnable_TxsdGlesPipelineSettingsChoiceStencilTestEnable_ instance.
func (me *XsdGoPkgHasElem_stencil_test_enablechoicegles_pipeline_settingsschema_StencilTestEnable_TxsdGlesPipelineSettingsChoiceStencilTestEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_stencil_test_enablechoicegles_pipeline_settingsschema_StencilTestEnable_TxsdGlesPipelineSettingsChoiceStencilTestEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StencilTestEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_normalize_enablechoicegles_pipeline_settingsschema_NormalizeEnable_TxsdGlesPipelineSettingsChoiceNormalizeEnable_ struct {
	NormalizeEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema normalize_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_normalize_enablechoicegles_pipeline_settingsschema_NormalizeEnable_TxsdGlesPipelineSettingsChoiceNormalizeEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_normalize_enablechoicegles_pipeline_settingsschema_NormalizeEnable_TxsdGlesPipelineSettingsChoiceNormalizeEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_normalize_enablechoicegles_pipeline_settingsschema_NormalizeEnable_TxsdGlesPipelineSettingsChoiceNormalizeEnable_ instance.
func (me *XsdGoPkgHasElem_normalize_enablechoicegles_pipeline_settingsschema_NormalizeEnable_TxsdGlesPipelineSettingsChoiceNormalizeEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_normalize_enablechoicegles_pipeline_settingsschema_NormalizeEnable_TxsdGlesPipelineSettingsChoiceNormalizeEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.NormalizeEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_TglBlendType_Zero struct {
	Value TglBlendType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "ZERO"
func (me XsdGoPkgHasAttr_Value_TglBlendType_Zero) ValueDefault() TglBlendType {
	return TglBlendType("ZERO")
}

type TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest struct {
	XsdGoPkgHasAttr_Value_TglBlendType_Zero

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest instance.
func (me *TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_destsequenceblend_funcchoicegles_pipeline_settingsschema_Dest_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest_ struct {
	Dest *TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest `xml:"http://www.collada.org/2005/11/COLLADASchema dest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_destsequenceblend_funcchoicegles_pipeline_settingsschema_Dest_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_destsequenceblend_funcchoicegles_pipeline_settingsschema_Dest_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_destsequenceblend_funcchoicegles_pipeline_settingsschema_Dest_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest_ instance.
func (me *XsdGoPkgHasElem_destsequenceblend_funcchoicegles_pipeline_settingsschema_Dest_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_destsequenceblend_funcchoicegles_pipeline_settingsschema_Dest_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Dest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_TglBlendType_One struct {
	Value TglBlendType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "ONE"
func (me XsdGoPkgHasAttr_Value_TglBlendType_One) ValueDefault() TglBlendType {
	return TglBlendType("ONE")
}

type TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc struct {
	XsdGoPkgHasAttr_Value_TglBlendType_One

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc instance.
func (me *TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_srcsequenceblend_funcchoicegles_pipeline_settingsschema_Src_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc_ struct {
	Src *TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc `xml:"http://www.collada.org/2005/11/COLLADASchema src"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_srcsequenceblend_funcchoicegles_pipeline_settingsschema_Src_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_srcsequenceblend_funcchoicegles_pipeline_settingsschema_Src_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_srcsequenceblend_funcchoicegles_pipeline_settingsschema_Src_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc_ instance.
func (me *XsdGoPkgHasElem_srcsequenceblend_funcchoicegles_pipeline_settingsschema_Src_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_srcsequenceblend_funcchoicegles_pipeline_settingsschema_Src_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Src.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlesPipelineSettingsChoiceBlendFunc struct {
	XsdGoPkgHasElem_destsequenceblend_funcchoicegles_pipeline_settingsschema_Dest_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest_

	XsdGoPkgHasElem_srcsequenceblend_funcchoicegles_pipeline_settingsschema_Src_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc_
}

//	If the WalkHandlers.TxsdGlesPipelineSettingsChoiceBlendFunc function is not nil (ie. was set by outside code), calls it with this TxsdGlesPipelineSettingsChoiceBlendFunc instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGlesPipelineSettingsChoiceBlendFunc instance.
func (me *TxsdGlesPipelineSettingsChoiceBlendFunc) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlesPipelineSettingsChoiceBlendFunc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_destsequenceblend_funcchoicegles_pipeline_settingsschema_Dest_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_srcsequenceblend_funcchoicegles_pipeline_settingsschema_Src_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_blend_funcchoicegles_pipeline_settingsschema_BlendFunc_TxsdGlesPipelineSettingsChoiceBlendFunc_ struct {
	BlendFunc *TxsdGlesPipelineSettingsChoiceBlendFunc `xml:"http://www.collada.org/2005/11/COLLADASchema blend_func"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_blend_funcchoicegles_pipeline_settingsschema_BlendFunc_TxsdGlesPipelineSettingsChoiceBlendFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_blend_funcchoicegles_pipeline_settingsschema_BlendFunc_TxsdGlesPipelineSettingsChoiceBlendFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_blend_funcchoicegles_pipeline_settingsschema_BlendFunc_TxsdGlesPipelineSettingsChoiceBlendFunc_ instance.
func (me *XsdGoPkgHasElem_blend_funcchoicegles_pipeline_settingsschema_BlendFunc_TxsdGlesPipelineSettingsChoiceBlendFunc_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_blend_funcchoicegles_pipeline_settingsschema_BlendFunc_TxsdGlesPipelineSettingsChoiceBlendFunc_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BlendFunc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fog_enablechoicegles_pipeline_settingsschema_FogEnable_TxsdGlesPipelineSettingsChoiceFogEnable_ struct {
	FogEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema fog_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fog_enablechoicegles_pipeline_settingsschema_FogEnable_TxsdGlesPipelineSettingsChoiceFogEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_enablechoicegles_pipeline_settingsschema_FogEnable_TxsdGlesPipelineSettingsChoiceFogEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_enablechoicegles_pipeline_settingsschema_FogEnable_TxsdGlesPipelineSettingsChoiceFogEnable_ instance.
func (me *XsdGoPkgHasElem_fog_enablechoicegles_pipeline_settingsschema_FogEnable_TxsdGlesPipelineSettingsChoiceFogEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fog_enablechoicegles_pipeline_settingsschema_FogEnable_TxsdGlesPipelineSettingsChoiceFogEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FogEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_scissor_test_enablechoicegles_pipeline_settingsschema_ScissorTestEnable_TxsdGlesPipelineSettingsChoiceScissorTestEnable_ struct {
	ScissorTestEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema scissor_test_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_scissor_test_enablechoicegles_pipeline_settingsschema_ScissorTestEnable_TxsdGlesPipelineSettingsChoiceScissorTestEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_scissor_test_enablechoicegles_pipeline_settingsschema_ScissorTestEnable_TxsdGlesPipelineSettingsChoiceScissorTestEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_scissor_test_enablechoicegles_pipeline_settingsschema_ScissorTestEnable_TxsdGlesPipelineSettingsChoiceScissorTestEnable_ instance.
func (me *XsdGoPkgHasElem_scissor_test_enablechoicegles_pipeline_settingsschema_ScissorTestEnable_TxsdGlesPipelineSettingsChoiceScissorTestEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_scissor_test_enablechoicegles_pipeline_settingsschema_ScissorTestEnable_TxsdGlesPipelineSettingsChoiceScissorTestEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ScissorTestEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_line_smooth_enablechoicegles_pipeline_settingsschema_LineSmoothEnable_TxsdGlesPipelineSettingsChoiceLineSmoothEnable_ struct {
	LineSmoothEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema line_smooth_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_line_smooth_enablechoicegles_pipeline_settingsschema_LineSmoothEnable_TxsdGlesPipelineSettingsChoiceLineSmoothEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_line_smooth_enablechoicegles_pipeline_settingsschema_LineSmoothEnable_TxsdGlesPipelineSettingsChoiceLineSmoothEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_line_smooth_enablechoicegles_pipeline_settingsschema_LineSmoothEnable_TxsdGlesPipelineSettingsChoiceLineSmoothEnable_ instance.
func (me *XsdGoPkgHasElem_line_smooth_enablechoicegles_pipeline_settingsschema_LineSmoothEnable_TxsdGlesPipelineSettingsChoiceLineSmoothEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_line_smooth_enablechoicegles_pipeline_settingsschema_LineSmoothEnable_TxsdGlesPipelineSettingsChoiceLineSmoothEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LineSmoothEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasGroup_GlesPipelineSettings struct {
	XsdGoPkgHasElem_depth_test_enablechoicegles_pipeline_settingsschema_DepthTestEnable_TxsdGlesPipelineSettingsChoiceDepthTestEnable_

	XsdGoPkgHasElem_fog_modechoicegles_pipeline_settingsschema_FogMode_TxsdGlesPipelineSettingsChoiceFogMode_

	XsdGoPkgHasElem_light_linear_attenutationchoicegles_pipeline_settingsschema_LightLinearAttenutation_TxsdGlesPipelineSettingsChoiceLightLinearAttenutation_

	XsdGoPkgHasElem_depth_funcchoicegles_pipeline_settingsschema_DepthFunc_TxsdGlesPipelineSettingsChoiceDepthFunc_

	XsdGoPkgHasElem_fog_endchoicegles_pipeline_settingsschema_FogEnd_TxsdGlesPipelineSettingsChoiceFogEnd_

	XsdGoPkgHasElem_material_shininesschoicegles_pipeline_settingsschema_MaterialShininess_TxsdGlesPipelineSettingsChoiceMaterialShininess_

	XsdGoPkgHasElem_clip_plane_enablechoicegles_pipeline_settingsschema_ClipPlaneEnable_TxsdGlesPipelineSettingsChoiceClipPlaneEnable_

	XsdGoPkgHasElem_dither_enablechoicegles_pipeline_settingsschema_DitherEnable_TxsdGlesPipelineSettingsChoiceDitherEnable_

	XsdGoPkgHasElem_light_specularchoicegles_pipeline_settingsschema_LightSpecular_TxsdGlesPipelineSettingsChoiceLightSpecular_

	XsdGoPkgHasElem_point_fade_threshold_sizechoicegles_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlesPipelineSettingsChoicePointFadeThresholdSize_

	XsdGoPkgHasElem_clear_colorchoicegles_pipeline_settingsschema_ClearColor_TxsdGlesPipelineSettingsChoiceClearColor_

	XsdGoPkgHasElem_cull_face_enablechoicegles_pipeline_settingsschema_CullFaceEnable_TxsdGlesPipelineSettingsChoiceCullFaceEnable_

	XsdGoPkgHasElem_light_model_two_side_enablechoicegles_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlesPipelineSettingsChoiceLightModelTwoSideEnable_

	XsdGoPkgHasElem_line_widthchoicegles_pipeline_settingsschema_LineWidth_TxsdGlesPipelineSettingsChoiceLineWidth_

	XsdGoPkgHasElem_blend_enablechoicegles_pipeline_settingsschema_BlendEnable_TxsdGlesPipelineSettingsChoiceBlendEnable_

	XsdGoPkgHasElem_point_sizechoicegles_pipeline_settingsschema_PointSize_TxsdGlesPipelineSettingsChoicePointSize_

	XsdGoPkgHasElem_projection_matrixchoicegles_pipeline_settingsschema_ProjectionMatrix_TxsdGlesPipelineSettingsChoiceProjectionMatrix_

	XsdGoPkgHasElem_sample_coverage_enablechoicegles_pipeline_settingsschema_SampleCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleCoverageEnable_

	XsdGoPkgHasElem_light_spot_exponentchoicegles_pipeline_settingsschema_LightSpotExponent_TxsdGlesPipelineSettingsChoiceLightSpotExponent_

	XsdGoPkgHasElem_light_quadratic_attenuationchoicegles_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlesPipelineSettingsChoiceLightQuadraticAttenuation_

	XsdGoPkgHasElem_material_ambientchoicegles_pipeline_settingsschema_MaterialAmbient_TxsdGlesPipelineSettingsChoiceMaterialAmbient_

	XsdGoPkgHasElem_stencil_maskchoicegles_pipeline_settingsschema_StencilMask_TxsdGlesPipelineSettingsChoiceStencilMask_

	XsdGoPkgHasElem_material_diffusechoicegles_pipeline_settingsschema_MaterialDiffuse_TxsdGlesPipelineSettingsChoiceMaterialDiffuse_

	XsdGoPkgHasElem_light_model_ambientchoicegles_pipeline_settingsschema_LightModelAmbient_TxsdGlesPipelineSettingsChoiceLightModelAmbient_

	XsdGoPkgHasElem_color_maskchoicegles_pipeline_settingsschema_ColorMask_TxsdGlesPipelineSettingsChoiceColorMask_

	XsdGoPkgHasElem_fog_densitychoicegles_pipeline_settingsschema_FogDensity_TxsdGlesPipelineSettingsChoiceFogDensity_

	XsdGoPkgHasElem_light_positionchoicegles_pipeline_settingsschema_LightPosition_TxsdGlesPipelineSettingsChoiceLightPosition_

	XsdGoPkgHasElem_stencil_opchoicegles_pipeline_settingsschema_StencilOp_TxsdGlesPipelineSettingsChoiceStencilOp_

	XsdGoPkgHasElem_fog_colorchoicegles_pipeline_settingsschema_FogColor_TxsdGlesPipelineSettingsChoiceFogColor_

	XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlesPipelineSettingsChoicePolygonOffsetFillEnable_

	XsdGoPkgHasElem_light_enablechoicegles_pipeline_settingsschema_LightEnable_TxsdGlesPipelineSettingsChoiceLightEnable_

	XsdGoPkgHasElem_light_constant_attenuationchoicegles_pipeline_settingsschema_LightConstantAttenuation_TxsdGlesPipelineSettingsChoiceLightConstantAttenuation_

	XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegles_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToOneEnable_

	XsdGoPkgHasElem_clip_planechoicegles_pipeline_settingsschema_ClipPlane_TxsdGlesPipelineSettingsChoiceClipPlane_

	XsdGoPkgHasElem_fog_startchoicegles_pipeline_settingsschema_FogStart_TxsdGlesPipelineSettingsChoiceFogStart_

	XsdGoPkgHasElem_light_spot_cutoffchoicegles_pipeline_settingsschema_LightSpotCutoff_TxsdGlesPipelineSettingsChoiceLightSpotCutoff_

	XsdGoPkgHasElem_light_spot_directionchoicegles_pipeline_settingsschema_LightSpotDirection_TxsdGlesPipelineSettingsChoiceLightSpotDirection_

	XsdGoPkgHasElem_material_specularchoicegles_pipeline_settingsschema_MaterialSpecular_TxsdGlesPipelineSettingsChoiceMaterialSpecular_

	XsdGoPkgHasElem_material_emissionchoicegles_pipeline_settingsschema_MaterialEmission_TxsdGlesPipelineSettingsChoiceMaterialEmission_

	XsdGoPkgHasElem_shade_modelchoicegles_pipeline_settingsschema_ShadeModel_TxsdGlesPipelineSettingsChoiceShadeModel_

	XsdGoPkgHasElem_alpha_funcchoicegles_pipeline_settingsschema_AlphaFunc_TxsdGlesPipelineSettingsChoiceAlphaFunc_

	XsdGoPkgHasElem_light_ambientchoicegles_pipeline_settingsschema_LightAmbient_TxsdGlesPipelineSettingsChoiceLightAmbient_

	XsdGoPkgHasElem_lighting_enablechoicegles_pipeline_settingsschema_LightingEnable_TxsdGlesPipelineSettingsChoiceLightingEnable_

	XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToCoverageEnable_

	XsdGoPkgHasElem_depth_maskchoicegles_pipeline_settingsschema_DepthMask_TxsdGlesPipelineSettingsChoiceDepthMask_

	XsdGoPkgHasElem_alpha_test_enablechoicegles_pipeline_settingsschema_AlphaTestEnable_TxsdGlesPipelineSettingsChoiceAlphaTestEnable_

	XsdGoPkgHasElem_stencil_test_enablechoicegles_pipeline_settingsschema_StencilTestEnable_TxsdGlesPipelineSettingsChoiceStencilTestEnable_

	XsdGoPkgHasElem_normalize_enablechoicegles_pipeline_settingsschema_NormalizeEnable_TxsdGlesPipelineSettingsChoiceNormalizeEnable_

	XsdGoPkgHasElem_blend_funcchoicegles_pipeline_settingsschema_BlendFunc_TxsdGlesPipelineSettingsChoiceBlendFunc_

	XsdGoPkgHasElem_fog_enablechoicegles_pipeline_settingsschema_FogEnable_TxsdGlesPipelineSettingsChoiceFogEnable_

	XsdGoPkgHasElem_scissor_test_enablechoicegles_pipeline_settingsschema_ScissorTestEnable_TxsdGlesPipelineSettingsChoiceScissorTestEnable_

	XsdGoPkgHasElem_line_smooth_enablechoicegles_pipeline_settingsschema_LineSmoothEnable_TxsdGlesPipelineSettingsChoiceLineSmoothEnable_

	XsdGoPkgHasElem_clear_stencilchoicegles_pipeline_settingsschema_ClearStencil_TxsdGlesPipelineSettingsChoiceClearStencil_

	XsdGoPkgHasElem_texture_pipeline_enablechoicegles_pipeline_settingsschema_TexturePipelineEnable_TxsdGlesPipelineSettingsChoiceTexturePipelineEnable_

	XsdGoPkgHasElem_clear_depthchoicegles_pipeline_settingsschema_ClearDepth_TxsdGlesPipelineSettingsChoiceClearDepth_

	XsdGoPkgHasElem_depth_rangechoicegles_pipeline_settingsschema_DepthRange_TxsdGlesPipelineSettingsChoiceDepthRange_

	XsdGoPkgHasElem_point_size_minchoicegles_pipeline_settingsschema_PointSizeMin_TxsdGlesPipelineSettingsChoicePointSizeMin_

	XsdGoPkgHasElem_polygon_offsetchoicegles_pipeline_settingsschema_PolygonOffset_TxsdGlesPipelineSettingsChoicePolygonOffset_

	XsdGoPkgHasElem_point_smooth_enablechoicegles_pipeline_settingsschema_PointSmoothEnable_TxsdGlesPipelineSettingsChoicePointSmoothEnable_

	XsdGoPkgHasElem_logic_opchoicegles_pipeline_settingsschema_LogicOp_TxsdGlesPipelineSettingsChoiceLogicOp_

	XsdGoPkgHasElem_color_material_enablechoicegles_pipeline_settingsschema_ColorMaterialEnable_TxsdGlesPipelineSettingsChoiceColorMaterialEnable_

	XsdGoPkgHasElem_model_view_matrixchoicegles_pipeline_settingsschema_ModelViewMatrix_TxsdGlesPipelineSettingsChoiceModelViewMatrix_

	XsdGoPkgHasElem_color_logic_op_enablechoicegles_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlesPipelineSettingsChoiceColorLogicOpEnable_

	XsdGoPkgHasElem_rescale_normal_enablechoicegles_pipeline_settingsschema_RescaleNormalEnable_TxsdGlesPipelineSettingsChoiceRescaleNormalEnable_

	XsdGoPkgHasElem_point_distance_attenuationchoicegles_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlesPipelineSettingsChoicePointDistanceAttenuation_

	XsdGoPkgHasElem_texture_pipelinechoicegles_pipeline_settingsschema_TexturePipeline_TxsdGlesPipelineSettingsChoiceTexturePipeline_

	XsdGoPkgHasElem_stencil_funcchoicegles_pipeline_settingsschema_StencilFunc_TxsdGlesPipelineSettingsChoiceStencilFunc_

	XsdGoPkgHasElem_light_diffusechoicegles_pipeline_settingsschema_LightDiffuse_TxsdGlesPipelineSettingsChoiceLightDiffuse_

	XsdGoPkgHasElem_front_facechoicegles_pipeline_settingsschema_FrontFace_TxsdGlesPipelineSettingsChoiceFrontFace_

	XsdGoPkgHasElem_scissorchoicegles_pipeline_settingsschema_Scissor_TxsdGlesPipelineSettingsChoiceScissor_

	XsdGoPkgHasElem_multisample_enablechoicegles_pipeline_settingsschema_MultisampleEnable_TxsdGlesPipelineSettingsChoiceMultisampleEnable_

	XsdGoPkgHasElem_cull_facechoicegles_pipeline_settingsschema_CullFace_TxsdGlesPipelineSettingsChoiceCullFace_

	XsdGoPkgHasElem_point_size_maxchoicegles_pipeline_settingsschema_PointSizeMax_TxsdGlesPipelineSettingsChoicePointSizeMax_
}

//	If the WalkHandlers.XsdGoPkgHasGroup_GlesPipelineSettings function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_GlesPipelineSettings instance as the single argument. Then calls the Walk() method on 73/73 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_GlesPipelineSettings instance.
func (me *XsdGoPkgHasGroup_GlesPipelineSettings) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasGroup_GlesPipelineSettings; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_multisample_enablechoicegles_pipeline_settingsschema_MultisampleEnable_TxsdGlesPipelineSettingsChoiceMultisampleEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_cull_facechoicegles_pipeline_settingsschema_CullFace_TxsdGlesPipelineSettingsChoiceCullFace_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_point_size_maxchoicegles_pipeline_settingsschema_PointSizeMax_TxsdGlesPipelineSettingsChoicePointSizeMax_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_depth_test_enablechoicegles_pipeline_settingsschema_DepthTestEnable_TxsdGlesPipelineSettingsChoiceDepthTestEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fog_modechoicegles_pipeline_settingsschema_FogMode_TxsdGlesPipelineSettingsChoiceFogMode_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_linear_attenutationchoicegles_pipeline_settingsschema_LightLinearAttenutation_TxsdGlesPipelineSettingsChoiceLightLinearAttenutation_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_depth_funcchoicegles_pipeline_settingsschema_DepthFunc_TxsdGlesPipelineSettingsChoiceDepthFunc_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fog_endchoicegles_pipeline_settingsschema_FogEnd_TxsdGlesPipelineSettingsChoiceFogEnd_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_material_shininesschoicegles_pipeline_settingsschema_MaterialShininess_TxsdGlesPipelineSettingsChoiceMaterialShininess_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_clip_plane_enablechoicegles_pipeline_settingsschema_ClipPlaneEnable_TxsdGlesPipelineSettingsChoiceClipPlaneEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_dither_enablechoicegles_pipeline_settingsschema_DitherEnable_TxsdGlesPipelineSettingsChoiceDitherEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_specularchoicegles_pipeline_settingsschema_LightSpecular_TxsdGlesPipelineSettingsChoiceLightSpecular_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_point_fade_threshold_sizechoicegles_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlesPipelineSettingsChoicePointFadeThresholdSize_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_clear_colorchoicegles_pipeline_settingsschema_ClearColor_TxsdGlesPipelineSettingsChoiceClearColor_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_cull_face_enablechoicegles_pipeline_settingsschema_CullFaceEnable_TxsdGlesPipelineSettingsChoiceCullFaceEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_model_two_side_enablechoicegles_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlesPipelineSettingsChoiceLightModelTwoSideEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_line_widthchoicegles_pipeline_settingsschema_LineWidth_TxsdGlesPipelineSettingsChoiceLineWidth_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_blend_enablechoicegles_pipeline_settingsschema_BlendEnable_TxsdGlesPipelineSettingsChoiceBlendEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_point_sizechoicegles_pipeline_settingsschema_PointSize_TxsdGlesPipelineSettingsChoicePointSize_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_projection_matrixchoicegles_pipeline_settingsschema_ProjectionMatrix_TxsdGlesPipelineSettingsChoiceProjectionMatrix_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sample_coverage_enablechoicegles_pipeline_settingsschema_SampleCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleCoverageEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_spot_exponentchoicegles_pipeline_settingsschema_LightSpotExponent_TxsdGlesPipelineSettingsChoiceLightSpotExponent_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_quadratic_attenuationchoicegles_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlesPipelineSettingsChoiceLightQuadraticAttenuation_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_material_ambientchoicegles_pipeline_settingsschema_MaterialAmbient_TxsdGlesPipelineSettingsChoiceMaterialAmbient_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stencil_maskchoicegles_pipeline_settingsschema_StencilMask_TxsdGlesPipelineSettingsChoiceStencilMask_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_material_diffusechoicegles_pipeline_settingsschema_MaterialDiffuse_TxsdGlesPipelineSettingsChoiceMaterialDiffuse_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_model_ambientchoicegles_pipeline_settingsschema_LightModelAmbient_TxsdGlesPipelineSettingsChoiceLightModelAmbient_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_color_maskchoicegles_pipeline_settingsschema_ColorMask_TxsdGlesPipelineSettingsChoiceColorMask_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fog_densitychoicegles_pipeline_settingsschema_FogDensity_TxsdGlesPipelineSettingsChoiceFogDensity_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_positionchoicegles_pipeline_settingsschema_LightPosition_TxsdGlesPipelineSettingsChoiceLightPosition_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stencil_opchoicegles_pipeline_settingsschema_StencilOp_TxsdGlesPipelineSettingsChoiceStencilOp_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fog_colorchoicegles_pipeline_settingsschema_FogColor_TxsdGlesPipelineSettingsChoiceFogColor_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlesPipelineSettingsChoicePolygonOffsetFillEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_enablechoicegles_pipeline_settingsschema_LightEnable_TxsdGlesPipelineSettingsChoiceLightEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_constant_attenuationchoicegles_pipeline_settingsschema_LightConstantAttenuation_TxsdGlesPipelineSettingsChoiceLightConstantAttenuation_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegles_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToOneEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_clip_planechoicegles_pipeline_settingsschema_ClipPlane_TxsdGlesPipelineSettingsChoiceClipPlane_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fog_startchoicegles_pipeline_settingsschema_FogStart_TxsdGlesPipelineSettingsChoiceFogStart_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_spot_cutoffchoicegles_pipeline_settingsschema_LightSpotCutoff_TxsdGlesPipelineSettingsChoiceLightSpotCutoff_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_spot_directionchoicegles_pipeline_settingsschema_LightSpotDirection_TxsdGlesPipelineSettingsChoiceLightSpotDirection_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_material_specularchoicegles_pipeline_settingsschema_MaterialSpecular_TxsdGlesPipelineSettingsChoiceMaterialSpecular_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_material_emissionchoicegles_pipeline_settingsschema_MaterialEmission_TxsdGlesPipelineSettingsChoiceMaterialEmission_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_shade_modelchoicegles_pipeline_settingsschema_ShadeModel_TxsdGlesPipelineSettingsChoiceShadeModel_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_alpha_funcchoicegles_pipeline_settingsschema_AlphaFunc_TxsdGlesPipelineSettingsChoiceAlphaFunc_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_ambientchoicegles_pipeline_settingsschema_LightAmbient_TxsdGlesPipelineSettingsChoiceLightAmbient_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_lighting_enablechoicegles_pipeline_settingsschema_LightingEnable_TxsdGlesPipelineSettingsChoiceLightingEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToCoverageEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_depth_maskchoicegles_pipeline_settingsschema_DepthMask_TxsdGlesPipelineSettingsChoiceDepthMask_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_alpha_test_enablechoicegles_pipeline_settingsschema_AlphaTestEnable_TxsdGlesPipelineSettingsChoiceAlphaTestEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stencil_test_enablechoicegles_pipeline_settingsschema_StencilTestEnable_TxsdGlesPipelineSettingsChoiceStencilTestEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_normalize_enablechoicegles_pipeline_settingsschema_NormalizeEnable_TxsdGlesPipelineSettingsChoiceNormalizeEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_blend_funcchoicegles_pipeline_settingsschema_BlendFunc_TxsdGlesPipelineSettingsChoiceBlendFunc_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fog_enablechoicegles_pipeline_settingsschema_FogEnable_TxsdGlesPipelineSettingsChoiceFogEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_scissor_test_enablechoicegles_pipeline_settingsschema_ScissorTestEnable_TxsdGlesPipelineSettingsChoiceScissorTestEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_line_smooth_enablechoicegles_pipeline_settingsschema_LineSmoothEnable_TxsdGlesPipelineSettingsChoiceLineSmoothEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_clear_stencilchoicegles_pipeline_settingsschema_ClearStencil_TxsdGlesPipelineSettingsChoiceClearStencil_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_texture_pipeline_enablechoicegles_pipeline_settingsschema_TexturePipelineEnable_TxsdGlesPipelineSettingsChoiceTexturePipelineEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_clear_depthchoicegles_pipeline_settingsschema_ClearDepth_TxsdGlesPipelineSettingsChoiceClearDepth_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_depth_rangechoicegles_pipeline_settingsschema_DepthRange_TxsdGlesPipelineSettingsChoiceDepthRange_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_point_size_minchoicegles_pipeline_settingsschema_PointSizeMin_TxsdGlesPipelineSettingsChoicePointSizeMin_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_polygon_offsetchoicegles_pipeline_settingsschema_PolygonOffset_TxsdGlesPipelineSettingsChoicePolygonOffset_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_point_smooth_enablechoicegles_pipeline_settingsschema_PointSmoothEnable_TxsdGlesPipelineSettingsChoicePointSmoothEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_logic_opchoicegles_pipeline_settingsschema_LogicOp_TxsdGlesPipelineSettingsChoiceLogicOp_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_color_material_enablechoicegles_pipeline_settingsschema_ColorMaterialEnable_TxsdGlesPipelineSettingsChoiceColorMaterialEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_model_view_matrixchoicegles_pipeline_settingsschema_ModelViewMatrix_TxsdGlesPipelineSettingsChoiceModelViewMatrix_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_color_logic_op_enablechoicegles_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlesPipelineSettingsChoiceColorLogicOpEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_rescale_normal_enablechoicegles_pipeline_settingsschema_RescaleNormalEnable_TxsdGlesPipelineSettingsChoiceRescaleNormalEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_point_distance_attenuationchoicegles_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlesPipelineSettingsChoicePointDistanceAttenuation_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_texture_pipelinechoicegles_pipeline_settingsschema_TexturePipeline_TxsdGlesPipelineSettingsChoiceTexturePipeline_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stencil_funcchoicegles_pipeline_settingsschema_StencilFunc_TxsdGlesPipelineSettingsChoiceStencilFunc_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_diffusechoicegles_pipeline_settingsschema_LightDiffuse_TxsdGlesPipelineSettingsChoiceLightDiffuse_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_front_facechoicegles_pipeline_settingsschema_FrontFace_TxsdGlesPipelineSettingsChoiceFrontFace_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_scissorchoicegles_pipeline_settingsschema_Scissor_TxsdGlesPipelineSettingsChoiceScissor_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_depth_clearsequencepasssequencetechniquesequenceprofile_GLESschema_DepthClear_Tfloat_ struct {
	DepthClear Tfloat `xml:"http://www.collada.org/2005/11/COLLADASchema depth_clear"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_depth_clearsequencepasssequencetechniquesequenceprofile_GLESschema_DepthClear_Tfloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_clearsequencepasssequencetechniquesequenceprofile_GLESschema_DepthClear_Tfloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_depth_clearsequencepasssequencetechniquesequenceprofile_GLESschema_DepthClear_Tfloat_ instance.
func (me *XsdGoPkgHasElem_depth_clearsequencepasssequencetechniquesequenceprofile_GLESschema_DepthClear_Tfloat_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_depth_clearsequencepasssequencetechniquesequenceprofile_GLESschema_DepthClear_Tfloat_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_stencil_clearsequencepasssequencetechniquesequenceprofile_GLESschema_StencilClear_XsdtByte_ struct {
	StencilClear xsdt.Byte `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_clear"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_stencil_clearsequencepasssequencetechniquesequenceprofile_GLESschema_StencilClear_XsdtByte_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_clearsequencepasssequencetechniquesequenceprofile_GLESschema_StencilClear_XsdtByte_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_stencil_clearsequencepasssequencetechniquesequenceprofile_GLESschema_StencilClear_XsdtByte_ instance.
func (me *XsdGoPkgHasElem_stencil_clearsequencepasssequencetechniquesequenceprofile_GLESschema_StencilClear_XsdtByte_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_stencil_clearsequencepasssequencetechniquesequenceprofile_GLESschema_StencilClear_XsdtByte_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_color_clearsequencepasssequencetechniquesequenceprofile_GLESschema_ColorClear_TfxColorCommon_ struct {
	ColorClear TfxColorCommon `xml:"http://www.collada.org/2005/11/COLLADASchema color_clear"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_color_clearsequencepasssequencetechniquesequenceprofile_GLESschema_ColorClear_TfxColorCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_color_clearsequencepasssequencetechniquesequenceprofile_GLESschema_ColorClear_TfxColorCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_color_clearsequencepasssequencetechniquesequenceprofile_GLESschema_ColorClear_TfxColorCommon_ instance.
func (me *XsdGoPkgHasElem_color_clearsequencepasssequencetechniquesequenceprofile_GLESschema_ColorClear_TfxColorCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_color_clearsequencepasssequencetechniquesequenceprofile_GLESschema_ColorClear_TfxColorCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_depth_targetsequencepasssequencetechniquesequenceprofile_GLESschema_DepthTarget_TglesRendertargetCommon_ struct {
	DepthTarget TglesRendertargetCommon `xml:"http://www.collada.org/2005/11/COLLADASchema depth_target"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_depth_targetsequencepasssequencetechniquesequenceprofile_GLESschema_DepthTarget_TglesRendertargetCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_targetsequencepasssequencetechniquesequenceprofile_GLESschema_DepthTarget_TglesRendertargetCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_depth_targetsequencepasssequencetechniquesequenceprofile_GLESschema_DepthTarget_TglesRendertargetCommon_ instance.
func (me *XsdGoPkgHasElem_depth_targetsequencepasssequencetechniquesequenceprofile_GLESschema_DepthTarget_TglesRendertargetCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_depth_targetsequencepasssequencetechniquesequenceprofile_GLESschema_DepthTarget_TglesRendertargetCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProfileGlesSequenceTechniqueSequencePass struct {
	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLESschema_Draw_TfxDrawCommon_

	XsdGoPkgHasElem_color_targetsequencepasssequencetechniquesequenceprofile_GLESschema_ColorTarget_TglesRendertargetCommon_

	XsdGoPkgHasElem_stencil_targetsequencepasssequencetechniquesequenceprofile_GLESschema_StencilTarget_TglesRendertargetCommon_

	XsdGoPkgHasGroup_GlesPipelineSettings

	XsdGoPkgHasElem_depth_clearsequencepasssequencetechniquesequenceprofile_GLESschema_DepthClear_Tfloat_

	XsdGoPkgHasElem_stencil_clearsequencepasssequencetechniquesequenceprofile_GLESschema_StencilClear_XsdtByte_

	XsdGoPkgHasElem_color_clearsequencepasssequencetechniquesequenceprofile_GLESschema_ColorClear_TfxColorCommon_

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

	XsdGoPkgHasElem_depth_targetsequencepasssequencetechniquesequenceprofile_GLESschema_DepthTarget_TglesRendertargetCommon_
}

//	If the WalkHandlers.TxsdProfileGlesSequenceTechniqueSequencePass function is not nil (ie. was set by outside code), calls it with this TxsdProfileGlesSequenceTechniqueSequencePass instance as the single argument. Then calls the Walk() method on 10/11 embed(s) and 0/0 field(s) belonging to this TxsdProfileGlesSequenceTechniqueSequencePass instance.
func (me *TxsdProfileGlesSequenceTechniqueSequencePass) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileGlesSequenceTechniqueSequencePass; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_color_targetsequencepasssequencetechniquesequenceprofile_GLESschema_ColorTarget_TglesRendertargetCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stencil_targetsequencepasssequencetechniquesequenceprofile_GLESschema_StencilTarget_TglesRendertargetCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroup_GlesPipelineSettings.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_depth_clearsequencepasssequencetechniquesequenceprofile_GLESschema_DepthClear_Tfloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stencil_clearsequencepasssequencetechniquesequenceprofile_GLESschema_StencilClear_XsdtByte_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_color_clearsequencepasssequencetechniquesequenceprofile_GLESschema_ColorClear_TfxColorCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_depth_targetsequencepasssequencetechniquesequenceprofile_GLESschema_DepthTarget_TglesRendertargetCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLESschema_Draw_TfxDrawCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLESschema_Pass_TxsdProfileGlesSequenceTechniqueSequencePass_ struct {
	//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
	Passes []*TxsdProfileGlesSequenceTechniqueSequencePass `xml:"http://www.collada.org/2005/11/COLLADASchema pass"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLESschema_Pass_TxsdProfileGlesSequenceTechniqueSequencePass_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLESschema_Pass_TxsdProfileGlesSequenceTechniqueSequencePass_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLESschema_Pass_TxsdProfileGlesSequenceTechniqueSequencePass_ instance.
func (me *XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLESschema_Pass_TxsdProfileGlesSequenceTechniqueSequencePass_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLESschema_Pass_TxsdProfileGlesSequenceTechniqueSequencePass_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Passes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProfileGlesSequenceTechnique struct {
	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

	XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLESschema_Setparam_TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam_

	XsdGoPkgHasElem_Asset

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
	XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLESschema_Pass_TxsdProfileGlesSequenceTechniqueSequencePass_

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElems_newparamchoicesequenceprofile_GLESschema_Newparam_TglesNewparam_

	XsdGoPkgHasElems_Image
}

//	If the WalkHandlers.TxsdProfileGlesSequenceTechnique function is not nil (ie. was set by outside code), calls it with this TxsdProfileGlesSequenceTechnique instance as the single argument. Then calls the Walk() method on 7/9 embed(s) and 0/0 field(s) belonging to this TxsdProfileGlesSequenceTechnique instance.
func (me *TxsdProfileGlesSequenceTechnique) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileGlesSequenceTechnique; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLESschema_Setparam_TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLESschema_Pass_TxsdProfileGlesSequenceTechniqueSequencePass_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_newparamchoicesequenceprofile_GLESschema_Newparam_TglesNewparam_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Image.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_techniquesequenceprofile_GLESschema_Technique_TxsdProfileGlesSequenceTechnique_ struct {
	//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
	Techniques []*TxsdProfileGlesSequenceTechnique `xml:"http://www.collada.org/2005/11/COLLADASchema technique"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_techniquesequenceprofile_GLESschema_Technique_TxsdProfileGlesSequenceTechnique_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_techniquesequenceprofile_GLESschema_Technique_TxsdProfileGlesSequenceTechnique_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_techniquesequenceprofile_GLESschema_Technique_TxsdProfileGlesSequenceTechnique_ instance.
func (me *XsdGoPkgHasElems_techniquesequenceprofile_GLESschema_Technique_TxsdProfileGlesSequenceTechnique_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_techniquesequenceprofile_GLESschema_Technique_TxsdProfileGlesSequenceTechnique_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Techniques {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The type of platform. This is a vendor-defined character string that indicates the platform or capability target for the technique. Optional
type XsdGoPkgHasAttr_Platform_XsdtNCName_Pc struct {
	//	The type of platform. This is a vendor-defined character string that indicates the platform or capability target for the technique. Optional
	Platform xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema platform,attr"`
}

//	Returns the default value for Platform -- "PC"
func (me XsdGoPkgHasAttr_Platform_XsdtNCName_Pc) PlatformDefault() xsdt.NCName {
	return xsdt.NCName("PC")
}

type TxsdProfileGles struct {
	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElems_Image

	XsdGoPkgHasElems_newparamchoicesequenceprofile_GLESschema_Newparam_TglesNewparam_

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
	XsdGoPkgHasElems_techniquesequenceprofile_GLESschema_Technique_TxsdProfileGlesSequenceTechnique_

	//	The type of platform. This is a vendor-defined character string that indicates the platform or capability target for the technique. Optional
	XsdGoPkgHasAttr_Platform_XsdtNCName_Pc

	XsdGoPkgHasElem_Asset
}

//	If the WalkHandlers.TxsdProfileGles function is not nil (ie. was set by outside code), calls it with this TxsdProfileGles instance as the single argument. Then calls the Walk() method on 5/7 embed(s) and 0/0 field(s) belonging to this TxsdProfileGles instance.
func (me *TxsdProfileGles) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileGles; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_newparamchoicesequenceprofile_GLESschema_Newparam_TglesNewparam_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_techniquesequenceprofile_GLESschema_Technique_TxsdProfileGlesSequenceTechnique_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Image.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ProfileGles struct {
	//	Opens a block of GLES platform-specific data types and technique declarations.
	ProfileGleses []*TxsdProfileGles `xml:"http://www.collada.org/2005/11/COLLADASchema profile_GLES"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ProfileGles function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ProfileGles instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ProfileGles instance.
func (me *XsdGoPkgHasElems_ProfileGles) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ProfileGles; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ProfileGleses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Opens a block of GLSL platform-specific data types and technique declarations.
type TglslIdentifier xsdt.Token

//	This convenience method just performs a simple type conversion to TglslIdentifier's alias type xsdt.Token.
func (me TglslIdentifier) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Since TglslIdentifier is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslIdentifier) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Since TglslIdentifier is just a simple String type, this merely returns the current string value.
func (me TglslIdentifier) String() string { return xsdt.Token(me).String() }

type XsdGoPkgHasAttr_Sid_TglslIdentifier_ struct {
	Sid TglslIdentifier `xml:"http://www.collada.org/2005/11/COLLADASchema sid,attr"`
}

//	The glsl_newarray_type is used to creates a parameter of a one-dimensional array type.
//	You may recursively nest glsl_newarray elements to create multidimensional arrays.
type XsdGoPkgHasElems_arraychoiceglsl_newarray_typeschema_Array_TglslNewarrayType_ struct {
	//	You may recursively nest glsl_newarray elements to create multidimensional arrays.
	Arrays []*TglslNewarrayType `xml:"http://www.collada.org/2005/11/COLLADASchema array"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_arraychoiceglsl_newarray_typeschema_Array_TglslNewarrayType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_arraychoiceglsl_newarray_typeschema_Array_TglslNewarrayType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_arraychoiceglsl_newarray_typeschema_Array_TglslNewarrayType_ instance.
func (me *XsdGoPkgHasElems_arraychoiceglsl_newarray_typeschema_Array_TglslNewarrayType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_arraychoiceglsl_newarray_typeschema_Array_TglslNewarrayType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A group that specifies the allowable types for GLSL profile parameters.
//	A depth texture sampler for the GLSL profile.
type TglSamplerDEPTH struct {
	TfxSamplerDEPTHCommon
}

//	If the WalkHandlers.TglSamplerDEPTH function is not nil (ie. was set by outside code), calls it with this TglSamplerDEPTH instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TglSamplerDEPTH instance.
func (me *TglSamplerDEPTH) Walk() (err error) {
	if fn := WalkHandlers.TglSamplerDEPTH; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TfxSamplerDEPTHCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_samplerDEPTHchoiceglsl_param_typeschema_SamplerDEPTH_TglSamplerDEPTH_ struct {
	SamplerDEPTH *TglSamplerDEPTH `xml:"http://www.collada.org/2005/11/COLLADASchema samplerDEPTH"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_samplerDEPTHchoiceglsl_param_typeschema_SamplerDEPTH_TglSamplerDEPTH_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_samplerDEPTHchoiceglsl_param_typeschema_SamplerDEPTH_TglSamplerDEPTH_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_samplerDEPTHchoiceglsl_param_typeschema_SamplerDEPTH_TglSamplerDEPTH_ instance.
func (me *XsdGoPkgHasElem_samplerDEPTHchoiceglsl_param_typeschema_SamplerDEPTH_TglSamplerDEPTH_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_samplerDEPTHchoiceglsl_param_typeschema_SamplerDEPTH_TglSamplerDEPTH_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SamplerDEPTH.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglslFloat xsdt.Float

//	Since TglslFloat is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TglslFloat) Set(s string) { (*xsdt.Float)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TglslFloat's alias type xsdt.Float.
func (me TglslFloat) ToXsdtFloat() xsdt.Float { return xsdt.Float(me) }

//	Returns a string representation of this TglslFloat's current non-string scalar value.
func (me TglslFloat) String() string { return xsdt.Float(me).String() }

type TglslListOfFloat xsdt.String

//	This convenience method just performs a simple type conversion to TglslListOfFloat's alias type xsdt.String.
func (me TglslListOfFloat) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TglslListOfFloat is just a simple String type, this merely returns the current string value.
func (me TglslListOfFloat) String() string { return xsdt.String(me).String() }

//	Since TglslListOfFloat is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslListOfFloat) Set(s string) { (*xsdt.String)(me).Set(s) }

//	TglslListOfFloat declares a String containing a whitespace-separated list of TglslFloat values. This Values() method creates and returns a slice of all elements in that list.
func (me TglslListOfFloat) Values() (list []TglslFloat) {
	svals := xsdt.ListValues(string(me))
	list = make([]TglslFloat, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	TglslListOfFloat declares a String containing a whitespace-separated list of TglslFloat values. This Values() method creates and returns a slice of all elements in that list, typed as xsdt.Float.
func (me TglslListOfFloat) ValuesXsdtFloat() (list []xsdt.Float) {
	svals := xsdt.ListValues(string(me))
	list = make([]xsdt.Float, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

type TglslFloat3 TglslListOfFloat

//	Since TglslFloat3 is just a simple String type, this merely returns the current string value.
func (me TglslFloat3) String() string { return TglslListOfFloat(me).String() }

//	Since TglslFloat3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslFloat3) Set(s string) { (*TglslListOfFloat)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TglslFloat3's alias type TglslListOfFloat.
func (me TglslFloat3) ToTglslListOfFloat() TglslListOfFloat { return TglslListOfFloat(me) }

type XsdGoPkgHasElem_float3choiceglsl_param_typeschema_Float3_TglslFloat3_ struct {
	Float3 TglslFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema float3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float3choiceglsl_param_typeschema_Float3_TglslFloat3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float3choiceglsl_param_typeschema_Float3_TglslFloat3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float3choiceglsl_param_typeschema_Float3_TglslFloat3_ instance.
func (me *XsdGoPkgHasElem_float3choiceglsl_param_typeschema_Float3_TglslFloat3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float3choiceglsl_param_typeschema_Float3_TglslFloat3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglslInt xsdt.Int

//	Since TglslInt is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TglslInt) Set(s string) { (*xsdt.Int)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TglslInt's alias type xsdt.Int.
func (me TglslInt) ToXsdtInt() xsdt.Int { return xsdt.Int(me) }

//	Returns a string representation of this TglslInt's current non-string scalar value.
func (me TglslInt) String() string { return xsdt.Int(me).String() }

type TglslListOfInt xsdt.String

//	Since TglslListOfInt is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslListOfInt) Set(s string) { (*xsdt.String)(me).Set(s) }

//	TglslListOfInt declares a String containing a whitespace-separated list of TglslInt values. This Values() method creates and returns a slice of all elements in that list, typed as xsdt.Int.
func (me TglslListOfInt) ValuesXsdtInt() (list []xsdt.Int) {
	svals := xsdt.ListValues(string(me))
	list = make([]xsdt.Int, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	TglslListOfInt declares a String containing a whitespace-separated list of TglslInt values. This Values() method creates and returns a slice of all elements in that list.
func (me TglslListOfInt) Values() (list []TglslInt) {
	svals := xsdt.ListValues(string(me))
	list = make([]TglslInt, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	This convenience method just performs a simple type conversion to TglslListOfInt's alias type xsdt.String.
func (me TglslListOfInt) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TglslListOfInt is just a simple String type, this merely returns the current string value.
func (me TglslListOfInt) String() string { return xsdt.String(me).String() }

type TglslInt2 TglslListOfInt

//	This convenience method just performs a simple type conversion to TglslInt2's alias type TglslListOfInt.
func (me TglslInt2) ToTglslListOfInt() TglslListOfInt { return TglslListOfInt(me) }

//	Since TglslInt2 is just a simple String type, this merely returns the current string value.
func (me TglslInt2) String() string { return TglslListOfInt(me).String() }

//	Since TglslInt2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslInt2) Set(s string) { (*TglslListOfInt)(me).Set(s) }

type XsdGoPkgHasElem_int2choiceglsl_param_typeschema_Int2_TglslInt2_ struct {
	Int2 TglslInt2 `xml:"http://www.collada.org/2005/11/COLLADASchema int2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int2choiceglsl_param_typeschema_Int2_TglslInt2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int2choiceglsl_param_typeschema_Int2_TglslInt2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int2choiceglsl_param_typeschema_Int2_TglslInt2_ instance.
func (me *XsdGoPkgHasElem_int2choiceglsl_param_typeschema_Int2_TglslInt2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int2choiceglsl_param_typeschema_Int2_TglslInt2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglslBool xsdt.Boolean

//	Returns a string representation of this TglslBool's current non-string scalar value.
func (me TglslBool) String() string { return xsdt.Boolean(me).String() }

//	This convenience method just performs a simple type conversion to TglslBool's alias type xsdt.Boolean.
func (me TglslBool) ToXsdtBoolean() xsdt.Boolean { return xsdt.Boolean(me) }

//	Since TglslBool is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TglslBool) Set(s string) { (*xsdt.Boolean)(me).Set(s) }

type TglslListOfBool xsdt.String

//	TglslListOfBool declares a String containing a whitespace-separated list of TglslBool values. This Values() method creates and returns a slice of all elements in that list, typed as xsdt.Boolean.
func (me TglslListOfBool) ValuesXsdtBoolean() (list []xsdt.Boolean) {
	svals := xsdt.ListValues(string(me))
	list = make([]xsdt.Boolean, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	Since TglslListOfBool is just a simple String type, this merely returns the current string value.
func (me TglslListOfBool) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TglslListOfBool's alias type xsdt.String.
func (me TglslListOfBool) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TglslListOfBool declares a String containing a whitespace-separated list of TglslBool values. This Values() method creates and returns a slice of all elements in that list.
func (me TglslListOfBool) Values() (list []TglslBool) {
	svals := xsdt.ListValues(string(me))
	list = make([]TglslBool, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	Since TglslListOfBool is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslListOfBool) Set(s string) { (*xsdt.String)(me).Set(s) }

type TglslBool4 TglslListOfBool

//	This convenience method just performs a simple type conversion to TglslBool4's alias type TglslListOfBool.
func (me TglslBool4) ToTglslListOfBool() TglslListOfBool { return TglslListOfBool(me) }

//	Since TglslBool4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslBool4) Set(s string) { (*TglslListOfBool)(me).Set(s) }

//	Since TglslBool4 is just a simple String type, this merely returns the current string value.
func (me TglslBool4) String() string { return TglslListOfBool(me).String() }

type XsdGoPkgHasElem_bool4choiceglsl_param_typeschema_Bool4_TglslBool4_ struct {
	Bool4 TglslBool4 `xml:"http://www.collada.org/2005/11/COLLADASchema bool4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool4choiceglsl_param_typeschema_Bool4_TglslBool4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool4choiceglsl_param_typeschema_Bool4_TglslBool4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool4choiceglsl_param_typeschema_Bool4_TglslBool4_ instance.
func (me *XsdGoPkgHasElem_bool4choiceglsl_param_typeschema_Bool4_TglslBool4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool4choiceglsl_param_typeschema_Bool4_TglslBool4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_floatchoiceglsl_param_typeschema_Float_TglslFloat_ struct {
	Float *TglslFloat `xml:"http://www.collada.org/2005/11/COLLADASchema float"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_floatchoiceglsl_param_typeschema_Float_TglslFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_floatchoiceglsl_param_typeschema_Float_TglslFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_floatchoiceglsl_param_typeschema_Float_TglslFloat_ instance.
func (me *XsdGoPkgHasElem_floatchoiceglsl_param_typeschema_Float_TglslFloat_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_floatchoiceglsl_param_typeschema_Float_TglslFloat_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A three-dimensional texture sampler for the GLSL profile.
type TglSampler3D struct {
	TfxSampler3DCommon
}

//	If the WalkHandlers.TglSampler3D function is not nil (ie. was set by outside code), calls it with this TglSampler3D instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TglSampler3D instance.
func (me *TglSampler3D) Walk() (err error) {
	if fn := WalkHandlers.TglSampler3D; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TfxSampler3DCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_sampler3Dchoiceglsl_param_typeschema_Sampler3D_TglSampler3D_ struct {
	Sampler3D *TglSampler3D `xml:"http://www.collada.org/2005/11/COLLADASchema sampler3D"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sampler3Dchoiceglsl_param_typeschema_Sampler3D_TglSampler3D_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sampler3Dchoiceglsl_param_typeschema_Sampler3D_TglSampler3D_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sampler3Dchoiceglsl_param_typeschema_Sampler3D_TglSampler3D_ instance.
func (me *XsdGoPkgHasElem_sampler3Dchoiceglsl_param_typeschema_Sampler3D_TglSampler3D_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sampler3Dchoiceglsl_param_typeschema_Sampler3D_TglSampler3D_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Sampler3D.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A cube map texture sampler for the GLSL profile.
type TglSamplerCUBE struct {
	TfxSamplerCUBECommon
}

//	If the WalkHandlers.TglSamplerCUBE function is not nil (ie. was set by outside code), calls it with this TglSamplerCUBE instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TglSamplerCUBE instance.
func (me *TglSamplerCUBE) Walk() (err error) {
	if fn := WalkHandlers.TglSamplerCUBE; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TfxSamplerCUBECommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_samplerCUBEchoiceglsl_param_typeschema_SamplerCUBE_TglSamplerCUBE_ struct {
	SamplerCUBE *TglSamplerCUBE `xml:"http://www.collada.org/2005/11/COLLADASchema samplerCUBE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_samplerCUBEchoiceglsl_param_typeschema_SamplerCUBE_TglSamplerCUBE_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_samplerCUBEchoiceglsl_param_typeschema_SamplerCUBE_TglSamplerCUBE_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_samplerCUBEchoiceglsl_param_typeschema_SamplerCUBE_TglSamplerCUBE_ instance.
func (me *XsdGoPkgHasElem_samplerCUBEchoiceglsl_param_typeschema_SamplerCUBE_TglSamplerCUBE_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_samplerCUBEchoiceglsl_param_typeschema_SamplerCUBE_TglSamplerCUBE_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SamplerCUBE.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_intchoiceglsl_param_typeschema_Int_TglslInt_ struct {
	Int *TglslInt `xml:"http://www.collada.org/2005/11/COLLADASchema int"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_intchoiceglsl_param_typeschema_Int_TglslInt_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_intchoiceglsl_param_typeschema_Int_TglslInt_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_intchoiceglsl_param_typeschema_Int_TglslInt_ instance.
func (me *XsdGoPkgHasElem_intchoiceglsl_param_typeschema_Int_TglslInt_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_intchoiceglsl_param_typeschema_Int_TglslInt_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglslFloat4X4 TglslListOfFloat

//	Since TglslFloat4X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslFloat4X4) Set(s string) { (*TglslListOfFloat)(me).Set(s) }

//	Since TglslFloat4X4 is just a simple String type, this merely returns the current string value.
func (me TglslFloat4X4) String() string { return TglslListOfFloat(me).String() }

//	This convenience method just performs a simple type conversion to TglslFloat4X4's alias type TglslListOfFloat.
func (me TglslFloat4X4) ToTglslListOfFloat() TglslListOfFloat { return TglslListOfFloat(me) }

type XsdGoPkgHasElem_float4x4choiceglsl_param_typeschema_Float4X4_TglslFloat4X4_ struct {
	Float4X4 TglslFloat4X4 `xml:"http://www.collada.org/2005/11/COLLADASchema float4x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float4x4choiceglsl_param_typeschema_Float4X4_TglslFloat4X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float4x4choiceglsl_param_typeschema_Float4X4_TglslFloat4X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float4x4choiceglsl_param_typeschema_Float4X4_TglslFloat4X4_ instance.
func (me *XsdGoPkgHasElem_float4x4choiceglsl_param_typeschema_Float4X4_TglslFloat4X4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float4x4choiceglsl_param_typeschema_Float4X4_TglslFloat4X4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_boolchoiceglsl_param_typeschema_Bool_TglslBool_ struct {
	Bool *TglslBool `xml:"http://www.collada.org/2005/11/COLLADASchema bool"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_boolchoiceglsl_param_typeschema_Bool_TglslBool_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_boolchoiceglsl_param_typeschema_Bool_TglslBool_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_boolchoiceglsl_param_typeschema_Bool_TglslBool_ instance.
func (me *XsdGoPkgHasElem_boolchoiceglsl_param_typeschema_Bool_TglslBool_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_boolchoiceglsl_param_typeschema_Bool_TglslBool_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A one-dimensional texture sampler for the GLSL profile.
type TglSampler1D struct {
	TfxSampler1DCommon
}

//	If the WalkHandlers.TglSampler1D function is not nil (ie. was set by outside code), calls it with this TglSampler1D instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TglSampler1D instance.
func (me *TglSampler1D) Walk() (err error) {
	if fn := WalkHandlers.TglSampler1D; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TfxSampler1DCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_sampler1Dchoiceglsl_param_typeschema_Sampler1D_TglSampler1D_ struct {
	Sampler1D *TglSampler1D `xml:"http://www.collada.org/2005/11/COLLADASchema sampler1D"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sampler1Dchoiceglsl_param_typeschema_Sampler1D_TglSampler1D_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sampler1Dchoiceglsl_param_typeschema_Sampler1D_TglSampler1D_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sampler1Dchoiceglsl_param_typeschema_Sampler1D_TglSampler1D_ instance.
func (me *XsdGoPkgHasElem_sampler1Dchoiceglsl_param_typeschema_Sampler1D_TglSampler1D_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sampler1Dchoiceglsl_param_typeschema_Sampler1D_TglSampler1D_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Sampler1D.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A two-dimensional texture sampler for the GLSL profile.
type TglSampler2D struct {
	TfxSampler2DCommon
}

//	If the WalkHandlers.TglSampler2D function is not nil (ie. was set by outside code), calls it with this TglSampler2D instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TglSampler2D instance.
func (me *TglSampler2D) Walk() (err error) {
	if fn := WalkHandlers.TglSampler2D; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TfxSampler2DCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_sampler2Dchoiceglsl_param_typeschema_Sampler2D_TglSampler2D_ struct {
	Sampler2D *TglSampler2D `xml:"http://www.collada.org/2005/11/COLLADASchema sampler2D"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sampler2Dchoiceglsl_param_typeschema_Sampler2D_TglSampler2D_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sampler2Dchoiceglsl_param_typeschema_Sampler2D_TglSampler2D_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sampler2Dchoiceglsl_param_typeschema_Sampler2D_TglSampler2D_ instance.
func (me *XsdGoPkgHasElem_sampler2Dchoiceglsl_param_typeschema_Sampler2D_TglSampler2D_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sampler2Dchoiceglsl_param_typeschema_Sampler2D_TglSampler2D_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Sampler2D.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A surface type for the GLSL profile. This surface inherits from the fx_surface_common type and adds the
//	ability to programmatically generate textures.
//	A procedural surface generator.
//	The setparam element allows you to assign a new value to a previously defined parameter.
type XsdGoPkgHasAttr_Ref_TglslIdentifier_ struct {
	Ref TglslIdentifier `xml:"http://www.collada.org/2005/11/COLLADASchema ref,attr"`
}

type TglslSetparamSimple struct {
	XsdGoPkgHasGroup_GlslParamType

	XsdGoPkgHasAttr_Ref_TglslIdentifier_

	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_
}

//	If the WalkHandlers.TglslSetparamSimple function is not nil (ie. was set by outside code), calls it with this TglslSetparamSimple instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TglslSetparamSimple instance.
func (me *TglslSetparamSimple) Walk() (err error) {
	if fn := WalkHandlers.TglslSetparamSimple; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Setparam_TglslSetparamSimple_ struct {
	//	The setparam element allows you to assign a new value to a previously defined parameter.
	Setparams []*TglslSetparamSimple `xml:"http://www.collada.org/2005/11/COLLADASchema setparam"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Setparam_TglslSetparamSimple_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Setparam_TglslSetparamSimple_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Setparam_TglslSetparamSimple_ instance.
func (me *XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Setparam_TglslSetparamSimple_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Setparam_TglslSetparamSimple_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Setparams {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The include element allows you to import GLSL code to use for this surface generator.
//	The include element is used to import source code or precompiled binary shaders into the FX Runtime by referencing an external resource.
type TfxIncludeCommon struct {
	//	The url attribute refers to resource.  This may refer to a local resource using a relative URL
	//	fragment identifier that begins with the “#” character. The url attribute may refer to an external
	//	resource using an absolute or relative URL.
	XsdGoPkgHasAttr_Url_XsdtAnyURI_

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_
}

//	If the WalkHandlers.TfxIncludeCommon function is not nil (ie. was set by outside code), calls it with this TfxIncludeCommon instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TfxIncludeCommon instance.
func (me *TfxIncludeCommon) Walk() (err error) {
	if fn := WalkHandlers.TfxIncludeCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Include_TfxIncludeCommon_ struct {
	//	The include element allows you to import GLSL code to use for this surface generator.
	Includes []*TfxIncludeCommon `xml:"http://www.collada.org/2005/11/COLLADASchema include"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Include_TfxIncludeCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Include_TfxIncludeCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Include_TfxIncludeCommon_ instance.
func (me *XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Include_TfxIncludeCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Include_TfxIncludeCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Includes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The entry symbol for the shader function.
type XsdGoPkgHasAttr_Source_XsdtNCName_ struct {
	Source xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema source,attr"`
}

type TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName struct {
	XsdGoPkgValue xsdt.NCName `xml:",chardata"`

	XsdGoPkgHasAttr_Source_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName function is not nil (ie. was set by outside code), calls it with this TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName instance.
func (me *TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName) ToXsdtNCName() xsdt.NCName {
	return me.XsdGoPkgValue
}

type XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Name_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_ struct {
	//	The entry symbol for the shader function.
	Name *TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName `xml:"http://www.collada.org/2005/11/COLLADASchema name"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Name_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Name_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Name_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_ instance.
func (me *XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Name_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Name_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Name.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The code element allows you to embed GLSL code to use for this surface generator.
//	The fx_code_profile type allows you to specify an inline block of source code.
type TfxCodeProfile struct {
	XsdGoPkgValue xsdt.String `xml:",chardata"`

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TfxCodeProfile) ToXsdtString() xsdt.String { return me.XsdGoPkgValue }

//	If the WalkHandlers.TfxCodeProfile function is not nil (ie. was set by outside code), calls it with this TfxCodeProfile instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TfxCodeProfile instance.
func (me *TfxCodeProfile) Walk() (err error) {
	if fn := WalkHandlers.TfxCodeProfile; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Code_TfxCodeProfile_ struct {
	//	The code element allows you to embed GLSL code to use for this surface generator.
	Codes []*TfxCodeProfile `xml:"http://www.collada.org/2005/11/COLLADASchema code"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Code_TfxCodeProfile_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Code_TfxCodeProfile_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Code_TfxCodeProfile_ instance.
func (me *XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Code_TfxCodeProfile_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Code_TfxCodeProfile_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Codes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator struct {
	//	The annotate element allows you to specify an annotation for this surface generator.
	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

	//	The include element allows you to import GLSL code to use for this surface generator.
	XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Include_TfxIncludeCommon_

	//	The entry symbol for the shader function.
	XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Name_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_

	//	The code element allows you to embed GLSL code to use for this surface generator.
	XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Code_TfxCodeProfile_

	//	The setparam element allows you to assign a new value to a previously defined parameter.
	XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Setparam_TglslSetparamSimple_
}

//	If the WalkHandlers.TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator function is not nil (ie. was set by outside code), calls it with this TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator instance.
func (me *TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Code_TfxCodeProfile_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Setparam_TglslSetparamSimple_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Include_TfxIncludeCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Name_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_generatorsequenceextensioncomplexContentglsl_surface_typeschema_Generator_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator_ struct {
	//	A procedural surface generator.
	Generator *TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator `xml:"http://www.collada.org/2005/11/COLLADASchema generator"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_generatorsequenceextensioncomplexContentglsl_surface_typeschema_Generator_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_generatorsequenceextensioncomplexContentglsl_surface_typeschema_Generator_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_generatorsequenceextensioncomplexContentglsl_surface_typeschema_Generator_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator_ instance.
func (me *XsdGoPkgHasElem_generatorsequenceextensioncomplexContentglsl_surface_typeschema_Generator_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_generatorsequenceextensioncomplexContentglsl_surface_typeschema_Generator_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Generator.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglslSurfaceType struct {
	TfxSurfaceCommon

	//	A procedural surface generator.
	XsdGoPkgHasElem_generatorsequenceextensioncomplexContentglsl_surface_typeschema_Generator_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator_
}

//	If the WalkHandlers.TglslSurfaceType function is not nil (ie. was set by outside code), calls it with this TglslSurfaceType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TglslSurfaceType instance.
func (me *TglslSurfaceType) Walk() (err error) {
	if fn := WalkHandlers.TglslSurfaceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_generatorsequenceextensioncomplexContentglsl_surface_typeschema_Generator_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TfxSurfaceCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_surfacechoiceglsl_param_typeschema_Surface_TglslSurfaceType_ struct {
	Surface *TglslSurfaceType `xml:"http://www.collada.org/2005/11/COLLADASchema surface"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_surfacechoiceglsl_param_typeschema_Surface_TglslSurfaceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_surfacechoiceglsl_param_typeschema_Surface_TglslSurfaceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_surfacechoiceglsl_param_typeschema_Surface_TglslSurfaceType_ instance.
func (me *XsdGoPkgHasElem_surfacechoiceglsl_param_typeschema_Surface_TglslSurfaceType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_surfacechoiceglsl_param_typeschema_Surface_TglslSurfaceType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Surface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglslFloat2X2 TglslListOfFloat

//	This convenience method just performs a simple type conversion to TglslFloat2X2's alias type TglslListOfFloat.
func (me TglslFloat2X2) ToTglslListOfFloat() TglslListOfFloat { return TglslListOfFloat(me) }

//	Since TglslFloat2X2 is just a simple String type, this merely returns the current string value.
func (me TglslFloat2X2) String() string { return TglslListOfFloat(me).String() }

//	Since TglslFloat2X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslFloat2X2) Set(s string) { (*TglslListOfFloat)(me).Set(s) }

type XsdGoPkgHasElem_float2x2choiceglsl_param_typeschema_Float2X2_TglslFloat2X2_ struct {
	Float2X2 TglslFloat2X2 `xml:"http://www.collada.org/2005/11/COLLADASchema float2x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float2x2choiceglsl_param_typeschema_Float2X2_TglslFloat2X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float2x2choiceglsl_param_typeschema_Float2X2_TglslFloat2X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float2x2choiceglsl_param_typeschema_Float2X2_TglslFloat2X2_ instance.
func (me *XsdGoPkgHasElem_float2x2choiceglsl_param_typeschema_Float2X2_TglslFloat2X2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float2x2choiceglsl_param_typeschema_Float2X2_TglslFloat2X2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglslFloat2 TglslListOfFloat

//	Since TglslFloat2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslFloat2) Set(s string) { (*TglslListOfFloat)(me).Set(s) }

//	Since TglslFloat2 is just a simple String type, this merely returns the current string value.
func (me TglslFloat2) String() string { return TglslListOfFloat(me).String() }

//	This convenience method just performs a simple type conversion to TglslFloat2's alias type TglslListOfFloat.
func (me TglslFloat2) ToTglslListOfFloat() TglslListOfFloat { return TglslListOfFloat(me) }

type XsdGoPkgHasElem_float2choiceglsl_param_typeschema_Float2_TglslFloat2_ struct {
	Float2 TglslFloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema float2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float2choiceglsl_param_typeschema_Float2_TglslFloat2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float2choiceglsl_param_typeschema_Float2_TglslFloat2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float2choiceglsl_param_typeschema_Float2_TglslFloat2_ instance.
func (me *XsdGoPkgHasElem_float2choiceglsl_param_typeschema_Float2_TglslFloat2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float2choiceglsl_param_typeschema_Float2_TglslFloat2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglslInt4 TglslListOfInt

//	Since TglslInt4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslInt4) Set(s string) { (*TglslListOfInt)(me).Set(s) }

//	Since TglslInt4 is just a simple String type, this merely returns the current string value.
func (me TglslInt4) String() string { return TglslListOfInt(me).String() }

//	This convenience method just performs a simple type conversion to TglslInt4's alias type TglslListOfInt.
func (me TglslInt4) ToTglslListOfInt() TglslListOfInt { return TglslListOfInt(me) }

type XsdGoPkgHasElem_int4choiceglsl_param_typeschema_Int4_TglslInt4_ struct {
	Int4 TglslInt4 `xml:"http://www.collada.org/2005/11/COLLADASchema int4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int4choiceglsl_param_typeschema_Int4_TglslInt4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int4choiceglsl_param_typeschema_Int4_TglslInt4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int4choiceglsl_param_typeschema_Int4_TglslInt4_ instance.
func (me *XsdGoPkgHasElem_int4choiceglsl_param_typeschema_Int4_TglslInt4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int4choiceglsl_param_typeschema_Int4_TglslInt4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglslInt3 TglslListOfInt

//	Since TglslInt3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslInt3) Set(s string) { (*TglslListOfInt)(me).Set(s) }

//	Since TglslInt3 is just a simple String type, this merely returns the current string value.
func (me TglslInt3) String() string { return TglslListOfInt(me).String() }

//	This convenience method just performs a simple type conversion to TglslInt3's alias type TglslListOfInt.
func (me TglslInt3) ToTglslListOfInt() TglslListOfInt { return TglslListOfInt(me) }

type XsdGoPkgHasElem_int3choiceglsl_param_typeschema_Int3_TglslInt3_ struct {
	Int3 TglslInt3 `xml:"http://www.collada.org/2005/11/COLLADASchema int3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int3choiceglsl_param_typeschema_Int3_TglslInt3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int3choiceglsl_param_typeschema_Int3_TglslInt3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int3choiceglsl_param_typeschema_Int3_TglslInt3_ instance.
func (me *XsdGoPkgHasElem_int3choiceglsl_param_typeschema_Int3_TglslInt3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int3choiceglsl_param_typeschema_Int3_TglslInt3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglslFloat4 TglslListOfFloat

//	Since TglslFloat4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslFloat4) Set(s string) { (*TglslListOfFloat)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TglslFloat4's alias type TglslListOfFloat.
func (me TglslFloat4) ToTglslListOfFloat() TglslListOfFloat { return TglslListOfFloat(me) }

//	Since TglslFloat4 is just a simple String type, this merely returns the current string value.
func (me TglslFloat4) String() string { return TglslListOfFloat(me).String() }

type XsdGoPkgHasElem_float4choiceglsl_param_typeschema_Float4_TglslFloat4_ struct {
	Float4 TglslFloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema float4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float4choiceglsl_param_typeschema_Float4_TglslFloat4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float4choiceglsl_param_typeschema_Float4_TglslFloat4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float4choiceglsl_param_typeschema_Float4_TglslFloat4_ instance.
func (me *XsdGoPkgHasElem_float4choiceglsl_param_typeschema_Float4_TglslFloat4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float4choiceglsl_param_typeschema_Float4_TglslFloat4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglslFloat3X3 TglslListOfFloat

//	Since TglslFloat3X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslFloat3X3) Set(s string) { (*TglslListOfFloat)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TglslFloat3X3's alias type TglslListOfFloat.
func (me TglslFloat3X3) ToTglslListOfFloat() TglslListOfFloat { return TglslListOfFloat(me) }

//	Since TglslFloat3X3 is just a simple String type, this merely returns the current string value.
func (me TglslFloat3X3) String() string { return TglslListOfFloat(me).String() }

type XsdGoPkgHasElem_float3x3choiceglsl_param_typeschema_Float3X3_TglslFloat3X3_ struct {
	Float3X3 TglslFloat3X3 `xml:"http://www.collada.org/2005/11/COLLADASchema float3x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float3x3choiceglsl_param_typeschema_Float3X3_TglslFloat3X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float3x3choiceglsl_param_typeschema_Float3X3_TglslFloat3X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float3x3choiceglsl_param_typeschema_Float3X3_TglslFloat3X3_ instance.
func (me *XsdGoPkgHasElem_float3x3choiceglsl_param_typeschema_Float3X3_TglslFloat3X3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float3x3choiceglsl_param_typeschema_Float3X3_TglslFloat3X3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglslBool3 TglslListOfBool

//	Since TglslBool3 is just a simple String type, this merely returns the current string value.
func (me TglslBool3) String() string { return TglslListOfBool(me).String() }

//	Since TglslBool3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslBool3) Set(s string) { (*TglslListOfBool)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TglslBool3's alias type TglslListOfBool.
func (me TglslBool3) ToTglslListOfBool() TglslListOfBool { return TglslListOfBool(me) }

type XsdGoPkgHasElem_bool3choiceglsl_param_typeschema_Bool3_TglslBool3_ struct {
	Bool3 TglslBool3 `xml:"http://www.collada.org/2005/11/COLLADASchema bool3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool3choiceglsl_param_typeschema_Bool3_TglslBool3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool3choiceglsl_param_typeschema_Bool3_TglslBool3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool3choiceglsl_param_typeschema_Bool3_TglslBool3_ instance.
func (me *XsdGoPkgHasElem_bool3choiceglsl_param_typeschema_Bool3_TglslBool3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool3choiceglsl_param_typeschema_Bool3_TglslBool3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglFogCoordSrcType xsdt.String

//	This convenience method just performs a simple type conversion to TglFogCoordSrcType's alias type xsdt.String.
func (me TglFogCoordSrcType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TglFogCoordSrcType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglFogCoordSrcType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TglFogCoordSrcType is just a simple String type, this merely returns the current string value.
func (me TglFogCoordSrcType) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TglFogCoordSrcType is "FOG_COORDINATE".
func (me TglFogCoordSrcType) IsFogCoordinate() bool { return me == "FOG_COORDINATE" }

//	Returns true if the value of this enumerated TglFogCoordSrcType is "FRAGMENT_DEPTH".
func (me TglFogCoordSrcType) IsFragmentDepth() bool { return me == "FRAGMENT_DEPTH" }

type TglBlendEquationType xsdt.String

//	Since TglBlendEquationType is just a simple String type, this merely returns the current string value.
func (me TglBlendEquationType) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TglBlendEquationType is "FUNC_ADD".
func (me TglBlendEquationType) IsFuncAdd() bool { return me == "FUNC_ADD" }

//	This convenience method just performs a simple type conversion to TglBlendEquationType's alias type xsdt.String.
func (me TglBlendEquationType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TglBlendEquationType is "MIN".
func (me TglBlendEquationType) IsMin() bool { return me == "MIN" }

//	Returns true if the value of this enumerated TglBlendEquationType is "MAX".
func (me TglBlendEquationType) IsMax() bool { return me == "MAX" }

//	Returns true if the value of this enumerated TglBlendEquationType is "FUNC_REVERSE_SUBTRACT".
func (me TglBlendEquationType) IsFuncReverseSubtract() bool { return me == "FUNC_REVERSE_SUBTRACT" }

//	Since TglBlendEquationType is just a simple String type, this merely sets the current value from the specified string.
func (me *TglBlendEquationType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TglBlendEquationType is "FUNC_SUBTRACT".
func (me TglBlendEquationType) IsFuncSubtract() bool { return me == "FUNC_SUBTRACT" }

type TglEnumeration xsdt.String

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglLogicOpType, but keep in mind the actual value may or may not be a valid TglLogicOpType value.
func (me TglEnumeration) ToTglLogicOpType() TglLogicOpType { return TglLogicOpType(me) }

//	Since TglEnumeration is just a simple String type, this merely returns the current string value.
func (me TglEnumeration) String() string { return xsdt.String(me).String() }

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglBlendEquationType, but keep in mind the actual value may or may not be a valid TglBlendEquationType value.
func (me TglEnumeration) ToTglBlendEquationType() TglBlendEquationType {
	return TglBlendEquationType(me)
}

//	This convenience method just performs a simple type conversion to TglEnumeration's alias type xsdt.String.
func (me TglEnumeration) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglMaterialType, but keep in mind the actual value may or may not be a valid TglMaterialType value.
func (me TglEnumeration) ToTglMaterialType() TglMaterialType { return TglMaterialType(me) }

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglLightModelColorControlType, but keep in mind the actual value may or may not be a valid TglLightModelColorControlType value.
func (me TglEnumeration) ToTglLightModelColorControlType() TglLightModelColorControlType {
	return TglLightModelColorControlType(me)
}

//	Since TglEnumeration is just a simple String type, this merely sets the current value from the specified string.
func (me *TglEnumeration) Set(s string) { (*xsdt.String)(me).Set(s) }

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglPolygonModeType, but keep in mind the actual value may or may not be a valid TglPolygonModeType value.
func (me TglEnumeration) ToTglPolygonModeType() TglPolygonModeType { return TglPolygonModeType(me) }

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglFrontFaceType, but keep in mind the actual value may or may not be a valid TglFrontFaceType value.
func (me TglEnumeration) ToTglFrontFaceType() TglFrontFaceType { return TglFrontFaceType(me) }

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglFogCoordSrcType, but keep in mind the actual value may or may not be a valid TglFogCoordSrcType value.
func (me TglEnumeration) ToTglFogCoordSrcType() TglFogCoordSrcType { return TglFogCoordSrcType(me) }

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglBlendType, but keep in mind the actual value may or may not be a valid TglBlendType value.
func (me TglEnumeration) ToTglBlendType() TglBlendType { return TglBlendType(me) }

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglStencilOpType, but keep in mind the actual value may or may not be a valid TglStencilOpType value.
func (me TglEnumeration) ToTglStencilOpType() TglStencilOpType { return TglStencilOpType(me) }

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglFogType, but keep in mind the actual value may or may not be a valid TglFogType value.
func (me TglEnumeration) ToTglFogType() TglFogType { return TglFogType(me) }

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglShadeModelType, but keep in mind the actual value may or may not be a valid TglShadeModelType value.
func (me TglEnumeration) ToTglShadeModelType() TglShadeModelType { return TglShadeModelType(me) }

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglFaceType, but keep in mind the actual value may or may not be a valid TglFaceType value.
func (me TglEnumeration) ToTglFaceType() TglFaceType { return TglFaceType(me) }

//	TglEnumeration is an XSD union-type of several types. This is a simple type conversion to TglFuncType, but keep in mind the actual value may or may not be a valid TglFuncType value.
func (me TglEnumeration) ToTglFuncType() TglFuncType { return TglFuncType(me) }

type XsdGoPkgHasElem_enumchoiceglsl_param_typeschema_Enum_TglEnumeration_ struct {
	Enum TglEnumeration `xml:"http://www.collada.org/2005/11/COLLADASchema enum"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_enumchoiceglsl_param_typeschema_Enum_TglEnumeration_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_enumchoiceglsl_param_typeschema_Enum_TglEnumeration_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_enumchoiceglsl_param_typeschema_Enum_TglEnumeration_ instance.
func (me *XsdGoPkgHasElem_enumchoiceglsl_param_typeschema_Enum_TglEnumeration_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_enumchoiceglsl_param_typeschema_Enum_TglEnumeration_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglslBool2 TglslListOfBool

//	This convenience method just performs a simple type conversion to TglslBool2's alias type TglslListOfBool.
func (me TglslBool2) ToTglslListOfBool() TglslListOfBool { return TglslListOfBool(me) }

//	Since TglslBool2 is just a simple String type, this merely returns the current string value.
func (me TglslBool2) String() string { return TglslListOfBool(me).String() }

//	Since TglslBool2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslBool2) Set(s string) { (*TglslListOfBool)(me).Set(s) }

type XsdGoPkgHasElem_bool2choiceglsl_param_typeschema_Bool2_TglslBool2_ struct {
	Bool2 TglslBool2 `xml:"http://www.collada.org/2005/11/COLLADASchema bool2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool2choiceglsl_param_typeschema_Bool2_TglslBool2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool2choiceglsl_param_typeschema_Bool2_TglslBool2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool2choiceglsl_param_typeschema_Bool2_TglslBool2_ instance.
func (me *XsdGoPkgHasElem_bool2choiceglsl_param_typeschema_Bool2_TglslBool2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool2choiceglsl_param_typeschema_Bool2_TglslBool2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A two-dimensional texture sampler for the GLSL profile.
type TglSamplerRECT struct {
	TfxSamplerRECTCommon
}

//	If the WalkHandlers.TglSamplerRECT function is not nil (ie. was set by outside code), calls it with this TglSamplerRECT instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TglSamplerRECT instance.
func (me *TglSamplerRECT) Walk() (err error) {
	if fn := WalkHandlers.TglSamplerRECT; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TfxSamplerRECTCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_samplerRECTchoiceglsl_param_typeschema_SamplerRECT_TglSamplerRECT_ struct {
	SamplerRECT *TglSamplerRECT `xml:"http://www.collada.org/2005/11/COLLADASchema samplerRECT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_samplerRECTchoiceglsl_param_typeschema_SamplerRECT_TglSamplerRECT_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_samplerRECTchoiceglsl_param_typeschema_SamplerRECT_TglSamplerRECT_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_samplerRECTchoiceglsl_param_typeschema_SamplerRECT_TglSamplerRECT_ instance.
func (me *XsdGoPkgHasElem_samplerRECTchoiceglsl_param_typeschema_SamplerRECT_TglSamplerRECT_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_samplerRECTchoiceglsl_param_typeschema_SamplerRECT_TglSamplerRECT_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SamplerRECT.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasGroup_GlslParamType struct {
	XsdGoPkgHasElem_samplerDEPTHchoiceglsl_param_typeschema_SamplerDEPTH_TglSamplerDEPTH_

	XsdGoPkgHasElem_float3choiceglsl_param_typeschema_Float3_TglslFloat3_

	XsdGoPkgHasElem_int2choiceglsl_param_typeschema_Int2_TglslInt2_

	XsdGoPkgHasElem_bool4choiceglsl_param_typeschema_Bool4_TglslBool4_

	XsdGoPkgHasElem_floatchoiceglsl_param_typeschema_Float_TglslFloat_

	XsdGoPkgHasElem_sampler3Dchoiceglsl_param_typeschema_Sampler3D_TglSampler3D_

	XsdGoPkgHasElem_samplerCUBEchoiceglsl_param_typeschema_SamplerCUBE_TglSamplerCUBE_

	XsdGoPkgHasElem_intchoiceglsl_param_typeschema_Int_TglslInt_

	XsdGoPkgHasElem_float4x4choiceglsl_param_typeschema_Float4X4_TglslFloat4X4_

	XsdGoPkgHasElem_boolchoiceglsl_param_typeschema_Bool_TglslBool_

	XsdGoPkgHasElem_sampler1Dchoiceglsl_param_typeschema_Sampler1D_TglSampler1D_

	XsdGoPkgHasElem_sampler2Dchoiceglsl_param_typeschema_Sampler2D_TglSampler2D_

	XsdGoPkgHasElem_surfacechoiceglsl_param_typeschema_Surface_TglslSurfaceType_

	XsdGoPkgHasElem_float2x2choiceglsl_param_typeschema_Float2X2_TglslFloat2X2_

	XsdGoPkgHasElem_float2choiceglsl_param_typeschema_Float2_TglslFloat2_

	XsdGoPkgHasElem_int4choiceglsl_param_typeschema_Int4_TglslInt4_

	XsdGoPkgHasElem_int3choiceglsl_param_typeschema_Int3_TglslInt3_

	XsdGoPkgHasElem_float4choiceglsl_param_typeschema_Float4_TglslFloat4_

	XsdGoPkgHasElem_float3x3choiceglsl_param_typeschema_Float3X3_TglslFloat3X3_

	XsdGoPkgHasElem_bool3choiceglsl_param_typeschema_Bool3_TglslBool3_

	XsdGoPkgHasElem_enumchoiceglsl_param_typeschema_Enum_TglEnumeration_

	XsdGoPkgHasElem_bool2choiceglsl_param_typeschema_Bool2_TglslBool2_

	XsdGoPkgHasElem_samplerRECTchoiceglsl_param_typeschema_SamplerRECT_TglSamplerRECT_
}

//	If the WalkHandlers.XsdGoPkgHasGroup_GlslParamType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_GlslParamType instance as the single argument. Then calls the Walk() method on 23/23 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_GlslParamType instance.
func (me *XsdGoPkgHasGroup_GlslParamType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasGroup_GlslParamType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_bool2choiceglsl_param_typeschema_Bool2_TglslBool2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_samplerRECTchoiceglsl_param_typeschema_SamplerRECT_TglSamplerRECT_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_samplerDEPTHchoiceglsl_param_typeschema_SamplerDEPTH_TglSamplerDEPTH_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3choiceglsl_param_typeschema_Float3_TglslFloat3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int2choiceglsl_param_typeschema_Int2_TglslInt2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool4choiceglsl_param_typeschema_Bool4_TglslBool4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_floatchoiceglsl_param_typeschema_Float_TglslFloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sampler3Dchoiceglsl_param_typeschema_Sampler3D_TglSampler3D_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_samplerCUBEchoiceglsl_param_typeschema_SamplerCUBE_TglSamplerCUBE_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_intchoiceglsl_param_typeschema_Int_TglslInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4x4choiceglsl_param_typeschema_Float4X4_TglslFloat4X4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_boolchoiceglsl_param_typeschema_Bool_TglslBool_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sampler1Dchoiceglsl_param_typeschema_Sampler1D_TglSampler1D_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sampler2Dchoiceglsl_param_typeschema_Sampler2D_TglSampler2D_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_surfacechoiceglsl_param_typeschema_Surface_TglslSurfaceType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2x2choiceglsl_param_typeschema_Float2X2_TglslFloat2X2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2choiceglsl_param_typeschema_Float2_TglslFloat2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int4choiceglsl_param_typeschema_Int4_TglslInt4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int3choiceglsl_param_typeschema_Int3_TglslInt3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4choiceglsl_param_typeschema_Float4_TglslFloat4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3x3choiceglsl_param_typeschema_Float3X3_TglslFloat3X3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool3choiceglsl_param_typeschema_Bool3_TglslBool3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_enumchoiceglsl_param_typeschema_Enum_TglEnumeration_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The length attribute specifies the length of the array.
type XsdGoPkgHasAttr_Length_XsdtPositiveInteger_ struct {
	//	The length attribute specifies the length of the array.
	Length xsdt.PositiveInteger `xml:"http://www.collada.org/2005/11/COLLADASchema length,attr"`
}

type TglslNewarrayType struct {
	//	The length attribute specifies the length of the array.
	XsdGoPkgHasAttr_Length_XsdtPositiveInteger_

	//	You may recursively nest glsl_newarray elements to create multidimensional arrays.
	XsdGoPkgHasElems_arraychoiceglsl_newarray_typeschema_Array_TglslNewarrayType_

	XsdGoPkgHasGroup_GlslParamType
}

//	If the WalkHandlers.TglslNewarrayType function is not nil (ie. was set by outside code), calls it with this TglslNewarrayType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TglslNewarrayType instance.
func (me *TglslNewarrayType) Walk() (err error) {
	if fn := WalkHandlers.TglslNewarrayType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_arraychoiceglsl_newarray_typeschema_Array_TglslNewarrayType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroup_GlslParamType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_arraychoicesequenceglsl_newparamschema_Array_TglslNewarrayType_ struct {
	Array *TglslNewarrayType `xml:"http://www.collada.org/2005/11/COLLADASchema array"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_arraychoicesequenceglsl_newparamschema_Array_TglslNewarrayType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_arraychoicesequenceglsl_newparamschema_Array_TglslNewarrayType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_arraychoicesequenceglsl_newparamschema_Array_TglslNewarrayType_ instance.
func (me *XsdGoPkgHasElem_arraychoicesequenceglsl_newparamschema_Array_TglslNewarrayType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_arraychoicesequenceglsl_newparamschema_Array_TglslNewarrayType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Array.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglslNewparam struct {
	XsdGoPkgHasElem_modifiersequencefx_newparam_commonschema_Modifier_TfxModifierEnumCommon_

	XsdGoPkgHasElem_semanticsequencefx_newparam_commonschema_Semantic_XsdtNCName_

	XsdGoPkgHasAttr_Sid_TglslIdentifier_

	XsdGoPkgHasElem_arraychoicesequenceglsl_newparamschema_Array_TglslNewarrayType_

	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

	XsdGoPkgHasGroup_GlslParamType
}

//	If the WalkHandlers.TglslNewparam function is not nil (ie. was set by outside code), calls it with this TglslNewparam instance as the single argument. Then calls the Walk() method on 5/6 embed(s) and 0/0 field(s) belonging to this TglslNewparam instance.
func (me *TglslNewparam) Walk() (err error) {
	if fn := WalkHandlers.TglslNewparam; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_modifiersequencefx_newparam_commonschema_Modifier_TfxModifierEnumCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_semanticsequencefx_newparam_commonschema_Semantic_XsdtNCName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_arraychoicesequenceglsl_newparamschema_Array_TglslNewarrayType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroup_GlslParamType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_newparamchoicesequenceprofile_GLSLschema_Newparam_TglslNewparam_ struct {
	Newparams []*TglslNewparam `xml:"http://www.collada.org/2005/11/COLLADASchema newparam"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_newparamchoicesequenceprofile_GLSLschema_Newparam_TglslNewparam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_newparamchoicesequenceprofile_GLSLschema_Newparam_TglslNewparam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_newparamchoicesequenceprofile_GLSLschema_Newparam_TglslNewparam_ instance.
func (me *XsdGoPkgHasElems_newparamchoicesequenceprofile_GLSLschema_Newparam_TglslNewparam_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_newparamchoicesequenceprofile_GLSLschema_Newparam_TglslNewparam_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Newparams {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
type XsdGoPkgHasAttr_Index_XsdtNonNegativeInteger_0 struct {
	Index xsdt.NonNegativeInteger `xml:"http://www.collada.org/2005/11/COLLADASchema index,attr"`
}

//	Returns the default value for Index -- 0
func (me XsdGoPkgHasAttr_Index_XsdtNonNegativeInteger_0) IndexDefault() xsdt.NonNegativeInteger {
	return xsdt.NonNegativeInteger(0)
}

type TfxClearstencilCommon struct {
	XsdGoPkgValue xsdt.Byte `xml:",chardata"`

	XsdGoPkgHasAttr_Index_XsdtNonNegativeInteger_0
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TfxClearstencilCommon) ToXsdtByte() xsdt.Byte { return me.XsdGoPkgValue }

//	If the WalkHandlers.TfxClearstencilCommon function is not nil (ie. was set by outside code), calls it with this TfxClearstencilCommon instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TfxClearstencilCommon instance.
func (me *TfxClearstencilCommon) Walk() (err error) {
	if fn := WalkHandlers.TfxClearstencilCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_stencil_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilClear_TfxClearstencilCommon_ struct {
	StencilClears []*TfxClearstencilCommon `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_clear"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_stencil_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilClear_TfxClearstencilCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_stencil_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilClear_TfxClearstencilCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_stencil_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilClear_TfxClearstencilCommon_ instance.
func (me *XsdGoPkgHasElems_stencil_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilClear_TfxClearstencilCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_stencil_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilClear_TfxClearstencilCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.StencilClears {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Slice_XsdtNonNegativeInteger_0 struct {
	Slice xsdt.NonNegativeInteger `xml:"http://www.collada.org/2005/11/COLLADASchema slice,attr"`
}

//	Returns the default value for Slice -- 0
func (me XsdGoPkgHasAttr_Slice_XsdtNonNegativeInteger_0) SliceDefault() xsdt.NonNegativeInteger {
	return xsdt.NonNegativeInteger(0)
}

type XsdGoPkgHasAttr_Mip_XsdtNonNegativeInteger_0 struct {
	Mip xsdt.NonNegativeInteger `xml:"http://www.collada.org/2005/11/COLLADASchema mip,attr"`
}

//	Returns the default value for Mip -- 0
func (me XsdGoPkgHasAttr_Mip_XsdtNonNegativeInteger_0) MipDefault() xsdt.NonNegativeInteger {
	return xsdt.NonNegativeInteger(0)
}

type TfxColortargetCommon struct {
	XsdGoPkgValue xsdt.NCName `xml:",chardata"`

	XsdGoPkgHasAttr_Face_TfxSurfaceFaceEnum_PositiveX

	XsdGoPkgHasAttr_Slice_XsdtNonNegativeInteger_0

	XsdGoPkgHasAttr_Mip_XsdtNonNegativeInteger_0

	XsdGoPkgHasAttr_Index_XsdtNonNegativeInteger_0
}

//	If the WalkHandlers.TfxColortargetCommon function is not nil (ie. was set by outside code), calls it with this TfxColortargetCommon instance as the single argument. Then calls the Walk() method on 0/4 embed(s) and 0/1 field(s) belonging to this TfxColortargetCommon instance.
func (me *TfxColortargetCommon) Walk() (err error) {
	if fn := WalkHandlers.TfxColortargetCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TfxColortargetCommon) ToXsdtNCName() xsdt.NCName { return me.XsdGoPkgValue }

type XsdGoPkgHasElems_color_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorTarget_TfxColortargetCommon_ struct {
	ColorTargets []*TfxColortargetCommon `xml:"http://www.collada.org/2005/11/COLLADASchema color_target"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_color_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorTarget_TfxColortargetCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_color_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorTarget_TfxColortargetCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_color_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorTarget_TfxColortargetCommon_ instance.
func (me *XsdGoPkgHasElems_color_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorTarget_TfxColortargetCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_color_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorTarget_TfxColortargetCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ColorTargets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TfxStenciltargetCommon struct {
	XsdGoPkgValue xsdt.NCName `xml:",chardata"`

	XsdGoPkgHasAttr_Index_XsdtNonNegativeInteger_0

	XsdGoPkgHasAttr_Mip_XsdtNonNegativeInteger_0

	XsdGoPkgHasAttr_Face_TfxSurfaceFaceEnum_PositiveX

	XsdGoPkgHasAttr_Slice_XsdtNonNegativeInteger_0
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TfxStenciltargetCommon) ToXsdtNCName() xsdt.NCName { return me.XsdGoPkgValue }

//	If the WalkHandlers.TfxStenciltargetCommon function is not nil (ie. was set by outside code), calls it with this TfxStenciltargetCommon instance as the single argument. Then calls the Walk() method on 0/4 embed(s) and 0/1 field(s) belonging to this TfxStenciltargetCommon instance.
func (me *TfxStenciltargetCommon) Walk() (err error) {
	if fn := WalkHandlers.TfxStenciltargetCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_stencil_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilTarget_TfxStenciltargetCommon_ struct {
	StencilTargets []*TfxStenciltargetCommon `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_target"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_stencil_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilTarget_TfxStenciltargetCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_stencil_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilTarget_TfxStenciltargetCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_stencil_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilTarget_TfxStenciltargetCommon_ instance.
func (me *XsdGoPkgHasElems_stencil_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilTarget_TfxStenciltargetCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_stencil_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilTarget_TfxStenciltargetCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.StencilTargets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Declare and prepare a shader for execution in the rendering pipeline of a pass.
//	A string declaring which profile or platform the compiler is targeting this shader for.
type TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget struct {
	XsdGoPkgValue xsdt.Nmtoken `xml:",chardata"`
}

//	If the WalkHandlers.TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget function is not nil (ie. was set by outside code), calls it with this TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget instance.
func (me *TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget) ToXsdtNmtoken() xsdt.Nmtoken {
	return me.XsdGoPkgValue
}

type XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerTarget_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_ struct {
	//	A string declaring which profile or platform the compiler is targeting this shader for.
	CompilerTarget *TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget `xml:"http://www.collada.org/2005/11/COLLADASchema compiler_target"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerTarget_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerTarget_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerTarget_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_ instance.
func (me *XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerTarget_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerTarget_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CompilerTarget.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	In which pipeline stage this programmable shader is designed to execute, for example, VERTEX, FRAGMENT, etc.
type TglslPipelineStage xsdt.String

//	Since TglslPipelineStage is just a simple String type, this merely returns the current string value.
func (me TglslPipelineStage) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TglslPipelineStage is "VERTEXPROGRAM".
func (me TglslPipelineStage) IsVertexprogram() bool { return me == "VERTEXPROGRAM" }

//	Since TglslPipelineStage is just a simple String type, this merely sets the current value from the specified string.
func (me *TglslPipelineStage) Set(s string) { (*xsdt.String)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TglslPipelineStage's alias type xsdt.String.
func (me TglslPipelineStage) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TglslPipelineStage is "FRAGMENTPROGRAM".
func (me TglslPipelineStage) IsFragmentprogram() bool { return me == "FRAGMENTPROGRAM" }

type XsdGoPkgHasAttr_Stage_TglslPipelineStage_ struct {
	//	In which pipeline stage this programmable shader is designed to execute, for example, VERTEX, FRAGMENT, etc.
	Stage TglslPipelineStage `xml:"http://www.collada.org/2005/11/COLLADASchema stage,attr"`
}

//	Binds values to uniform inputs of a shader.
type XsdGoPkgHasAttr_Ref_XsdtString_ struct {
	Ref xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema ref,attr"`
}

type TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam struct {
	XsdGoPkgHasAttr_Ref_XsdtString_
}

//	If the WalkHandlers.TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam function is not nil (ie. was set by outside code), calls it with this TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam instance.
func (me *TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Param_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_ struct {
	Param *TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam `xml:"http://www.collada.org/2005/11/COLLADASchema param"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Param_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Param_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Param_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_ instance.
func (me *XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Param_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Param_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Param.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind struct {
	//	The identifier for a uniform input parameter to the shader (a formal function parameter or in-scope
	//	global) that will be bound to an external resource.
	XsdGoPkgHasAttr_Symbol_XsdtNCName_

	XsdGoPkgHasGroup_GlslParamType

	XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Param_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_
}

//	If the WalkHandlers.TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind function is not nil (ie. was set by outside code), calls it with this TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind instance.
func (me *TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasGroup_GlslParamType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Param_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Bind_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_ struct {
	//	Binds values to uniform inputs of a shader.
	Binds []*TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind `xml:"http://www.collada.org/2005/11/COLLADASchema bind"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Bind_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Bind_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Bind_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_ instance.
func (me *XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Bind_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Bind_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Binds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A string containing command-line operations for the shader compiler.
type XsdGoPkgHasElem_compiler_optionssequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerOptions_XsdtString_ struct {
	//	A string containing command-line operations for the shader compiler.
	CompilerOptions xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema compiler_options"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_compiler_optionssequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerOptions_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_compiler_optionssequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerOptions_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_compiler_optionssequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerOptions_XsdtString_ instance.
func (me *XsdGoPkgHasElem_compiler_optionssequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerOptions_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_compiler_optionssequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerOptions_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The entry symbol for the shader function.
type XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Name_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_ struct {
	//	The entry symbol for the shader function.
	Name *TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName `xml:"http://www.collada.org/2005/11/COLLADASchema name"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Name_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Name_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Name_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_ instance.
func (me *XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Name_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Name_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Name.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader struct {
	//	A string containing command-line operations for the shader compiler.
	XsdGoPkgHasElem_compiler_optionssequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerOptions_XsdtString_

	//	The entry symbol for the shader function.
	XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Name_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_

	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

	//	A string declaring which profile or platform the compiler is targeting this shader for.
	XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerTarget_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_

	//	In which pipeline stage this programmable shader is designed to execute, for example, VERTEX, FRAGMENT, etc.
	XsdGoPkgHasAttr_Stage_TglslPipelineStage_

	//	Binds values to uniform inputs of a shader.
	XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Bind_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_
}

//	If the WalkHandlers.TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader function is not nil (ie. was set by outside code), calls it with this TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader instance as the single argument. Then calls the Walk() method on 5/6 embed(s) and 0/0 field(s) belonging to this TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader instance.
func (me *TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Bind_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_compiler_optionssequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerOptions_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Name_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerTarget_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Shader_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader_ struct {
	//	Declare and prepare a shader for execution in the rendering pipeline of a pass.
	Shaders []*TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader `xml:"http://www.collada.org/2005/11/COLLADASchema shader"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Shader_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Shader_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Shader_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader_ instance.
func (me *XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Shader_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Shader_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Shaders {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TfxClearcolorCommon struct {
	XsdGoPkgValue TfxColorCommon `xml:",chardata"`

	XsdGoPkgHasAttr_Index_XsdtNonNegativeInteger_0
}

//	Returns the value of its XsdGoPkgValue field as a Tfloat4 (which TfxColorCommon is just aliasing).
func (me *TfxClearcolorCommon) ToTfloat4() Tfloat4 { return me.XsdGoPkgValue.ToTfloat4() }

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TfxClearcolorCommon) ToTfxColorCommon() TfxColorCommon { return me.XsdGoPkgValue }

//	Returns the value of its XsdGoPkgValue field as a xsdt.String (which TfxColorCommon is just aliasing).
func (me *TfxClearcolorCommon) ToXsdtString() xsdt.String {
	return me.XsdGoPkgValue.ToTfloat4().ToTListOfFloats().ToXsdtString()
}

//	Returns the value of its XsdGoPkgValue field as a TListOfFloats (which TfxColorCommon is just aliasing).
func (me *TfxClearcolorCommon) ToTListOfFloats() TListOfFloats {
	return me.XsdGoPkgValue.ToTfloat4().ToTListOfFloats()
}

//	If the WalkHandlers.TfxClearcolorCommon function is not nil (ie. was set by outside code), calls it with this TfxClearcolorCommon instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TfxClearcolorCommon instance.
func (me *TfxClearcolorCommon) Walk() (err error) {
	if fn := WalkHandlers.TfxClearcolorCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_color_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorClear_TfxClearcolorCommon_ struct {
	ColorClears []*TfxClearcolorCommon `xml:"http://www.collada.org/2005/11/COLLADASchema color_clear"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_color_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorClear_TfxClearcolorCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_color_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorClear_TfxClearcolorCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_color_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorClear_TfxClearcolorCommon_ instance.
func (me *XsdGoPkgHasElems_color_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorClear_TfxClearcolorCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_color_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorClear_TfxClearcolorCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ColorClears {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TfxCleardepthCommon struct {
	XsdGoPkgValue Tfloat `xml:",chardata"`

	XsdGoPkgHasAttr_Index_XsdtNonNegativeInteger_0
}

//	Returns the value of its XsdGoPkgValue field as a xsdt.Double (which Tfloat is just aliasing).
func (me *TfxCleardepthCommon) ToXsdtDouble() xsdt.Double { return me.XsdGoPkgValue.ToXsdtDouble() }

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TfxCleardepthCommon) ToTfloat() Tfloat { return me.XsdGoPkgValue }

//	If the WalkHandlers.TfxCleardepthCommon function is not nil (ie. was set by outside code), calls it with this TfxCleardepthCommon instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TfxCleardepthCommon instance.
func (me *TfxCleardepthCommon) Walk() (err error) {
	if fn := WalkHandlers.TfxCleardepthCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_depth_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthClear_TfxCleardepthCommon_ struct {
	DepthClears []*TfxCleardepthCommon `xml:"http://www.collada.org/2005/11/COLLADASchema depth_clear"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_depth_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthClear_TfxCleardepthCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_depth_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthClear_TfxCleardepthCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_depth_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthClear_TfxCleardepthCommon_ instance.
func (me *XsdGoPkgHasElems_depth_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthClear_TfxCleardepthCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_depth_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthClear_TfxCleardepthCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DepthClears {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TfxDepthtargetCommon struct {
	XsdGoPkgValue xsdt.NCName `xml:",chardata"`

	XsdGoPkgHasAttr_Face_TfxSurfaceFaceEnum_PositiveX

	XsdGoPkgHasAttr_Index_XsdtNonNegativeInteger_0

	XsdGoPkgHasAttr_Mip_XsdtNonNegativeInteger_0

	XsdGoPkgHasAttr_Slice_XsdtNonNegativeInteger_0
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TfxDepthtargetCommon) ToXsdtNCName() xsdt.NCName { return me.XsdGoPkgValue }

//	If the WalkHandlers.TfxDepthtargetCommon function is not nil (ie. was set by outside code), calls it with this TfxDepthtargetCommon instance as the single argument. Then calls the Walk() method on 0/4 embed(s) and 0/1 field(s) belonging to this TfxDepthtargetCommon instance.
func (me *TfxDepthtargetCommon) Walk() (err error) {
	if fn := WalkHandlers.TfxDepthtargetCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_depth_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthTarget_TfxDepthtargetCommon_ struct {
	DepthTargets []*TfxDepthtargetCommon `xml:"http://www.collada.org/2005/11/COLLADASchema depth_target"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_depth_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthTarget_TfxDepthtargetCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_depth_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthTarget_TfxDepthtargetCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_depth_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthTarget_TfxDepthtargetCommon_ instance.
func (me *XsdGoPkgHasElems_depth_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthTarget_TfxDepthtargetCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_depth_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthTarget_TfxDepthtargetCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DepthTargets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A group that defines all of the renderstates used for the CG and GLSL profiles.
type XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegl_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToOneEnable_ struct {
	SampleAlphaToOneEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema sample_alpha_to_one_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegl_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToOneEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegl_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToOneEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegl_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToOneEnable_ instance.
func (me *XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegl_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToOneEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegl_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToOneEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SampleAlphaToOneEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_shade_modelchoicegl_pipeline_settingsschema_ShadeModel_TxsdGlPipelineSettingsChoiceShadeModel_ struct {
	ShadeModel *TxsdGlesPipelineSettingsChoiceShadeModel `xml:"http://www.collada.org/2005/11/COLLADASchema shade_model"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_shade_modelchoicegl_pipeline_settingsschema_ShadeModel_TxsdGlPipelineSettingsChoiceShadeModel_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_shade_modelchoicegl_pipeline_settingsschema_ShadeModel_TxsdGlPipelineSettingsChoiceShadeModel_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_shade_modelchoicegl_pipeline_settingsschema_ShadeModel_TxsdGlPipelineSettingsChoiceShadeModel_ instance.
func (me *XsdGoPkgHasElem_shade_modelchoicegl_pipeline_settingsschema_ShadeModel_TxsdGlPipelineSettingsChoiceShadeModel_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_shade_modelchoicegl_pipeline_settingsschema_ShadeModel_TxsdGlPipelineSettingsChoiceShadeModel_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ShadeModel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglMaxLightsIndex xsdt.NonNegativeInteger

//	Since TglMaxLightsIndex is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TglMaxLightsIndex) Set(s string) { (*xsdt.NonNegativeInteger)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TglMaxLightsIndex's alias type xsdt.NonNegativeInteger.
func (me TglMaxLightsIndex) ToXsdtNonNegativeInteger() xsdt.NonNegativeInteger {
	return xsdt.NonNegativeInteger(me)
}

//	Returns a string representation of this TglMaxLightsIndex's current non-string scalar value.
func (me TglMaxLightsIndex) String() string { return xsdt.NonNegativeInteger(me).String() }

type XsdGoPkgHasAttr_Index_TglMaxLightsIndex_ struct {
	Index TglMaxLightsIndex `xml:"http://www.collada.org/2005/11/COLLADASchema index,attr"`
}

type TxsdGlPipelineSettingsChoiceLightSpotCutoff struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglMaxLightsIndex_

	XsdGoPkgHasAttr_Value_Tfloat_180
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceLightSpotCutoff function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceLightSpotCutoff instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceLightSpotCutoff instance.
func (me *TxsdGlPipelineSettingsChoiceLightSpotCutoff) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceLightSpotCutoff; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_spot_cutoffchoicegl_pipeline_settingsschema_LightSpotCutoff_TxsdGlPipelineSettingsChoiceLightSpotCutoff_ struct {
	LightSpotCutoff *TxsdGlPipelineSettingsChoiceLightSpotCutoff `xml:"http://www.collada.org/2005/11/COLLADASchema light_spot_cutoff"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_spot_cutoffchoicegl_pipeline_settingsschema_LightSpotCutoff_TxsdGlPipelineSettingsChoiceLightSpotCutoff_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_spot_cutoffchoicegl_pipeline_settingsschema_LightSpotCutoff_TxsdGlPipelineSettingsChoiceLightSpotCutoff_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_spot_cutoffchoicegl_pipeline_settingsschema_LightSpotCutoff_TxsdGlPipelineSettingsChoiceLightSpotCutoff_ instance.
func (me *XsdGoPkgHasElem_light_spot_cutoffchoicegl_pipeline_settingsschema_LightSpotCutoff_TxsdGlPipelineSettingsChoiceLightSpotCutoff_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_spot_cutoffchoicegl_pipeline_settingsschema_LightSpotCutoff_TxsdGlPipelineSettingsChoiceLightSpotCutoff_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightSpotCutoff.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsChoiceLightSpecular struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat4_0000

	XsdGoPkgHasAttr_Index_TglMaxLightsIndex_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceLightSpecular function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceLightSpecular instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceLightSpecular instance.
func (me *TxsdGlPipelineSettingsChoiceLightSpecular) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceLightSpecular; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_specularchoicegl_pipeline_settingsschema_LightSpecular_TxsdGlPipelineSettingsChoiceLightSpecular_ struct {
	LightSpecular *TxsdGlPipelineSettingsChoiceLightSpecular `xml:"http://www.collada.org/2005/11/COLLADASchema light_specular"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_specularchoicegl_pipeline_settingsschema_LightSpecular_TxsdGlPipelineSettingsChoiceLightSpecular_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_specularchoicegl_pipeline_settingsschema_LightSpecular_TxsdGlPipelineSettingsChoiceLightSpecular_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_specularchoicegl_pipeline_settingsschema_LightSpecular_TxsdGlPipelineSettingsChoiceLightSpecular_ instance.
func (me *XsdGoPkgHasElem_light_specularchoicegl_pipeline_settingsschema_LightSpecular_TxsdGlPipelineSettingsChoiceLightSpecular_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_specularchoicegl_pipeline_settingsschema_LightSpecular_TxsdGlPipelineSettingsChoiceLightSpecular_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightSpecular.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_TglLightModelColorControlType_SingleColor struct {
	Value TglLightModelColorControlType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "SINGLE_COLOR"
func (me XsdGoPkgHasAttr_Value_TglLightModelColorControlType_SingleColor) ValueDefault() TglLightModelColorControlType {
	return TglLightModelColorControlType("SINGLE_COLOR")
}

type TxsdGlPipelineSettingsChoiceLightModelColorControl struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglLightModelColorControlType_SingleColor
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceLightModelColorControl function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceLightModelColorControl instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceLightModelColorControl instance.
func (me *TxsdGlPipelineSettingsChoiceLightModelColorControl) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceLightModelColorControl; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_model_color_controlchoicegl_pipeline_settingsschema_LightModelColorControl_TxsdGlPipelineSettingsChoiceLightModelColorControl_ struct {
	LightModelColorControl *TxsdGlPipelineSettingsChoiceLightModelColorControl `xml:"http://www.collada.org/2005/11/COLLADASchema light_model_color_control"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_model_color_controlchoicegl_pipeline_settingsschema_LightModelColorControl_TxsdGlPipelineSettingsChoiceLightModelColorControl_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_model_color_controlchoicegl_pipeline_settingsschema_LightModelColorControl_TxsdGlPipelineSettingsChoiceLightModelColorControl_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_model_color_controlchoicegl_pipeline_settingsschema_LightModelColorControl_TxsdGlPipelineSettingsChoiceLightModelColorControl_ instance.
func (me *XsdGoPkgHasElem_light_model_color_controlchoicegl_pipeline_settingsschema_LightModelColorControl_TxsdGlPipelineSettingsChoiceLightModelColorControl_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_model_color_controlchoicegl_pipeline_settingsschema_LightModelColorControl_TxsdGlPipelineSettingsChoiceLightModelColorControl_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightModelColorControl.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type Tstring xsdt.String

//	This convenience method just performs a simple type conversion to Tstring's alias type xsdt.String.
func (me Tstring) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since Tstring is just a simple String type, this merely returns the current string value.
func (me Tstring) String() string { return xsdt.String(me).String() }

//	Since Tstring is just a simple String type, this merely sets the current value from the specified string.
func (me *Tstring) Set(s string) { (*xsdt.String)(me).Set(s) }

type XsdGoPkgHasAttr_Value_Tstring_ struct {
	Value Tstring `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

type TglMaxTextureImageUnitsIndex xsdt.NonNegativeInteger

//	This convenience method just performs a simple type conversion to TglMaxTextureImageUnitsIndex's alias type xsdt.NonNegativeInteger.
func (me TglMaxTextureImageUnitsIndex) ToXsdtNonNegativeInteger() xsdt.NonNegativeInteger {
	return xsdt.NonNegativeInteger(me)
}

//	Returns a string representation of this TglMaxTextureImageUnitsIndex's current non-string scalar value.
func (me TglMaxTextureImageUnitsIndex) String() string { return xsdt.NonNegativeInteger(me).String() }

//	Since TglMaxTextureImageUnitsIndex is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TglMaxTextureImageUnitsIndex) Set(s string) { (*xsdt.NonNegativeInteger)(me).Set(s) }

type XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndex_ struct {
	Index TglMaxTextureImageUnitsIndex `xml:"http://www.collada.org/2005/11/COLLADASchema index,attr"`
}

type TxsdGlPipelineSettingsChoiceTextureEnvMode struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tstring_

	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndex_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceTextureEnvMode function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceTextureEnvMode instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceTextureEnvMode instance.
func (me *TxsdGlPipelineSettingsChoiceTextureEnvMode) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceTextureEnvMode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_texture_env_modechoicegl_pipeline_settingsschema_TextureEnvMode_TxsdGlPipelineSettingsChoiceTextureEnvMode_ struct {
	TextureEnvMode *TxsdGlPipelineSettingsChoiceTextureEnvMode `xml:"http://www.collada.org/2005/11/COLLADASchema texture_env_mode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_texture_env_modechoicegl_pipeline_settingsschema_TextureEnvMode_TxsdGlPipelineSettingsChoiceTextureEnvMode_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texture_env_modechoicegl_pipeline_settingsschema_TextureEnvMode_TxsdGlPipelineSettingsChoiceTextureEnvMode_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texture_env_modechoicegl_pipeline_settingsschema_TextureEnvMode_TxsdGlPipelineSettingsChoiceTextureEnvMode_ instance.
func (me *XsdGoPkgHasElem_texture_env_modechoicegl_pipeline_settingsschema_TextureEnvMode_TxsdGlPipelineSettingsChoiceTextureEnvMode_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_texture_env_modechoicegl_pipeline_settingsschema_TextureEnvMode_TxsdGlPipelineSettingsChoiceTextureEnvMode_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TextureEnvMode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_funcsequencestencil_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceStencilFuncSequenceFunc_ struct {
	Func *TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc `xml:"http://www.collada.org/2005/11/COLLADASchema func"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_funcsequencestencil_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceStencilFuncSequenceFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_funcsequencestencil_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceStencilFuncSequenceFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_funcsequencestencil_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceStencilFuncSequenceFunc_ instance.
func (me *XsdGoPkgHasElem_funcsequencestencil_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceStencilFuncSequenceFunc_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_funcsequencestencil_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceStencilFuncSequenceFunc_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Func.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_refsequencestencil_funcchoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSequenceRef_ struct {
	Ref *TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef `xml:"http://www.collada.org/2005/11/COLLADASchema ref"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_refsequencestencil_funcchoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSequenceRef_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_refsequencestencil_funcchoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSequenceRef_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_refsequencestencil_funcchoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSequenceRef_ instance.
func (me *XsdGoPkgHasElem_refsequencestencil_funcchoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSequenceRef_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_refsequencestencil_funcchoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSequenceRef_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_masksequencestencil_funcchoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSequenceMask_ struct {
	Mask *TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask `xml:"http://www.collada.org/2005/11/COLLADASchema mask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_masksequencestencil_funcchoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSequenceMask_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_masksequencestencil_funcchoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSequenceMask_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_masksequencestencil_funcchoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSequenceMask_ instance.
func (me *XsdGoPkgHasElem_masksequencestencil_funcchoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSequenceMask_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_masksequencestencil_funcchoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSequenceMask_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Mask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsChoiceStencilFunc struct {
	XsdGoPkgHasElem_funcsequencestencil_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceStencilFuncSequenceFunc_

	XsdGoPkgHasElem_refsequencestencil_funcchoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSequenceRef_

	XsdGoPkgHasElem_masksequencestencil_funcchoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSequenceMask_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceStencilFunc function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceStencilFunc instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceStencilFunc instance.
func (me *TxsdGlPipelineSettingsChoiceStencilFunc) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceStencilFunc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_funcsequencestencil_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceStencilFuncSequenceFunc_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_refsequencestencil_funcchoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSequenceRef_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_masksequencestencil_funcchoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSequenceMask_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_stencil_funcchoicegl_pipeline_settingsschema_StencilFunc_TxsdGlPipelineSettingsChoiceStencilFunc_ struct {
	StencilFunc *TxsdGlPipelineSettingsChoiceStencilFunc `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_func"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_stencil_funcchoicegl_pipeline_settingsschema_StencilFunc_TxsdGlPipelineSettingsChoiceStencilFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_funcchoicegl_pipeline_settingsschema_StencilFunc_TxsdGlPipelineSettingsChoiceStencilFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_funcchoicegl_pipeline_settingsschema_StencilFunc_TxsdGlPipelineSettingsChoiceStencilFunc_ instance.
func (me *XsdGoPkgHasElem_stencil_funcchoicegl_pipeline_settingsschema_StencilFunc_TxsdGlPipelineSettingsChoiceStencilFunc_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_stencil_funcchoicegl_pipeline_settingsschema_StencilFunc_TxsdGlPipelineSettingsChoiceStencilFunc_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StencilFunc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_TglBlendEquationType_FuncAdd struct {
	Value TglBlendEquationType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "FUNC_ADD"
func (me XsdGoPkgHasAttr_Value_TglBlendEquationType_FuncAdd) ValueDefault() TglBlendEquationType {
	return TglBlendEquationType("FUNC_ADD")
}

type TxsdGlPipelineSettingsChoiceBlendEquation struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglBlendEquationType_FuncAdd
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceBlendEquation function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceBlendEquation instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceBlendEquation instance.
func (me *TxsdGlPipelineSettingsChoiceBlendEquation) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceBlendEquation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_blend_equationchoicegl_pipeline_settingsschema_BlendEquation_TxsdGlPipelineSettingsChoiceBlendEquation_ struct {
	BlendEquation *TxsdGlPipelineSettingsChoiceBlendEquation `xml:"http://www.collada.org/2005/11/COLLADASchema blend_equation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_blend_equationchoicegl_pipeline_settingsschema_BlendEquation_TxsdGlPipelineSettingsChoiceBlendEquation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_blend_equationchoicegl_pipeline_settingsschema_BlendEquation_TxsdGlPipelineSettingsChoiceBlendEquation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_blend_equationchoicegl_pipeline_settingsschema_BlendEquation_TxsdGlPipelineSettingsChoiceBlendEquation_ instance.
func (me *XsdGoPkgHasElem_blend_equationchoicegl_pipeline_settingsschema_BlendEquation_TxsdGlPipelineSettingsChoiceBlendEquation_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_blend_equationchoicegl_pipeline_settingsschema_BlendEquation_TxsdGlPipelineSettingsChoiceBlendEquation_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BlendEquation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_backsequencestencil_func_separatechoicegl_pipeline_settingsschema_Back_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceBack_ struct {
	Back *TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc `xml:"http://www.collada.org/2005/11/COLLADASchema back"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_backsequencestencil_func_separatechoicegl_pipeline_settingsschema_Back_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceBack_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_backsequencestencil_func_separatechoicegl_pipeline_settingsschema_Back_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceBack_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_backsequencestencil_func_separatechoicegl_pipeline_settingsschema_Back_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceBack_ instance.
func (me *XsdGoPkgHasElem_backsequencestencil_func_separatechoicegl_pipeline_settingsschema_Back_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceBack_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_backsequencestencil_func_separatechoicegl_pipeline_settingsschema_Back_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceBack_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Back.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_masksequencestencil_func_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceMask_ struct {
	Mask *TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask `xml:"http://www.collada.org/2005/11/COLLADASchema mask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_masksequencestencil_func_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceMask_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_masksequencestencil_func_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceMask_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_masksequencestencil_func_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceMask_ instance.
func (me *XsdGoPkgHasElem_masksequencestencil_func_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceMask_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_masksequencestencil_func_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceMask_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Mask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegl_pipeline_settingsschema_Front_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceFront_ struct {
	Front *TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc `xml:"http://www.collada.org/2005/11/COLLADASchema front"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegl_pipeline_settingsschema_Front_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceFront_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegl_pipeline_settingsschema_Front_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceFront_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegl_pipeline_settingsschema_Front_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceFront_ instance.
func (me *XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegl_pipeline_settingsschema_Front_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceFront_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegl_pipeline_settingsschema_Front_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceFront_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Front.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_refsequencestencil_func_separatechoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceRef_ struct {
	Ref *TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef `xml:"http://www.collada.org/2005/11/COLLADASchema ref"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_refsequencestencil_func_separatechoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceRef_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_refsequencestencil_func_separatechoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceRef_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_refsequencestencil_func_separatechoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceRef_ instance.
func (me *XsdGoPkgHasElem_refsequencestencil_func_separatechoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceRef_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_refsequencestencil_func_separatechoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceRef_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsChoiceStencilFuncSeparate struct {
	XsdGoPkgHasElem_backsequencestencil_func_separatechoicegl_pipeline_settingsschema_Back_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceBack_

	XsdGoPkgHasElem_masksequencestencil_func_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceMask_

	XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegl_pipeline_settingsschema_Front_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceFront_

	XsdGoPkgHasElem_refsequencestencil_func_separatechoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceRef_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceStencilFuncSeparate function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceStencilFuncSeparate instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceStencilFuncSeparate instance.
func (me *TxsdGlPipelineSettingsChoiceStencilFuncSeparate) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceStencilFuncSeparate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_backsequencestencil_func_separatechoicegl_pipeline_settingsschema_Back_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceBack_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_masksequencestencil_func_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceMask_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegl_pipeline_settingsschema_Front_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceFront_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_refsequencestencil_func_separatechoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceRef_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_stencil_func_separatechoicegl_pipeline_settingsschema_StencilFuncSeparate_TxsdGlPipelineSettingsChoiceStencilFuncSeparate_ struct {
	StencilFuncSeparate *TxsdGlPipelineSettingsChoiceStencilFuncSeparate `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_func_separate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_stencil_func_separatechoicegl_pipeline_settingsschema_StencilFuncSeparate_TxsdGlPipelineSettingsChoiceStencilFuncSeparate_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_func_separatechoicegl_pipeline_settingsschema_StencilFuncSeparate_TxsdGlPipelineSettingsChoiceStencilFuncSeparate_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_func_separatechoicegl_pipeline_settingsschema_StencilFuncSeparate_TxsdGlPipelineSettingsChoiceStencilFuncSeparate_ instance.
func (me *XsdGoPkgHasElem_stencil_func_separatechoicegl_pipeline_settingsschema_StencilFuncSeparate_TxsdGlPipelineSettingsChoiceStencilFuncSeparate_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_stencil_func_separatechoicegl_pipeline_settingsschema_StencilFuncSeparate_TxsdGlPipelineSettingsChoiceStencilFuncSeparate_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StencilFuncSeparate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_material_shininesschoicegl_pipeline_settingsschema_MaterialShininess_TxsdGlPipelineSettingsChoiceMaterialShininess_ struct {
	MaterialShininess *TxsdGlesPipelineSettingsChoicePointSizeMin `xml:"http://www.collada.org/2005/11/COLLADASchema material_shininess"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_material_shininesschoicegl_pipeline_settingsschema_MaterialShininess_TxsdGlPipelineSettingsChoiceMaterialShininess_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_material_shininesschoicegl_pipeline_settingsschema_MaterialShininess_TxsdGlPipelineSettingsChoiceMaterialShininess_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_material_shininesschoicegl_pipeline_settingsschema_MaterialShininess_TxsdGlPipelineSettingsChoiceMaterialShininess_ instance.
func (me *XsdGoPkgHasElem_material_shininesschoicegl_pipeline_settingsschema_MaterialShininess_TxsdGlPipelineSettingsChoiceMaterialShininess_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_material_shininesschoicegl_pipeline_settingsschema_MaterialShininess_TxsdGlPipelineSettingsChoiceMaterialShininess_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MaterialShininess.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_depth_test_enablechoicegl_pipeline_settingsschema_DepthTestEnable_TxsdGlPipelineSettingsChoiceDepthTestEnable_ struct {
	DepthTestEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema depth_test_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_depth_test_enablechoicegl_pipeline_settingsschema_DepthTestEnable_TxsdGlPipelineSettingsChoiceDepthTestEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_test_enablechoicegl_pipeline_settingsschema_DepthTestEnable_TxsdGlPipelineSettingsChoiceDepthTestEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_depth_test_enablechoicegl_pipeline_settingsschema_DepthTestEnable_TxsdGlPipelineSettingsChoiceDepthTestEnable_ instance.
func (me *XsdGoPkgHasElem_depth_test_enablechoicegl_pipeline_settingsschema_DepthTestEnable_TxsdGlPipelineSettingsChoiceDepthTestEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_depth_test_enablechoicegl_pipeline_settingsschema_DepthTestEnable_TxsdGlPipelineSettingsChoiceDepthTestEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DepthTestEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_blend_colorchoicegl_pipeline_settingsschema_BlendColor_TxsdGlPipelineSettingsChoiceBlendColor_ struct {
	BlendColor *TxsdGlesPipelineSettingsChoiceFogColor `xml:"http://www.collada.org/2005/11/COLLADASchema blend_color"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_blend_colorchoicegl_pipeline_settingsschema_BlendColor_TxsdGlPipelineSettingsChoiceBlendColor_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_blend_colorchoicegl_pipeline_settingsschema_BlendColor_TxsdGlPipelineSettingsChoiceBlendColor_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_blend_colorchoicegl_pipeline_settingsschema_BlendColor_TxsdGlPipelineSettingsChoiceBlendColor_ instance.
func (me *XsdGoPkgHasElem_blend_colorchoicegl_pipeline_settingsschema_BlendColor_TxsdGlPipelineSettingsChoiceBlendColor_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_blend_colorchoicegl_pipeline_settingsschema_BlendColor_TxsdGlPipelineSettingsChoiceBlendColor_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BlendColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_TglPolygonModeType_Fill struct {
	Value TglPolygonModeType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "FILL"
func (me XsdGoPkgHasAttr_Value_TglPolygonModeType_Fill) ValueDefault() TglPolygonModeType {
	return TglPolygonModeType("FILL")
}

type TxsdGlPipelineSettingsChoicePolygonModeSequenceMode struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglPolygonModeType_Fill
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoicePolygonModeSequenceMode function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoicePolygonModeSequenceMode instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoicePolygonModeSequenceMode instance.
func (me *TxsdGlPipelineSettingsChoicePolygonModeSequenceMode) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoicePolygonModeSequenceMode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_modesequencepolygon_modechoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoicePolygonModeSequenceMode_ struct {
	Mode *TxsdGlPipelineSettingsChoicePolygonModeSequenceMode `xml:"http://www.collada.org/2005/11/COLLADASchema mode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_modesequencepolygon_modechoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoicePolygonModeSequenceMode_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_modesequencepolygon_modechoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoicePolygonModeSequenceMode_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_modesequencepolygon_modechoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoicePolygonModeSequenceMode_ instance.
func (me *XsdGoPkgHasElem_modesequencepolygon_modechoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoicePolygonModeSequenceMode_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_modesequencepolygon_modechoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoicePolygonModeSequenceMode_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Mode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_TglFaceType_FrontAndBack struct {
	Value TglFaceType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "FRONT_AND_BACK"
func (me XsdGoPkgHasAttr_Value_TglFaceType_FrontAndBack) ValueDefault() TglFaceType {
	return TglFaceType("FRONT_AND_BACK")
}

type TxsdGlPipelineSettingsChoicePolygonModeSequenceFace struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglFaceType_FrontAndBack
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoicePolygonModeSequenceFace function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoicePolygonModeSequenceFace instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoicePolygonModeSequenceFace instance.
func (me *TxsdGlPipelineSettingsChoicePolygonModeSequenceFace) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoicePolygonModeSequenceFace; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_facesequencepolygon_modechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoicePolygonModeSequenceFace_ struct {
	Face *TxsdGlPipelineSettingsChoicePolygonModeSequenceFace `xml:"http://www.collada.org/2005/11/COLLADASchema face"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_facesequencepolygon_modechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoicePolygonModeSequenceFace_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_facesequencepolygon_modechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoicePolygonModeSequenceFace_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_facesequencepolygon_modechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoicePolygonModeSequenceFace_ instance.
func (me *XsdGoPkgHasElem_facesequencepolygon_modechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoicePolygonModeSequenceFace_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_facesequencepolygon_modechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoicePolygonModeSequenceFace_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Face.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsChoicePolygonMode struct {
	XsdGoPkgHasElem_modesequencepolygon_modechoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoicePolygonModeSequenceMode_

	XsdGoPkgHasElem_facesequencepolygon_modechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoicePolygonModeSequenceFace_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoicePolygonMode function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoicePolygonMode instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoicePolygonMode instance.
func (me *TxsdGlPipelineSettingsChoicePolygonMode) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoicePolygonMode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_modesequencepolygon_modechoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoicePolygonModeSequenceMode_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_facesequencepolygon_modechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoicePolygonModeSequenceFace_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_polygon_modechoicegl_pipeline_settingsschema_PolygonMode_TxsdGlPipelineSettingsChoicePolygonMode_ struct {
	PolygonMode *TxsdGlPipelineSettingsChoicePolygonMode `xml:"http://www.collada.org/2005/11/COLLADASchema polygon_mode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_polygon_modechoicegl_pipeline_settingsschema_PolygonMode_TxsdGlPipelineSettingsChoicePolygonMode_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_polygon_modechoicegl_pipeline_settingsschema_PolygonMode_TxsdGlPipelineSettingsChoicePolygonMode_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_polygon_modechoicegl_pipeline_settingsschema_PolygonMode_TxsdGlPipelineSettingsChoicePolygonMode_ instance.
func (me *XsdGoPkgHasElem_polygon_modechoicegl_pipeline_settingsschema_PolygonMode_TxsdGlPipelineSettingsChoicePolygonMode_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_polygon_modechoicegl_pipeline_settingsschema_PolygonMode_TxsdGlPipelineSettingsChoicePolygonMode_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PolygonMode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsChoiceLightSpotDirection struct {
	XsdGoPkgHasAttr_Index_TglMaxLightsIndex_

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat3_001
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceLightSpotDirection function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceLightSpotDirection instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceLightSpotDirection instance.
func (me *TxsdGlPipelineSettingsChoiceLightSpotDirection) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceLightSpotDirection; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_spot_directionchoicegl_pipeline_settingsschema_LightSpotDirection_TxsdGlPipelineSettingsChoiceLightSpotDirection_ struct {
	LightSpotDirection *TxsdGlPipelineSettingsChoiceLightSpotDirection `xml:"http://www.collada.org/2005/11/COLLADASchema light_spot_direction"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_spot_directionchoicegl_pipeline_settingsschema_LightSpotDirection_TxsdGlPipelineSettingsChoiceLightSpotDirection_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_spot_directionchoicegl_pipeline_settingsschema_LightSpotDirection_TxsdGlPipelineSettingsChoiceLightSpotDirection_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_spot_directionchoicegl_pipeline_settingsschema_LightSpotDirection_TxsdGlPipelineSettingsChoiceLightSpotDirection_ instance.
func (me *XsdGoPkgHasElem_light_spot_directionchoicegl_pipeline_settingsschema_LightSpotDirection_TxsdGlPipelineSettingsChoiceLightSpotDirection_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_spot_directionchoicegl_pipeline_settingsschema_LightSpotDirection_TxsdGlPipelineSettingsChoiceLightSpotDirection_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightSpotDirection.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_multisample_enablechoicegl_pipeline_settingsschema_MultisampleEnable_TxsdGlPipelineSettingsChoiceMultisampleEnable_ struct {
	MultisampleEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema multisample_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_multisample_enablechoicegl_pipeline_settingsschema_MultisampleEnable_TxsdGlPipelineSettingsChoiceMultisampleEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_multisample_enablechoicegl_pipeline_settingsschema_MultisampleEnable_TxsdGlPipelineSettingsChoiceMultisampleEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_multisample_enablechoicegl_pipeline_settingsschema_MultisampleEnable_TxsdGlPipelineSettingsChoiceMultisampleEnable_ instance.
func (me *XsdGoPkgHasElem_multisample_enablechoicegl_pipeline_settingsschema_MultisampleEnable_TxsdGlPipelineSettingsChoiceMultisampleEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_multisample_enablechoicegl_pipeline_settingsschema_MultisampleEnable_TxsdGlPipelineSettingsChoiceMultisampleEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MultisampleEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_facesequencecolor_materialchoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceColorMaterialSequenceFace_ struct {
	Face *TxsdGlPipelineSettingsChoicePolygonModeSequenceFace `xml:"http://www.collada.org/2005/11/COLLADASchema face"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_facesequencecolor_materialchoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceColorMaterialSequenceFace_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_facesequencecolor_materialchoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceColorMaterialSequenceFace_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_facesequencecolor_materialchoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceColorMaterialSequenceFace_ instance.
func (me *XsdGoPkgHasElem_facesequencecolor_materialchoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceColorMaterialSequenceFace_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_facesequencecolor_materialchoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceColorMaterialSequenceFace_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Face.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_TglMaterialType_AmbientAndDiffuse struct {
	Value TglMaterialType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "AMBIENT_AND_DIFFUSE"
func (me XsdGoPkgHasAttr_Value_TglMaterialType_AmbientAndDiffuse) ValueDefault() TglMaterialType {
	return TglMaterialType("AMBIENT_AND_DIFFUSE")
}

type TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglMaterialType_AmbientAndDiffuse
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode instance.
func (me *TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_modesequencecolor_materialchoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode_ struct {
	Mode *TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode `xml:"http://www.collada.org/2005/11/COLLADASchema mode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_modesequencecolor_materialchoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_modesequencecolor_materialchoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_modesequencecolor_materialchoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode_ instance.
func (me *XsdGoPkgHasElem_modesequencecolor_materialchoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_modesequencecolor_materialchoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Mode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsChoiceColorMaterial struct {
	XsdGoPkgHasElem_facesequencecolor_materialchoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceColorMaterialSequenceFace_

	XsdGoPkgHasElem_modesequencecolor_materialchoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceColorMaterial function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceColorMaterial instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceColorMaterial instance.
func (me *TxsdGlPipelineSettingsChoiceColorMaterial) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceColorMaterial; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_facesequencecolor_materialchoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceColorMaterialSequenceFace_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_modesequencecolor_materialchoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_color_materialchoicegl_pipeline_settingsschema_ColorMaterial_TxsdGlPipelineSettingsChoiceColorMaterial_ struct {
	ColorMaterial *TxsdGlPipelineSettingsChoiceColorMaterial `xml:"http://www.collada.org/2005/11/COLLADASchema color_material"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_color_materialchoicegl_pipeline_settingsschema_ColorMaterial_TxsdGlPipelineSettingsChoiceColorMaterial_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_color_materialchoicegl_pipeline_settingsschema_ColorMaterial_TxsdGlPipelineSettingsChoiceColorMaterial_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_color_materialchoicegl_pipeline_settingsschema_ColorMaterial_TxsdGlPipelineSettingsChoiceColorMaterial_ instance.
func (me *XsdGoPkgHasElem_color_materialchoicegl_pipeline_settingsschema_ColorMaterial_TxsdGlPipelineSettingsChoiceColorMaterial_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_color_materialchoicegl_pipeline_settingsschema_ColorMaterial_TxsdGlPipelineSettingsChoiceColorMaterial_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ColorMaterial.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_destsequenceblend_funcchoicegl_pipeline_settingsschema_Dest_TxsdGlPipelineSettingsChoiceBlendFuncSequenceDest_ struct {
	Dest *TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest `xml:"http://www.collada.org/2005/11/COLLADASchema dest"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_destsequenceblend_funcchoicegl_pipeline_settingsschema_Dest_TxsdGlPipelineSettingsChoiceBlendFuncSequenceDest_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_destsequenceblend_funcchoicegl_pipeline_settingsschema_Dest_TxsdGlPipelineSettingsChoiceBlendFuncSequenceDest_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_destsequenceblend_funcchoicegl_pipeline_settingsschema_Dest_TxsdGlPipelineSettingsChoiceBlendFuncSequenceDest_ instance.
func (me *XsdGoPkgHasElem_destsequenceblend_funcchoicegl_pipeline_settingsschema_Dest_TxsdGlPipelineSettingsChoiceBlendFuncSequenceDest_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_destsequenceblend_funcchoicegl_pipeline_settingsschema_Dest_TxsdGlPipelineSettingsChoiceBlendFuncSequenceDest_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Dest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_srcsequenceblend_funcchoicegl_pipeline_settingsschema_Src_TxsdGlPipelineSettingsChoiceBlendFuncSequenceSrc_ struct {
	Src *TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc `xml:"http://www.collada.org/2005/11/COLLADASchema src"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_srcsequenceblend_funcchoicegl_pipeline_settingsschema_Src_TxsdGlPipelineSettingsChoiceBlendFuncSequenceSrc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_srcsequenceblend_funcchoicegl_pipeline_settingsschema_Src_TxsdGlPipelineSettingsChoiceBlendFuncSequenceSrc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_srcsequenceblend_funcchoicegl_pipeline_settingsschema_Src_TxsdGlPipelineSettingsChoiceBlendFuncSequenceSrc_ instance.
func (me *XsdGoPkgHasElem_srcsequenceblend_funcchoicegl_pipeline_settingsschema_Src_TxsdGlPipelineSettingsChoiceBlendFuncSequenceSrc_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_srcsequenceblend_funcchoicegl_pipeline_settingsschema_Src_TxsdGlPipelineSettingsChoiceBlendFuncSequenceSrc_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Src.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsChoiceBlendFunc struct {
	XsdGoPkgHasElem_destsequenceblend_funcchoicegl_pipeline_settingsschema_Dest_TxsdGlPipelineSettingsChoiceBlendFuncSequenceDest_

	XsdGoPkgHasElem_srcsequenceblend_funcchoicegl_pipeline_settingsschema_Src_TxsdGlPipelineSettingsChoiceBlendFuncSequenceSrc_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceBlendFunc function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceBlendFunc instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceBlendFunc instance.
func (me *TxsdGlPipelineSettingsChoiceBlendFunc) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceBlendFunc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_destsequenceblend_funcchoicegl_pipeline_settingsschema_Dest_TxsdGlPipelineSettingsChoiceBlendFuncSequenceDest_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_srcsequenceblend_funcchoicegl_pipeline_settingsschema_Src_TxsdGlPipelineSettingsChoiceBlendFuncSequenceSrc_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_blend_funcchoicegl_pipeline_settingsschema_BlendFunc_TxsdGlPipelineSettingsChoiceBlendFunc_ struct {
	BlendFunc *TxsdGlPipelineSettingsChoiceBlendFunc `xml:"http://www.collada.org/2005/11/COLLADASchema blend_func"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_blend_funcchoicegl_pipeline_settingsschema_BlendFunc_TxsdGlPipelineSettingsChoiceBlendFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_blend_funcchoicegl_pipeline_settingsschema_BlendFunc_TxsdGlPipelineSettingsChoiceBlendFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_blend_funcchoicegl_pipeline_settingsschema_BlendFunc_TxsdGlPipelineSettingsChoiceBlendFunc_ instance.
func (me *XsdGoPkgHasElem_blend_funcchoicegl_pipeline_settingsschema_BlendFunc_TxsdGlPipelineSettingsChoiceBlendFunc_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_blend_funcchoicegl_pipeline_settingsschema_BlendFunc_TxsdGlPipelineSettingsChoiceBlendFunc_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BlendFunc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_material_specularchoicegl_pipeline_settingsschema_MaterialSpecular_TxsdGlPipelineSettingsChoiceMaterialSpecular_ struct {
	MaterialSpecular *TxsdGlesPipelineSettingsChoiceMaterialSpecular `xml:"http://www.collada.org/2005/11/COLLADASchema material_specular"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_material_specularchoicegl_pipeline_settingsschema_MaterialSpecular_TxsdGlPipelineSettingsChoiceMaterialSpecular_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_material_specularchoicegl_pipeline_settingsschema_MaterialSpecular_TxsdGlPipelineSettingsChoiceMaterialSpecular_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_material_specularchoicegl_pipeline_settingsschema_MaterialSpecular_TxsdGlPipelineSettingsChoiceMaterialSpecular_ instance.
func (me *XsdGoPkgHasElem_material_specularchoicegl_pipeline_settingsschema_MaterialSpecular_TxsdGlPipelineSettingsChoiceMaterialSpecular_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_material_specularchoicegl_pipeline_settingsschema_MaterialSpecular_TxsdGlPipelineSettingsChoiceMaterialSpecular_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MaterialSpecular.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_line_stipple_enablechoicegl_pipeline_settingsschema_LineStippleEnable_TxsdGlPipelineSettingsChoiceLineStippleEnable_ struct {
	LineStippleEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema line_stipple_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_line_stipple_enablechoicegl_pipeline_settingsschema_LineStippleEnable_TxsdGlPipelineSettingsChoiceLineStippleEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_line_stipple_enablechoicegl_pipeline_settingsschema_LineStippleEnable_TxsdGlPipelineSettingsChoiceLineStippleEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_line_stipple_enablechoicegl_pipeline_settingsschema_LineStippleEnable_TxsdGlPipelineSettingsChoiceLineStippleEnable_ instance.
func (me *XsdGoPkgHasElem_line_stipple_enablechoicegl_pipeline_settingsschema_LineStippleEnable_TxsdGlPipelineSettingsChoiceLineStippleEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_line_stipple_enablechoicegl_pipeline_settingsschema_LineStippleEnable_TxsdGlPipelineSettingsChoiceLineStippleEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LineStippleEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegl_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToCoverageEnable_ struct {
	SampleAlphaToCoverageEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema sample_alpha_to_coverage_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegl_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToCoverageEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegl_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToCoverageEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegl_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToCoverageEnable_ instance.
func (me *XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegl_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToCoverageEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegl_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToCoverageEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SampleAlphaToCoverageEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_point_smooth_enablechoicegl_pipeline_settingsschema_PointSmoothEnable_TxsdGlPipelineSettingsChoicePointSmoothEnable_ struct {
	PointSmoothEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema point_smooth_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_point_smooth_enablechoicegl_pipeline_settingsschema_PointSmoothEnable_TxsdGlPipelineSettingsChoicePointSmoothEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_smooth_enablechoicegl_pipeline_settingsschema_PointSmoothEnable_TxsdGlPipelineSettingsChoicePointSmoothEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_smooth_enablechoicegl_pipeline_settingsschema_PointSmoothEnable_TxsdGlPipelineSettingsChoicePointSmoothEnable_ instance.
func (me *XsdGoPkgHasElem_point_smooth_enablechoicegl_pipeline_settingsschema_PointSmoothEnable_TxsdGlPipelineSettingsChoicePointSmoothEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_point_smooth_enablechoicegl_pipeline_settingsschema_PointSmoothEnable_TxsdGlPipelineSettingsChoicePointSmoothEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PointSmoothEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsChoiceLightAmbient struct {
	XsdGoPkgHasAttr_Value_Tfloat4_0001

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglMaxLightsIndex_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceLightAmbient function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceLightAmbient instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceLightAmbient instance.
func (me *TxsdGlPipelineSettingsChoiceLightAmbient) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceLightAmbient; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_ambientchoicegl_pipeline_settingsschema_LightAmbient_TxsdGlPipelineSettingsChoiceLightAmbient_ struct {
	LightAmbient *TxsdGlPipelineSettingsChoiceLightAmbient `xml:"http://www.collada.org/2005/11/COLLADASchema light_ambient"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_ambientchoicegl_pipeline_settingsschema_LightAmbient_TxsdGlPipelineSettingsChoiceLightAmbient_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_ambientchoicegl_pipeline_settingsschema_LightAmbient_TxsdGlPipelineSettingsChoiceLightAmbient_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_ambientchoicegl_pipeline_settingsschema_LightAmbient_TxsdGlPipelineSettingsChoiceLightAmbient_ instance.
func (me *XsdGoPkgHasElem_light_ambientchoicegl_pipeline_settingsschema_LightAmbient_TxsdGlPipelineSettingsChoiceLightAmbient_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_ambientchoicegl_pipeline_settingsschema_LightAmbient_TxsdGlPipelineSettingsChoiceLightAmbient_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightAmbient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_logic_opchoicegl_pipeline_settingsschema_LogicOp_TxsdGlPipelineSettingsChoiceLogicOp_ struct {
	LogicOp *TxsdGlesPipelineSettingsChoiceLogicOp `xml:"http://www.collada.org/2005/11/COLLADASchema logic_op"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_logic_opchoicegl_pipeline_settingsschema_LogicOp_TxsdGlPipelineSettingsChoiceLogicOp_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_logic_opchoicegl_pipeline_settingsschema_LogicOp_TxsdGlPipelineSettingsChoiceLogicOp_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_logic_opchoicegl_pipeline_settingsschema_LogicOp_TxsdGlPipelineSettingsChoiceLogicOp_ instance.
func (me *XsdGoPkgHasElem_logic_opchoicegl_pipeline_settingsschema_LogicOp_TxsdGlPipelineSettingsChoiceLogicOp_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_logic_opchoicegl_pipeline_settingsschema_LogicOp_TxsdGlPipelineSettingsChoiceLogicOp_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LogicOp.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_cull_face_enablechoicegl_pipeline_settingsschema_CullFaceEnable_TxsdGlPipelineSettingsChoiceCullFaceEnable_ struct {
	CullFaceEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema cull_face_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_cull_face_enablechoicegl_pipeline_settingsschema_CullFaceEnable_TxsdGlPipelineSettingsChoiceCullFaceEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_cull_face_enablechoicegl_pipeline_settingsschema_CullFaceEnable_TxsdGlPipelineSettingsChoiceCullFaceEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_cull_face_enablechoicegl_pipeline_settingsschema_CullFaceEnable_TxsdGlPipelineSettingsChoiceCullFaceEnable_ instance.
func (me *XsdGoPkgHasElem_cull_face_enablechoicegl_pipeline_settingsschema_CullFaceEnable_TxsdGlPipelineSettingsChoiceCullFaceEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_cull_face_enablechoicegl_pipeline_settingsschema_CullFaceEnable_TxsdGlPipelineSettingsChoiceCullFaceEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CullFaceEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fog_colorchoicegl_pipeline_settingsschema_FogColor_TxsdGlPipelineSettingsChoiceFogColor_ struct {
	FogColor *TxsdGlesPipelineSettingsChoiceFogColor `xml:"http://www.collada.org/2005/11/COLLADASchema fog_color"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fog_colorchoicegl_pipeline_settingsschema_FogColor_TxsdGlPipelineSettingsChoiceFogColor_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_colorchoicegl_pipeline_settingsschema_FogColor_TxsdGlPipelineSettingsChoiceFogColor_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_colorchoicegl_pipeline_settingsschema_FogColor_TxsdGlPipelineSettingsChoiceFogColor_ instance.
func (me *XsdGoPkgHasElem_fog_colorchoicegl_pipeline_settingsschema_FogColor_TxsdGlPipelineSettingsChoiceFogColor_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fog_colorchoicegl_pipeline_settingsschema_FogColor_TxsdGlPipelineSettingsChoiceFogColor_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FogColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_line_widthchoicegl_pipeline_settingsschema_LineWidth_TxsdGlPipelineSettingsChoiceLineWidth_ struct {
	LineWidth *TxsdGlesPipelineSettingsChoicePointSizeMax `xml:"http://www.collada.org/2005/11/COLLADASchema line_width"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_line_widthchoicegl_pipeline_settingsschema_LineWidth_TxsdGlPipelineSettingsChoiceLineWidth_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_line_widthchoicegl_pipeline_settingsschema_LineWidth_TxsdGlPipelineSettingsChoiceLineWidth_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_line_widthchoicegl_pipeline_settingsschema_LineWidth_TxsdGlPipelineSettingsChoiceLineWidth_ instance.
func (me *XsdGoPkgHasElem_line_widthchoicegl_pipeline_settingsschema_LineWidth_TxsdGlPipelineSettingsChoiceLineWidth_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_line_widthchoicegl_pipeline_settingsschema_LineWidth_TxsdGlPipelineSettingsChoiceLineWidth_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LineWidth.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_valuechoicetexture2Dchoicegl_pipeline_settingsschema_Value_TglSampler2D_ struct {
	Value *TglSampler2D `xml:"http://www.collada.org/2005/11/COLLADASchema value"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_valuechoicetexture2Dchoicegl_pipeline_settingsschema_Value_TglSampler2D_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_valuechoicetexture2Dchoicegl_pipeline_settingsschema_Value_TglSampler2D_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_valuechoicetexture2Dchoicegl_pipeline_settingsschema_Value_TglSampler2D_ instance.
func (me *XsdGoPkgHasElem_valuechoicetexture2Dchoicegl_pipeline_settingsschema_Value_TglSampler2D_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_valuechoicetexture2Dchoicegl_pipeline_settingsschema_Value_TglSampler2D_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Value.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_paramchoicetexture2Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_ struct {
	Param xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema param"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_paramchoicetexture2Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_paramchoicetexture2Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_paramchoicetexture2Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_ instance.
func (me *XsdGoPkgHasElem_paramchoicetexture2Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_paramchoicetexture2Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsChoiceTexture2D struct {
	XsdGoPkgHasElem_valuechoicetexture2Dchoicegl_pipeline_settingsschema_Value_TglSampler2D_

	XsdGoPkgHasElem_paramchoicetexture2Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndex_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceTexture2D function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceTexture2D instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceTexture2D instance.
func (me *TxsdGlPipelineSettingsChoiceTexture2D) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceTexture2D; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_valuechoicetexture2Dchoicegl_pipeline_settingsschema_Value_TglSampler2D_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_paramchoicetexture2Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_texture2Dchoicegl_pipeline_settingsschema_Texture2D_TxsdGlPipelineSettingsChoiceTexture2D_ struct {
	Texture2D *TxsdGlPipelineSettingsChoiceTexture2D `xml:"http://www.collada.org/2005/11/COLLADASchema texture2D"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_texture2Dchoicegl_pipeline_settingsschema_Texture2D_TxsdGlPipelineSettingsChoiceTexture2D_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texture2Dchoicegl_pipeline_settingsschema_Texture2D_TxsdGlPipelineSettingsChoiceTexture2D_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texture2Dchoicegl_pipeline_settingsschema_Texture2D_TxsdGlPipelineSettingsChoiceTexture2D_ instance.
func (me *XsdGoPkgHasElem_texture2Dchoicegl_pipeline_settingsschema_Texture2D_TxsdGlPipelineSettingsChoiceTexture2D_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_texture2Dchoicegl_pipeline_settingsschema_Texture2D_TxsdGlPipelineSettingsChoiceTexture2D_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Texture2D.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_model_view_matrixchoicegl_pipeline_settingsschema_ModelViewMatrix_TxsdGlPipelineSettingsChoiceModelViewMatrix_ struct {
	ModelViewMatrix *TxsdGlesPipelineSettingsChoiceModelViewMatrix `xml:"http://www.collada.org/2005/11/COLLADASchema model_view_matrix"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_model_view_matrixchoicegl_pipeline_settingsschema_ModelViewMatrix_TxsdGlPipelineSettingsChoiceModelViewMatrix_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_model_view_matrixchoicegl_pipeline_settingsschema_ModelViewMatrix_TxsdGlPipelineSettingsChoiceModelViewMatrix_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_model_view_matrixchoicegl_pipeline_settingsschema_ModelViewMatrix_TxsdGlPipelineSettingsChoiceModelViewMatrix_ instance.
func (me *XsdGoPkgHasElem_model_view_matrixchoicegl_pipeline_settingsschema_ModelViewMatrix_TxsdGlPipelineSettingsChoiceModelViewMatrix_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_model_view_matrixchoicegl_pipeline_settingsschema_ModelViewMatrix_TxsdGlPipelineSettingsChoiceModelViewMatrix_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ModelViewMatrix.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fog_densitychoicegl_pipeline_settingsschema_FogDensity_TxsdGlPipelineSettingsChoiceFogDensity_ struct {
	FogDensity *TxsdGlesPipelineSettingsChoicePointSizeMax `xml:"http://www.collada.org/2005/11/COLLADASchema fog_density"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fog_densitychoicegl_pipeline_settingsschema_FogDensity_TxsdGlPipelineSettingsChoiceFogDensity_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_densitychoicegl_pipeline_settingsschema_FogDensity_TxsdGlPipelineSettingsChoiceFogDensity_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_densitychoicegl_pipeline_settingsschema_FogDensity_TxsdGlPipelineSettingsChoiceFogDensity_ instance.
func (me *XsdGoPkgHasElem_fog_densitychoicegl_pipeline_settingsschema_FogDensity_TxsdGlPipelineSettingsChoiceFogDensity_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fog_densitychoicegl_pipeline_settingsschema_FogDensity_TxsdGlPipelineSettingsChoiceFogDensity_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FogDensity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_normalize_enablechoicegl_pipeline_settingsschema_NormalizeEnable_TxsdGlPipelineSettingsChoiceNormalizeEnable_ struct {
	NormalizeEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema normalize_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_normalize_enablechoicegl_pipeline_settingsschema_NormalizeEnable_TxsdGlPipelineSettingsChoiceNormalizeEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_normalize_enablechoicegl_pipeline_settingsschema_NormalizeEnable_TxsdGlPipelineSettingsChoiceNormalizeEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_normalize_enablechoicegl_pipeline_settingsschema_NormalizeEnable_TxsdGlPipelineSettingsChoiceNormalizeEnable_ instance.
func (me *XsdGoPkgHasElem_normalize_enablechoicegl_pipeline_settingsschema_NormalizeEnable_TxsdGlPipelineSettingsChoiceNormalizeEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_normalize_enablechoicegl_pipeline_settingsschema_NormalizeEnable_TxsdGlPipelineSettingsChoiceNormalizeEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.NormalizeEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_diffusechoicegl_pipeline_settingsschema_LightDiffuse_TxsdGlPipelineSettingsChoiceLightDiffuse_ struct {
	LightDiffuse *TxsdGlPipelineSettingsChoiceLightSpecular `xml:"http://www.collada.org/2005/11/COLLADASchema light_diffuse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_diffusechoicegl_pipeline_settingsschema_LightDiffuse_TxsdGlPipelineSettingsChoiceLightDiffuse_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_diffusechoicegl_pipeline_settingsschema_LightDiffuse_TxsdGlPipelineSettingsChoiceLightDiffuse_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_diffusechoicegl_pipeline_settingsschema_LightDiffuse_TxsdGlPipelineSettingsChoiceLightDiffuse_ instance.
func (me *XsdGoPkgHasElem_light_diffusechoicegl_pipeline_settingsschema_LightDiffuse_TxsdGlPipelineSettingsChoiceLightDiffuse_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_diffusechoicegl_pipeline_settingsschema_LightDiffuse_TxsdGlPipelineSettingsChoiceLightDiffuse_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightDiffuse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegl_pipeline_settingsschema_Alpha_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceAlpha_ struct {
	Alpha *TxsdGlPipelineSettingsChoiceBlendEquation `xml:"http://www.collada.org/2005/11/COLLADASchema alpha"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegl_pipeline_settingsschema_Alpha_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceAlpha_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegl_pipeline_settingsschema_Alpha_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceAlpha_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegl_pipeline_settingsschema_Alpha_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceAlpha_ instance.
func (me *XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegl_pipeline_settingsschema_Alpha_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceAlpha_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegl_pipeline_settingsschema_Alpha_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceAlpha_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Alpha.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegl_pipeline_settingsschema_Rgb_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceRgb_ struct {
	Rgb *TxsdGlPipelineSettingsChoiceBlendEquation `xml:"http://www.collada.org/2005/11/COLLADASchema rgb"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegl_pipeline_settingsschema_Rgb_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceRgb_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegl_pipeline_settingsschema_Rgb_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceRgb_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegl_pipeline_settingsschema_Rgb_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceRgb_ instance.
func (me *XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegl_pipeline_settingsschema_Rgb_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceRgb_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegl_pipeline_settingsschema_Rgb_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceRgb_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Rgb.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsChoiceBlendEquationSeparate struct {
	XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegl_pipeline_settingsschema_Alpha_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceAlpha_

	XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegl_pipeline_settingsschema_Rgb_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceRgb_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceBlendEquationSeparate function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceBlendEquationSeparate instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceBlendEquationSeparate instance.
func (me *TxsdGlPipelineSettingsChoiceBlendEquationSeparate) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceBlendEquationSeparate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegl_pipeline_settingsschema_Alpha_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceAlpha_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegl_pipeline_settingsschema_Rgb_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceRgb_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_blend_equation_separatechoicegl_pipeline_settingsschema_BlendEquationSeparate_TxsdGlPipelineSettingsChoiceBlendEquationSeparate_ struct {
	BlendEquationSeparate *TxsdGlPipelineSettingsChoiceBlendEquationSeparate `xml:"http://www.collada.org/2005/11/COLLADASchema blend_equation_separate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_blend_equation_separatechoicegl_pipeline_settingsschema_BlendEquationSeparate_TxsdGlPipelineSettingsChoiceBlendEquationSeparate_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_blend_equation_separatechoicegl_pipeline_settingsschema_BlendEquationSeparate_TxsdGlPipelineSettingsChoiceBlendEquationSeparate_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_blend_equation_separatechoicegl_pipeline_settingsschema_BlendEquationSeparate_TxsdGlPipelineSettingsChoiceBlendEquationSeparate_ instance.
func (me *XsdGoPkgHasElem_blend_equation_separatechoicegl_pipeline_settingsschema_BlendEquationSeparate_TxsdGlPipelineSettingsChoiceBlendEquationSeparate_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_blend_equation_separatechoicegl_pipeline_settingsschema_BlendEquationSeparate_TxsdGlPipelineSettingsChoiceBlendEquationSeparate_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BlendEquationSeparate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_depth_bounds_enablechoicegl_pipeline_settingsschema_DepthBoundsEnable_TxsdGlPipelineSettingsChoiceDepthBoundsEnable_ struct {
	DepthBoundsEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema depth_bounds_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_depth_bounds_enablechoicegl_pipeline_settingsschema_DepthBoundsEnable_TxsdGlPipelineSettingsChoiceDepthBoundsEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_bounds_enablechoicegl_pipeline_settingsschema_DepthBoundsEnable_TxsdGlPipelineSettingsChoiceDepthBoundsEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_depth_bounds_enablechoicegl_pipeline_settingsschema_DepthBoundsEnable_TxsdGlPipelineSettingsChoiceDepthBoundsEnable_ instance.
func (me *XsdGoPkgHasElem_depth_bounds_enablechoicegl_pipeline_settingsschema_DepthBoundsEnable_TxsdGlPipelineSettingsChoiceDepthBoundsEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_depth_bounds_enablechoicegl_pipeline_settingsschema_DepthBoundsEnable_TxsdGlPipelineSettingsChoiceDepthBoundsEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DepthBoundsEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsChoiceTextureEnvColor struct {
	XsdGoPkgHasAttr_Value_Tfloat4_

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndex_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceTextureEnvColor function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceTextureEnvColor instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceTextureEnvColor instance.
func (me *TxsdGlPipelineSettingsChoiceTextureEnvColor) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceTextureEnvColor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_texture_env_colorchoicegl_pipeline_settingsschema_TextureEnvColor_TxsdGlPipelineSettingsChoiceTextureEnvColor_ struct {
	TextureEnvColor *TxsdGlPipelineSettingsChoiceTextureEnvColor `xml:"http://www.collada.org/2005/11/COLLADASchema texture_env_color"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_texture_env_colorchoicegl_pipeline_settingsschema_TextureEnvColor_TxsdGlPipelineSettingsChoiceTextureEnvColor_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texture_env_colorchoicegl_pipeline_settingsschema_TextureEnvColor_TxsdGlPipelineSettingsChoiceTextureEnvColor_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texture_env_colorchoicegl_pipeline_settingsschema_TextureEnvColor_TxsdGlPipelineSettingsChoiceTextureEnvColor_ instance.
func (me *XsdGoPkgHasElem_texture_env_colorchoicegl_pipeline_settingsschema_TextureEnvColor_TxsdGlPipelineSettingsChoiceTextureEnvColor_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_texture_env_colorchoicegl_pipeline_settingsschema_TextureEnvColor_TxsdGlPipelineSettingsChoiceTextureEnvColor_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TextureEnvColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_sample_coverage_enablechoicegl_pipeline_settingsschema_SampleCoverageEnable_TxsdGlPipelineSettingsChoiceSampleCoverageEnable_ struct {
	SampleCoverageEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema sample_coverage_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sample_coverage_enablechoicegl_pipeline_settingsschema_SampleCoverageEnable_TxsdGlPipelineSettingsChoiceSampleCoverageEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sample_coverage_enablechoicegl_pipeline_settingsschema_SampleCoverageEnable_TxsdGlPipelineSettingsChoiceSampleCoverageEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sample_coverage_enablechoicegl_pipeline_settingsschema_SampleCoverageEnable_TxsdGlPipelineSettingsChoiceSampleCoverageEnable_ instance.
func (me *XsdGoPkgHasElem_sample_coverage_enablechoicegl_pipeline_settingsschema_SampleCoverageEnable_TxsdGlPipelineSettingsChoiceSampleCoverageEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sample_coverage_enablechoicegl_pipeline_settingsschema_SampleCoverageEnable_TxsdGlPipelineSettingsChoiceSampleCoverageEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SampleCoverageEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceFace_ struct {
	Face *TxsdGlPipelineSettingsChoicePolygonModeSequenceFace `xml:"http://www.collada.org/2005/11/COLLADASchema face"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceFace_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceFace_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceFace_ instance.
func (me *XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceFace_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceFace_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Face.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceMask_ struct {
	Mask *TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask `xml:"http://www.collada.org/2005/11/COLLADASchema mask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceMask_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceMask_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceMask_ instance.
func (me *XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceMask_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceMask_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Mask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsChoiceStencilMaskSeparate struct {
	XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceMask_

	XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceFace_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceStencilMaskSeparate function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceStencilMaskSeparate instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceStencilMaskSeparate instance.
func (me *TxsdGlPipelineSettingsChoiceStencilMaskSeparate) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceStencilMaskSeparate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceFace_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceMask_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_stencil_mask_separatechoicegl_pipeline_settingsschema_StencilMaskSeparate_TxsdGlPipelineSettingsChoiceStencilMaskSeparate_ struct {
	StencilMaskSeparate *TxsdGlPipelineSettingsChoiceStencilMaskSeparate `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_mask_separate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_stencil_mask_separatechoicegl_pipeline_settingsschema_StencilMaskSeparate_TxsdGlPipelineSettingsChoiceStencilMaskSeparate_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_mask_separatechoicegl_pipeline_settingsschema_StencilMaskSeparate_TxsdGlPipelineSettingsChoiceStencilMaskSeparate_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_mask_separatechoicegl_pipeline_settingsschema_StencilMaskSeparate_TxsdGlPipelineSettingsChoiceStencilMaskSeparate_ instance.
func (me *XsdGoPkgHasElem_stencil_mask_separatechoicegl_pipeline_settingsschema_StencilMaskSeparate_TxsdGlPipelineSettingsChoiceStencilMaskSeparate_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_stencil_mask_separatechoicegl_pipeline_settingsschema_StencilMaskSeparate_TxsdGlPipelineSettingsChoiceStencilMaskSeparate_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StencilMaskSeparate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_polygon_offset_fill_enablechoicegl_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlPipelineSettingsChoicePolygonOffsetFillEnable_ struct {
	PolygonOffsetFillEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema polygon_offset_fill_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_polygon_offset_fill_enablechoicegl_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlPipelineSettingsChoicePolygonOffsetFillEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_polygon_offset_fill_enablechoicegl_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlPipelineSettingsChoicePolygonOffsetFillEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_polygon_offset_fill_enablechoicegl_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlPipelineSettingsChoicePolygonOffsetFillEnable_ instance.
func (me *XsdGoPkgHasElem_polygon_offset_fill_enablechoicegl_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlPipelineSettingsChoicePolygonOffsetFillEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_polygon_offset_fill_enablechoicegl_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlPipelineSettingsChoicePolygonOffsetFillEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PolygonOffsetFillEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_polygon_offset_line_enablechoicegl_pipeline_settingsschema_PolygonOffsetLineEnable_TxsdGlPipelineSettingsChoicePolygonOffsetLineEnable_ struct {
	PolygonOffsetLineEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema polygon_offset_line_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_polygon_offset_line_enablechoicegl_pipeline_settingsschema_PolygonOffsetLineEnable_TxsdGlPipelineSettingsChoicePolygonOffsetLineEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_polygon_offset_line_enablechoicegl_pipeline_settingsschema_PolygonOffsetLineEnable_TxsdGlPipelineSettingsChoicePolygonOffsetLineEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_polygon_offset_line_enablechoicegl_pipeline_settingsschema_PolygonOffsetLineEnable_TxsdGlPipelineSettingsChoicePolygonOffsetLineEnable_ instance.
func (me *XsdGoPkgHasElem_polygon_offset_line_enablechoicegl_pipeline_settingsschema_PolygonOffsetLineEnable_TxsdGlPipelineSettingsChoicePolygonOffsetLineEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_polygon_offset_line_enablechoicegl_pipeline_settingsschema_PolygonOffsetLineEnable_TxsdGlPipelineSettingsChoicePolygonOffsetLineEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PolygonOffsetLineEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_point_fade_threshold_sizechoicegl_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlPipelineSettingsChoicePointFadeThresholdSize_ struct {
	PointFadeThresholdSize *TxsdGlesPipelineSettingsChoicePointSizeMax `xml:"http://www.collada.org/2005/11/COLLADASchema point_fade_threshold_size"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_point_fade_threshold_sizechoicegl_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlPipelineSettingsChoicePointFadeThresholdSize_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_fade_threshold_sizechoicegl_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlPipelineSettingsChoicePointFadeThresholdSize_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_fade_threshold_sizechoicegl_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlPipelineSettingsChoicePointFadeThresholdSize_ instance.
func (me *XsdGoPkgHasElem_point_fade_threshold_sizechoicegl_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlPipelineSettingsChoicePointFadeThresholdSize_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_point_fade_threshold_sizechoicegl_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlPipelineSettingsChoicePointFadeThresholdSize_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PointFadeThresholdSize.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tint2_165536 struct {
	Value Tint2 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "1 65536"
func (me XsdGoPkgHasAttr_Value_Tint2_165536) ValueDefault() Tint2 { return Tint2("1 65536") }

type TxsdGlPipelineSettingsChoiceLineStipple struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tint2_165536
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceLineStipple function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceLineStipple instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceLineStipple instance.
func (me *TxsdGlPipelineSettingsChoiceLineStipple) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceLineStipple; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_line_stipplechoicegl_pipeline_settingsschema_LineStipple_TxsdGlPipelineSettingsChoiceLineStipple_ struct {
	LineStipple *TxsdGlPipelineSettingsChoiceLineStipple `xml:"http://www.collada.org/2005/11/COLLADASchema line_stipple"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_line_stipplechoicegl_pipeline_settingsschema_LineStipple_TxsdGlPipelineSettingsChoiceLineStipple_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_line_stipplechoicegl_pipeline_settingsschema_LineStipple_TxsdGlPipelineSettingsChoiceLineStipple_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_line_stipplechoicegl_pipeline_settingsschema_LineStipple_TxsdGlPipelineSettingsChoiceLineStipple_ instance.
func (me *XsdGoPkgHasElem_line_stipplechoicegl_pipeline_settingsschema_LineStipple_TxsdGlPipelineSettingsChoiceLineStipple_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_line_stipplechoicegl_pipeline_settingsschema_LineStipple_TxsdGlPipelineSettingsChoiceLineStipple_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LineStipple.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_point_distance_attenuationchoicegl_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlPipelineSettingsChoicePointDistanceAttenuation_ struct {
	PointDistanceAttenuation *TxsdGlesPipelineSettingsChoicePointDistanceAttenuation `xml:"http://www.collada.org/2005/11/COLLADASchema point_distance_attenuation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_point_distance_attenuationchoicegl_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlPipelineSettingsChoicePointDistanceAttenuation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_distance_attenuationchoicegl_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlPipelineSettingsChoicePointDistanceAttenuation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_distance_attenuationchoicegl_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlPipelineSettingsChoicePointDistanceAttenuation_ instance.
func (me *XsdGoPkgHasElem_point_distance_attenuationchoicegl_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlPipelineSettingsChoicePointDistanceAttenuation_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_point_distance_attenuationchoicegl_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlPipelineSettingsChoicePointDistanceAttenuation_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PointDistanceAttenuation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation struct {
	XsdGoPkgHasAttr_Value_Tfloat_0

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglMaxLightsIndex_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation instance.
func (me *TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_quadratic_attenuationchoicegl_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation_ struct {
	LightQuadraticAttenuation *TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation `xml:"http://www.collada.org/2005/11/COLLADASchema light_quadratic_attenuation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_quadratic_attenuationchoicegl_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_quadratic_attenuationchoicegl_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_quadratic_attenuationchoicegl_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation_ instance.
func (me *XsdGoPkgHasElem_light_quadratic_attenuationchoicegl_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_quadratic_attenuationchoicegl_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightQuadraticAttenuation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_logic_op_enablechoicegl_pipeline_settingsschema_LogicOpEnable_TxsdGlPipelineSettingsChoiceLogicOpEnable_ struct {
	LogicOpEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema logic_op_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_logic_op_enablechoicegl_pipeline_settingsschema_LogicOpEnable_TxsdGlPipelineSettingsChoiceLogicOpEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_logic_op_enablechoicegl_pipeline_settingsschema_LogicOpEnable_TxsdGlPipelineSettingsChoiceLogicOpEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_logic_op_enablechoicegl_pipeline_settingsschema_LogicOpEnable_TxsdGlPipelineSettingsChoiceLogicOpEnable_ instance.
func (me *XsdGoPkgHasElem_logic_op_enablechoicegl_pipeline_settingsschema_LogicOpEnable_TxsdGlPipelineSettingsChoiceLogicOpEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_logic_op_enablechoicegl_pipeline_settingsschema_LogicOpEnable_TxsdGlPipelineSettingsChoiceLogicOpEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LogicOpEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_valuesequencealpha_funcchoicegl_pipeline_settingsschema_Value_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceValue_ struct {
	Value *TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue `xml:"http://www.collada.org/2005/11/COLLADASchema value"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_valuesequencealpha_funcchoicegl_pipeline_settingsschema_Value_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceValue_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_valuesequencealpha_funcchoicegl_pipeline_settingsschema_Value_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceValue_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_valuesequencealpha_funcchoicegl_pipeline_settingsschema_Value_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceValue_ instance.
func (me *XsdGoPkgHasElem_valuesequencealpha_funcchoicegl_pipeline_settingsschema_Value_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceValue_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_valuesequencealpha_funcchoicegl_pipeline_settingsschema_Value_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceValue_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Value.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_funcsequencealpha_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceFunc_ struct {
	Func *TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc `xml:"http://www.collada.org/2005/11/COLLADASchema func"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_funcsequencealpha_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_funcsequencealpha_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_funcsequencealpha_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceFunc_ instance.
func (me *XsdGoPkgHasElem_funcsequencealpha_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceFunc_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_funcsequencealpha_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceFunc_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Func.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsChoiceAlphaFunc struct {
	XsdGoPkgHasElem_valuesequencealpha_funcchoicegl_pipeline_settingsschema_Value_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceValue_

	XsdGoPkgHasElem_funcsequencealpha_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceFunc_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceAlphaFunc function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceAlphaFunc instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceAlphaFunc instance.
func (me *TxsdGlPipelineSettingsChoiceAlphaFunc) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceAlphaFunc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_valuesequencealpha_funcchoicegl_pipeline_settingsschema_Value_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceValue_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_funcsequencealpha_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceFunc_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_alpha_funcchoicegl_pipeline_settingsschema_AlphaFunc_TxsdGlPipelineSettingsChoiceAlphaFunc_ struct {
	AlphaFunc *TxsdGlPipelineSettingsChoiceAlphaFunc `xml:"http://www.collada.org/2005/11/COLLADASchema alpha_func"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_alpha_funcchoicegl_pipeline_settingsschema_AlphaFunc_TxsdGlPipelineSettingsChoiceAlphaFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_alpha_funcchoicegl_pipeline_settingsschema_AlphaFunc_TxsdGlPipelineSettingsChoiceAlphaFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_alpha_funcchoicegl_pipeline_settingsschema_AlphaFunc_TxsdGlPipelineSettingsChoiceAlphaFunc_ instance.
func (me *XsdGoPkgHasElem_alpha_funcchoicegl_pipeline_settingsschema_AlphaFunc_TxsdGlPipelineSettingsChoiceAlphaFunc_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_alpha_funcchoicegl_pipeline_settingsschema_AlphaFunc_TxsdGlPipelineSettingsChoiceAlphaFunc_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AlphaFunc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsChoiceTexture2DEnable struct {
	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndex_

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool_False
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceTexture2DEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceTexture2DEnable instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceTexture2DEnable instance.
func (me *TxsdGlPipelineSettingsChoiceTexture2DEnable) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceTexture2DEnable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_texture2D_enablechoicegl_pipeline_settingsschema_Texture2DEnable_TxsdGlPipelineSettingsChoiceTexture2DEnable_ struct {
	Texture2DEnable *TxsdGlPipelineSettingsChoiceTexture2DEnable `xml:"http://www.collada.org/2005/11/COLLADASchema texture2D_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_texture2D_enablechoicegl_pipeline_settingsschema_Texture2DEnable_TxsdGlPipelineSettingsChoiceTexture2DEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texture2D_enablechoicegl_pipeline_settingsschema_Texture2DEnable_TxsdGlPipelineSettingsChoiceTexture2DEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texture2D_enablechoicegl_pipeline_settingsschema_Texture2DEnable_TxsdGlPipelineSettingsChoiceTexture2DEnable_ instance.
func (me *XsdGoPkgHasElem_texture2D_enablechoicegl_pipeline_settingsschema_Texture2DEnable_TxsdGlPipelineSettingsChoiceTexture2DEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_texture2D_enablechoicegl_pipeline_settingsschema_Texture2DEnable_TxsdGlPipelineSettingsChoiceTexture2DEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Texture2DEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fog_modechoicegl_pipeline_settingsschema_FogMode_TxsdGlPipelineSettingsChoiceFogMode_ struct {
	FogMode *TxsdGlesPipelineSettingsChoiceFogMode `xml:"http://www.collada.org/2005/11/COLLADASchema fog_mode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fog_modechoicegl_pipeline_settingsschema_FogMode_TxsdGlPipelineSettingsChoiceFogMode_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_modechoicegl_pipeline_settingsschema_FogMode_TxsdGlPipelineSettingsChoiceFogMode_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_modechoicegl_pipeline_settingsschema_FogMode_TxsdGlPipelineSettingsChoiceFogMode_ instance.
func (me *XsdGoPkgHasElem_fog_modechoicegl_pipeline_settingsschema_FogMode_TxsdGlPipelineSettingsChoiceFogMode_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fog_modechoicegl_pipeline_settingsschema_FogMode_TxsdGlPipelineSettingsChoiceFogMode_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FogMode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tfloat2_ struct {
	Value Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

type TxsdGlPipelineSettingsChoiceDepthBounds struct {
	XsdGoPkgHasAttr_Value_Tfloat2_

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceDepthBounds function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceDepthBounds instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceDepthBounds instance.
func (me *TxsdGlPipelineSettingsChoiceDepthBounds) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceDepthBounds; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_depth_boundschoicegl_pipeline_settingsschema_DepthBounds_TxsdGlPipelineSettingsChoiceDepthBounds_ struct {
	DepthBounds *TxsdGlPipelineSettingsChoiceDepthBounds `xml:"http://www.collada.org/2005/11/COLLADASchema depth_bounds"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_depth_boundschoicegl_pipeline_settingsschema_DepthBounds_TxsdGlPipelineSettingsChoiceDepthBounds_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_boundschoicegl_pipeline_settingsschema_DepthBounds_TxsdGlPipelineSettingsChoiceDepthBounds_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_depth_boundschoicegl_pipeline_settingsschema_DepthBounds_TxsdGlPipelineSettingsChoiceDepthBounds_ instance.
func (me *XsdGoPkgHasElem_depth_boundschoicegl_pipeline_settingsschema_DepthBounds_TxsdGlPipelineSettingsChoiceDepthBounds_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_depth_boundschoicegl_pipeline_settingsschema_DepthBounds_TxsdGlPipelineSettingsChoiceDepthBounds_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DepthBounds.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_stencil_test_enablechoicegl_pipeline_settingsschema_StencilTestEnable_TxsdGlPipelineSettingsChoiceStencilTestEnable_ struct {
	StencilTestEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_test_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_stencil_test_enablechoicegl_pipeline_settingsschema_StencilTestEnable_TxsdGlPipelineSettingsChoiceStencilTestEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_test_enablechoicegl_pipeline_settingsschema_StencilTestEnable_TxsdGlPipelineSettingsChoiceStencilTestEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_test_enablechoicegl_pipeline_settingsschema_StencilTestEnable_TxsdGlPipelineSettingsChoiceStencilTestEnable_ instance.
func (me *XsdGoPkgHasElem_stencil_test_enablechoicegl_pipeline_settingsschema_StencilTestEnable_TxsdGlPipelineSettingsChoiceStencilTestEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_stencil_test_enablechoicegl_pipeline_settingsschema_StencilTestEnable_TxsdGlPipelineSettingsChoiceStencilTestEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StencilTestEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_model_ambientchoicegl_pipeline_settingsschema_LightModelAmbient_TxsdGlPipelineSettingsChoiceLightModelAmbient_ struct {
	LightModelAmbient *TxsdGlesPipelineSettingsChoiceMaterialAmbient `xml:"http://www.collada.org/2005/11/COLLADASchema light_model_ambient"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_model_ambientchoicegl_pipeline_settingsschema_LightModelAmbient_TxsdGlPipelineSettingsChoiceLightModelAmbient_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_model_ambientchoicegl_pipeline_settingsschema_LightModelAmbient_TxsdGlPipelineSettingsChoiceLightModelAmbient_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_model_ambientchoicegl_pipeline_settingsschema_LightModelAmbient_TxsdGlPipelineSettingsChoiceLightModelAmbient_ instance.
func (me *XsdGoPkgHasElem_light_model_ambientchoicegl_pipeline_settingsschema_LightModelAmbient_TxsdGlPipelineSettingsChoiceLightModelAmbient_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_model_ambientchoicegl_pipeline_settingsschema_LightModelAmbient_TxsdGlPipelineSettingsChoiceLightModelAmbient_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightModelAmbient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_point_size_maxchoicegl_pipeline_settingsschema_PointSizeMax_TxsdGlPipelineSettingsChoicePointSizeMax_ struct {
	PointSizeMax *TxsdGlesPipelineSettingsChoicePointSizeMax `xml:"http://www.collada.org/2005/11/COLLADASchema point_size_max"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_point_size_maxchoicegl_pipeline_settingsschema_PointSizeMax_TxsdGlPipelineSettingsChoicePointSizeMax_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_size_maxchoicegl_pipeline_settingsschema_PointSizeMax_TxsdGlPipelineSettingsChoicePointSizeMax_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_size_maxchoicegl_pipeline_settingsschema_PointSizeMax_TxsdGlPipelineSettingsChoicePointSizeMax_ instance.
func (me *XsdGoPkgHasElem_point_size_maxchoicegl_pipeline_settingsschema_PointSizeMax_TxsdGlPipelineSettingsChoicePointSizeMax_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_point_size_maxchoicegl_pipeline_settingsschema_PointSizeMax_TxsdGlPipelineSettingsChoicePointSizeMax_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PointSizeMax.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tbool4_TrueTrueTrueTrue struct {
	Value Tbool4 `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "true true true true"
func (me XsdGoPkgHasAttr_Value_Tbool4_TrueTrueTrueTrue) ValueDefault() Tbool4 {
	return Tbool4("true true true true")
}

type TxsdGlPipelineSettingsChoiceColorMask struct {
	XsdGoPkgHasAttr_Value_Tbool4_TrueTrueTrueTrue

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceColorMask function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceColorMask instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceColorMask instance.
func (me *TxsdGlPipelineSettingsChoiceColorMask) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceColorMask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_color_maskchoicegl_pipeline_settingsschema_ColorMask_TxsdGlPipelineSettingsChoiceColorMask_ struct {
	ColorMask *TxsdGlPipelineSettingsChoiceColorMask `xml:"http://www.collada.org/2005/11/COLLADASchema color_mask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_color_maskchoicegl_pipeline_settingsschema_ColorMask_TxsdGlPipelineSettingsChoiceColorMask_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_color_maskchoicegl_pipeline_settingsschema_ColorMask_TxsdGlPipelineSettingsChoiceColorMask_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_color_maskchoicegl_pipeline_settingsschema_ColorMask_TxsdGlPipelineSettingsChoiceColorMask_ instance.
func (me *XsdGoPkgHasElem_color_maskchoicegl_pipeline_settingsschema_ColorMask_TxsdGlPipelineSettingsChoiceColorMask_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_color_maskchoicegl_pipeline_settingsschema_ColorMask_TxsdGlPipelineSettingsChoiceColorMask_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ColorMask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_point_size_minchoicegl_pipeline_settingsschema_PointSizeMin_TxsdGlPipelineSettingsChoicePointSizeMin_ struct {
	PointSizeMin *TxsdGlesPipelineSettingsChoicePointSizeMin `xml:"http://www.collada.org/2005/11/COLLADASchema point_size_min"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_point_size_minchoicegl_pipeline_settingsschema_PointSizeMin_TxsdGlPipelineSettingsChoicePointSizeMin_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_size_minchoicegl_pipeline_settingsschema_PointSizeMin_TxsdGlPipelineSettingsChoicePointSizeMin_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_size_minchoicegl_pipeline_settingsschema_PointSizeMin_TxsdGlPipelineSettingsChoicePointSizeMin_ instance.
func (me *XsdGoPkgHasElem_point_size_minchoicegl_pipeline_settingsschema_PointSizeMin_TxsdGlPipelineSettingsChoicePointSizeMin_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_point_size_minchoicegl_pipeline_settingsschema_PointSizeMin_TxsdGlPipelineSettingsChoicePointSizeMin_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PointSizeMin.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_DestAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestAlpha_ struct {
	DestAlpha *TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest `xml:"http://www.collada.org/2005/11/COLLADASchema dest_alpha"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_DestAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestAlpha_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_DestAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestAlpha_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_DestAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestAlpha_ instance.
func (me *XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_DestAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestAlpha_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_DestAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestAlpha_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DestAlpha.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcRgb_ struct {
	SrcRgb *TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc `xml:"http://www.collada.org/2005/11/COLLADASchema src_rgb"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcRgb_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcRgb_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcRgb_ instance.
func (me *XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcRgb_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcRgb_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SrcRgb.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcAlpha_ struct {
	SrcAlpha *TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc `xml:"http://www.collada.org/2005/11/COLLADASchema src_alpha"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcAlpha_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcAlpha_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcAlpha_ instance.
func (me *XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcAlpha_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcAlpha_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SrcAlpha.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_DestRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestRgb_ struct {
	DestRgb *TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest `xml:"http://www.collada.org/2005/11/COLLADASchema dest_rgb"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_DestRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestRgb_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_DestRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestRgb_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_DestRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestRgb_ instance.
func (me *XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_DestRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestRgb_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_DestRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestRgb_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DestRgb.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsChoiceBlendFuncSeparate struct {
	XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_DestRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestRgb_

	XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_DestAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestAlpha_

	XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcRgb_

	XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcAlpha_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceBlendFuncSeparate function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceBlendFuncSeparate instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceBlendFuncSeparate instance.
func (me *TxsdGlPipelineSettingsChoiceBlendFuncSeparate) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceBlendFuncSeparate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_DestAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestAlpha_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcRgb_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcAlpha_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_DestRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestRgb_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_blend_func_separatechoicegl_pipeline_settingsschema_BlendFuncSeparate_TxsdGlPipelineSettingsChoiceBlendFuncSeparate_ struct {
	BlendFuncSeparate *TxsdGlPipelineSettingsChoiceBlendFuncSeparate `xml:"http://www.collada.org/2005/11/COLLADASchema blend_func_separate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_blend_func_separatechoicegl_pipeline_settingsschema_BlendFuncSeparate_TxsdGlPipelineSettingsChoiceBlendFuncSeparate_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_blend_func_separatechoicegl_pipeline_settingsschema_BlendFuncSeparate_TxsdGlPipelineSettingsChoiceBlendFuncSeparate_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_blend_func_separatechoicegl_pipeline_settingsschema_BlendFuncSeparate_TxsdGlPipelineSettingsChoiceBlendFuncSeparate_ instance.
func (me *XsdGoPkgHasElem_blend_func_separatechoicegl_pipeline_settingsschema_BlendFuncSeparate_TxsdGlPipelineSettingsChoiceBlendFuncSeparate_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_blend_func_separatechoicegl_pipeline_settingsschema_BlendFuncSeparate_TxsdGlPipelineSettingsChoiceBlendFuncSeparate_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BlendFuncSeparate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fog_startchoicegl_pipeline_settingsschema_FogStart_TxsdGlPipelineSettingsChoiceFogStart_ struct {
	FogStart *TxsdGlesPipelineSettingsChoicePointSizeMin `xml:"http://www.collada.org/2005/11/COLLADASchema fog_start"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fog_startchoicegl_pipeline_settingsschema_FogStart_TxsdGlPipelineSettingsChoiceFogStart_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_startchoicegl_pipeline_settingsschema_FogStart_TxsdGlPipelineSettingsChoiceFogStart_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_startchoicegl_pipeline_settingsschema_FogStart_TxsdGlPipelineSettingsChoiceFogStart_ instance.
func (me *XsdGoPkgHasElem_fog_startchoicegl_pipeline_settingsschema_FogStart_TxsdGlPipelineSettingsChoiceFogStart_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fog_startchoicegl_pipeline_settingsschema_FogStart_TxsdGlPipelineSettingsChoiceFogStart_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FogStart.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsChoiceLightEnable struct {
	XsdGoPkgHasAttr_Value_Tbool_False

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglMaxLightsIndex_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceLightEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceLightEnable instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceLightEnable instance.
func (me *TxsdGlPipelineSettingsChoiceLightEnable) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceLightEnable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_enablechoicegl_pipeline_settingsschema_LightEnable_TxsdGlPipelineSettingsChoiceLightEnable_ struct {
	LightEnable *TxsdGlPipelineSettingsChoiceLightEnable `xml:"http://www.collada.org/2005/11/COLLADASchema light_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_enablechoicegl_pipeline_settingsschema_LightEnable_TxsdGlPipelineSettingsChoiceLightEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_enablechoicegl_pipeline_settingsschema_LightEnable_TxsdGlPipelineSettingsChoiceLightEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_enablechoicegl_pipeline_settingsschema_LightEnable_TxsdGlPipelineSettingsChoiceLightEnable_ instance.
func (me *XsdGoPkgHasElem_light_enablechoicegl_pipeline_settingsschema_LightEnable_TxsdGlPipelineSettingsChoiceLightEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_enablechoicegl_pipeline_settingsschema_LightEnable_TxsdGlPipelineSettingsChoiceLightEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fog_enablechoicegl_pipeline_settingsschema_FogEnable_TxsdGlPipelineSettingsChoiceFogEnable_ struct {
	FogEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema fog_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fog_enablechoicegl_pipeline_settingsschema_FogEnable_TxsdGlPipelineSettingsChoiceFogEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_enablechoicegl_pipeline_settingsschema_FogEnable_TxsdGlPipelineSettingsChoiceFogEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_enablechoicegl_pipeline_settingsschema_FogEnable_TxsdGlPipelineSettingsChoiceFogEnable_ instance.
func (me *XsdGoPkgHasElem_fog_enablechoicegl_pipeline_settingsschema_FogEnable_TxsdGlPipelineSettingsChoiceFogEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fog_enablechoicegl_pipeline_settingsschema_FogEnable_TxsdGlPipelineSettingsChoiceFogEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FogEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_point_sizechoicegl_pipeline_settingsschema_PointSize_TxsdGlPipelineSettingsChoicePointSize_ struct {
	PointSize *TxsdGlesPipelineSettingsChoicePointSizeMax `xml:"http://www.collada.org/2005/11/COLLADASchema point_size"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_point_sizechoicegl_pipeline_settingsschema_PointSize_TxsdGlPipelineSettingsChoicePointSize_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_point_sizechoicegl_pipeline_settingsschema_PointSize_TxsdGlPipelineSettingsChoicePointSize_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_point_sizechoicegl_pipeline_settingsschema_PointSize_TxsdGlPipelineSettingsChoicePointSize_ instance.
func (me *XsdGoPkgHasElem_point_sizechoicegl_pipeline_settingsschema_PointSize_TxsdGlPipelineSettingsChoicePointSize_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_point_sizechoicegl_pipeline_settingsschema_PointSize_TxsdGlPipelineSettingsChoicePointSize_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PointSize.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_depth_maskchoicegl_pipeline_settingsschema_DepthMask_TxsdGlPipelineSettingsChoiceDepthMask_ struct {
	DepthMask *TxsdGlesPipelineSettingsChoiceColorMaterialEnable `xml:"http://www.collada.org/2005/11/COLLADASchema depth_mask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_depth_maskchoicegl_pipeline_settingsschema_DepthMask_TxsdGlPipelineSettingsChoiceDepthMask_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_maskchoicegl_pipeline_settingsschema_DepthMask_TxsdGlPipelineSettingsChoiceDepthMask_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_depth_maskchoicegl_pipeline_settingsschema_DepthMask_TxsdGlPipelineSettingsChoiceDepthMask_ instance.
func (me *XsdGoPkgHasElem_depth_maskchoicegl_pipeline_settingsschema_DepthMask_TxsdGlPipelineSettingsChoiceDepthMask_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_depth_maskchoicegl_pipeline_settingsschema_DepthMask_TxsdGlPipelineSettingsChoiceDepthMask_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DepthMask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fog_endchoicegl_pipeline_settingsschema_FogEnd_TxsdGlPipelineSettingsChoiceFogEnd_ struct {
	FogEnd *TxsdGlesPipelineSettingsChoicePointSizeMax `xml:"http://www.collada.org/2005/11/COLLADASchema fog_end"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fog_endchoicegl_pipeline_settingsschema_FogEnd_TxsdGlPipelineSettingsChoiceFogEnd_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_endchoicegl_pipeline_settingsschema_FogEnd_TxsdGlPipelineSettingsChoiceFogEnd_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_endchoicegl_pipeline_settingsschema_FogEnd_TxsdGlPipelineSettingsChoiceFogEnd_ instance.
func (me *XsdGoPkgHasElem_fog_endchoicegl_pipeline_settingsschema_FogEnd_TxsdGlPipelineSettingsChoiceFogEnd_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fog_endchoicegl_pipeline_settingsschema_FogEnd_TxsdGlPipelineSettingsChoiceFogEnd_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FogEnd.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_projection_matrixchoicegl_pipeline_settingsschema_ProjectionMatrix_TxsdGlPipelineSettingsChoiceProjectionMatrix_ struct {
	ProjectionMatrix *TxsdGlesPipelineSettingsChoiceModelViewMatrix `xml:"http://www.collada.org/2005/11/COLLADASchema projection_matrix"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_projection_matrixchoicegl_pipeline_settingsschema_ProjectionMatrix_TxsdGlPipelineSettingsChoiceProjectionMatrix_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_projection_matrixchoicegl_pipeline_settingsschema_ProjectionMatrix_TxsdGlPipelineSettingsChoiceProjectionMatrix_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_projection_matrixchoicegl_pipeline_settingsschema_ProjectionMatrix_TxsdGlPipelineSettingsChoiceProjectionMatrix_ instance.
func (me *XsdGoPkgHasElem_projection_matrixchoicegl_pipeline_settingsschema_ProjectionMatrix_TxsdGlPipelineSettingsChoiceProjectionMatrix_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_projection_matrixchoicegl_pipeline_settingsschema_ProjectionMatrix_TxsdGlPipelineSettingsChoiceProjectionMatrix_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ProjectionMatrix.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_material_emissionchoicegl_pipeline_settingsschema_MaterialEmission_TxsdGlPipelineSettingsChoiceMaterialEmission_ struct {
	MaterialEmission *TxsdGlesPipelineSettingsChoiceMaterialSpecular `xml:"http://www.collada.org/2005/11/COLLADASchema material_emission"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_material_emissionchoicegl_pipeline_settingsschema_MaterialEmission_TxsdGlPipelineSettingsChoiceMaterialEmission_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_material_emissionchoicegl_pipeline_settingsschema_MaterialEmission_TxsdGlPipelineSettingsChoiceMaterialEmission_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_material_emissionchoicegl_pipeline_settingsschema_MaterialEmission_TxsdGlPipelineSettingsChoiceMaterialEmission_ instance.
func (me *XsdGoPkgHasElem_material_emissionchoicegl_pipeline_settingsschema_MaterialEmission_TxsdGlPipelineSettingsChoiceMaterialEmission_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_material_emissionchoicegl_pipeline_settingsschema_MaterialEmission_TxsdGlPipelineSettingsChoiceMaterialEmission_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MaterialEmission.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_rescale_normal_enablechoicegl_pipeline_settingsschema_RescaleNormalEnable_TxsdGlPipelineSettingsChoiceRescaleNormalEnable_ struct {
	RescaleNormalEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema rescale_normal_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_rescale_normal_enablechoicegl_pipeline_settingsschema_RescaleNormalEnable_TxsdGlPipelineSettingsChoiceRescaleNormalEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_rescale_normal_enablechoicegl_pipeline_settingsschema_RescaleNormalEnable_TxsdGlPipelineSettingsChoiceRescaleNormalEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_rescale_normal_enablechoicegl_pipeline_settingsschema_RescaleNormalEnable_TxsdGlPipelineSettingsChoiceRescaleNormalEnable_ instance.
func (me *XsdGoPkgHasElem_rescale_normal_enablechoicegl_pipeline_settingsschema_RescaleNormalEnable_TxsdGlPipelineSettingsChoiceRescaleNormalEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_rescale_normal_enablechoicegl_pipeline_settingsschema_RescaleNormalEnable_TxsdGlPipelineSettingsChoiceRescaleNormalEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RescaleNormalEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_clear_depthchoicegl_pipeline_settingsschema_ClearDepth_TxsdGlPipelineSettingsChoiceClearDepth_ struct {
	ClearDepth *TxsdGlesPipelineSettingsChoicePointSizeMax `xml:"http://www.collada.org/2005/11/COLLADASchema clear_depth"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_clear_depthchoicegl_pipeline_settingsschema_ClearDepth_TxsdGlPipelineSettingsChoiceClearDepth_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_clear_depthchoicegl_pipeline_settingsschema_ClearDepth_TxsdGlPipelineSettingsChoiceClearDepth_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_clear_depthchoicegl_pipeline_settingsschema_ClearDepth_TxsdGlPipelineSettingsChoiceClearDepth_ instance.
func (me *XsdGoPkgHasElem_clear_depthchoicegl_pipeline_settingsschema_ClearDepth_TxsdGlPipelineSettingsChoiceClearDepth_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_clear_depthchoicegl_pipeline_settingsschema_ClearDepth_TxsdGlPipelineSettingsChoiceClearDepth_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ClearDepth.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_polygon_smooth_enablechoicegl_pipeline_settingsschema_PolygonSmoothEnable_TxsdGlPipelineSettingsChoicePolygonSmoothEnable_ struct {
	PolygonSmoothEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema polygon_smooth_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_polygon_smooth_enablechoicegl_pipeline_settingsschema_PolygonSmoothEnable_TxsdGlPipelineSettingsChoicePolygonSmoothEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_polygon_smooth_enablechoicegl_pipeline_settingsschema_PolygonSmoothEnable_TxsdGlPipelineSettingsChoicePolygonSmoothEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_polygon_smooth_enablechoicegl_pipeline_settingsschema_PolygonSmoothEnable_TxsdGlPipelineSettingsChoicePolygonSmoothEnable_ instance.
func (me *XsdGoPkgHasElem_polygon_smooth_enablechoicegl_pipeline_settingsschema_PolygonSmoothEnable_TxsdGlPipelineSettingsChoicePolygonSmoothEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_polygon_smooth_enablechoicegl_pipeline_settingsschema_PolygonSmoothEnable_TxsdGlPipelineSettingsChoicePolygonSmoothEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PolygonSmoothEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_color_logic_op_enablechoicegl_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlPipelineSettingsChoiceColorLogicOpEnable_ struct {
	ColorLogicOpEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema color_logic_op_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_color_logic_op_enablechoicegl_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlPipelineSettingsChoiceColorLogicOpEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_color_logic_op_enablechoicegl_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlPipelineSettingsChoiceColorLogicOpEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_color_logic_op_enablechoicegl_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlPipelineSettingsChoiceColorLogicOpEnable_ instance.
func (me *XsdGoPkgHasElem_color_logic_op_enablechoicegl_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlPipelineSettingsChoiceColorLogicOpEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_color_logic_op_enablechoicegl_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlPipelineSettingsChoiceColorLogicOpEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ColorLogicOpEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_model_local_viewer_enablechoicegl_pipeline_settingsschema_LightModelLocalViewerEnable_TxsdGlPipelineSettingsChoiceLightModelLocalViewerEnable_ struct {
	LightModelLocalViewerEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema light_model_local_viewer_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_model_local_viewer_enablechoicegl_pipeline_settingsschema_LightModelLocalViewerEnable_TxsdGlPipelineSettingsChoiceLightModelLocalViewerEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_model_local_viewer_enablechoicegl_pipeline_settingsschema_LightModelLocalViewerEnable_TxsdGlPipelineSettingsChoiceLightModelLocalViewerEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_model_local_viewer_enablechoicegl_pipeline_settingsschema_LightModelLocalViewerEnable_TxsdGlPipelineSettingsChoiceLightModelLocalViewerEnable_ instance.
func (me *XsdGoPkgHasElem_light_model_local_viewer_enablechoicegl_pipeline_settingsschema_LightModelLocalViewerEnable_TxsdGlPipelineSettingsChoiceLightModelLocalViewerEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_model_local_viewer_enablechoicegl_pipeline_settingsschema_LightModelLocalViewerEnable_TxsdGlPipelineSettingsChoiceLightModelLocalViewerEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightModelLocalViewerEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_TglStencilOpType_Keep struct {
	Value TglStencilOpType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "KEEP"
func (me XsdGoPkgHasAttr_Value_TglStencilOpType_Keep) ValueDefault() TglStencilOpType {
	return TglStencilOpType("KEEP")
}

type TxsdGlPipelineSettingsChoiceStencilOpSequenceFail struct {
	XsdGoPkgHasAttr_Value_TglStencilOpType_Keep

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceStencilOpSequenceFail function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceStencilOpSequenceFail instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceStencilOpSequenceFail instance.
func (me *TxsdGlPipelineSettingsChoiceStencilOpSequenceFail) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceStencilOpSequenceFail; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_failsequencestencil_opchoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSequenceFail_ struct {
	Fail *TxsdGlPipelineSettingsChoiceStencilOpSequenceFail `xml:"http://www.collada.org/2005/11/COLLADASchema fail"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_failsequencestencil_opchoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSequenceFail_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_failsequencestencil_opchoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSequenceFail_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_failsequencestencil_opchoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSequenceFail_ instance.
func (me *XsdGoPkgHasElem_failsequencestencil_opchoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSequenceFail_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_failsequencestencil_opchoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSequenceFail_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Fail.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_zpasssequencestencil_opchoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSequenceZpass_ struct {
	Zpass *TxsdGlPipelineSettingsChoiceStencilOpSequenceFail `xml:"http://www.collada.org/2005/11/COLLADASchema zpass"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_zpasssequencestencil_opchoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSequenceZpass_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_zpasssequencestencil_opchoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSequenceZpass_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_zpasssequencestencil_opchoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSequenceZpass_ instance.
func (me *XsdGoPkgHasElem_zpasssequencestencil_opchoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSequenceZpass_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_zpasssequencestencil_opchoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSequenceZpass_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Zpass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_zfailsequencestencil_opchoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSequenceZfail_ struct {
	Zfail *TxsdGlPipelineSettingsChoiceStencilOpSequenceFail `xml:"http://www.collada.org/2005/11/COLLADASchema zfail"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_zfailsequencestencil_opchoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSequenceZfail_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_zfailsequencestencil_opchoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSequenceZfail_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_zfailsequencestencil_opchoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSequenceZfail_ instance.
func (me *XsdGoPkgHasElem_zfailsequencestencil_opchoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSequenceZfail_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_zfailsequencestencil_opchoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSequenceZfail_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Zfail.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsChoiceStencilOp struct {
	XsdGoPkgHasElem_zfailsequencestencil_opchoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSequenceZfail_

	XsdGoPkgHasElem_failsequencestencil_opchoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSequenceFail_

	XsdGoPkgHasElem_zpasssequencestencil_opchoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSequenceZpass_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceStencilOp function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceStencilOp instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceStencilOp instance.
func (me *TxsdGlPipelineSettingsChoiceStencilOp) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceStencilOp; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_failsequencestencil_opchoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSequenceFail_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_zpasssequencestencil_opchoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSequenceZpass_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_zfailsequencestencil_opchoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSequenceZfail_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_stencil_opchoicegl_pipeline_settingsschema_StencilOp_TxsdGlPipelineSettingsChoiceStencilOp_ struct {
	StencilOp *TxsdGlPipelineSettingsChoiceStencilOp `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_op"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_stencil_opchoicegl_pipeline_settingsschema_StencilOp_TxsdGlPipelineSettingsChoiceStencilOp_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_opchoicegl_pipeline_settingsschema_StencilOp_TxsdGlPipelineSettingsChoiceStencilOp_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_opchoicegl_pipeline_settingsschema_StencilOp_TxsdGlPipelineSettingsChoiceStencilOp_ instance.
func (me *XsdGoPkgHasElem_stencil_opchoicegl_pipeline_settingsschema_StencilOp_TxsdGlPipelineSettingsChoiceStencilOp_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_stencil_opchoicegl_pipeline_settingsschema_StencilOp_TxsdGlPipelineSettingsChoiceStencilOp_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StencilOp.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_texture3D_enablechoicegl_pipeline_settingsschema_Texture3DEnable_TxsdGlPipelineSettingsChoiceTexture3DEnable_ struct {
	Texture3DEnable *TxsdGlPipelineSettingsChoiceTexture2DEnable `xml:"http://www.collada.org/2005/11/COLLADASchema texture3D_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_texture3D_enablechoicegl_pipeline_settingsschema_Texture3DEnable_TxsdGlPipelineSettingsChoiceTexture3DEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texture3D_enablechoicegl_pipeline_settingsschema_Texture3DEnable_TxsdGlPipelineSettingsChoiceTexture3DEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texture3D_enablechoicegl_pipeline_settingsschema_Texture3DEnable_TxsdGlPipelineSettingsChoiceTexture3DEnable_ instance.
func (me *XsdGoPkgHasElem_texture3D_enablechoicegl_pipeline_settingsschema_Texture3DEnable_TxsdGlPipelineSettingsChoiceTexture3DEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_texture3D_enablechoicegl_pipeline_settingsschema_Texture3DEnable_TxsdGlPipelineSettingsChoiceTexture3DEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Texture3DEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_valuechoicetexture3Dchoicegl_pipeline_settingsschema_Value_TglSampler3D_ struct {
	Value *TglSampler3D `xml:"http://www.collada.org/2005/11/COLLADASchema value"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_valuechoicetexture3Dchoicegl_pipeline_settingsschema_Value_TglSampler3D_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_valuechoicetexture3Dchoicegl_pipeline_settingsschema_Value_TglSampler3D_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_valuechoicetexture3Dchoicegl_pipeline_settingsschema_Value_TglSampler3D_ instance.
func (me *XsdGoPkgHasElem_valuechoicetexture3Dchoicegl_pipeline_settingsschema_Value_TglSampler3D_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_valuechoicetexture3Dchoicegl_pipeline_settingsschema_Value_TglSampler3D_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Value.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsChoiceTexture3D struct {
	XsdGoPkgHasElem_paramchoicetexture2Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_

	XsdGoPkgHasElem_valuechoicetexture3Dchoicegl_pipeline_settingsschema_Value_TglSampler3D_

	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndex_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceTexture3D function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceTexture3D instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceTexture3D instance.
func (me *TxsdGlPipelineSettingsChoiceTexture3D) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceTexture3D; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_paramchoicetexture2Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_valuechoicetexture3Dchoicegl_pipeline_settingsschema_Value_TglSampler3D_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_texture3Dchoicegl_pipeline_settingsschema_Texture3D_TxsdGlPipelineSettingsChoiceTexture3D_ struct {
	Texture3D *TxsdGlPipelineSettingsChoiceTexture3D `xml:"http://www.collada.org/2005/11/COLLADASchema texture3D"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_texture3Dchoicegl_pipeline_settingsschema_Texture3D_TxsdGlPipelineSettingsChoiceTexture3D_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texture3Dchoicegl_pipeline_settingsschema_Texture3D_TxsdGlPipelineSettingsChoiceTexture3D_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texture3Dchoicegl_pipeline_settingsschema_Texture3D_TxsdGlPipelineSettingsChoiceTexture3D_ instance.
func (me *XsdGoPkgHasElem_texture3Dchoicegl_pipeline_settingsschema_Texture3D_TxsdGlPipelineSettingsChoiceTexture3D_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_texture3Dchoicegl_pipeline_settingsschema_Texture3D_TxsdGlPipelineSettingsChoiceTexture3D_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Texture3D.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_scissorchoicegl_pipeline_settingsschema_Scissor_TxsdGlPipelineSettingsChoiceScissor_ struct {
	Scissor *TxsdGlesPipelineSettingsChoiceScissor `xml:"http://www.collada.org/2005/11/COLLADASchema scissor"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_scissorchoicegl_pipeline_settingsschema_Scissor_TxsdGlPipelineSettingsChoiceScissor_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_scissorchoicegl_pipeline_settingsschema_Scissor_TxsdGlPipelineSettingsChoiceScissor_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_scissorchoicegl_pipeline_settingsschema_Scissor_TxsdGlPipelineSettingsChoiceScissor_ instance.
func (me *XsdGoPkgHasElem_scissorchoicegl_pipeline_settingsschema_Scissor_TxsdGlPipelineSettingsChoiceScissor_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_scissorchoicegl_pipeline_settingsschema_Scissor_TxsdGlPipelineSettingsChoiceScissor_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Scissor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_clear_colorchoicegl_pipeline_settingsschema_ClearColor_TxsdGlPipelineSettingsChoiceClearColor_ struct {
	ClearColor *TxsdGlesPipelineSettingsChoiceFogColor `xml:"http://www.collada.org/2005/11/COLLADASchema clear_color"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_clear_colorchoicegl_pipeline_settingsschema_ClearColor_TxsdGlPipelineSettingsChoiceClearColor_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_clear_colorchoicegl_pipeline_settingsschema_ClearColor_TxsdGlPipelineSettingsChoiceClearColor_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_clear_colorchoicegl_pipeline_settingsschema_ClearColor_TxsdGlPipelineSettingsChoiceClearColor_ instance.
func (me *XsdGoPkgHasElem_clear_colorchoicegl_pipeline_settingsschema_ClearColor_TxsdGlPipelineSettingsChoiceClearColor_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_clear_colorchoicegl_pipeline_settingsschema_ClearColor_TxsdGlPipelineSettingsChoiceClearColor_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ClearColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_polygon_offsetchoicegl_pipeline_settingsschema_PolygonOffset_TxsdGlPipelineSettingsChoicePolygonOffset_ struct {
	PolygonOffset *TxsdGlesPipelineSettingsChoicePolygonOffset `xml:"http://www.collada.org/2005/11/COLLADASchema polygon_offset"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_polygon_offsetchoicegl_pipeline_settingsschema_PolygonOffset_TxsdGlPipelineSettingsChoicePolygonOffset_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_polygon_offsetchoicegl_pipeline_settingsschema_PolygonOffset_TxsdGlPipelineSettingsChoicePolygonOffset_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_polygon_offsetchoicegl_pipeline_settingsschema_PolygonOffset_TxsdGlPipelineSettingsChoicePolygonOffset_ instance.
func (me *XsdGoPkgHasElem_polygon_offsetchoicegl_pipeline_settingsschema_PolygonOffset_TxsdGlPipelineSettingsChoicePolygonOffset_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_polygon_offsetchoicegl_pipeline_settingsschema_PolygonOffset_TxsdGlPipelineSettingsChoicePolygonOffset_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PolygonOffset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_texture1D_enablechoicegl_pipeline_settingsschema_Texture1DEnable_TxsdGlPipelineSettingsChoiceTexture1DEnable_ struct {
	Texture1DEnable *TxsdGlPipelineSettingsChoiceTexture2DEnable `xml:"http://www.collada.org/2005/11/COLLADASchema texture1D_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_texture1D_enablechoicegl_pipeline_settingsschema_Texture1DEnable_TxsdGlPipelineSettingsChoiceTexture1DEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texture1D_enablechoicegl_pipeline_settingsschema_Texture1DEnable_TxsdGlPipelineSettingsChoiceTexture1DEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texture1D_enablechoicegl_pipeline_settingsschema_Texture1DEnable_TxsdGlPipelineSettingsChoiceTexture1DEnable_ instance.
func (me *XsdGoPkgHasElem_texture1D_enablechoicegl_pipeline_settingsschema_Texture1DEnable_TxsdGlPipelineSettingsChoiceTexture1DEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_texture1D_enablechoicegl_pipeline_settingsschema_Texture1DEnable_TxsdGlPipelineSettingsChoiceTexture1DEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Texture1DEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_scissor_test_enablechoicegl_pipeline_settingsschema_ScissorTestEnable_TxsdGlPipelineSettingsChoiceScissorTestEnable_ struct {
	ScissorTestEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema scissor_test_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_scissor_test_enablechoicegl_pipeline_settingsschema_ScissorTestEnable_TxsdGlPipelineSettingsChoiceScissorTestEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_scissor_test_enablechoicegl_pipeline_settingsschema_ScissorTestEnable_TxsdGlPipelineSettingsChoiceScissorTestEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_scissor_test_enablechoicegl_pipeline_settingsschema_ScissorTestEnable_TxsdGlPipelineSettingsChoiceScissorTestEnable_ instance.
func (me *XsdGoPkgHasElem_scissor_test_enablechoicegl_pipeline_settingsschema_ScissorTestEnable_TxsdGlPipelineSettingsChoiceScissorTestEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_scissor_test_enablechoicegl_pipeline_settingsschema_ScissorTestEnable_TxsdGlPipelineSettingsChoiceScissorTestEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ScissorTestEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_blend_enablechoicegl_pipeline_settingsschema_BlendEnable_TxsdGlPipelineSettingsChoiceBlendEnable_ struct {
	BlendEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema blend_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_blend_enablechoicegl_pipeline_settingsschema_BlendEnable_TxsdGlPipelineSettingsChoiceBlendEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_blend_enablechoicegl_pipeline_settingsschema_BlendEnable_TxsdGlPipelineSettingsChoiceBlendEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_blend_enablechoicegl_pipeline_settingsschema_BlendEnable_TxsdGlPipelineSettingsChoiceBlendEnable_ instance.
func (me *XsdGoPkgHasElem_blend_enablechoicegl_pipeline_settingsschema_BlendEnable_TxsdGlPipelineSettingsChoiceBlendEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_blend_enablechoicegl_pipeline_settingsschema_BlendEnable_TxsdGlPipelineSettingsChoiceBlendEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BlendEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_polygon_offset_point_enablechoicegl_pipeline_settingsschema_PolygonOffsetPointEnable_TxsdGlPipelineSettingsChoicePolygonOffsetPointEnable_ struct {
	PolygonOffsetPointEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema polygon_offset_point_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_polygon_offset_point_enablechoicegl_pipeline_settingsschema_PolygonOffsetPointEnable_TxsdGlPipelineSettingsChoicePolygonOffsetPointEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_polygon_offset_point_enablechoicegl_pipeline_settingsschema_PolygonOffsetPointEnable_TxsdGlPipelineSettingsChoicePolygonOffsetPointEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_polygon_offset_point_enablechoicegl_pipeline_settingsschema_PolygonOffsetPointEnable_TxsdGlPipelineSettingsChoicePolygonOffsetPointEnable_ instance.
func (me *XsdGoPkgHasElem_polygon_offset_point_enablechoicegl_pipeline_settingsschema_PolygonOffsetPointEnable_TxsdGlPipelineSettingsChoicePolygonOffsetPointEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_polygon_offset_point_enablechoicegl_pipeline_settingsschema_PolygonOffsetPointEnable_TxsdGlPipelineSettingsChoicePolygonOffsetPointEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PolygonOffsetPointEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglMaxClipPlanesIndex xsdt.NonNegativeInteger

//	This convenience method just performs a simple type conversion to TglMaxClipPlanesIndex's alias type xsdt.NonNegativeInteger.
func (me TglMaxClipPlanesIndex) ToXsdtNonNegativeInteger() xsdt.NonNegativeInteger {
	return xsdt.NonNegativeInteger(me)
}

//	Since TglMaxClipPlanesIndex is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TglMaxClipPlanesIndex) Set(s string) { (*xsdt.NonNegativeInteger)(me).Set(s) }

//	Returns a string representation of this TglMaxClipPlanesIndex's current non-string scalar value.
func (me TglMaxClipPlanesIndex) String() string { return xsdt.NonNegativeInteger(me).String() }

type XsdGoPkgHasAttr_Index_TglMaxClipPlanesIndex_ struct {
	Index TglMaxClipPlanesIndex `xml:"http://www.collada.org/2005/11/COLLADASchema index,attr"`
}

type TxsdGlPipelineSettingsChoiceClipPlane struct {
	XsdGoPkgHasAttr_Index_TglMaxClipPlanesIndex_

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat4_0000
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceClipPlane function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceClipPlane instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceClipPlane instance.
func (me *TxsdGlPipelineSettingsChoiceClipPlane) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceClipPlane; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_clip_planechoicegl_pipeline_settingsschema_ClipPlane_TxsdGlPipelineSettingsChoiceClipPlane_ struct {
	ClipPlane *TxsdGlPipelineSettingsChoiceClipPlane `xml:"http://www.collada.org/2005/11/COLLADASchema clip_plane"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_clip_planechoicegl_pipeline_settingsschema_ClipPlane_TxsdGlPipelineSettingsChoiceClipPlane_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_clip_planechoicegl_pipeline_settingsschema_ClipPlane_TxsdGlPipelineSettingsChoiceClipPlane_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_clip_planechoicegl_pipeline_settingsschema_ClipPlane_TxsdGlPipelineSettingsChoiceClipPlane_ instance.
func (me *XsdGoPkgHasElem_clip_planechoicegl_pipeline_settingsschema_ClipPlane_TxsdGlPipelineSettingsChoiceClipPlane_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_clip_planechoicegl_pipeline_settingsschema_ClipPlane_TxsdGlPipelineSettingsChoiceClipPlane_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ClipPlane.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_alpha_test_enablechoicegl_pipeline_settingsschema_AlphaTestEnable_TxsdGlPipelineSettingsChoiceAlphaTestEnable_ struct {
	AlphaTestEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema alpha_test_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_alpha_test_enablechoicegl_pipeline_settingsschema_AlphaTestEnable_TxsdGlPipelineSettingsChoiceAlphaTestEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_alpha_test_enablechoicegl_pipeline_settingsschema_AlphaTestEnable_TxsdGlPipelineSettingsChoiceAlphaTestEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_alpha_test_enablechoicegl_pipeline_settingsschema_AlphaTestEnable_TxsdGlPipelineSettingsChoiceAlphaTestEnable_ instance.
func (me *XsdGoPkgHasElem_alpha_test_enablechoicegl_pipeline_settingsschema_AlphaTestEnable_TxsdGlPipelineSettingsChoiceAlphaTestEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_alpha_test_enablechoicegl_pipeline_settingsschema_AlphaTestEnable_TxsdGlPipelineSettingsChoiceAlphaTestEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AlphaTestEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_textureRECT_enablechoicegl_pipeline_settingsschema_TextureRECTEnable_TxsdGlPipelineSettingsChoiceTextureRECTEnable_ struct {
	TextureRECTEnable *TxsdGlPipelineSettingsChoiceTexture2DEnable `xml:"http://www.collada.org/2005/11/COLLADASchema textureRECT_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_textureRECT_enablechoicegl_pipeline_settingsschema_TextureRECTEnable_TxsdGlPipelineSettingsChoiceTextureRECTEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_textureRECT_enablechoicegl_pipeline_settingsschema_TextureRECTEnable_TxsdGlPipelineSettingsChoiceTextureRECTEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_textureRECT_enablechoicegl_pipeline_settingsschema_TextureRECTEnable_TxsdGlPipelineSettingsChoiceTextureRECTEnable_ instance.
func (me *XsdGoPkgHasElem_textureRECT_enablechoicegl_pipeline_settingsschema_TextureRECTEnable_TxsdGlPipelineSettingsChoiceTextureRECTEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_textureRECT_enablechoicegl_pipeline_settingsschema_TextureRECTEnable_TxsdGlPipelineSettingsChoiceTextureRECTEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TextureRECTEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_material_diffusechoicegl_pipeline_settingsschema_MaterialDiffuse_TxsdGlPipelineSettingsChoiceMaterialDiffuse_ struct {
	MaterialDiffuse *TxsdGlesPipelineSettingsChoiceMaterialDiffuse `xml:"http://www.collada.org/2005/11/COLLADASchema material_diffuse"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_material_diffusechoicegl_pipeline_settingsschema_MaterialDiffuse_TxsdGlPipelineSettingsChoiceMaterialDiffuse_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_material_diffusechoicegl_pipeline_settingsschema_MaterialDiffuse_TxsdGlPipelineSettingsChoiceMaterialDiffuse_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_material_diffusechoicegl_pipeline_settingsschema_MaterialDiffuse_TxsdGlPipelineSettingsChoiceMaterialDiffuse_ instance.
func (me *XsdGoPkgHasElem_material_diffusechoicegl_pipeline_settingsschema_MaterialDiffuse_TxsdGlPipelineSettingsChoiceMaterialDiffuse_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_material_diffusechoicegl_pipeline_settingsschema_MaterialDiffuse_TxsdGlPipelineSettingsChoiceMaterialDiffuse_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MaterialDiffuse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_linear_attenuationchoicegl_pipeline_settingsschema_LightLinearAttenuation_TxsdGlPipelineSettingsChoiceLightLinearAttenuation_ struct {
	LightLinearAttenuation *TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation `xml:"http://www.collada.org/2005/11/COLLADASchema light_linear_attenuation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_linear_attenuationchoicegl_pipeline_settingsschema_LightLinearAttenuation_TxsdGlPipelineSettingsChoiceLightLinearAttenuation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_linear_attenuationchoicegl_pipeline_settingsschema_LightLinearAttenuation_TxsdGlPipelineSettingsChoiceLightLinearAttenuation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_linear_attenuationchoicegl_pipeline_settingsschema_LightLinearAttenuation_TxsdGlPipelineSettingsChoiceLightLinearAttenuation_ instance.
func (me *XsdGoPkgHasElem_light_linear_attenuationchoicegl_pipeline_settingsschema_LightLinearAttenuation_TxsdGlPipelineSettingsChoiceLightLinearAttenuation_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_linear_attenuationchoicegl_pipeline_settingsschema_LightLinearAttenuation_TxsdGlPipelineSettingsChoiceLightLinearAttenuation_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightLinearAttenuation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_material_ambientchoicegl_pipeline_settingsschema_MaterialAmbient_TxsdGlPipelineSettingsChoiceMaterialAmbient_ struct {
	MaterialAmbient *TxsdGlesPipelineSettingsChoiceMaterialAmbient `xml:"http://www.collada.org/2005/11/COLLADASchema material_ambient"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_material_ambientchoicegl_pipeline_settingsschema_MaterialAmbient_TxsdGlPipelineSettingsChoiceMaterialAmbient_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_material_ambientchoicegl_pipeline_settingsschema_MaterialAmbient_TxsdGlPipelineSettingsChoiceMaterialAmbient_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_material_ambientchoicegl_pipeline_settingsschema_MaterialAmbient_TxsdGlPipelineSettingsChoiceMaterialAmbient_ instance.
func (me *XsdGoPkgHasElem_material_ambientchoicegl_pipeline_settingsschema_MaterialAmbient_TxsdGlPipelineSettingsChoiceMaterialAmbient_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_material_ambientchoicegl_pipeline_settingsschema_MaterialAmbient_TxsdGlPipelineSettingsChoiceMaterialAmbient_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MaterialAmbient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_lighting_enablechoicegl_pipeline_settingsschema_LightingEnable_TxsdGlPipelineSettingsChoiceLightingEnable_ struct {
	LightingEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema lighting_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_lighting_enablechoicegl_pipeline_settingsschema_LightingEnable_TxsdGlPipelineSettingsChoiceLightingEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_lighting_enablechoicegl_pipeline_settingsschema_LightingEnable_TxsdGlPipelineSettingsChoiceLightingEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_lighting_enablechoicegl_pipeline_settingsschema_LightingEnable_TxsdGlPipelineSettingsChoiceLightingEnable_ instance.
func (me *XsdGoPkgHasElem_lighting_enablechoicegl_pipeline_settingsschema_LightingEnable_TxsdGlPipelineSettingsChoiceLightingEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_lighting_enablechoicegl_pipeline_settingsschema_LightingEnable_TxsdGlPipelineSettingsChoiceLightingEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightingEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GlHookAbstract struct {
	GlHookAbstract xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema gl_hook_abstract"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GlHookAbstract function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GlHookAbstract instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_GlHookAbstract instance.
func (me *XsdGoPkgHasElem_GlHookAbstract) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GlHookAbstract; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_front_facechoicegl_pipeline_settingsschema_FrontFace_TxsdGlPipelineSettingsChoiceFrontFace_ struct {
	FrontFace *TxsdGlesPipelineSettingsChoiceFrontFace `xml:"http://www.collada.org/2005/11/COLLADASchema front_face"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_front_facechoicegl_pipeline_settingsschema_FrontFace_TxsdGlPipelineSettingsChoiceFrontFace_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_front_facechoicegl_pipeline_settingsschema_FrontFace_TxsdGlPipelineSettingsChoiceFrontFace_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_front_facechoicegl_pipeline_settingsschema_FrontFace_TxsdGlPipelineSettingsChoiceFrontFace_ instance.
func (me *XsdGoPkgHasElem_front_facechoicegl_pipeline_settingsschema_FrontFace_TxsdGlPipelineSettingsChoiceFrontFace_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_front_facechoicegl_pipeline_settingsschema_FrontFace_TxsdGlPipelineSettingsChoiceFrontFace_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FrontFace.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_depth_rangechoicegl_pipeline_settingsschema_DepthRange_TxsdGlPipelineSettingsChoiceDepthRange_ struct {
	DepthRange *TxsdGlesPipelineSettingsChoiceDepthRange `xml:"http://www.collada.org/2005/11/COLLADASchema depth_range"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_depth_rangechoicegl_pipeline_settingsschema_DepthRange_TxsdGlPipelineSettingsChoiceDepthRange_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_rangechoicegl_pipeline_settingsschema_DepthRange_TxsdGlPipelineSettingsChoiceDepthRange_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_depth_rangechoicegl_pipeline_settingsschema_DepthRange_TxsdGlPipelineSettingsChoiceDepthRange_ instance.
func (me *XsdGoPkgHasElem_depth_rangechoicegl_pipeline_settingsschema_DepthRange_TxsdGlPipelineSettingsChoiceDepthRange_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_depth_rangechoicegl_pipeline_settingsschema_DepthRange_TxsdGlPipelineSettingsChoiceDepthRange_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DepthRange.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsChoiceLightPosition struct {
	XsdGoPkgHasAttr_Index_TglMaxLightsIndex_

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tfloat4_0010
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceLightPosition function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceLightPosition instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceLightPosition instance.
func (me *TxsdGlPipelineSettingsChoiceLightPosition) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceLightPosition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_positionchoicegl_pipeline_settingsschema_LightPosition_TxsdGlPipelineSettingsChoiceLightPosition_ struct {
	LightPosition *TxsdGlPipelineSettingsChoiceLightPosition `xml:"http://www.collada.org/2005/11/COLLADASchema light_position"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_positionchoicegl_pipeline_settingsschema_LightPosition_TxsdGlPipelineSettingsChoiceLightPosition_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_positionchoicegl_pipeline_settingsschema_LightPosition_TxsdGlPipelineSettingsChoiceLightPosition_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_positionchoicegl_pipeline_settingsschema_LightPosition_TxsdGlPipelineSettingsChoiceLightPosition_ instance.
func (me *XsdGoPkgHasElem_light_positionchoicegl_pipeline_settingsschema_LightPosition_TxsdGlPipelineSettingsChoiceLightPosition_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_positionchoicegl_pipeline_settingsschema_LightPosition_TxsdGlPipelineSettingsChoiceLightPosition_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightPosition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_depth_funcchoicegl_pipeline_settingsschema_DepthFunc_TxsdGlPipelineSettingsChoiceDepthFunc_ struct {
	DepthFunc *TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc `xml:"http://www.collada.org/2005/11/COLLADASchema depth_func"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_depth_funcchoicegl_pipeline_settingsschema_DepthFunc_TxsdGlPipelineSettingsChoiceDepthFunc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_funcchoicegl_pipeline_settingsschema_DepthFunc_TxsdGlPipelineSettingsChoiceDepthFunc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_depth_funcchoicegl_pipeline_settingsschema_DepthFunc_TxsdGlPipelineSettingsChoiceDepthFunc_ instance.
func (me *XsdGoPkgHasElem_depth_funcchoicegl_pipeline_settingsschema_DepthFunc_TxsdGlPipelineSettingsChoiceDepthFunc_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_depth_funcchoicegl_pipeline_settingsschema_DepthFunc_TxsdGlPipelineSettingsChoiceDepthFunc_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DepthFunc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_dither_enablechoicegl_pipeline_settingsschema_DitherEnable_TxsdGlPipelineSettingsChoiceDitherEnable_ struct {
	DitherEnable *TxsdGlesPipelineSettingsChoiceColorMaterialEnable `xml:"http://www.collada.org/2005/11/COLLADASchema dither_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_dither_enablechoicegl_pipeline_settingsschema_DitherEnable_TxsdGlPipelineSettingsChoiceDitherEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_dither_enablechoicegl_pipeline_settingsschema_DitherEnable_TxsdGlPipelineSettingsChoiceDitherEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_dither_enablechoicegl_pipeline_settingsschema_DitherEnable_TxsdGlPipelineSettingsChoiceDitherEnable_ instance.
func (me *XsdGoPkgHasElem_dither_enablechoicegl_pipeline_settingsschema_DitherEnable_TxsdGlPipelineSettingsChoiceDitherEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_dither_enablechoicegl_pipeline_settingsschema_DitherEnable_TxsdGlPipelineSettingsChoiceDitherEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DitherEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_valuechoicetextureRECTchoicegl_pipeline_settingsschema_Value_TglSamplerRECT_ struct {
	Value *TglSamplerRECT `xml:"http://www.collada.org/2005/11/COLLADASchema value"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_valuechoicetextureRECTchoicegl_pipeline_settingsschema_Value_TglSamplerRECT_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_valuechoicetextureRECTchoicegl_pipeline_settingsschema_Value_TglSamplerRECT_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_valuechoicetextureRECTchoicegl_pipeline_settingsschema_Value_TglSamplerRECT_ instance.
func (me *XsdGoPkgHasElem_valuechoicetextureRECTchoicegl_pipeline_settingsschema_Value_TglSamplerRECT_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_valuechoicetextureRECTchoicegl_pipeline_settingsschema_Value_TglSamplerRECT_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Value.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsChoiceTextureRECT struct {
	XsdGoPkgHasElem_valuechoicetextureRECTchoicegl_pipeline_settingsschema_Value_TglSamplerRECT_

	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndex_

	XsdGoPkgHasElem_paramchoicetexture2Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceTextureRECT function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceTextureRECT instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceTextureRECT instance.
func (me *TxsdGlPipelineSettingsChoiceTextureRECT) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceTextureRECT; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_paramchoicetexture2Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_valuechoicetextureRECTchoicegl_pipeline_settingsschema_Value_TglSamplerRECT_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_textureRECTchoicegl_pipeline_settingsschema_TextureRECT_TxsdGlPipelineSettingsChoiceTextureRECT_ struct {
	TextureRECT *TxsdGlPipelineSettingsChoiceTextureRECT `xml:"http://www.collada.org/2005/11/COLLADASchema textureRECT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_textureRECTchoicegl_pipeline_settingsschema_TextureRECT_TxsdGlPipelineSettingsChoiceTextureRECT_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_textureRECTchoicegl_pipeline_settingsschema_TextureRECT_TxsdGlPipelineSettingsChoiceTextureRECT_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_textureRECTchoicegl_pipeline_settingsschema_TextureRECT_TxsdGlPipelineSettingsChoiceTextureRECT_ instance.
func (me *XsdGoPkgHasElem_textureRECTchoicegl_pipeline_settingsschema_TextureRECT_TxsdGlPipelineSettingsChoiceTextureRECT_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_textureRECTchoicegl_pipeline_settingsschema_TextureRECT_TxsdGlPipelineSettingsChoiceTextureRECT_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TextureRECT.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_color_material_enablechoicegl_pipeline_settingsschema_ColorMaterialEnable_TxsdGlPipelineSettingsChoiceColorMaterialEnable_ struct {
	ColorMaterialEnable *TxsdGlesPipelineSettingsChoiceColorMaterialEnable `xml:"http://www.collada.org/2005/11/COLLADASchema color_material_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_color_material_enablechoicegl_pipeline_settingsschema_ColorMaterialEnable_TxsdGlPipelineSettingsChoiceColorMaterialEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_color_material_enablechoicegl_pipeline_settingsschema_ColorMaterialEnable_TxsdGlPipelineSettingsChoiceColorMaterialEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_color_material_enablechoicegl_pipeline_settingsschema_ColorMaterialEnable_TxsdGlPipelineSettingsChoiceColorMaterialEnable_ instance.
func (me *XsdGoPkgHasElem_color_material_enablechoicegl_pipeline_settingsschema_ColorMaterialEnable_TxsdGlPipelineSettingsChoiceColorMaterialEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_color_material_enablechoicegl_pipeline_settingsschema_ColorMaterialEnable_TxsdGlPipelineSettingsChoiceColorMaterialEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ColorMaterialEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_cull_facechoicegl_pipeline_settingsschema_CullFace_TxsdGlPipelineSettingsChoiceCullFace_ struct {
	CullFace *TxsdGlesPipelineSettingsChoiceCullFace `xml:"http://www.collada.org/2005/11/COLLADASchema cull_face"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_cull_facechoicegl_pipeline_settingsschema_CullFace_TxsdGlPipelineSettingsChoiceCullFace_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_cull_facechoicegl_pipeline_settingsschema_CullFace_TxsdGlPipelineSettingsChoiceCullFace_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_cull_facechoicegl_pipeline_settingsschema_CullFace_TxsdGlPipelineSettingsChoiceCullFace_ instance.
func (me *XsdGoPkgHasElem_cull_facechoicegl_pipeline_settingsschema_CullFace_TxsdGlPipelineSettingsChoiceCullFace_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_cull_facechoicegl_pipeline_settingsschema_CullFace_TxsdGlPipelineSettingsChoiceCullFace_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CullFace.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_Tint_0 struct {
	Value Tint `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- 0
func (me XsdGoPkgHasAttr_Value_Tint_0) ValueDefault() Tint { return Tint(0) }

type TxsdGlPipelineSettingsChoiceClearStencil struct {
	XsdGoPkgHasAttr_Value_Tint_0

	XsdGoPkgHasAttr_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceClearStencil function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceClearStencil instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceClearStencil instance.
func (me *TxsdGlPipelineSettingsChoiceClearStencil) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceClearStencil; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_clear_stencilchoicegl_pipeline_settingsschema_ClearStencil_TxsdGlPipelineSettingsChoiceClearStencil_ struct {
	ClearStencil *TxsdGlPipelineSettingsChoiceClearStencil `xml:"http://www.collada.org/2005/11/COLLADASchema clear_stencil"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_clear_stencilchoicegl_pipeline_settingsschema_ClearStencil_TxsdGlPipelineSettingsChoiceClearStencil_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_clear_stencilchoicegl_pipeline_settingsschema_ClearStencil_TxsdGlPipelineSettingsChoiceClearStencil_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_clear_stencilchoicegl_pipeline_settingsschema_ClearStencil_TxsdGlPipelineSettingsChoiceClearStencil_ instance.
func (me *XsdGoPkgHasElem_clear_stencilchoicegl_pipeline_settingsschema_ClearStencil_TxsdGlPipelineSettingsChoiceClearStencil_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_clear_stencilchoicegl_pipeline_settingsschema_ClearStencil_TxsdGlPipelineSettingsChoiceClearStencil_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ClearStencil.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZfail_ struct {
	Zfail *TxsdGlPipelineSettingsChoiceStencilOpSequenceFail `xml:"http://www.collada.org/2005/11/COLLADASchema zfail"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZfail_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZfail_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZfail_ instance.
func (me *XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZfail_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZfail_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Zfail.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZpass_ struct {
	Zpass *TxsdGlPipelineSettingsChoiceStencilOpSequenceFail `xml:"http://www.collada.org/2005/11/COLLADASchema zpass"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZpass_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZpass_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZpass_ instance.
func (me *XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZpass_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZpass_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Zpass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_failsequencestencil_op_separatechoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFail_ struct {
	Fail *TxsdGlPipelineSettingsChoiceStencilOpSequenceFail `xml:"http://www.collada.org/2005/11/COLLADASchema fail"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_failsequencestencil_op_separatechoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFail_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_failsequencestencil_op_separatechoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFail_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_failsequencestencil_op_separatechoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFail_ instance.
func (me *XsdGoPkgHasElem_failsequencestencil_op_separatechoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFail_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_failsequencestencil_op_separatechoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFail_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Fail.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_facesequencestencil_op_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFace_ struct {
	Face *TxsdGlPipelineSettingsChoicePolygonModeSequenceFace `xml:"http://www.collada.org/2005/11/COLLADASchema face"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_facesequencestencil_op_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFace_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_facesequencestencil_op_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFace_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_facesequencestencil_op_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFace_ instance.
func (me *XsdGoPkgHasElem_facesequencestencil_op_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFace_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_facesequencestencil_op_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFace_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Face.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsChoiceStencilOpSeparate struct {
	XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZfail_

	XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZpass_

	XsdGoPkgHasElem_failsequencestencil_op_separatechoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFail_

	XsdGoPkgHasElem_facesequencestencil_op_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFace_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceStencilOpSeparate function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceStencilOpSeparate instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceStencilOpSeparate instance.
func (me *TxsdGlPipelineSettingsChoiceStencilOpSeparate) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceStencilOpSeparate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_failsequencestencil_op_separatechoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFail_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_facesequencestencil_op_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFace_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZfail_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZpass_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_stencil_op_separatechoicegl_pipeline_settingsschema_StencilOpSeparate_TxsdGlPipelineSettingsChoiceStencilOpSeparate_ struct {
	StencilOpSeparate *TxsdGlPipelineSettingsChoiceStencilOpSeparate `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_op_separate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_stencil_op_separatechoicegl_pipeline_settingsschema_StencilOpSeparate_TxsdGlPipelineSettingsChoiceStencilOpSeparate_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_op_separatechoicegl_pipeline_settingsschema_StencilOpSeparate_TxsdGlPipelineSettingsChoiceStencilOpSeparate_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_op_separatechoicegl_pipeline_settingsschema_StencilOpSeparate_TxsdGlPipelineSettingsChoiceStencilOpSeparate_ instance.
func (me *XsdGoPkgHasElem_stencil_op_separatechoicegl_pipeline_settingsschema_StencilOpSeparate_TxsdGlPipelineSettingsChoiceStencilOpSeparate_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_stencil_op_separatechoicegl_pipeline_settingsschema_StencilOpSeparate_TxsdGlPipelineSettingsChoiceStencilOpSeparate_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StencilOpSeparate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_spot_exponentchoicegl_pipeline_settingsschema_LightSpotExponent_TxsdGlPipelineSettingsChoiceLightSpotExponent_ struct {
	LightSpotExponent *TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation `xml:"http://www.collada.org/2005/11/COLLADASchema light_spot_exponent"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_spot_exponentchoicegl_pipeline_settingsschema_LightSpotExponent_TxsdGlPipelineSettingsChoiceLightSpotExponent_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_spot_exponentchoicegl_pipeline_settingsschema_LightSpotExponent_TxsdGlPipelineSettingsChoiceLightSpotExponent_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_spot_exponentchoicegl_pipeline_settingsschema_LightSpotExponent_TxsdGlPipelineSettingsChoiceLightSpotExponent_ instance.
func (me *XsdGoPkgHasElem_light_spot_exponentchoicegl_pipeline_settingsschema_LightSpotExponent_TxsdGlPipelineSettingsChoiceLightSpotExponent_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_spot_exponentchoicegl_pipeline_settingsschema_LightSpotExponent_TxsdGlPipelineSettingsChoiceLightSpotExponent_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightSpotExponent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_valuechoicetextureCUBEchoicegl_pipeline_settingsschema_Value_TglSamplerCUBE_ struct {
	Value *TglSamplerCUBE `xml:"http://www.collada.org/2005/11/COLLADASchema value"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_valuechoicetextureCUBEchoicegl_pipeline_settingsschema_Value_TglSamplerCUBE_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_valuechoicetextureCUBEchoicegl_pipeline_settingsschema_Value_TglSamplerCUBE_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_valuechoicetextureCUBEchoicegl_pipeline_settingsschema_Value_TglSamplerCUBE_ instance.
func (me *XsdGoPkgHasElem_valuechoicetextureCUBEchoicegl_pipeline_settingsschema_Value_TglSamplerCUBE_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_valuechoicetextureCUBEchoicegl_pipeline_settingsschema_Value_TglSamplerCUBE_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Value.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsChoiceTextureCUBE struct {
	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndex_

	XsdGoPkgHasElem_valuechoicetextureCUBEchoicegl_pipeline_settingsschema_Value_TglSamplerCUBE_

	XsdGoPkgHasElem_paramchoicetexture2Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceTextureCUBE function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceTextureCUBE instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceTextureCUBE instance.
func (me *TxsdGlPipelineSettingsChoiceTextureCUBE) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceTextureCUBE; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_valuechoicetextureCUBEchoicegl_pipeline_settingsschema_Value_TglSamplerCUBE_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_paramchoicetexture2Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_textureCUBEchoicegl_pipeline_settingsschema_TextureCUBE_TxsdGlPipelineSettingsChoiceTextureCUBE_ struct {
	TextureCUBE *TxsdGlPipelineSettingsChoiceTextureCUBE `xml:"http://www.collada.org/2005/11/COLLADASchema textureCUBE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_textureCUBEchoicegl_pipeline_settingsschema_TextureCUBE_TxsdGlPipelineSettingsChoiceTextureCUBE_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_textureCUBEchoicegl_pipeline_settingsschema_TextureCUBE_TxsdGlPipelineSettingsChoiceTextureCUBE_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_textureCUBEchoicegl_pipeline_settingsschema_TextureCUBE_TxsdGlPipelineSettingsChoiceTextureCUBE_ instance.
func (me *XsdGoPkgHasElem_textureCUBEchoicegl_pipeline_settingsschema_TextureCUBE_TxsdGlPipelineSettingsChoiceTextureCUBE_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_textureCUBEchoicegl_pipeline_settingsschema_TextureCUBE_TxsdGlPipelineSettingsChoiceTextureCUBE_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TextureCUBE.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsChoiceClipPlaneEnable struct {
	XsdGoPkgHasAttr_Index_TglMaxClipPlanesIndex_

	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_Tbool_False
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceClipPlaneEnable function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceClipPlaneEnable instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceClipPlaneEnable instance.
func (me *TxsdGlPipelineSettingsChoiceClipPlaneEnable) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceClipPlaneEnable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_clip_plane_enablechoicegl_pipeline_settingsschema_ClipPlaneEnable_TxsdGlPipelineSettingsChoiceClipPlaneEnable_ struct {
	ClipPlaneEnable *TxsdGlPipelineSettingsChoiceClipPlaneEnable `xml:"http://www.collada.org/2005/11/COLLADASchema clip_plane_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_clip_plane_enablechoicegl_pipeline_settingsschema_ClipPlaneEnable_TxsdGlPipelineSettingsChoiceClipPlaneEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_clip_plane_enablechoicegl_pipeline_settingsschema_ClipPlaneEnable_TxsdGlPipelineSettingsChoiceClipPlaneEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_clip_plane_enablechoicegl_pipeline_settingsschema_ClipPlaneEnable_TxsdGlPipelineSettingsChoiceClipPlaneEnable_ instance.
func (me *XsdGoPkgHasElem_clip_plane_enablechoicegl_pipeline_settingsschema_ClipPlaneEnable_TxsdGlPipelineSettingsChoiceClipPlaneEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_clip_plane_enablechoicegl_pipeline_settingsschema_ClipPlaneEnable_TxsdGlPipelineSettingsChoiceClipPlaneEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ClipPlaneEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_textureDEPTH_enablechoicegl_pipeline_settingsschema_TextureDEPTHEnable_TxsdGlPipelineSettingsChoiceTextureDEPTHEnable_ struct {
	TextureDEPTHEnable *TxsdGlPipelineSettingsChoiceTexture2DEnable `xml:"http://www.collada.org/2005/11/COLLADASchema textureDEPTH_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_textureDEPTH_enablechoicegl_pipeline_settingsschema_TextureDEPTHEnable_TxsdGlPipelineSettingsChoiceTextureDEPTHEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_textureDEPTH_enablechoicegl_pipeline_settingsschema_TextureDEPTHEnable_TxsdGlPipelineSettingsChoiceTextureDEPTHEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_textureDEPTH_enablechoicegl_pipeline_settingsschema_TextureDEPTHEnable_TxsdGlPipelineSettingsChoiceTextureDEPTHEnable_ instance.
func (me *XsdGoPkgHasElem_textureDEPTH_enablechoicegl_pipeline_settingsschema_TextureDEPTHEnable_TxsdGlPipelineSettingsChoiceTextureDEPTHEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_textureDEPTH_enablechoicegl_pipeline_settingsschema_TextureDEPTHEnable_TxsdGlPipelineSettingsChoiceTextureDEPTHEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TextureDEPTHEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_valuechoicetextureDEPTHchoicegl_pipeline_settingsschema_Value_TglSamplerDEPTH_ struct {
	Value *TglSamplerDEPTH `xml:"http://www.collada.org/2005/11/COLLADASchema value"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_valuechoicetextureDEPTHchoicegl_pipeline_settingsschema_Value_TglSamplerDEPTH_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_valuechoicetextureDEPTHchoicegl_pipeline_settingsschema_Value_TglSamplerDEPTH_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_valuechoicetextureDEPTHchoicegl_pipeline_settingsschema_Value_TglSamplerDEPTH_ instance.
func (me *XsdGoPkgHasElem_valuechoicetextureDEPTHchoicegl_pipeline_settingsschema_Value_TglSamplerDEPTH_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_valuechoicetextureDEPTHchoicegl_pipeline_settingsschema_Value_TglSamplerDEPTH_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Value.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsChoiceTextureDEPTH struct {
	XsdGoPkgHasElem_valuechoicetextureDEPTHchoicegl_pipeline_settingsschema_Value_TglSamplerDEPTH_

	XsdGoPkgHasElem_paramchoicetexture2Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndex_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceTextureDEPTH function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceTextureDEPTH instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceTextureDEPTH instance.
func (me *TxsdGlPipelineSettingsChoiceTextureDEPTH) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceTextureDEPTH; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_paramchoicetexture2Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_valuechoicetextureDEPTHchoicegl_pipeline_settingsschema_Value_TglSamplerDEPTH_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_textureDEPTHchoicegl_pipeline_settingsschema_TextureDEPTH_TxsdGlPipelineSettingsChoiceTextureDEPTH_ struct {
	TextureDEPTH *TxsdGlPipelineSettingsChoiceTextureDEPTH `xml:"http://www.collada.org/2005/11/COLLADASchema textureDEPTH"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_textureDEPTHchoicegl_pipeline_settingsschema_TextureDEPTH_TxsdGlPipelineSettingsChoiceTextureDEPTH_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_textureDEPTHchoicegl_pipeline_settingsschema_TextureDEPTH_TxsdGlPipelineSettingsChoiceTextureDEPTH_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_textureDEPTHchoicegl_pipeline_settingsschema_TextureDEPTH_TxsdGlPipelineSettingsChoiceTextureDEPTH_ instance.
func (me *XsdGoPkgHasElem_textureDEPTHchoicegl_pipeline_settingsschema_TextureDEPTH_TxsdGlPipelineSettingsChoiceTextureDEPTH_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_textureDEPTHchoicegl_pipeline_settingsschema_TextureDEPTH_TxsdGlPipelineSettingsChoiceTextureDEPTH_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TextureDEPTH.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_valuechoicetexture1Dchoicegl_pipeline_settingsschema_Value_TglSampler1D_ struct {
	Value *TglSampler1D `xml:"http://www.collada.org/2005/11/COLLADASchema value"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_valuechoicetexture1Dchoicegl_pipeline_settingsschema_Value_TglSampler1D_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_valuechoicetexture1Dchoicegl_pipeline_settingsschema_Value_TglSampler1D_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_valuechoicetexture1Dchoicegl_pipeline_settingsschema_Value_TglSampler1D_ instance.
func (me *XsdGoPkgHasElem_valuechoicetexture1Dchoicegl_pipeline_settingsschema_Value_TglSampler1D_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_valuechoicetexture1Dchoicegl_pipeline_settingsschema_Value_TglSampler1D_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Value.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsChoiceTexture1D struct {
	XsdGoPkgHasAttr_Index_TglMaxTextureImageUnitsIndex_

	XsdGoPkgHasElem_valuechoicetexture1Dchoicegl_pipeline_settingsschema_Value_TglSampler1D_

	XsdGoPkgHasElem_paramchoicetexture2Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceTexture1D function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceTexture1D instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceTexture1D instance.
func (me *TxsdGlPipelineSettingsChoiceTexture1D) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceTexture1D; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_paramchoicetexture2Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_valuechoicetexture1Dchoicegl_pipeline_settingsschema_Value_TglSampler1D_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_texture1Dchoicegl_pipeline_settingsschema_Texture1D_TxsdGlPipelineSettingsChoiceTexture1D_ struct {
	Texture1D *TxsdGlPipelineSettingsChoiceTexture1D `xml:"http://www.collada.org/2005/11/COLLADASchema texture1D"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_texture1Dchoicegl_pipeline_settingsschema_Texture1D_TxsdGlPipelineSettingsChoiceTexture1D_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_texture1Dchoicegl_pipeline_settingsschema_Texture1D_TxsdGlPipelineSettingsChoiceTexture1D_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_texture1Dchoicegl_pipeline_settingsschema_Texture1D_TxsdGlPipelineSettingsChoiceTexture1D_ instance.
func (me *XsdGoPkgHasElem_texture1Dchoicegl_pipeline_settingsschema_Texture1D_TxsdGlPipelineSettingsChoiceTexture1D_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_texture1Dchoicegl_pipeline_settingsschema_Texture1D_TxsdGlPipelineSettingsChoiceTexture1D_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Texture1D.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Value_TglFogCoordSrcType_FogCoordinate struct {
	Value TglFogCoordSrcType `xml:"http://www.collada.org/2005/11/COLLADASchema value,attr"`
}

//	Returns the default value for Value -- "FOG_COORDINATE"
func (me XsdGoPkgHasAttr_Value_TglFogCoordSrcType_FogCoordinate) ValueDefault() TglFogCoordSrcType {
	return TglFogCoordSrcType("FOG_COORDINATE")
}

type TxsdGlPipelineSettingsChoiceFogCoordSrc struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Value_TglFogCoordSrcType_FogCoordinate
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceFogCoordSrc function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceFogCoordSrc instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceFogCoordSrc instance.
func (me *TxsdGlPipelineSettingsChoiceFogCoordSrc) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceFogCoordSrc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fog_coord_srcchoicegl_pipeline_settingsschema_FogCoordSrc_TxsdGlPipelineSettingsChoiceFogCoordSrc_ struct {
	FogCoordSrc *TxsdGlPipelineSettingsChoiceFogCoordSrc `xml:"http://www.collada.org/2005/11/COLLADASchema fog_coord_src"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fog_coord_srcchoicegl_pipeline_settingsschema_FogCoordSrc_TxsdGlPipelineSettingsChoiceFogCoordSrc_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fog_coord_srcchoicegl_pipeline_settingsschema_FogCoordSrc_TxsdGlPipelineSettingsChoiceFogCoordSrc_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_fog_coord_srcchoicegl_pipeline_settingsschema_FogCoordSrc_TxsdGlPipelineSettingsChoiceFogCoordSrc_ instance.
func (me *XsdGoPkgHasElem_fog_coord_srcchoicegl_pipeline_settingsschema_FogCoordSrc_TxsdGlPipelineSettingsChoiceFogCoordSrc_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fog_coord_srcchoicegl_pipeline_settingsschema_FogCoordSrc_TxsdGlPipelineSettingsChoiceFogCoordSrc_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FogCoordSrc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_line_smooth_enablechoicegl_pipeline_settingsschema_LineSmoothEnable_TxsdGlPipelineSettingsChoiceLineSmoothEnable_ struct {
	LineSmoothEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema line_smooth_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_line_smooth_enablechoicegl_pipeline_settingsschema_LineSmoothEnable_TxsdGlPipelineSettingsChoiceLineSmoothEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_line_smooth_enablechoicegl_pipeline_settingsschema_LineSmoothEnable_TxsdGlPipelineSettingsChoiceLineSmoothEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_line_smooth_enablechoicegl_pipeline_settingsschema_LineSmoothEnable_TxsdGlPipelineSettingsChoiceLineSmoothEnable_ instance.
func (me *XsdGoPkgHasElem_line_smooth_enablechoicegl_pipeline_settingsschema_LineSmoothEnable_TxsdGlPipelineSettingsChoiceLineSmoothEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_line_smooth_enablechoicegl_pipeline_settingsschema_LineSmoothEnable_TxsdGlPipelineSettingsChoiceLineSmoothEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LineSmoothEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_depth_clamp_enablechoicegl_pipeline_settingsschema_DepthClampEnable_TxsdGlPipelineSettingsChoiceDepthClampEnable_ struct {
	DepthClampEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema depth_clamp_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_depth_clamp_enablechoicegl_pipeline_settingsschema_DepthClampEnable_TxsdGlPipelineSettingsChoiceDepthClampEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_depth_clamp_enablechoicegl_pipeline_settingsschema_DepthClampEnable_TxsdGlPipelineSettingsChoiceDepthClampEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_depth_clamp_enablechoicegl_pipeline_settingsschema_DepthClampEnable_TxsdGlPipelineSettingsChoiceDepthClampEnable_ instance.
func (me *XsdGoPkgHasElem_depth_clamp_enablechoicegl_pipeline_settingsschema_DepthClampEnable_TxsdGlPipelineSettingsChoiceDepthClampEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_depth_clamp_enablechoicegl_pipeline_settingsschema_DepthClampEnable_TxsdGlPipelineSettingsChoiceDepthClampEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DepthClampEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_auto_normal_enablechoicegl_pipeline_settingsschema_AutoNormalEnable_TxsdGlPipelineSettingsChoiceAutoNormalEnable_ struct {
	AutoNormalEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema auto_normal_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_auto_normal_enablechoicegl_pipeline_settingsschema_AutoNormalEnable_TxsdGlPipelineSettingsChoiceAutoNormalEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_auto_normal_enablechoicegl_pipeline_settingsschema_AutoNormalEnable_TxsdGlPipelineSettingsChoiceAutoNormalEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_auto_normal_enablechoicegl_pipeline_settingsschema_AutoNormalEnable_TxsdGlPipelineSettingsChoiceAutoNormalEnable_ instance.
func (me *XsdGoPkgHasElem_auto_normal_enablechoicegl_pipeline_settingsschema_AutoNormalEnable_TxsdGlPipelineSettingsChoiceAutoNormalEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_auto_normal_enablechoicegl_pipeline_settingsschema_AutoNormalEnable_TxsdGlPipelineSettingsChoiceAutoNormalEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AutoNormalEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_model_two_side_enablechoicegl_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlPipelineSettingsChoiceLightModelTwoSideEnable_ struct {
	LightModelTwoSideEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema light_model_two_side_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_model_two_side_enablechoicegl_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlPipelineSettingsChoiceLightModelTwoSideEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_model_two_side_enablechoicegl_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlPipelineSettingsChoiceLightModelTwoSideEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_model_two_side_enablechoicegl_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlPipelineSettingsChoiceLightModelTwoSideEnable_ instance.
func (me *XsdGoPkgHasElem_light_model_two_side_enablechoicegl_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlPipelineSettingsChoiceLightModelTwoSideEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_model_two_side_enablechoicegl_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlPipelineSettingsChoiceLightModelTwoSideEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightModelTwoSideEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGlPipelineSettingsChoiceLightConstantAttenuation struct {
	XsdGoPkgHasAttr_Param_XsdtNCName_

	XsdGoPkgHasAttr_Index_TglMaxLightsIndex_

	XsdGoPkgHasAttr_Value_Tfloat_1
}

//	If the WalkHandlers.TxsdGlPipelineSettingsChoiceLightConstantAttenuation function is not nil (ie. was set by outside code), calls it with this TxsdGlPipelineSettingsChoiceLightConstantAttenuation instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdGlPipelineSettingsChoiceLightConstantAttenuation instance.
func (me *TxsdGlPipelineSettingsChoiceLightConstantAttenuation) Walk() (err error) {
	if fn := WalkHandlers.TxsdGlPipelineSettingsChoiceLightConstantAttenuation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_light_constant_attenuationchoicegl_pipeline_settingsschema_LightConstantAttenuation_TxsdGlPipelineSettingsChoiceLightConstantAttenuation_ struct {
	LightConstantAttenuation *TxsdGlPipelineSettingsChoiceLightConstantAttenuation `xml:"http://www.collada.org/2005/11/COLLADASchema light_constant_attenuation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_light_constant_attenuationchoicegl_pipeline_settingsschema_LightConstantAttenuation_TxsdGlPipelineSettingsChoiceLightConstantAttenuation_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_light_constant_attenuationchoicegl_pipeline_settingsschema_LightConstantAttenuation_TxsdGlPipelineSettingsChoiceLightConstantAttenuation_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_light_constant_attenuationchoicegl_pipeline_settingsschema_LightConstantAttenuation_TxsdGlPipelineSettingsChoiceLightConstantAttenuation_ instance.
func (me *XsdGoPkgHasElem_light_constant_attenuationchoicegl_pipeline_settingsschema_LightConstantAttenuation_TxsdGlPipelineSettingsChoiceLightConstantAttenuation_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_light_constant_attenuationchoicegl_pipeline_settingsschema_LightConstantAttenuation_TxsdGlPipelineSettingsChoiceLightConstantAttenuation_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LightConstantAttenuation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_textureCUBE_enablechoicegl_pipeline_settingsschema_TextureCUBEEnable_TxsdGlPipelineSettingsChoiceTextureCUBEEnable_ struct {
	TextureCUBEEnable *TxsdGlPipelineSettingsChoiceTexture2DEnable `xml:"http://www.collada.org/2005/11/COLLADASchema textureCUBE_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_textureCUBE_enablechoicegl_pipeline_settingsschema_TextureCUBEEnable_TxsdGlPipelineSettingsChoiceTextureCUBEEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_textureCUBE_enablechoicegl_pipeline_settingsschema_TextureCUBEEnable_TxsdGlPipelineSettingsChoiceTextureCUBEEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_textureCUBE_enablechoicegl_pipeline_settingsschema_TextureCUBEEnable_TxsdGlPipelineSettingsChoiceTextureCUBEEnable_ instance.
func (me *XsdGoPkgHasElem_textureCUBE_enablechoicegl_pipeline_settingsschema_TextureCUBEEnable_TxsdGlPipelineSettingsChoiceTextureCUBEEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_textureCUBE_enablechoicegl_pipeline_settingsschema_TextureCUBEEnable_TxsdGlPipelineSettingsChoiceTextureCUBEEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TextureCUBEEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_stencil_maskchoicegl_pipeline_settingsschema_StencilMask_TxsdGlPipelineSettingsChoiceStencilMask_ struct {
	StencilMask *TxsdGlesPipelineSettingsChoiceStencilMask `xml:"http://www.collada.org/2005/11/COLLADASchema stencil_mask"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_stencil_maskchoicegl_pipeline_settingsschema_StencilMask_TxsdGlPipelineSettingsChoiceStencilMask_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stencil_maskchoicegl_pipeline_settingsschema_StencilMask_TxsdGlPipelineSettingsChoiceStencilMask_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stencil_maskchoicegl_pipeline_settingsschema_StencilMask_TxsdGlPipelineSettingsChoiceStencilMask_ instance.
func (me *XsdGoPkgHasElem_stencil_maskchoicegl_pipeline_settingsschema_StencilMask_TxsdGlPipelineSettingsChoiceStencilMask_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_stencil_maskchoicegl_pipeline_settingsschema_StencilMask_TxsdGlPipelineSettingsChoiceStencilMask_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StencilMask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_polygon_stipple_enablechoicegl_pipeline_settingsschema_PolygonStippleEnable_TxsdGlPipelineSettingsChoicePolygonStippleEnable_ struct {
	PolygonStippleEnable *TxsdGlesPipelineSettingsChoiceTexturePipelineEnable `xml:"http://www.collada.org/2005/11/COLLADASchema polygon_stipple_enable"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_polygon_stipple_enablechoicegl_pipeline_settingsschema_PolygonStippleEnable_TxsdGlPipelineSettingsChoicePolygonStippleEnable_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_polygon_stipple_enablechoicegl_pipeline_settingsschema_PolygonStippleEnable_TxsdGlPipelineSettingsChoicePolygonStippleEnable_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_polygon_stipple_enablechoicegl_pipeline_settingsschema_PolygonStippleEnable_TxsdGlPipelineSettingsChoicePolygonStippleEnable_ instance.
func (me *XsdGoPkgHasElem_polygon_stipple_enablechoicegl_pipeline_settingsschema_PolygonStippleEnable_TxsdGlPipelineSettingsChoicePolygonStippleEnable_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_polygon_stipple_enablechoicegl_pipeline_settingsschema_PolygonStippleEnable_TxsdGlPipelineSettingsChoicePolygonStippleEnable_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PolygonStippleEnable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasGroup_GlPipelineSettings struct {
	XsdGoPkgHasElem_scissor_test_enablechoicegl_pipeline_settingsschema_ScissorTestEnable_TxsdGlPipelineSettingsChoiceScissorTestEnable_

	XsdGoPkgHasElem_blend_enablechoicegl_pipeline_settingsschema_BlendEnable_TxsdGlPipelineSettingsChoiceBlendEnable_

	XsdGoPkgHasElem_polygon_offset_point_enablechoicegl_pipeline_settingsschema_PolygonOffsetPointEnable_TxsdGlPipelineSettingsChoicePolygonOffsetPointEnable_

	XsdGoPkgHasElem_clip_planechoicegl_pipeline_settingsschema_ClipPlane_TxsdGlPipelineSettingsChoiceClipPlane_

	XsdGoPkgHasElem_alpha_test_enablechoicegl_pipeline_settingsschema_AlphaTestEnable_TxsdGlPipelineSettingsChoiceAlphaTestEnable_

	XsdGoPkgHasElem_textureRECT_enablechoicegl_pipeline_settingsschema_TextureRECTEnable_TxsdGlPipelineSettingsChoiceTextureRECTEnable_

	XsdGoPkgHasElem_material_diffusechoicegl_pipeline_settingsschema_MaterialDiffuse_TxsdGlPipelineSettingsChoiceMaterialDiffuse_

	XsdGoPkgHasElem_light_linear_attenuationchoicegl_pipeline_settingsschema_LightLinearAttenuation_TxsdGlPipelineSettingsChoiceLightLinearAttenuation_

	XsdGoPkgHasElem_material_ambientchoicegl_pipeline_settingsschema_MaterialAmbient_TxsdGlPipelineSettingsChoiceMaterialAmbient_

	XsdGoPkgHasElem_lighting_enablechoicegl_pipeline_settingsschema_LightingEnable_TxsdGlPipelineSettingsChoiceLightingEnable_

	XsdGoPkgHasElem_GlHookAbstract

	XsdGoPkgHasElem_front_facechoicegl_pipeline_settingsschema_FrontFace_TxsdGlPipelineSettingsChoiceFrontFace_

	XsdGoPkgHasElem_depth_rangechoicegl_pipeline_settingsschema_DepthRange_TxsdGlPipelineSettingsChoiceDepthRange_

	XsdGoPkgHasElem_light_positionchoicegl_pipeline_settingsschema_LightPosition_TxsdGlPipelineSettingsChoiceLightPosition_

	XsdGoPkgHasElem_depth_funcchoicegl_pipeline_settingsschema_DepthFunc_TxsdGlPipelineSettingsChoiceDepthFunc_

	XsdGoPkgHasElem_dither_enablechoicegl_pipeline_settingsschema_DitherEnable_TxsdGlPipelineSettingsChoiceDitherEnable_

	XsdGoPkgHasElem_textureRECTchoicegl_pipeline_settingsschema_TextureRECT_TxsdGlPipelineSettingsChoiceTextureRECT_

	XsdGoPkgHasElem_color_material_enablechoicegl_pipeline_settingsschema_ColorMaterialEnable_TxsdGlPipelineSettingsChoiceColorMaterialEnable_

	XsdGoPkgHasElem_cull_facechoicegl_pipeline_settingsschema_CullFace_TxsdGlPipelineSettingsChoiceCullFace_

	XsdGoPkgHasElem_clear_stencilchoicegl_pipeline_settingsschema_ClearStencil_TxsdGlPipelineSettingsChoiceClearStencil_

	XsdGoPkgHasElem_stencil_op_separatechoicegl_pipeline_settingsschema_StencilOpSeparate_TxsdGlPipelineSettingsChoiceStencilOpSeparate_

	XsdGoPkgHasElem_light_spot_exponentchoicegl_pipeline_settingsschema_LightSpotExponent_TxsdGlPipelineSettingsChoiceLightSpotExponent_

	XsdGoPkgHasElem_textureCUBEchoicegl_pipeline_settingsschema_TextureCUBE_TxsdGlPipelineSettingsChoiceTextureCUBE_

	XsdGoPkgHasElem_clip_plane_enablechoicegl_pipeline_settingsschema_ClipPlaneEnable_TxsdGlPipelineSettingsChoiceClipPlaneEnable_

	XsdGoPkgHasElem_textureDEPTH_enablechoicegl_pipeline_settingsschema_TextureDEPTHEnable_TxsdGlPipelineSettingsChoiceTextureDEPTHEnable_

	XsdGoPkgHasElem_textureDEPTHchoicegl_pipeline_settingsschema_TextureDEPTH_TxsdGlPipelineSettingsChoiceTextureDEPTH_

	XsdGoPkgHasElem_texture1Dchoicegl_pipeline_settingsschema_Texture1D_TxsdGlPipelineSettingsChoiceTexture1D_

	XsdGoPkgHasElem_fog_coord_srcchoicegl_pipeline_settingsschema_FogCoordSrc_TxsdGlPipelineSettingsChoiceFogCoordSrc_

	XsdGoPkgHasElem_line_smooth_enablechoicegl_pipeline_settingsschema_LineSmoothEnable_TxsdGlPipelineSettingsChoiceLineSmoothEnable_

	XsdGoPkgHasElem_depth_clamp_enablechoicegl_pipeline_settingsschema_DepthClampEnable_TxsdGlPipelineSettingsChoiceDepthClampEnable_

	XsdGoPkgHasElem_auto_normal_enablechoicegl_pipeline_settingsschema_AutoNormalEnable_TxsdGlPipelineSettingsChoiceAutoNormalEnable_

	XsdGoPkgHasElem_light_model_two_side_enablechoicegl_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlPipelineSettingsChoiceLightModelTwoSideEnable_

	XsdGoPkgHasElem_light_constant_attenuationchoicegl_pipeline_settingsschema_LightConstantAttenuation_TxsdGlPipelineSettingsChoiceLightConstantAttenuation_

	XsdGoPkgHasElem_textureCUBE_enablechoicegl_pipeline_settingsschema_TextureCUBEEnable_TxsdGlPipelineSettingsChoiceTextureCUBEEnable_

	XsdGoPkgHasElem_stencil_maskchoicegl_pipeline_settingsschema_StencilMask_TxsdGlPipelineSettingsChoiceStencilMask_

	XsdGoPkgHasElem_polygon_stipple_enablechoicegl_pipeline_settingsschema_PolygonStippleEnable_TxsdGlPipelineSettingsChoicePolygonStippleEnable_

	XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegl_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToOneEnable_

	XsdGoPkgHasElem_shade_modelchoicegl_pipeline_settingsschema_ShadeModel_TxsdGlPipelineSettingsChoiceShadeModel_

	XsdGoPkgHasElem_light_spot_cutoffchoicegl_pipeline_settingsschema_LightSpotCutoff_TxsdGlPipelineSettingsChoiceLightSpotCutoff_

	XsdGoPkgHasElem_light_specularchoicegl_pipeline_settingsschema_LightSpecular_TxsdGlPipelineSettingsChoiceLightSpecular_

	XsdGoPkgHasElem_light_model_color_controlchoicegl_pipeline_settingsschema_LightModelColorControl_TxsdGlPipelineSettingsChoiceLightModelColorControl_

	XsdGoPkgHasElem_texture_env_modechoicegl_pipeline_settingsschema_TextureEnvMode_TxsdGlPipelineSettingsChoiceTextureEnvMode_

	XsdGoPkgHasElem_stencil_funcchoicegl_pipeline_settingsschema_StencilFunc_TxsdGlPipelineSettingsChoiceStencilFunc_

	XsdGoPkgHasElem_blend_equationchoicegl_pipeline_settingsschema_BlendEquation_TxsdGlPipelineSettingsChoiceBlendEquation_

	XsdGoPkgHasElem_stencil_func_separatechoicegl_pipeline_settingsschema_StencilFuncSeparate_TxsdGlPipelineSettingsChoiceStencilFuncSeparate_

	XsdGoPkgHasElem_material_shininesschoicegl_pipeline_settingsschema_MaterialShininess_TxsdGlPipelineSettingsChoiceMaterialShininess_

	XsdGoPkgHasElem_depth_test_enablechoicegl_pipeline_settingsschema_DepthTestEnable_TxsdGlPipelineSettingsChoiceDepthTestEnable_

	XsdGoPkgHasElem_blend_colorchoicegl_pipeline_settingsschema_BlendColor_TxsdGlPipelineSettingsChoiceBlendColor_

	XsdGoPkgHasElem_polygon_modechoicegl_pipeline_settingsschema_PolygonMode_TxsdGlPipelineSettingsChoicePolygonMode_

	XsdGoPkgHasElem_light_spot_directionchoicegl_pipeline_settingsschema_LightSpotDirection_TxsdGlPipelineSettingsChoiceLightSpotDirection_

	XsdGoPkgHasElem_multisample_enablechoicegl_pipeline_settingsschema_MultisampleEnable_TxsdGlPipelineSettingsChoiceMultisampleEnable_

	XsdGoPkgHasElem_color_materialchoicegl_pipeline_settingsschema_ColorMaterial_TxsdGlPipelineSettingsChoiceColorMaterial_

	XsdGoPkgHasElem_blend_funcchoicegl_pipeline_settingsschema_BlendFunc_TxsdGlPipelineSettingsChoiceBlendFunc_

	XsdGoPkgHasElem_material_specularchoicegl_pipeline_settingsschema_MaterialSpecular_TxsdGlPipelineSettingsChoiceMaterialSpecular_

	XsdGoPkgHasElem_line_stipple_enablechoicegl_pipeline_settingsschema_LineStippleEnable_TxsdGlPipelineSettingsChoiceLineStippleEnable_

	XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegl_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToCoverageEnable_

	XsdGoPkgHasElem_point_smooth_enablechoicegl_pipeline_settingsschema_PointSmoothEnable_TxsdGlPipelineSettingsChoicePointSmoothEnable_

	XsdGoPkgHasElem_light_ambientchoicegl_pipeline_settingsschema_LightAmbient_TxsdGlPipelineSettingsChoiceLightAmbient_

	XsdGoPkgHasElem_logic_opchoicegl_pipeline_settingsschema_LogicOp_TxsdGlPipelineSettingsChoiceLogicOp_

	XsdGoPkgHasElem_cull_face_enablechoicegl_pipeline_settingsschema_CullFaceEnable_TxsdGlPipelineSettingsChoiceCullFaceEnable_

	XsdGoPkgHasElem_fog_colorchoicegl_pipeline_settingsschema_FogColor_TxsdGlPipelineSettingsChoiceFogColor_

	XsdGoPkgHasElem_line_widthchoicegl_pipeline_settingsschema_LineWidth_TxsdGlPipelineSettingsChoiceLineWidth_

	XsdGoPkgHasElem_texture2Dchoicegl_pipeline_settingsschema_Texture2D_TxsdGlPipelineSettingsChoiceTexture2D_

	XsdGoPkgHasElem_model_view_matrixchoicegl_pipeline_settingsschema_ModelViewMatrix_TxsdGlPipelineSettingsChoiceModelViewMatrix_

	XsdGoPkgHasElem_fog_densitychoicegl_pipeline_settingsschema_FogDensity_TxsdGlPipelineSettingsChoiceFogDensity_

	XsdGoPkgHasElem_normalize_enablechoicegl_pipeline_settingsschema_NormalizeEnable_TxsdGlPipelineSettingsChoiceNormalizeEnable_

	XsdGoPkgHasElem_light_diffusechoicegl_pipeline_settingsschema_LightDiffuse_TxsdGlPipelineSettingsChoiceLightDiffuse_

	XsdGoPkgHasElem_blend_equation_separatechoicegl_pipeline_settingsschema_BlendEquationSeparate_TxsdGlPipelineSettingsChoiceBlendEquationSeparate_

	XsdGoPkgHasElem_depth_bounds_enablechoicegl_pipeline_settingsschema_DepthBoundsEnable_TxsdGlPipelineSettingsChoiceDepthBoundsEnable_

	XsdGoPkgHasElem_texture_env_colorchoicegl_pipeline_settingsschema_TextureEnvColor_TxsdGlPipelineSettingsChoiceTextureEnvColor_

	XsdGoPkgHasElem_sample_coverage_enablechoicegl_pipeline_settingsschema_SampleCoverageEnable_TxsdGlPipelineSettingsChoiceSampleCoverageEnable_

	XsdGoPkgHasElem_stencil_mask_separatechoicegl_pipeline_settingsschema_StencilMaskSeparate_TxsdGlPipelineSettingsChoiceStencilMaskSeparate_

	XsdGoPkgHasElem_polygon_offset_fill_enablechoicegl_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlPipelineSettingsChoicePolygonOffsetFillEnable_

	XsdGoPkgHasElem_polygon_offset_line_enablechoicegl_pipeline_settingsschema_PolygonOffsetLineEnable_TxsdGlPipelineSettingsChoicePolygonOffsetLineEnable_

	XsdGoPkgHasElem_point_fade_threshold_sizechoicegl_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlPipelineSettingsChoicePointFadeThresholdSize_

	XsdGoPkgHasElem_line_stipplechoicegl_pipeline_settingsschema_LineStipple_TxsdGlPipelineSettingsChoiceLineStipple_

	XsdGoPkgHasElem_point_distance_attenuationchoicegl_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlPipelineSettingsChoicePointDistanceAttenuation_

	XsdGoPkgHasElem_light_quadratic_attenuationchoicegl_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation_

	XsdGoPkgHasElem_logic_op_enablechoicegl_pipeline_settingsschema_LogicOpEnable_TxsdGlPipelineSettingsChoiceLogicOpEnable_

	XsdGoPkgHasElem_alpha_funcchoicegl_pipeline_settingsschema_AlphaFunc_TxsdGlPipelineSettingsChoiceAlphaFunc_

	XsdGoPkgHasElem_texture2D_enablechoicegl_pipeline_settingsschema_Texture2DEnable_TxsdGlPipelineSettingsChoiceTexture2DEnable_

	XsdGoPkgHasElem_fog_modechoicegl_pipeline_settingsschema_FogMode_TxsdGlPipelineSettingsChoiceFogMode_

	XsdGoPkgHasElem_depth_boundschoicegl_pipeline_settingsschema_DepthBounds_TxsdGlPipelineSettingsChoiceDepthBounds_

	XsdGoPkgHasElem_stencil_test_enablechoicegl_pipeline_settingsschema_StencilTestEnable_TxsdGlPipelineSettingsChoiceStencilTestEnable_

	XsdGoPkgHasElem_light_model_ambientchoicegl_pipeline_settingsschema_LightModelAmbient_TxsdGlPipelineSettingsChoiceLightModelAmbient_

	XsdGoPkgHasElem_point_size_maxchoicegl_pipeline_settingsschema_PointSizeMax_TxsdGlPipelineSettingsChoicePointSizeMax_

	XsdGoPkgHasElem_color_maskchoicegl_pipeline_settingsschema_ColorMask_TxsdGlPipelineSettingsChoiceColorMask_

	XsdGoPkgHasElem_point_size_minchoicegl_pipeline_settingsschema_PointSizeMin_TxsdGlPipelineSettingsChoicePointSizeMin_

	XsdGoPkgHasElem_blend_func_separatechoicegl_pipeline_settingsschema_BlendFuncSeparate_TxsdGlPipelineSettingsChoiceBlendFuncSeparate_

	XsdGoPkgHasElem_fog_startchoicegl_pipeline_settingsschema_FogStart_TxsdGlPipelineSettingsChoiceFogStart_

	XsdGoPkgHasElem_light_enablechoicegl_pipeline_settingsschema_LightEnable_TxsdGlPipelineSettingsChoiceLightEnable_

	XsdGoPkgHasElem_fog_enablechoicegl_pipeline_settingsschema_FogEnable_TxsdGlPipelineSettingsChoiceFogEnable_

	XsdGoPkgHasElem_point_sizechoicegl_pipeline_settingsschema_PointSize_TxsdGlPipelineSettingsChoicePointSize_

	XsdGoPkgHasElem_depth_maskchoicegl_pipeline_settingsschema_DepthMask_TxsdGlPipelineSettingsChoiceDepthMask_

	XsdGoPkgHasElem_fog_endchoicegl_pipeline_settingsschema_FogEnd_TxsdGlPipelineSettingsChoiceFogEnd_

	XsdGoPkgHasElem_projection_matrixchoicegl_pipeline_settingsschema_ProjectionMatrix_TxsdGlPipelineSettingsChoiceProjectionMatrix_

	XsdGoPkgHasElem_material_emissionchoicegl_pipeline_settingsschema_MaterialEmission_TxsdGlPipelineSettingsChoiceMaterialEmission_

	XsdGoPkgHasElem_rescale_normal_enablechoicegl_pipeline_settingsschema_RescaleNormalEnable_TxsdGlPipelineSettingsChoiceRescaleNormalEnable_

	XsdGoPkgHasElem_clear_depthchoicegl_pipeline_settingsschema_ClearDepth_TxsdGlPipelineSettingsChoiceClearDepth_

	XsdGoPkgHasElem_polygon_smooth_enablechoicegl_pipeline_settingsschema_PolygonSmoothEnable_TxsdGlPipelineSettingsChoicePolygonSmoothEnable_

	XsdGoPkgHasElem_color_logic_op_enablechoicegl_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlPipelineSettingsChoiceColorLogicOpEnable_

	XsdGoPkgHasElem_light_model_local_viewer_enablechoicegl_pipeline_settingsschema_LightModelLocalViewerEnable_TxsdGlPipelineSettingsChoiceLightModelLocalViewerEnable_

	XsdGoPkgHasElem_stencil_opchoicegl_pipeline_settingsschema_StencilOp_TxsdGlPipelineSettingsChoiceStencilOp_

	XsdGoPkgHasElem_texture3D_enablechoicegl_pipeline_settingsschema_Texture3DEnable_TxsdGlPipelineSettingsChoiceTexture3DEnable_

	XsdGoPkgHasElem_texture3Dchoicegl_pipeline_settingsschema_Texture3D_TxsdGlPipelineSettingsChoiceTexture3D_

	XsdGoPkgHasElem_scissorchoicegl_pipeline_settingsschema_Scissor_TxsdGlPipelineSettingsChoiceScissor_

	XsdGoPkgHasElem_clear_colorchoicegl_pipeline_settingsschema_ClearColor_TxsdGlPipelineSettingsChoiceClearColor_

	XsdGoPkgHasElem_polygon_offsetchoicegl_pipeline_settingsschema_PolygonOffset_TxsdGlPipelineSettingsChoicePolygonOffset_

	XsdGoPkgHasElem_texture1D_enablechoicegl_pipeline_settingsschema_Texture1DEnable_TxsdGlPipelineSettingsChoiceTexture1DEnable_
}

//	If the WalkHandlers.XsdGoPkgHasGroup_GlPipelineSettings function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_GlPipelineSettings instance as the single argument. Then calls the Walk() method on 109/109 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_GlPipelineSettings instance.
func (me *XsdGoPkgHasGroup_GlPipelineSettings) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasGroup_GlPipelineSettings; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_light_model_two_side_enablechoicegl_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlPipelineSettingsChoiceLightModelTwoSideEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_constant_attenuationchoicegl_pipeline_settingsschema_LightConstantAttenuation_TxsdGlPipelineSettingsChoiceLightConstantAttenuation_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_textureCUBE_enablechoicegl_pipeline_settingsschema_TextureCUBEEnable_TxsdGlPipelineSettingsChoiceTextureCUBEEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stencil_maskchoicegl_pipeline_settingsschema_StencilMask_TxsdGlPipelineSettingsChoiceStencilMask_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_polygon_stipple_enablechoicegl_pipeline_settingsschema_PolygonStippleEnable_TxsdGlPipelineSettingsChoicePolygonStippleEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegl_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToOneEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_shade_modelchoicegl_pipeline_settingsschema_ShadeModel_TxsdGlPipelineSettingsChoiceShadeModel_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_spot_cutoffchoicegl_pipeline_settingsschema_LightSpotCutoff_TxsdGlPipelineSettingsChoiceLightSpotCutoff_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_specularchoicegl_pipeline_settingsschema_LightSpecular_TxsdGlPipelineSettingsChoiceLightSpecular_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_model_color_controlchoicegl_pipeline_settingsschema_LightModelColorControl_TxsdGlPipelineSettingsChoiceLightModelColorControl_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_texture_env_modechoicegl_pipeline_settingsschema_TextureEnvMode_TxsdGlPipelineSettingsChoiceTextureEnvMode_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stencil_funcchoicegl_pipeline_settingsschema_StencilFunc_TxsdGlPipelineSettingsChoiceStencilFunc_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_blend_equationchoicegl_pipeline_settingsschema_BlendEquation_TxsdGlPipelineSettingsChoiceBlendEquation_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stencil_func_separatechoicegl_pipeline_settingsschema_StencilFuncSeparate_TxsdGlPipelineSettingsChoiceStencilFuncSeparate_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_material_shininesschoicegl_pipeline_settingsschema_MaterialShininess_TxsdGlPipelineSettingsChoiceMaterialShininess_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_depth_test_enablechoicegl_pipeline_settingsschema_DepthTestEnable_TxsdGlPipelineSettingsChoiceDepthTestEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_blend_colorchoicegl_pipeline_settingsschema_BlendColor_TxsdGlPipelineSettingsChoiceBlendColor_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_polygon_modechoicegl_pipeline_settingsschema_PolygonMode_TxsdGlPipelineSettingsChoicePolygonMode_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_spot_directionchoicegl_pipeline_settingsschema_LightSpotDirection_TxsdGlPipelineSettingsChoiceLightSpotDirection_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_multisample_enablechoicegl_pipeline_settingsschema_MultisampleEnable_TxsdGlPipelineSettingsChoiceMultisampleEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_color_materialchoicegl_pipeline_settingsschema_ColorMaterial_TxsdGlPipelineSettingsChoiceColorMaterial_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_blend_funcchoicegl_pipeline_settingsschema_BlendFunc_TxsdGlPipelineSettingsChoiceBlendFunc_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_material_specularchoicegl_pipeline_settingsschema_MaterialSpecular_TxsdGlPipelineSettingsChoiceMaterialSpecular_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_line_stipple_enablechoicegl_pipeline_settingsschema_LineStippleEnable_TxsdGlPipelineSettingsChoiceLineStippleEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegl_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToCoverageEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_point_smooth_enablechoicegl_pipeline_settingsschema_PointSmoothEnable_TxsdGlPipelineSettingsChoicePointSmoothEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_ambientchoicegl_pipeline_settingsschema_LightAmbient_TxsdGlPipelineSettingsChoiceLightAmbient_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_logic_opchoicegl_pipeline_settingsschema_LogicOp_TxsdGlPipelineSettingsChoiceLogicOp_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_cull_face_enablechoicegl_pipeline_settingsschema_CullFaceEnable_TxsdGlPipelineSettingsChoiceCullFaceEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fog_colorchoicegl_pipeline_settingsschema_FogColor_TxsdGlPipelineSettingsChoiceFogColor_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_line_widthchoicegl_pipeline_settingsschema_LineWidth_TxsdGlPipelineSettingsChoiceLineWidth_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_texture2Dchoicegl_pipeline_settingsschema_Texture2D_TxsdGlPipelineSettingsChoiceTexture2D_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_model_view_matrixchoicegl_pipeline_settingsschema_ModelViewMatrix_TxsdGlPipelineSettingsChoiceModelViewMatrix_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fog_densitychoicegl_pipeline_settingsschema_FogDensity_TxsdGlPipelineSettingsChoiceFogDensity_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_normalize_enablechoicegl_pipeline_settingsschema_NormalizeEnable_TxsdGlPipelineSettingsChoiceNormalizeEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_diffusechoicegl_pipeline_settingsschema_LightDiffuse_TxsdGlPipelineSettingsChoiceLightDiffuse_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_blend_equation_separatechoicegl_pipeline_settingsschema_BlendEquationSeparate_TxsdGlPipelineSettingsChoiceBlendEquationSeparate_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_depth_bounds_enablechoicegl_pipeline_settingsschema_DepthBoundsEnable_TxsdGlPipelineSettingsChoiceDepthBoundsEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_texture_env_colorchoicegl_pipeline_settingsschema_TextureEnvColor_TxsdGlPipelineSettingsChoiceTextureEnvColor_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sample_coverage_enablechoicegl_pipeline_settingsschema_SampleCoverageEnable_TxsdGlPipelineSettingsChoiceSampleCoverageEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stencil_mask_separatechoicegl_pipeline_settingsschema_StencilMaskSeparate_TxsdGlPipelineSettingsChoiceStencilMaskSeparate_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_polygon_offset_fill_enablechoicegl_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlPipelineSettingsChoicePolygonOffsetFillEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_polygon_offset_line_enablechoicegl_pipeline_settingsschema_PolygonOffsetLineEnable_TxsdGlPipelineSettingsChoicePolygonOffsetLineEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_point_fade_threshold_sizechoicegl_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlPipelineSettingsChoicePointFadeThresholdSize_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_line_stipplechoicegl_pipeline_settingsschema_LineStipple_TxsdGlPipelineSettingsChoiceLineStipple_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_point_distance_attenuationchoicegl_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlPipelineSettingsChoicePointDistanceAttenuation_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_quadratic_attenuationchoicegl_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_logic_op_enablechoicegl_pipeline_settingsschema_LogicOpEnable_TxsdGlPipelineSettingsChoiceLogicOpEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_alpha_funcchoicegl_pipeline_settingsschema_AlphaFunc_TxsdGlPipelineSettingsChoiceAlphaFunc_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_texture2D_enablechoicegl_pipeline_settingsschema_Texture2DEnable_TxsdGlPipelineSettingsChoiceTexture2DEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fog_modechoicegl_pipeline_settingsschema_FogMode_TxsdGlPipelineSettingsChoiceFogMode_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_depth_boundschoicegl_pipeline_settingsschema_DepthBounds_TxsdGlPipelineSettingsChoiceDepthBounds_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stencil_test_enablechoicegl_pipeline_settingsschema_StencilTestEnable_TxsdGlPipelineSettingsChoiceStencilTestEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_model_ambientchoicegl_pipeline_settingsschema_LightModelAmbient_TxsdGlPipelineSettingsChoiceLightModelAmbient_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_point_size_maxchoicegl_pipeline_settingsschema_PointSizeMax_TxsdGlPipelineSettingsChoicePointSizeMax_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_color_maskchoicegl_pipeline_settingsschema_ColorMask_TxsdGlPipelineSettingsChoiceColorMask_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_point_size_minchoicegl_pipeline_settingsschema_PointSizeMin_TxsdGlPipelineSettingsChoicePointSizeMin_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_blend_func_separatechoicegl_pipeline_settingsschema_BlendFuncSeparate_TxsdGlPipelineSettingsChoiceBlendFuncSeparate_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fog_startchoicegl_pipeline_settingsschema_FogStart_TxsdGlPipelineSettingsChoiceFogStart_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_enablechoicegl_pipeline_settingsschema_LightEnable_TxsdGlPipelineSettingsChoiceLightEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fog_enablechoicegl_pipeline_settingsschema_FogEnable_TxsdGlPipelineSettingsChoiceFogEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_point_sizechoicegl_pipeline_settingsschema_PointSize_TxsdGlPipelineSettingsChoicePointSize_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_depth_maskchoicegl_pipeline_settingsschema_DepthMask_TxsdGlPipelineSettingsChoiceDepthMask_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fog_endchoicegl_pipeline_settingsschema_FogEnd_TxsdGlPipelineSettingsChoiceFogEnd_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_projection_matrixchoicegl_pipeline_settingsschema_ProjectionMatrix_TxsdGlPipelineSettingsChoiceProjectionMatrix_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_material_emissionchoicegl_pipeline_settingsschema_MaterialEmission_TxsdGlPipelineSettingsChoiceMaterialEmission_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_rescale_normal_enablechoicegl_pipeline_settingsschema_RescaleNormalEnable_TxsdGlPipelineSettingsChoiceRescaleNormalEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_clear_depthchoicegl_pipeline_settingsschema_ClearDepth_TxsdGlPipelineSettingsChoiceClearDepth_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_polygon_smooth_enablechoicegl_pipeline_settingsschema_PolygonSmoothEnable_TxsdGlPipelineSettingsChoicePolygonSmoothEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_color_logic_op_enablechoicegl_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlPipelineSettingsChoiceColorLogicOpEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_model_local_viewer_enablechoicegl_pipeline_settingsschema_LightModelLocalViewerEnable_TxsdGlPipelineSettingsChoiceLightModelLocalViewerEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stencil_opchoicegl_pipeline_settingsschema_StencilOp_TxsdGlPipelineSettingsChoiceStencilOp_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_texture3D_enablechoicegl_pipeline_settingsschema_Texture3DEnable_TxsdGlPipelineSettingsChoiceTexture3DEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_texture3Dchoicegl_pipeline_settingsschema_Texture3D_TxsdGlPipelineSettingsChoiceTexture3D_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_scissorchoicegl_pipeline_settingsschema_Scissor_TxsdGlPipelineSettingsChoiceScissor_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_clear_colorchoicegl_pipeline_settingsschema_ClearColor_TxsdGlPipelineSettingsChoiceClearColor_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_polygon_offsetchoicegl_pipeline_settingsschema_PolygonOffset_TxsdGlPipelineSettingsChoicePolygonOffset_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_texture1D_enablechoicegl_pipeline_settingsschema_Texture1DEnable_TxsdGlPipelineSettingsChoiceTexture1DEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_scissor_test_enablechoicegl_pipeline_settingsschema_ScissorTestEnable_TxsdGlPipelineSettingsChoiceScissorTestEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_blend_enablechoicegl_pipeline_settingsschema_BlendEnable_TxsdGlPipelineSettingsChoiceBlendEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_polygon_offset_point_enablechoicegl_pipeline_settingsschema_PolygonOffsetPointEnable_TxsdGlPipelineSettingsChoicePolygonOffsetPointEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_clip_planechoicegl_pipeline_settingsschema_ClipPlane_TxsdGlPipelineSettingsChoiceClipPlane_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_alpha_test_enablechoicegl_pipeline_settingsschema_AlphaTestEnable_TxsdGlPipelineSettingsChoiceAlphaTestEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_textureRECT_enablechoicegl_pipeline_settingsschema_TextureRECTEnable_TxsdGlPipelineSettingsChoiceTextureRECTEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_material_diffusechoicegl_pipeline_settingsschema_MaterialDiffuse_TxsdGlPipelineSettingsChoiceMaterialDiffuse_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_linear_attenuationchoicegl_pipeline_settingsschema_LightLinearAttenuation_TxsdGlPipelineSettingsChoiceLightLinearAttenuation_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_material_ambientchoicegl_pipeline_settingsschema_MaterialAmbient_TxsdGlPipelineSettingsChoiceMaterialAmbient_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_lighting_enablechoicegl_pipeline_settingsschema_LightingEnable_TxsdGlPipelineSettingsChoiceLightingEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GlHookAbstract.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_front_facechoicegl_pipeline_settingsschema_FrontFace_TxsdGlPipelineSettingsChoiceFrontFace_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_depth_rangechoicegl_pipeline_settingsschema_DepthRange_TxsdGlPipelineSettingsChoiceDepthRange_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_positionchoicegl_pipeline_settingsschema_LightPosition_TxsdGlPipelineSettingsChoiceLightPosition_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_depth_funcchoicegl_pipeline_settingsschema_DepthFunc_TxsdGlPipelineSettingsChoiceDepthFunc_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_dither_enablechoicegl_pipeline_settingsschema_DitherEnable_TxsdGlPipelineSettingsChoiceDitherEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_textureRECTchoicegl_pipeline_settingsschema_TextureRECT_TxsdGlPipelineSettingsChoiceTextureRECT_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_color_material_enablechoicegl_pipeline_settingsschema_ColorMaterialEnable_TxsdGlPipelineSettingsChoiceColorMaterialEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_cull_facechoicegl_pipeline_settingsschema_CullFace_TxsdGlPipelineSettingsChoiceCullFace_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_clear_stencilchoicegl_pipeline_settingsschema_ClearStencil_TxsdGlPipelineSettingsChoiceClearStencil_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stencil_op_separatechoicegl_pipeline_settingsschema_StencilOpSeparate_TxsdGlPipelineSettingsChoiceStencilOpSeparate_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_light_spot_exponentchoicegl_pipeline_settingsschema_LightSpotExponent_TxsdGlPipelineSettingsChoiceLightSpotExponent_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_textureCUBEchoicegl_pipeline_settingsschema_TextureCUBE_TxsdGlPipelineSettingsChoiceTextureCUBE_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_clip_plane_enablechoicegl_pipeline_settingsschema_ClipPlaneEnable_TxsdGlPipelineSettingsChoiceClipPlaneEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_textureDEPTH_enablechoicegl_pipeline_settingsschema_TextureDEPTHEnable_TxsdGlPipelineSettingsChoiceTextureDEPTHEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_textureDEPTHchoicegl_pipeline_settingsschema_TextureDEPTH_TxsdGlPipelineSettingsChoiceTextureDEPTH_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_texture1Dchoicegl_pipeline_settingsschema_Texture1D_TxsdGlPipelineSettingsChoiceTexture1D_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fog_coord_srcchoicegl_pipeline_settingsschema_FogCoordSrc_TxsdGlPipelineSettingsChoiceFogCoordSrc_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_line_smooth_enablechoicegl_pipeline_settingsschema_LineSmoothEnable_TxsdGlPipelineSettingsChoiceLineSmoothEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_depth_clamp_enablechoicegl_pipeline_settingsschema_DepthClampEnable_TxsdGlPipelineSettingsChoiceDepthClampEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_auto_normal_enablechoicegl_pipeline_settingsschema_AutoNormalEnable_TxsdGlPipelineSettingsChoiceAutoNormalEnable_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProfileGlslSequenceTechniqueSequencePass struct {
	//	Declare and prepare a shader for execution in the rendering pipeline of a pass.
	XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Shader_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader_

	XsdGoPkgHasElems_color_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorClear_TfxClearcolorCommon_

	XsdGoPkgHasElems_depth_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthClear_TfxCleardepthCommon_

	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

	XsdGoPkgHasElems_depth_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthTarget_TfxDepthtargetCommon_

	XsdGoPkgHasElems_Extra

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	XsdGoPkgHasGroup_GlPipelineSettings

	XsdGoPkgHasElems_stencil_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilClear_TfxClearstencilCommon_

	XsdGoPkgHasElems_color_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorTarget_TfxColortargetCommon_

	XsdGoPkgHasElems_stencil_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilTarget_TfxStenciltargetCommon_

	XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLESschema_Draw_TfxDrawCommon_
}

//	If the WalkHandlers.TxsdProfileGlslSequenceTechniqueSequencePass function is not nil (ie. was set by outside code), calls it with this TxsdProfileGlslSequenceTechniqueSequencePass instance as the single argument. Then calls the Walk() method on 11/12 embed(s) and 0/0 field(s) belonging to this TxsdProfileGlslSequenceTechniqueSequencePass instance.
func (me *TxsdProfileGlslSequenceTechniqueSequencePass) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileGlslSequenceTechniqueSequencePass; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLESschema_Draw_TfxDrawCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Shader_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_color_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorClear_TfxClearcolorCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_depth_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthClear_TfxCleardepthCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_depth_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthTarget_TfxDepthtargetCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroup_GlPipelineSettings.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_stencil_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilClear_TfxClearstencilCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_color_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorTarget_TfxColortargetCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_stencil_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilTarget_TfxStenciltargetCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLSLschema_Pass_TxsdProfileGlslSequenceTechniqueSequencePass_ struct {
	//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
	Passes []*TxsdProfileGlslSequenceTechniqueSequencePass `xml:"http://www.collada.org/2005/11/COLLADASchema pass"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLSLschema_Pass_TxsdProfileGlslSequenceTechniqueSequencePass_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLSLschema_Pass_TxsdProfileGlslSequenceTechniqueSequencePass_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLSLschema_Pass_TxsdProfileGlslSequenceTechniqueSequencePass_ instance.
func (me *XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLSLschema_Pass_TxsdProfileGlslSequenceTechniqueSequencePass_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLSLschema_Pass_TxsdProfileGlslSequenceTechniqueSequencePass_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Passes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Program_XsdtNCName_ struct {
	Program xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema program,attr"`
}

//	The glsl_newarray_type is used to creates a parameter of a one-dimensional array type.
//	You may recursively nest glsl_newarray elements to create multidimensional arrays.
type XsdGoPkgHasElems_arraychoiceglsl_setarray_typeschema_Array_TglslSetarrayType_ struct {
	//	You may recursively nest glsl_newarray elements to create multidimensional arrays.
	Arrays []*TglslSetarrayType `xml:"http://www.collada.org/2005/11/COLLADASchema array"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_arraychoiceglsl_setarray_typeschema_Array_TglslSetarrayType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_arraychoiceglsl_setarray_typeschema_Array_TglslSetarrayType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_arraychoiceglsl_setarray_typeschema_Array_TglslSetarrayType_ instance.
func (me *XsdGoPkgHasElems_arraychoiceglsl_setarray_typeschema_Array_TglslSetarrayType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_arraychoiceglsl_setarray_typeschema_Array_TglslSetarrayType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglslSetarrayType struct {
	//	The length attribute specifies the length of the array.
	XsdGoPkgHasAttr_Length_XsdtPositiveInteger_

	XsdGoPkgHasGroup_GlslParamType

	//	You may recursively nest glsl_newarray elements to create multidimensional arrays.
	XsdGoPkgHasElems_arraychoiceglsl_setarray_typeschema_Array_TglslSetarrayType_
}

//	If the WalkHandlers.TglslSetarrayType function is not nil (ie. was set by outside code), calls it with this TglslSetarrayType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TglslSetarrayType instance.
func (me *TglslSetarrayType) Walk() (err error) {
	if fn := WalkHandlers.TglslSetarrayType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasGroup_GlslParamType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_arraychoiceglsl_setarray_typeschema_Array_TglslSetarrayType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_arraychoicesequenceglsl_setparamschema_Array_TglslSetarrayType_ struct {
	Array *TglslSetarrayType `xml:"http://www.collada.org/2005/11/COLLADASchema array"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_arraychoicesequenceglsl_setparamschema_Array_TglslSetarrayType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_arraychoicesequenceglsl_setparamschema_Array_TglslSetarrayType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_arraychoicesequenceglsl_setparamschema_Array_TglslSetarrayType_ instance.
func (me *XsdGoPkgHasElem_arraychoicesequenceglsl_setparamschema_Array_TglslSetarrayType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_arraychoicesequenceglsl_setparamschema_Array_TglslSetarrayType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Array.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TglslSetparam struct {
	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

	XsdGoPkgHasGroup_GlslParamType

	XsdGoPkgHasAttr_Program_XsdtNCName_

	XsdGoPkgHasElem_arraychoicesequenceglsl_setparamschema_Array_TglslSetarrayType_

	XsdGoPkgHasAttr_Ref_TglslIdentifier_
}

//	If the WalkHandlers.TglslSetparam function is not nil (ie. was set by outside code), calls it with this TglslSetparam instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TglslSetparam instance.
func (me *TglslSetparam) Walk() (err error) {
	if fn := WalkHandlers.TglslSetparam; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_arraychoicesequenceglsl_setparamschema_Array_TglslSetarrayType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroup_GlslParamType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLSLschema_Setparam_TglslSetparam_ struct {
	Setparams []*TglslSetparam `xml:"http://www.collada.org/2005/11/COLLADASchema setparam"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLSLschema_Setparam_TglslSetparam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLSLschema_Setparam_TglslSetparam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLSLschema_Setparam_TglslSetparam_ instance.
func (me *XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLSLschema_Setparam_TglslSetparam_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLSLschema_Setparam_TglslSetparam_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Setparams {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProfileGlslSequenceTechnique struct {
	XsdGoPkgHasElems_Image

	XsdGoPkgHasElems_newparamchoicesequenceprofile_GLSLschema_Newparam_TglslNewparam_

	XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Include_TfxIncludeCommon_

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
	XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLSLschema_Pass_TxsdProfileGlslSequenceTechniqueSequencePass_

	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Code_TfxCodeProfile_

	XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLSLschema_Setparam_TglslSetparam_
}

//	If the WalkHandlers.TxsdProfileGlslSequenceTechnique function is not nil (ie. was set by outside code), calls it with this TxsdProfileGlslSequenceTechnique instance as the single argument. Then calls the Walk() method on 8/10 embed(s) and 0/0 field(s) belonging to this TxsdProfileGlslSequenceTechnique instance.
func (me *TxsdProfileGlslSequenceTechnique) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileGlslSequenceTechnique; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_newparamchoicesequenceprofile_GLSLschema_Newparam_TglslNewparam_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Include_TfxIncludeCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLSLschema_Pass_TxsdProfileGlslSequenceTechniqueSequencePass_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Code_TfxCodeProfile_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLSLschema_Setparam_TglslSetparam_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Image.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_techniquesequenceprofile_GLSLschema_Technique_TxsdProfileGlslSequenceTechnique_ struct {
	//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
	Techniques []*TxsdProfileGlslSequenceTechnique `xml:"http://www.collada.org/2005/11/COLLADASchema technique"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_techniquesequenceprofile_GLSLschema_Technique_TxsdProfileGlslSequenceTechnique_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_techniquesequenceprofile_GLSLschema_Technique_TxsdProfileGlslSequenceTechnique_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_techniquesequenceprofile_GLSLschema_Technique_TxsdProfileGlslSequenceTechnique_ instance.
func (me *XsdGoPkgHasElems_techniquesequenceprofile_GLSLschema_Technique_TxsdProfileGlslSequenceTechnique_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_techniquesequenceprofile_GLSLschema_Technique_TxsdProfileGlslSequenceTechnique_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Techniques {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProfileGlsl struct {
	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
	XsdGoPkgHasElems_techniquesequenceprofile_GLSLschema_Technique_TxsdProfileGlslSequenceTechnique_

	XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Include_TfxIncludeCommon_

	XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Code_TfxCodeProfile_

	XsdGoPkgHasElems_newparamchoicesequenceprofile_GLSLschema_Newparam_TglslNewparam_

	XsdGoPkgHasElems_Image

	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElem_Asset
}

//	If the WalkHandlers.TxsdProfileGlsl function is not nil (ie. was set by outside code), calls it with this TxsdProfileGlsl instance as the single argument. Then calls the Walk() method on 7/8 embed(s) and 0/0 field(s) belonging to this TxsdProfileGlsl instance.
func (me *TxsdProfileGlsl) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileGlsl; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_techniquesequenceprofile_GLSLschema_Technique_TxsdProfileGlslSequenceTechnique_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Include_TfxIncludeCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Code_TfxCodeProfile_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_newparamchoicesequenceprofile_GLSLschema_Newparam_TglslNewparam_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Image.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ProfileGlsl struct {
	//	Opens a block of GLSL platform-specific data types and technique declarations.
	ProfileGlsls []*TxsdProfileGlsl `xml:"http://www.collada.org/2005/11/COLLADASchema profile_GLSL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ProfileGlsl function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ProfileGlsl instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ProfileGlsl instance.
func (me *XsdGoPkgHasElems_ProfileGlsl) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ProfileGlsl; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ProfileGlsls {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Opens a block of CG platform-specific data types and technique declarations.
//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
//	Assigns a new value to a previously defined parameter.
//	Creates a symbolic connection between two previously defined parameters.
type TcgIdentifier xsdt.Token

//	This convenience method just performs a simple type conversion to TcgIdentifier's alias type xsdt.Token.
func (me TcgIdentifier) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Since TcgIdentifier is just a simple String type, this merely returns the current string value.
func (me TcgIdentifier) String() string { return xsdt.Token(me).String() }

//	Since TcgIdentifier is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgIdentifier) Set(s string) { (*xsdt.Token)(me).Set(s) }

type XsdGoPkgHasAttr_Ref_TcgIdentifier_ struct {
	Ref TcgIdentifier `xml:"http://www.collada.org/2005/11/COLLADASchema ref,attr"`
}

type TcgConnectParam struct {
	XsdGoPkgHasAttr_Ref_TcgIdentifier_
}

//	If the WalkHandlers.TcgConnectParam function is not nil (ie. was set by outside code), calls it with this TcgConnectParam instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TcgConnectParam instance.
func (me *TcgConnectParam) Walk() (err error) {
	if fn := WalkHandlers.TcgConnectParam; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_connect_paramchoicecg_setparamschema_ConnectParam_TcgConnectParam_ struct {
	ConnectParam *TcgConnectParam `xml:"http://www.collada.org/2005/11/COLLADASchema connect_param"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_connect_paramchoicecg_setparamschema_ConnectParam_TcgConnectParam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_connect_paramchoicecg_setparamschema_ConnectParam_TcgConnectParam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_connect_paramchoicecg_setparamschema_ConnectParam_TcgConnectParam_ instance.
func (me *XsdGoPkgHasElem_connect_paramchoicecg_setparamschema_ConnectParam_TcgConnectParam_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_connect_paramchoicecg_setparamschema_ConnectParam_TcgConnectParam_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ConnectParam.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A group that specifies the allowable types for CG profile parameters.
type TcgFixed xsdt.Float

//	This convenience method just performs a simple type conversion to TcgFixed's alias type xsdt.Float.
func (me TcgFixed) ToXsdtFloat() xsdt.Float { return xsdt.Float(me) }

//	Returns a string representation of this TcgFixed's current non-string scalar value.
func (me TcgFixed) String() string { return xsdt.Float(me).String() }

//	Since TcgFixed is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TcgFixed) Set(s string) { (*xsdt.Float)(me).Set(s) }

type TcgListOfFixed xsdt.String

//	This convenience method just performs a simple type conversion to TcgListOfFixed's alias type xsdt.String.
func (me TcgListOfFixed) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TcgListOfFixed is just a simple String type, this merely returns the current string value.
func (me TcgListOfFixed) String() string { return xsdt.String(me).String() }

//	TcgListOfFixed declares a String containing a whitespace-separated list of TcgFixed values. This Values() method creates and returns a slice of all elements in that list, typed as xsdt.Float.
func (me TcgListOfFixed) ValuesXsdtFloat() (list []xsdt.Float) {
	svals := xsdt.ListValues(string(me))
	list = make([]xsdt.Float, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	TcgListOfFixed declares a String containing a whitespace-separated list of TcgFixed values. This Values() method creates and returns a slice of all elements in that list.
func (me TcgListOfFixed) Values() (list []TcgFixed) {
	svals := xsdt.ListValues(string(me))
	list = make([]TcgFixed, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	Since TcgListOfFixed is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgListOfFixed) Set(s string) { (*xsdt.String)(me).Set(s) }

type TcgFixed3 TcgListOfFixed

//	Since TcgFixed3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed3) Set(s string) { (*TcgListOfFixed)(me).Set(s) }

//	Since TcgFixed3 is just a simple String type, this merely returns the current string value.
func (me TcgFixed3) String() string { return TcgListOfFixed(me).String() }

//	This convenience method just performs a simple type conversion to TcgFixed3's alias type TcgListOfFixed.
func (me TcgFixed3) ToTcgListOfFixed() TcgListOfFixed { return TcgListOfFixed(me) }

type XsdGoPkgHasElem_fixed3choicecg_param_typeschema_Fixed3_TcgFixed3_ struct {
	Fixed3 TcgFixed3 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fixed3choicecg_param_typeschema_Fixed3_TcgFixed3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed3choicecg_param_typeschema_Fixed3_TcgFixed3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed3choicecg_param_typeschema_Fixed3_TcgFixed3_ instance.
func (me *XsdGoPkgHasElem_fixed3choicecg_param_typeschema_Fixed3_TcgFixed3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fixed3choicecg_param_typeschema_Fixed3_TcgFixed3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFixed3X4 TcgListOfFixed

//	Since TcgFixed3X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed3X4) Set(s string) { (*TcgListOfFixed)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgFixed3X4's alias type TcgListOfFixed.
func (me TcgFixed3X4) ToTcgListOfFixed() TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed3X4 is just a simple String type, this merely returns the current string value.
func (me TcgFixed3X4) String() string { return TcgListOfFixed(me).String() }

type XsdGoPkgHasElem_fixed3x4choicecg_param_typeschema_Fixed3X4_TcgFixed3X4_ struct {
	Fixed3X4 TcgFixed3X4 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed3x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fixed3x4choicecg_param_typeschema_Fixed3X4_TcgFixed3X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed3x4choicecg_param_typeschema_Fixed3X4_TcgFixed3X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed3x4choicecg_param_typeschema_Fixed3X4_TcgFixed3X4_ instance.
func (me *XsdGoPkgHasElem_fixed3x4choicecg_param_typeschema_Fixed3X4_TcgFixed3X4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fixed3x4choicecg_param_typeschema_Fixed3X4_TcgFixed3X4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgInt xsdt.Int

//	This convenience method just performs a simple type conversion to TcgInt's alias type xsdt.Int.
func (me TcgInt) ToXsdtInt() xsdt.Int { return xsdt.Int(me) }

//	Since TcgInt is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TcgInt) Set(s string) { (*xsdt.Int)(me).Set(s) }

//	Returns a string representation of this TcgInt's current non-string scalar value.
func (me TcgInt) String() string { return xsdt.Int(me).String() }

type TcgListOfInt xsdt.String

//	This convenience method just performs a simple type conversion to TcgListOfInt's alias type xsdt.String.
func (me TcgListOfInt) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TcgListOfInt declares a String containing a whitespace-separated list of TcgInt values. This Values() method creates and returns a slice of all elements in that list.
func (me TcgListOfInt) Values() (list []TcgInt) {
	svals := xsdt.ListValues(string(me))
	list = make([]TcgInt, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	Since TcgListOfInt is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgListOfInt) Set(s string) { (*xsdt.String)(me).Set(s) }

//	TcgListOfInt declares a String containing a whitespace-separated list of TcgInt values. This Values() method creates and returns a slice of all elements in that list, typed as xsdt.Int.
func (me TcgListOfInt) ValuesXsdtInt() (list []xsdt.Int) {
	svals := xsdt.ListValues(string(me))
	list = make([]xsdt.Int, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	Since TcgListOfInt is just a simple String type, this merely returns the current string value.
func (me TcgListOfInt) String() string { return xsdt.String(me).String() }

type TcgInt4X2 TcgListOfInt

//	Since TcgInt4X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt4X2) Set(s string) { (*TcgListOfInt)(me).Set(s) }

//	Since TcgInt4X2 is just a simple String type, this merely returns the current string value.
func (me TcgInt4X2) String() string { return TcgListOfInt(me).String() }

//	This convenience method just performs a simple type conversion to TcgInt4X2's alias type TcgListOfInt.
func (me TcgInt4X2) ToTcgListOfInt() TcgListOfInt { return TcgListOfInt(me) }

type XsdGoPkgHasElem_int4x2choicecg_param_typeschema_Int4X2_TcgInt4X2_ struct {
	Int4X2 TcgInt4X2 `xml:"http://www.collada.org/2005/11/COLLADASchema int4x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int4x2choicecg_param_typeschema_Int4X2_TcgInt4X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int4x2choicecg_param_typeschema_Int4X2_TcgInt4X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int4x2choicecg_param_typeschema_Int4X2_TcgInt4X2_ instance.
func (me *XsdGoPkgHasElem_int4x2choicecg_param_typeschema_Int4X2_TcgInt4X2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int4x2choicecg_param_typeschema_Int4X2_TcgInt4X2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgHalf xsdt.Float

//	Returns a string representation of this TcgHalf's current non-string scalar value.
func (me TcgHalf) String() string { return xsdt.Float(me).String() }

//	This convenience method just performs a simple type conversion to TcgHalf's alias type xsdt.Float.
func (me TcgHalf) ToXsdtFloat() xsdt.Float { return xsdt.Float(me) }

//	Since TcgHalf is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TcgHalf) Set(s string) { (*xsdt.Float)(me).Set(s) }

type TcgListOfHalf xsdt.String

//	TcgListOfHalf declares a String containing a whitespace-separated list of TcgHalf values. This Values() method creates and returns a slice of all elements in that list, typed as xsdt.Float.
func (me TcgListOfHalf) ValuesXsdtFloat() (list []xsdt.Float) {
	svals := xsdt.ListValues(string(me))
	list = make([]xsdt.Float, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	This convenience method just performs a simple type conversion to TcgListOfHalf's alias type xsdt.String.
func (me TcgListOfHalf) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TcgListOfHalf is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgListOfHalf) Set(s string) { (*xsdt.String)(me).Set(s) }

//	TcgListOfHalf declares a String containing a whitespace-separated list of TcgHalf values. This Values() method creates and returns a slice of all elements in that list.
func (me TcgListOfHalf) Values() (list []TcgHalf) {
	svals := xsdt.ListValues(string(me))
	list = make([]TcgHalf, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	Since TcgListOfHalf is just a simple String type, this merely returns the current string value.
func (me TcgListOfHalf) String() string { return xsdt.String(me).String() }

type TcgHalf3 TcgListOfHalf

//	Since TcgHalf3 is just a simple String type, this merely returns the current string value.
func (me TcgHalf3) String() string { return TcgListOfHalf(me).String() }

//	This convenience method just performs a simple type conversion to TcgHalf3's alias type TcgListOfHalf.
func (me TcgHalf3) ToTcgListOfHalf() TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf3) Set(s string) { (*TcgListOfHalf)(me).Set(s) }

type XsdGoPkgHasElem_half3choicecg_param_typeschema_Half3_TcgHalf3_ struct {
	Half3 TcgHalf3 `xml:"http://www.collada.org/2005/11/COLLADASchema half3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_half3choicecg_param_typeschema_Half3_TcgHalf3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half3choicecg_param_typeschema_Half3_TcgHalf3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half3choicecg_param_typeschema_Half3_TcgHalf3_ instance.
func (me *XsdGoPkgHasElem_half3choicecg_param_typeschema_Half3_TcgHalf3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_half3choicecg_param_typeschema_Half3_TcgHalf3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgBool xsdt.Boolean

//	Returns a string representation of this TcgBool's current non-string scalar value.
func (me TcgBool) String() string { return xsdt.Boolean(me).String() }

//	This convenience method just performs a simple type conversion to TcgBool's alias type xsdt.Boolean.
func (me TcgBool) ToXsdtBoolean() xsdt.Boolean { return xsdt.Boolean(me) }

//	Since TcgBool is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TcgBool) Set(s string) { (*xsdt.Boolean)(me).Set(s) }

type TcgListOfBool xsdt.String

//	This convenience method just performs a simple type conversion to TcgListOfBool's alias type xsdt.String.
func (me TcgListOfBool) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TcgListOfBool is just a simple String type, this merely returns the current string value.
func (me TcgListOfBool) String() string { return xsdt.String(me).String() }

//	TcgListOfBool declares a String containing a whitespace-separated list of TcgBool values. This Values() method creates and returns a slice of all elements in that list, typed as xsdt.Boolean.
func (me TcgListOfBool) ValuesXsdtBoolean() (list []xsdt.Boolean) {
	svals := xsdt.ListValues(string(me))
	list = make([]xsdt.Boolean, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	TcgListOfBool declares a String containing a whitespace-separated list of TcgBool values. This Values() method creates and returns a slice of all elements in that list.
func (me TcgListOfBool) Values() (list []TcgBool) {
	svals := xsdt.ListValues(string(me))
	list = make([]TcgBool, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	Since TcgListOfBool is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgListOfBool) Set(s string) { (*xsdt.String)(me).Set(s) }

type TcgBool2X4 TcgListOfBool

//	Since TcgBool2X4 is just a simple String type, this merely returns the current string value.
func (me TcgBool2X4) String() string { return TcgListOfBool(me).String() }

//	Since TcgBool2X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool2X4) Set(s string) { (*TcgListOfBool)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgBool2X4's alias type TcgListOfBool.
func (me TcgBool2X4) ToTcgListOfBool() TcgListOfBool { return TcgListOfBool(me) }

type XsdGoPkgHasElem_bool2x4choicecg_param_typeschema_Bool2X4_TcgBool2X4_ struct {
	Bool2X4 TcgBool2X4 `xml:"http://www.collada.org/2005/11/COLLADASchema bool2x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool2x4choicecg_param_typeschema_Bool2X4_TcgBool2X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool2x4choicecg_param_typeschema_Bool2X4_TcgBool2X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool2x4choicecg_param_typeschema_Bool2X4_TcgBool2X4_ instance.
func (me *XsdGoPkgHasElem_bool2x4choicecg_param_typeschema_Bool2X4_TcgBool2X4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool2x4choicecg_param_typeschema_Bool2X4_TcgBool2X4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFloat xsdt.Float

//	Returns a string representation of this TcgFloat's current non-string scalar value.
func (me TcgFloat) String() string { return xsdt.Float(me).String() }

//	Since TcgFloat is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TcgFloat) Set(s string) { (*xsdt.Float)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgFloat's alias type xsdt.Float.
func (me TcgFloat) ToXsdtFloat() xsdt.Float { return xsdt.Float(me) }

type TcgListOfFloat xsdt.String

//	Since TcgListOfFloat is just a simple String type, this merely returns the current string value.
func (me TcgListOfFloat) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TcgListOfFloat's alias type xsdt.String.
func (me TcgListOfFloat) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	TcgListOfFloat declares a String containing a whitespace-separated list of TcgFloat values. This Values() method creates and returns a slice of all elements in that list, typed as xsdt.Float.
func (me TcgListOfFloat) ValuesXsdtFloat() (list []xsdt.Float) {
	svals := xsdt.ListValues(string(me))
	list = make([]xsdt.Float, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

//	Since TcgListOfFloat is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgListOfFloat) Set(s string) { (*xsdt.String)(me).Set(s) }

//	TcgListOfFloat declares a String containing a whitespace-separated list of TcgFloat values. This Values() method creates and returns a slice of all elements in that list.
func (me TcgListOfFloat) Values() (list []TcgFloat) {
	svals := xsdt.ListValues(string(me))
	list = make([]TcgFloat, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

type TcgFloat3X1 TcgListOfFloat

//	This convenience method just performs a simple type conversion to TcgFloat3X1's alias type TcgListOfFloat.
func (me TcgFloat3X1) ToTcgListOfFloat() TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat3X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat3X1) Set(s string) { (*TcgListOfFloat)(me).Set(s) }

//	Since TcgFloat3X1 is just a simple String type, this merely returns the current string value.
func (me TcgFloat3X1) String() string { return TcgListOfFloat(me).String() }

type XsdGoPkgHasElem_float3x1choicecg_param_typeschema_Float3X1_TcgFloat3X1_ struct {
	Float3X1 TcgFloat3X1 `xml:"http://www.collada.org/2005/11/COLLADASchema float3x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float3x1choicecg_param_typeschema_Float3X1_TcgFloat3X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float3x1choicecg_param_typeschema_Float3X1_TcgFloat3X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float3x1choicecg_param_typeschema_Float3X1_TcgFloat3X1_ instance.
func (me *XsdGoPkgHasElem_float3x1choicecg_param_typeschema_Float3X1_TcgFloat3X1_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float3x1choicecg_param_typeschema_Float3X1_TcgFloat3X1_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFloat1X1 TcgListOfFloat

//	This convenience method just performs a simple type conversion to TcgFloat1X1's alias type TcgListOfFloat.
func (me TcgFloat1X1) ToTcgListOfFloat() TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat1X1 is just a simple String type, this merely returns the current string value.
func (me TcgFloat1X1) String() string { return TcgListOfFloat(me).String() }

//	Since TcgFloat1X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat1X1) Set(s string) { (*TcgListOfFloat)(me).Set(s) }

type XsdGoPkgHasElem_float1x1choicecg_param_typeschema_Float1X1_TcgFloat1X1_ struct {
	Float1X1 TcgFloat1X1 `xml:"http://www.collada.org/2005/11/COLLADASchema float1x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float1x1choicecg_param_typeschema_Float1X1_TcgFloat1X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float1x1choicecg_param_typeschema_Float1X1_TcgFloat1X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float1x1choicecg_param_typeschema_Float1X1_TcgFloat1X1_ instance.
func (me *XsdGoPkgHasElem_float1x1choicecg_param_typeschema_Float1X1_TcgFloat1X1_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float1x1choicecg_param_typeschema_Float1X1_TcgFloat1X1_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFixed3X1 TcgListOfFixed

//	Since TcgFixed3X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed3X1) Set(s string) { (*TcgListOfFixed)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgFixed3X1's alias type TcgListOfFixed.
func (me TcgFixed3X1) ToTcgListOfFixed() TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed3X1 is just a simple String type, this merely returns the current string value.
func (me TcgFixed3X1) String() string { return TcgListOfFixed(me).String() }

type XsdGoPkgHasElem_fixed3x1choicecg_param_typeschema_Fixed3X1_TcgFixed3X1_ struct {
	Fixed3X1 TcgFixed3X1 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed3x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fixed3x1choicecg_param_typeschema_Fixed3X1_TcgFixed3X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed3x1choicecg_param_typeschema_Fixed3X1_TcgFixed3X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed3x1choicecg_param_typeschema_Fixed3X1_TcgFixed3X1_ instance.
func (me *XsdGoPkgHasElem_fixed3x1choicecg_param_typeschema_Fixed3X1_TcgFixed3X1_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fixed3x1choicecg_param_typeschema_Fixed3X1_TcgFixed3X1_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgBool3 TcgListOfBool

//	Since TcgBool3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool3) Set(s string) { (*TcgListOfBool)(me).Set(s) }

//	Since TcgBool3 is just a simple String type, this merely returns the current string value.
func (me TcgBool3) String() string { return TcgListOfBool(me).String() }

//	This convenience method just performs a simple type conversion to TcgBool3's alias type TcgListOfBool.
func (me TcgBool3) ToTcgListOfBool() TcgListOfBool { return TcgListOfBool(me) }

type XsdGoPkgHasElem_bool3choicecg_param_typeschema_Bool3_TcgBool3_ struct {
	Bool3 TcgBool3 `xml:"http://www.collada.org/2005/11/COLLADASchema bool3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool3choicecg_param_typeschema_Bool3_TcgBool3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool3choicecg_param_typeschema_Bool3_TcgBool3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool3choicecg_param_typeschema_Bool3_TcgBool3_ instance.
func (me *XsdGoPkgHasElem_bool3choicecg_param_typeschema_Bool3_TcgBool3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool3choicecg_param_typeschema_Bool3_TcgBool3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFloat3 TcgListOfFloat

//	Since TcgFloat3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat3) Set(s string) { (*TcgListOfFloat)(me).Set(s) }

//	Since TcgFloat3 is just a simple String type, this merely returns the current string value.
func (me TcgFloat3) String() string { return TcgListOfFloat(me).String() }

//	This convenience method just performs a simple type conversion to TcgFloat3's alias type TcgListOfFloat.
func (me TcgFloat3) ToTcgListOfFloat() TcgListOfFloat { return TcgListOfFloat(me) }

type XsdGoPkgHasElem_float3choicecg_param_typeschema_Float3_TcgFloat3_ struct {
	Float3 TcgFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema float3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float3choicecg_param_typeschema_Float3_TcgFloat3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float3choicecg_param_typeschema_Float3_TcgFloat3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float3choicecg_param_typeschema_Float3_TcgFloat3_ instance.
func (me *XsdGoPkgHasElem_float3choicecg_param_typeschema_Float3_TcgFloat3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float3choicecg_param_typeschema_Float3_TcgFloat3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgInt4 TcgListOfInt

//	This convenience method just performs a simple type conversion to TcgInt4's alias type TcgListOfInt.
func (me TcgInt4) ToTcgListOfInt() TcgListOfInt { return TcgListOfInt(me) }

//	Since TcgInt4 is just a simple String type, this merely returns the current string value.
func (me TcgInt4) String() string { return TcgListOfInt(me).String() }

//	Since TcgInt4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt4) Set(s string) { (*TcgListOfInt)(me).Set(s) }

type XsdGoPkgHasElem_int4choicecg_param_typeschema_Int4_TcgInt4_ struct {
	Int4 TcgInt4 `xml:"http://www.collada.org/2005/11/COLLADASchema int4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int4choicecg_param_typeschema_Int4_TcgInt4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int4choicecg_param_typeschema_Int4_TcgInt4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int4choicecg_param_typeschema_Int4_TcgInt4_ instance.
func (me *XsdGoPkgHasElem_int4choicecg_param_typeschema_Int4_TcgInt4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int4choicecg_param_typeschema_Int4_TcgInt4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgBool1X2 TcgListOfBool

//	Since TcgBool1X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool1X2) Set(s string) { (*TcgListOfBool)(me).Set(s) }

//	Since TcgBool1X2 is just a simple String type, this merely returns the current string value.
func (me TcgBool1X2) String() string { return TcgListOfBool(me).String() }

//	This convenience method just performs a simple type conversion to TcgBool1X2's alias type TcgListOfBool.
func (me TcgBool1X2) ToTcgListOfBool() TcgListOfBool { return TcgListOfBool(me) }

type XsdGoPkgHasElem_bool1x2choicecg_param_typeschema_Bool1X2_TcgBool1X2_ struct {
	Bool1X2 TcgBool1X2 `xml:"http://www.collada.org/2005/11/COLLADASchema bool1x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool1x2choicecg_param_typeschema_Bool1X2_TcgBool1X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool1x2choicecg_param_typeschema_Bool1X2_TcgBool1X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool1x2choicecg_param_typeschema_Bool1X2_TcgBool1X2_ instance.
func (me *XsdGoPkgHasElem_bool1x2choicecg_param_typeschema_Bool1X2_TcgBool1X2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool1x2choicecg_param_typeschema_Bool1X2_TcgBool1X2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgInt3 TcgListOfInt

//	Since TcgInt3 is just a simple String type, this merely returns the current string value.
func (me TcgInt3) String() string { return TcgListOfInt(me).String() }

//	This convenience method just performs a simple type conversion to TcgInt3's alias type TcgListOfInt.
func (me TcgInt3) ToTcgListOfInt() TcgListOfInt { return TcgListOfInt(me) }

//	Since TcgInt3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt3) Set(s string) { (*TcgListOfInt)(me).Set(s) }

type XsdGoPkgHasElem_int3choicecg_param_typeschema_Int3_TcgInt3_ struct {
	Int3 TcgInt3 `xml:"http://www.collada.org/2005/11/COLLADASchema int3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int3choicecg_param_typeschema_Int3_TcgInt3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int3choicecg_param_typeschema_Int3_TcgInt3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int3choicecg_param_typeschema_Int3_TcgInt3_ instance.
func (me *XsdGoPkgHasElem_int3choicecg_param_typeschema_Int3_TcgInt3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int3choicecg_param_typeschema_Int3_TcgInt3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgSampler1D struct {
	TfxSampler1DCommon
}

//	If the WalkHandlers.TcgSampler1D function is not nil (ie. was set by outside code), calls it with this TcgSampler1D instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TcgSampler1D instance.
func (me *TcgSampler1D) Walk() (err error) {
	if fn := WalkHandlers.TcgSampler1D; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TfxSampler1DCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_sampler1Dchoicecg_param_typeschema_Sampler1D_TcgSampler1D_ struct {
	Sampler1D *TcgSampler1D `xml:"http://www.collada.org/2005/11/COLLADASchema sampler1D"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sampler1Dchoicecg_param_typeschema_Sampler1D_TcgSampler1D_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sampler1Dchoicecg_param_typeschema_Sampler1D_TcgSampler1D_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sampler1Dchoicecg_param_typeschema_Sampler1D_TcgSampler1D_ instance.
func (me *XsdGoPkgHasElem_sampler1Dchoicecg_param_typeschema_Sampler1D_TcgSampler1D_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sampler1Dchoicecg_param_typeschema_Sampler1D_TcgSampler1D_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Sampler1D.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_halfchoicecg_param_typeschema_Half_TcgHalf_ struct {
	Half *TcgHalf `xml:"http://www.collada.org/2005/11/COLLADASchema half"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_halfchoicecg_param_typeschema_Half_TcgHalf_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_halfchoicecg_param_typeschema_Half_TcgHalf_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_halfchoicecg_param_typeschema_Half_TcgHalf_ instance.
func (me *XsdGoPkgHasElem_halfchoicecg_param_typeschema_Half_TcgHalf_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_halfchoicecg_param_typeschema_Half_TcgHalf_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFloat4 TcgListOfFloat

//	Since TcgFloat4 is just a simple String type, this merely returns the current string value.
func (me TcgFloat4) String() string { return TcgListOfFloat(me).String() }

//	This convenience method just performs a simple type conversion to TcgFloat4's alias type TcgListOfFloat.
func (me TcgFloat4) ToTcgListOfFloat() TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat4) Set(s string) { (*TcgListOfFloat)(me).Set(s) }

type XsdGoPkgHasElem_float4choicecg_param_typeschema_Float4_TcgFloat4_ struct {
	Float4 TcgFloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema float4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float4choicecg_param_typeschema_Float4_TcgFloat4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float4choicecg_param_typeschema_Float4_TcgFloat4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float4choicecg_param_typeschema_Float4_TcgFloat4_ instance.
func (me *XsdGoPkgHasElem_float4choicecg_param_typeschema_Float4_TcgFloat4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float4choicecg_param_typeschema_Float4_TcgFloat4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgInt2X4 TcgListOfInt

//	This convenience method just performs a simple type conversion to TcgInt2X4's alias type TcgListOfInt.
func (me TcgInt2X4) ToTcgListOfInt() TcgListOfInt { return TcgListOfInt(me) }

//	Since TcgInt2X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt2X4) Set(s string) { (*TcgListOfInt)(me).Set(s) }

//	Since TcgInt2X4 is just a simple String type, this merely returns the current string value.
func (me TcgInt2X4) String() string { return TcgListOfInt(me).String() }

type XsdGoPkgHasElem_int2x4choicecg_param_typeschema_Int2X4_TcgInt2X4_ struct {
	Int2X4 TcgInt2X4 `xml:"http://www.collada.org/2005/11/COLLADASchema int2x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int2x4choicecg_param_typeschema_Int2X4_TcgInt2X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int2x4choicecg_param_typeschema_Int2X4_TcgInt2X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int2x4choicecg_param_typeschema_Int2X4_TcgInt2X4_ instance.
func (me *XsdGoPkgHasElem_int2x4choicecg_param_typeschema_Int2X4_TcgInt2X4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int2x4choicecg_param_typeschema_Int2X4_TcgInt2X4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgHalf2X3 TcgListOfHalf

//	Since TcgHalf2X3 is just a simple String type, this merely returns the current string value.
func (me TcgHalf2X3) String() string { return TcgListOfHalf(me).String() }

//	Since TcgHalf2X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf2X3) Set(s string) { (*TcgListOfHalf)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgHalf2X3's alias type TcgListOfHalf.
func (me TcgHalf2X3) ToTcgListOfHalf() TcgListOfHalf { return TcgListOfHalf(me) }

type XsdGoPkgHasElem_half2x3choicecg_param_typeschema_Half2X3_TcgHalf2X3_ struct {
	Half2X3 TcgHalf2X3 `xml:"http://www.collada.org/2005/11/COLLADASchema half2x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_half2x3choicecg_param_typeschema_Half2X3_TcgHalf2X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half2x3choicecg_param_typeschema_Half2X3_TcgHalf2X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half2x3choicecg_param_typeschema_Half2X3_TcgHalf2X3_ instance.
func (me *XsdGoPkgHasElem_half2x3choicecg_param_typeschema_Half2X3_TcgHalf2X3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_half2x3choicecg_param_typeschema_Half2X3_TcgHalf2X3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFloat1X3 TcgListOfFloat

//	Since TcgFloat1X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat1X3) Set(s string) { (*TcgListOfFloat)(me).Set(s) }

//	Since TcgFloat1X3 is just a simple String type, this merely returns the current string value.
func (me TcgFloat1X3) String() string { return TcgListOfFloat(me).String() }

//	This convenience method just performs a simple type conversion to TcgFloat1X3's alias type TcgListOfFloat.
func (me TcgFloat1X3) ToTcgListOfFloat() TcgListOfFloat { return TcgListOfFloat(me) }

type XsdGoPkgHasElem_float1x3choicecg_param_typeschema_Float1X3_TcgFloat1X3_ struct {
	Float1X3 TcgFloat1X3 `xml:"http://www.collada.org/2005/11/COLLADASchema float1x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float1x3choicecg_param_typeschema_Float1X3_TcgFloat1X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float1x3choicecg_param_typeschema_Float1X3_TcgFloat1X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float1x3choicecg_param_typeschema_Float1X3_TcgFloat1X3_ instance.
func (me *XsdGoPkgHasElem_float1x3choicecg_param_typeschema_Float1X3_TcgFloat1X3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float1x3choicecg_param_typeschema_Float1X3_TcgFloat1X3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFixed2X1 TcgListOfFixed

//	Since TcgFixed2X1 is just a simple String type, this merely returns the current string value.
func (me TcgFixed2X1) String() string { return TcgListOfFixed(me).String() }

//	This convenience method just performs a simple type conversion to TcgFixed2X1's alias type TcgListOfFixed.
func (me TcgFixed2X1) ToTcgListOfFixed() TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed2X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed2X1) Set(s string) { (*TcgListOfFixed)(me).Set(s) }

type XsdGoPkgHasElem_fixed2x1choicecg_param_typeschema_Fixed2X1_TcgFixed2X1_ struct {
	Fixed2X1 TcgFixed2X1 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed2x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fixed2x1choicecg_param_typeschema_Fixed2X1_TcgFixed2X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed2x1choicecg_param_typeschema_Fixed2X1_TcgFixed2X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed2x1choicecg_param_typeschema_Fixed2X1_TcgFixed2X1_ instance.
func (me *XsdGoPkgHasElem_fixed2x1choicecg_param_typeschema_Fixed2X1_TcgFixed2X1_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fixed2x1choicecg_param_typeschema_Fixed2X1_TcgFixed2X1_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgBool1X3 TcgListOfBool

//	Since TcgBool1X3 is just a simple String type, this merely returns the current string value.
func (me TcgBool1X3) String() string { return TcgListOfBool(me).String() }

//	This convenience method just performs a simple type conversion to TcgBool1X3's alias type TcgListOfBool.
func (me TcgBool1X3) ToTcgListOfBool() TcgListOfBool { return TcgListOfBool(me) }

//	Since TcgBool1X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool1X3) Set(s string) { (*TcgListOfBool)(me).Set(s) }

type XsdGoPkgHasElem_bool1x3choicecg_param_typeschema_Bool1X3_TcgBool1X3_ struct {
	Bool1X3 TcgBool1X3 `xml:"http://www.collada.org/2005/11/COLLADASchema bool1x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool1x3choicecg_param_typeschema_Bool1X3_TcgBool1X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool1x3choicecg_param_typeschema_Bool1X3_TcgBool1X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool1x3choicecg_param_typeschema_Bool1X3_TcgBool1X3_ instance.
func (me *XsdGoPkgHasElem_bool1x3choicecg_param_typeschema_Bool1X3_TcgBool1X3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool1x3choicecg_param_typeschema_Bool1X3_TcgBool1X3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgInt2 TcgListOfInt

//	Since TcgInt2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt2) Set(s string) { (*TcgListOfInt)(me).Set(s) }

//	Since TcgInt2 is just a simple String type, this merely returns the current string value.
func (me TcgInt2) String() string { return TcgListOfInt(me).String() }

//	This convenience method just performs a simple type conversion to TcgInt2's alias type TcgListOfInt.
func (me TcgInt2) ToTcgListOfInt() TcgListOfInt { return TcgListOfInt(me) }

type XsdGoPkgHasElem_int2choicecg_param_typeschema_Int2_TcgInt2_ struct {
	Int2 TcgInt2 `xml:"http://www.collada.org/2005/11/COLLADASchema int2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int2choicecg_param_typeschema_Int2_TcgInt2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int2choicecg_param_typeschema_Int2_TcgInt2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int2choicecg_param_typeschema_Int2_TcgInt2_ instance.
func (me *XsdGoPkgHasElem_int2choicecg_param_typeschema_Int2_TcgInt2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int2choicecg_param_typeschema_Int2_TcgInt2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgHalf3X2 TcgListOfHalf

//	This convenience method just performs a simple type conversion to TcgHalf3X2's alias type TcgListOfHalf.
func (me TcgHalf3X2) ToTcgListOfHalf() TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf3X2 is just a simple String type, this merely returns the current string value.
func (me TcgHalf3X2) String() string { return TcgListOfHalf(me).String() }

//	Since TcgHalf3X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf3X2) Set(s string) { (*TcgListOfHalf)(me).Set(s) }

type XsdGoPkgHasElem_half3x2choicecg_param_typeschema_Half3X2_TcgHalf3X2_ struct {
	Half3X2 TcgHalf3X2 `xml:"http://www.collada.org/2005/11/COLLADASchema half3x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_half3x2choicecg_param_typeschema_Half3X2_TcgHalf3X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half3x2choicecg_param_typeschema_Half3X2_TcgHalf3X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half3x2choicecg_param_typeschema_Half3X2_TcgHalf3X2_ instance.
func (me *XsdGoPkgHasElem_half3x2choicecg_param_typeschema_Half3X2_TcgHalf3X2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_half3x2choicecg_param_typeschema_Half3X2_TcgHalf3X2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFixed1X2 TcgListOfFixed

//	Since TcgFixed1X2 is just a simple String type, this merely returns the current string value.
func (me TcgFixed1X2) String() string { return TcgListOfFixed(me).String() }

//	Since TcgFixed1X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed1X2) Set(s string) { (*TcgListOfFixed)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgFixed1X2's alias type TcgListOfFixed.
func (me TcgFixed1X2) ToTcgListOfFixed() TcgListOfFixed { return TcgListOfFixed(me) }

type XsdGoPkgHasElem_fixed1x2choicecg_param_typeschema_Fixed1X2_TcgFixed1X2_ struct {
	Fixed1X2 TcgFixed1X2 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed1x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fixed1x2choicecg_param_typeschema_Fixed1X2_TcgFixed1X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed1x2choicecg_param_typeschema_Fixed1X2_TcgFixed1X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed1x2choicecg_param_typeschema_Fixed1X2_TcgFixed1X2_ instance.
func (me *XsdGoPkgHasElem_fixed1x2choicecg_param_typeschema_Fixed1X2_TcgFixed1X2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fixed1x2choicecg_param_typeschema_Fixed1X2_TcgFixed1X2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFloat4X2 TcgListOfFloat

//	Since TcgFloat4X2 is just a simple String type, this merely returns the current string value.
func (me TcgFloat4X2) String() string { return TcgListOfFloat(me).String() }

//	Since TcgFloat4X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat4X2) Set(s string) { (*TcgListOfFloat)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgFloat4X2's alias type TcgListOfFloat.
func (me TcgFloat4X2) ToTcgListOfFloat() TcgListOfFloat { return TcgListOfFloat(me) }

type XsdGoPkgHasElem_float4x2choicecg_param_typeschema_Float4X2_TcgFloat4X2_ struct {
	Float4X2 TcgFloat4X2 `xml:"http://www.collada.org/2005/11/COLLADASchema float4x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float4x2choicecg_param_typeschema_Float4X2_TcgFloat4X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float4x2choicecg_param_typeschema_Float4X2_TcgFloat4X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float4x2choicecg_param_typeschema_Float4X2_TcgFloat4X2_ instance.
func (me *XsdGoPkgHasElem_float4x2choicecg_param_typeschema_Float4X2_TcgFloat4X2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float4x2choicecg_param_typeschema_Float4X2_TcgFloat4X2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgSampler3D struct {
	TfxSampler3DCommon
}

//	If the WalkHandlers.TcgSampler3D function is not nil (ie. was set by outside code), calls it with this TcgSampler3D instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TcgSampler3D instance.
func (me *TcgSampler3D) Walk() (err error) {
	if fn := WalkHandlers.TcgSampler3D; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TfxSampler3DCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_sampler3Dchoicecg_param_typeschema_Sampler3D_TcgSampler3D_ struct {
	Sampler3D *TcgSampler3D `xml:"http://www.collada.org/2005/11/COLLADASchema sampler3D"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sampler3Dchoicecg_param_typeschema_Sampler3D_TcgSampler3D_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sampler3Dchoicecg_param_typeschema_Sampler3D_TcgSampler3D_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sampler3Dchoicecg_param_typeschema_Sampler3D_TcgSampler3D_ instance.
func (me *XsdGoPkgHasElem_sampler3Dchoicecg_param_typeschema_Sampler3D_TcgSampler3D_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sampler3Dchoicecg_param_typeschema_Sampler3D_TcgSampler3D_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Sampler3D.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFixed4X2 TcgListOfFixed

//	Since TcgFixed4X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed4X2) Set(s string) { (*TcgListOfFixed)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgFixed4X2's alias type TcgListOfFixed.
func (me TcgFixed4X2) ToTcgListOfFixed() TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed4X2 is just a simple String type, this merely returns the current string value.
func (me TcgFixed4X2) String() string { return TcgListOfFixed(me).String() }

type XsdGoPkgHasElem_fixed4x2choicecg_param_typeschema_Fixed4X2_TcgFixed4X2_ struct {
	Fixed4X2 TcgFixed4X2 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed4x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fixed4x2choicecg_param_typeschema_Fixed4X2_TcgFixed4X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed4x2choicecg_param_typeschema_Fixed4X2_TcgFixed4X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed4x2choicecg_param_typeschema_Fixed4X2_TcgFixed4X2_ instance.
func (me *XsdGoPkgHasElem_fixed4x2choicecg_param_typeschema_Fixed4X2_TcgFixed4X2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fixed4x2choicecg_param_typeschema_Fixed4X2_TcgFixed4X2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgInt2X1 TcgListOfInt

//	Since TcgInt2X1 is just a simple String type, this merely returns the current string value.
func (me TcgInt2X1) String() string { return TcgListOfInt(me).String() }

//	Since TcgInt2X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt2X1) Set(s string) { (*TcgListOfInt)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgInt2X1's alias type TcgListOfInt.
func (me TcgInt2X1) ToTcgListOfInt() TcgListOfInt { return TcgListOfInt(me) }

type XsdGoPkgHasElem_int2x1choicecg_param_typeschema_Int2X1_TcgInt2X1_ struct {
	Int2X1 TcgInt2X1 `xml:"http://www.collada.org/2005/11/COLLADASchema int2x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int2x1choicecg_param_typeschema_Int2X1_TcgInt2X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int2x1choicecg_param_typeschema_Int2X1_TcgInt2X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int2x1choicecg_param_typeschema_Int2X1_TcgInt2X1_ instance.
func (me *XsdGoPkgHasElem_int2x1choicecg_param_typeschema_Int2X1_TcgInt2X1_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int2x1choicecg_param_typeschema_Int2X1_TcgInt2X1_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFloat2X2 TcgListOfFloat

//	Since TcgFloat2X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat2X2) Set(s string) { (*TcgListOfFloat)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgFloat2X2's alias type TcgListOfFloat.
func (me TcgFloat2X2) ToTcgListOfFloat() TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat2X2 is just a simple String type, this merely returns the current string value.
func (me TcgFloat2X2) String() string { return TcgListOfFloat(me).String() }

type XsdGoPkgHasElem_float2x2choicecg_param_typeschema_Float2X2_TcgFloat2X2_ struct {
	Float2X2 TcgFloat2X2 `xml:"http://www.collada.org/2005/11/COLLADASchema float2x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float2x2choicecg_param_typeschema_Float2X2_TcgFloat2X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float2x2choicecg_param_typeschema_Float2X2_TcgFloat2X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float2x2choicecg_param_typeschema_Float2X2_TcgFloat2X2_ instance.
func (me *XsdGoPkgHasElem_float2x2choicecg_param_typeschema_Float2X2_TcgFloat2X2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float2x2choicecg_param_typeschema_Float2X2_TcgFloat2X2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFloat4X1 TcgListOfFloat

//	This convenience method just performs a simple type conversion to TcgFloat4X1's alias type TcgListOfFloat.
func (me TcgFloat4X1) ToTcgListOfFloat() TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat4X1 is just a simple String type, this merely returns the current string value.
func (me TcgFloat4X1) String() string { return TcgListOfFloat(me).String() }

//	Since TcgFloat4X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat4X1) Set(s string) { (*TcgListOfFloat)(me).Set(s) }

type XsdGoPkgHasElem_float4x1choicecg_param_typeschema_Float4X1_TcgFloat4X1_ struct {
	Float4X1 TcgFloat4X1 `xml:"http://www.collada.org/2005/11/COLLADASchema float4x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float4x1choicecg_param_typeschema_Float4X1_TcgFloat4X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float4x1choicecg_param_typeschema_Float4X1_TcgFloat4X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float4x1choicecg_param_typeschema_Float4X1_TcgFloat4X1_ instance.
func (me *XsdGoPkgHasElem_float4x1choicecg_param_typeschema_Float4X1_TcgFloat4X1_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float4x1choicecg_param_typeschema_Float4X1_TcgFloat4X1_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFloat4X4 TcgListOfFloat

//	Since TcgFloat4X4 is just a simple String type, this merely returns the current string value.
func (me TcgFloat4X4) String() string { return TcgListOfFloat(me).String() }

//	This convenience method just performs a simple type conversion to TcgFloat4X4's alias type TcgListOfFloat.
func (me TcgFloat4X4) ToTcgListOfFloat() TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat4X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat4X4) Set(s string) { (*TcgListOfFloat)(me).Set(s) }

type XsdGoPkgHasElem_float4x4choicecg_param_typeschema_Float4X4_TcgFloat4X4_ struct {
	Float4X4 TcgFloat4X4 `xml:"http://www.collada.org/2005/11/COLLADASchema float4x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float4x4choicecg_param_typeschema_Float4X4_TcgFloat4X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float4x4choicecg_param_typeschema_Float4X4_TcgFloat4X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float4x4choicecg_param_typeschema_Float4X4_TcgFloat4X4_ instance.
func (me *XsdGoPkgHasElem_float4x4choicecg_param_typeschema_Float4X4_TcgFloat4X4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float4x4choicecg_param_typeschema_Float4X4_TcgFloat4X4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFixed3X2 TcgListOfFixed

//	Since TcgFixed3X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed3X2) Set(s string) { (*TcgListOfFixed)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgFixed3X2's alias type TcgListOfFixed.
func (me TcgFixed3X2) ToTcgListOfFixed() TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed3X2 is just a simple String type, this merely returns the current string value.
func (me TcgFixed3X2) String() string { return TcgListOfFixed(me).String() }

type XsdGoPkgHasElem_fixed3x2choicecg_param_typeschema_Fixed3X2_TcgFixed3X2_ struct {
	Fixed3X2 TcgFixed3X2 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed3x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fixed3x2choicecg_param_typeschema_Fixed3X2_TcgFixed3X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed3x2choicecg_param_typeschema_Fixed3X2_TcgFixed3X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed3x2choicecg_param_typeschema_Fixed3X2_TcgFixed3X2_ instance.
func (me *XsdGoPkgHasElem_fixed3x2choicecg_param_typeschema_Fixed3X2_TcgFixed3X2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fixed3x2choicecg_param_typeschema_Fixed3X2_TcgFixed3X2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgSamplerCUBE struct {
	TfxSamplerCUBECommon
}

//	If the WalkHandlers.TcgSamplerCUBE function is not nil (ie. was set by outside code), calls it with this TcgSamplerCUBE instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TcgSamplerCUBE instance.
func (me *TcgSamplerCUBE) Walk() (err error) {
	if fn := WalkHandlers.TcgSamplerCUBE; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TfxSamplerCUBECommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_samplerCUBEchoicecg_param_typeschema_SamplerCUBE_TcgSamplerCUBE_ struct {
	SamplerCUBE *TcgSamplerCUBE `xml:"http://www.collada.org/2005/11/COLLADASchema samplerCUBE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_samplerCUBEchoicecg_param_typeschema_SamplerCUBE_TcgSamplerCUBE_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_samplerCUBEchoicecg_param_typeschema_SamplerCUBE_TcgSamplerCUBE_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_samplerCUBEchoicecg_param_typeschema_SamplerCUBE_TcgSamplerCUBE_ instance.
func (me *XsdGoPkgHasElem_samplerCUBEchoicecg_param_typeschema_SamplerCUBE_TcgSamplerCUBE_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_samplerCUBEchoicecg_param_typeschema_SamplerCUBE_TcgSamplerCUBE_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SamplerCUBE.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgHalf1X2 TcgListOfHalf

//	Since TcgHalf1X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf1X2) Set(s string) { (*TcgListOfHalf)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgHalf1X2's alias type TcgListOfHalf.
func (me TcgHalf1X2) ToTcgListOfHalf() TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf1X2 is just a simple String type, this merely returns the current string value.
func (me TcgHalf1X2) String() string { return TcgListOfHalf(me).String() }

type XsdGoPkgHasElem_half1x2choicecg_param_typeschema_Half1X2_TcgHalf1X2_ struct {
	Half1X2 TcgHalf1X2 `xml:"http://www.collada.org/2005/11/COLLADASchema half1x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_half1x2choicecg_param_typeschema_Half1X2_TcgHalf1X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half1x2choicecg_param_typeschema_Half1X2_TcgHalf1X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half1x2choicecg_param_typeschema_Half1X2_TcgHalf1X2_ instance.
func (me *XsdGoPkgHasElem_half1x2choicecg_param_typeschema_Half1X2_TcgHalf1X2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_half1x2choicecg_param_typeschema_Half1X2_TcgHalf1X2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgBool2X1 TcgListOfBool

//	Since TcgBool2X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool2X1) Set(s string) { (*TcgListOfBool)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgBool2X1's alias type TcgListOfBool.
func (me TcgBool2X1) ToTcgListOfBool() TcgListOfBool { return TcgListOfBool(me) }

//	Since TcgBool2X1 is just a simple String type, this merely returns the current string value.
func (me TcgBool2X1) String() string { return TcgListOfBool(me).String() }

type XsdGoPkgHasElem_bool2x1choicecg_param_typeschema_Bool2X1_TcgBool2X1_ struct {
	Bool2X1 TcgBool2X1 `xml:"http://www.collada.org/2005/11/COLLADASchema bool2x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool2x1choicecg_param_typeschema_Bool2X1_TcgBool2X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool2x1choicecg_param_typeschema_Bool2X1_TcgBool2X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool2x1choicecg_param_typeschema_Bool2X1_TcgBool2X1_ instance.
func (me *XsdGoPkgHasElem_bool2x1choicecg_param_typeschema_Bool2X1_TcgBool2X1_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool2x1choicecg_param_typeschema_Bool2X1_TcgBool2X1_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgHalf1X1 TcgListOfHalf

//	Since TcgHalf1X1 is just a simple String type, this merely returns the current string value.
func (me TcgHalf1X1) String() string { return TcgListOfHalf(me).String() }

//	Since TcgHalf1X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf1X1) Set(s string) { (*TcgListOfHalf)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgHalf1X1's alias type TcgListOfHalf.
func (me TcgHalf1X1) ToTcgListOfHalf() TcgListOfHalf { return TcgListOfHalf(me) }

type XsdGoPkgHasElem_half1x1choicecg_param_typeschema_Half1X1_TcgHalf1X1_ struct {
	Half1X1 TcgHalf1X1 `xml:"http://www.collada.org/2005/11/COLLADASchema half1x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_half1x1choicecg_param_typeschema_Half1X1_TcgHalf1X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half1x1choicecg_param_typeschema_Half1X1_TcgHalf1X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half1x1choicecg_param_typeschema_Half1X1_TcgHalf1X1_ instance.
func (me *XsdGoPkgHasElem_half1x1choicecg_param_typeschema_Half1X1_TcgHalf1X1_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_half1x1choicecg_param_typeschema_Half1X1_TcgHalf1X1_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgInt1X3 TcgListOfInt

//	Since TcgInt1X3 is just a simple String type, this merely returns the current string value.
func (me TcgInt1X3) String() string { return TcgListOfInt(me).String() }

//	Since TcgInt1X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt1X3) Set(s string) { (*TcgListOfInt)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgInt1X3's alias type TcgListOfInt.
func (me TcgInt1X3) ToTcgListOfInt() TcgListOfInt { return TcgListOfInt(me) }

type XsdGoPkgHasElem_int1x3choicecg_param_typeschema_Int1X3_TcgInt1X3_ struct {
	Int1X3 TcgInt1X3 `xml:"http://www.collada.org/2005/11/COLLADASchema int1x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int1x3choicecg_param_typeschema_Int1X3_TcgInt1X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int1x3choicecg_param_typeschema_Int1X3_TcgInt1X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int1x3choicecg_param_typeschema_Int1X3_TcgInt1X3_ instance.
func (me *XsdGoPkgHasElem_int1x3choicecg_param_typeschema_Int1X3_TcgInt1X3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int1x3choicecg_param_typeschema_Int1X3_TcgInt1X3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgSamplerRECT struct {
	TfxSamplerRECTCommon
}

//	If the WalkHandlers.TcgSamplerRECT function is not nil (ie. was set by outside code), calls it with this TcgSamplerRECT instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TcgSamplerRECT instance.
func (me *TcgSamplerRECT) Walk() (err error) {
	if fn := WalkHandlers.TcgSamplerRECT; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TfxSamplerRECTCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_samplerRECTchoicecg_param_typeschema_SamplerRECT_TcgSamplerRECT_ struct {
	SamplerRECT *TcgSamplerRECT `xml:"http://www.collada.org/2005/11/COLLADASchema samplerRECT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_samplerRECTchoicecg_param_typeschema_SamplerRECT_TcgSamplerRECT_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_samplerRECTchoicecg_param_typeschema_SamplerRECT_TcgSamplerRECT_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_samplerRECTchoicecg_param_typeschema_SamplerRECT_TcgSamplerRECT_ instance.
func (me *XsdGoPkgHasElem_samplerRECTchoicecg_param_typeschema_SamplerRECT_TcgSamplerRECT_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_samplerRECTchoicecg_param_typeschema_SamplerRECT_TcgSamplerRECT_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SamplerRECT.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFloat1 xsdt.Float

//	This convenience method just performs a simple type conversion to TcgFloat1's alias type xsdt.Float.
func (me TcgFloat1) ToXsdtFloat() xsdt.Float { return xsdt.Float(me) }

//	Since TcgFloat1 is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TcgFloat1) Set(s string) { (*xsdt.Float)(me).Set(s) }

//	Returns a string representation of this TcgFloat1's current non-string scalar value.
func (me TcgFloat1) String() string { return xsdt.Float(me).String() }

type XsdGoPkgHasElem_float1choicecg_param_typeschema_Float1_TcgFloat1_ struct {
	Float1 *TcgFloat1 `xml:"http://www.collada.org/2005/11/COLLADASchema float1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float1choicecg_param_typeschema_Float1_TcgFloat1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float1choicecg_param_typeschema_Float1_TcgFloat1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float1choicecg_param_typeschema_Float1_TcgFloat1_ instance.
func (me *XsdGoPkgHasElem_float1choicecg_param_typeschema_Float1_TcgFloat1_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float1choicecg_param_typeschema_Float1_TcgFloat1_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgBool2X3 TcgListOfBool

//	Since TcgBool2X3 is just a simple String type, this merely returns the current string value.
func (me TcgBool2X3) String() string { return TcgListOfBool(me).String() }

//	This convenience method just performs a simple type conversion to TcgBool2X3's alias type TcgListOfBool.
func (me TcgBool2X3) ToTcgListOfBool() TcgListOfBool { return TcgListOfBool(me) }

//	Since TcgBool2X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool2X3) Set(s string) { (*TcgListOfBool)(me).Set(s) }

type XsdGoPkgHasElem_bool2x3choicecg_param_typeschema_Bool2X3_TcgBool2X3_ struct {
	Bool2X3 TcgBool2X3 `xml:"http://www.collada.org/2005/11/COLLADASchema bool2x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool2x3choicecg_param_typeschema_Bool2X3_TcgBool2X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool2x3choicecg_param_typeschema_Bool2X3_TcgBool2X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool2x3choicecg_param_typeschema_Bool2X3_TcgBool2X3_ instance.
func (me *XsdGoPkgHasElem_bool2x3choicecg_param_typeschema_Bool2X3_TcgBool2X3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool2x3choicecg_param_typeschema_Bool2X3_TcgBool2X3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_boolchoicecg_param_typeschema_Bool_TcgBool_ struct {
	Bool *TcgBool `xml:"http://www.collada.org/2005/11/COLLADASchema bool"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_boolchoicecg_param_typeschema_Bool_TcgBool_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_boolchoicecg_param_typeschema_Bool_TcgBool_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_boolchoicecg_param_typeschema_Bool_TcgBool_ instance.
func (me *XsdGoPkgHasElem_boolchoicecg_param_typeschema_Bool_TcgBool_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_boolchoicecg_param_typeschema_Bool_TcgBool_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFixed2X4 TcgListOfFixed

//	Since TcgFixed2X4 is just a simple String type, this merely returns the current string value.
func (me TcgFixed2X4) String() string { return TcgListOfFixed(me).String() }

//	Since TcgFixed2X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed2X4) Set(s string) { (*TcgListOfFixed)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgFixed2X4's alias type TcgListOfFixed.
func (me TcgFixed2X4) ToTcgListOfFixed() TcgListOfFixed { return TcgListOfFixed(me) }

type XsdGoPkgHasElem_fixed2x4choicecg_param_typeschema_Fixed2X4_TcgFixed2X4_ struct {
	Fixed2X4 TcgFixed2X4 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed2x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fixed2x4choicecg_param_typeschema_Fixed2X4_TcgFixed2X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed2x4choicecg_param_typeschema_Fixed2X4_TcgFixed2X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed2x4choicecg_param_typeschema_Fixed2X4_TcgFixed2X4_ instance.
func (me *XsdGoPkgHasElem_fixed2x4choicecg_param_typeschema_Fixed2X4_TcgFixed2X4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fixed2x4choicecg_param_typeschema_Fixed2X4_TcgFixed2X4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgBool2X2 TcgListOfBool

//	Since TcgBool2X2 is just a simple String type, this merely returns the current string value.
func (me TcgBool2X2) String() string { return TcgListOfBool(me).String() }

//	This convenience method just performs a simple type conversion to TcgBool2X2's alias type TcgListOfBool.
func (me TcgBool2X2) ToTcgListOfBool() TcgListOfBool { return TcgListOfBool(me) }

//	Since TcgBool2X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool2X2) Set(s string) { (*TcgListOfBool)(me).Set(s) }

type XsdGoPkgHasElem_bool2x2choicecg_param_typeschema_Bool2X2_TcgBool2X2_ struct {
	Bool2X2 TcgBool2X2 `xml:"http://www.collada.org/2005/11/COLLADASchema bool2x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool2x2choicecg_param_typeschema_Bool2X2_TcgBool2X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool2x2choicecg_param_typeschema_Bool2X2_TcgBool2X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool2x2choicecg_param_typeschema_Bool2X2_TcgBool2X2_ instance.
func (me *XsdGoPkgHasElem_bool2x2choicecg_param_typeschema_Bool2X2_TcgBool2X2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool2x2choicecg_param_typeschema_Bool2X2_TcgBool2X2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFixed4 TcgListOfFixed

//	This convenience method just performs a simple type conversion to TcgFixed4's alias type TcgListOfFixed.
func (me TcgFixed4) ToTcgListOfFixed() TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed4 is just a simple String type, this merely returns the current string value.
func (me TcgFixed4) String() string { return TcgListOfFixed(me).String() }

//	Since TcgFixed4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed4) Set(s string) { (*TcgListOfFixed)(me).Set(s) }

type XsdGoPkgHasElem_fixed4choicecg_param_typeschema_Fixed4_TcgFixed4_ struct {
	Fixed4 TcgFixed4 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fixed4choicecg_param_typeschema_Fixed4_TcgFixed4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed4choicecg_param_typeschema_Fixed4_TcgFixed4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed4choicecg_param_typeschema_Fixed4_TcgFixed4_ instance.
func (me *XsdGoPkgHasElem_fixed4choicecg_param_typeschema_Fixed4_TcgFixed4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fixed4choicecg_param_typeschema_Fixed4_TcgFixed4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgHalf1 xsdt.Float

//	Since TcgHalf1 is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TcgHalf1) Set(s string) { (*xsdt.Float)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgHalf1's alias type xsdt.Float.
func (me TcgHalf1) ToXsdtFloat() xsdt.Float { return xsdt.Float(me) }

//	Returns a string representation of this TcgHalf1's current non-string scalar value.
func (me TcgHalf1) String() string { return xsdt.Float(me).String() }

type XsdGoPkgHasElem_half1choicecg_param_typeschema_Half1_TcgHalf1_ struct {
	Half1 *TcgHalf1 `xml:"http://www.collada.org/2005/11/COLLADASchema half1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_half1choicecg_param_typeschema_Half1_TcgHalf1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half1choicecg_param_typeschema_Half1_TcgHalf1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half1choicecg_param_typeschema_Half1_TcgHalf1_ instance.
func (me *XsdGoPkgHasElem_half1choicecg_param_typeschema_Half1_TcgHalf1_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_half1choicecg_param_typeschema_Half1_TcgHalf1_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Declares a resource that can be used both as the source for texture samples and as the target of a rendering pass.
//	A procedural surface generator for the cg profile.
//	The entry symbol for the shader function.
type XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Name_TxsdCgSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_ struct {
	//	The entry symbol for the shader function.
	Name *TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName `xml:"http://www.collada.org/2005/11/COLLADASchema name"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Name_TxsdCgSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Name_TxsdCgSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Name_TxsdCgSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_ instance.
func (me *XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Name_TxsdCgSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Name_TxsdCgSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Name.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Assigns a new value to a previously defined parameter.
type TcgSetparamSimple struct {
	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

	XsdGoPkgHasAttr_Ref_TcgIdentifier_

	XsdGoPkgHasGroup_CgParamType
}

//	If the WalkHandlers.TcgSetparamSimple function is not nil (ie. was set by outside code), calls it with this TcgSetparamSimple instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TcgSetparamSimple instance.
func (me *TcgSetparamSimple) Walk() (err error) {
	if fn := WalkHandlers.TcgSetparamSimple; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Setparam_TcgSetparamSimple_ struct {
	//	Assigns a new value to a previously defined parameter.
	Setparams []*TcgSetparamSimple `xml:"http://www.collada.org/2005/11/COLLADASchema setparam"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Setparam_TcgSetparamSimple_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Setparam_TcgSetparamSimple_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Setparam_TcgSetparamSimple_ instance.
func (me *XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Setparam_TcgSetparamSimple_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Setparam_TcgSetparamSimple_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Setparams {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator struct {
	//	The annotate element allows you to specify an annotation for this generator.
	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

	//	The entry symbol for the shader function.
	XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Name_TxsdCgSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_

	//	Assigns a new value to a previously defined parameter.
	XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Setparam_TcgSetparamSimple_

	//	The include element imports cg source code or precompiled binary shaders into the FX Runtime by referencing an external resource.
	XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Include_TfxIncludeCommon_

	//	The code element allows you to embed cg sourcecode for the surface generator.
	XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Code_TfxCodeProfile_
}

//	If the WalkHandlers.TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator function is not nil (ie. was set by outside code), calls it with this TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator instance.
func (me *TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator) Walk() (err error) {
	if fn := WalkHandlers.TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Name_TxsdCgSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Setparam_TcgSetparamSimple_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Include_TfxIncludeCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Code_TfxCodeProfile_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_generatorsequenceextensioncomplexContentcg_surface_typeschema_Generator_TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator_ struct {
	//	A procedural surface generator for the cg profile.
	Generator *TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator `xml:"http://www.collada.org/2005/11/COLLADASchema generator"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_generatorsequenceextensioncomplexContentcg_surface_typeschema_Generator_TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_generatorsequenceextensioncomplexContentcg_surface_typeschema_Generator_TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_generatorsequenceextensioncomplexContentcg_surface_typeschema_Generator_TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator_ instance.
func (me *XsdGoPkgHasElem_generatorsequenceextensioncomplexContentcg_surface_typeschema_Generator_TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_generatorsequenceextensioncomplexContentcg_surface_typeschema_Generator_TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Generator.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgSurfaceType struct {
	//	A procedural surface generator for the cg profile.
	XsdGoPkgHasElem_generatorsequenceextensioncomplexContentcg_surface_typeschema_Generator_TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator_

	TfxSurfaceCommon
}

//	If the WalkHandlers.TcgSurfaceType function is not nil (ie. was set by outside code), calls it with this TcgSurfaceType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TcgSurfaceType instance.
func (me *TcgSurfaceType) Walk() (err error) {
	if fn := WalkHandlers.TcgSurfaceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TfxSurfaceCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_generatorsequenceextensioncomplexContentcg_surface_typeschema_Generator_TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_surfacechoicecg_param_typeschema_Surface_TcgSurfaceType_ struct {
	Surface *TcgSurfaceType `xml:"http://www.collada.org/2005/11/COLLADASchema surface"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_surfacechoicecg_param_typeschema_Surface_TcgSurfaceType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_surfacechoicecg_param_typeschema_Surface_TcgSurfaceType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_surfacechoicecg_param_typeschema_Surface_TcgSurfaceType_ instance.
func (me *XsdGoPkgHasElem_surfacechoicecg_param_typeschema_Surface_TcgSurfaceType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_surfacechoicecg_param_typeschema_Surface_TcgSurfaceType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Surface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFloat1X2 TcgListOfFloat

//	This convenience method just performs a simple type conversion to TcgFloat1X2's alias type TcgListOfFloat.
func (me TcgFloat1X2) ToTcgListOfFloat() TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat1X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat1X2) Set(s string) { (*TcgListOfFloat)(me).Set(s) }

//	Since TcgFloat1X2 is just a simple String type, this merely returns the current string value.
func (me TcgFloat1X2) String() string { return TcgListOfFloat(me).String() }

type XsdGoPkgHasElem_float1x2choicecg_param_typeschema_Float1X2_TcgFloat1X2_ struct {
	Float1X2 TcgFloat1X2 `xml:"http://www.collada.org/2005/11/COLLADASchema float1x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float1x2choicecg_param_typeschema_Float1X2_TcgFloat1X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float1x2choicecg_param_typeschema_Float1X2_TcgFloat1X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float1x2choicecg_param_typeschema_Float1X2_TcgFloat1X2_ instance.
func (me *XsdGoPkgHasElem_float1x2choicecg_param_typeschema_Float1X2_TcgFloat1X2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float1x2choicecg_param_typeschema_Float1X2_TcgFloat1X2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFixed1 xsdt.Float

//	Returns a string representation of this TcgFixed1's current non-string scalar value.
func (me TcgFixed1) String() string { return xsdt.Float(me).String() }

//	Since TcgFixed1 is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TcgFixed1) Set(s string) { (*xsdt.Float)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgFixed1's alias type xsdt.Float.
func (me TcgFixed1) ToXsdtFloat() xsdt.Float { return xsdt.Float(me) }

type XsdGoPkgHasElem_fixed1choicecg_param_typeschema_Fixed1_TcgFixed1_ struct {
	Fixed1 *TcgFixed1 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fixed1choicecg_param_typeschema_Fixed1_TcgFixed1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed1choicecg_param_typeschema_Fixed1_TcgFixed1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed1choicecg_param_typeschema_Fixed1_TcgFixed1_ instance.
func (me *XsdGoPkgHasElem_fixed1choicecg_param_typeschema_Fixed1_TcgFixed1_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fixed1choicecg_param_typeschema_Fixed1_TcgFixed1_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgInt2X2 TcgListOfInt

//	Since TcgInt2X2 is just a simple String type, this merely returns the current string value.
func (me TcgInt2X2) String() string { return TcgListOfInt(me).String() }

//	This convenience method just performs a simple type conversion to TcgInt2X2's alias type TcgListOfInt.
func (me TcgInt2X2) ToTcgListOfInt() TcgListOfInt { return TcgListOfInt(me) }

//	Since TcgInt2X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt2X2) Set(s string) { (*TcgListOfInt)(me).Set(s) }

type XsdGoPkgHasElem_int2x2choicecg_param_typeschema_Int2X2_TcgInt2X2_ struct {
	Int2X2 TcgInt2X2 `xml:"http://www.collada.org/2005/11/COLLADASchema int2x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int2x2choicecg_param_typeschema_Int2X2_TcgInt2X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int2x2choicecg_param_typeschema_Int2X2_TcgInt2X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int2x2choicecg_param_typeschema_Int2X2_TcgInt2X2_ instance.
func (me *XsdGoPkgHasElem_int2x2choicecg_param_typeschema_Int2X2_TcgInt2X2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int2x2choicecg_param_typeschema_Int2X2_TcgInt2X2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFixed3X3 TcgListOfFixed

//	Since TcgFixed3X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed3X3) Set(s string) { (*TcgListOfFixed)(me).Set(s) }

//	Since TcgFixed3X3 is just a simple String type, this merely returns the current string value.
func (me TcgFixed3X3) String() string { return TcgListOfFixed(me).String() }

//	This convenience method just performs a simple type conversion to TcgFixed3X3's alias type TcgListOfFixed.
func (me TcgFixed3X3) ToTcgListOfFixed() TcgListOfFixed { return TcgListOfFixed(me) }

type XsdGoPkgHasElem_fixed3x3choicecg_param_typeschema_Fixed3X3_TcgFixed3X3_ struct {
	Fixed3X3 TcgFixed3X3 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed3x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fixed3x3choicecg_param_typeschema_Fixed3X3_TcgFixed3X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed3x3choicecg_param_typeschema_Fixed3X3_TcgFixed3X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed3x3choicecg_param_typeschema_Fixed3X3_TcgFixed3X3_ instance.
func (me *XsdGoPkgHasElem_fixed3x3choicecg_param_typeschema_Fixed3X3_TcgFixed3X3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fixed3x3choicecg_param_typeschema_Fixed3X3_TcgFixed3X3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFloat3X3 TcgListOfFloat

//	Since TcgFloat3X3 is just a simple String type, this merely returns the current string value.
func (me TcgFloat3X3) String() string { return TcgListOfFloat(me).String() }

//	This convenience method just performs a simple type conversion to TcgFloat3X3's alias type TcgListOfFloat.
func (me TcgFloat3X3) ToTcgListOfFloat() TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat3X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat3X3) Set(s string) { (*TcgListOfFloat)(me).Set(s) }

type XsdGoPkgHasElem_float3x3choicecg_param_typeschema_Float3X3_TcgFloat3X3_ struct {
	Float3X3 TcgFloat3X3 `xml:"http://www.collada.org/2005/11/COLLADASchema float3x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float3x3choicecg_param_typeschema_Float3X3_TcgFloat3X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float3x3choicecg_param_typeschema_Float3X3_TcgFloat3X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float3x3choicecg_param_typeschema_Float3X3_TcgFloat3X3_ instance.
func (me *XsdGoPkgHasElem_float3x3choicecg_param_typeschema_Float3X3_TcgFloat3X3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float3x3choicecg_param_typeschema_Float3X3_TcgFloat3X3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgHalf3X1 TcgListOfHalf

//	This convenience method just performs a simple type conversion to TcgHalf3X1's alias type TcgListOfHalf.
func (me TcgHalf3X1) ToTcgListOfHalf() TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf3X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf3X1) Set(s string) { (*TcgListOfHalf)(me).Set(s) }

//	Since TcgHalf3X1 is just a simple String type, this merely returns the current string value.
func (me TcgHalf3X1) String() string { return TcgListOfHalf(me).String() }

type XsdGoPkgHasElem_half3x1choicecg_param_typeschema_Half3X1_TcgHalf3X1_ struct {
	Half3X1 TcgHalf3X1 `xml:"http://www.collada.org/2005/11/COLLADASchema half3x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_half3x1choicecg_param_typeschema_Half3X1_TcgHalf3X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half3x1choicecg_param_typeschema_Half3X1_TcgHalf3X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half3x1choicecg_param_typeschema_Half3X1_TcgHalf3X1_ instance.
func (me *XsdGoPkgHasElem_half3x1choicecg_param_typeschema_Half3X1_TcgHalf3X1_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_half3x1choicecg_param_typeschema_Half3X1_TcgHalf3X1_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFloat2X1 TcgListOfFloat

//	Since TcgFloat2X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat2X1) Set(s string) { (*TcgListOfFloat)(me).Set(s) }

//	Since TcgFloat2X1 is just a simple String type, this merely returns the current string value.
func (me TcgFloat2X1) String() string { return TcgListOfFloat(me).String() }

//	This convenience method just performs a simple type conversion to TcgFloat2X1's alias type TcgListOfFloat.
func (me TcgFloat2X1) ToTcgListOfFloat() TcgListOfFloat { return TcgListOfFloat(me) }

type XsdGoPkgHasElem_float2x1choicecg_param_typeschema_Float2X1_TcgFloat2X1_ struct {
	Float2X1 TcgFloat2X1 `xml:"http://www.collada.org/2005/11/COLLADASchema float2x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float2x1choicecg_param_typeschema_Float2X1_TcgFloat2X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float2x1choicecg_param_typeschema_Float2X1_TcgFloat2X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float2x1choicecg_param_typeschema_Float2X1_TcgFloat2X1_ instance.
func (me *XsdGoPkgHasElem_float2x1choicecg_param_typeschema_Float2X1_TcgFloat2X1_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float2x1choicecg_param_typeschema_Float2X1_TcgFloat2X1_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgSampler2D struct {
	TfxSampler2DCommon
}

//	If the WalkHandlers.TcgSampler2D function is not nil (ie. was set by outside code), calls it with this TcgSampler2D instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TcgSampler2D instance.
func (me *TcgSampler2D) Walk() (err error) {
	if fn := WalkHandlers.TcgSampler2D; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TfxSampler2DCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_sampler2Dchoicecg_param_typeschema_Sampler2D_TcgSampler2D_ struct {
	Sampler2D *TcgSampler2D `xml:"http://www.collada.org/2005/11/COLLADASchema sampler2D"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sampler2Dchoicecg_param_typeschema_Sampler2D_TcgSampler2D_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sampler2Dchoicecg_param_typeschema_Sampler2D_TcgSampler2D_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_sampler2Dchoicecg_param_typeschema_Sampler2D_TcgSampler2D_ instance.
func (me *XsdGoPkgHasElem_sampler2Dchoicecg_param_typeschema_Sampler2D_TcgSampler2D_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sampler2Dchoicecg_param_typeschema_Sampler2D_TcgSampler2D_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Sampler2D.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgHalf4X2 TcgListOfHalf

//	Since TcgHalf4X2 is just a simple String type, this merely returns the current string value.
func (me TcgHalf4X2) String() string { return TcgListOfHalf(me).String() }

//	This convenience method just performs a simple type conversion to TcgHalf4X2's alias type TcgListOfHalf.
func (me TcgHalf4X2) ToTcgListOfHalf() TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf4X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf4X2) Set(s string) { (*TcgListOfHalf)(me).Set(s) }

type XsdGoPkgHasElem_half4x2choicecg_param_typeschema_Half4X2_TcgHalf4X2_ struct {
	Half4X2 TcgHalf4X2 `xml:"http://www.collada.org/2005/11/COLLADASchema half4x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_half4x2choicecg_param_typeschema_Half4X2_TcgHalf4X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half4x2choicecg_param_typeschema_Half4X2_TcgHalf4X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half4x2choicecg_param_typeschema_Half4X2_TcgHalf4X2_ instance.
func (me *XsdGoPkgHasElem_half4x2choicecg_param_typeschema_Half4X2_TcgHalf4X2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_half4x2choicecg_param_typeschema_Half4X2_TcgHalf4X2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFixed1X3 TcgListOfFixed

//	This convenience method just performs a simple type conversion to TcgFixed1X3's alias type TcgListOfFixed.
func (me TcgFixed1X3) ToTcgListOfFixed() TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed1X3 is just a simple String type, this merely returns the current string value.
func (me TcgFixed1X3) String() string { return TcgListOfFixed(me).String() }

//	Since TcgFixed1X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed1X3) Set(s string) { (*TcgListOfFixed)(me).Set(s) }

type XsdGoPkgHasElem_fixed1x3choicecg_param_typeschema_Fixed1X3_TcgFixed1X3_ struct {
	Fixed1X3 TcgFixed1X3 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed1x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fixed1x3choicecg_param_typeschema_Fixed1X3_TcgFixed1X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed1x3choicecg_param_typeschema_Fixed1X3_TcgFixed1X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed1x3choicecg_param_typeschema_Fixed1X3_TcgFixed1X3_ instance.
func (me *XsdGoPkgHasElem_fixed1x3choicecg_param_typeschema_Fixed1X3_TcgFixed1X3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fixed1x3choicecg_param_typeschema_Fixed1X3_TcgFixed1X3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgHalf3X4 TcgListOfHalf

//	This convenience method just performs a simple type conversion to TcgHalf3X4's alias type TcgListOfHalf.
func (me TcgHalf3X4) ToTcgListOfHalf() TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf3X4 is just a simple String type, this merely returns the current string value.
func (me TcgHalf3X4) String() string { return TcgListOfHalf(me).String() }

//	Since TcgHalf3X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf3X4) Set(s string) { (*TcgListOfHalf)(me).Set(s) }

type XsdGoPkgHasElem_half3x4choicecg_param_typeschema_Half3X4_TcgHalf3X4_ struct {
	Half3X4 TcgHalf3X4 `xml:"http://www.collada.org/2005/11/COLLADASchema half3x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_half3x4choicecg_param_typeschema_Half3X4_TcgHalf3X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half3x4choicecg_param_typeschema_Half3X4_TcgHalf3X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half3x4choicecg_param_typeschema_Half3X4_TcgHalf3X4_ instance.
func (me *XsdGoPkgHasElem_half3x4choicecg_param_typeschema_Half3X4_TcgHalf3X4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_half3x4choicecg_param_typeschema_Half3X4_TcgHalf3X4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgBool3X1 TcgListOfBool

//	Since TcgBool3X1 is just a simple String type, this merely returns the current string value.
func (me TcgBool3X1) String() string { return TcgListOfBool(me).String() }

//	This convenience method just performs a simple type conversion to TcgBool3X1's alias type TcgListOfBool.
func (me TcgBool3X1) ToTcgListOfBool() TcgListOfBool { return TcgListOfBool(me) }

//	Since TcgBool3X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool3X1) Set(s string) { (*TcgListOfBool)(me).Set(s) }

type XsdGoPkgHasElem_bool3x1choicecg_param_typeschema_Bool3X1_TcgBool3X1_ struct {
	Bool3X1 TcgBool3X1 `xml:"http://www.collada.org/2005/11/COLLADASchema bool3x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool3x1choicecg_param_typeschema_Bool3X1_TcgBool3X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool3x1choicecg_param_typeschema_Bool3X1_TcgBool3X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool3x1choicecg_param_typeschema_Bool3X1_TcgBool3X1_ instance.
func (me *XsdGoPkgHasElem_bool3x1choicecg_param_typeschema_Bool3X1_TcgBool3X1_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool3x1choicecg_param_typeschema_Bool3X1_TcgBool3X1_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFloat4X3 TcgListOfFloat

//	Since TcgFloat4X3 is just a simple String type, this merely returns the current string value.
func (me TcgFloat4X3) String() string { return TcgListOfFloat(me).String() }

//	Since TcgFloat4X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat4X3) Set(s string) { (*TcgListOfFloat)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgFloat4X3's alias type TcgListOfFloat.
func (me TcgFloat4X3) ToTcgListOfFloat() TcgListOfFloat { return TcgListOfFloat(me) }

type XsdGoPkgHasElem_float4x3choicecg_param_typeschema_Float4X3_TcgFloat4X3_ struct {
	Float4X3 TcgFloat4X3 `xml:"http://www.collada.org/2005/11/COLLADASchema float4x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float4x3choicecg_param_typeschema_Float4X3_TcgFloat4X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float4x3choicecg_param_typeschema_Float4X3_TcgFloat4X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float4x3choicecg_param_typeschema_Float4X3_TcgFloat4X3_ instance.
func (me *XsdGoPkgHasElem_float4x3choicecg_param_typeschema_Float4X3_TcgFloat4X3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float4x3choicecg_param_typeschema_Float4X3_TcgFloat4X3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFixed2 TcgListOfFixed

//	Since TcgFixed2 is just a simple String type, this merely returns the current string value.
func (me TcgFixed2) String() string { return TcgListOfFixed(me).String() }

//	Since TcgFixed2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed2) Set(s string) { (*TcgListOfFixed)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgFixed2's alias type TcgListOfFixed.
func (me TcgFixed2) ToTcgListOfFixed() TcgListOfFixed { return TcgListOfFixed(me) }

type XsdGoPkgHasElem_fixed2choicecg_param_typeschema_Fixed2_TcgFixed2_ struct {
	Fixed2 TcgFixed2 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fixed2choicecg_param_typeschema_Fixed2_TcgFixed2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed2choicecg_param_typeschema_Fixed2_TcgFixed2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed2choicecg_param_typeschema_Fixed2_TcgFixed2_ instance.
func (me *XsdGoPkgHasElem_fixed2choicecg_param_typeschema_Fixed2_TcgFixed2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fixed2choicecg_param_typeschema_Fixed2_TcgFixed2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgInt4X1 TcgListOfInt

//	Since TcgInt4X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt4X1) Set(s string) { (*TcgListOfInt)(me).Set(s) }

//	Since TcgInt4X1 is just a simple String type, this merely returns the current string value.
func (me TcgInt4X1) String() string { return TcgListOfInt(me).String() }

//	This convenience method just performs a simple type conversion to TcgInt4X1's alias type TcgListOfInt.
func (me TcgInt4X1) ToTcgListOfInt() TcgListOfInt { return TcgListOfInt(me) }

type XsdGoPkgHasElem_int4x1choicecg_param_typeschema_Int4X1_TcgInt4X1_ struct {
	Int4X1 TcgInt4X1 `xml:"http://www.collada.org/2005/11/COLLADASchema int4x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int4x1choicecg_param_typeschema_Int4X1_TcgInt4X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int4x1choicecg_param_typeschema_Int4X1_TcgInt4X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int4x1choicecg_param_typeschema_Int4X1_TcgInt4X1_ instance.
func (me *XsdGoPkgHasElem_int4x1choicecg_param_typeschema_Int4X1_TcgInt4X1_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int4x1choicecg_param_typeschema_Int4X1_TcgInt4X1_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFixed1X4 TcgListOfFixed

//	This convenience method just performs a simple type conversion to TcgFixed1X4's alias type TcgListOfFixed.
func (me TcgFixed1X4) ToTcgListOfFixed() TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed1X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed1X4) Set(s string) { (*TcgListOfFixed)(me).Set(s) }

//	Since TcgFixed1X4 is just a simple String type, this merely returns the current string value.
func (me TcgFixed1X4) String() string { return TcgListOfFixed(me).String() }

type XsdGoPkgHasElem_fixed1x4choicecg_param_typeschema_Fixed1X4_TcgFixed1X4_ struct {
	Fixed1X4 TcgFixed1X4 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed1x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fixed1x4choicecg_param_typeschema_Fixed1X4_TcgFixed1X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed1x4choicecg_param_typeschema_Fixed1X4_TcgFixed1X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed1x4choicecg_param_typeschema_Fixed1X4_TcgFixed1X4_ instance.
func (me *XsdGoPkgHasElem_fixed1x4choicecg_param_typeschema_Fixed1X4_TcgFixed1X4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fixed1x4choicecg_param_typeschema_Fixed1X4_TcgFixed1X4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgHalf3X3 TcgListOfHalf

//	This convenience method just performs a simple type conversion to TcgHalf3X3's alias type TcgListOfHalf.
func (me TcgHalf3X3) ToTcgListOfHalf() TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf3X3 is just a simple String type, this merely returns the current string value.
func (me TcgHalf3X3) String() string { return TcgListOfHalf(me).String() }

//	Since TcgHalf3X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf3X3) Set(s string) { (*TcgListOfHalf)(me).Set(s) }

type XsdGoPkgHasElem_half3x3choicecg_param_typeschema_Half3X3_TcgHalf3X3_ struct {
	Half3X3 TcgHalf3X3 `xml:"http://www.collada.org/2005/11/COLLADASchema half3x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_half3x3choicecg_param_typeschema_Half3X3_TcgHalf3X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half3x3choicecg_param_typeschema_Half3X3_TcgHalf3X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half3x3choicecg_param_typeschema_Half3X3_TcgHalf3X3_ instance.
func (me *XsdGoPkgHasElem_half3x3choicecg_param_typeschema_Half3X3_TcgHalf3X3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_half3x3choicecg_param_typeschema_Half3X3_TcgHalf3X3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgHalf2X2 TcgListOfHalf

//	Since TcgHalf2X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf2X2) Set(s string) { (*TcgListOfHalf)(me).Set(s) }

//	Since TcgHalf2X2 is just a simple String type, this merely returns the current string value.
func (me TcgHalf2X2) String() string { return TcgListOfHalf(me).String() }

//	This convenience method just performs a simple type conversion to TcgHalf2X2's alias type TcgListOfHalf.
func (me TcgHalf2X2) ToTcgListOfHalf() TcgListOfHalf { return TcgListOfHalf(me) }

type XsdGoPkgHasElem_half2x2choicecg_param_typeschema_Half2X2_TcgHalf2X2_ struct {
	Half2X2 TcgHalf2X2 `xml:"http://www.collada.org/2005/11/COLLADASchema half2x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_half2x2choicecg_param_typeschema_Half2X2_TcgHalf2X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half2x2choicecg_param_typeschema_Half2X2_TcgHalf2X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half2x2choicecg_param_typeschema_Half2X2_TcgHalf2X2_ instance.
func (me *XsdGoPkgHasElem_half2x2choicecg_param_typeschema_Half2X2_TcgHalf2X2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_half2x2choicecg_param_typeschema_Half2X2_TcgHalf2X2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgBool3X3 TcgListOfBool

//	This convenience method just performs a simple type conversion to TcgBool3X3's alias type TcgListOfBool.
func (me TcgBool3X3) ToTcgListOfBool() TcgListOfBool { return TcgListOfBool(me) }

//	Since TcgBool3X3 is just a simple String type, this merely returns the current string value.
func (me TcgBool3X3) String() string { return TcgListOfBool(me).String() }

//	Since TcgBool3X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool3X3) Set(s string) { (*TcgListOfBool)(me).Set(s) }

type XsdGoPkgHasElem_bool3x3choicecg_param_typeschema_Bool3X3_TcgBool3X3_ struct {
	Bool3X3 TcgBool3X3 `xml:"http://www.collada.org/2005/11/COLLADASchema bool3x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool3x3choicecg_param_typeschema_Bool3X3_TcgBool3X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool3x3choicecg_param_typeschema_Bool3X3_TcgBool3X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool3x3choicecg_param_typeschema_Bool3X3_TcgBool3X3_ instance.
func (me *XsdGoPkgHasElem_bool3x3choicecg_param_typeschema_Bool3X3_TcgBool3X3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool3x3choicecg_param_typeschema_Bool3X3_TcgBool3X3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgBool1 xsdt.Boolean

//	Since TcgBool1 is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TcgBool1) Set(s string) { (*xsdt.Boolean)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgBool1's alias type xsdt.Boolean.
func (me TcgBool1) ToXsdtBoolean() xsdt.Boolean { return xsdt.Boolean(me) }

//	Returns a string representation of this TcgBool1's current non-string scalar value.
func (me TcgBool1) String() string { return xsdt.Boolean(me).String() }

type XsdGoPkgHasElem_bool1choicecg_param_typeschema_Bool1_TcgBool1_ struct {
	Bool1 *TcgBool1 `xml:"http://www.collada.org/2005/11/COLLADASchema bool1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool1choicecg_param_typeschema_Bool1_TcgBool1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool1choicecg_param_typeschema_Bool1_TcgBool1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool1choicecg_param_typeschema_Bool1_TcgBool1_ instance.
func (me *XsdGoPkgHasElem_bool1choicecg_param_typeschema_Bool1_TcgBool1_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool1choicecg_param_typeschema_Bool1_TcgBool1_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgInt2X3 TcgListOfInt

//	Since TcgInt2X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt2X3) Set(s string) { (*TcgListOfInt)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgInt2X3's alias type TcgListOfInt.
func (me TcgInt2X3) ToTcgListOfInt() TcgListOfInt { return TcgListOfInt(me) }

//	Since TcgInt2X3 is just a simple String type, this merely returns the current string value.
func (me TcgInt2X3) String() string { return TcgListOfInt(me).String() }

type XsdGoPkgHasElem_int2x3choicecg_param_typeschema_Int2X3_TcgInt2X3_ struct {
	Int2X3 TcgInt2X3 `xml:"http://www.collada.org/2005/11/COLLADASchema int2x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int2x3choicecg_param_typeschema_Int2X3_TcgInt2X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int2x3choicecg_param_typeschema_Int2X3_TcgInt2X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int2x3choicecg_param_typeschema_Int2X3_TcgInt2X3_ instance.
func (me *XsdGoPkgHasElem_int2x3choicecg_param_typeschema_Int2X3_TcgInt2X3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int2x3choicecg_param_typeschema_Int2X3_TcgInt2X3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgInt1X2 TcgListOfInt

//	Since TcgInt1X2 is just a simple String type, this merely returns the current string value.
func (me TcgInt1X2) String() string { return TcgListOfInt(me).String() }

//	This convenience method just performs a simple type conversion to TcgInt1X2's alias type TcgListOfInt.
func (me TcgInt1X2) ToTcgListOfInt() TcgListOfInt { return TcgListOfInt(me) }

//	Since TcgInt1X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt1X2) Set(s string) { (*TcgListOfInt)(me).Set(s) }

type XsdGoPkgHasElem_int1x2choicecg_param_typeschema_Int1X2_TcgInt1X2_ struct {
	Int1X2 TcgInt1X2 `xml:"http://www.collada.org/2005/11/COLLADASchema int1x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int1x2choicecg_param_typeschema_Int1X2_TcgInt1X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int1x2choicecg_param_typeschema_Int1X2_TcgInt1X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int1x2choicecg_param_typeschema_Int1X2_TcgInt1X2_ instance.
func (me *XsdGoPkgHasElem_int1x2choicecg_param_typeschema_Int1X2_TcgInt1X2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int1x2choicecg_param_typeschema_Int1X2_TcgInt1X2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgBool4X2 TcgListOfBool

//	This convenience method just performs a simple type conversion to TcgBool4X2's alias type TcgListOfBool.
func (me TcgBool4X2) ToTcgListOfBool() TcgListOfBool { return TcgListOfBool(me) }

//	Since TcgBool4X2 is just a simple String type, this merely returns the current string value.
func (me TcgBool4X2) String() string { return TcgListOfBool(me).String() }

//	Since TcgBool4X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool4X2) Set(s string) { (*TcgListOfBool)(me).Set(s) }

type XsdGoPkgHasElem_bool4x2choicecg_param_typeschema_Bool4X2_TcgBool4X2_ struct {
	Bool4X2 TcgBool4X2 `xml:"http://www.collada.org/2005/11/COLLADASchema bool4x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool4x2choicecg_param_typeschema_Bool4X2_TcgBool4X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool4x2choicecg_param_typeschema_Bool4X2_TcgBool4X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool4x2choicecg_param_typeschema_Bool4X2_TcgBool4X2_ instance.
func (me *XsdGoPkgHasElem_bool4x2choicecg_param_typeschema_Bool4X2_TcgBool4X2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool4x2choicecg_param_typeschema_Bool4X2_TcgBool4X2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgHalf2 TcgListOfHalf

//	Since TcgHalf2 is just a simple String type, this merely returns the current string value.
func (me TcgHalf2) String() string { return TcgListOfHalf(me).String() }

//	Since TcgHalf2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf2) Set(s string) { (*TcgListOfHalf)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgHalf2's alias type TcgListOfHalf.
func (me TcgHalf2) ToTcgListOfHalf() TcgListOfHalf { return TcgListOfHalf(me) }

type XsdGoPkgHasElem_half2choicecg_param_typeschema_Half2_TcgHalf2_ struct {
	Half2 TcgHalf2 `xml:"http://www.collada.org/2005/11/COLLADASchema half2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_half2choicecg_param_typeschema_Half2_TcgHalf2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half2choicecg_param_typeschema_Half2_TcgHalf2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half2choicecg_param_typeschema_Half2_TcgHalf2_ instance.
func (me *XsdGoPkgHasElem_half2choicecg_param_typeschema_Half2_TcgHalf2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_half2choicecg_param_typeschema_Half2_TcgHalf2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFloat2 TcgListOfFloat

//	Since TcgFloat2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat2) Set(s string) { (*TcgListOfFloat)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgFloat2's alias type TcgListOfFloat.
func (me TcgFloat2) ToTcgListOfFloat() TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat2 is just a simple String type, this merely returns the current string value.
func (me TcgFloat2) String() string { return TcgListOfFloat(me).String() }

type XsdGoPkgHasElem_float2choicecg_param_typeschema_Float2_TcgFloat2_ struct {
	Float2 TcgFloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema float2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float2choicecg_param_typeschema_Float2_TcgFloat2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float2choicecg_param_typeschema_Float2_TcgFloat2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float2choicecg_param_typeschema_Float2_TcgFloat2_ instance.
func (me *XsdGoPkgHasElem_float2choicecg_param_typeschema_Float2_TcgFloat2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float2choicecg_param_typeschema_Float2_TcgFloat2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgHalf4X1 TcgListOfHalf

//	Since TcgHalf4X1 is just a simple String type, this merely returns the current string value.
func (me TcgHalf4X1) String() string { return TcgListOfHalf(me).String() }

//	This convenience method just performs a simple type conversion to TcgHalf4X1's alias type TcgListOfHalf.
func (me TcgHalf4X1) ToTcgListOfHalf() TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf4X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf4X1) Set(s string) { (*TcgListOfHalf)(me).Set(s) }

type XsdGoPkgHasElem_half4x1choicecg_param_typeschema_Half4X1_TcgHalf4X1_ struct {
	Half4X1 TcgHalf4X1 `xml:"http://www.collada.org/2005/11/COLLADASchema half4x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_half4x1choicecg_param_typeschema_Half4X1_TcgHalf4X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half4x1choicecg_param_typeschema_Half4X1_TcgHalf4X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half4x1choicecg_param_typeschema_Half4X1_TcgHalf4X1_ instance.
func (me *XsdGoPkgHasElem_half4x1choicecg_param_typeschema_Half4X1_TcgHalf4X1_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_half4x1choicecg_param_typeschema_Half4X1_TcgHalf4X1_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFixed4X1 TcgListOfFixed

//	This convenience method just performs a simple type conversion to TcgFixed4X1's alias type TcgListOfFixed.
func (me TcgFixed4X1) ToTcgListOfFixed() TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed4X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed4X1) Set(s string) { (*TcgListOfFixed)(me).Set(s) }

//	Since TcgFixed4X1 is just a simple String type, this merely returns the current string value.
func (me TcgFixed4X1) String() string { return TcgListOfFixed(me).String() }

type XsdGoPkgHasElem_fixed4x1choicecg_param_typeschema_Fixed4X1_TcgFixed4X1_ struct {
	Fixed4X1 TcgFixed4X1 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed4x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fixed4x1choicecg_param_typeschema_Fixed4X1_TcgFixed4X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed4x1choicecg_param_typeschema_Fixed4X1_TcgFixed4X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed4x1choicecg_param_typeschema_Fixed4X1_TcgFixed4X1_ instance.
func (me *XsdGoPkgHasElem_fixed4x1choicecg_param_typeschema_Fixed4X1_TcgFixed4X1_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fixed4x1choicecg_param_typeschema_Fixed4X1_TcgFixed4X1_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgBool4X1 TcgListOfBool

//	This convenience method just performs a simple type conversion to TcgBool4X1's alias type TcgListOfBool.
func (me TcgBool4X1) ToTcgListOfBool() TcgListOfBool { return TcgListOfBool(me) }

//	Since TcgBool4X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool4X1) Set(s string) { (*TcgListOfBool)(me).Set(s) }

//	Since TcgBool4X1 is just a simple String type, this merely returns the current string value.
func (me TcgBool4X1) String() string { return TcgListOfBool(me).String() }

type XsdGoPkgHasElem_bool4x1choicecg_param_typeschema_Bool4X1_TcgBool4X1_ struct {
	Bool4X1 TcgBool4X1 `xml:"http://www.collada.org/2005/11/COLLADASchema bool4x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool4x1choicecg_param_typeschema_Bool4X1_TcgBool4X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool4x1choicecg_param_typeschema_Bool4X1_TcgBool4X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool4x1choicecg_param_typeschema_Bool4X1_TcgBool4X1_ instance.
func (me *XsdGoPkgHasElem_bool4x1choicecg_param_typeschema_Bool4X1_TcgBool4X1_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool4x1choicecg_param_typeschema_Bool4X1_TcgBool4X1_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgHalf4X4 TcgListOfHalf

//	This convenience method just performs a simple type conversion to TcgHalf4X4's alias type TcgListOfHalf.
func (me TcgHalf4X4) ToTcgListOfHalf() TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf4X4 is just a simple String type, this merely returns the current string value.
func (me TcgHalf4X4) String() string { return TcgListOfHalf(me).String() }

//	Since TcgHalf4X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf4X4) Set(s string) { (*TcgListOfHalf)(me).Set(s) }

type XsdGoPkgHasElem_half4x4choicecg_param_typeschema_Half4X4_TcgHalf4X4_ struct {
	Half4X4 TcgHalf4X4 `xml:"http://www.collada.org/2005/11/COLLADASchema half4x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_half4x4choicecg_param_typeschema_Half4X4_TcgHalf4X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half4x4choicecg_param_typeschema_Half4X4_TcgHalf4X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half4x4choicecg_param_typeschema_Half4X4_TcgHalf4X4_ instance.
func (me *XsdGoPkgHasElem_half4x4choicecg_param_typeschema_Half4X4_TcgHalf4X4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_half4x4choicecg_param_typeschema_Half4X4_TcgHalf4X4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgInt4X3 TcgListOfInt

//	This convenience method just performs a simple type conversion to TcgInt4X3's alias type TcgListOfInt.
func (me TcgInt4X3) ToTcgListOfInt() TcgListOfInt { return TcgListOfInt(me) }

//	Since TcgInt4X3 is just a simple String type, this merely returns the current string value.
func (me TcgInt4X3) String() string { return TcgListOfInt(me).String() }

//	Since TcgInt4X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt4X3) Set(s string) { (*TcgListOfInt)(me).Set(s) }

type XsdGoPkgHasElem_int4x3choicecg_param_typeschema_Int4X3_TcgInt4X3_ struct {
	Int4X3 TcgInt4X3 `xml:"http://www.collada.org/2005/11/COLLADASchema int4x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int4x3choicecg_param_typeschema_Int4X3_TcgInt4X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int4x3choicecg_param_typeschema_Int4X3_TcgInt4X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int4x3choicecg_param_typeschema_Int4X3_TcgInt4X3_ instance.
func (me *XsdGoPkgHasElem_int4x3choicecg_param_typeschema_Int4X3_TcgInt4X3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int4x3choicecg_param_typeschema_Int4X3_TcgInt4X3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFloat3X2 TcgListOfFloat

//	Since TcgFloat3X2 is just a simple String type, this merely returns the current string value.
func (me TcgFloat3X2) String() string { return TcgListOfFloat(me).String() }

//	This convenience method just performs a simple type conversion to TcgFloat3X2's alias type TcgListOfFloat.
func (me TcgFloat3X2) ToTcgListOfFloat() TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat3X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat3X2) Set(s string) { (*TcgListOfFloat)(me).Set(s) }

type XsdGoPkgHasElem_float3x2choicecg_param_typeschema_Float3X2_TcgFloat3X2_ struct {
	Float3X2 TcgFloat3X2 `xml:"http://www.collada.org/2005/11/COLLADASchema float3x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float3x2choicecg_param_typeschema_Float3X2_TcgFloat3X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float3x2choicecg_param_typeschema_Float3X2_TcgFloat3X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float3x2choicecg_param_typeschema_Float3X2_TcgFloat3X2_ instance.
func (me *XsdGoPkgHasElem_float3x2choicecg_param_typeschema_Float3X2_TcgFloat3X2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float3x2choicecg_param_typeschema_Float3X2_TcgFloat3X2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgInt1X4 TcgListOfInt

//	Since TcgInt1X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt1X4) Set(s string) { (*TcgListOfInt)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgInt1X4's alias type TcgListOfInt.
func (me TcgInt1X4) ToTcgListOfInt() TcgListOfInt { return TcgListOfInt(me) }

//	Since TcgInt1X4 is just a simple String type, this merely returns the current string value.
func (me TcgInt1X4) String() string { return TcgListOfInt(me).String() }

type XsdGoPkgHasElem_int1x4choicecg_param_typeschema_Int1X4_TcgInt1X4_ struct {
	Int1X4 TcgInt1X4 `xml:"http://www.collada.org/2005/11/COLLADASchema int1x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int1x4choicecg_param_typeschema_Int1X4_TcgInt1X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int1x4choicecg_param_typeschema_Int1X4_TcgInt1X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int1x4choicecg_param_typeschema_Int1X4_TcgInt1X4_ instance.
func (me *XsdGoPkgHasElem_int1x4choicecg_param_typeschema_Int1X4_TcgInt1X4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int1x4choicecg_param_typeschema_Int1X4_TcgInt1X4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgInt3X4 TcgListOfInt

//	Since TcgInt3X4 is just a simple String type, this merely returns the current string value.
func (me TcgInt3X4) String() string { return TcgListOfInt(me).String() }

//	Since TcgInt3X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt3X4) Set(s string) { (*TcgListOfInt)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgInt3X4's alias type TcgListOfInt.
func (me TcgInt3X4) ToTcgListOfInt() TcgListOfInt { return TcgListOfInt(me) }

type XsdGoPkgHasElem_int3x4choicecg_param_typeschema_Int3X4_TcgInt3X4_ struct {
	Int3X4 TcgInt3X4 `xml:"http://www.collada.org/2005/11/COLLADASchema int3x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int3x4choicecg_param_typeschema_Int3X4_TcgInt3X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int3x4choicecg_param_typeschema_Int3X4_TcgInt3X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int3x4choicecg_param_typeschema_Int3X4_TcgInt3X4_ instance.
func (me *XsdGoPkgHasElem_int3x4choicecg_param_typeschema_Int3X4_TcgInt3X4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int3x4choicecg_param_typeschema_Int3X4_TcgInt3X4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgHalf4X3 TcgListOfHalf

//	Since TcgHalf4X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf4X3) Set(s string) { (*TcgListOfHalf)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgHalf4X3's alias type TcgListOfHalf.
func (me TcgHalf4X3) ToTcgListOfHalf() TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf4X3 is just a simple String type, this merely returns the current string value.
func (me TcgHalf4X3) String() string { return TcgListOfHalf(me).String() }

type XsdGoPkgHasElem_half4x3choicecg_param_typeschema_Half4X3_TcgHalf4X3_ struct {
	Half4X3 TcgHalf4X3 `xml:"http://www.collada.org/2005/11/COLLADASchema half4x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_half4x3choicecg_param_typeschema_Half4X3_TcgHalf4X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half4x3choicecg_param_typeschema_Half4X3_TcgHalf4X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half4x3choicecg_param_typeschema_Half4X3_TcgHalf4X3_ instance.
func (me *XsdGoPkgHasElem_half4x3choicecg_param_typeschema_Half4X3_TcgHalf4X3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_half4x3choicecg_param_typeschema_Half4X3_TcgHalf4X3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_intchoicecg_param_typeschema_Int_TcgInt_ struct {
	Int *TcgInt `xml:"http://www.collada.org/2005/11/COLLADASchema int"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_intchoicecg_param_typeschema_Int_TcgInt_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_intchoicecg_param_typeschema_Int_TcgInt_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_intchoicecg_param_typeschema_Int_TcgInt_ instance.
func (me *XsdGoPkgHasElem_intchoicecg_param_typeschema_Int_TcgInt_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_intchoicecg_param_typeschema_Int_TcgInt_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgHalf2X1 TcgListOfHalf

//	Since TcgHalf2X1 is just a simple String type, this merely returns the current string value.
func (me TcgHalf2X1) String() string { return TcgListOfHalf(me).String() }

//	Since TcgHalf2X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf2X1) Set(s string) { (*TcgListOfHalf)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgHalf2X1's alias type TcgListOfHalf.
func (me TcgHalf2X1) ToTcgListOfHalf() TcgListOfHalf { return TcgListOfHalf(me) }

type XsdGoPkgHasElem_half2x1choicecg_param_typeschema_Half2X1_TcgHalf2X1_ struct {
	Half2X1 TcgHalf2X1 `xml:"http://www.collada.org/2005/11/COLLADASchema half2x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_half2x1choicecg_param_typeschema_Half2X1_TcgHalf2X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half2x1choicecg_param_typeschema_Half2X1_TcgHalf2X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half2x1choicecg_param_typeschema_Half2X1_TcgHalf2X1_ instance.
func (me *XsdGoPkgHasElem_half2x1choicecg_param_typeschema_Half2X1_TcgHalf2X1_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_half2x1choicecg_param_typeschema_Half2X1_TcgHalf2X1_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFloat2X4 TcgListOfFloat

//	Since TcgFloat2X4 is just a simple String type, this merely returns the current string value.
func (me TcgFloat2X4) String() string { return TcgListOfFloat(me).String() }

//	Since TcgFloat2X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat2X4) Set(s string) { (*TcgListOfFloat)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgFloat2X4's alias type TcgListOfFloat.
func (me TcgFloat2X4) ToTcgListOfFloat() TcgListOfFloat { return TcgListOfFloat(me) }

type XsdGoPkgHasElem_float2x4choicecg_param_typeschema_Float2X4_TcgFloat2X4_ struct {
	Float2X4 TcgFloat2X4 `xml:"http://www.collada.org/2005/11/COLLADASchema float2x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float2x4choicecg_param_typeschema_Float2X4_TcgFloat2X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float2x4choicecg_param_typeschema_Float2X4_TcgFloat2X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float2x4choicecg_param_typeschema_Float2X4_TcgFloat2X4_ instance.
func (me *XsdGoPkgHasElem_float2x4choicecg_param_typeschema_Float2X4_TcgFloat2X4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float2x4choicecg_param_typeschema_Float2X4_TcgFloat2X4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFixed4X4 TcgListOfFixed

//	This convenience method just performs a simple type conversion to TcgFixed4X4's alias type TcgListOfFixed.
func (me TcgFixed4X4) ToTcgListOfFixed() TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed4X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed4X4) Set(s string) { (*TcgListOfFixed)(me).Set(s) }

//	Since TcgFixed4X4 is just a simple String type, this merely returns the current string value.
func (me TcgFixed4X4) String() string { return TcgListOfFixed(me).String() }

type XsdGoPkgHasElem_fixed4x4choicecg_param_typeschema_Fixed4X4_TcgFixed4X4_ struct {
	Fixed4X4 TcgFixed4X4 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed4x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fixed4x4choicecg_param_typeschema_Fixed4X4_TcgFixed4X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed4x4choicecg_param_typeschema_Fixed4X4_TcgFixed4X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed4x4choicecg_param_typeschema_Fixed4X4_TcgFixed4X4_ instance.
func (me *XsdGoPkgHasElem_fixed4x4choicecg_param_typeschema_Fixed4X4_TcgFixed4X4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fixed4x4choicecg_param_typeschema_Fixed4X4_TcgFixed4X4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFixed2X3 TcgListOfFixed

//	Since TcgFixed2X3 is just a simple String type, this merely returns the current string value.
func (me TcgFixed2X3) String() string { return TcgListOfFixed(me).String() }

//	This convenience method just performs a simple type conversion to TcgFixed2X3's alias type TcgListOfFixed.
func (me TcgFixed2X3) ToTcgListOfFixed() TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed2X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed2X3) Set(s string) { (*TcgListOfFixed)(me).Set(s) }

type XsdGoPkgHasElem_fixed2x3choicecg_param_typeschema_Fixed2X3_TcgFixed2X3_ struct {
	Fixed2X3 TcgFixed2X3 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed2x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fixed2x3choicecg_param_typeschema_Fixed2X3_TcgFixed2X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed2x3choicecg_param_typeschema_Fixed2X3_TcgFixed2X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed2x3choicecg_param_typeschema_Fixed2X3_TcgFixed2X3_ instance.
func (me *XsdGoPkgHasElem_fixed2x3choicecg_param_typeschema_Fixed2X3_TcgFixed2X3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fixed2x3choicecg_param_typeschema_Fixed2X3_TcgFixed2X3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgBool4X4 TcgListOfBool

//	Since TcgBool4X4 is just a simple String type, this merely returns the current string value.
func (me TcgBool4X4) String() string { return TcgListOfBool(me).String() }

//	This convenience method just performs a simple type conversion to TcgBool4X4's alias type TcgListOfBool.
func (me TcgBool4X4) ToTcgListOfBool() TcgListOfBool { return TcgListOfBool(me) }

//	Since TcgBool4X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool4X4) Set(s string) { (*TcgListOfBool)(me).Set(s) }

type XsdGoPkgHasElem_bool4x4choicecg_param_typeschema_Bool4X4_TcgBool4X4_ struct {
	Bool4X4 TcgBool4X4 `xml:"http://www.collada.org/2005/11/COLLADASchema bool4x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool4x4choicecg_param_typeschema_Bool4X4_TcgBool4X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool4x4choicecg_param_typeschema_Bool4X4_TcgBool4X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool4x4choicecg_param_typeschema_Bool4X4_TcgBool4X4_ instance.
func (me *XsdGoPkgHasElem_bool4x4choicecg_param_typeschema_Bool4X4_TcgBool4X4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool4x4choicecg_param_typeschema_Bool4X4_TcgBool4X4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgHalf1X3 TcgListOfHalf

//	Since TcgHalf1X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf1X3) Set(s string) { (*TcgListOfHalf)(me).Set(s) }

//	Since TcgHalf1X3 is just a simple String type, this merely returns the current string value.
func (me TcgHalf1X3) String() string { return TcgListOfHalf(me).String() }

//	This convenience method just performs a simple type conversion to TcgHalf1X3's alias type TcgListOfHalf.
func (me TcgHalf1X3) ToTcgListOfHalf() TcgListOfHalf { return TcgListOfHalf(me) }

type XsdGoPkgHasElem_half1x3choicecg_param_typeschema_Half1X3_TcgHalf1X3_ struct {
	Half1X3 TcgHalf1X3 `xml:"http://www.collada.org/2005/11/COLLADASchema half1x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_half1x3choicecg_param_typeschema_Half1X3_TcgHalf1X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half1x3choicecg_param_typeschema_Half1X3_TcgHalf1X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half1x3choicecg_param_typeschema_Half1X3_TcgHalf1X3_ instance.
func (me *XsdGoPkgHasElem_half1x3choicecg_param_typeschema_Half1X3_TcgHalf1X3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_half1x3choicecg_param_typeschema_Half1X3_TcgHalf1X3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgInt4X4 TcgListOfInt

//	Since TcgInt4X4 is just a simple String type, this merely returns the current string value.
func (me TcgInt4X4) String() string { return TcgListOfInt(me).String() }

//	Since TcgInt4X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt4X4) Set(s string) { (*TcgListOfInt)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgInt4X4's alias type TcgListOfInt.
func (me TcgInt4X4) ToTcgListOfInt() TcgListOfInt { return TcgListOfInt(me) }

type XsdGoPkgHasElem_int4x4choicecg_param_typeschema_Int4X4_TcgInt4X4_ struct {
	Int4X4 TcgInt4X4 `xml:"http://www.collada.org/2005/11/COLLADASchema int4x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int4x4choicecg_param_typeschema_Int4X4_TcgInt4X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int4x4choicecg_param_typeschema_Int4X4_TcgInt4X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int4x4choicecg_param_typeschema_Int4X4_TcgInt4X4_ instance.
func (me *XsdGoPkgHasElem_int4x4choicecg_param_typeschema_Int4X4_TcgInt4X4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int4x4choicecg_param_typeschema_Int4X4_TcgInt4X4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgBool4X3 TcgListOfBool

//	This convenience method just performs a simple type conversion to TcgBool4X3's alias type TcgListOfBool.
func (me TcgBool4X3) ToTcgListOfBool() TcgListOfBool { return TcgListOfBool(me) }

//	Since TcgBool4X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool4X3) Set(s string) { (*TcgListOfBool)(me).Set(s) }

//	Since TcgBool4X3 is just a simple String type, this merely returns the current string value.
func (me TcgBool4X3) String() string { return TcgListOfBool(me).String() }

type XsdGoPkgHasElem_bool4x3choicecg_param_typeschema_Bool4X3_TcgBool4X3_ struct {
	Bool4X3 TcgBool4X3 `xml:"http://www.collada.org/2005/11/COLLADASchema bool4x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool4x3choicecg_param_typeschema_Bool4X3_TcgBool4X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool4x3choicecg_param_typeschema_Bool4X3_TcgBool4X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool4x3choicecg_param_typeschema_Bool4X3_TcgBool4X3_ instance.
func (me *XsdGoPkgHasElem_bool4x3choicecg_param_typeschema_Bool4X3_TcgBool4X3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool4x3choicecg_param_typeschema_Bool4X3_TcgBool4X3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgHalf2X4 TcgListOfHalf

//	Since TcgHalf2X4 is just a simple String type, this merely returns the current string value.
func (me TcgHalf2X4) String() string { return TcgListOfHalf(me).String() }

//	Since TcgHalf2X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf2X4) Set(s string) { (*TcgListOfHalf)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgHalf2X4's alias type TcgListOfHalf.
func (me TcgHalf2X4) ToTcgListOfHalf() TcgListOfHalf { return TcgListOfHalf(me) }

type XsdGoPkgHasElem_half2x4choicecg_param_typeschema_Half2X4_TcgHalf2X4_ struct {
	Half2X4 TcgHalf2X4 `xml:"http://www.collada.org/2005/11/COLLADASchema half2x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_half2x4choicecg_param_typeschema_Half2X4_TcgHalf2X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half2x4choicecg_param_typeschema_Half2X4_TcgHalf2X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half2x4choicecg_param_typeschema_Half2X4_TcgHalf2X4_ instance.
func (me *XsdGoPkgHasElem_half2x4choicecg_param_typeschema_Half2X4_TcgHalf2X4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_half2x4choicecg_param_typeschema_Half2X4_TcgHalf2X4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgHalf1X4 TcgListOfHalf

//	Since TcgHalf1X4 is just a simple String type, this merely returns the current string value.
func (me TcgHalf1X4) String() string { return TcgListOfHalf(me).String() }

//	This convenience method just performs a simple type conversion to TcgHalf1X4's alias type TcgListOfHalf.
func (me TcgHalf1X4) ToTcgListOfHalf() TcgListOfHalf { return TcgListOfHalf(me) }

//	Since TcgHalf1X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf1X4) Set(s string) { (*TcgListOfHalf)(me).Set(s) }

type XsdGoPkgHasElem_half1x4choicecg_param_typeschema_Half1X4_TcgHalf1X4_ struct {
	Half1X4 TcgHalf1X4 `xml:"http://www.collada.org/2005/11/COLLADASchema half1x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_half1x4choicecg_param_typeschema_Half1X4_TcgHalf1X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half1x4choicecg_param_typeschema_Half1X4_TcgHalf1X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half1x4choicecg_param_typeschema_Half1X4_TcgHalf1X4_ instance.
func (me *XsdGoPkgHasElem_half1x4choicecg_param_typeschema_Half1X4_TcgHalf1X4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_half1x4choicecg_param_typeschema_Half1X4_TcgHalf1X4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgInt3X2 TcgListOfInt

//	This convenience method just performs a simple type conversion to TcgInt3X2's alias type TcgListOfInt.
func (me TcgInt3X2) ToTcgListOfInt() TcgListOfInt { return TcgListOfInt(me) }

//	Since TcgInt3X2 is just a simple String type, this merely returns the current string value.
func (me TcgInt3X2) String() string { return TcgListOfInt(me).String() }

//	Since TcgInt3X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt3X2) Set(s string) { (*TcgListOfInt)(me).Set(s) }

type XsdGoPkgHasElem_int3x2choicecg_param_typeschema_Int3X2_TcgInt3X2_ struct {
	Int3X2 TcgInt3X2 `xml:"http://www.collada.org/2005/11/COLLADASchema int3x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int3x2choicecg_param_typeschema_Int3X2_TcgInt3X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int3x2choicecg_param_typeschema_Int3X2_TcgInt3X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int3x2choicecg_param_typeschema_Int3X2_TcgInt3X2_ instance.
func (me *XsdGoPkgHasElem_int3x2choicecg_param_typeschema_Int3X2_TcgInt3X2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int3x2choicecg_param_typeschema_Int3X2_TcgInt3X2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_floatchoicecg_param_typeschema_Float_TcgFloat_ struct {
	Float *TcgFloat `xml:"http://www.collada.org/2005/11/COLLADASchema float"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_floatchoicecg_param_typeschema_Float_TcgFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_floatchoicecg_param_typeschema_Float_TcgFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_floatchoicecg_param_typeschema_Float_TcgFloat_ instance.
func (me *XsdGoPkgHasElem_floatchoicecg_param_typeschema_Float_TcgFloat_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_floatchoicecg_param_typeschema_Float_TcgFloat_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgInt1X1 TcgListOfInt

//	This convenience method just performs a simple type conversion to TcgInt1X1's alias type TcgListOfInt.
func (me TcgInt1X1) ToTcgListOfInt() TcgListOfInt { return TcgListOfInt(me) }

//	Since TcgInt1X1 is just a simple String type, this merely returns the current string value.
func (me TcgInt1X1) String() string { return TcgListOfInt(me).String() }

//	Since TcgInt1X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt1X1) Set(s string) { (*TcgListOfInt)(me).Set(s) }

type XsdGoPkgHasElem_int1x1choicecg_param_typeschema_Int1X1_TcgInt1X1_ struct {
	Int1X1 TcgInt1X1 `xml:"http://www.collada.org/2005/11/COLLADASchema int1x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int1x1choicecg_param_typeschema_Int1X1_TcgInt1X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int1x1choicecg_param_typeschema_Int1X1_TcgInt1X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int1x1choicecg_param_typeschema_Int1X1_TcgInt1X1_ instance.
func (me *XsdGoPkgHasElem_int1x1choicecg_param_typeschema_Int1X1_TcgInt1X1_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int1x1choicecg_param_typeschema_Int1X1_TcgInt1X1_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFixed4X3 TcgListOfFixed

//	Since TcgFixed4X3 is just a simple String type, this merely returns the current string value.
func (me TcgFixed4X3) String() string { return TcgListOfFixed(me).String() }

//	This convenience method just performs a simple type conversion to TcgFixed4X3's alias type TcgListOfFixed.
func (me TcgFixed4X3) ToTcgListOfFixed() TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed4X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed4X3) Set(s string) { (*TcgListOfFixed)(me).Set(s) }

type XsdGoPkgHasElem_fixed4x3choicecg_param_typeschema_Fixed4X3_TcgFixed4X3_ struct {
	Fixed4X3 TcgFixed4X3 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed4x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fixed4x3choicecg_param_typeschema_Fixed4X3_TcgFixed4X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed4x3choicecg_param_typeschema_Fixed4X3_TcgFixed4X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed4x3choicecg_param_typeschema_Fixed4X3_TcgFixed4X3_ instance.
func (me *XsdGoPkgHasElem_fixed4x3choicecg_param_typeschema_Fixed4X3_TcgFixed4X3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fixed4x3choicecg_param_typeschema_Fixed4X3_TcgFixed4X3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgHalf4 TcgListOfHalf

//	Since TcgHalf4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgHalf4) Set(s string) { (*TcgListOfHalf)(me).Set(s) }

//	Since TcgHalf4 is just a simple String type, this merely returns the current string value.
func (me TcgHalf4) String() string { return TcgListOfHalf(me).String() }

//	This convenience method just performs a simple type conversion to TcgHalf4's alias type TcgListOfHalf.
func (me TcgHalf4) ToTcgListOfHalf() TcgListOfHalf { return TcgListOfHalf(me) }

type XsdGoPkgHasElem_half4choicecg_param_typeschema_Half4_TcgHalf4_ struct {
	Half4 TcgHalf4 `xml:"http://www.collada.org/2005/11/COLLADASchema half4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_half4choicecg_param_typeschema_Half4_TcgHalf4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half4choicecg_param_typeschema_Half4_TcgHalf4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half4choicecg_param_typeschema_Half4_TcgHalf4_ instance.
func (me *XsdGoPkgHasElem_half4choicecg_param_typeschema_Half4_TcgHalf4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_half4choicecg_param_typeschema_Half4_TcgHalf4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgBool1X1 TcgListOfBool

//	Since TcgBool1X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool1X1) Set(s string) { (*TcgListOfBool)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgBool1X1's alias type TcgListOfBool.
func (me TcgBool1X1) ToTcgListOfBool() TcgListOfBool { return TcgListOfBool(me) }

//	Since TcgBool1X1 is just a simple String type, this merely returns the current string value.
func (me TcgBool1X1) String() string { return TcgListOfBool(me).String() }

type XsdGoPkgHasElem_bool1x1choicecg_param_typeschema_Bool1X1_TcgBool1X1_ struct {
	Bool1X1 TcgBool1X1 `xml:"http://www.collada.org/2005/11/COLLADASchema bool1x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool1x1choicecg_param_typeschema_Bool1X1_TcgBool1X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool1x1choicecg_param_typeschema_Bool1X1_TcgBool1X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool1x1choicecg_param_typeschema_Bool1X1_TcgBool1X1_ instance.
func (me *XsdGoPkgHasElem_bool1x1choicecg_param_typeschema_Bool1X1_TcgBool1X1_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool1x1choicecg_param_typeschema_Bool1X1_TcgBool1X1_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgSamplerDEPTH struct {
	TfxSamplerDEPTHCommon
}

//	If the WalkHandlers.TcgSamplerDEPTH function is not nil (ie. was set by outside code), calls it with this TcgSamplerDEPTH instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TcgSamplerDEPTH instance.
func (me *TcgSamplerDEPTH) Walk() (err error) {
	if fn := WalkHandlers.TcgSamplerDEPTH; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TfxSamplerDEPTHCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_samplerDEPTHchoicecg_param_typeschema_SamplerDEPTH_TcgSamplerDEPTH_ struct {
	SamplerDEPTH *TcgSamplerDEPTH `xml:"http://www.collada.org/2005/11/COLLADASchema samplerDEPTH"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_samplerDEPTHchoicecg_param_typeschema_SamplerDEPTH_TcgSamplerDEPTH_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_samplerDEPTHchoicecg_param_typeschema_SamplerDEPTH_TcgSamplerDEPTH_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_samplerDEPTHchoicecg_param_typeschema_SamplerDEPTH_TcgSamplerDEPTH_ instance.
func (me *XsdGoPkgHasElem_samplerDEPTHchoicecg_param_typeschema_SamplerDEPTH_TcgSamplerDEPTH_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_samplerDEPTHchoicecg_param_typeschema_SamplerDEPTH_TcgSamplerDEPTH_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SamplerDEPTH.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFloat3X4 TcgListOfFloat

//	This convenience method just performs a simple type conversion to TcgFloat3X4's alias type TcgListOfFloat.
func (me TcgFloat3X4) ToTcgListOfFloat() TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat3X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat3X4) Set(s string) { (*TcgListOfFloat)(me).Set(s) }

//	Since TcgFloat3X4 is just a simple String type, this merely returns the current string value.
func (me TcgFloat3X4) String() string { return TcgListOfFloat(me).String() }

type XsdGoPkgHasElem_float3x4choicecg_param_typeschema_Float3X4_TcgFloat3X4_ struct {
	Float3X4 TcgFloat3X4 `xml:"http://www.collada.org/2005/11/COLLADASchema float3x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float3x4choicecg_param_typeschema_Float3X4_TcgFloat3X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float3x4choicecg_param_typeschema_Float3X4_TcgFloat3X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float3x4choicecg_param_typeschema_Float3X4_TcgFloat3X4_ instance.
func (me *XsdGoPkgHasElem_float3x4choicecg_param_typeschema_Float3X4_TcgFloat3X4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float3x4choicecg_param_typeschema_Float3X4_TcgFloat3X4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFloat1X4 TcgListOfFloat

//	Since TcgFloat1X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat1X4) Set(s string) { (*TcgListOfFloat)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgFloat1X4's alias type TcgListOfFloat.
func (me TcgFloat1X4) ToTcgListOfFloat() TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat1X4 is just a simple String type, this merely returns the current string value.
func (me TcgFloat1X4) String() string { return TcgListOfFloat(me).String() }

type XsdGoPkgHasElem_float1x4choicecg_param_typeschema_Float1X4_TcgFloat1X4_ struct {
	Float1X4 TcgFloat1X4 `xml:"http://www.collada.org/2005/11/COLLADASchema float1x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float1x4choicecg_param_typeschema_Float1X4_TcgFloat1X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float1x4choicecg_param_typeschema_Float1X4_TcgFloat1X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float1x4choicecg_param_typeschema_Float1X4_TcgFloat1X4_ instance.
func (me *XsdGoPkgHasElem_float1x4choicecg_param_typeschema_Float1X4_TcgFloat1X4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float1x4choicecg_param_typeschema_Float1X4_TcgFloat1X4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgBool3X2 TcgListOfBool

//	This convenience method just performs a simple type conversion to TcgBool3X2's alias type TcgListOfBool.
func (me TcgBool3X2) ToTcgListOfBool() TcgListOfBool { return TcgListOfBool(me) }

//	Since TcgBool3X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool3X2) Set(s string) { (*TcgListOfBool)(me).Set(s) }

//	Since TcgBool3X2 is just a simple String type, this merely returns the current string value.
func (me TcgBool3X2) String() string { return TcgListOfBool(me).String() }

type XsdGoPkgHasElem_bool3x2choicecg_param_typeschema_Bool3X2_TcgBool3X2_ struct {
	Bool3X2 TcgBool3X2 `xml:"http://www.collada.org/2005/11/COLLADASchema bool3x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool3x2choicecg_param_typeschema_Bool3X2_TcgBool3X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool3x2choicecg_param_typeschema_Bool3X2_TcgBool3X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool3x2choicecg_param_typeschema_Bool3X2_TcgBool3X2_ instance.
func (me *XsdGoPkgHasElem_bool3x2choicecg_param_typeschema_Bool3X2_TcgBool3X2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool3x2choicecg_param_typeschema_Bool3X2_TcgBool3X2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_fixedchoicecg_param_typeschema_Fixed_TcgFixed_ struct {
	Fixed *TcgFixed `xml:"http://www.collada.org/2005/11/COLLADASchema fixed"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fixedchoicecg_param_typeschema_Fixed_TcgFixed_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixedchoicecg_param_typeschema_Fixed_TcgFixed_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixedchoicecg_param_typeschema_Fixed_TcgFixed_ instance.
func (me *XsdGoPkgHasElem_fixedchoicecg_param_typeschema_Fixed_TcgFixed_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fixedchoicecg_param_typeschema_Fixed_TcgFixed_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgInt1 xsdt.Int

//	Returns a string representation of this TcgInt1's current non-string scalar value.
func (me TcgInt1) String() string { return xsdt.Int(me).String() }

//	This convenience method just performs a simple type conversion to TcgInt1's alias type xsdt.Int.
func (me TcgInt1) ToXsdtInt() xsdt.Int { return xsdt.Int(me) }

//	Since TcgInt1 is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TcgInt1) Set(s string) { (*xsdt.Int)(me).Set(s) }

type XsdGoPkgHasElem_int1choicecg_param_typeschema_Int1_TcgInt1_ struct {
	Int1 *TcgInt1 `xml:"http://www.collada.org/2005/11/COLLADASchema int1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int1choicecg_param_typeschema_Int1_TcgInt1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int1choicecg_param_typeschema_Int1_TcgInt1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int1choicecg_param_typeschema_Int1_TcgInt1_ instance.
func (me *XsdGoPkgHasElem_int1choicecg_param_typeschema_Int1_TcgInt1_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int1choicecg_param_typeschema_Int1_TcgInt1_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgBool1X4 TcgListOfBool

//	Since TcgBool1X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool1X4) Set(s string) { (*TcgListOfBool)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgBool1X4's alias type TcgListOfBool.
func (me TcgBool1X4) ToTcgListOfBool() TcgListOfBool { return TcgListOfBool(me) }

//	Since TcgBool1X4 is just a simple String type, this merely returns the current string value.
func (me TcgBool1X4) String() string { return TcgListOfBool(me).String() }

type XsdGoPkgHasElem_bool1x4choicecg_param_typeschema_Bool1X4_TcgBool1X4_ struct {
	Bool1X4 TcgBool1X4 `xml:"http://www.collada.org/2005/11/COLLADASchema bool1x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool1x4choicecg_param_typeschema_Bool1X4_TcgBool1X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool1x4choicecg_param_typeschema_Bool1X4_TcgBool1X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool1x4choicecg_param_typeschema_Bool1X4_TcgBool1X4_ instance.
func (me *XsdGoPkgHasElem_bool1x4choicecg_param_typeschema_Bool1X4_TcgBool1X4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool1x4choicecg_param_typeschema_Bool1X4_TcgBool1X4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgBool3X4 TcgListOfBool

//	Since TcgBool3X4 is just a simple String type, this merely returns the current string value.
func (me TcgBool3X4) String() string { return TcgListOfBool(me).String() }

//	Since TcgBool3X4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool3X4) Set(s string) { (*TcgListOfBool)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgBool3X4's alias type TcgListOfBool.
func (me TcgBool3X4) ToTcgListOfBool() TcgListOfBool { return TcgListOfBool(me) }

type XsdGoPkgHasElem_bool3x4choicecg_param_typeschema_Bool3X4_TcgBool3X4_ struct {
	Bool3X4 TcgBool3X4 `xml:"http://www.collada.org/2005/11/COLLADASchema bool3x4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool3x4choicecg_param_typeschema_Bool3X4_TcgBool3X4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool3x4choicecg_param_typeschema_Bool3X4_TcgBool3X4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool3x4choicecg_param_typeschema_Bool3X4_TcgBool3X4_ instance.
func (me *XsdGoPkgHasElem_bool3x4choicecg_param_typeschema_Bool3X4_TcgBool3X4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool3x4choicecg_param_typeschema_Bool3X4_TcgBool3X4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgInt3X3 TcgListOfInt

//	Since TcgInt3X3 is just a simple String type, this merely returns the current string value.
func (me TcgInt3X3) String() string { return TcgListOfInt(me).String() }

//	Since TcgInt3X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt3X3) Set(s string) { (*TcgListOfInt)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgInt3X3's alias type TcgListOfInt.
func (me TcgInt3X3) ToTcgListOfInt() TcgListOfInt { return TcgListOfInt(me) }

type XsdGoPkgHasElem_int3x3choicecg_param_typeschema_Int3X3_TcgInt3X3_ struct {
	Int3X3 TcgInt3X3 `xml:"http://www.collada.org/2005/11/COLLADASchema int3x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int3x3choicecg_param_typeschema_Int3X3_TcgInt3X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int3x3choicecg_param_typeschema_Int3X3_TcgInt3X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int3x3choicecg_param_typeschema_Int3X3_TcgInt3X3_ instance.
func (me *XsdGoPkgHasElem_int3x3choicecg_param_typeschema_Int3X3_TcgInt3X3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int3x3choicecg_param_typeschema_Int3X3_TcgInt3X3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFixed2X2 TcgListOfFixed

//	Since TcgFixed2X2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed2X2) Set(s string) { (*TcgListOfFixed)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgFixed2X2's alias type TcgListOfFixed.
func (me TcgFixed2X2) ToTcgListOfFixed() TcgListOfFixed { return TcgListOfFixed(me) }

//	Since TcgFixed2X2 is just a simple String type, this merely returns the current string value.
func (me TcgFixed2X2) String() string { return TcgListOfFixed(me).String() }

type XsdGoPkgHasElem_fixed2x2choicecg_param_typeschema_Fixed2X2_TcgFixed2X2_ struct {
	Fixed2X2 TcgFixed2X2 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed2x2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fixed2x2choicecg_param_typeschema_Fixed2X2_TcgFixed2X2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed2x2choicecg_param_typeschema_Fixed2X2_TcgFixed2X2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed2x2choicecg_param_typeschema_Fixed2X2_TcgFixed2X2_ instance.
func (me *XsdGoPkgHasElem_fixed2x2choicecg_param_typeschema_Fixed2X2_TcgFixed2X2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fixed2x2choicecg_param_typeschema_Fixed2X2_TcgFixed2X2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFixed1X1 TcgListOfFixed

//	Since TcgFixed1X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFixed1X1) Set(s string) { (*TcgListOfFixed)(me).Set(s) }

//	Since TcgFixed1X1 is just a simple String type, this merely returns the current string value.
func (me TcgFixed1X1) String() string { return TcgListOfFixed(me).String() }

//	This convenience method just performs a simple type conversion to TcgFixed1X1's alias type TcgListOfFixed.
func (me TcgFixed1X1) ToTcgListOfFixed() TcgListOfFixed { return TcgListOfFixed(me) }

type XsdGoPkgHasElem_fixed1x1choicecg_param_typeschema_Fixed1X1_TcgFixed1X1_ struct {
	Fixed1X1 TcgFixed1X1 `xml:"http://www.collada.org/2005/11/COLLADASchema fixed1x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_fixed1x1choicecg_param_typeschema_Fixed1X1_TcgFixed1X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_fixed1x1choicecg_param_typeschema_Fixed1X1_TcgFixed1X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_fixed1x1choicecg_param_typeschema_Fixed1X1_TcgFixed1X1_ instance.
func (me *XsdGoPkgHasElem_fixed1x1choicecg_param_typeschema_Fixed1X1_TcgFixed1X1_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_fixed1x1choicecg_param_typeschema_Fixed1X1_TcgFixed1X1_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgFloat2X3 TcgListOfFloat

//	Since TcgFloat2X3 is just a simple String type, this merely returns the current string value.
func (me TcgFloat2X3) String() string { return TcgListOfFloat(me).String() }

//	This convenience method just performs a simple type conversion to TcgFloat2X3's alias type TcgListOfFloat.
func (me TcgFloat2X3) ToTcgListOfFloat() TcgListOfFloat { return TcgListOfFloat(me) }

//	Since TcgFloat2X3 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgFloat2X3) Set(s string) { (*TcgListOfFloat)(me).Set(s) }

type XsdGoPkgHasElem_float2x3choicecg_param_typeschema_Float2X3_TcgFloat2X3_ struct {
	Float2X3 TcgFloat2X3 `xml:"http://www.collada.org/2005/11/COLLADASchema float2x3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_float2x3choicecg_param_typeschema_Float2X3_TcgFloat2X3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_float2x3choicecg_param_typeschema_Float2X3_TcgFloat2X3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_float2x3choicecg_param_typeschema_Float2X3_TcgFloat2X3_ instance.
func (me *XsdGoPkgHasElem_float2x3choicecg_param_typeschema_Float2X3_TcgFloat2X3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_float2x3choicecg_param_typeschema_Float2X3_TcgFloat2X3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgInt3X1 TcgListOfInt

//	Since TcgInt3X1 is just a simple String type, this merely returns the current string value.
func (me TcgInt3X1) String() string { return TcgListOfInt(me).String() }

//	Since TcgInt3X1 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgInt3X1) Set(s string) { (*TcgListOfInt)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgInt3X1's alias type TcgListOfInt.
func (me TcgInt3X1) ToTcgListOfInt() TcgListOfInt { return TcgListOfInt(me) }

type XsdGoPkgHasElem_int3x1choicecg_param_typeschema_Int3X1_TcgInt3X1_ struct {
	Int3X1 TcgInt3X1 `xml:"http://www.collada.org/2005/11/COLLADASchema int3x1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_int3x1choicecg_param_typeschema_Int3X1_TcgInt3X1_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_int3x1choicecg_param_typeschema_Int3X1_TcgInt3X1_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_int3x1choicecg_param_typeschema_Int3X1_TcgInt3X1_ instance.
func (me *XsdGoPkgHasElem_int3x1choicecg_param_typeschema_Int3X1_TcgInt3X1_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_int3x1choicecg_param_typeschema_Int3X1_TcgInt3X1_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgBool2 TcgListOfBool

//	Since TcgBool2 is just a simple String type, this merely returns the current string value.
func (me TcgBool2) String() string { return TcgListOfBool(me).String() }

//	Since TcgBool2 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool2) Set(s string) { (*TcgListOfBool)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgBool2's alias type TcgListOfBool.
func (me TcgBool2) ToTcgListOfBool() TcgListOfBool { return TcgListOfBool(me) }

type XsdGoPkgHasElem_bool2choicecg_param_typeschema_Bool2_TcgBool2_ struct {
	Bool2 TcgBool2 `xml:"http://www.collada.org/2005/11/COLLADASchema bool2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool2choicecg_param_typeschema_Bool2_TcgBool2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool2choicecg_param_typeschema_Bool2_TcgBool2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool2choicecg_param_typeschema_Bool2_TcgBool2_ instance.
func (me *XsdGoPkgHasElem_bool2choicecg_param_typeschema_Bool2_TcgBool2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool2choicecg_param_typeschema_Bool2_TcgBool2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgBool4 TcgListOfBool

//	Since TcgBool4 is just a simple String type, this merely returns the current string value.
func (me TcgBool4) String() string { return TcgListOfBool(me).String() }

//	Since TcgBool4 is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgBool4) Set(s string) { (*TcgListOfBool)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgBool4's alias type TcgListOfBool.
func (me TcgBool4) ToTcgListOfBool() TcgListOfBool { return TcgListOfBool(me) }

type XsdGoPkgHasElem_bool4choicecg_param_typeschema_Bool4_TcgBool4_ struct {
	Bool4 TcgBool4 `xml:"http://www.collada.org/2005/11/COLLADASchema bool4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_bool4choicecg_param_typeschema_Bool4_TcgBool4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_bool4choicecg_param_typeschema_Bool4_TcgBool4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_bool4choicecg_param_typeschema_Bool4_TcgBool4_ instance.
func (me *XsdGoPkgHasElem_bool4choicecg_param_typeschema_Bool4_TcgBool4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_bool4choicecg_param_typeschema_Bool4_TcgBool4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasGroup_CgParamType struct {
	XsdGoPkgHasElem_bool2choicecg_param_typeschema_Bool2_TcgBool2_

	XsdGoPkgHasElem_bool4choicecg_param_typeschema_Bool4_TcgBool4_

	XsdGoPkgHasElem_fixed3choicecg_param_typeschema_Fixed3_TcgFixed3_

	XsdGoPkgHasElem_fixed3x4choicecg_param_typeschema_Fixed3X4_TcgFixed3X4_

	XsdGoPkgHasElem_int4x2choicecg_param_typeschema_Int4X2_TcgInt4X2_

	XsdGoPkgHasElem_half3choicecg_param_typeschema_Half3_TcgHalf3_

	XsdGoPkgHasElem_bool2x4choicecg_param_typeschema_Bool2X4_TcgBool2X4_

	XsdGoPkgHasElem_float3x1choicecg_param_typeschema_Float3X1_TcgFloat3X1_

	XsdGoPkgHasElem_float1x1choicecg_param_typeschema_Float1X1_TcgFloat1X1_

	XsdGoPkgHasElem_fixed3x1choicecg_param_typeschema_Fixed3X1_TcgFixed3X1_

	XsdGoPkgHasElem_bool3choicecg_param_typeschema_Bool3_TcgBool3_

	XsdGoPkgHasElem_float3choicecg_param_typeschema_Float3_TcgFloat3_

	XsdGoPkgHasElem_int4choicecg_param_typeschema_Int4_TcgInt4_

	XsdGoPkgHasElem_bool1x2choicecg_param_typeschema_Bool1X2_TcgBool1X2_

	XsdGoPkgHasElem_int3choicecg_param_typeschema_Int3_TcgInt3_

	XsdGoPkgHasElem_sampler1Dchoicecg_param_typeschema_Sampler1D_TcgSampler1D_

	XsdGoPkgHasElem_halfchoicecg_param_typeschema_Half_TcgHalf_

	XsdGoPkgHasElem_float4choicecg_param_typeschema_Float4_TcgFloat4_

	XsdGoPkgHasElem_int2x4choicecg_param_typeschema_Int2X4_TcgInt2X4_

	XsdGoPkgHasElem_half2x3choicecg_param_typeschema_Half2X3_TcgHalf2X3_

	XsdGoPkgHasElem_float1x3choicecg_param_typeschema_Float1X3_TcgFloat1X3_

	XsdGoPkgHasElem_fixed2x1choicecg_param_typeschema_Fixed2X1_TcgFixed2X1_

	XsdGoPkgHasElem_bool1x3choicecg_param_typeschema_Bool1X3_TcgBool1X3_

	XsdGoPkgHasElem_int2choicecg_param_typeschema_Int2_TcgInt2_

	XsdGoPkgHasElem_half3x2choicecg_param_typeschema_Half3X2_TcgHalf3X2_

	XsdGoPkgHasElem_fixed1x2choicecg_param_typeschema_Fixed1X2_TcgFixed1X2_

	XsdGoPkgHasElem_float4x2choicecg_param_typeschema_Float4X2_TcgFloat4X2_

	XsdGoPkgHasElem_sampler3Dchoicecg_param_typeschema_Sampler3D_TcgSampler3D_

	XsdGoPkgHasElem_fixed4x2choicecg_param_typeschema_Fixed4X2_TcgFixed4X2_

	XsdGoPkgHasElem_int2x1choicecg_param_typeschema_Int2X1_TcgInt2X1_

	XsdGoPkgHasElem_float2x2choicecg_param_typeschema_Float2X2_TcgFloat2X2_

	XsdGoPkgHasElem_float4x1choicecg_param_typeschema_Float4X1_TcgFloat4X1_

	XsdGoPkgHasElem_enumchoiceglsl_param_typeschema_Enum_TglEnumeration_

	XsdGoPkgHasElem_float4x4choicecg_param_typeschema_Float4X4_TcgFloat4X4_

	XsdGoPkgHasElem_fixed3x2choicecg_param_typeschema_Fixed3X2_TcgFixed3X2_

	XsdGoPkgHasElem_samplerCUBEchoicecg_param_typeschema_SamplerCUBE_TcgSamplerCUBE_

	XsdGoPkgHasElem_half1x2choicecg_param_typeschema_Half1X2_TcgHalf1X2_

	XsdGoPkgHasElem_bool2x1choicecg_param_typeschema_Bool2X1_TcgBool2X1_

	XsdGoPkgHasElem_half1x1choicecg_param_typeschema_Half1X1_TcgHalf1X1_

	XsdGoPkgHasElem_int1x3choicecg_param_typeschema_Int1X3_TcgInt1X3_

	XsdGoPkgHasElem_samplerRECTchoicecg_param_typeschema_SamplerRECT_TcgSamplerRECT_

	XsdGoPkgHasElem_float1choicecg_param_typeschema_Float1_TcgFloat1_

	XsdGoPkgHasElem_bool2x3choicecg_param_typeschema_Bool2X3_TcgBool2X3_

	XsdGoPkgHasElem_boolchoicecg_param_typeschema_Bool_TcgBool_

	XsdGoPkgHasElem_fixed2x4choicecg_param_typeschema_Fixed2X4_TcgFixed2X4_

	XsdGoPkgHasElem_bool2x2choicecg_param_typeschema_Bool2X2_TcgBool2X2_

	XsdGoPkgHasElem_fixed4choicecg_param_typeschema_Fixed4_TcgFixed4_

	XsdGoPkgHasElem_half1choicecg_param_typeschema_Half1_TcgHalf1_

	XsdGoPkgHasElem_surfacechoicecg_param_typeschema_Surface_TcgSurfaceType_

	XsdGoPkgHasElem_float1x2choicecg_param_typeschema_Float1X2_TcgFloat1X2_

	XsdGoPkgHasElem_fixed1choicecg_param_typeschema_Fixed1_TcgFixed1_

	XsdGoPkgHasElem_int2x2choicecg_param_typeschema_Int2X2_TcgInt2X2_

	XsdGoPkgHasElem_fixed3x3choicecg_param_typeschema_Fixed3X3_TcgFixed3X3_

	XsdGoPkgHasElem_float3x3choicecg_param_typeschema_Float3X3_TcgFloat3X3_

	XsdGoPkgHasElem_half3x1choicecg_param_typeschema_Half3X1_TcgHalf3X1_

	XsdGoPkgHasElem_float2x1choicecg_param_typeschema_Float2X1_TcgFloat2X1_

	XsdGoPkgHasElem_sampler2Dchoicecg_param_typeschema_Sampler2D_TcgSampler2D_

	XsdGoPkgHasElem_half4x2choicecg_param_typeschema_Half4X2_TcgHalf4X2_

	XsdGoPkgHasElem_fixed1x3choicecg_param_typeschema_Fixed1X3_TcgFixed1X3_

	XsdGoPkgHasElem_half3x4choicecg_param_typeschema_Half3X4_TcgHalf3X4_

	XsdGoPkgHasElem_bool3x1choicecg_param_typeschema_Bool3X1_TcgBool3X1_

	XsdGoPkgHasElem_float4x3choicecg_param_typeschema_Float4X3_TcgFloat4X3_

	XsdGoPkgHasElem_fixed2choicecg_param_typeschema_Fixed2_TcgFixed2_

	XsdGoPkgHasElem_int4x1choicecg_param_typeschema_Int4X1_TcgInt4X1_

	XsdGoPkgHasElem_fixed1x4choicecg_param_typeschema_Fixed1X4_TcgFixed1X4_

	XsdGoPkgHasElem_half3x3choicecg_param_typeschema_Half3X3_TcgHalf3X3_

	XsdGoPkgHasElem_half2x2choicecg_param_typeschema_Half2X2_TcgHalf2X2_

	XsdGoPkgHasElem_bool3x3choicecg_param_typeschema_Bool3X3_TcgBool3X3_

	XsdGoPkgHasElem_bool1choicecg_param_typeschema_Bool1_TcgBool1_

	XsdGoPkgHasElem_int2x3choicecg_param_typeschema_Int2X3_TcgInt2X3_

	XsdGoPkgHasElem_int1x2choicecg_param_typeschema_Int1X2_TcgInt1X2_

	XsdGoPkgHasElem_bool4x2choicecg_param_typeschema_Bool4X2_TcgBool4X2_

	XsdGoPkgHasElem_half2choicecg_param_typeschema_Half2_TcgHalf2_

	XsdGoPkgHasElem_float2choicecg_param_typeschema_Float2_TcgFloat2_

	XsdGoPkgHasElem_half4x1choicecg_param_typeschema_Half4X1_TcgHalf4X1_

	XsdGoPkgHasElem_fixed4x1choicecg_param_typeschema_Fixed4X1_TcgFixed4X1_

	XsdGoPkgHasElem_bool4x1choicecg_param_typeschema_Bool4X1_TcgBool4X1_

	XsdGoPkgHasElem_half4x4choicecg_param_typeschema_Half4X4_TcgHalf4X4_

	XsdGoPkgHasElem_int4x3choicecg_param_typeschema_Int4X3_TcgInt4X3_

	XsdGoPkgHasElem_float3x2choicecg_param_typeschema_Float3X2_TcgFloat3X2_

	XsdGoPkgHasElem_int1x4choicecg_param_typeschema_Int1X4_TcgInt1X4_

	XsdGoPkgHasElem_int3x4choicecg_param_typeschema_Int3X4_TcgInt3X4_

	XsdGoPkgHasElem_half4x3choicecg_param_typeschema_Half4X3_TcgHalf4X3_

	XsdGoPkgHasElem_intchoicecg_param_typeschema_Int_TcgInt_

	XsdGoPkgHasElem_half2x1choicecg_param_typeschema_Half2X1_TcgHalf2X1_

	XsdGoPkgHasElem_float2x4choicecg_param_typeschema_Float2X4_TcgFloat2X4_

	XsdGoPkgHasElem_fixed4x4choicecg_param_typeschema_Fixed4X4_TcgFixed4X4_

	XsdGoPkgHasElem_fixed2x3choicecg_param_typeschema_Fixed2X3_TcgFixed2X3_

	XsdGoPkgHasElem_bool4x4choicecg_param_typeschema_Bool4X4_TcgBool4X4_

	XsdGoPkgHasElem_half1x3choicecg_param_typeschema_Half1X3_TcgHalf1X3_

	XsdGoPkgHasElem_int4x4choicecg_param_typeschema_Int4X4_TcgInt4X4_

	XsdGoPkgHasElem_bool4x3choicecg_param_typeschema_Bool4X3_TcgBool4X3_

	XsdGoPkgHasElem_half2x4choicecg_param_typeschema_Half2X4_TcgHalf2X4_

	XsdGoPkgHasElem_half1x4choicecg_param_typeschema_Half1X4_TcgHalf1X4_

	XsdGoPkgHasElem_int3x2choicecg_param_typeschema_Int3X2_TcgInt3X2_

	XsdGoPkgHasElem_floatchoicecg_param_typeschema_Float_TcgFloat_

	XsdGoPkgHasElem_int1x1choicecg_param_typeschema_Int1X1_TcgInt1X1_

	XsdGoPkgHasElem_fixed4x3choicecg_param_typeschema_Fixed4X3_TcgFixed4X3_

	XsdGoPkgHasElem_half4choicecg_param_typeschema_Half4_TcgHalf4_

	XsdGoPkgHasElem_bool1x1choicecg_param_typeschema_Bool1X1_TcgBool1X1_

	XsdGoPkgHasElem_samplerDEPTHchoicecg_param_typeschema_SamplerDEPTH_TcgSamplerDEPTH_

	XsdGoPkgHasElem_float3x4choicecg_param_typeschema_Float3X4_TcgFloat3X4_

	XsdGoPkgHasElem_float1x4choicecg_param_typeschema_Float1X4_TcgFloat1X4_

	XsdGoPkgHasElem_bool3x2choicecg_param_typeschema_Bool3X2_TcgBool3X2_

	XsdGoPkgHasElem_fixedchoicecg_param_typeschema_Fixed_TcgFixed_

	XsdGoPkgHasElem_int1choicecg_param_typeschema_Int1_TcgInt1_

	XsdGoPkgHasElem_bool1x4choicecg_param_typeschema_Bool1X4_TcgBool1X4_

	XsdGoPkgHasElem_bool3x4choicecg_param_typeschema_Bool3X4_TcgBool3X4_

	XsdGoPkgHasElem_int3x3choicecg_param_typeschema_Int3X3_TcgInt3X3_

	XsdGoPkgHasElem_fixed2x2choicecg_param_typeschema_Fixed2X2_TcgFixed2X2_

	XsdGoPkgHasElem_fixed1x1choicecg_param_typeschema_Fixed1X1_TcgFixed1X1_

	XsdGoPkgHasElem_float2x3choicecg_param_typeschema_Float2X3_TcgFloat2X3_

	XsdGoPkgHasElem_int3x1choicecg_param_typeschema_Int3X1_TcgInt3X1_

	XsdGoPkgHasElem_stringchoicefx_annotate_type_commonschema_String_XsdtString_
}

//	If the WalkHandlers.XsdGoPkgHasGroup_CgParamType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasGroup_CgParamType instance as the single argument. Then calls the Walk() method on 114/114 embed(s) and 0/0 field(s) belonging to this XsdGoPkgHasGroup_CgParamType instance.
func (me *XsdGoPkgHasGroup_CgParamType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasGroup_CgParamType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_int1x3choicecg_param_typeschema_Int1X3_TcgInt1X3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_samplerRECTchoicecg_param_typeschema_SamplerRECT_TcgSamplerRECT_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float1choicecg_param_typeschema_Float1_TcgFloat1_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool2x3choicecg_param_typeschema_Bool2X3_TcgBool2X3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_boolchoicecg_param_typeschema_Bool_TcgBool_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fixed2x4choicecg_param_typeschema_Fixed2X4_TcgFixed2X4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool2x2choicecg_param_typeschema_Bool2X2_TcgBool2X2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fixed4choicecg_param_typeschema_Fixed4_TcgFixed4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_half1choicecg_param_typeschema_Half1_TcgHalf1_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_surfacechoicecg_param_typeschema_Surface_TcgSurfaceType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float1x2choicecg_param_typeschema_Float1X2_TcgFloat1X2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fixed1choicecg_param_typeschema_Fixed1_TcgFixed1_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int2x2choicecg_param_typeschema_Int2X2_TcgInt2X2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fixed3x3choicecg_param_typeschema_Fixed3X3_TcgFixed3X3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3x3choicecg_param_typeschema_Float3X3_TcgFloat3X3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_half3x1choicecg_param_typeschema_Half3X1_TcgHalf3X1_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2x1choicecg_param_typeschema_Float2X1_TcgFloat2X1_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sampler2Dchoicecg_param_typeschema_Sampler2D_TcgSampler2D_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_half4x2choicecg_param_typeschema_Half4X2_TcgHalf4X2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fixed1x3choicecg_param_typeschema_Fixed1X3_TcgFixed1X3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_half3x4choicecg_param_typeschema_Half3X4_TcgHalf3X4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool3x1choicecg_param_typeschema_Bool3X1_TcgBool3X1_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4x3choicecg_param_typeschema_Float4X3_TcgFloat4X3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fixed2choicecg_param_typeschema_Fixed2_TcgFixed2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int4x1choicecg_param_typeschema_Int4X1_TcgInt4X1_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fixed1x4choicecg_param_typeschema_Fixed1X4_TcgFixed1X4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_half3x3choicecg_param_typeschema_Half3X3_TcgHalf3X3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_half2x2choicecg_param_typeschema_Half2X2_TcgHalf2X2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool3x3choicecg_param_typeschema_Bool3X3_TcgBool3X3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool1choicecg_param_typeschema_Bool1_TcgBool1_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int2x3choicecg_param_typeschema_Int2X3_TcgInt2X3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int1x2choicecg_param_typeschema_Int1X2_TcgInt1X2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool4x2choicecg_param_typeschema_Bool4X2_TcgBool4X2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_half2choicecg_param_typeschema_Half2_TcgHalf2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2choicecg_param_typeschema_Float2_TcgFloat2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_half4x1choicecg_param_typeschema_Half4X1_TcgHalf4X1_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fixed4x1choicecg_param_typeschema_Fixed4X1_TcgFixed4X1_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool4x1choicecg_param_typeschema_Bool4X1_TcgBool4X1_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_half4x4choicecg_param_typeschema_Half4X4_TcgHalf4X4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int4x3choicecg_param_typeschema_Int4X3_TcgInt4X3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3x2choicecg_param_typeschema_Float3X2_TcgFloat3X2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int1x4choicecg_param_typeschema_Int1X4_TcgInt1X4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int3x4choicecg_param_typeschema_Int3X4_TcgInt3X4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_half4x3choicecg_param_typeschema_Half4X3_TcgHalf4X3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_intchoicecg_param_typeschema_Int_TcgInt_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_half2x1choicecg_param_typeschema_Half2X1_TcgHalf2X1_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2x4choicecg_param_typeschema_Float2X4_TcgFloat2X4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fixed4x4choicecg_param_typeschema_Fixed4X4_TcgFixed4X4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fixed2x3choicecg_param_typeschema_Fixed2X3_TcgFixed2X3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool4x4choicecg_param_typeschema_Bool4X4_TcgBool4X4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_half1x3choicecg_param_typeschema_Half1X3_TcgHalf1X3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int4x4choicecg_param_typeschema_Int4X4_TcgInt4X4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool4x3choicecg_param_typeschema_Bool4X3_TcgBool4X3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_half2x4choicecg_param_typeschema_Half2X4_TcgHalf2X4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_half1x4choicecg_param_typeschema_Half1X4_TcgHalf1X4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int3x2choicecg_param_typeschema_Int3X2_TcgInt3X2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_floatchoicecg_param_typeschema_Float_TcgFloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int1x1choicecg_param_typeschema_Int1X1_TcgInt1X1_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fixed4x3choicecg_param_typeschema_Fixed4X3_TcgFixed4X3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_half4choicecg_param_typeschema_Half4_TcgHalf4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool1x1choicecg_param_typeschema_Bool1X1_TcgBool1X1_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_samplerDEPTHchoicecg_param_typeschema_SamplerDEPTH_TcgSamplerDEPTH_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3x4choicecg_param_typeschema_Float3X4_TcgFloat3X4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float1x4choicecg_param_typeschema_Float1X4_TcgFloat1X4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool3x2choicecg_param_typeschema_Bool3X2_TcgBool3X2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fixedchoicecg_param_typeschema_Fixed_TcgFixed_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int1choicecg_param_typeschema_Int1_TcgInt1_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool1x4choicecg_param_typeschema_Bool1X4_TcgBool1X4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool3x4choicecg_param_typeschema_Bool3X4_TcgBool3X4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int3x3choicecg_param_typeschema_Int3X3_TcgInt3X3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fixed2x2choicecg_param_typeschema_Fixed2X2_TcgFixed2X2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fixed1x1choicecg_param_typeschema_Fixed1X1_TcgFixed1X1_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2x3choicecg_param_typeschema_Float2X3_TcgFloat2X3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int3x1choicecg_param_typeschema_Int3X1_TcgInt3X1_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stringchoicefx_annotate_type_commonschema_String_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool2choicecg_param_typeschema_Bool2_TcgBool2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool4choicecg_param_typeschema_Bool4_TcgBool4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fixed3choicecg_param_typeschema_Fixed3_TcgFixed3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fixed3x4choicecg_param_typeschema_Fixed3X4_TcgFixed3X4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int4x2choicecg_param_typeschema_Int4X2_TcgInt4X2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_half3choicecg_param_typeschema_Half3_TcgHalf3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool2x4choicecg_param_typeschema_Bool2X4_TcgBool2X4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3x1choicecg_param_typeschema_Float3X1_TcgFloat3X1_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float1x1choicecg_param_typeschema_Float1X1_TcgFloat1X1_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fixed3x1choicecg_param_typeschema_Fixed3X1_TcgFixed3X1_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool3choicecg_param_typeschema_Bool3_TcgBool3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float3choicecg_param_typeschema_Float3_TcgFloat3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int4choicecg_param_typeschema_Int4_TcgInt4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool1x2choicecg_param_typeschema_Bool1X2_TcgBool1X2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int3choicecg_param_typeschema_Int3_TcgInt3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sampler1Dchoicecg_param_typeschema_Sampler1D_TcgSampler1D_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_halfchoicecg_param_typeschema_Half_TcgHalf_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4choicecg_param_typeschema_Float4_TcgFloat4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int2x4choicecg_param_typeschema_Int2X4_TcgInt2X4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_half2x3choicecg_param_typeschema_Half2X3_TcgHalf2X3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float1x3choicecg_param_typeschema_Float1X3_TcgFloat1X3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fixed2x1choicecg_param_typeschema_Fixed2X1_TcgFixed2X1_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool1x3choicecg_param_typeschema_Bool1X3_TcgBool1X3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int2choicecg_param_typeschema_Int2_TcgInt2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_half3x2choicecg_param_typeschema_Half3X2_TcgHalf3X2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fixed1x2choicecg_param_typeschema_Fixed1X2_TcgFixed1X2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4x2choicecg_param_typeschema_Float4X2_TcgFloat4X2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_sampler3Dchoicecg_param_typeschema_Sampler3D_TcgSampler3D_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fixed4x2choicecg_param_typeschema_Fixed4X2_TcgFixed4X2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_int2x1choicecg_param_typeschema_Int2X1_TcgInt2X1_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float2x2choicecg_param_typeschema_Float2X2_TcgFloat2X2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4x1choicecg_param_typeschema_Float4X1_TcgFloat4X1_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_enumchoiceglsl_param_typeschema_Enum_TglEnumeration_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_float4x4choicecg_param_typeschema_Float4X4_TcgFloat4X4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_fixed3x2choicecg_param_typeschema_Fixed3X2_TcgFixed3X2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_samplerCUBEchoicecg_param_typeschema_SamplerCUBE_TcgSamplerCUBE_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_half1x2choicecg_param_typeschema_Half1X2_TcgHalf1X2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_bool2x1choicecg_param_typeschema_Bool2X1_TcgBool2X1_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_half1x1choicecg_param_typeschema_Half1X1_TcgHalf1X1_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Creates a parameter of a one-dimensional array type.
//	The usertype element allows you to create arrays of usertypes.
//	Creates an instance of a structured class.
type XsdGoPkgHasElems_connect_paramchoicechoicecg_setuser_typeschema_ConnectParam_TcgConnectParam_ struct {
	ConnectParams []*TcgConnectParam `xml:"http://www.collada.org/2005/11/COLLADASchema connect_param"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_connect_paramchoicechoicecg_setuser_typeschema_ConnectParam_TcgConnectParam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_connect_paramchoicechoicecg_setuser_typeschema_ConnectParam_TcgConnectParam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_connect_paramchoicechoicecg_setuser_typeschema_ConnectParam_TcgConnectParam_ instance.
func (me *XsdGoPkgHasElems_connect_paramchoicechoicecg_setuser_typeschema_ConnectParam_TcgConnectParam_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_connect_paramchoicechoicecg_setuser_typeschema_ConnectParam_TcgConnectParam_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ConnectParams {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Name_TcgIdentifier_ struct {
	Name TcgIdentifier `xml:"http://www.collada.org/2005/11/COLLADASchema name,attr"`
}

type XsdGoPkgHasElems_usertypechoicechoicecg_setuser_typeschema_Usertype_TcgSetuserType_ struct {
	Usertypes []*TcgSetuserType `xml:"http://www.collada.org/2005/11/COLLADASchema usertype"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_usertypechoicechoicecg_setuser_typeschema_Usertype_TcgSetuserType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_usertypechoicechoicecg_setuser_typeschema_Usertype_TcgSetuserType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_usertypechoicechoicecg_setuser_typeschema_Usertype_TcgSetuserType_ instance.
func (me *XsdGoPkgHasElems_usertypechoicechoicecg_setuser_typeschema_Usertype_TcgSetuserType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_usertypechoicechoicecg_setuser_typeschema_Usertype_TcgSetuserType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_arraychoicechoicecg_setuser_typeschema_Array_TcgSetarrayType_ struct {
	Arrays []*TcgSetarrayType `xml:"http://www.collada.org/2005/11/COLLADASchema array"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_arraychoicechoicecg_setuser_typeschema_Array_TcgSetarrayType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_arraychoicechoicecg_setuser_typeschema_Array_TcgSetarrayType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_arraychoicechoicecg_setuser_typeschema_Array_TcgSetarrayType_ instance.
func (me *XsdGoPkgHasElems_arraychoicechoicecg_setuser_typeschema_Array_TcgSetarrayType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_arraychoicechoicecg_setuser_typeschema_Array_TcgSetarrayType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Use a series of these to set the members by name.  The ref attribute will be relative to the usertype you are in right now.
type XsdGoPkgHasElems_setparamchoicecg_setuser_typeschema_Setparam_TcgSetparam_ struct {
	//	Use a series of these to set the members by name.  The ref attribute will be relative to the usertype you are in right now.
	Setparams []*TcgSetparam `xml:"http://www.collada.org/2005/11/COLLADASchema setparam"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_setparamchoicecg_setuser_typeschema_Setparam_TcgSetparam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_setparamchoicecg_setuser_typeschema_Setparam_TcgSetparam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_setparamchoicecg_setuser_typeschema_Setparam_TcgSetparam_ instance.
func (me *XsdGoPkgHasElems_setparamchoicecg_setuser_typeschema_Setparam_TcgSetparam_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_setparamchoicecg_setuser_typeschema_Setparam_TcgSetparam_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgSetuserType struct {
	//	Use a combination of these to initialize the usertype in an order-dependent manner.
	XsdGoPkgHasGroup_CgParamType

	//	Use a combination of these to initialize the usertype in an order-dependent manner.
	XsdGoPkgHasElems_usertypechoicechoicecg_setuser_typeschema_Usertype_TcgSetuserType_

	//	Use a combination of these to initialize the usertype in an order-dependent manner.
	XsdGoPkgHasElems_arraychoicechoicecg_setuser_typeschema_Array_TcgSetarrayType_

	//	Some usertypes do not have data.  They may be used only to implement interface functions.
	//	Use a series of these to set the members by name.  The ref attribute will be relative to the usertype you are in right now.
	XsdGoPkgHasElems_setparamchoicecg_setuser_typeschema_Setparam_TcgSetparam_

	//	Use a combination of these to initialize the usertype in an order-dependent manner.
	XsdGoPkgHasElems_connect_paramchoicechoicecg_setuser_typeschema_ConnectParam_TcgConnectParam_

	XsdGoPkgHasAttr_Name_TcgIdentifier_

	//	Reference a code or include element which defines the usertype
	XsdGoPkgHasAttr_Source_XsdtNCName_
}

//	If the WalkHandlers.TcgSetuserType function is not nil (ie. was set by outside code), calls it with this TcgSetuserType instance as the single argument. Then calls the Walk() method on 5/7 embed(s) and 0/0 field(s) belonging to this TcgSetuserType instance.
func (me *TcgSetuserType) Walk() (err error) {
	if fn := WalkHandlers.TcgSetuserType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasGroup_CgParamType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_usertypechoicechoicecg_setuser_typeschema_Usertype_TcgSetuserType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_arraychoicechoicecg_setuser_typeschema_Array_TcgSetarrayType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_setparamchoicecg_setuser_typeschema_Setparam_TcgSetparam_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_connect_paramchoicechoicecg_setuser_typeschema_ConnectParam_TcgConnectParam_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_usertypechoicecg_setarray_typeschema_Usertype_TcgSetuserType_ struct {
	//	The usertype element allows you to create arrays of usertypes.
	Usertypes []*TcgSetuserType `xml:"http://www.collada.org/2005/11/COLLADASchema usertype"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_usertypechoicecg_setarray_typeschema_Usertype_TcgSetuserType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_usertypechoicecg_setarray_typeschema_Usertype_TcgSetuserType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_usertypechoicecg_setarray_typeschema_Usertype_TcgSetuserType_ instance.
func (me *XsdGoPkgHasElems_usertypechoicecg_setarray_typeschema_Usertype_TcgSetuserType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_usertypechoicecg_setarray_typeschema_Usertype_TcgSetuserType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Usertypes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgSetarrayType struct {
	XsdGoPkgHasGroup_CgParamType

	//	The usertype element allows you to create arrays of usertypes.
	XsdGoPkgHasElems_usertypechoicecg_setarray_typeschema_Usertype_TcgSetuserType_

	//	The length attribute specifies the length of the array.
	XsdGoPkgHasAttr_Length_XsdtPositiveInteger_

	//	Nested array elements allow you to create multidemensional arrays.
	XsdGoPkgHasElems_arraychoicechoicecg_setuser_typeschema_Array_TcgSetarrayType_
}

//	If the WalkHandlers.TcgSetarrayType function is not nil (ie. was set by outside code), calls it with this TcgSetarrayType instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TcgSetarrayType instance.
func (me *TcgSetarrayType) Walk() (err error) {
	if fn := WalkHandlers.TcgSetarrayType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasGroup_CgParamType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_usertypechoicecg_setarray_typeschema_Usertype_TcgSetuserType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_arraychoicechoicecg_setuser_typeschema_Array_TcgSetarrayType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_arraychoicecg_setparamschema_Array_TcgSetarrayType_ struct {
	Array *TcgSetarrayType `xml:"http://www.collada.org/2005/11/COLLADASchema array"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_arraychoicecg_setparamschema_Array_TcgSetarrayType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_arraychoicecg_setparamschema_Array_TcgSetarrayType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_arraychoicecg_setparamschema_Array_TcgSetarrayType_ instance.
func (me *XsdGoPkgHasElem_arraychoicecg_setparamschema_Array_TcgSetarrayType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_arraychoicecg_setparamschema_Array_TcgSetarrayType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Array.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_usertypechoicecg_setparamschema_Usertype_TcgSetuserType_ struct {
	Usertype *TcgSetuserType `xml:"http://www.collada.org/2005/11/COLLADASchema usertype"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_usertypechoicecg_setparamschema_Usertype_TcgSetuserType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_usertypechoicecg_setparamschema_Usertype_TcgSetuserType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_usertypechoicecg_setparamschema_Usertype_TcgSetuserType_ instance.
func (me *XsdGoPkgHasElem_usertypechoicecg_setparamschema_Usertype_TcgSetuserType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_usertypechoicecg_setparamschema_Usertype_TcgSetuserType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Usertype.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgSetparam struct {
	XsdGoPkgHasElem_connect_paramchoicecg_setparamschema_ConnectParam_TcgConnectParam_

	XsdGoPkgHasGroup_CgParamType

	XsdGoPkgHasAttr_Program_XsdtNCName_

	XsdGoPkgHasElem_arraychoicecg_setparamschema_Array_TcgSetarrayType_

	XsdGoPkgHasElem_usertypechoicecg_setparamschema_Usertype_TcgSetuserType_

	XsdGoPkgHasAttr_Ref_TcgIdentifier_
}

//	If the WalkHandlers.TcgSetparam function is not nil (ie. was set by outside code), calls it with this TcgSetparam instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TcgSetparam instance.
func (me *TcgSetparam) Walk() (err error) {
	if fn := WalkHandlers.TcgSetparam; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasGroup_CgParamType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_arraychoicecg_setparamschema_Array_TcgSetarrayType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_usertypechoicecg_setparamschema_Usertype_TcgSetuserType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_connect_paramchoicecg_setparamschema_ConnectParam_TcgConnectParam_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_CGschema_Setparam_TcgSetparam_ struct {
	Setparams []*TcgSetparam `xml:"http://www.collada.org/2005/11/COLLADASchema setparam"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_CGschema_Setparam_TcgSetparam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_CGschema_Setparam_TcgSetparam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_CGschema_Setparam_TcgSetparam_ instance.
func (me *XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_CGschema_Setparam_TcgSetparam_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_CGschema_Setparam_TcgSetparam_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Setparams {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
//	Declare and prepare a shader for execution in the rendering pipeline of a pass.
type XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_CompilerTarget_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_ struct {
	CompilerTarget *TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget `xml:"http://www.collada.org/2005/11/COLLADASchema compiler_target"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_CompilerTarget_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_CompilerTarget_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_CompilerTarget_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_ instance.
func (me *XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_CompilerTarget_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_CompilerTarget_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CompilerTarget.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	In which pipeline stage this programmable shader is designed to execute, for example, VERTEX, FRAGMENT, etc.
type TcgPipelineStage xsdt.String

//	Returns true if the value of this enumerated TcgPipelineStage is "FRAGMENT".
func (me TcgPipelineStage) IsFragment() bool { return me == "FRAGMENT" }

//	Returns true if the value of this enumerated TcgPipelineStage is "VERTEX".
func (me TcgPipelineStage) IsVertex() bool { return me == "VERTEX" }

//	Since TcgPipelineStage is just a simple String type, this merely sets the current value from the specified string.
func (me *TcgPipelineStage) Set(s string) { (*xsdt.String)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TcgPipelineStage's alias type xsdt.String.
func (me TcgPipelineStage) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TcgPipelineStage is just a simple String type, this merely returns the current string value.
func (me TcgPipelineStage) String() string { return xsdt.String(me).String() }

type XsdGoPkgHasAttr_Stage_TcgPipelineStage_ struct {
	//	In which pipeline stage this programmable shader is designed to execute, for example, VERTEX, FRAGMENT, etc.
	Stage TcgPipelineStage `xml:"http://www.collada.org/2005/11/COLLADASchema stage,attr"`
}

//	The entry symbol for the shader function.
type XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Name_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_ struct {
	//	The entry symbol for the shader function.
	Name *TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName `xml:"http://www.collada.org/2005/11/COLLADASchema name"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Name_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Name_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Name_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_ instance.
func (me *XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Name_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Name_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Name.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Binds values to uniform inputs of a shader.
//	References a predefined parameter in shader binding declarations.
type XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Param_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_ struct {
	//	References a predefined parameter in shader binding declarations.
	Param *TxsdCommonColorOrTextureTypeChoiceParam `xml:"http://www.collada.org/2005/11/COLLADASchema param"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Param_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Param_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Param_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_ instance.
func (me *XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Param_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Param_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Param.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind struct {
	//	References a predefined parameter in shader binding declarations.
	XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Param_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_

	XsdGoPkgHasGroup_CgParamType

	//	The identifier for a uniform input parameter to the shader (a formal function parameter or in-scope
	//	global) that will be bound to an external resource.
	XsdGoPkgHasAttr_Symbol_XsdtNCName_
}

//	If the WalkHandlers.TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind function is not nil (ie. was set by outside code), calls it with this TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind instance.
func (me *TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasGroup_CgParamType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Param_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Bind_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_ struct {
	//	Binds values to uniform inputs of a shader.
	Binds []*TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind `xml:"http://www.collada.org/2005/11/COLLADASchema bind"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Bind_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Bind_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Bind_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_ instance.
func (me *XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Bind_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Bind_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Binds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader struct {
	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

	//	In which pipeline stage this programmable shader is designed to execute, for example, VERTEX, FRAGMENT, etc.
	XsdGoPkgHasAttr_Stage_TcgPipelineStage_

	//	The entry symbol for the shader function.
	XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Name_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_

	//	A string containing command-line operations for the shader compiler.
	XsdGoPkgHasElem_compiler_optionssequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerOptions_XsdtString_

	//	Binds values to uniform inputs of a shader.
	XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Bind_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_

	XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_CompilerTarget_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_
}

//	If the WalkHandlers.TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader function is not nil (ie. was set by outside code), calls it with this TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader instance as the single argument. Then calls the Walk() method on 5/6 embed(s) and 0/0 field(s) belonging to this TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader instance.
func (me *TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Name_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_compiler_optionssequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerOptions_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Bind_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_CompilerTarget_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Shader_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader_ struct {
	//	Declare and prepare a shader for execution in the rendering pipeline of a pass.
	Shaders []*TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader `xml:"http://www.collada.org/2005/11/COLLADASchema shader"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Shader_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Shader_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Shader_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader_ instance.
func (me *XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Shader_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Shader_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Shaders {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProfileCgSequenceTechniqueSequencePass struct {
	XsdGoPkgHasElems_color_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorTarget_TfxColortargetCommon_

	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

	//	Declare and prepare a shader for execution in the rendering pipeline of a pass.
	XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Shader_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader_

	XsdGoPkgHasElems_depth_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthClear_TfxCleardepthCommon_

	XsdGoPkgHasElems_stencil_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilClear_TfxClearstencilCommon_

	XsdGoPkgHasGroup_GlPipelineSettings

	XsdGoPkgHasElems_depth_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthTarget_TfxDepthtargetCommon_

	XsdGoPkgHasElems_stencil_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilTarget_TfxStenciltargetCommon_

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLESschema_Draw_TfxDrawCommon_

	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElems_color_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorClear_TfxClearcolorCommon_
}

//	If the WalkHandlers.TxsdProfileCgSequenceTechniqueSequencePass function is not nil (ie. was set by outside code), calls it with this TxsdProfileCgSequenceTechniqueSequencePass instance as the single argument. Then calls the Walk() method on 11/12 embed(s) and 0/0 field(s) belonging to this TxsdProfileCgSequenceTechniqueSequencePass instance.
func (me *TxsdProfileCgSequenceTechniqueSequencePass) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileCgSequenceTechniqueSequencePass; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_stencil_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilClear_TfxClearstencilCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroup_GlPipelineSettings.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_depth_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthTarget_TfxDepthtargetCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_stencil_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilTarget_TfxStenciltargetCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLESschema_Draw_TfxDrawCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_color_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorClear_TfxClearcolorCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_color_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorTarget_TfxColortargetCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Shader_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_depth_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthClear_TfxCleardepthCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_passsequencetechniquesequenceprofile_CGschema_Pass_TxsdProfileCgSequenceTechniqueSequencePass_ struct {
	//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
	Passes []*TxsdProfileCgSequenceTechniqueSequencePass `xml:"http://www.collada.org/2005/11/COLLADASchema pass"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_passsequencetechniquesequenceprofile_CGschema_Pass_TxsdProfileCgSequenceTechniqueSequencePass_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_passsequencetechniquesequenceprofile_CGschema_Pass_TxsdProfileCgSequenceTechniqueSequencePass_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_passsequencetechniquesequenceprofile_CGschema_Pass_TxsdProfileCgSequenceTechniqueSequencePass_ instance.
func (me *XsdGoPkgHasElems_passsequencetechniquesequenceprofile_CGschema_Pass_TxsdProfileCgSequenceTechniqueSequencePass_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_passsequencetechniquesequenceprofile_CGschema_Pass_TxsdProfileCgSequenceTechniqueSequencePass_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Passes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Create a new, named param object in the CG Runtime, assign it a type, an initial value, and additional attributes at declaration time.
type XsdGoPkgHasAttr_Sid_TcgIdentifier_ struct {
	Sid TcgIdentifier `xml:"http://www.collada.org/2005/11/COLLADASchema sid,attr"`
}

//	Creates a parameter of a one-dimensional array type.
//	Nested array elements allow you to create multidemensional arrays.
type XsdGoPkgHasElems_arraychoicecg_newarray_typeschema_Array_TcgNewarrayType_ struct {
	//	Nested array elements allow you to create multidemensional arrays.
	Arrays []*TcgNewarrayType `xml:"http://www.collada.org/2005/11/COLLADASchema array"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_arraychoicecg_newarray_typeschema_Array_TcgNewarrayType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_arraychoicecg_newarray_typeschema_Array_TcgNewarrayType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_arraychoicecg_newarray_typeschema_Array_TcgNewarrayType_ instance.
func (me *XsdGoPkgHasElems_arraychoicecg_newarray_typeschema_Array_TcgNewarrayType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_arraychoicecg_newarray_typeschema_Array_TcgNewarrayType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgNewarrayType struct {
	//	The length attribute specifies the length of the array.
	XsdGoPkgHasAttr_Length_XsdtPositiveInteger_

	XsdGoPkgHasGroup_CgParamType

	//	The usertype element allows you to create arrays of usertypes.
	XsdGoPkgHasElems_usertypechoicecg_setarray_typeschema_Usertype_TcgSetuserType_

	//	Nested array elements allow you to create multidemensional arrays.
	XsdGoPkgHasElems_arraychoicecg_newarray_typeschema_Array_TcgNewarrayType_

	XsdGoPkgHasElems_connect_paramchoicechoicecg_setuser_typeschema_ConnectParam_TcgConnectParam_
}

//	If the WalkHandlers.TcgNewarrayType function is not nil (ie. was set by outside code), calls it with this TcgNewarrayType instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TcgNewarrayType instance.
func (me *TcgNewarrayType) Walk() (err error) {
	if fn := WalkHandlers.TcgNewarrayType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasGroup_CgParamType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_usertypechoicecg_setarray_typeschema_Usertype_TcgSetuserType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_arraychoicecg_newarray_typeschema_Array_TcgNewarrayType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_connect_paramchoicechoicecg_setuser_typeschema_ConnectParam_TcgConnectParam_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_arraychoicesequencecg_newparamschema_Array_TcgNewarrayType_ struct {
	Array *TcgNewarrayType `xml:"http://www.collada.org/2005/11/COLLADASchema array"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_arraychoicesequencecg_newparamschema_Array_TcgNewarrayType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_arraychoicesequencecg_newparamschema_Array_TcgNewarrayType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_arraychoicesequencecg_newparamschema_Array_TcgNewarrayType_ instance.
func (me *XsdGoPkgHasElem_arraychoicesequencecg_newparamschema_Array_TcgNewarrayType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_arraychoicesequencecg_newparamschema_Array_TcgNewarrayType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Array.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcgNewparam struct {
	XsdGoPkgHasElem_arraychoicesequencecg_newparamschema_Array_TcgNewarrayType_

	//	The annotate element allows you to specify an annotation for this new param.
	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

	XsdGoPkgHasElem_usertypechoicecg_setparamschema_Usertype_TcgSetuserType_

	//	The modifier element allows you to specify a modifier for this new param.
	XsdGoPkgHasElem_modifiersequencefx_newparam_commonschema_Modifier_TfxModifierEnumCommon_

	//	The semantic element allows you to specify a semantic for this new param.
	XsdGoPkgHasElem_semanticsequencefx_newparam_commonschema_Semantic_XsdtNCName_

	XsdGoPkgHasAttr_Sid_TcgIdentifier_

	XsdGoPkgHasGroup_CgParamType
}

//	If the WalkHandlers.TcgNewparam function is not nil (ie. was set by outside code), calls it with this TcgNewparam instance as the single argument. Then calls the Walk() method on 6/7 embed(s) and 0/0 field(s) belonging to this TcgNewparam instance.
func (me *TcgNewparam) Walk() (err error) {
	if fn := WalkHandlers.TcgNewparam; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_semanticsequencefx_newparam_commonschema_Semantic_XsdtNCName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasGroup_CgParamType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_arraychoicesequencecg_newparamschema_Array_TcgNewarrayType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_usertypechoicecg_setparamschema_Usertype_TcgSetuserType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_modifiersequencefx_newparam_commonschema_Modifier_TfxModifierEnumCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_CGschema_Newparam_TcgNewparam_ struct {
	Newparams []*TcgNewparam `xml:"http://www.collada.org/2005/11/COLLADASchema newparam"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_CGschema_Newparam_TcgNewparam_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_CGschema_Newparam_TcgNewparam_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_CGschema_Newparam_TcgNewparam_ instance.
func (me *XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_CGschema_Newparam_TcgNewparam_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_CGschema_Newparam_TcgNewparam_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Newparams {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProfileCgSequenceTechnique struct {
	XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Code_TfxCodeProfile_

	//	The technique element may contain an asset element.
	XsdGoPkgHasElem_Asset

	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_CGschema_Setparam_TcgSetparam_

	XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Include_TfxIncludeCommon_

	XsdGoPkgHasElems_Image

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	//	A static declaration of all the render states, shaders, and settings for one rendering pipeline.
	XsdGoPkgHasElems_passsequencetechniquesequenceprofile_CGschema_Pass_TxsdProfileCgSequenceTechniqueSequencePass_

	XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_CGschema_Newparam_TcgNewparam_

	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_
}

//	If the WalkHandlers.TxsdProfileCgSequenceTechnique function is not nil (ie. was set by outside code), calls it with this TxsdProfileCgSequenceTechnique instance as the single argument. Then calls the Walk() method on 9/11 embed(s) and 0/0 field(s) belonging to this TxsdProfileCgSequenceTechnique instance.
func (me *TxsdProfileCgSequenceTechnique) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileCgSequenceTechnique; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_CGschema_Newparam_TcgNewparam_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Code_TfxCodeProfile_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_CGschema_Setparam_TcgSetparam_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Include_TfxIncludeCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Image.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_passsequencetechniquesequenceprofile_CGschema_Pass_TxsdProfileCgSequenceTechniqueSequencePass_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_techniquesequenceprofile_CGschema_Technique_TxsdProfileCgSequenceTechnique_ struct {
	//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
	Techniques []*TxsdProfileCgSequenceTechnique `xml:"http://www.collada.org/2005/11/COLLADASchema technique"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_techniquesequenceprofile_CGschema_Technique_TxsdProfileCgSequenceTechnique_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_techniquesequenceprofile_CGschema_Technique_TxsdProfileCgSequenceTechnique_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_techniquesequenceprofile_CGschema_Technique_TxsdProfileCgSequenceTechnique_ instance.
func (me *XsdGoPkgHasElems_techniquesequenceprofile_CGschema_Technique_TxsdProfileCgSequenceTechnique_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_techniquesequenceprofile_CGschema_Technique_TxsdProfileCgSequenceTechnique_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Techniques {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdProfileCg struct {
	//	The type of platform. This is a vendor-defined character string that indicates the platform or capability target for the technique. Optional
	XsdGoPkgHasAttr_Platform_XsdtNCName_Pc

	XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Include_TfxIncludeCommon_

	XsdGoPkgHasElem_Asset

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Code_TfxCodeProfile_

	XsdGoPkgHasElems_Extra

	//	Holds a description of the textures, samplers, shaders, parameters, and passes necessary for rendering this effect using one method.
	XsdGoPkgHasElems_techniquesequenceprofile_CGschema_Technique_TxsdProfileCgSequenceTechnique_

	XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_CGschema_Newparam_TcgNewparam_

	XsdGoPkgHasElems_Image
}

//	If the WalkHandlers.TxsdProfileCg function is not nil (ie. was set by outside code), calls it with this TxsdProfileCg instance as the single argument. Then calls the Walk() method on 7/9 embed(s) and 0/0 field(s) belonging to this TxsdProfileCg instance.
func (me *TxsdProfileCg) Walk() (err error) {
	if fn := WalkHandlers.TxsdProfileCg; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_techniquesequenceprofile_CGschema_Technique_TxsdProfileCgSequenceTechnique_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_CGschema_Newparam_TcgNewparam_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Image.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Include_TfxIncludeCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Code_TfxCodeProfile_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ProfileCg struct {
	//	Opens a block of CG platform-specific data types and technique declarations.
	ProfileCgs []*TxsdProfileCg `xml:"http://www.collada.org/2005/11/COLLADASchema profile_CG"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ProfileCg function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ProfileCg instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ProfileCg instance.
func (me *XsdGoPkgHasElems_ProfileCg) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ProfileCg; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ProfileCgs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FxProfileAbstract struct {
	//	The fx_profile_abstract element is only used as a substitution group hook for COLLADA FX profiles.
	FxProfileAbstracts []xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema fx_profile_abstract"`

	//	Opens a block of GLSL platform-specific data types and technique declarations.
	XsdGoPkgHasElems_ProfileGlsl

	//	Opens a block of CG platform-specific data types and technique declarations.
	XsdGoPkgHasElems_ProfileCg

	//	Opens a block of COMMON platform-specific data types and technique declarations.
	XsdGoPkgHasElems_ProfileCommon

	//	Opens a block of GLES platform-specific data types and technique declarations.
	XsdGoPkgHasElems_ProfileGles
}

//	If the WalkHandlers.XsdGoPkgHasElems_FxProfileAbstract function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FxProfileAbstract instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FxProfileAbstract instance.
func (me *XsdGoPkgHasElems_FxProfileAbstract) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FxProfileAbstract; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_ProfileGlsl.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ProfileCg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ProfileCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ProfileGles.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdEffect struct {
	//	The annotate element allows you to specify an annotation on this effect.
	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_

	//	The image element allows you to create image resources which can be shared by multipe profiles.
	XsdGoPkgHasElems_Image

	//	This is the substituion group hook which allows you to swap in other COLLADA FX profiles.
	XsdGoPkgHasElems_FxProfileAbstract

	//	The effect element may contain an asset element.
	XsdGoPkgHasElem_Asset

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The newparam element allows you to create new effect parameters which can be shared by multipe profiles.
	XsdGoPkgHasElems_newparamsequenceeffectschema_Newparam_TfxNewparamCommon_
}

//	If the WalkHandlers.TxsdEffect function is not nil (ie. was set by outside code), calls it with this TxsdEffect instance as the single argument. Then calls the Walk() method on 6/8 embed(s) and 0/0 field(s) belonging to this TxsdEffect instance.
func (me *TxsdEffect) Walk() (err error) {
	if fn := WalkHandlers.TxsdEffect; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_newparamsequenceeffectschema_Newparam_TfxNewparamCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Image.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_FxProfileAbstract.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Effect struct {
	//	A self contained description of a shader effect.
	Effects []*TxsdEffect `xml:"http://www.collada.org/2005/11/COLLADASchema effect"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Effect function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Effect instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Effect instance.
func (me *XsdGoPkgHasElems_Effect) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Effect; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Effects {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdLibraryEffects struct {
	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The library_effects element may contain an asset element.
	XsdGoPkgHasElem_Asset

	//	There must be at least one effect element.
	XsdGoPkgHasElems_Effect
}

//	If the WalkHandlers.TxsdLibraryEffects function is not nil (ie. was set by outside code), calls it with this TxsdLibraryEffects instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdLibraryEffects instance.
func (me *TxsdLibraryEffects) Walk() (err error) {
	if fn := WalkHandlers.TxsdLibraryEffects; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Effect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LibraryEffects struct {
	//	The library_effects element declares a module of effect elements.
	EffectsLibraries []*TxsdLibraryEffects `xml:"http://www.collada.org/2005/11/COLLADASchema library_effects"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LibraryEffects function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LibraryEffects instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LibraryEffects instance.
func (me *XsdGoPkgHasElems_LibraryEffects) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LibraryEffects; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EffectsLibraries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The library_physics_scenes element declares a module of physics_scene elements.
//	This element allows instancing physics model within another physics model, or in a physics scene.
//	This element allows instancing a rigid_constraint within an instance_physics_model.
//	The constraint attribute indicates which rigid_constraing to instantiate. Required attribute.
type XsdGoPkgHasAttr_Constraint_XsdtNCName_ struct {
	//	The constraint attribute indicates which rigid_constraing to instantiate. Required attribute.
	Constraint xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema constraint,attr"`
}

type TxsdInstanceRigidConstraint struct {
	//	The sid attribute is a text string value containing the sub-identifier of this element. This
	//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	//	The constraint attribute indicates which rigid_constraing to instantiate. Required attribute.
	XsdGoPkgHasAttr_Constraint_XsdtNCName_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra
}

//	If the WalkHandlers.TxsdInstanceRigidConstraint function is not nil (ie. was set by outside code), calls it with this TxsdInstanceRigidConstraint instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TxsdInstanceRigidConstraint instance.
func (me *TxsdInstanceRigidConstraint) Walk() (err error) {
	if fn := WalkHandlers.TxsdInstanceRigidConstraint; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_InstanceRigidConstraint struct {
	//	This element allows instancing a rigid_constraint within an instance_physics_model.
	RigidConstraintInstances []*TxsdInstanceRigidConstraint `xml:"http://www.collada.org/2005/11/COLLADASchema instance_rigid_constraint"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InstanceRigidConstraint function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstanceRigidConstraint instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstanceRigidConstraint instance.
func (me *XsdGoPkgHasElems_InstanceRigidConstraint) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InstanceRigidConstraint; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RigidConstraintInstances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The parent attribute points to the id of a node in the visual scene. This allows a physics model
//	to be instantiated under a specific transform node, which will dictate the initial position and
//	orientation, and could be animated to influence kinematic rigid bodies.
type XsdGoPkgHasAttr_Parent_XsdtAnyURI_ struct {
	//	The parent attribute points to the id of a node in the visual scene. This allows a physics model
	//	to be instantiated under a specific transform node, which will dictate the initial position and
	//	orientation, and could be animated to influence kinematic rigid bodies.
	Parent xsdt.AnyURI `xml:"http://www.collada.org/2005/11/COLLADASchema parent,attr"`
}

//	This element allows instancing a rigid_body within an instance_physics_model.
//	The technique_common element specifies the instance_rigid_body information for the common
//	profile which all COLLADA implementations need to support.
//	Specifies the initial linear velocity of the rigid_body instance.
type XsdGoPkgHasElem_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_Velocity_Tfloat3_000000 struct {
	//	Specifies the initial linear velocity of the rigid_body instance.
	Velocity Tfloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema velocity"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_Velocity_Tfloat3_000000 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_Velocity_Tfloat3_000000 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_Velocity_Tfloat3_000000 instance.
func (me *XsdGoPkgHasElem_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_Velocity_Tfloat3_000000) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_Velocity_Tfloat3_000000; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for Velocity -- "0.0 0.0 0.0"
func (me XsdGoPkgHasElem_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_Velocity_Tfloat3_000000) VelocityDefault() Tfloat3 {
	return Tfloat3("0.0 0.0 0.0")
}

type TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic struct {
	XsdGoPkgValue Tbool `xml:",chardata"`

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_
}

//	Returns the value of its XsdGoPkgValue field as a xsdt.Boolean (which Tbool is just aliasing).
func (me *TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic) ToXsdtBoolean() xsdt.Boolean {
	return me.XsdGoPkgValue.ToXsdtBoolean()
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic) ToTbool() Tbool {
	return me.XsdGoPkgValue
}

//	If the WalkHandlers.TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic function is not nil (ie. was set by outside code), calls it with this TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic instance.
func (me *TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic) Walk() (err error) {
	if fn := WalkHandlers.TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_dynamicsequencetechnique_commonsequenceinstance_rigid_bodyschema_Dynamic_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic_ struct {
	Dynamic *TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic `xml:"http://www.collada.org/2005/11/COLLADASchema dynamic"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_dynamicsequencetechnique_commonsequenceinstance_rigid_bodyschema_Dynamic_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_dynamicsequencetechnique_commonsequenceinstance_rigid_bodyschema_Dynamic_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_dynamicsequencetechnique_commonsequenceinstance_rigid_bodyschema_Dynamic_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic_ instance.
func (me *XsdGoPkgHasElem_dynamicsequencetechnique_commonsequenceinstance_rigid_bodyschema_Dynamic_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_dynamicsequencetechnique_commonsequenceinstance_rigid_bodyschema_Dynamic_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Dynamic.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The instance_physics_material element declares the instantiation of a COLLADA physics_material
//	resource.
type XsdGoPkgHasElem_InstancePhysicsMaterial struct {
	//	The instance_physics_material element declares the instantiation of a COLLADA physics_material
	//	resource.
	InstancePhysicsMaterial *TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_physics_material"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InstancePhysicsMaterial function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstancePhysicsMaterial instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_InstancePhysicsMaterial instance.
func (me *XsdGoPkgHasElem_InstancePhysicsMaterial) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InstancePhysicsMaterial; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.InstancePhysicsMaterial.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Specifies the initial angular velocity of the rigid_body instance in degrees per second
//	around each axis, in the form of an X-Y-Z Euler rotation.
type XsdGoPkgHasElem_angular_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_AngularVelocity_Tfloat3_000000 struct {
	//	Specifies the initial angular velocity of the rigid_body instance in degrees per second
	//	around each axis, in the form of an X-Y-Z Euler rotation.
	AngularVelocity Tfloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema angular_velocity"`
}

//	Returns the default value for AngularVelocity -- "0.0 0.0 0.0"
func (me XsdGoPkgHasElem_angular_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_AngularVelocity_Tfloat3_000000) AngularVelocityDefault() Tfloat3 {
	return Tfloat3("0.0 0.0 0.0")
}

//	If the WalkHandlers.XsdGoPkgHasElem_angular_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_AngularVelocity_Tfloat3_000000 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_angular_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_AngularVelocity_Tfloat3_000000 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_angular_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_AngularVelocity_Tfloat3_000000 instance.
func (me *XsdGoPkgHasElem_angular_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_AngularVelocity_Tfloat3_000000) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_angular_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_AngularVelocity_Tfloat3_000000; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_masssequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_ struct {
	Mass *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema mass"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_masssequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_masssequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_masssequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_ instance.
func (me *XsdGoPkgHasElem_masssequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_masssequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Mass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	This element defines the physical properties of an object. It contains a technique/profile with
//	parameters. The COMMON profile defines the built-in names, such as static_friction.
type XsdGoPkgHasElem_PhysicsMaterial struct {
	//	This element defines the physical properties of an object. It contains a technique/profile with
	//	parameters. The COMMON profile defines the built-in names, such as static_friction.
	PhysicsMaterial *TxsdPhysicsMaterial `xml:"http://www.collada.org/2005/11/COLLADASchema physics_material"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PhysicsMaterial function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PhysicsMaterial instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PhysicsMaterial instance.
func (me *XsdGoPkgHasElem_PhysicsMaterial) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PhysicsMaterial; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PhysicsMaterial.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_inertiasequencetechnique_commonsequenceinstance_rigid_bodyschema_Inertia_TargetableFloat3_ struct {
	Inertia *TargetableFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema inertia"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_inertiasequencetechnique_commonsequenceinstance_rigid_bodyschema_Inertia_TargetableFloat3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_inertiasequencetechnique_commonsequenceinstance_rigid_bodyschema_Inertia_TargetableFloat3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_inertiasequencetechnique_commonsequenceinstance_rigid_bodyschema_Inertia_TargetableFloat3_ instance.
func (me *XsdGoPkgHasElem_inertiasequencetechnique_commonsequenceinstance_rigid_bodyschema_Inertia_TargetableFloat3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_inertiasequencetechnique_commonsequenceinstance_rigid_bodyschema_Inertia_TargetableFloat3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Inertia.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame struct {
	XsdGoPkgHasElems_Translate

	XsdGoPkgHasElems_Rotate
}

//	If the WalkHandlers.TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame function is not nil (ie. was set by outside code), calls it with this TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame instance.
func (me *TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame) Walk() (err error) {
	if fn := WalkHandlers.TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Translate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Rotate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_mass_framesequencetechnique_commonsequenceinstance_rigid_bodyschema_MassFrame_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame_ struct {
	MassFrame *TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame `xml:"http://www.collada.org/2005/11/COLLADASchema mass_frame"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_mass_framesequencetechnique_commonsequenceinstance_rigid_bodyschema_MassFrame_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mass_framesequencetechnique_commonsequenceinstance_rigid_bodyschema_MassFrame_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_mass_framesequencetechnique_commonsequenceinstance_rigid_bodyschema_MassFrame_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame_ instance.
func (me *XsdGoPkgHasElem_mass_framesequencetechnique_commonsequenceinstance_rigid_bodyschema_MassFrame_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_mass_framesequencetechnique_commonsequenceinstance_rigid_bodyschema_MassFrame_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MassFrame.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	An infinite plane primitive.
//	4 float values that represent the coefficients for the plane’s equation:    Ax + By + Cz + D = 0
type XsdGoPkgHasElem_equationsequenceplaneschema_Equation_Tfloat4_ struct {
	//	4 float values that represent the coefficients for the plane’s equation:    Ax + By + Cz + D = 0
	Equation Tfloat4 `xml:"http://www.collada.org/2005/11/COLLADASchema equation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_equationsequenceplaneschema_Equation_Tfloat4_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_equationsequenceplaneschema_Equation_Tfloat4_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_equationsequenceplaneschema_Equation_Tfloat4_ instance.
func (me *XsdGoPkgHasElem_equationsequenceplaneschema_Equation_Tfloat4_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_equationsequenceplaneschema_Equation_Tfloat4_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPlane struct {
	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	4 float values that represent the coefficients for the plane’s equation:    Ax + By + Cz + D = 0
	XsdGoPkgHasElem_equationsequenceplaneschema_Equation_Tfloat4_
}

//	If the WalkHandlers.TxsdPlane function is not nil (ie. was set by outside code), calls it with this TxsdPlane instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdPlane instance.
func (me *TxsdPlane) Walk() (err error) {
	if fn := WalkHandlers.TxsdPlane; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_equationsequenceplaneschema_Equation_Tfloat4_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Plane struct {
	//	An infinite plane primitive.
	Plane *TxsdPlane `xml:"http://www.collada.org/2005/11/COLLADASchema plane"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Plane function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Plane instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Plane instance.
func (me *XsdGoPkgHasElem_Plane) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Plane; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Plane.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A tapered capsule primitive that is centered on, and aligned with, the local Y axis.
//	Two float values that represent the radii of the tapered capsule at the negative (height/2)
//	Y value.Both ends of the tapered capsule may be elliptical.
type XsdGoPkgHasElem_radius2sequencetapered_capsuleschema_Radius2_Tfloat2_ struct {
	//	Two float values that represent the radii of the tapered capsule at the negative (height/2)
	//	Y value.Both ends of the tapered capsule may be elliptical.
	Radius2 Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema radius2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_radius2sequencetapered_capsuleschema_Radius2_Tfloat2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_radius2sequencetapered_capsuleschema_Radius2_Tfloat2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_radius2sequencetapered_capsuleschema_Radius2_Tfloat2_ instance.
func (me *XsdGoPkgHasElem_radius2sequencetapered_capsuleschema_Radius2_Tfloat2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_radius2sequencetapered_capsuleschema_Radius2_Tfloat2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A float value that represents the length of the line segment connecting the centers of the
//	capping hemispheres.
type XsdGoPkgHasElem_heightsequencetapered_capsuleschema_Height_Tfloat_ struct {
	//	A float value that represents the length of the line segment connecting the centers of the
	//	capping hemispheres.
	Height Tfloat `xml:"http://www.collada.org/2005/11/COLLADASchema height"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_heightsequencetapered_capsuleschema_Height_Tfloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_heightsequencetapered_capsuleschema_Height_Tfloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_heightsequencetapered_capsuleschema_Height_Tfloat_ instance.
func (me *XsdGoPkgHasElem_heightsequencetapered_capsuleschema_Height_Tfloat_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_heightsequencetapered_capsuleschema_Height_Tfloat_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Two float values that represent the radii of the tapered capsule at the positive (height/2)
//	Y value.Both ends of the tapered capsule may be elliptical.
type XsdGoPkgHasElem_radius1sequencetapered_capsuleschema_Radius1_Tfloat2_ struct {
	//	Two float values that represent the radii of the tapered capsule at the positive (height/2)
	//	Y value.Both ends of the tapered capsule may be elliptical.
	Radius1 Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema radius1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_radius1sequencetapered_capsuleschema_Radius1_Tfloat2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_radius1sequencetapered_capsuleschema_Radius1_Tfloat2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_radius1sequencetapered_capsuleschema_Radius1_Tfloat2_ instance.
func (me *XsdGoPkgHasElem_radius1sequencetapered_capsuleschema_Radius1_Tfloat2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_radius1sequencetapered_capsuleschema_Radius1_Tfloat2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdTaperedCapsule struct {
	//	A float value that represents the length of the line segment connecting the centers of the
	//	capping hemispheres.
	XsdGoPkgHasElem_heightsequencetapered_capsuleschema_Height_Tfloat_

	//	Two float values that represent the radii of the tapered capsule at the positive (height/2)
	//	Y value.Both ends of the tapered capsule may be elliptical.
	XsdGoPkgHasElem_radius1sequencetapered_capsuleschema_Radius1_Tfloat2_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	Two float values that represent the radii of the tapered capsule at the negative (height/2)
	//	Y value.Both ends of the tapered capsule may be elliptical.
	XsdGoPkgHasElem_radius2sequencetapered_capsuleschema_Radius2_Tfloat2_
}

//	If the WalkHandlers.TxsdTaperedCapsule function is not nil (ie. was set by outside code), calls it with this TxsdTaperedCapsule instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdTaperedCapsule instance.
func (me *TxsdTaperedCapsule) Walk() (err error) {
	if fn := WalkHandlers.TxsdTaperedCapsule; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_radius2sequencetapered_capsuleschema_Radius2_Tfloat2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_heightsequencetapered_capsuleschema_Height_Tfloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_radius1sequencetapered_capsuleschema_Radius1_Tfloat2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TaperedCapsule struct {
	//	A tapered capsule primitive that is centered on, and aligned with, the local Y axis.
	TaperedCapsule *TxsdTaperedCapsule `xml:"http://www.collada.org/2005/11/COLLADASchema tapered_capsule"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TaperedCapsule function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TaperedCapsule instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_TaperedCapsule instance.
func (me *XsdGoPkgHasElem_TaperedCapsule) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TaperedCapsule; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TaperedCapsule.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A centered sphere primitive.
//	A float value that represents the radius of the sphere
type XsdGoPkgHasElem_radiussequencesphereschema_Radius_Tfloat_ struct {
	//	A float value that represents the radius of the sphere
	Radius Tfloat `xml:"http://www.collada.org/2005/11/COLLADASchema radius"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_radiussequencesphereschema_Radius_Tfloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_radiussequencesphereschema_Radius_Tfloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_radiussequencesphereschema_Radius_Tfloat_ instance.
func (me *XsdGoPkgHasElem_radiussequencesphereschema_Radius_Tfloat_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_radiussequencesphereschema_Radius_Tfloat_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSphere struct {
	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	A float value that represents the radius of the sphere
	XsdGoPkgHasElem_radiussequencesphereschema_Radius_Tfloat_
}

//	If the WalkHandlers.TxsdSphere function is not nil (ie. was set by outside code), calls it with this TxsdSphere instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdSphere instance.
func (me *TxsdSphere) Walk() (err error) {
	if fn := WalkHandlers.TxsdSphere; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_radiussequencesphereschema_Radius_Tfloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Sphere struct {
	//	A centered sphere primitive.
	Sphere *TxsdSphere `xml:"http://www.collada.org/2005/11/COLLADASchema sphere"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Sphere function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Sphere instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Sphere instance.
func (me *XsdGoPkgHasElem_Sphere) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Sphere; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Sphere.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A capsule primitive that is centered on and aligned with the local Y axis.
//	Two float values that represent the radii of the capsule (it may be elliptical)
type XsdGoPkgHasElem_radiussequencecapsuleschema_Radius_Tfloat2_ struct {
	//	Two float values that represent the radii of the capsule (it may be elliptical)
	Radius Tfloat2 `xml:"http://www.collada.org/2005/11/COLLADASchema radius"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_radiussequencecapsuleschema_Radius_Tfloat2_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_radiussequencecapsuleschema_Radius_Tfloat2_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_radiussequencecapsuleschema_Radius_Tfloat2_ instance.
func (me *XsdGoPkgHasElem_radiussequencecapsuleschema_Radius_Tfloat2_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_radiussequencecapsuleschema_Radius_Tfloat2_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCapsule struct {
	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	Two float values that represent the radii of the capsule (it may be elliptical)
	XsdGoPkgHasElem_radiussequencecapsuleschema_Radius_Tfloat2_

	//	A float value that represents the length of the line segment connecting the centers
	//	of the capping hemispheres.
	XsdGoPkgHasElem_heightsequencetapered_capsuleschema_Height_Tfloat_
}

//	If the WalkHandlers.TxsdCapsule function is not nil (ie. was set by outside code), calls it with this TxsdCapsule instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdCapsule instance.
func (me *TxsdCapsule) Walk() (err error) {
	if fn := WalkHandlers.TxsdCapsule; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_radiussequencecapsuleschema_Radius_Tfloat2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_heightsequencetapered_capsuleschema_Height_Tfloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Capsule struct {
	//	A capsule primitive that is centered on and aligned with the local Y axis.
	Capsule *TxsdCapsule `xml:"http://www.collada.org/2005/11/COLLADASchema capsule"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Capsule function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Capsule instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Capsule instance.
func (me *XsdGoPkgHasElem_Capsule) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Capsule; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Capsule.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	An axis-aligned, centered box primitive.
//	3 float values that represent the extents of the box
type XsdGoPkgHasElem_half_extentssequenceboxschema_HalfExtents_Tfloat3_ struct {
	//	3 float values that represent the extents of the box
	HalfExtents Tfloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema half_extents"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_half_extentssequenceboxschema_HalfExtents_Tfloat3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_half_extentssequenceboxschema_HalfExtents_Tfloat3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_half_extentssequenceboxschema_HalfExtents_Tfloat3_ instance.
func (me *XsdGoPkgHasElem_half_extentssequenceboxschema_HalfExtents_Tfloat3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_half_extentssequenceboxschema_HalfExtents_Tfloat3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdBox struct {
	//	3 float values that represent the extents of the box
	XsdGoPkgHasElem_half_extentssequenceboxschema_HalfExtents_Tfloat3_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra
}

//	If the WalkHandlers.TxsdBox function is not nil (ie. was set by outside code), calls it with this TxsdBox instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdBox instance.
func (me *TxsdBox) Walk() (err error) {
	if fn := WalkHandlers.TxsdBox; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_half_extentssequenceboxschema_HalfExtents_Tfloat3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Box struct {
	//	An axis-aligned, centered box primitive.
	Box *TxsdBox `xml:"http://www.collada.org/2005/11/COLLADASchema box"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Box function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Box instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Box instance.
func (me *XsdGoPkgHasElem_Box) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Box; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Box.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Hollow_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_ struct {
	Hollow *TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic `xml:"http://www.collada.org/2005/11/COLLADASchema hollow"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Hollow_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Hollow_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Hollow_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_ instance.
func (me *XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Hollow_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Hollow_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Hollow.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Density_TargetableFloat_ struct {
	Density *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema density"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Density_TargetableFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Density_TargetableFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Density_TargetableFloat_ instance.
func (me *XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Density_TargetableFloat_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Density_TargetableFloat_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Density.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A cylinder primitive that is centered on, and aligned with. the local Y axis.
type TxsdCylinder struct {
	//	float2 values that represent the radii of the cylinder.
	XsdGoPkgHasElem_radiussequencecapsuleschema_Radius_Tfloat2_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	A float value that represents the length of the cylinder along the Y axis.
	XsdGoPkgHasElem_heightsequencetapered_capsuleschema_Height_Tfloat_
}

//	If the WalkHandlers.TxsdCylinder function is not nil (ie. was set by outside code), calls it with this TxsdCylinder instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdCylinder instance.
func (me *TxsdCylinder) Walk() (err error) {
	if fn := WalkHandlers.TxsdCylinder; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_heightsequencetapered_capsuleschema_Height_Tfloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_radiussequencecapsuleschema_Radius_Tfloat2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Cylinder struct {
	//	A cylinder primitive that is centered on, and aligned with. the local Y axis.
	Cylinder *TxsdCylinder `xml:"http://www.collada.org/2005/11/COLLADASchema cylinder"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Cylinder function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Cylinder instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Cylinder instance.
func (me *XsdGoPkgHasElem_Cylinder) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Cylinder; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Cylinder.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The instance_geometry element declares the instantiation of a COLLADA geometry resource.
type XsdGoPkgHasElem_InstanceGeometry struct {
	//	The instance_geometry element declares the instantiation of a COLLADA geometry resource.
	InstanceGeometry *TxsdInstanceGeometry `xml:"http://www.collada.org/2005/11/COLLADASchema instance_geometry"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InstanceGeometry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstanceGeometry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_InstanceGeometry instance.
func (me *XsdGoPkgHasElem_InstanceGeometry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InstanceGeometry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.InstanceGeometry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A tapered cylinder primitive that is centered on and aligned with the local Y axis.
type TxsdTaperedCylinder struct {
	//	Two float values that represent the radii of the tapered cylinder at the positive (height/2)
	//	Y value. Both ends of the tapered cylinder may be elliptical.
	XsdGoPkgHasElem_radius1sequencetapered_capsuleschema_Radius1_Tfloat2_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	Two float values that represent the radii of the tapered cylinder at the negative (height/2)
	//	Y value.Both ends of the tapered cylinder may be elliptical.
	XsdGoPkgHasElem_radius2sequencetapered_capsuleschema_Radius2_Tfloat2_

	//	A float value that represents the length of the cylinder along the Y axis.
	XsdGoPkgHasElem_heightsequencetapered_capsuleschema_Height_Tfloat_
}

//	If the WalkHandlers.TxsdTaperedCylinder function is not nil (ie. was set by outside code), calls it with this TxsdTaperedCylinder instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdTaperedCylinder instance.
func (me *TxsdTaperedCylinder) Walk() (err error) {
	if fn := WalkHandlers.TxsdTaperedCylinder; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_radius2sequencetapered_capsuleschema_Radius2_Tfloat2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_heightsequencetapered_capsuleschema_Height_Tfloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_radius1sequencetapered_capsuleschema_Radius1_Tfloat2_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TaperedCylinder struct {
	//	A tapered cylinder primitive that is centered on and aligned with the local Y axis.
	TaperedCylinder *TxsdTaperedCylinder `xml:"http://www.collada.org/2005/11/COLLADASchema tapered_cylinder"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TaperedCylinder function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TaperedCylinder instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_TaperedCylinder instance.
func (me *XsdGoPkgHasElem_TaperedCylinder) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TaperedCylinder; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TaperedCylinder.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape struct {
	XsdGoPkgHasElem_masssequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_

	XsdGoPkgHasElem_Sphere

	XsdGoPkgHasElems_Translate

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	XsdGoPkgHasElem_Capsule

	XsdGoPkgHasElem_Box

	XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Hollow_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_

	XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Density_TargetableFloat_

	XsdGoPkgHasElem_PhysicsMaterial

	XsdGoPkgHasElem_Cylinder

	XsdGoPkgHasElem_InstanceGeometry

	XsdGoPkgHasElem_TaperedCylinder

	XsdGoPkgHasElem_Plane

	XsdGoPkgHasElem_TaperedCapsule

	XsdGoPkgHasElem_InstancePhysicsMaterial

	XsdGoPkgHasElems_Rotate
}

//	If the WalkHandlers.TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape function is not nil (ie. was set by outside code), calls it with this TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape instance as the single argument. Then calls the Walk() method on 16/16 embed(s) and 0/0 field(s) belonging to this TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape instance.
func (me *TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape) Walk() (err error) {
	if fn := WalkHandlers.TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Density_TargetableFloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PhysicsMaterial.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Cylinder.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_InstanceGeometry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaperedCylinder.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Plane.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaperedCapsule.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_InstancePhysicsMaterial.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Rotate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_masssequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sphere.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Translate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Capsule.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Box.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Hollow_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_shapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Shape_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape_ struct {
	Shapes []*TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape `xml:"http://www.collada.org/2005/11/COLLADASchema shape"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_shapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Shape_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_shapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Shape_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_shapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Shape_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape_ instance.
func (me *XsdGoPkgHasElems_shapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Shape_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_shapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Shape_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Shapes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdInstanceRigidBodySequenceTechniqueCommon struct {
	//	Specifies the initial linear velocity of the rigid_body instance.
	XsdGoPkgHasElem_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_Velocity_Tfloat3_000000

	XsdGoPkgHasElem_dynamicsequencetechnique_commonsequenceinstance_rigid_bodyschema_Dynamic_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic_

	XsdGoPkgHasElem_InstancePhysicsMaterial

	//	Specifies the initial angular velocity of the rigid_body instance in degrees per second
	//	around each axis, in the form of an X-Y-Z Euler rotation.
	XsdGoPkgHasElem_angular_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_AngularVelocity_Tfloat3_000000

	XsdGoPkgHasElem_masssequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_

	XsdGoPkgHasElem_PhysicsMaterial

	XsdGoPkgHasElem_inertiasequencetechnique_commonsequenceinstance_rigid_bodyschema_Inertia_TargetableFloat3_

	XsdGoPkgHasElem_mass_framesequencetechnique_commonsequenceinstance_rigid_bodyschema_MassFrame_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame_

	XsdGoPkgHasElems_shapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Shape_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape_
}

//	If the WalkHandlers.TxsdInstanceRigidBodySequenceTechniqueCommon function is not nil (ie. was set by outside code), calls it with this TxsdInstanceRigidBodySequenceTechniqueCommon instance as the single argument. Then calls the Walk() method on 9/9 embed(s) and 0/0 field(s) belonging to this TxsdInstanceRigidBodySequenceTechniqueCommon instance.
func (me *TxsdInstanceRigidBodySequenceTechniqueCommon) Walk() (err error) {
	if fn := WalkHandlers.TxsdInstanceRigidBodySequenceTechniqueCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_masssequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PhysicsMaterial.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_inertiasequencetechnique_commonsequenceinstance_rigid_bodyschema_Inertia_TargetableFloat3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_mass_framesequencetechnique_commonsequenceinstance_rigid_bodyschema_MassFrame_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_shapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Shape_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_Velocity_Tfloat3_000000.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_dynamicsequencetechnique_commonsequenceinstance_rigid_bodyschema_Dynamic_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_InstancePhysicsMaterial.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_angular_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_AngularVelocity_Tfloat3_000000.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_technique_commonsequenceinstance_rigid_bodyschema_TechniqueCommon_TxsdInstanceRigidBodySequenceTechniqueCommon_ struct {
	//	The technique_common element specifies the instance_rigid_body information for the common
	//	profile which all COLLADA implementations need to support.
	TechniqueCommon *TxsdInstanceRigidBodySequenceTechniqueCommon `xml:"http://www.collada.org/2005/11/COLLADASchema technique_common"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_technique_commonsequenceinstance_rigid_bodyschema_TechniqueCommon_TxsdInstanceRigidBodySequenceTechniqueCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_technique_commonsequenceinstance_rigid_bodyschema_TechniqueCommon_TxsdInstanceRigidBodySequenceTechniqueCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_technique_commonsequenceinstance_rigid_bodyschema_TechniqueCommon_TxsdInstanceRigidBodySequenceTechniqueCommon_ instance.
func (me *XsdGoPkgHasElem_technique_commonsequenceinstance_rigid_bodyschema_TechniqueCommon_TxsdInstanceRigidBodySequenceTechniqueCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_technique_commonsequenceinstance_rigid_bodyschema_TechniqueCommon_TxsdInstanceRigidBodySequenceTechniqueCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TechniqueCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The body attribute indicates which rigid_body to instantiate. Required attribute.
type XsdGoPkgHasAttr_Body_XsdtNCName_ struct {
	//	The body attribute indicates which rigid_body to instantiate. Required attribute.
	Body xsdt.NCName `xml:"http://www.collada.org/2005/11/COLLADASchema body,attr"`
}

type TxsdInstanceRigidBody struct {
	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The technique_common element specifies the instance_rigid_body information for the common
	//	profile which all COLLADA implementations need to support.
	XsdGoPkgHasElem_technique_commonsequenceinstance_rigid_bodyschema_TechniqueCommon_TxsdInstanceRigidBodySequenceTechniqueCommon_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The body attribute indicates which rigid_body to instantiate. Required attribute.
	XsdGoPkgHasAttr_Body_XsdtNCName_

	//	The target attribute indicates which node is influenced by this rigid_body instance.
	//	Required attribute
	XsdGoPkgHasAttr_Target_XsdtAnyURI_

	//	The sid attribute is a text string value containing the sub-identifier of this element. This
	//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	//	This element may contain any number of non-common profile techniques.
	XsdGoPkgHasElems_Technique
}

//	If the WalkHandlers.TxsdInstanceRigidBody function is not nil (ie. was set by outside code), calls it with this TxsdInstanceRigidBody instance as the single argument. Then calls the Walk() method on 3/7 embed(s) and 0/0 field(s) belonging to this TxsdInstanceRigidBody instance.
func (me *TxsdInstanceRigidBody) Walk() (err error) {
	if fn := WalkHandlers.TxsdInstanceRigidBody; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Technique.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_technique_commonsequenceinstance_rigid_bodyschema_TechniqueCommon_TxsdInstanceRigidBodySequenceTechniqueCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_InstanceRigidBody struct {
	//	This element allows instancing a rigid_body within an instance_physics_model.
	RigidBodyInstances []*TxsdInstanceRigidBody `xml:"http://www.collada.org/2005/11/COLLADASchema instance_rigid_body"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InstanceRigidBody function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstanceRigidBody instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstanceRigidBody instance.
func (me *XsdGoPkgHasElems_InstanceRigidBody) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InstanceRigidBody; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RigidBodyInstances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The instance_force_field element declares the instantiation of a COLLADA force_field resource.
type XsdGoPkgHasElems_InstanceForceField struct {
	//	The instance_force_field element declares the instantiation of a COLLADA force_field resource.
	ForceFieldInstances []*TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_force_field"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InstanceForceField function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstanceForceField instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstanceForceField instance.
func (me *XsdGoPkgHasElems_InstanceForceField) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InstanceForceField; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ForceFieldInstances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdInstancePhysicsModel struct {
	//	The url attribute refers to resource.  This may refer to a local resource using a relative URL
	//	fragment identifier that begins with the “#” character. The url attribute may refer to an external
	//	resource using an absolute or relative URL.
	XsdGoPkgHasAttr_Url_XsdtAnyURI_

	//	The instance_physics_model element may instance any number of rigid_constraint elements.
	XsdGoPkgHasElems_InstanceRigidConstraint

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The parent attribute points to the id of a node in the visual scene. This allows a physics model
	//	to be instantiated under a specific transform node, which will dictate the initial position and
	//	orientation, and could be animated to influence kinematic rigid bodies.
	XsdGoPkgHasAttr_Parent_XsdtAnyURI_

	//	The instance_physics_model element may instance any number of rigid_body elements.
	XsdGoPkgHasElems_InstanceRigidBody

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The instance_physics_model element may instance any number of force_field elements.
	XsdGoPkgHasElems_InstanceForceField

	//	The sid attribute is a text string value containing the sub-identifier of this element. This
	//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_
}

//	If the WalkHandlers.TxsdInstancePhysicsModel function is not nil (ie. was set by outside code), calls it with this TxsdInstancePhysicsModel instance as the single argument. Then calls the Walk() method on 4/8 embed(s) and 0/0 field(s) belonging to this TxsdInstancePhysicsModel instance.
func (me *TxsdInstancePhysicsModel) Walk() (err error) {
	if fn := WalkHandlers.TxsdInstancePhysicsModel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_InstanceRigidBody.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_InstanceForceField.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_InstanceRigidConstraint.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_InstancePhysicsModel struct {
	//	This element allows instancing physics model within another physics model, or in a physics scene.
	PhysicsModelInstances []*TxsdInstancePhysicsModel `xml:"http://www.collada.org/2005/11/COLLADASchema instance_physics_model"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InstancePhysicsModel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstancePhysicsModel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstancePhysicsModel instance.
func (me *XsdGoPkgHasElems_InstancePhysicsModel) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InstancePhysicsModel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PhysicsModelInstances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The technique_common element specifies the physics_scene information for the common profile
//	which all COLLADA implementations need to support.
//	The time_step for the physics_scene.
type XsdGoPkgHasElem_time_stepsequencetechnique_commonsequencephysics_sceneschema_TimeStep_TargetableFloat_ struct {
	//	The time_step for the physics_scene.
	TimeStep *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema time_step"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_time_stepsequencetechnique_commonsequencephysics_sceneschema_TimeStep_TargetableFloat_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_time_stepsequencetechnique_commonsequencephysics_sceneschema_TimeStep_TargetableFloat_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_time_stepsequencetechnique_commonsequencephysics_sceneschema_TimeStep_TargetableFloat_ instance.
func (me *XsdGoPkgHasElem_time_stepsequencetechnique_commonsequencephysics_sceneschema_TimeStep_TargetableFloat_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_time_stepsequencetechnique_commonsequencephysics_sceneschema_TimeStep_TargetableFloat_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TimeStep.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The gravity vector to use for the physics_scene.
type XsdGoPkgHasElem_gravitysequencetechnique_commonsequencephysics_sceneschema_Gravity_TargetableFloat3_ struct {
	//	The gravity vector to use for the physics_scene.
	Gravity *TargetableFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema gravity"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_gravitysequencetechnique_commonsequencephysics_sceneschema_Gravity_TargetableFloat3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_gravitysequencetechnique_commonsequencephysics_sceneschema_Gravity_TargetableFloat3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_gravitysequencetechnique_commonsequencephysics_sceneschema_Gravity_TargetableFloat3_ instance.
func (me *XsdGoPkgHasElem_gravitysequencetechnique_commonsequencephysics_sceneschema_Gravity_TargetableFloat3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_gravitysequencetechnique_commonsequencephysics_sceneschema_Gravity_TargetableFloat3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Gravity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPhysicsSceneSequenceTechniqueCommon struct {
	//	The gravity vector to use for the physics_scene.
	XsdGoPkgHasElem_gravitysequencetechnique_commonsequencephysics_sceneschema_Gravity_TargetableFloat3_

	//	The time_step for the physics_scene.
	XsdGoPkgHasElem_time_stepsequencetechnique_commonsequencephysics_sceneschema_TimeStep_TargetableFloat_
}

//	If the WalkHandlers.TxsdPhysicsSceneSequenceTechniqueCommon function is not nil (ie. was set by outside code), calls it with this TxsdPhysicsSceneSequenceTechniqueCommon instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdPhysicsSceneSequenceTechniqueCommon instance.
func (me *TxsdPhysicsSceneSequenceTechniqueCommon) Walk() (err error) {
	if fn := WalkHandlers.TxsdPhysicsSceneSequenceTechniqueCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_time_stepsequencetechnique_commonsequencephysics_sceneschema_TimeStep_TargetableFloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_gravitysequencetechnique_commonsequencephysics_sceneschema_Gravity_TargetableFloat3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_technique_commonsequencephysics_sceneschema_TechniqueCommon_TxsdPhysicsSceneSequenceTechniqueCommon_ struct {
	//	The technique_common element specifies the physics_scene information for the common profile
	//	which all COLLADA implementations need to support.
	TechniqueCommon *TxsdPhysicsSceneSequenceTechniqueCommon `xml:"http://www.collada.org/2005/11/COLLADASchema technique_common"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_technique_commonsequencephysics_sceneschema_TechniqueCommon_TxsdPhysicsSceneSequenceTechniqueCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_technique_commonsequencephysics_sceneschema_TechniqueCommon_TxsdPhysicsSceneSequenceTechniqueCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_technique_commonsequencephysics_sceneschema_TechniqueCommon_TxsdPhysicsSceneSequenceTechniqueCommon_ instance.
func (me *XsdGoPkgHasElem_technique_commonsequencephysics_sceneschema_TechniqueCommon_TxsdPhysicsSceneSequenceTechniqueCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_technique_commonsequencephysics_sceneschema_TechniqueCommon_TxsdPhysicsSceneSequenceTechniqueCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TechniqueCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPhysicsScene struct {
	//	There may be any number of instance_physics_model elements.
	XsdGoPkgHasElems_InstancePhysicsModel

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	There may be any number of instance_force_field elements.
	XsdGoPkgHasElems_InstanceForceField

	//	This element may contain any number of non-common profile techniques.
	XsdGoPkgHasElems_Technique

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The physics_scene element may contain an asset element.
	XsdGoPkgHasElem_Asset

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The technique_common element specifies the physics_scene information for the common profile
	//	which all COLLADA implementations need to support.
	XsdGoPkgHasElem_technique_commonsequencephysics_sceneschema_TechniqueCommon_TxsdPhysicsSceneSequenceTechniqueCommon_
}

//	If the WalkHandlers.TxsdPhysicsScene function is not nil (ie. was set by outside code), calls it with this TxsdPhysicsScene instance as the single argument. Then calls the Walk() method on 6/8 embed(s) and 0/0 field(s) belonging to this TxsdPhysicsScene instance.
func (me *TxsdPhysicsScene) Walk() (err error) {
	if fn := WalkHandlers.TxsdPhysicsScene; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_technique_commonsequencephysics_sceneschema_TechniqueCommon_TxsdPhysicsSceneSequenceTechniqueCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_InstancePhysicsModel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_InstanceForceField.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Technique.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PhysicsScene struct {
	PhysicsScenes []*TxsdPhysicsScene `xml:"http://www.collada.org/2005/11/COLLADASchema physics_scene"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PhysicsScene function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PhysicsScene instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PhysicsScene instance.
func (me *XsdGoPkgHasElems_PhysicsScene) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PhysicsScene; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PhysicsScenes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdLibraryPhysicsScenes struct {
	//	There must be at least one physics_scene element.
	XsdGoPkgHasElems_PhysicsScene

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The library_physics_scenes element may contain an asset element.
	XsdGoPkgHasElem_Asset

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_
}

//	If the WalkHandlers.TxsdLibraryPhysicsScenes function is not nil (ie. was set by outside code), calls it with this TxsdLibraryPhysicsScenes instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdLibraryPhysicsScenes instance.
func (me *TxsdLibraryPhysicsScenes) Walk() (err error) {
	if fn := WalkHandlers.TxsdLibraryPhysicsScenes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_PhysicsScene.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LibraryPhysicsScenes struct {
	//	The library_physics_scenes element declares a module of physics_scene elements.
	PhysicsScenesLibraries []*TxsdLibraryPhysicsScenes `xml:"http://www.collada.org/2005/11/COLLADASchema library_physics_scenes"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LibraryPhysicsScenes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LibraryPhysicsScenes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LibraryPhysicsScenes instance.
func (me *XsdGoPkgHasElems_LibraryPhysicsScenes) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LibraryPhysicsScenes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PhysicsScenesLibraries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The library_materials element declares a module of material elements.
//	Materials describe the visual appearance of a geometric object.
type TxsdMaterial struct {
	//	The material must instance an effect.
	XsdGoPkgHasElem_InstanceEffect

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The material element may contain an asset element.
	XsdGoPkgHasElem_Asset

	//	The id attribute is a text string containing the unique identifier of this element. This value
	//	must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_
}

//	If the WalkHandlers.TxsdMaterial function is not nil (ie. was set by outside code), calls it with this TxsdMaterial instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdMaterial instance.
func (me *TxsdMaterial) Walk() (err error) {
	if fn := WalkHandlers.TxsdMaterial; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_InstanceEffect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Material struct {
	//	Materials describe the visual appearance of a geometric object.
	Materials []*TxsdMaterial `xml:"http://www.collada.org/2005/11/COLLADASchema material"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Material function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Material instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Material instance.
func (me *XsdGoPkgHasElems_Material) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Material; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Materials {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdLibraryMaterials struct {
	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	There must be at least one material element.
	XsdGoPkgHasElems_Material

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The library_materials element may contain an asset element.
	XsdGoPkgHasElem_Asset

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_
}

//	If the WalkHandlers.TxsdLibraryMaterials function is not nil (ie. was set by outside code), calls it with this TxsdLibraryMaterials instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdLibraryMaterials instance.
func (me *TxsdLibraryMaterials) Walk() (err error) {
	if fn := WalkHandlers.TxsdLibraryMaterials; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Material.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LibraryMaterials struct {
	//	The library_materials element declares a module of material elements.
	MaterialsLibraries []*TxsdLibraryMaterials `xml:"http://www.collada.org/2005/11/COLLADASchema library_materials"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LibraryMaterials function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LibraryMaterials instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LibraryMaterials instance.
func (me *XsdGoPkgHasElems_LibraryMaterials) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LibraryMaterials; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MaterialsLibraries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The library_physics_models element declares a module of physics_model elements.
//	This element allows for building complex combinations of rigid-bodies and constraints that
//	may be instantiated multiple times.
//	This element allows for describing simulated bodies that do not deform. These bodies may or may
//	not be connected by constraints (hinge, ball-joint etc.).  Rigid-bodies, constraints etc. are
//	encapsulated in physics_model elements to allow for instantiating complex models.
//	The technique_common element specifies the rigid_body information for the common profile which all
//	COLLADA implementations need to support.
//	This element allows for describing components of a rigid_body.
//	If true, the mass is distributed along the surface of the shape
type XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequencerigid_bodyschema_Hollow_TxsdRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_ struct {
	//	If true, the mass is distributed along the surface of the shape
	Hollow *TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic `xml:"http://www.collada.org/2005/11/COLLADASchema hollow"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequencerigid_bodyschema_Hollow_TxsdRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequencerigid_bodyschema_Hollow_TxsdRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequencerigid_bodyschema_Hollow_TxsdRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_ instance.
func (me *XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequencerigid_bodyschema_Hollow_TxsdRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequencerigid_bodyschema_Hollow_TxsdRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Hollow.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRigidBodySequenceTechniqueCommonSequenceShape struct {
	//	Allows a tranformation for the shape.
	XsdGoPkgHasElems_Rotate

	//	The mass of the shape.
	XsdGoPkgHasElem_masssequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_

	//	Defines a box to use for this shape.
	XsdGoPkgHasElem_Box

	//	Defines a physics_material for the shape.
	XsdGoPkgHasElem_PhysicsMaterial

	//	Instances a geometry to use to define this shape.
	XsdGoPkgHasElem_InstanceGeometry

	//	The density of the shape.
	XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Density_TargetableFloat_

	//	If true, the mass is distributed along the surface of the shape
	XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequencerigid_bodyschema_Hollow_TxsdRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_

	//	Defines a tapered_capsule to use for this shape.
	XsdGoPkgHasElem_TaperedCapsule

	//	Defines a sphere to use for this shape.
	XsdGoPkgHasElem_Sphere

	//	Defines a tapered_cylinder to use for this shape.
	XsdGoPkgHasElem_TaperedCylinder

	//	Defines a plane to use for this shape.
	XsdGoPkgHasElem_Plane

	//	Defines a capsule to use for this shape.
	XsdGoPkgHasElem_Capsule

	//	References a physics_material for the shape.
	XsdGoPkgHasElem_InstancePhysicsMaterial

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	Allows a tranformation for the shape.
	XsdGoPkgHasElems_Translate

	//	Defines a cyliner to use for this shape.
	XsdGoPkgHasElem_Cylinder
}

//	If the WalkHandlers.TxsdRigidBodySequenceTechniqueCommonSequenceShape function is not nil (ie. was set by outside code), calls it with this TxsdRigidBodySequenceTechniqueCommonSequenceShape instance as the single argument. Then calls the Walk() method on 16/16 embed(s) and 0/0 field(s) belonging to this TxsdRigidBodySequenceTechniqueCommonSequenceShape instance.
func (me *TxsdRigidBodySequenceTechniqueCommonSequenceShape) Walk() (err error) {
	if fn := WalkHandlers.TxsdRigidBodySequenceTechniqueCommonSequenceShape; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Translate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Cylinder.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Rotate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_masssequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Box.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PhysicsMaterial.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_InstanceGeometry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Density_TargetableFloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequencerigid_bodyschema_Hollow_TxsdRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaperedCapsule.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sphere.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TaperedCylinder.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Plane.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Capsule.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_InstancePhysicsMaterial.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_shapesequencetechnique_commonsequencerigid_bodyschema_Shape_TxsdRigidBodySequenceTechniqueCommonSequenceShape_ struct {
	//	This element allows for describing components of a rigid_body.
	Shapes []*TxsdRigidBodySequenceTechniqueCommonSequenceShape `xml:"http://www.collada.org/2005/11/COLLADASchema shape"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_shapesequencetechnique_commonsequencerigid_bodyschema_Shape_TxsdRigidBodySequenceTechniqueCommonSequenceShape_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_shapesequencetechnique_commonsequencerigid_bodyschema_Shape_TxsdRigidBodySequenceTechniqueCommonSequenceShape_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_shapesequencetechnique_commonsequencerigid_bodyschema_Shape_TxsdRigidBodySequenceTechniqueCommonSequenceShape_ instance.
func (me *XsdGoPkgHasElems_shapesequencetechnique_commonsequencerigid_bodyschema_Shape_TxsdRigidBodySequenceTechniqueCommonSequenceShape_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_shapesequencetechnique_commonsequencerigid_bodyschema_Shape_TxsdRigidBodySequenceTechniqueCommonSequenceShape_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Shapes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Defines the center and orientation of mass of the rigid-body relative to the local origin of the
//	“root” shape.This makes the off-diagonal elements of the inertia tensor (products of inertia) all
//	0 and allows us to just store the diagonal elements (moments of inertia).
type XsdGoPkgHasElem_mass_framesequencetechnique_commonsequencerigid_bodyschema_MassFrame_TxsdRigidBodySequenceTechniqueCommonSequenceMassFrame_ struct {
	//	Defines the center and orientation of mass of the rigid-body relative to the local origin of the
	//	“root” shape.This makes the off-diagonal elements of the inertia tensor (products of inertia) all
	//	0 and allows us to just store the diagonal elements (moments of inertia).
	MassFrame *TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame `xml:"http://www.collada.org/2005/11/COLLADASchema mass_frame"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_mass_framesequencetechnique_commonsequencerigid_bodyschema_MassFrame_TxsdRigidBodySequenceTechniqueCommonSequenceMassFrame_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_mass_framesequencetechnique_commonsequencerigid_bodyschema_MassFrame_TxsdRigidBodySequenceTechniqueCommonSequenceMassFrame_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_mass_framesequencetechnique_commonsequencerigid_bodyschema_MassFrame_TxsdRigidBodySequenceTechniqueCommonSequenceMassFrame_ instance.
func (me *XsdGoPkgHasElem_mass_framesequencetechnique_commonsequencerigid_bodyschema_MassFrame_TxsdRigidBodySequenceTechniqueCommonSequenceMassFrame_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_mass_framesequencetechnique_commonsequencerigid_bodyschema_MassFrame_TxsdRigidBodySequenceTechniqueCommonSequenceMassFrame_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MassFrame.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	If false, the rigid_body is not moveable
type XsdGoPkgHasElem_dynamicsequencetechnique_commonsequencerigid_bodyschema_Dynamic_TxsdRigidBodySequenceTechniqueCommonSequenceDynamic_ struct {
	//	If false, the rigid_body is not moveable
	Dynamic *TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic `xml:"http://www.collada.org/2005/11/COLLADASchema dynamic"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_dynamicsequencetechnique_commonsequencerigid_bodyschema_Dynamic_TxsdRigidBodySequenceTechniqueCommonSequenceDynamic_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_dynamicsequencetechnique_commonsequencerigid_bodyschema_Dynamic_TxsdRigidBodySequenceTechniqueCommonSequenceDynamic_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_dynamicsequencetechnique_commonsequencerigid_bodyschema_Dynamic_TxsdRigidBodySequenceTechniqueCommonSequenceDynamic_ instance.
func (me *XsdGoPkgHasElem_dynamicsequencetechnique_commonsequencerigid_bodyschema_Dynamic_TxsdRigidBodySequenceTechniqueCommonSequenceDynamic_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_dynamicsequencetechnique_commonsequencerigid_bodyschema_Dynamic_TxsdRigidBodySequenceTechniqueCommonSequenceDynamic_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Dynamic.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRigidBodySequenceTechniqueCommon struct {
	//	Defines a physics_material for the rigid_body.
	XsdGoPkgHasElem_PhysicsMaterial

	//	float3 – The diagonal elements of the inertia tensor (moments of inertia), which is represented
	//	in the local frame of the center of mass. See above.
	XsdGoPkgHasElem_inertiasequencetechnique_commonsequenceinstance_rigid_bodyschema_Inertia_TargetableFloat3_

	//	This element allows for describing components of a rigid_body.
	XsdGoPkgHasElems_shapesequencetechnique_commonsequencerigid_bodyschema_Shape_TxsdRigidBodySequenceTechniqueCommonSequenceShape_

	//	Defines the center and orientation of mass of the rigid-body relative to the local origin of the
	//	“root” shape.This makes the off-diagonal elements of the inertia tensor (products of inertia) all
	//	0 and allows us to just store the diagonal elements (moments of inertia).
	XsdGoPkgHasElem_mass_framesequencetechnique_commonsequencerigid_bodyschema_MassFrame_TxsdRigidBodySequenceTechniqueCommonSequenceMassFrame_

	//	If false, the rigid_body is not moveable
	XsdGoPkgHasElem_dynamicsequencetechnique_commonsequencerigid_bodyschema_Dynamic_TxsdRigidBodySequenceTechniqueCommonSequenceDynamic_

	//	References a physics_material for the rigid_body.
	XsdGoPkgHasElem_InstancePhysicsMaterial

	//	The total mass of the rigid-body
	XsdGoPkgHasElem_masssequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_
}

//	If the WalkHandlers.TxsdRigidBodySequenceTechniqueCommon function is not nil (ie. was set by outside code), calls it with this TxsdRigidBodySequenceTechniqueCommon instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TxsdRigidBodySequenceTechniqueCommon instance.
func (me *TxsdRigidBodySequenceTechniqueCommon) Walk() (err error) {
	if fn := WalkHandlers.TxsdRigidBodySequenceTechniqueCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_InstancePhysicsMaterial.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_masssequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PhysicsMaterial.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_inertiasequencetechnique_commonsequenceinstance_rigid_bodyschema_Inertia_TargetableFloat3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_shapesequencetechnique_commonsequencerigid_bodyschema_Shape_TxsdRigidBodySequenceTechniqueCommonSequenceShape_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_mass_framesequencetechnique_commonsequencerigid_bodyschema_MassFrame_TxsdRigidBodySequenceTechniqueCommonSequenceMassFrame_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_dynamicsequencetechnique_commonsequencerigid_bodyschema_Dynamic_TxsdRigidBodySequenceTechniqueCommonSequenceDynamic_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_technique_commonsequencerigid_bodyschema_TechniqueCommon_TxsdRigidBodySequenceTechniqueCommon_ struct {
	//	The technique_common element specifies the rigid_body information for the common profile which all
	//	COLLADA implementations need to support.
	TechniqueCommon *TxsdRigidBodySequenceTechniqueCommon `xml:"http://www.collada.org/2005/11/COLLADASchema technique_common"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_technique_commonsequencerigid_bodyschema_TechniqueCommon_TxsdRigidBodySequenceTechniqueCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_technique_commonsequencerigid_bodyschema_TechniqueCommon_TxsdRigidBodySequenceTechniqueCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_technique_commonsequencerigid_bodyschema_TechniqueCommon_TxsdRigidBodySequenceTechniqueCommon_ instance.
func (me *XsdGoPkgHasElem_technique_commonsequencerigid_bodyschema_TechniqueCommon_TxsdRigidBodySequenceTechniqueCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_technique_commonsequencerigid_bodyschema_TechniqueCommon_TxsdRigidBodySequenceTechniqueCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TechniqueCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRigidBody struct {
	//	The sid attribute is a text string value containing the sub-identifier of this element. This
	//	value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	This element may contain any number of non-common profile techniques.
	XsdGoPkgHasElems_Technique

	//	The technique_common element specifies the rigid_body information for the common profile which all
	//	COLLADA implementations need to support.
	XsdGoPkgHasElem_technique_commonsequencerigid_bodyschema_TechniqueCommon_TxsdRigidBodySequenceTechniqueCommon_
}

//	If the WalkHandlers.TxsdRigidBody function is not nil (ie. was set by outside code), calls it with this TxsdRigidBody instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdRigidBody instance.
func (me *TxsdRigidBody) Walk() (err error) {
	if fn := WalkHandlers.TxsdRigidBody; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_technique_commonsequencerigid_bodyschema_TechniqueCommon_TxsdRigidBodySequenceTechniqueCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Technique.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RigidBody struct {
	//	This element allows for describing simulated bodies that do not deform. These bodies may or may
	//	not be connected by constraints (hinge, ball-joint etc.).  Rigid-bodies, constraints etc. are
	//	encapsulated in physics_model elements to allow for instantiating complex models.
	RigidBodies []*TxsdRigidBody `xml:"http://www.collada.org/2005/11/COLLADASchema rigid_body"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RigidBody function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RigidBody instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RigidBody instance.
func (me *XsdGoPkgHasElems_RigidBody) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RigidBody; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RigidBodies {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	This element allows for connecting components, such as rigid_body into complex physics models
//	with moveable parts.
//	Defines an attachment to a rigid-body or a node.
//	The “rigid_body” attribute is a relative reference to a rigid-body within the same
//	physics_model.
type XsdGoPkgHasAttr_RigidBody_XsdtAnyURI_ struct {
	//	The “rigid_body” attribute is a relative reference to a rigid-body within the same
	//	physics_model.
	RigidBody xsdt.AnyURI `xml:"http://www.collada.org/2005/11/COLLADASchema rigid_body,attr"`
}

type TxsdRigidConstraintSequenceAttachment struct {
	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	Allows you to "position" the attachment point.
	XsdGoPkgHasElems_Rotate

	//	Allows you to "position" the attachment point.
	XsdGoPkgHasElems_Translate

	//	The “rigid_body” attribute is a relative reference to a rigid-body within the same physics_model.
	XsdGoPkgHasAttr_RigidBody_XsdtAnyURI_
}

//	If the WalkHandlers.TxsdRigidConstraintSequenceAttachment function is not nil (ie. was set by outside code), calls it with this TxsdRigidConstraintSequenceAttachment instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TxsdRigidConstraintSequenceAttachment instance.
func (me *TxsdRigidConstraintSequenceAttachment) Walk() (err error) {
	if fn := WalkHandlers.TxsdRigidConstraintSequenceAttachment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Rotate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Translate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_attachmentsequencerigid_constraintschema_Attachment_TxsdRigidConstraintSequenceAttachment_ struct {
	//	Defines an attachment to a rigid-body or a node.
	Attachment *TxsdRigidConstraintSequenceAttachment `xml:"http://www.collada.org/2005/11/COLLADASchema attachment"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_attachmentsequencerigid_constraintschema_Attachment_TxsdRigidConstraintSequenceAttachment_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_attachmentsequencerigid_constraintschema_Attachment_TxsdRigidConstraintSequenceAttachment_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_attachmentsequencerigid_constraintschema_Attachment_TxsdRigidConstraintSequenceAttachment_ instance.
func (me *XsdGoPkgHasElem_attachmentsequencerigid_constraintschema_Attachment_TxsdRigidConstraintSequenceAttachment_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_attachmentsequencerigid_constraintschema_Attachment_TxsdRigidConstraintSequenceAttachment_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Attachment.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Defines the attachment (to a rigid_body or a node) to be used as the reference-frame.
type XsdGoPkgHasElem_ref_attachmentsequencerigid_constraintschema_RefAttachment_TxsdRigidConstraintSequenceRefAttachment_ struct {
	//	Defines the attachment (to a rigid_body or a node) to be used as the reference-frame.
	RefAttachment *TxsdRigidConstraintSequenceAttachment `xml:"http://www.collada.org/2005/11/COLLADASchema ref_attachment"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ref_attachmentsequencerigid_constraintschema_RefAttachment_TxsdRigidConstraintSequenceRefAttachment_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ref_attachmentsequencerigid_constraintschema_RefAttachment_TxsdRigidConstraintSequenceRefAttachment_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ref_attachmentsequencerigid_constraintschema_RefAttachment_TxsdRigidConstraintSequenceRefAttachment_ instance.
func (me *XsdGoPkgHasElem_ref_attachmentsequencerigid_constraintschema_RefAttachment_TxsdRigidConstraintSequenceRefAttachment_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ref_attachmentsequencerigid_constraintschema_RefAttachment_TxsdRigidConstraintSequenceRefAttachment_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RefAttachment.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The technique_common element specifies the rigid_constraint information for the common profile
//	which all COLLADA implementations need to support.
//	If false, the constraint doesn’t exert any force or influence on the rigid bodies.
type XsdGoPkgHasElem_enabledsequencetechnique_commonsequencerigid_constraintschema_Enabled_TxsdRigidConstraintSequenceTechniqueCommonSequenceEnabled_True struct {
	//	If false, the constraint doesn’t exert any force or influence on the rigid bodies.
	Enabled *TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic `xml:"http://www.collada.org/2005/11/COLLADASchema enabled"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_enabledsequencetechnique_commonsequencerigid_constraintschema_Enabled_TxsdRigidConstraintSequenceTechniqueCommonSequenceEnabled_True function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_enabledsequencetechnique_commonsequencerigid_constraintschema_Enabled_TxsdRigidConstraintSequenceTechniqueCommonSequenceEnabled_True instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_enabledsequencetechnique_commonsequencerigid_constraintschema_Enabled_TxsdRigidConstraintSequenceTechniqueCommonSequenceEnabled_True instance.
func (me *XsdGoPkgHasElem_enabledsequencetechnique_commonsequencerigid_constraintschema_Enabled_TxsdRigidConstraintSequenceTechniqueCommonSequenceEnabled_True) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_enabledsequencetechnique_commonsequencerigid_constraintschema_Enabled_TxsdRigidConstraintSequenceTechniqueCommonSequenceEnabled_True; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Enabled.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for Enabled -- true
func (me XsdGoPkgHasElem_enabledsequencetechnique_commonsequencerigid_constraintschema_Enabled_TxsdRigidConstraintSequenceTechniqueCommonSequenceEnabled_True) EnabledDefault() Tbool {
	return Tbool(true)
}

//	Indicates whether the attached rigid bodies may inter-penetrate.
type XsdGoPkgHasElem_interpenetratesequencetechnique_commonsequencerigid_constraintschema_Interpenetrate_TxsdRigidConstraintSequenceTechniqueCommonSequenceInterpenetrate_False struct {
	//	Indicates whether the attached rigid bodies may inter-penetrate.
	Interpenetrate *TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic `xml:"http://www.collada.org/2005/11/COLLADASchema interpenetrate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_interpenetratesequencetechnique_commonsequencerigid_constraintschema_Interpenetrate_TxsdRigidConstraintSequenceTechniqueCommonSequenceInterpenetrate_False function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_interpenetratesequencetechnique_commonsequencerigid_constraintschema_Interpenetrate_TxsdRigidConstraintSequenceTechniqueCommonSequenceInterpenetrate_False instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_interpenetratesequencetechnique_commonsequencerigid_constraintschema_Interpenetrate_TxsdRigidConstraintSequenceTechniqueCommonSequenceInterpenetrate_False instance.
func (me *XsdGoPkgHasElem_interpenetratesequencetechnique_commonsequencerigid_constraintschema_Interpenetrate_TxsdRigidConstraintSequenceTechniqueCommonSequenceInterpenetrate_False) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_interpenetratesequencetechnique_commonsequencerigid_constraintschema_Interpenetrate_TxsdRigidConstraintSequenceTechniqueCommonSequenceInterpenetrate_False; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Interpenetrate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for Interpenetrate -- false
func (me XsdGoPkgHasElem_interpenetratesequencetechnique_commonsequencerigid_constraintschema_Interpenetrate_TxsdRigidConstraintSequenceTechniqueCommonSequenceInterpenetrate_False) InterpenetrateDefault() Tbool {
	return Tbool(false)
}

//	Spring, based on distance (“LINEAR”) or angle (“ANGULAR”).
//	The angular spring properties.
//	The stiffness (also called spring coefficient) has units of force/angle in degrees.
type XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10 struct {
	//	The stiffness (also called spring coefficient) has units of force/angle in degrees.
	Stiffness *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema stiffness"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10 instance.
func (me *XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Stiffness.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for Stiffness -- 1.0
func (me XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10) StiffnessDefault() Tfloat {
	return Tfloat(1.0)
}

//	The spring damping coefficient.
type XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00 struct {
	//	The spring damping coefficient.
	Damping *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema damping"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00 instance.
func (me *XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Damping.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for Damping -- 0.0
func (me XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00) DampingDefault() Tfloat {
	return Tfloat(0.0)
}

//	The spring's target or resting distance.
type XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00 struct {
	//	The spring's target or resting distance.
	TargetValue *TargetableFloat `xml:"http://www.collada.org/2005/11/COLLADASchema target_value"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00 instance.
func (me *XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TargetValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for TargetValue -- 0.0
func (me XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00) TargetValueDefault() Tfloat {
	return Tfloat(0.0)
}

type TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular struct {
	//	The stiffness (also called spring coefficient) has units of force/angle in degrees.
	XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10

	//	The spring damping coefficient.
	XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00

	//	The spring's target or resting distance.
	XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00
}

//	If the WalkHandlers.TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular function is not nil (ie. was set by outside code), calls it with this TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular instance.
func (me *TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular) Walk() (err error) {
	if fn := WalkHandlers.TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_angularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Angular_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular_ struct {
	//	The angular spring properties.
	Angular *TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular `xml:"http://www.collada.org/2005/11/COLLADASchema angular"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_angularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Angular_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_angularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Angular_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_angularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Angular_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular_ instance.
func (me *XsdGoPkgHasElem_angularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Angular_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_angularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Angular_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Angular.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The linear spring properties.
type TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear struct {
	//	The spring damping coefficient.
	XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00

	//	The spring's target or resting distance.
	XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00

	//	The stiffness (also called spring coefficient) has units of force/distance.
	XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10
}

//	If the WalkHandlers.TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear function is not nil (ie. was set by outside code), calls it with this TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear instance.
func (me *TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear) Walk() (err error) {
	if fn := WalkHandlers.TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_linearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear_ struct {
	//	The linear spring properties.
	Linear *TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear `xml:"http://www.collada.org/2005/11/COLLADASchema linear"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_linearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_linearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_linearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear_ instance.
func (me *XsdGoPkgHasElem_linearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_linearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Linear.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring struct {
	//	The angular spring properties.
	XsdGoPkgHasElem_angularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Angular_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular_

	//	The linear spring properties.
	XsdGoPkgHasElem_linearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear_
}

//	If the WalkHandlers.TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring function is not nil (ie. was set by outside code), calls it with this TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring instance.
func (me *TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring) Walk() (err error) {
	if fn := WalkHandlers.TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_angularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Angular_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_linearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_springsequencetechnique_commonsequencerigid_constraintschema_Spring_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring_ struct {
	//	Spring, based on distance (“LINEAR”) or angle (“ANGULAR”).
	Spring *TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring `xml:"http://www.collada.org/2005/11/COLLADASchema spring"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_springsequencetechnique_commonsequencerigid_constraintschema_Spring_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_springsequencetechnique_commonsequencerigid_constraintschema_Spring_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_springsequencetechnique_commonsequencerigid_constraintschema_Spring_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring_ instance.
func (me *XsdGoPkgHasElem_springsequencetechnique_commonsequencerigid_constraintschema_Spring_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_springsequencetechnique_commonsequencerigid_constraintschema_Spring_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Spring.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The limits element provides a flexible way to specify the constraint limits (degrees of freedom
//	and ranges).
//	The linear element describes linear (translational) limits along each axis.
//	The minimum values for the limit.
type XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000 struct {
	//	The minimum values for the limit.
	Min *TargetableFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema min"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000 instance.
func (me *XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Min.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for Min -- "0.0 0.0 0.0"
func (me XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000) MinDefault() Tfloat3 {
	return Tfloat3("0.0 0.0 0.0")
}

//	The maximum values for the limit.
type XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000 struct {
	//	The maximum values for the limit.
	Max *TargetableFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema max"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000 instance.
func (me *XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Max.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Returns the default value for Max -- "0.0 0.0 0.0"
func (me XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000) MaxDefault() Tfloat3 {
	return Tfloat3("0.0 0.0 0.0")
}

type TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear struct {
	//	The minimum values for the limit.
	XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000

	//	The maximum values for the limit.
	XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000
}

//	If the WalkHandlers.TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear function is not nil (ie. was set by outside code), calls it with this TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear instance.
func (me *TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear) Walk() (err error) {
	if fn := WalkHandlers.TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_linearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear_ struct {
	//	The linear element describes linear (translational) limits along each axis.
	Linear *TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear `xml:"http://www.collada.org/2005/11/COLLADASchema linear"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_linearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_linearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_linearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear_ instance.
func (me *XsdGoPkgHasElem_linearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_linearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Linear.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The swing_cone_and_twist element describes the angular limits along each rotation axis in degrees.
//	The the X and Y limits describe a “swing cone” and the Z limits describe the “twist angle” range
type TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist struct {
	//	The minimum values for the limit.
	XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000

	//	The maximum values for the limit.
	XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000
}

//	If the WalkHandlers.TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist function is not nil (ie. was set by outside code), calls it with this TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist instance.
func (me *TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist) Walk() (err error) {
	if fn := WalkHandlers.TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_swing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_SwingConeAndTwist_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist_ struct {
	//	The swing_cone_and_twist element describes the angular limits along each rotation axis in degrees.
	//	The the X and Y limits describe a “swing cone” and the Z limits describe the “twist angle” range
	SwingConeAndTwist *TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist `xml:"http://www.collada.org/2005/11/COLLADASchema swing_cone_and_twist"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_swing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_SwingConeAndTwist_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_swing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_SwingConeAndTwist_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_swing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_SwingConeAndTwist_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist_ instance.
func (me *XsdGoPkgHasElem_swing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_SwingConeAndTwist_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_swing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_SwingConeAndTwist_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SwingConeAndTwist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits struct {
	//	The linear element describes linear (translational) limits along each axis.
	XsdGoPkgHasElem_linearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear_

	//	The swing_cone_and_twist element describes the angular limits along each rotation axis in degrees.
	//	The the X and Y limits describe a “swing cone” and the Z limits describe the “twist angle” range
	XsdGoPkgHasElem_swing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_SwingConeAndTwist_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist_
}

//	If the WalkHandlers.TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits function is not nil (ie. was set by outside code), calls it with this TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits instance.
func (me *TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits) Walk() (err error) {
	if fn := WalkHandlers.TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_linearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_swing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_SwingConeAndTwist_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_limitssequencetechnique_commonsequencerigid_constraintschema_Limits_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits_ struct {
	//	The limits element provides a flexible way to specify the constraint limits (degrees of freedom
	//	and ranges).
	Limits *TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits `xml:"http://www.collada.org/2005/11/COLLADASchema limits"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_limitssequencetechnique_commonsequencerigid_constraintschema_Limits_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_limitssequencetechnique_commonsequencerigid_constraintschema_Limits_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_limitssequencetechnique_commonsequencerigid_constraintschema_Limits_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits_ instance.
func (me *XsdGoPkgHasElem_limitssequencetechnique_commonsequencerigid_constraintschema_Limits_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_limitssequencetechnique_commonsequencerigid_constraintschema_Limits_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Limits.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRigidConstraintSequenceTechniqueCommon struct {
	//	Indicates whether the attached rigid bodies may inter-penetrate.
	XsdGoPkgHasElem_interpenetratesequencetechnique_commonsequencerigid_constraintschema_Interpenetrate_TxsdRigidConstraintSequenceTechniqueCommonSequenceInterpenetrate_False

	//	Spring, based on distance (“LINEAR”) or angle (“ANGULAR”).
	XsdGoPkgHasElem_springsequencetechnique_commonsequencerigid_constraintschema_Spring_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring_

	//	The limits element provides a flexible way to specify the constraint limits (degrees of freedom
	//	and ranges).
	XsdGoPkgHasElem_limitssequencetechnique_commonsequencerigid_constraintschema_Limits_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits_

	//	If false, the constraint doesn’t exert any force or influence on the rigid bodies.
	XsdGoPkgHasElem_enabledsequencetechnique_commonsequencerigid_constraintschema_Enabled_TxsdRigidConstraintSequenceTechniqueCommonSequenceEnabled_True
}

//	If the WalkHandlers.TxsdRigidConstraintSequenceTechniqueCommon function is not nil (ie. was set by outside code), calls it with this TxsdRigidConstraintSequenceTechniqueCommon instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdRigidConstraintSequenceTechniqueCommon instance.
func (me *TxsdRigidConstraintSequenceTechniqueCommon) Walk() (err error) {
	if fn := WalkHandlers.TxsdRigidConstraintSequenceTechniqueCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_enabledsequencetechnique_commonsequencerigid_constraintschema_Enabled_TxsdRigidConstraintSequenceTechniqueCommonSequenceEnabled_True.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_interpenetratesequencetechnique_commonsequencerigid_constraintschema_Interpenetrate_TxsdRigidConstraintSequenceTechniqueCommonSequenceInterpenetrate_False.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_springsequencetechnique_commonsequencerigid_constraintschema_Spring_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_limitssequencetechnique_commonsequencerigid_constraintschema_Limits_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_technique_commonsequencerigid_constraintschema_TechniqueCommon_TxsdRigidConstraintSequenceTechniqueCommon_ struct {
	//	The technique_common element specifies the rigid_constraint information for the common profile
	//	which all COLLADA implementations need to support.
	TechniqueCommon *TxsdRigidConstraintSequenceTechniqueCommon `xml:"http://www.collada.org/2005/11/COLLADASchema technique_common"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_technique_commonsequencerigid_constraintschema_TechniqueCommon_TxsdRigidConstraintSequenceTechniqueCommon_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_technique_commonsequencerigid_constraintschema_TechniqueCommon_TxsdRigidConstraintSequenceTechniqueCommon_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_technique_commonsequencerigid_constraintschema_TechniqueCommon_TxsdRigidConstraintSequenceTechniqueCommon_ instance.
func (me *XsdGoPkgHasElem_technique_commonsequencerigid_constraintschema_TechniqueCommon_TxsdRigidConstraintSequenceTechniqueCommon_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_technique_commonsequencerigid_constraintschema_TechniqueCommon_TxsdRigidConstraintSequenceTechniqueCommon_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TechniqueCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRigidConstraint struct {
	//	This element may contain any number of non-common profile techniques.
	XsdGoPkgHasElems_Technique

	//	Defines an attachment to a rigid-body or a node.
	XsdGoPkgHasElem_attachmentsequencerigid_constraintschema_Attachment_TxsdRigidConstraintSequenceAttachment_

	//	Defines the attachment (to a rigid_body or a node) to be used as the reference-frame.
	XsdGoPkgHasElem_ref_attachmentsequencerigid_constraintschema_RefAttachment_TxsdRigidConstraintSequenceRefAttachment_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The sid attribute is a text string value containing the sub-identifier of this element.
	//	This value must be unique within the scope of the parent element. Optional attribute.
	XsdGoPkgHasAttr_Sid_XsdtNCName_

	//	The technique_common element specifies the rigid_constraint information for the common profile
	//	which all COLLADA implementations need to support.
	XsdGoPkgHasElem_technique_commonsequencerigid_constraintschema_TechniqueCommon_TxsdRigidConstraintSequenceTechniqueCommon_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra
}

//	If the WalkHandlers.TxsdRigidConstraint function is not nil (ie. was set by outside code), calls it with this TxsdRigidConstraint instance as the single argument. Then calls the Walk() method on 5/7 embed(s) and 0/0 field(s) belonging to this TxsdRigidConstraint instance.
func (me *TxsdRigidConstraint) Walk() (err error) {
	if fn := WalkHandlers.TxsdRigidConstraint; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Technique.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_attachmentsequencerigid_constraintschema_Attachment_TxsdRigidConstraintSequenceAttachment_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ref_attachmentsequencerigid_constraintschema_RefAttachment_TxsdRigidConstraintSequenceRefAttachment_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_technique_commonsequencerigid_constraintschema_TechniqueCommon_TxsdRigidConstraintSequenceTechniqueCommon_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RigidConstraint struct {
	//	This element allows for connecting components, such as rigid_body into complex physics models
	//	with moveable parts.
	RigidConstraints []*TxsdRigidConstraint `xml:"http://www.collada.org/2005/11/COLLADASchema rigid_constraint"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RigidConstraint function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RigidConstraint instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RigidConstraint instance.
func (me *XsdGoPkgHasElems_RigidConstraint) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RigidConstraint; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RigidConstraints {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPhysicsModel struct {
	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The physics_model may define any number of rigid_body elements.
	XsdGoPkgHasElems_RigidBody

	//	The physics_model may define any number of rigid_constraint elements.
	XsdGoPkgHasElems_RigidConstraint

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The physics_model element may contain an asset element.
	XsdGoPkgHasElem_Asset

	//	The physics_model may instance any number of other physics_model elements.
	XsdGoPkgHasElems_InstancePhysicsModel
}

//	If the WalkHandlers.TxsdPhysicsModel function is not nil (ie. was set by outside code), calls it with this TxsdPhysicsModel instance as the single argument. Then calls the Walk() method on 5/7 embed(s) and 0/0 field(s) belonging to this TxsdPhysicsModel instance.
func (me *TxsdPhysicsModel) Walk() (err error) {
	if fn := WalkHandlers.TxsdPhysicsModel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_RigidConstraint.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_InstancePhysicsModel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RigidBody.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PhysicsModel struct {
	//	This element allows for building complex combinations of rigid-bodies and constraints that
	//	may be instantiated multiple times.
	PhysicsModels []*TxsdPhysicsModel `xml:"http://www.collada.org/2005/11/COLLADASchema physics_model"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PhysicsModel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PhysicsModel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PhysicsModel instance.
func (me *XsdGoPkgHasElems_PhysicsModel) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PhysicsModel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PhysicsModels {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdLibraryPhysicsModels struct {
	//	There must be at least one physics_model element.
	XsdGoPkgHasElems_PhysicsModel

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The library_physics_models element may contain an asset element.
	XsdGoPkgHasElem_Asset

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra
}

//	If the WalkHandlers.TxsdLibraryPhysicsModels function is not nil (ie. was set by outside code), calls it with this TxsdLibraryPhysicsModels instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdLibraryPhysicsModels instance.
func (me *TxsdLibraryPhysicsModels) Walk() (err error) {
	if fn := WalkHandlers.TxsdLibraryPhysicsModels; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_PhysicsModel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LibraryPhysicsModels struct {
	//	The library_physics_models element declares a module of physics_model elements.
	PhysicsModelsLibraries []*TxsdLibraryPhysicsModels `xml:"http://www.collada.org/2005/11/COLLADASchema library_physics_models"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LibraryPhysicsModels function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LibraryPhysicsModels instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LibraryPhysicsModels instance.
func (me *XsdGoPkgHasElems_LibraryPhysicsModels) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LibraryPhysicsModels; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PhysicsModelsLibraries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The library_nodes element declares a module of node elements.
type TxsdLibraryNodes struct {
	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The library_nodes element may contain an asset element.
	XsdGoPkgHasElem_Asset

	//	There must be at least one node element.
	XsdGoPkgHasElems_Node

	//	The id attribute is a text string containing the unique identifier of this element.
	//	This value must be unique within the instance document. Optional attribute.
	XsdGoPkgHasAttr_Id_XsdtId_

	//	The name attribute is the text string name of this element. Optional attribute.
	XsdGoPkgHasAttr_Name_XsdtNCName_
}

//	If the WalkHandlers.TxsdLibraryNodes function is not nil (ie. was set by outside code), calls it with this TxsdLibraryNodes instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdLibraryNodes instance.
func (me *TxsdLibraryNodes) Walk() (err error) {
	if fn := WalkHandlers.TxsdLibraryNodes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Node.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LibraryNodes struct {
	//	The library_nodes element declares a module of node elements.
	NodesLibraries []*TxsdLibraryNodes `xml:"http://www.collada.org/2005/11/COLLADASchema library_nodes"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LibraryNodes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LibraryNodes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LibraryNodes instance.
func (me *XsdGoPkgHasElems_LibraryNodes) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LibraryNodes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.NodesLibraries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCollada struct {
	//	The COLLADA element may contain any number of library_controllerss elements.
	XsdGoPkgHasElems_LibraryControllers

	//	The xml:base attribute allows you to define the base URI for this COLLADA document. See
	//	http://www.w3.org/TR/xmlbase/ for more information.
	xml.XsdGoPkgHasAttr_Base

	//	The scene embodies the entire set of information that can be visualized from the
	//	contents of a COLLADA resource. The scene element declares the base of the scene
	//	hierarchy or scene graph. The scene contains elements that comprise much of the
	//	visual and transformational information content as created by the authoring tools.
	XsdGoPkgHasElem_scenesequenceCOLLADAschema_Scene_TxsdColladaSequenceScene_

	//	The COLLADA element may contain any number of library_animation_clips elements.
	XsdGoPkgHasElems_LibraryAnimationClips

	//	The extra element may appear any number of times.
	XsdGoPkgHasElems_Extra

	//	The COLLADA element may contain any number of library_geometriess elements.
	XsdGoPkgHasElems_LibraryGeometries

	//	The COLLADA element may contain any number of library_effects elements.
	XsdGoPkgHasElems_LibraryEffects

	//	The COLLADA element must contain an asset element.
	XsdGoPkgHasElem_Asset

	//	The COLLADA element may contain any number of library_physics_scenes elements.
	XsdGoPkgHasElems_LibraryPhysicsScenes

	//	The COLLADA element may contain any number of library_materials elements.
	XsdGoPkgHasElems_LibraryMaterials

	//	The COLLADA element may contain any number of library_physics_models elements.
	XsdGoPkgHasElems_LibraryPhysicsModels

	//	The COLLADA element may contain any number of library_nodes elements.
	XsdGoPkgHasElems_LibraryNodes

	//	The COLLADA element may contain any number of library_lights elements.
	XsdGoPkgHasElems_LibraryLights

	//	The COLLADA element may contain any number of library_force_fields elements.
	XsdGoPkgHasElems_LibraryForceFields

	//	The COLLADA element may contain any number of library_images elements.
	XsdGoPkgHasElems_LibraryImages

	//	The COLLADA element may contain any number of library_cameras elements.
	XsdGoPkgHasElems_LibraryCameras

	//	The version attribute is the COLLADA schema revision with which the instance document
	//	conforms. Required Attribute.
	XsdGoPkgHasAttr_Version_TVersionType_

	//	The COLLADA element may contain any number of library_materials elements.
	XsdGoPkgHasElems_LibraryPhysicsMaterials

	//	The COLLADA element may contain any number of library_visual_scenes elements.
	XsdGoPkgHasElems_LibraryVisualScenes

	//	The COLLADA element may contain any number of library_animations elements.
	XsdGoPkgHasElems_LibraryAnimations
}

//	If the WalkHandlers.TxsdCollada function is not nil (ie. was set by outside code), calls it with this TxsdCollada instance as the single argument. Then calls the Walk() method on 18/20 embed(s) and 0/0 field(s) belonging to this TxsdCollada instance.
func (me *TxsdCollada) Walk() (err error) {
	if fn := WalkHandlers.TxsdCollada; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_LibraryNodes.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_LibraryLights.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_LibraryForceFields.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_LibraryImages.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_LibraryCameras.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_LibraryPhysicsMaterials.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_LibraryVisualScenes.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_LibraryAnimations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_LibraryControllers.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_scenesequenceCOLLADAschema_Scene_TxsdColladaSequenceScene_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_LibraryAnimationClips.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Extra.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_LibraryGeometries.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_LibraryEffects.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Asset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_LibraryPhysicsScenes.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_LibraryMaterials.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_LibraryPhysicsModels.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Collada struct {
	//	The COLLADA element declares the root of the document that comprises some of the content
	//	in the COLLADA schema.
	Colladas []*TxsdCollada `xml:"http://www.collada.org/2005/11/COLLADASchema COLLADA"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Collada function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Collada instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Collada instance.
func (me *XsdGoPkgHasElems_Collada) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Collada; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Colladas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The COLLADA element declares the root of the document that comprises some of the content
//	in the COLLADA schema.
type XsdGoPkgHasElem_Collada struct {
	//	The COLLADA element declares the root of the document that comprises some of the content
	//	in the COLLADA schema.
	Collada *TxsdCollada `xml:"http://www.collada.org/2005/11/COLLADASchema COLLADA"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Collada function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Collada instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Collada instance.
func (me *XsdGoPkgHasElem_Collada) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Collada; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Collada.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The IDREF_array element declares the storage for a homogenous array of ID reference values.
type XsdGoPkgHasElems_IdrefArray struct {
	//	The IDREF_array element declares the storage for a homogenous array of ID reference values.
	IdrefArrays []*TxsdIdrefArray `xml:"http://www.collada.org/2005/11/COLLADASchema IDREF_array"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IdrefArray function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IdrefArray instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IdrefArray instance.
func (me *XsdGoPkgHasElems_IdrefArray) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IdrefArray; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.IdrefArrays {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The Name_array element declares the storage for a homogenous array of Name string values.
type XsdGoPkgHasElems_NameArray struct {
	//	The Name_array element declares the storage for a homogenous array of Name string values.
	NameArrays []*TxsdNameArray `xml:"http://www.collada.org/2005/11/COLLADASchema Name_array"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NameArray function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NameArray instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NameArray instance.
func (me *XsdGoPkgHasElems_NameArray) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NameArray; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.NameArrays {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The bool_array element declares the storage for a homogenous array of boolean values.
type XsdGoPkgHasElems_BoolArray struct {
	//	The bool_array element declares the storage for a homogenous array of boolean values.
	BoolArrays []*TxsdBoolArray `xml:"http://www.collada.org/2005/11/COLLADASchema bool_array"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BoolArray function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BoolArray instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BoolArray instance.
func (me *XsdGoPkgHasElems_BoolArray) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_BoolArray; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BoolArrays {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The float_array element declares the storage for a homogenous array of floating point values.
type XsdGoPkgHasElems_FloatArray struct {
	//	The float_array element declares the storage for a homogenous array of floating point values.
	FloatArrays []*TxsdFloatArray `xml:"http://www.collada.org/2005/11/COLLADASchema float_array"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FloatArray function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FloatArray instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FloatArray instance.
func (me *XsdGoPkgHasElems_FloatArray) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FloatArray; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FloatArrays {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The int_array element declares the storage for a homogenous array of integer values.
type XsdGoPkgHasElems_IntArray struct {
	//	The int_array element declares the storage for a homogenous array of integer values.
	IntArrays []*TxsdIntArray `xml:"http://www.collada.org/2005/11/COLLADASchema int_array"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IntArray function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IntArray instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IntArray instance.
func (me *XsdGoPkgHasElems_IntArray) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IntArray; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.IntArrays {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The accessor element declares an access pattern to one of the array elements: float_array,
//	int_array, Name_array, bool_array, and IDREF_array. The accessor element describes access
//	to arrays that are organized in either an interleaved or non-interleaved manner, depending
//	on the offset and stride attributes.
type XsdGoPkgHasElems_Accessor struct {
	//	The accessor element declares an access pattern to one of the array elements: float_array,
	//	int_array, Name_array, bool_array, and IDREF_array. The accessor element describes access
	//	to arrays that are organized in either an interleaved or non-interleaved manner, depending
	//	on the offset and stride attributes.
	Accessors []*TxsdAccessor `xml:"http://www.collada.org/2005/11/COLLADASchema accessor"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Accessor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Accessor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Accessor instance.
func (me *XsdGoPkgHasElems_Accessor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Accessor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Accessors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The param element declares parametric information regarding its parent element.
type XsdGoPkgHasElem_Param struct {
	//	The param element declares parametric information regarding its parent element.
	Param *TxsdParam `xml:"http://www.collada.org/2005/11/COLLADASchema param"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Param function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Param instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Param instance.
func (me *XsdGoPkgHasElem_Param) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Param; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Param.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The source element declares a data repository that provides values according to the semantics of an
//	input element that refers to it.
type XsdGoPkgHasElem_Source struct {
	//	The source element declares a data repository that provides values according to the semantics of an
	//	input element that refers to it.
	Source *TxsdSource `xml:"http://www.collada.org/2005/11/COLLADASchema source"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Source function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Source instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Source instance.
func (me *XsdGoPkgHasElem_Source) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Source; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Source.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Geometry describes the visual shape and appearance of an object in the scene.
//	The geometry element categorizes the declaration of geometric information. Geometry is a
//	branch of mathematics that deals with the measurement, properties, and relationships of
//	points, lines, angles, surfaces, and solids.
type XsdGoPkgHasElem_Geometry struct {
	//	Geometry describes the visual shape and appearance of an object in the scene.
	//	The geometry element categorizes the declaration of geometric information. Geometry is a
	//	branch of mathematics that deals with the measurement, properties, and relationships of
	//	points, lines, angles, surfaces, and solids.
	Geometry *TxsdGeometry `xml:"http://www.collada.org/2005/11/COLLADASchema geometry"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Geometry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Geometry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Geometry instance.
func (me *XsdGoPkgHasElem_Geometry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Geometry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Geometry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The mesh element contains vertex and primitive information sufficient to describe basic geometric meshes.
type XsdGoPkgHasElems_Mesh struct {
	//	The mesh element contains vertex and primitive information sufficient to describe basic geometric meshes.
	Meshs []*TxsdMesh `xml:"http://www.collada.org/2005/11/COLLADASchema mesh"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Mesh function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Mesh instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Mesh instance.
func (me *XsdGoPkgHasElems_Mesh) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Mesh; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Meshs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The spline element contains control vertex information sufficient to describe basic splines.
type XsdGoPkgHasElems_Spline struct {
	//	The spline element contains control vertex information sufficient to describe basic splines.
	Splines []*TxsdSpline `xml:"http://www.collada.org/2005/11/COLLADASchema spline"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Spline function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Spline instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Spline instance.
func (me *XsdGoPkgHasElems_Spline) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Spline; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Splines {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The lines element provides the information needed to bind vertex attributes together and then
//	organize those vertices into individual lines. Each line described by the mesh has two vertices.
//	The first line is formed from first and second vertices. The second line is formed from the
//	third and fourth vertices and so on.
type XsdGoPkgHasElem_Lines struct {
	//	The lines element provides the information needed to bind vertex attributes together and then
	//	organize those vertices into individual lines. Each line described by the mesh has two vertices.
	//	The first line is formed from first and second vertices. The second line is formed from the
	//	third and fourth vertices and so on.
	Lines *TxsdLines `xml:"http://www.collada.org/2005/11/COLLADASchema lines"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Lines function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Lines instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Lines instance.
func (me *XsdGoPkgHasElem_Lines) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Lines; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Lines.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The linestrips element provides the information needed to bind vertex attributes together and
//	then organize those vertices into connected line-strips. Each line-strip described by the mesh
//	has an arbitrary number of vertices. Each line segment within the line-strip is formed from the
//	current vertex and the preceding vertex.
type XsdGoPkgHasElem_Linestrips struct {
	//	The linestrips element provides the information needed to bind vertex attributes together and
	//	then organize those vertices into connected line-strips. Each line-strip described by the mesh
	//	has an arbitrary number of vertices. Each line segment within the line-strip is formed from the
	//	current vertex and the preceding vertex.
	Linestrips *TxsdLinestrips `xml:"http://www.collada.org/2005/11/COLLADASchema linestrips"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Linestrips function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Linestrips instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Linestrips instance.
func (me *XsdGoPkgHasElem_Linestrips) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Linestrips; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Linestrips.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The polygons element provides the information needed to bind vertex attributes together and
//	then organize those vertices into individual polygons. The polygons described can contain
//	arbitrary numbers of vertices. These polygons may be self intersecting and may also contain holes.
type XsdGoPkgHasElem_Polygons struct {
	//	The polygons element provides the information needed to bind vertex attributes together and
	//	then organize those vertices into individual polygons. The polygons described can contain
	//	arbitrary numbers of vertices. These polygons may be self intersecting and may also contain holes.
	Polygons *TxsdPolygons `xml:"http://www.collada.org/2005/11/COLLADASchema polygons"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Polygons function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Polygons instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Polygons instance.
func (me *XsdGoPkgHasElem_Polygons) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Polygons; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Polygons.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The polylist element provides the information needed to bind vertex attributes together and
//	then organize those vertices into individual polygons. The polygons described in polylist can
//	contain arbitrary numbers of vertices. Unlike the polygons element, the polylist element cannot
//	contain polygons with holes.
type XsdGoPkgHasElem_Polylist struct {
	//	The polylist element provides the information needed to bind vertex attributes together and
	//	then organize those vertices into individual polygons. The polygons described in polylist can
	//	contain arbitrary numbers of vertices. Unlike the polygons element, the polylist element cannot
	//	contain polygons with holes.
	Polylist *TxsdPolylist `xml:"http://www.collada.org/2005/11/COLLADASchema polylist"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Polylist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Polylist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Polylist instance.
func (me *XsdGoPkgHasElem_Polylist) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Polylist; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Polylist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The triangles element provides the information needed to bind vertex attributes together and
//	then organize those vertices into individual triangles.	Each triangle described by the mesh has
//	three vertices. The first triangle is formed from the first, second, and third vertices. The
//	second triangle is formed from the fourth, fifth, and sixth vertices, and so on.
type XsdGoPkgHasElem_Triangles struct {
	//	The triangles element provides the information needed to bind vertex attributes together and
	//	then organize those vertices into individual triangles.	Each triangle described by the mesh has
	//	three vertices. The first triangle is formed from the first, second, and third vertices. The
	//	second triangle is formed from the fourth, fifth, and sixth vertices, and so on.
	Triangles *TxsdTriangles `xml:"http://www.collada.org/2005/11/COLLADASchema triangles"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Triangles function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Triangles instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Triangles instance.
func (me *XsdGoPkgHasElem_Triangles) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Triangles; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Triangles.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The trifans element provides the information needed to bind vertex attributes together and then
//	organize those vertices into connected triangles. Each triangle described by the mesh has three
//	vertices. The first triangle is formed from first, second, and third vertices. Each subsequent
//	triangle is formed from the current vertex, reusing the first and the previous vertices.
type XsdGoPkgHasElem_Trifans struct {
	//	The trifans element provides the information needed to bind vertex attributes together and then
	//	organize those vertices into connected triangles. Each triangle described by the mesh has three
	//	vertices. The first triangle is formed from first, second, and third vertices. Each subsequent
	//	triangle is formed from the current vertex, reusing the first and the previous vertices.
	Trifans *TxsdTrifans `xml:"http://www.collada.org/2005/11/COLLADASchema trifans"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Trifans function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Trifans instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Trifans instance.
func (me *XsdGoPkgHasElem_Trifans) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Trifans; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Trifans.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The tristrips element provides the information needed to bind vertex attributes together and then
//	organize those vertices into connected triangles. Each triangle described by the mesh has three
//	vertices. The first triangle is formed from first, second, and third vertices. Each subsequent
//	triangle is formed from the current vertex, reusing the previous two vertices.
type XsdGoPkgHasElem_Tristrips struct {
	//	The tristrips element provides the information needed to bind vertex attributes together and then
	//	organize those vertices into connected triangles. Each triangle described by the mesh has three
	//	vertices. The first triangle is formed from first, second, and third vertices. Each subsequent
	//	triangle is formed from the current vertex, reusing the previous two vertices.
	Tristrips *TxsdTristrips `xml:"http://www.collada.org/2005/11/COLLADASchema tristrips"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Tristrips function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Tristrips instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Tristrips instance.
func (me *XsdGoPkgHasElem_Tristrips) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Tristrips; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Tristrips.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The vertices element declares the attributes and identity of mesh-vertices. The vertices element
//	describes mesh-vertices in a mesh geometry. The mesh-vertices represent the position (identity)
//	of the vertices comprising the mesh and other vertex attributes that are invariant to tessellation.
type XsdGoPkgHasElems_Vertices struct {
	//	The vertices element declares the attributes and identity of mesh-vertices. The vertices element
	//	describes mesh-vertices in a mesh geometry. The mesh-vertices represent the position (identity)
	//	of the vertices comprising the mesh and other vertex attributes that are invariant to tessellation.
	Verticeses []*TxsdVertices `xml:"http://www.collada.org/2005/11/COLLADASchema vertices"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Vertices function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Vertices instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Vertices instance.
func (me *XsdGoPkgHasElems_Vertices) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Vertices; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Verticeses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The lookat element contains a position and orientation transformation suitable for aiming a camera.
//	The lookat element contains three mathematical vectors within it that describe:
//	1.	The position of the object;
//	2.	The position of the interest point;
//	3.	The direction that points up.
type XsdGoPkgHasElem_Lookat struct {
	//	The lookat element contains a position and orientation transformation suitable for aiming a camera.
	//	The lookat element contains three mathematical vectors within it that describe:
	//	1.	The position of the object;
	//	2.	The position of the interest point;
	//	3.	The direction that points up.
	Lookat *TxsdLookat `xml:"http://www.collada.org/2005/11/COLLADASchema lookat"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Lookat function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Lookat instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Lookat instance.
func (me *XsdGoPkgHasElem_Lookat) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Lookat; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Lookat.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Matrix transformations embody mathematical changes to points within a coordinate systems or the
//	coordinate system itself. The matrix element contains a 4-by-4 matrix of floating-point values.
type XsdGoPkgHasElem_Matrix struct {
	//	Matrix transformations embody mathematical changes to points within a coordinate systems or the
	//	coordinate system itself. The matrix element contains a 4-by-4 matrix of floating-point values.
	Matrix *TxsdMatrix `xml:"http://www.collada.org/2005/11/COLLADASchema matrix"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Matrix function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Matrix instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Matrix instance.
func (me *XsdGoPkgHasElem_Matrix) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Matrix; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Matrix.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The rotate element contains an angle and a mathematical vector that represents the axis of rotation.
type XsdGoPkgHasElem_Rotate struct {
	//	The rotate element contains an angle and a mathematical vector that represents the axis of rotation.
	Rotate *TxsdRotate `xml:"http://www.collada.org/2005/11/COLLADASchema rotate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Rotate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Rotate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Rotate instance.
func (me *XsdGoPkgHasElem_Rotate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Rotate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Rotate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The scale element contains a mathematical vector that represents the relative proportions of the
//	X, Y and Z axes of a coordinated system.
type XsdGoPkgHasElem_Scale struct {
	//	The scale element contains a mathematical vector that represents the relative proportions of the
	//	X, Y and Z axes of a coordinated system.
	Scale *TargetableFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema scale"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Scale function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Scale instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Scale instance.
func (me *XsdGoPkgHasElem_Scale) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Scale; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Scale.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The skew element contains an angle and two mathematical vectors that represent the axis of
//	rotation and the axis of translation.
type XsdGoPkgHasElem_Skew struct {
	//	The skew element contains an angle and two mathematical vectors that represent the axis of
	//	rotation and the axis of translation.
	Skew *TxsdSkew `xml:"http://www.collada.org/2005/11/COLLADASchema skew"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Skew function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Skew instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Skew instance.
func (me *XsdGoPkgHasElem_Skew) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Skew; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Skew.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The translate element contains a mathematical vector that represents the distance along the
//	X, Y and Z-axes.
type XsdGoPkgHasElem_Translate struct {
	//	The translate element contains a mathematical vector that represents the distance along the
	//	X, Y and Z-axes.
	Translate *TargetableFloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema translate"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Translate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Translate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Translate instance.
func (me *XsdGoPkgHasElem_Translate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Translate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Translate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The image element declares the storage for the graphical representation of an object.
//	The image element best describes raster image data, but can conceivably handle other
//	forms of imagery. The image elements allows for specifying an external image file with
//	the init_from element or embed image data with the data element.
type XsdGoPkgHasElem_Image struct {
	//	The image element declares the storage for the graphical representation of an object.
	//	The image element best describes raster image data, but can conceivably handle other
	//	forms of imagery. The image elements allows for specifying an external image file with
	//	the init_from element or embed image data with the data element.
	Image *TxsdImage `xml:"http://www.collada.org/2005/11/COLLADASchema image"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Image function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Image instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Image instance.
func (me *XsdGoPkgHasElem_Image) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Image; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Image.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The light element declares a light source that illuminates the scene.
//	Light sources have many different properties and radiate light in many different patterns and
//	frequencies.
type XsdGoPkgHasElem_Light struct {
	//	The light element declares a light source that illuminates the scene.
	//	Light sources have many different properties and radiate light in many different patterns and
	//	frequencies.
	Light *TxsdLight `xml:"http://www.collada.org/2005/11/COLLADASchema light"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Light function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Light instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Light instance.
func (me *XsdGoPkgHasElem_Light) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Light; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Light.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Materials describe the visual appearance of a geometric object.
type XsdGoPkgHasElem_Material struct {
	//	Materials describe the visual appearance of a geometric object.
	Material *TxsdMaterial `xml:"http://www.collada.org/2005/11/COLLADASchema material"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Material function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Material instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Material instance.
func (me *XsdGoPkgHasElem_Material) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Material; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Material.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The camera element declares a view into the scene hierarchy or scene graph. The camera contains
//	elements that describe the camera’s optics and imager.
type XsdGoPkgHasElem_Camera struct {
	//	The camera element declares a view into the scene hierarchy or scene graph. The camera contains
	//	elements that describe the camera’s optics and imager.
	Camera *TxsdCamera `xml:"http://www.collada.org/2005/11/COLLADASchema camera"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Camera function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Camera instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Camera instance.
func (me *XsdGoPkgHasElem_Camera) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Camera; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Camera.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The animation element categorizes the declaration of animation information. The animation
//	hierarchy contains elements that describe the animation’s key-frame data and sampler functions,
//	ordered in such a way to group together animations that should be executed together.
type XsdGoPkgHasElem_Animation struct {
	//	The animation element categorizes the declaration of animation information. The animation
	//	hierarchy contains elements that describe the animation’s key-frame data and sampler functions,
	//	ordered in such a way to group together animations that should be executed together.
	Animation *TxsdAnimation `xml:"http://www.collada.org/2005/11/COLLADASchema animation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Animation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Animation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Animation instance.
func (me *XsdGoPkgHasElem_Animation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Animation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Animation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The animation_clip element defines a section of the animation curves to be used together as
//	an animation clip.
type XsdGoPkgHasElem_AnimationClip struct {
	//	The animation_clip element defines a section of the animation curves to be used together as
	//	an animation clip.
	AnimationClip *TxsdAnimationClip `xml:"http://www.collada.org/2005/11/COLLADASchema animation_clip"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AnimationClip function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AnimationClip instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AnimationClip instance.
func (me *XsdGoPkgHasElem_AnimationClip) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AnimationClip; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AnimationClip.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The channel element declares an output channel of an animation.
type XsdGoPkgHasElem_Channel struct {
	//	The channel element declares an output channel of an animation.
	Channel *TxsdChannel `xml:"http://www.collada.org/2005/11/COLLADASchema channel"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Channel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Channel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Channel instance.
func (me *XsdGoPkgHasElem_Channel) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Channel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Channel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The sampler element declares an N-dimensional function used for animation. Animation function curves
//	are represented by 1-D sampler elements in COLLADA. The sampler defines sampling points and how to
//	interpolate between them.
type XsdGoPkgHasElem_Sampler struct {
	//	The sampler element declares an N-dimensional function used for animation. Animation function curves
	//	are represented by 1-D sampler elements in COLLADA. The sampler defines sampling points and how to
	//	interpolate between them.
	Sampler *TxsdSampler `xml:"http://www.collada.org/2005/11/COLLADASchema sampler"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Sampler function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Sampler instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Sampler instance.
func (me *XsdGoPkgHasElem_Sampler) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Sampler; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Sampler.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The controller element categorizes the declaration of generic control information.
//	A controller is a device or mechanism that manages and directs the operations of another object.
type XsdGoPkgHasElem_Controller struct {
	//	The controller element categorizes the declaration of generic control information.
	//	A controller is a device or mechanism that manages and directs the operations of another object.
	Controller *TxsdController `xml:"http://www.collada.org/2005/11/COLLADASchema controller"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Controller function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Controller instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Controller instance.
func (me *XsdGoPkgHasElem_Controller) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Controller; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Controller.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The skin element contains vertex and primitive information sufficient to describe blend-weight skinning.
type XsdGoPkgHasElems_Skin struct {
	//	The skin element contains vertex and primitive information sufficient to describe blend-weight skinning.
	Skins []*TxsdSkin `xml:"http://www.collada.org/2005/11/COLLADASchema skin"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Skin function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Skin instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Skin instance.
func (me *XsdGoPkgHasElems_Skin) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Skin; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Skins {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The morph element describes the data required to blend between sets of static meshes. Each
//	possible mesh that can be blended (a morph target) must be specified.
type XsdGoPkgHasElems_Morph struct {
	//	The morph element describes the data required to blend between sets of static meshes. Each
	//	possible mesh that can be blended (a morph target) must be specified.
	Morphs []*TxsdMorph `xml:"http://www.collada.org/2005/11/COLLADASchema morph"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Morph function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Morph instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Morph instance.
func (me *XsdGoPkgHasElems_Morph) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Morph; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Morphs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The asset element defines asset management information regarding its parent element.
type XsdGoPkgHasElems_Asset struct {
	//	The asset element defines asset management information regarding its parent element.
	Assets []*TxsdAsset `xml:"http://www.collada.org/2005/11/COLLADASchema asset"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Asset function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Asset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Asset instance.
func (me *XsdGoPkgHasElems_Asset) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Asset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Assets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The technique element declares the information used to process some portion of the content. Each
//	technique conforms to an associated profile. Techniques generally act as a “switch”. If more than
//	one is present for a particular portion of content, on import, one or the other is picked, but
//	usually not both. Selection should be based on which profile the importing application can support.
//	Techniques contain application data and programs, making them assets that can be managed as a unit.
type XsdGoPkgHasElem_Technique struct {
	//	The technique element declares the information used to process some portion of the content. Each
	//	technique conforms to an associated profile. Techniques generally act as a “switch”. If more than
	//	one is present for a particular portion of content, on import, one or the other is picked, but
	//	usually not both. Selection should be based on which profile the importing application can support.
	//	Techniques contain application data and programs, making them assets that can be managed as a unit.
	Technique *TxsdTechnique `xml:"http://www.collada.org/2005/11/COLLADASchema technique"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Technique function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Technique instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Technique instance.
func (me *XsdGoPkgHasElem_Technique) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Technique; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Technique.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Nodes embody the hierarchical relationship of elements in the scene.
type XsdGoPkgHasElem_Node struct {
	//	Nodes embody the hierarchical relationship of elements in the scene.
	Node *TxsdNode `xml:"http://www.collada.org/2005/11/COLLADASchema node"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Node function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Node instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Node instance.
func (me *XsdGoPkgHasElem_Node) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Node; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Node.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The visual_scene element declares the base of the visual_scene hierarchy or scene graph. The
//	scene contains elements that comprise much of the visual and transformational information
//	content as created by the authoring tools.
type XsdGoPkgHasElem_VisualScene struct {
	//	The visual_scene element declares the base of the visual_scene hierarchy or scene graph. The
	//	scene contains elements that comprise much of the visual and transformational information
	//	content as created by the authoring tools.
	VisualScene *TxsdVisualScene `xml:"http://www.collada.org/2005/11/COLLADASchema visual_scene"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_VisualScene function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_VisualScene instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_VisualScene instance.
func (me *XsdGoPkgHasElem_VisualScene) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_VisualScene; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.VisualScene.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Bind a specific material to a piece of geometry, binding varying and uniform parameters at the
//	same time.
type XsdGoPkgHasElems_BindMaterial struct {
	//	Bind a specific material to a piece of geometry, binding varying and uniform parameters at the
	//	same time.
	BindMaterials []*TxsdBindMaterial `xml:"http://www.collada.org/2005/11/COLLADASchema bind_material"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BindMaterial function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BindMaterial instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BindMaterial instance.
func (me *XsdGoPkgHasElems_BindMaterial) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_BindMaterial; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BindMaterials {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The instance_camera element declares the instantiation of a COLLADA camera resource.
type XsdGoPkgHasElem_InstanceCamera struct {
	//	The instance_camera element declares the instantiation of a COLLADA camera resource.
	InstanceCamera *TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_camera"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InstanceCamera function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstanceCamera instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_InstanceCamera instance.
func (me *XsdGoPkgHasElem_InstanceCamera) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InstanceCamera; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.InstanceCamera.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The instance_controller element declares the instantiation of a COLLADA controller resource.
type XsdGoPkgHasElem_InstanceController struct {
	//	The instance_controller element declares the instantiation of a COLLADA controller resource.
	InstanceController *TxsdInstanceController `xml:"http://www.collada.org/2005/11/COLLADASchema instance_controller"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InstanceController function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstanceController instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_InstanceController instance.
func (me *XsdGoPkgHasElem_InstanceController) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InstanceController; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.InstanceController.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The instance_effect element declares the instantiation of a COLLADA effect resource.
type XsdGoPkgHasElems_InstanceEffect struct {
	//	The instance_effect element declares the instantiation of a COLLADA effect resource.
	EffectInstances []*TxsdInstanceEffect `xml:"http://www.collada.org/2005/11/COLLADASchema instance_effect"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InstanceEffect function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstanceEffect instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstanceEffect instance.
func (me *XsdGoPkgHasElems_InstanceEffect) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InstanceEffect; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EffectInstances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The instance_force_field element declares the instantiation of a COLLADA force_field resource.
type XsdGoPkgHasElem_InstanceForceField struct {
	//	The instance_force_field element declares the instantiation of a COLLADA force_field resource.
	InstanceForceField *TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_force_field"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InstanceForceField function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstanceForceField instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_InstanceForceField instance.
func (me *XsdGoPkgHasElem_InstanceForceField) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InstanceForceField; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.InstanceForceField.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The instance_light element declares the instantiation of a COLLADA light resource.
type XsdGoPkgHasElem_InstanceLight struct {
	//	The instance_light element declares the instantiation of a COLLADA light resource.
	InstanceLight *TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_light"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InstanceLight function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstanceLight instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_InstanceLight instance.
func (me *XsdGoPkgHasElem_InstanceLight) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InstanceLight; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.InstanceLight.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The instance_material element declares the instantiation of a COLLADA material resource.
type XsdGoPkgHasElem_InstanceMaterial struct {
	//	The instance_material element declares the instantiation of a COLLADA material resource.
	InstanceMaterial *TxsdInstanceMaterial `xml:"http://www.collada.org/2005/11/COLLADASchema instance_material"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InstanceMaterial function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstanceMaterial instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_InstanceMaterial instance.
func (me *XsdGoPkgHasElem_InstanceMaterial) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InstanceMaterial; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.InstanceMaterial.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The instance_node element declares the instantiation of a COLLADA node resource.
type XsdGoPkgHasElem_InstanceNode struct {
	//	The instance_node element declares the instantiation of a COLLADA node resource.
	InstanceNode *TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_node"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InstanceNode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstanceNode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_InstanceNode instance.
func (me *XsdGoPkgHasElem_InstanceNode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InstanceNode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.InstanceNode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The instance_physics_material element declares the instantiation of a COLLADA physics_material
//	resource.
type XsdGoPkgHasElems_InstancePhysicsMaterial struct {
	//	The instance_physics_material element declares the instantiation of a COLLADA physics_material
	//	resource.
	PhysicsMaterialInstances []*TInstanceWithExtra `xml:"http://www.collada.org/2005/11/COLLADASchema instance_physics_material"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_InstancePhysicsMaterial function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InstancePhysicsMaterial instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InstancePhysicsMaterial instance.
func (me *XsdGoPkgHasElems_InstancePhysicsMaterial) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_InstancePhysicsMaterial; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PhysicsMaterialInstances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	This element allows instancing physics model within another physics model, or in a physics scene.
type XsdGoPkgHasElem_InstancePhysicsModel struct {
	//	This element allows instancing physics model within another physics model, or in a physics scene.
	InstancePhysicsModel *TxsdInstancePhysicsModel `xml:"http://www.collada.org/2005/11/COLLADASchema instance_physics_model"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InstancePhysicsModel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstancePhysicsModel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_InstancePhysicsModel instance.
func (me *XsdGoPkgHasElem_InstancePhysicsModel) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InstancePhysicsModel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.InstancePhysicsModel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	This element allows instancing a rigid_body within an instance_physics_model.
type XsdGoPkgHasElem_InstanceRigidBody struct {
	//	This element allows instancing a rigid_body within an instance_physics_model.
	InstanceRigidBody *TxsdInstanceRigidBody `xml:"http://www.collada.org/2005/11/COLLADASchema instance_rigid_body"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InstanceRigidBody function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstanceRigidBody instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_InstanceRigidBody instance.
func (me *XsdGoPkgHasElem_InstanceRigidBody) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InstanceRigidBody; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.InstanceRigidBody.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	This element allows instancing a rigid_constraint within an instance_physics_model.
type XsdGoPkgHasElem_InstanceRigidConstraint struct {
	//	This element allows instancing a rigid_constraint within an instance_physics_model.
	InstanceRigidConstraint *TxsdInstanceRigidConstraint `xml:"http://www.collada.org/2005/11/COLLADASchema instance_rigid_constraint"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_InstanceRigidConstraint function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InstanceRigidConstraint instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_InstanceRigidConstraint instance.
func (me *XsdGoPkgHasElem_InstanceRigidConstraint) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_InstanceRigidConstraint; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.InstanceRigidConstraint.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The library_animations element declares a module of animation elements.
type XsdGoPkgHasElem_LibraryAnimations struct {
	//	The library_animations element declares a module of animation elements.
	LibraryAnimations *TxsdLibraryAnimations `xml:"http://www.collada.org/2005/11/COLLADASchema library_animations"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LibraryAnimations function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LibraryAnimations instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LibraryAnimations instance.
func (me *XsdGoPkgHasElem_LibraryAnimations) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LibraryAnimations; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LibraryAnimations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The library_animation_clips element declares a module of animation_clip elements.
type XsdGoPkgHasElem_LibraryAnimationClips struct {
	//	The library_animation_clips element declares a module of animation_clip elements.
	LibraryAnimationClips *TxsdLibraryAnimationClips `xml:"http://www.collada.org/2005/11/COLLADASchema library_animation_clips"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LibraryAnimationClips function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LibraryAnimationClips instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LibraryAnimationClips instance.
func (me *XsdGoPkgHasElem_LibraryAnimationClips) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LibraryAnimationClips; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LibraryAnimationClips.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The library_cameras element declares a module of camera elements.
type XsdGoPkgHasElem_LibraryCameras struct {
	//	The library_cameras element declares a module of camera elements.
	LibraryCameras *TxsdLibraryCameras `xml:"http://www.collada.org/2005/11/COLLADASchema library_cameras"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LibraryCameras function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LibraryCameras instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LibraryCameras instance.
func (me *XsdGoPkgHasElem_LibraryCameras) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LibraryCameras; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LibraryCameras.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The library_controllers element declares a module of controller elements.
type XsdGoPkgHasElem_LibraryControllers struct {
	//	The library_controllers element declares a module of controller elements.
	LibraryControllers *TxsdLibraryControllers `xml:"http://www.collada.org/2005/11/COLLADASchema library_controllers"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LibraryControllers function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LibraryControllers instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LibraryControllers instance.
func (me *XsdGoPkgHasElem_LibraryControllers) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LibraryControllers; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LibraryControllers.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The library_geometries element declares a module of geometry elements.
type XsdGoPkgHasElem_LibraryGeometries struct {
	//	The library_geometries element declares a module of geometry elements.
	LibraryGeometries *TxsdLibraryGeometries `xml:"http://www.collada.org/2005/11/COLLADASchema library_geometries"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LibraryGeometries function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LibraryGeometries instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LibraryGeometries instance.
func (me *XsdGoPkgHasElem_LibraryGeometries) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LibraryGeometries; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LibraryGeometries.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The library_effects element declares a module of effect elements.
type XsdGoPkgHasElem_LibraryEffects struct {
	//	The library_effects element declares a module of effect elements.
	LibraryEffects *TxsdLibraryEffects `xml:"http://www.collada.org/2005/11/COLLADASchema library_effects"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LibraryEffects function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LibraryEffects instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LibraryEffects instance.
func (me *XsdGoPkgHasElem_LibraryEffects) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LibraryEffects; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LibraryEffects.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The library_force_fields element declares a module of force_field elements.
type XsdGoPkgHasElem_LibraryForceFields struct {
	//	The library_force_fields element declares a module of force_field elements.
	LibraryForceFields *TxsdLibraryForceFields `xml:"http://www.collada.org/2005/11/COLLADASchema library_force_fields"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LibraryForceFields function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LibraryForceFields instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LibraryForceFields instance.
func (me *XsdGoPkgHasElem_LibraryForceFields) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LibraryForceFields; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LibraryForceFields.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The library_images element declares a module of image elements.
type XsdGoPkgHasElem_LibraryImages struct {
	//	The library_images element declares a module of image elements.
	LibraryImages *TxsdLibraryImages `xml:"http://www.collada.org/2005/11/COLLADASchema library_images"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LibraryImages function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LibraryImages instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LibraryImages instance.
func (me *XsdGoPkgHasElem_LibraryImages) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LibraryImages; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LibraryImages.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The library_lights element declares a module of light elements.
type XsdGoPkgHasElem_LibraryLights struct {
	//	The library_lights element declares a module of light elements.
	LibraryLights *TxsdLibraryLights `xml:"http://www.collada.org/2005/11/COLLADASchema library_lights"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LibraryLights function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LibraryLights instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LibraryLights instance.
func (me *XsdGoPkgHasElem_LibraryLights) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LibraryLights; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LibraryLights.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The library_materials element declares a module of material elements.
type XsdGoPkgHasElem_LibraryMaterials struct {
	//	The library_materials element declares a module of material elements.
	LibraryMaterials *TxsdLibraryMaterials `xml:"http://www.collada.org/2005/11/COLLADASchema library_materials"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LibraryMaterials function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LibraryMaterials instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LibraryMaterials instance.
func (me *XsdGoPkgHasElem_LibraryMaterials) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LibraryMaterials; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LibraryMaterials.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The library_nodes element declares a module of node elements.
type XsdGoPkgHasElem_LibraryNodes struct {
	//	The library_nodes element declares a module of node elements.
	LibraryNodes *TxsdLibraryNodes `xml:"http://www.collada.org/2005/11/COLLADASchema library_nodes"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LibraryNodes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LibraryNodes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LibraryNodes instance.
func (me *XsdGoPkgHasElem_LibraryNodes) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LibraryNodes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LibraryNodes.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The library_physics_materials element declares a module of physics_material elements.
type XsdGoPkgHasElem_LibraryPhysicsMaterials struct {
	//	The library_physics_materials element declares a module of physics_material elements.
	LibraryPhysicsMaterials *TxsdLibraryPhysicsMaterials `xml:"http://www.collada.org/2005/11/COLLADASchema library_physics_materials"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LibraryPhysicsMaterials function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LibraryPhysicsMaterials instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LibraryPhysicsMaterials instance.
func (me *XsdGoPkgHasElem_LibraryPhysicsMaterials) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LibraryPhysicsMaterials; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LibraryPhysicsMaterials.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The library_physics_models element declares a module of physics_model elements.
type XsdGoPkgHasElem_LibraryPhysicsModels struct {
	//	The library_physics_models element declares a module of physics_model elements.
	LibraryPhysicsModels *TxsdLibraryPhysicsModels `xml:"http://www.collada.org/2005/11/COLLADASchema library_physics_models"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LibraryPhysicsModels function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LibraryPhysicsModels instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LibraryPhysicsModels instance.
func (me *XsdGoPkgHasElem_LibraryPhysicsModels) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LibraryPhysicsModels; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LibraryPhysicsModels.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The library_physics_scenes element declares a module of physics_scene elements.
type XsdGoPkgHasElem_LibraryPhysicsScenes struct {
	//	The library_physics_scenes element declares a module of physics_scene elements.
	LibraryPhysicsScenes *TxsdLibraryPhysicsScenes `xml:"http://www.collada.org/2005/11/COLLADASchema library_physics_scenes"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LibraryPhysicsScenes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LibraryPhysicsScenes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LibraryPhysicsScenes instance.
func (me *XsdGoPkgHasElem_LibraryPhysicsScenes) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LibraryPhysicsScenes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LibraryPhysicsScenes.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The library_visual_scenes element declares a module of visual_scene elements.
type XsdGoPkgHasElem_LibraryVisualScenes struct {
	//	The library_visual_scenes element declares a module of visual_scene elements.
	LibraryVisualScenes *TxsdLibraryVisualScenes `xml:"http://www.collada.org/2005/11/COLLADASchema library_visual_scenes"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LibraryVisualScenes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LibraryVisualScenes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LibraryVisualScenes instance.
func (me *XsdGoPkgHasElem_LibraryVisualScenes) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LibraryVisualScenes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LibraryVisualScenes.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The fx_profile_abstract element is only used as a substitution group hook for COLLADA FX profiles.
//	Opens a block of GLSL platform-specific data types and technique declarations.
type XsdGoPkgHasElem_ProfileGlsl struct {
	//	Opens a block of GLSL platform-specific data types and technique declarations.
	ProfileGlsl *TxsdProfileGlsl `xml:"http://www.collada.org/2005/11/COLLADASchema profile_GLSL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ProfileGlsl function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ProfileGlsl instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ProfileGlsl instance.
func (me *XsdGoPkgHasElem_ProfileGlsl) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ProfileGlsl; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ProfileGlsl.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Opens a block of COMMON platform-specific data types and technique declarations.
type XsdGoPkgHasElem_ProfileCommon struct {
	//	Opens a block of COMMON platform-specific data types and technique declarations.
	ProfileCommon *TxsdProfileCommon `xml:"http://www.collada.org/2005/11/COLLADASchema profile_COMMON"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ProfileCommon function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ProfileCommon instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ProfileCommon instance.
func (me *XsdGoPkgHasElem_ProfileCommon) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ProfileCommon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ProfileCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Opens a block of CG platform-specific data types and technique declarations.
type XsdGoPkgHasElem_ProfileCg struct {
	//	Opens a block of CG platform-specific data types and technique declarations.
	ProfileCg *TxsdProfileCg `xml:"http://www.collada.org/2005/11/COLLADASchema profile_CG"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ProfileCg function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ProfileCg instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ProfileCg instance.
func (me *XsdGoPkgHasElem_ProfileCg) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ProfileCg; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ProfileCg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Opens a block of GLES platform-specific data types and technique declarations.
type XsdGoPkgHasElem_ProfileGles struct {
	//	Opens a block of GLES platform-specific data types and technique declarations.
	ProfileGles *TxsdProfileGles `xml:"http://www.collada.org/2005/11/COLLADASchema profile_GLES"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ProfileGles function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ProfileGles instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ProfileGles instance.
func (me *XsdGoPkgHasElem_ProfileGles) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ProfileGles; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ProfileGles.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FxProfileAbstract struct {
	//	The fx_profile_abstract element is only used as a substitution group hook for COLLADA FX profiles.
	FxProfileAbstract xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema fx_profile_abstract"`

	//	Opens a block of COMMON platform-specific data types and technique declarations.
	XsdGoPkgHasElem_ProfileCommon

	//	Opens a block of CG platform-specific data types and technique declarations.
	XsdGoPkgHasElem_ProfileCg

	//	Opens a block of GLES platform-specific data types and technique declarations.
	XsdGoPkgHasElem_ProfileGles

	//	Opens a block of GLSL platform-specific data types and technique declarations.
	XsdGoPkgHasElem_ProfileGlsl
}

//	If the WalkHandlers.XsdGoPkgHasElem_FxProfileAbstract function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FxProfileAbstract instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_FxProfileAbstract instance.
func (me *XsdGoPkgHasElem_FxProfileAbstract) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FxProfileAbstract; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ProfileGlsl.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ProfileCommon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ProfileCg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ProfileGles.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A self contained description of a shader effect.
type XsdGoPkgHasElem_Effect struct {
	//	A self contained description of a shader effect.
	Effect *TxsdEffect `xml:"http://www.collada.org/2005/11/COLLADASchema effect"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Effect function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Effect instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Effect instance.
func (me *XsdGoPkgHasElem_Effect) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Effect; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Effect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GlHookAbstract struct {
	GlHookAbstracts []xsdt.String `xml:"http://www.collada.org/2005/11/COLLADASchema gl_hook_abstract"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GlHookAbstract function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GlHookAbstract instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GlHookAbstract instance.
func (me *XsdGoPkgHasElems_GlHookAbstract) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GlHookAbstract; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	An axis-aligned, centered box primitive.
type XsdGoPkgHasElems_Box struct {
	//	An axis-aligned, centered box primitive.
	Boxs []*TxsdBox `xml:"http://www.collada.org/2005/11/COLLADASchema box"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Box function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Box instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Box instance.
func (me *XsdGoPkgHasElems_Box) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Box; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Boxs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	An infinite plane primitive.
type XsdGoPkgHasElems_Plane struct {
	//	An infinite plane primitive.
	Planes []*TxsdPlane `xml:"http://www.collada.org/2005/11/COLLADASchema plane"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Plane function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Plane instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Plane instance.
func (me *XsdGoPkgHasElems_Plane) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Plane; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Planes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A centered sphere primitive.
type XsdGoPkgHasElems_Sphere struct {
	//	A centered sphere primitive.
	Spheres []*TxsdSphere `xml:"http://www.collada.org/2005/11/COLLADASchema sphere"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Sphere function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Sphere instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Sphere instance.
func (me *XsdGoPkgHasElems_Sphere) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Sphere; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Spheres {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_sizesequenceellipsoidschema_Size_Tfloat3_ struct {
	Size Tfloat3 `xml:"http://www.collada.org/2005/11/COLLADASchema size"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_sizesequenceellipsoidschema_Size_Tfloat3_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_sizesequenceellipsoidschema_Size_Tfloat3_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_sizesequenceellipsoidschema_Size_Tfloat3_ instance.
func (me *XsdGoPkgHasElem_sizesequenceellipsoidschema_Size_Tfloat3_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_sizesequenceellipsoidschema_Size_Tfloat3_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdEllipsoid struct {
	XsdGoPkgHasElem_sizesequenceellipsoidschema_Size_Tfloat3_
}

//	If the WalkHandlers.TxsdEllipsoid function is not nil (ie. was set by outside code), calls it with this TxsdEllipsoid instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdEllipsoid instance.
func (me *TxsdEllipsoid) Walk() (err error) {
	if fn := WalkHandlers.TxsdEllipsoid; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_sizesequenceellipsoidschema_Size_Tfloat3_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Ellipsoid struct {
	Ellipsoid *TxsdEllipsoid `xml:"http://www.collada.org/2005/11/COLLADASchema ellipsoid"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Ellipsoid function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Ellipsoid instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Ellipsoid instance.
func (me *XsdGoPkgHasElem_Ellipsoid) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Ellipsoid; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ellipsoid.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Ellipsoid struct {
	Ellipsoids []*TxsdEllipsoid `xml:"http://www.collada.org/2005/11/COLLADASchema ellipsoid"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Ellipsoid function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Ellipsoid instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Ellipsoid instance.
func (me *XsdGoPkgHasElems_Ellipsoid) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Ellipsoid; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Ellipsoids {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A cylinder primitive that is centered on, and aligned with. the local Y axis.
type XsdGoPkgHasElems_Cylinder struct {
	//	A cylinder primitive that is centered on, and aligned with. the local Y axis.
	Cylinders []*TxsdCylinder `xml:"http://www.collada.org/2005/11/COLLADASchema cylinder"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Cylinder function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Cylinder instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Cylinder instance.
func (me *XsdGoPkgHasElems_Cylinder) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Cylinder; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Cylinders {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A tapered cylinder primitive that is centered on and aligned with the local Y axis.
type XsdGoPkgHasElems_TaperedCylinder struct {
	//	A tapered cylinder primitive that is centered on and aligned with the local Y axis.
	TaperedCylinders []*TxsdTaperedCylinder `xml:"http://www.collada.org/2005/11/COLLADASchema tapered_cylinder"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TaperedCylinder function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TaperedCylinder instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TaperedCylinder instance.
func (me *XsdGoPkgHasElems_TaperedCylinder) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TaperedCylinder; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.TaperedCylinders {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A capsule primitive that is centered on and aligned with the local Y axis.
type XsdGoPkgHasElems_Capsule struct {
	//	A capsule primitive that is centered on and aligned with the local Y axis.
	Capsules []*TxsdCapsule `xml:"http://www.collada.org/2005/11/COLLADASchema capsule"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Capsule function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Capsule instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Capsule instance.
func (me *XsdGoPkgHasElems_Capsule) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Capsule; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Capsules {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A tapered capsule primitive that is centered on, and aligned with, the local Y axis.
type XsdGoPkgHasElems_TaperedCapsule struct {
	//	A tapered capsule primitive that is centered on, and aligned with, the local Y axis.
	TaperedCapsules []*TxsdTaperedCapsule `xml:"http://www.collada.org/2005/11/COLLADASchema tapered_capsule"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TaperedCapsule function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TaperedCapsule instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TaperedCapsule instance.
func (me *XsdGoPkgHasElems_TaperedCapsule) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TaperedCapsule; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.TaperedCapsules {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The definition of the convex_mesh element is identical to the mesh element with the exception that
//	instead of a complete description (source, vertices, polygons etc.), it may simply point to another
//	geometry to derive its shape. The latter case means that the convex hull of that geometry should
//	be computed and is indicated by the optional “convex_hull_of” attribute.
type XsdGoPkgHasElems_ConvexMesh struct {
	//	The definition of the convex_mesh element is identical to the mesh element with the exception that
	//	instead of a complete description (source, vertices, polygons etc.), it may simply point to another
	//	geometry to derive its shape. The latter case means that the convex hull of that geometry should
	//	be computed and is indicated by the optional “convex_hull_of” attribute.
	ConvexMeshs []*TxsdConvexMesh `xml:"http://www.collada.org/2005/11/COLLADASchema convex_mesh"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ConvexMesh function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ConvexMesh instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ConvexMesh instance.
func (me *XsdGoPkgHasElems_ConvexMesh) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ConvexMesh; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ConvexMeshs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	A general container for force-fields. At the moment, it only has techniques and extra elements.
type XsdGoPkgHasElem_ForceField struct {
	//	A general container for force-fields. At the moment, it only has techniques and extra elements.
	ForceField *TxsdForceField `xml:"http://www.collada.org/2005/11/COLLADASchema force_field"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ForceField function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ForceField instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ForceField instance.
func (me *XsdGoPkgHasElem_ForceField) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ForceField; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ForceField.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PhysicsScene struct {
	PhysicsScene *TxsdPhysicsScene `xml:"http://www.collada.org/2005/11/COLLADASchema physics_scene"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PhysicsScene function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PhysicsScene instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PhysicsScene instance.
func (me *XsdGoPkgHasElem_PhysicsScene) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PhysicsScene; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PhysicsScene.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	This element allows for describing simulated bodies that do not deform. These bodies may or may
//	not be connected by constraints (hinge, ball-joint etc.).  Rigid-bodies, constraints etc. are
//	encapsulated in physics_model elements to allow for instantiating complex models.
type XsdGoPkgHasElem_RigidBody struct {
	//	This element allows for describing simulated bodies that do not deform. These bodies may or may
	//	not be connected by constraints (hinge, ball-joint etc.).  Rigid-bodies, constraints etc. are
	//	encapsulated in physics_model elements to allow for instantiating complex models.
	RigidBody *TxsdRigidBody `xml:"http://www.collada.org/2005/11/COLLADASchema rigid_body"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RigidBody function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RigidBody instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RigidBody instance.
func (me *XsdGoPkgHasElem_RigidBody) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RigidBody; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RigidBody.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	This element allows for connecting components, such as rigid_body into complex physics models
//	with moveable parts.
type XsdGoPkgHasElem_RigidConstraint struct {
	//	This element allows for connecting components, such as rigid_body into complex physics models
	//	with moveable parts.
	RigidConstraint *TxsdRigidConstraint `xml:"http://www.collada.org/2005/11/COLLADASchema rigid_constraint"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RigidConstraint function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RigidConstraint instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RigidConstraint instance.
func (me *XsdGoPkgHasElem_RigidConstraint) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RigidConstraint; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RigidConstraint.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	This element allows for building complex combinations of rigid-bodies and constraints that
//	may be instantiated multiple times.
type XsdGoPkgHasElem_PhysicsModel struct {
	//	This element allows for building complex combinations of rigid-bodies and constraints that
	//	may be instantiated multiple times.
	PhysicsModel *TxsdPhysicsModel `xml:"http://www.collada.org/2005/11/COLLADASchema physics_model"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PhysicsModel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PhysicsModel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PhysicsModel instance.
func (me *XsdGoPkgHasElem_PhysicsModel) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PhysicsModel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PhysicsModel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 1143 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

//	Provides 1143 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	TxsdLibraryCameras                                                                                                                                                                                                                func(*TxsdLibraryCameras, bool) error
	XsdGoPkgHasElem_springsequencetechnique_commonsequencerigid_constraintschema_Spring_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring_                                                                                     func(*XsdGoPkgHasElem_springsequencetechnique_commonsequencerigid_constraintschema_Spring_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring_, bool) error
	XsdGoPkgHasElem_fixed3x4choicecg_param_typeschema_Fixed3X4_TcgFixed3X4_                                                                                                                                                           func(*XsdGoPkgHasElem_fixed3x4choicecg_param_typeschema_Fixed3X4_TcgFixed3X4_, bool) error
	XsdGoPkgHasElem_material_ambientchoicegl_pipeline_settingsschema_MaterialAmbient_TxsdGlPipelineSettingsChoiceMaterialAmbient_                                                                                                     func(*XsdGoPkgHasElem_material_ambientchoicegl_pipeline_settingsschema_MaterialAmbient_TxsdGlPipelineSettingsChoiceMaterialAmbient_, bool) error
	XsdGoPkgHasElem_scissor_test_enablechoicegles_pipeline_settingsschema_ScissorTestEnable_TxsdGlesPipelineSettingsChoiceScissorTestEnable_                                                                                          func(*XsdGoPkgHasElem_scissor_test_enablechoicegles_pipeline_settingsschema_ScissorTestEnable_TxsdGlesPipelineSettingsChoiceScissorTestEnable_, bool) error
	XsdGoPkgHasElem_constant_attenuationsequencepointchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10                                                                                                 func(*XsdGoPkgHasElem_constant_attenuationsequencepointchoicetechnique_commonsequencelightschema_ConstantAttenuation_TargetableFloat_10, bool) error
	TcommonTransparentType                                                                                                                                                                                                            func(*TcommonTransparentType, bool) error
	XsdGoPkgHasElem_texture2D_enablechoicegl_pipeline_settingsschema_Texture2DEnable_TxsdGlPipelineSettingsChoiceTexture2DEnable_                                                                                                     func(*XsdGoPkgHasElem_texture2D_enablechoicegl_pipeline_settingsschema_Texture2DEnable_TxsdGlPipelineSettingsChoiceTexture2DEnable_, bool) error
	XsdGoPkgHasElem_sample_coverage_enablechoicegl_pipeline_settingsschema_SampleCoverageEnable_TxsdGlPipelineSettingsChoiceSampleCoverageEnable_                                                                                     func(*XsdGoPkgHasElem_sample_coverage_enablechoicegl_pipeline_settingsschema_SampleCoverageEnable_TxsdGlPipelineSettingsChoiceSampleCoverageEnable_, bool) error
	XsdGoPkgHasElem_Sampler                                                                                                                                                                                                           func(*XsdGoPkgHasElem_Sampler, bool) error
	TcommonNewparamType                                                                                                                                                                                                               func(*TcommonNewparamType, bool) error
	XsdGoPkgHasElem_float2choicefx_basic_type_commonschema_Float2_Tfloat2_                                                                                                                                                            func(*XsdGoPkgHasElem_float2choicefx_basic_type_commonschema_Float2_Tfloat2_, bool) error
	XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_DestRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestRgb_                                                                         func(*XsdGoPkgHasElem_dest_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_DestRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestRgb_, bool) error
	XsdGoPkgHasElems_PhysicsScene                                                                                                                                                                                                     func(*XsdGoPkgHasElems_PhysicsScene, bool) error
	XsdGoPkgHasElem_float3x2choicefx_basic_type_commonschema_Float3X2_Tfloat3X2_                                                                                                                                                      func(*XsdGoPkgHasElem_float3x2choicefx_basic_type_commonschema_Float3X2_Tfloat3X2_, bool) error
	TxsdExtra                                                                                                                                                                                                                         func(*TxsdExtra, bool) error
	TxsdGlesPipelineSettingsChoiceClearStencil                                                                                                                                                                                        func(*TxsdGlesPipelineSettingsChoiceClearStencil, bool) error
	XsdGoPkgHasElem_stencil_funcchoicegl_pipeline_settingsschema_StencilFunc_TxsdGlPipelineSettingsChoiceStencilFunc_                                                                                                                 func(*XsdGoPkgHasElem_stencil_funcchoicegl_pipeline_settingsschema_StencilFunc_TxsdGlPipelineSettingsChoiceStencilFunc_, bool) error
	XsdGoPkgHasElem_stringchoicefx_annotate_type_commonschema_String_XsdtString_                                                                                                                                                      func(*XsdGoPkgHasElem_stringchoicefx_annotate_type_commonschema_String_XsdtString_, bool) error
	XsdGoPkgHasElem_polygon_offsetchoicegl_pipeline_settingsschema_PolygonOffset_TxsdGlPipelineSettingsChoicePolygonOffset_                                                                                                           func(*XsdGoPkgHasElem_polygon_offsetchoicegl_pipeline_settingsschema_PolygonOffset_TxsdGlPipelineSettingsChoicePolygonOffset_, bool) error
	XsdGoPkgHasElems_Skew                                                                                                                                                                                                             func(*XsdGoPkgHasElems_Skew, bool) error
	TxsdNode                                                                                                                                                                                                                          func(*TxsdNode, bool) error
	TxsdLibraryPhysicsModels                                                                                                                                                                                                          func(*TxsdLibraryPhysicsModels, bool) error
	TxsdProfileGlslSequenceTechnique                                                                                                                                                                                                  func(*TxsdProfileGlslSequenceTechnique, bool) error
	XsdGoPkgHasElem_linearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear_                                                         func(*XsdGoPkgHasElem_linearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear_, bool) error
	XsdGoPkgHasElem_LibraryForceFields                                                                                                                                                                                                func(*XsdGoPkgHasElem_LibraryForceFields, bool) error
	XsdGoPkgHasElems_optionsequencefx_surface_format_hint_commonschema_Option_TfxSurfaceFormatHintOptionEnum_                                                                                                                         func(*XsdGoPkgHasElems_optionsequencefx_surface_format_hint_commonschema_Option_TfxSurfaceFormatHintOptionEnum_, bool) error
	TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist                                                                                                                                                 func(*TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist, bool) error
	XsdGoPkgHasElem_sampler3Dchoicefx_basic_type_commonschema_Sampler3D_TfxSampler3DCommon_                                                                                                                                           func(*XsdGoPkgHasElem_sampler3Dchoicefx_basic_type_commonschema_Sampler3D_TfxSampler3DCommon_, bool) error
	XsdGoPkgHasElem_material_specularchoicegles_pipeline_settingsschema_MaterialSpecular_TxsdGlesPipelineSettingsChoiceMaterialSpecular_                                                                                              func(*XsdGoPkgHasElem_material_specularchoicegles_pipeline_settingsschema_MaterialSpecular_TxsdGlesPipelineSettingsChoiceMaterialSpecular_, bool) error
	XsdGoPkgHasElems_passsequencetechniquesequenceprofile_CGschema_Pass_TxsdProfileCgSequenceTechniqueSequencePass_                                                                                                                   func(*XsdGoPkgHasElems_passsequencetechniquesequenceprofile_CGschema_Pass_TxsdProfileCgSequenceTechniqueSequencePass_, bool) error
	XsdGoPkgHasElem_falloff_anglesequencespotchoicetechnique_commonsequencelightschema_FalloffAngle_TargetableFloat_1800                                                                                                              func(*XsdGoPkgHasElem_falloff_anglesequencespotchoicetechnique_commonsequencelightschema_FalloffAngle_TargetableFloat_1800, bool) error
	TxsdLibraryEffects                                                                                                                                                                                                                func(*TxsdLibraryEffects, bool) error
	XsdGoPkgHasElem_halfchoicecg_param_typeschema_Half_TcgHalf_                                                                                                                                                                       func(*XsdGoPkgHasElem_halfchoicecg_param_typeschema_Half_TcgHalf_, bool) error
	TglSampler3D                                                                                                                                                                                                                      func(*TglSampler3D, bool) error
	XsdGoPkgHasElem_stencil_mask_separatechoicegl_pipeline_settingsschema_StencilMaskSeparate_TxsdGlPipelineSettingsChoiceStencilMaskSeparate_                                                                                        func(*XsdGoPkgHasElem_stencil_mask_separatechoicegl_pipeline_settingsschema_StencilMaskSeparate_TxsdGlPipelineSettingsChoiceStencilMaskSeparate_, bool) error
	XsdGoPkgHasElem_material_shininesschoicegl_pipeline_settingsschema_MaterialShininess_TxsdGlPipelineSettingsChoiceMaterialShininess_                                                                                               func(*XsdGoPkgHasElem_material_shininesschoicegl_pipeline_settingsschema_MaterialShininess_TxsdGlPipelineSettingsChoiceMaterialShininess_, bool) error
	XsdGoPkgHasElem_technique_commonsequencerigid_bodyschema_TechniqueCommon_TxsdRigidBodySequenceTechniqueCommon_                                                                                                                    func(*XsdGoPkgHasElem_technique_commonsequencerigid_bodyschema_TechniqueCommon_TxsdRigidBodySequenceTechniqueCommon_, bool) error
	XsdGoPkgHasElem_fixed4x3choicecg_param_typeschema_Fixed4X3_TcgFixed4X3_                                                                                                                                                           func(*XsdGoPkgHasElem_fixed4x3choicecg_param_typeschema_Fixed4X3_TcgFixed4X3_, bool) error
	TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic                                                                                                                                                                 func(*TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic, bool) error
	XsdGoPkgHasElems_Node                                                                                                                                                                                                             func(*XsdGoPkgHasElems_Node, bool) error
	XsdGoPkgHasElem_depth_maskchoicegles_pipeline_settingsschema_DepthMask_TxsdGlesPipelineSettingsChoiceDepthMask_                                                                                                                   func(*XsdGoPkgHasElem_depth_maskchoicegles_pipeline_settingsschema_DepthMask_TxsdGlesPipelineSettingsChoiceDepthMask_, bool) error
	XsdGoPkgHasElems_layersequencerendersequenceevaluate_scenesequencevisual_sceneschema_Layer_XsdtNCName_                                                                                                                            func(*XsdGoPkgHasElems_layersequencerendersequenceevaluate_scenesequencevisual_sceneschema_Layer_XsdtNCName_, bool) error
	XsdGoPkgHasElems_VisualScene                                                                                                                                                                                                      func(*XsdGoPkgHasElems_VisualScene, bool) error
	XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Param_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_                             func(*XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Param_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_, bool) error
	XsdGoPkgHasElem_float3x3choicefx_basic_type_commonschema_Float3X3_Tfloat3X3_                                                                                                                                                      func(*XsdGoPkgHasElem_float3x3choicefx_basic_type_commonschema_Float3X3_Tfloat3X3_, bool) error
	XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLESschema_Setparam_TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam_                                                                                       func(*XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLESschema_Setparam_TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam_, bool) error
	XsdGoPkgHasElem_Lines                                                                                                                                                                                                             func(*XsdGoPkgHasElem_Lines, bool) error
	XsdGoPkgHasElem_sample_coverage_enablechoicegles_pipeline_settingsschema_SampleCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleCoverageEnable_                                                                                 func(*XsdGoPkgHasElem_sample_coverage_enablechoicegles_pipeline_settingsschema_SampleCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleCoverageEnable_, bool) error
	XsdGoPkgHasElem_model_view_matrixchoicegl_pipeline_settingsschema_ModelViewMatrix_TxsdGlPipelineSettingsChoiceModelViewMatrix_                                                                                                    func(*XsdGoPkgHasElem_model_view_matrixchoicegl_pipeline_settingsschema_ModelViewMatrix_TxsdGlPipelineSettingsChoiceModelViewMatrix_, bool) error
	TxsdAsset                                                                                                                                                                                                                         func(*TxsdAsset, bool) error
	TxsdVisualSceneSequenceEvaluateScene                                                                                                                                                                                              func(*TxsdVisualSceneSequenceEvaluateScene, bool) error
	XsdGoPkgHasElem_half3x4choicecg_param_typeschema_Half3X4_TcgHalf3X4_                                                                                                                                                              func(*XsdGoPkgHasElem_half3x4choicecg_param_typeschema_Half3X4_TcgHalf3X4_, bool) error
	TxsdProfileCgSequenceTechniqueSequencePass                                                                                                                                                                                        func(*TxsdProfileCgSequenceTechniqueSequencePass, bool) error
	XsdGoPkgHasElems_Polygons                                                                                                                                                                                                         func(*XsdGoPkgHasElems_Polygons, bool) error
	TcommonFloatOrParamType                                                                                                                                                                                                           func(*TcommonFloatOrParamType, bool) error
	XsdGoPkgHasElem_semanticsequencefx_newparam_commonschema_Semantic_XsdtNCName_                                                                                                                                                     func(*XsdGoPkgHasElem_semanticsequencefx_newparam_commonschema_Semantic_XsdtNCName_, bool) error
	XsdGoPkgHasElem_point_distance_attenuationchoicegl_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlPipelineSettingsChoicePointDistanceAttenuation_                                                                         func(*XsdGoPkgHasElem_point_distance_attenuationchoicegl_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlPipelineSettingsChoicePointDistanceAttenuation_, bool) error
	XsdGoPkgHasElem_stencil_targetsequencepasssequencetechniquesequenceprofile_GLESschema_StencilTarget_TglesRendertargetCommon_                                                                                                      func(*XsdGoPkgHasElem_stencil_targetsequencepasssequencetechniquesequenceprofile_GLESschema_StencilTarget_TglesRendertargetCommon_, bool) error
	XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Name_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_                                                         func(*XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Name_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_, bool) error
	XsdGoPkgHasElem_FxProfileAbstract                                                                                                                                                                                                 func(*XsdGoPkgHasElem_FxProfileAbstract, bool) error
	TxsdAnimationClip                                                                                                                                                                                                                 func(*TxsdAnimationClip, bool) error
	XsdGoPkgHasElem_half3x3choicecg_param_typeschema_Half3X3_TcgHalf3X3_                                                                                                                                                              func(*XsdGoPkgHasElem_half3x3choicecg_param_typeschema_Half3X3_TcgHalf3X3_, bool) error
	TxsdGlesPipelineSettingsChoiceStencilFunc                                                                                                                                                                                         func(*TxsdGlesPipelineSettingsChoiceStencilFunc, bool) error
	XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Bind_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_                                                   func(*XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Bind_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_, bool) error
	TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator                                                                                                                                                                         func(*TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator, bool) error
	XsdGoPkgHasElem_blend_equationchoicegl_pipeline_settingsschema_BlendEquation_TxsdGlPipelineSettingsChoiceBlendEquation_                                                                                                           func(*XsdGoPkgHasElem_blend_equationchoicegl_pipeline_settingsschema_BlendEquation_TxsdGlPipelineSettingsChoiceBlendEquation_, bool) error
	XsdGoPkgHasElem_color_maskchoicegl_pipeline_settingsschema_ColorMask_TxsdGlPipelineSettingsChoiceColorMask_                                                                                                                       func(*XsdGoPkgHasElem_color_maskchoicegl_pipeline_settingsschema_ColorMask_TxsdGlPipelineSettingsChoiceColorMask_, bool) error
	XsdGoPkgHasElem_funcsequencealpha_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceFunc_                                                                                                func(*XsdGoPkgHasElem_funcsequencealpha_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceFunc_, bool) error
	XsdGoPkgHasElems_hsequencephchoicesequencepolygonsschema_H_TListOfUInts_                                                                                                                                                          func(*XsdGoPkgHasElems_hsequencephchoicesequencepolygonsschema_H_TListOfUInts_, bool) error
	XsdGoPkgHasElems_techniquesequenceprofile_CGschema_Technique_TxsdProfileCgSequenceTechnique_                                                                                                                                      func(*XsdGoPkgHasElems_techniquesequenceprofile_CGschema_Technique_TxsdProfileCgSequenceTechnique_, bool) error
	XsdGoPkgHasElem_LibraryLights                                                                                                                                                                                                     func(*XsdGoPkgHasElem_LibraryLights, bool) error
	TxsdMatrix                                                                                                                                                                                                                        func(*TxsdMatrix, bool) error
	TxsdMaterial                                                                                                                                                                                                                      func(*TxsdMaterial, bool) error
	TxsdPolylist                                                                                                                                                                                                                      func(*TxsdPolylist, bool) error
	TglesTexcombinerArgumentRGBType                                                                                                                                                                                                   func(*TglesTexcombinerArgumentRGBType, bool) error
	XsdGoPkgHasElem_texture3D_enablechoicegl_pipeline_settingsschema_Texture3DEnable_TxsdGlPipelineSettingsChoiceTexture3DEnable_                                                                                                     func(*XsdGoPkgHasElem_texture3D_enablechoicegl_pipeline_settingsschema_Texture3DEnable_TxsdGlPipelineSettingsChoiceTexture3DEnable_, bool) error
	XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Hollow_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_                                                      func(*XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Hollow_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_, bool) error
	TglSampler1D                                                                                                                                                                                                                      func(*TglSampler1D, bool) error
	XsdGoPkgHasElems_Scale                                                                                                                                                                                                            func(*XsdGoPkgHasElems_Scale, bool) error
	TfxSampler1DCommon                                                                                                                                                                                                                func(*TfxSampler1DCommon, bool) error
	XsdGoPkgHasElem_stencil_opchoicegl_pipeline_settingsschema_StencilOp_TxsdGlPipelineSettingsChoiceStencilOp_                                                                                                                       func(*XsdGoPkgHasElem_stencil_opchoicegl_pipeline_settingsschema_StencilOp_TxsdGlPipelineSettingsChoiceStencilOp_, bool) error
	XsdGoPkgHasElem_generatorsequenceextensioncomplexContentglsl_surface_typeschema_Generator_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator_                                                                            func(*XsdGoPkgHasElem_generatorsequenceextensioncomplexContentglsl_surface_typeschema_Generator_TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator_, bool) error
	XsdGoPkgHasElem_surfacechoiceglsl_param_typeschema_Surface_TglslSurfaceType_                                                                                                                                                      func(*XsdGoPkgHasElem_surfacechoiceglsl_param_typeschema_Surface_TglslSurfaceType_, bool) error
	XsdGoPkgHasElems_LibraryPhysicsModels                                                                                                                                                                                             func(*XsdGoPkgHasElems_LibraryPhysicsModels, bool) error
	XsdGoPkgHasElem_int3x1choicecg_param_typeschema_Int3X1_TcgInt3X1_                                                                                                                                                                 func(*XsdGoPkgHasElem_int3x1choicecg_param_typeschema_Int3X1_TcgInt3X1_, bool) error
	XsdGoPkgHasElem_bool3choiceglsl_param_typeschema_Bool3_TglslBool3_                                                                                                                                                                func(*XsdGoPkgHasElem_bool3choiceglsl_param_typeschema_Bool3_TglslBool3_, bool) error
	XsdGoPkgHasElems_Rotate                                                                                                                                                                                                           func(*XsdGoPkgHasElems_Rotate, bool) error
	TxsdGlesPipelineSettingsChoiceLightLinearAttenutation                                                                                                                                                                             func(*TxsdGlesPipelineSettingsChoiceLightLinearAttenutation, bool) error
	XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Name_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_                                                func(*XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Name_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_, bool) error
	XsdGoPkgHasElem_precisionsequencefx_surface_format_hint_commonschema_Precision_TfxSurfaceFormatHintPrecisionEnum_                                                                                                                 func(*XsdGoPkgHasElem_precisionsequencefx_surface_format_hint_commonschema_Precision_TfxSurfaceFormatHintPrecisionEnum_, bool) error
	XsdGoPkgHasElem_valuesequencetexture_pipelinechoicegles_pipeline_settingsschema_Value_TglesTexturePipeline_                                                                                                                       func(*XsdGoPkgHasElem_valuesequencetexture_pipelinechoicegles_pipeline_settingsschema_Value_TglesTexturePipeline_, bool) error
	XsdGoPkgHasElem_fog_densitychoicegles_pipeline_settingsschema_FogDensity_TxsdGlesPipelineSettingsChoiceFogDensity_                                                                                                                func(*XsdGoPkgHasElem_fog_densitychoicegles_pipeline_settingsschema_FogDensity_TxsdGlesPipelineSettingsChoiceFogDensity_, bool) error
	XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerTarget_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_ func(*XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerTarget_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_, bool) error
	XsdGoPkgHasElems_ProfileCg                                                                                                                                                                                                        func(*XsdGoPkgHasElems_ProfileCg, bool) error
	XsdGoPkgHasElem_float3x3choicecg_param_typeschema_Float3X3_TcgFloat3X3_                                                                                                                                                           func(*XsdGoPkgHasElem_float3x3choicecg_param_typeschema_Float3X3_TcgFloat3X3_, bool) error
	XsdGoPkgHasElem_mipmap_generatesequencefx_surface_commonschema_MipmapGenerate_XsdtBoolean_                                                                                                                                        func(*XsdGoPkgHasElem_mipmap_generatesequencefx_surface_commonschema_MipmapGenerate_XsdtBoolean_, bool) error
	XsdGoPkgHasElem_static_frictionsequencetechnique_commonsequencephysics_materialschema_StaticFriction_TargetableFloat_                                                                                                             func(*XsdGoPkgHasElem_static_frictionsequencetechnique_commonsequencephysics_materialschema_StaticFriction_TargetableFloat_, bool) error
	XsdGoPkgHasElem_colorsequencepointchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_                                                                                                                               func(*XsdGoPkgHasElem_colorsequencepointchoicetechnique_commonsequencelightschema_Color_TargetableFloat3_, bool) error
	TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask                                                                                                                                                                             func(*TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask, bool) error
	XsdGoPkgHasElems_PhysicsModel                                                                                                                                                                                                     func(*XsdGoPkgHasElems_PhysicsModel, bool) error
	XsdGoPkgHasElem_light_linear_attenutationchoicegles_pipeline_settingsschema_LightLinearAttenutation_TxsdGlesPipelineSettingsChoiceLightLinearAttenutation_                                                                        func(*XsdGoPkgHasElem_light_linear_attenutationchoicegles_pipeline_settingsschema_LightLinearAttenutation_TxsdGlesPipelineSettingsChoiceLightLinearAttenutation_, bool) error
	XsdGoPkgHasElem_zfarsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Zfar_TargetableFloat_                                                                                                             func(*XsdGoPkgHasElem_zfarsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Zfar_TargetableFloat_, bool) error
	XsdGoPkgHasElem_InstanceMaterial                                                                                                                                                                                                  func(*XsdGoPkgHasElem_InstanceMaterial, bool) error
	XsdGoPkgHasElem_color_maskchoicegles_pipeline_settingsschema_ColorMask_TxsdGlesPipelineSettingsChoiceColorMask_                                                                                                                   func(*XsdGoPkgHasElem_color_maskchoicegles_pipeline_settingsschema_ColorMask_TxsdGlesPipelineSettingsChoiceColorMask_, bool) error
	XsdGoPkgHasElem_float1x2choicefx_basic_type_commonschema_Float1X2_Tfloat2_                                                                                                                                                        func(*XsdGoPkgHasElem_float1x2choicefx_basic_type_commonschema_Float1X2_Tfloat2_, bool) error
	XsdGoPkgHasElem_vertex_weightssequenceskinschema_VertexWeights_TxsdSkinSequenceVertexWeights_                                                                                                                                     func(*XsdGoPkgHasElem_vertex_weightssequenceskinschema_VertexWeights_TxsdSkinSequenceVertexWeights_, bool) error
	XsdGoPkgHasElem_zfailsequencestencil_opchoicegles_pipeline_settingsschema_Zfail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail_                                                                                             func(*XsdGoPkgHasElem_zfailsequencestencil_opchoicegles_pipeline_settingsschema_Zfail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail_, bool) error
	TxsdGlPipelineSettingsChoiceLightPosition                                                                                                                                                                                         func(*TxsdGlPipelineSettingsChoiceLightPosition, bool) error
	TxsdGlPipelineSettingsChoiceColorMask                                                                                                                                                                                             func(*TxsdGlPipelineSettingsChoiceColorMask, bool) error
	XsdGoPkgHasElems_RigidConstraint                                                                                                                                                                                                  func(*XsdGoPkgHasElems_RigidConstraint, bool) error
	TxsdGlPipelineSettingsChoiceLightSpecular                                                                                                                                                                                         func(*TxsdGlPipelineSettingsChoiceLightSpecular, bool) error
	XsdGoPkgHasElem_Rotate                                                                                                                                                                                                            func(*XsdGoPkgHasElem_Rotate, bool) error
	XsdGoPkgHasElems_Trifans                                                                                                                                                                                                          func(*XsdGoPkgHasElems_Trifans, bool) error
	XsdGoPkgHasElem_clip_plane_enablechoicegles_pipeline_settingsschema_ClipPlaneEnable_TxsdGlesPipelineSettingsChoiceClipPlaneEnable_                                                                                                func(*XsdGoPkgHasElem_clip_plane_enablechoicegles_pipeline_settingsschema_ClipPlaneEnable_TxsdGlesPipelineSettingsChoiceClipPlaneEnable_, bool) error
	XsdGoPkgHasElem_alpha_funcchoicegles_pipeline_settingsschema_AlphaFunc_TxsdGlesPipelineSettingsChoiceAlphaFunc_                                                                                                                   func(*XsdGoPkgHasElem_alpha_funcchoicegles_pipeline_settingsschema_AlphaFunc_TxsdGlesPipelineSettingsChoiceAlphaFunc_, bool) error
	XsdGoPkgHasElem_sampler1Dchoicecg_param_typeschema_Sampler1D_TcgSampler1D_                                                                                                                                                        func(*XsdGoPkgHasElem_sampler1Dchoicecg_param_typeschema_Sampler1D_TcgSampler1D_, bool) error
	XsdGoPkgHasElem_float2x1choicecg_param_typeschema_Float2X1_TcgFloat2X1_                                                                                                                                                           func(*XsdGoPkgHasElem_float2x1choicecg_param_typeschema_Float2X1_TcgFloat2X1_, bool) error
	XsdGoPkgHasElem_bool3choicecg_param_typeschema_Bool3_TcgBool3_                                                                                                                                                                    func(*XsdGoPkgHasElem_bool3choicecg_param_typeschema_Bool3_TcgBool3_, bool) error
	TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator                                                                                                                                                                       func(*TxsdGlslSurfaceTypeComplexContentExtensionSequenceGenerator, bool) error
	XsdGoPkgHasElems_Collada                                                                                                                                                                                                          func(*XsdGoPkgHasElems_Collada, bool) error
	XsdGoPkgHasElem_int2x1choicecg_param_typeschema_Int2X1_TcgInt2X1_                                                                                                                                                                 func(*XsdGoPkgHasElem_int2x1choicecg_param_typeschema_Int2X1_TcgInt2X1_, bool) error
	XsdGoPkgHasElem_arraychoicesequencecg_newparamschema_Array_TcgNewarrayType_                                                                                                                                                       func(*XsdGoPkgHasElem_arraychoicesequencecg_newparamschema_Array_TcgNewarrayType_, bool) error
	XsdGoPkgHasElem_enumchoicegles_basic_type_commonschema_Enum_TglesEnumeration_                                                                                                                                                     func(*XsdGoPkgHasElem_enumchoicegles_basic_type_commonschema_Enum_TglesEnumeration_, bool) error
	XsdGoPkgHasElem_valuechoicetextureCUBEchoicegl_pipeline_settingsschema_Value_TglSamplerCUBE_                                                                                                                                      func(*XsdGoPkgHasElem_valuechoicetextureCUBEchoicegl_pipeline_settingsschema_Value_TglSamplerCUBE_, bool) error
	TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName                                                                                                                                                           func(*TxsdGlslSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName, bool) error
	XsdGoPkgHasElem_half4x1choicecg_param_typeschema_Half4X1_TcgHalf4X1_                                                                                                                                                              func(*XsdGoPkgHasElem_half4x1choicecg_param_typeschema_Half4X1_TcgHalf4X1_, bool) error
	XsdGoPkgHasElem_ConvexMesh                                                                                                                                                                                                        func(*XsdGoPkgHasElem_ConvexMesh, bool) error
	XsdGoPkgHasElem_fog_enablechoicegles_pipeline_settingsschema_FogEnable_TxsdGlesPipelineSettingsChoiceFogEnable_                                                                                                                   func(*XsdGoPkgHasElem_fog_enablechoicegles_pipeline_settingsschema_FogEnable_TxsdGlesPipelineSettingsChoiceFogEnable_, bool) error
	XsdGoPkgHasElem_bool3x3choicecg_param_typeschema_Bool3X3_TcgBool3X3_                                                                                                                                                              func(*XsdGoPkgHasElem_bool3x3choicecg_param_typeschema_Bool3X3_TcgBool3X3_, bool) error
	TxsdTristrips                                                                                                                                                                                                                     func(*TxsdTristrips, bool) error
	XsdGoPkgHasElem_depth_clamp_enablechoicegl_pipeline_settingsschema_DepthClampEnable_TxsdGlPipelineSettingsChoiceDepthClampEnable_                                                                                                 func(*XsdGoPkgHasElem_depth_clamp_enablechoicegl_pipeline_settingsschema_DepthClampEnable_TxsdGlPipelineSettingsChoiceDepthClampEnable_, bool) error
	XsdGoPkgHasElem_Triangles                                                                                                                                                                                                         func(*XsdGoPkgHasElem_Triangles, bool) error
	XsdGoPkgHasElem_light_positionchoicegl_pipeline_settingsschema_LightPosition_TxsdGlPipelineSettingsChoiceLightPosition_                                                                                                           func(*XsdGoPkgHasElem_light_positionchoicegl_pipeline_settingsschema_LightPosition_TxsdGlPipelineSettingsChoiceLightPosition_, bool) error
	XsdGoPkgHasElem_polygon_offset_fill_enablechoicegl_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlPipelineSettingsChoicePolygonOffsetFillEnable_                                                                           func(*XsdGoPkgHasElem_polygon_offset_fill_enablechoicegl_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlPipelineSettingsChoicePolygonOffsetFillEnable_, bool) error
	XsdGoPkgHasElem_paramchoicetexture2Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_                                                                                                                                            func(*XsdGoPkgHasElem_paramchoicetexture2Dchoicegl_pipeline_settingsschema_Param_XsdtNCName_, bool) error
	TfxSurfaceCommon                                                                                                                                                                                                                  func(*TfxSurfaceCommon, bool) error
	XsdGoPkgHasElem_quadratic_attenuationsequencepointchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00                                                                                               func(*XsdGoPkgHasElem_quadratic_attenuationsequencepointchoicetechnique_commonsequencelightschema_QuadraticAttenuation_TargetableFloat_00, bool) error
	XsdGoPkgHasElem_Plane                                                                                                                                                                                                             func(*XsdGoPkgHasElem_Plane, bool) error
	XsdGoPkgHasElem_transparentsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_                                                                                                   func(*XsdGoPkgHasElem_transparentsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparent_TcommonTransparentType_, bool) error
	XsdGoPkgHasElem_color_material_enablechoicegl_pipeline_settingsschema_ColorMaterialEnable_TxsdGlPipelineSettingsChoiceColorMaterialEnable_                                                                                        func(*XsdGoPkgHasElem_color_material_enablechoicegl_pipeline_settingsschema_ColorMaterialEnable_TxsdGlPipelineSettingsChoiceColorMaterialEnable_, bool) error
	XsdGoPkgHasElem_stencil_op_separatechoicegl_pipeline_settingsschema_StencilOpSeparate_TxsdGlPipelineSettingsChoiceStencilOpSeparate_                                                                                              func(*XsdGoPkgHasElem_stencil_op_separatechoicegl_pipeline_settingsschema_StencilOpSeparate_TxsdGlPipelineSettingsChoiceStencilOpSeparate_, bool) error
	XsdGoPkgHasElem_source_datasequencecontributorsequenceassetschema_SourceData_XsdtAnyURI_                                                                                                                                          func(*XsdGoPkgHasElem_source_datasequencecontributorsequenceassetschema_SourceData_XsdtAnyURI_, bool) error
	XsdGoPkgHasElem_int3x3choicecg_param_typeschema_Int3X3_TcgInt3X3_                                                                                                                                                                 func(*XsdGoPkgHasElem_int3x3choicecg_param_typeschema_Int3X3_TcgInt3X3_, bool) error
	XsdGoPkgHasElem_LibraryMaterials                                                                                                                                                                                                  func(*XsdGoPkgHasElem_LibraryMaterials, bool) error
	XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLSLschema_Pass_TxsdProfileGlslSequenceTechniqueSequencePass_                                                                                                               func(*XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLSLschema_Pass_TxsdProfileGlslSequenceTechniqueSequencePass_, bool) error
	XsdGoPkgHasElem_half1x2choicecg_param_typeschema_Half1X2_TcgHalf1X2_                                                                                                                                                              func(*XsdGoPkgHasElem_half1x2choicecg_param_typeschema_Half1X2_TcgHalf1X2_, bool) error
	TxsdInstanceMaterialSequenceBind                                                                                                                                                                                                  func(*TxsdInstanceMaterialSequenceBind, bool) error
	TxsdGlPipelineSettingsChoiceLightSpotCutoff                                                                                                                                                                                       func(*TxsdGlPipelineSettingsChoiceLightSpotCutoff, bool) error
	XsdGoPkgHasElem_fixed1x1choicecg_param_typeschema_Fixed1X1_TcgFixed1X1_                                                                                                                                                           func(*XsdGoPkgHasElem_fixed1x1choicecg_param_typeschema_Fixed1X1_TcgFixed1X1_, bool) error
	TxsdSampler                                                                                                                                                                                                                       func(*TxsdSampler, bool) error
	XsdGoPkgHasElems_LibraryVisualScenes                                                                                                                                                                                              func(*XsdGoPkgHasElems_LibraryVisualScenes, bool) error
	TxsdGlPipelineSettingsChoiceTexture2D                                                                                                                                                                                             func(*TxsdGlPipelineSettingsChoiceTexture2D, bool) error
	TxsdGlPipelineSettingsChoiceLightSpotDirection                                                                                                                                                                                    func(*TxsdGlPipelineSettingsChoiceLightSpotDirection, bool) error
	XsdGoPkgHasElem_float4x3choicecg_param_typeschema_Float4X3_TcgFloat4X3_                                                                                                                                                           func(*XsdGoPkgHasElem_float4x3choicecg_param_typeschema_Float4X3_TcgFloat4X3_, bool) error
	XsdGoPkgHasElems_IntArray                                                                                                                                                                                                         func(*XsdGoPkgHasElems_IntArray, bool) error
	XsdGoPkgHasElems_arraychoicecg_newarray_typeschema_Array_TcgNewarrayType_                                                                                                                                                         func(*XsdGoPkgHasElems_arraychoicecg_newarray_typeschema_Array_TcgNewarrayType_, bool) error
	XsdGoPkgHasElem_half1x3choicecg_param_typeschema_Half1X3_TcgHalf1X3_                                                                                                                                                              func(*XsdGoPkgHasElem_half1x3choicecg_param_typeschema_Half1X3_TcgHalf1X3_, bool) error
	XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZfail_                                                                                func(*XsdGoPkgHasElem_zfailsequencestencil_op_separatechoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZfail_, bool) error
	XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000                                                                                                 func(*XsdGoPkgHasElem_maxsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Max_TargetableFloat3_000000, bool) error
	XsdGoPkgHasElem_zpasssequencestencil_opchoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSequenceZpass_                                                                                                 func(*XsdGoPkgHasElem_zpasssequencestencil_opchoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSequenceZpass_, bool) error
	XsdGoPkgHasElem_floatchoiceglsl_param_typeschema_Float_TglslFloat_                                                                                                                                                                func(*XsdGoPkgHasElem_floatchoiceglsl_param_typeschema_Float_TglslFloat_, bool) error
	XsdGoPkgHasElem_sampler2Dchoicefx_basic_type_commonschema_Sampler2D_TfxSampler2DCommon_                                                                                                                                           func(*XsdGoPkgHasElem_sampler2Dchoicefx_basic_type_commonschema_Sampler2D_TfxSampler2DCommon_, bool) error
	XsdGoPkgHasElem_mip_levelssequencefx_surface_commonschema_MipLevels_XsdtUnsignedInt_0                                                                                                                                             func(*XsdGoPkgHasElem_mip_levelssequencefx_surface_commonschema_MipLevels_XsdtUnsignedInt_0, bool) error
	XsdGoPkgHasElem_PhysicsModel                                                                                                                                                                                                      func(*XsdGoPkgHasElem_PhysicsModel, bool) error
	XsdGoPkgHasElem_blend_funcchoicegl_pipeline_settingsschema_BlendFunc_TxsdGlPipelineSettingsChoiceBlendFunc_                                                                                                                       func(*XsdGoPkgHasElem_blend_funcchoicegl_pipeline_settingsschema_BlendFunc_TxsdGlPipelineSettingsChoiceBlendFunc_, bool) error
	XsdGoPkgHasElems_techniquesequenceprofile_GLSLschema_Technique_TxsdProfileGlslSequenceTechnique_                                                                                                                                  func(*XsdGoPkgHasElems_techniquesequenceprofile_GLSLschema_Technique_TxsdProfileGlslSequenceTechnique_, bool) error
	XsdGoPkgHasElems_Tristrips                                                                                                                                                                                                        func(*XsdGoPkgHasElems_Tristrips, bool) error
	XsdGoPkgHasElem_radius2sequencetapered_capsuleschema_Radius2_Tfloat2_                                                                                                                                                             func(*XsdGoPkgHasElem_radius2sequencetapered_capsuleschema_Radius2_Tfloat2_, bool) error
	XsdGoPkgHasElem_point_sizechoicegles_pipeline_settingsschema_PointSize_TxsdGlesPipelineSettingsChoicePointSize_                                                                                                                   func(*XsdGoPkgHasElem_point_sizechoicegles_pipeline_settingsschema_PointSize_TxsdGlesPipelineSettingsChoicePointSize_, bool) error
	XsdGoPkgHasElem_int3choicecg_param_typeschema_Int3_TcgInt3_                                                                                                                                                                       func(*XsdGoPkgHasElem_int3choicecg_param_typeschema_Int3_TcgInt3_, bool) error
	XsdGoPkgHasElem_float3choicecg_param_typeschema_Float3_TcgFloat3_                                                                                                                                                                 func(*XsdGoPkgHasElem_float3choicecg_param_typeschema_Float3_TcgFloat3_, bool) error
	TargetableFloat3                                                                                                                                                                                                                  func(*TargetableFloat3, bool) error
	XsdGoPkgHasElem_InstanceNode                                                                                                                                                                                                      func(*XsdGoPkgHasElem_InstanceNode, bool) error
	TxsdProfileGlslSequenceTechniqueSequencePass                                                                                                                                                                                      func(*TxsdProfileGlslSequenceTechniqueSequencePass, bool) error
	XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceMask_                                                                               func(*XsdGoPkgHasElem_masksequencestencil_mask_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceMask_, bool) error
	XsdGoPkgHasElem_init_fromchoicesequenceimageschema_InitFrom_XsdtAnyURI_                                                                                                                                                           func(*XsdGoPkgHasElem_init_fromchoicesequenceimageschema_InitFrom_XsdtAnyURI_, bool) error
	XsdGoPkgHasElem_Asset                                                                                                                                                                                                             func(*XsdGoPkgHasElem_Asset, bool) error
	XsdGoPkgHasElem_samplerDEPTHchoiceglsl_param_typeschema_SamplerDEPTH_TglSamplerDEPTH_                                                                                                                                             func(*XsdGoPkgHasElem_samplerDEPTHchoiceglsl_param_typeschema_SamplerDEPTH_TglSamplerDEPTH_, bool) error
	XsdGoPkgHasElem_textureCUBE_enablechoicegl_pipeline_settingsschema_TextureCUBEEnable_TxsdGlPipelineSettingsChoiceTextureCUBEEnable_                                                                                               func(*XsdGoPkgHasElem_textureCUBE_enablechoicegl_pipeline_settingsschema_TextureCUBEEnable_TxsdGlPipelineSettingsChoiceTextureCUBEEnable_, bool) error
	TxsdAnimation                                                                                                                                                                                                                     func(*TxsdAnimation, bool) error
	TglSamplerDEPTH                                                                                                                                                                                                                   func(*TglSamplerDEPTH, bool) error
	XsdGoPkgHasElem_scenesequenceCOLLADAschema_Scene_TxsdColladaSequenceScene_                                                                                                                                                        func(*XsdGoPkgHasElem_scenesequenceCOLLADAschema_Scene_TxsdColladaSequenceScene_, bool) error
	TfxSurfaceFormatHintCommon                                                                                                                                                                                                        func(*TfxSurfaceFormatHintCommon, bool) error
	XsdGoPkgHasElem_Lookat                                                                                                                                                                                                            func(*XsdGoPkgHasElem_Lookat, bool) error
	XsdGoPkgHasElem_stencil_funcchoicegles_pipeline_settingsschema_StencilFunc_TxsdGlesPipelineSettingsChoiceStencilFunc_                                                                                                             func(*XsdGoPkgHasElem_stencil_funcchoicegles_pipeline_settingsschema_StencilFunc_TxsdGlesPipelineSettingsChoiceStencilFunc_, bool) error
	TxsdGlesPipelineSettingsChoiceLightSpotExponent                                                                                                                                                                                   func(*TxsdGlesPipelineSettingsChoiceLightSpotExponent, bool) error
	XsdGoPkgHasGroup_FxBasicTypeCommon                                                                                                                                                                                                func(*XsdGoPkgHasGroup_FxBasicTypeCommon, bool) error
	TxsdSource                                                                                                                                                                                                                        func(*TxsdSource, bool) error
	TxsdProfileCommonSequenceTechniqueSequenceChoicePhong                                                                                                                                                                             func(*TxsdProfileCommonSequenceTechniqueSequenceChoicePhong, bool) error
	XsdGoPkgHasElem_emissionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_                                                                                                      func(*XsdGoPkgHasElem_emissionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Emission_TcommonColorOrTextureType_, bool) error
	XsdGoPkgHasElem_Polygons                                                                                                                                                                                                          func(*XsdGoPkgHasElem_Polygons, bool) error
	XsdGoPkgHasElems_texcombinerchoicegles_texture_pipelineschema_Texcombiner_TglesTexcombinerCommandType_                                                                                                                            func(*XsdGoPkgHasElems_texcombinerchoicegles_texture_pipelineschema_Texcombiner_TglesTexcombinerCommandType_, bool) error
	XsdGoPkgHasElem_dynamic_frictionsequencetechnique_commonsequencephysics_materialschema_DynamicFriction_TargetableFloat_                                                                                                           func(*XsdGoPkgHasElem_dynamic_frictionsequencetechnique_commonsequencephysics_materialschema_DynamicFriction_TargetableFloat_, bool) error
	XsdGoPkgHasElem_half4x4choicecg_param_typeschema_Half4X4_TcgHalf4X4_                                                                                                                                                              func(*XsdGoPkgHasElem_half4x4choicecg_param_typeschema_Half4X4_TcgHalf4X4_, bool) error
	XsdGoPkgHasElem_light_spot_directionchoicegles_pipeline_settingsschema_LightSpotDirection_TxsdGlesPipelineSettingsChoiceLightSpotDirection_                                                                                       func(*XsdGoPkgHasElem_light_spot_directionchoicegles_pipeline_settingsschema_LightSpotDirection_TxsdGlesPipelineSettingsChoiceLightSpotDirection_, bool) error
	XsdGoPkgHasElem_float2choiceglsl_param_typeschema_Float2_TglslFloat2_                                                                                                                                                             func(*XsdGoPkgHasElem_float2choiceglsl_param_typeschema_Float2_TglslFloat2_, bool) error
	TxsdInstanceEffectSequenceSetparam                                                                                                                                                                                                func(*TxsdInstanceEffectSequenceSetparam, bool) error
	TcgSampler1D                                                                                                                                                                                                                      func(*TcgSampler1D, bool) error
	XsdGoPkgHasElem_material_ambientchoicegles_pipeline_settingsschema_MaterialAmbient_TxsdGlesPipelineSettingsChoiceMaterialAmbient_                                                                                                 func(*XsdGoPkgHasElem_material_ambientchoicegles_pipeline_settingsschema_MaterialAmbient_TxsdGlesPipelineSettingsChoiceMaterialAmbient_, bool) error
	XsdGoPkgHasElem_titlesequenceassetschema_Title_XsdtString_                                                                                                                                                                        func(*XsdGoPkgHasElem_titlesequenceassetschema_Title_XsdtString_, bool) error
	XsdGoPkgHasGroup_CgParamType                                                                                                                                                                                                      func(*XsdGoPkgHasGroup_CgParamType, bool) error
	XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLSLschema_Setparam_TglslSetparam_                                                                                                                                func(*XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_GLSLschema_Setparam_TglslSetparam_, bool) error
	XsdGoPkgHasElem_Cylinder                                                                                                                                                                                                          func(*XsdGoPkgHasElem_Cylinder, bool) error
	TcgSamplerCUBE                                                                                                                                                                                                                    func(*TcgSamplerCUBE, bool) error
	XsdGoPkgHasElem_multisample_enablechoicegles_pipeline_settingsschema_MultisampleEnable_TxsdGlesPipelineSettingsChoiceMultisampleEnable_                                                                                           func(*XsdGoPkgHasElem_multisample_enablechoicegles_pipeline_settingsschema_MultisampleEnable_TxsdGlesPipelineSettingsChoiceMultisampleEnable_, bool) error
	XsdGoPkgHasElem_surfacechoicefx_basic_type_commonschema_Surface_TfxSurfaceCommon_                                                                                                                                                 func(*XsdGoPkgHasElem_surfacechoicefx_basic_type_commonschema_Surface_TfxSurfaceCommon_, bool) error
	XsdGoPkgHasElem_float4choiceglsl_param_typeschema_Float4_TglslFloat4_                                                                                                                                                             func(*XsdGoPkgHasElem_float4choiceglsl_param_typeschema_Float4_TglslFloat4_, bool) error
	XsdGoPkgHasElem_bool1x1choicecg_param_typeschema_Bool1X1_TcgBool1X1_                                                                                                                                                              func(*XsdGoPkgHasElem_bool1x1choicecg_param_typeschema_Bool1X1_TcgBool1X1_, bool) error
	XsdGoPkgHasElem_allchoicefx_surface_init_planar_commonschema_All_TxsdFxSurfaceInitPlanarCommonChoiceAll_                                                                                                                          func(*XsdGoPkgHasElem_allchoicefx_surface_init_planar_commonschema_All_TxsdFxSurfaceInitPlanarCommonChoiceAll_, bool) error
	XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000                                                                                                 func(*XsdGoPkgHasElem_minsequencelinearsequencelimitssequencetechnique_commonsequencerigid_constraintschema_Min_TargetableFloat3_000000, bool) error
	XsdGoPkgHasElem_InstanceController                                                                                                                                                                                                func(*XsdGoPkgHasElem_InstanceController, bool) error
	XsdGoPkgHasElem_PhysicsMaterial                                                                                                                                                                                                   func(*XsdGoPkgHasElem_PhysicsMaterial, bool) error
	TInstanceWithExtra                                                                                                                                                                                                                func(*TInstanceWithExtra, bool) error
	XsdGoPkgHasElem_intchoiceglsl_param_typeschema_Int_TglslInt_                                                                                                                                                                      func(*XsdGoPkgHasElem_intchoiceglsl_param_typeschema_Int_TglslInt_, bool) error
	XsdGoPkgHasElem_boolchoicecg_param_typeschema_Bool_TcgBool_                                                                                                                                                                       func(*XsdGoPkgHasElem_boolchoicecg_param_typeschema_Bool_TcgBool_, bool) error
	XsdGoPkgHasElem_int1x3choicecg_param_typeschema_Int1X3_TcgInt1X3_                                                                                                                                                                 func(*XsdGoPkgHasElem_int1x3choicecg_param_typeschema_Int1X3_TcgInt1X3_, bool) error
	TxsdBoolArray                                                                                                                                                                                                                     func(*TxsdBoolArray, bool) error
	XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Code_TfxCodeProfile_                                                                                                           func(*XsdGoPkgHasElems_codechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Code_TfxCodeProfile_, bool) error
	XsdGoPkgHasElem_diffusesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_                                                                                                        func(*XsdGoPkgHasElem_diffusesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Diffuse_TcommonColorOrTextureType_, bool) error
	TxsdLibraryForceFields                                                                                                                                                                                                            func(*TxsdLibraryForceFields, bool) error
	TglesTextureUnit                                                                                                                                                                                                                  func(*TglesTextureUnit, bool) error
	TxsdGlesPipelineSettingsChoiceFogColor                                                                                                                                                                                            func(*TxsdGlesPipelineSettingsChoiceFogColor, bool) error
	XsdGoPkgHasElem_valuechoicetexture2Dchoicegl_pipeline_settingsschema_Value_TglSampler2D_                                                                                                                                          func(*XsdGoPkgHasElem_valuechoicetexture2Dchoicegl_pipeline_settingsschema_Value_TglSampler2D_, bool) error
	XsdGoPkgHasElem_fixed4x4choicecg_param_typeschema_Fixed4X4_TcgFixed4X4_                                                                                                                                                           func(*XsdGoPkgHasElem_fixed4x4choicecg_param_typeschema_Fixed4X4_TcgFixed4X4_, bool) error
	XsdGoPkgHasElems_IdrefArray                                                                                                                                                                                                       func(*XsdGoPkgHasElems_IdrefArray, bool) error
	XsdGoPkgHasElem_float3choicefx_basic_type_commonschema_Float3_Tfloat3_                                                                                                                                                            func(*XsdGoPkgHasElem_float3choicefx_basic_type_commonschema_Float3_Tfloat3_, bool) error
	XsdGoPkgHasElem_half3choicecg_param_typeschema_Half3_TcgHalf3_                                                                                                                                                                    func(*XsdGoPkgHasElem_half3choicecg_param_typeschema_Half3_TcgHalf3_, bool) error
	TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue                                                                                                                                                                              func(*TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue, bool) error
	XsdGoPkgHasElem_Matrix                                                                                                                                                                                                            func(*XsdGoPkgHasElem_Matrix, bool) error
	XsdGoPkgHasElem_half4choicecg_param_typeschema_Half4_TcgHalf4_                                                                                                                                                                    func(*XsdGoPkgHasElem_half4choicecg_param_typeschema_Half4_TcgHalf4_, bool) error
	XsdGoPkgHasElems_facechoicefx_surface_init_cube_commonschema_Face_TxsdFxSurfaceInitCubeCommonChoiceFace_                                                                                                                          func(*XsdGoPkgHasElems_facechoicefx_surface_init_cube_commonschema_Face_TxsdFxSurfaceInitCubeCommonChoiceFace_, bool) error
	TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail                                                                                                                                                                              func(*TxsdGlesPipelineSettingsChoiceStencilOpSequenceZfail, bool) error
	XsdGoPkgHasElems_arraychoiceglsl_setarray_typeschema_Array_TglslSetarrayType_                                                                                                                                                     func(*XsdGoPkgHasElems_arraychoiceglsl_setarray_typeschema_Array_TglslSetarrayType_, bool) error
	XsdGoPkgHasElem_InstanceForceField                                                                                                                                                                                                func(*XsdGoPkgHasElem_InstanceForceField, bool) error
	XsdGoPkgHasElem_P                                                                                                                                                                                                                 func(*XsdGoPkgHasElem_P, bool) error
	TxsdSourceSequenceTechniqueCommon                                                                                                                                                                                                 func(*TxsdSourceSequenceTechniqueCommon, bool) error
	XsdGoPkgHasElem_bool4x4choicecg_param_typeschema_Bool4X4_TcgBool4X4_                                                                                                                                                              func(*XsdGoPkgHasElem_bool4x4choicecg_param_typeschema_Bool4X4_TcgBool4X4_, bool) error
	XsdGoPkgHasElem_int3x4choicecg_param_typeschema_Int3X4_TcgInt3X4_                                                                                                                                                                 func(*XsdGoPkgHasElem_int3x4choicecg_param_typeschema_Int3X4_TcgInt3X4_, bool) error
	XsdGoPkgHasElem_dynamicsequencetechnique_commonsequencerigid_bodyschema_Dynamic_TxsdRigidBodySequenceTechniqueCommonSequenceDynamic_                                                                                              func(*XsdGoPkgHasElem_dynamicsequencetechnique_commonsequencerigid_bodyschema_Dynamic_TxsdRigidBodySequenceTechniqueCommonSequenceDynamic_, bool) error
	XsdGoPkgHasElem_float2x3choicefx_basic_type_commonschema_Float2X3_Tfloat2X3_                                                                                                                                                      func(*XsdGoPkgHasElem_float2x3choicefx_basic_type_commonschema_Float2X3_Tfloat2X3_, bool) error
	XsdGoPkgHasElems_TaperedCylinder                                                                                                                                                                                                  func(*XsdGoPkgHasElems_TaperedCylinder, bool) error
	TglslNewparam                                                                                                                                                                                                                     func(*TglslNewparam, bool) error
	TxsdLightSequenceTechniqueCommonChoiceDirectional                                                                                                                                                                                 func(*TxsdLightSequenceTechniqueCommonChoiceDirectional, bool) error
	XsdGoPkgHasElems_Spline                                                                                                                                                                                                           func(*XsdGoPkgHasElems_Spline, bool) error
	XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Setparam_TglslSetparamSimple_                                                                                                    func(*XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Setparam_TglslSetparamSimple_, bool) error
	XsdGoPkgHasElem_bool4x3choicecg_param_typeschema_Bool4X3_TcgBool4X3_                                                                                                                                                              func(*XsdGoPkgHasElem_bool4x3choicecg_param_typeschema_Bool4X3_TcgBool4X3_, bool) error
	XsdGoPkgHasElems_Vertices                                                                                                                                                                                                         func(*XsdGoPkgHasElems_Vertices, bool) error
	XsdGoPkgHasElem_vsequencevertex_weightssequenceskinschema_V_TListOfInts_                                                                                                                                                          func(*XsdGoPkgHasElem_vsequencevertex_weightssequenceskinschema_V_TListOfInts_, bool) error
	TxsdGlPipelineSettingsChoiceStencilOp                                                                                                                                                                                             func(*TxsdGlPipelineSettingsChoiceStencilOp, bool) error
	TxsdSkinSequenceVertexWeights                                                                                                                                                                                                     func(*TxsdSkinSequenceVertexWeights, bool) error
	XsdGoPkgHasElem_Effect                                                                                                                                                                                                            func(*XsdGoPkgHasElem_Effect, bool) error
	TxsdPhysicsMaterial                                                                                                                                                                                                               func(*TxsdPhysicsMaterial, bool) error
	XsdGoPkgHasElem_material_specularchoicegl_pipeline_settingsschema_MaterialSpecular_TxsdGlPipelineSettingsChoiceMaterialSpecular_                                                                                                  func(*XsdGoPkgHasElem_material_specularchoicegl_pipeline_settingsschema_MaterialSpecular_TxsdGlPipelineSettingsChoiceMaterialSpecular_, bool) error
	XsdGoPkgHasElem_line_smooth_enablechoicegl_pipeline_settingsschema_LineSmoothEnable_TxsdGlPipelineSettingsChoiceLineSmoothEnable_                                                                                                 func(*XsdGoPkgHasElem_line_smooth_enablechoicegl_pipeline_settingsschema_LineSmoothEnable_TxsdGlPipelineSettingsChoiceLineSmoothEnable_, bool) error
	TxsdSplineSequenceControlVertices                                                                                                                                                                                                 func(*TxsdSplineSequenceControlVertices, bool) error
	XsdGoPkgHasElem_texture2Dchoicegl_pipeline_settingsschema_Texture2D_TxsdGlPipelineSettingsChoiceTexture2D_                                                                                                                        func(*XsdGoPkgHasElem_texture2Dchoicegl_pipeline_settingsschema_Texture2D_TxsdGlPipelineSettingsChoiceTexture2D_, bool) error
	XsdGoPkgHasElem_point_size_minchoicegl_pipeline_settingsschema_PointSizeMin_TxsdGlPipelineSettingsChoicePointSizeMin_                                                                                                             func(*XsdGoPkgHasElem_point_size_minchoicegl_pipeline_settingsschema_PointSizeMin_TxsdGlPipelineSettingsChoicePointSizeMin_, bool) error
	XsdGoPkgHasElem_int3choicefx_basic_type_commonschema_Int3_Tint3_                                                                                                                                                                  func(*XsdGoPkgHasElem_int3choicefx_basic_type_commonschema_Int3_Tint3_, bool) error
	XsdGoPkgHasElems_color_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorTarget_TfxColortargetCommon_                                                                                                            func(*XsdGoPkgHasElems_color_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorTarget_TfxColortargetCommon_, bool) error
	XsdGoPkgHasElem_phongchoicesequencetechniquesequenceprofile_COMMONschema_Phong_TxsdProfileCommonSequenceTechniqueSequenceChoicePhong_                                                                                             func(*XsdGoPkgHasElem_phongchoicesequencetechniquesequenceprofile_COMMONschema_Phong_TxsdProfileCommonSequenceTechniqueSequenceChoicePhong_, bool) error
	XsdGoPkgHasElem_int4x1choicecg_param_typeschema_Int4X1_TcgInt4X1_                                                                                                                                                                 func(*XsdGoPkgHasElem_int4x1choicecg_param_typeschema_Int4X1_TcgInt4X1_, bool) error
	XsdGoPkgHasElem_blinnchoicesequencetechniquesequenceprofile_COMMONschema_Blinn_TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn_                                                                                             func(*XsdGoPkgHasElem_blinnchoicesequencetechniquesequenceprofile_COMMONschema_Blinn_TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn_, bool) error
	TxsdInstanceEffectSequenceTechniqueHint                                                                                                                                                                                           func(*TxsdInstanceEffectSequenceTechniqueHint, bool) error
	TxsdLightSequenceTechniqueCommon                                                                                                                                                                                                  func(*TxsdLightSequenceTechniqueCommon, bool) error
	XsdGoPkgHasElem_clip_planechoicegles_pipeline_settingsschema_ClipPlane_TxsdGlesPipelineSettingsChoiceClipPlane_                                                                                                                   func(*XsdGoPkgHasElem_clip_planechoicegles_pipeline_settingsschema_ClipPlane_TxsdGlesPipelineSettingsChoiceClipPlane_, bool) error
	XsdGoPkgHasElem_intchoicecg_param_typeschema_Int_TcgInt_                                                                                                                                                                          func(*XsdGoPkgHasElem_intchoicecg_param_typeschema_Int_TcgInt_, bool) error
	XsdGoPkgHasElem_radiussequencesphereschema_Radius_Tfloat_                                                                                                                                                                         func(*XsdGoPkgHasElem_radiussequencesphereschema_Radius_Tfloat_, bool) error
	XsdGoPkgHasElem_GlHookAbstract                                                                                                                                                                                                    func(*XsdGoPkgHasElem_GlHookAbstract, bool) error
	XsdGoPkgHasElems_Ellipsoid                                                                                                                                                                                                        func(*XsdGoPkgHasElems_Ellipsoid, bool) error
	XsdGoPkgHasElem_Param                                                                                                                                                                                                             func(*XsdGoPkgHasElem_Param, bool) error
	XsdGoPkgHasElem_floatchoicefx_basic_type_commonschema_Float_Tfloat_                                                                                                                                                               func(*XsdGoPkgHasElem_floatchoicefx_basic_type_commonschema_Float_Tfloat_, bool) error
	TxsdPhysicsModel                                                                                                                                                                                                                  func(*TxsdPhysicsModel, bool) error
	XsdGoPkgHasElem_opticssequencecameraschema_Optics_TxsdCameraSequenceOptics_                                                                                                                                                       func(*XsdGoPkgHasElem_opticssequencecameraschema_Optics_TxsdCameraSequenceOptics_, bool) error
	XsdGoPkgHasElems_connect_paramchoicechoicecg_setuser_typeschema_ConnectParam_TcgConnectParam_                                                                                                                                     func(*XsdGoPkgHasElems_connect_paramchoicechoicecg_setuser_typeschema_ConnectParam_TcgConnectParam_, bool) error
	XsdGoPkgHasElem_half2x2choicecg_param_typeschema_Half2X2_TcgHalf2X2_                                                                                                                                                              func(*XsdGoPkgHasElem_half2x2choicecg_param_typeschema_Half2X2_TcgHalf2X2_, bool) error
	XsdGoPkgHasElem_float2x2choiceglsl_param_typeschema_Float2X2_TglslFloat2X2_                                                                                                                                                       func(*XsdGoPkgHasElem_float2x2choiceglsl_param_typeschema_Float2X2_TglslFloat2X2_, bool) error
	TcommonColorOrTextureType                                                                                                                                                                                                         func(*TcommonColorOrTextureType, bool) error
	XsdGoPkgHasElem_InstanceGeometry                                                                                                                                                                                                  func(*XsdGoPkgHasElem_InstanceGeometry, bool) error
	XsdGoPkgHasElem_depth_bounds_enablechoicegl_pipeline_settingsschema_DepthBoundsEnable_TxsdGlPipelineSettingsChoiceDepthBoundsEnable_                                                                                              func(*XsdGoPkgHasElem_depth_bounds_enablechoicegl_pipeline_settingsschema_DepthBoundsEnable_TxsdGlPipelineSettingsChoiceDepthBoundsEnable_, bool) error
	TxsdEffect                                                                                                                                                                                                                        func(*TxsdEffect, bool) error
	XsdGoPkgHasElem_Node                                                                                                                                                                                                              func(*XsdGoPkgHasElem_Node, bool) error
	XsdGoPkgHasElem_control_verticessequencesplineschema_ControlVertices_TxsdSplineSequenceControlVertices_                                                                                                                           func(*XsdGoPkgHasElem_control_verticessequencesplineschema_ControlVertices_TxsdSplineSequenceControlVertices_, bool) error
	TxsdConvexMesh                                                                                                                                                                                                                    func(*TxsdConvexMesh, bool) error
	TxsdLinestrips                                                                                                                                                                                                                    func(*TxsdLinestrips, bool) error
	XsdGoPkgHasElem_InstanceCamera                                                                                                                                                                                                    func(*XsdGoPkgHasElem_InstanceCamera, bool) error
	XsdGoPkgHasElem_light_quadratic_attenuationchoicegl_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation_                                                                      func(*XsdGoPkgHasElem_light_quadratic_attenuationchoicegl_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation_, bool) error
	XsdGoPkgHasElem_surfacechoicecg_param_typeschema_Surface_TcgSurfaceType_                                                                                                                                                          func(*XsdGoPkgHasElem_surfacechoicecg_param_typeschema_Surface_TcgSurfaceType_, bool) error
	XsdGoPkgHasElems_InstanceRigidConstraint                                                                                                                                                                                          func(*XsdGoPkgHasElems_InstanceRigidConstraint, bool) error
	XsdGoPkgHasElem_fixed1x4choicecg_param_typeschema_Fixed1X4_TcgFixed1X4_                                                                                                                                                           func(*XsdGoPkgHasElem_fixed1x4choicecg_param_typeschema_Fixed1X4_TcgFixed1X4_, bool) error
	XsdGoPkgHasElem_float1x2choicecg_param_typeschema_Float1X2_TcgFloat1X2_                                                                                                                                                           func(*XsdGoPkgHasElem_float1x2choicecg_param_typeschema_Float1X2_TcgFloat1X2_, bool) error
	XsdGoPkgHasElem_fog_endchoicegl_pipeline_settingsschema_FogEnd_TxsdGlPipelineSettingsChoiceFogEnd_                                                                                                                                func(*XsdGoPkgHasElem_fog_endchoicegl_pipeline_settingsschema_FogEnd_TxsdGlPipelineSettingsChoiceFogEnd_, bool) error
	XsdGoPkgHasElems_Material                                                                                                                                                                                                         func(*XsdGoPkgHasElems_Material, bool) error
	XsdGoPkgHasElem_float4x3choicefx_basic_type_commonschema_Float4X3_Tfloat4X3_                                                                                                                                                      func(*XsdGoPkgHasElem_float4x3choicefx_basic_type_commonschema_Float4X3_Tfloat4X3_, bool) error
	TcgSetarrayType                                                                                                                                                                                                                   func(*TcgSetarrayType, bool) error
	TfxClearstencilCommon                                                                                                                                                                                                             func(*TfxClearstencilCommon, bool) error
	TxsdLibraryAnimations                                                                                                                                                                                                             func(*TxsdLibraryAnimations, bool) error
	XsdGoPkgHasElems_setparamsequenceinstance_effectschema_Setparam_TxsdInstanceEffectSequenceSetparam_                                                                                                                               func(*XsdGoPkgHasElems_setparamsequenceinstance_effectschema_Setparam_TxsdInstanceEffectSequenceSetparam_, bool) error
	XsdGoPkgHasElem_compiler_optionssequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerOptions_XsdtString_                                                                                   func(*XsdGoPkgHasElem_compiler_optionssequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_CompilerOptions_XsdtString_, bool) error
	XsdGoPkgHasElem_VisualScene                                                                                                                                                                                                       func(*XsdGoPkgHasElem_VisualScene, bool) error
	XsdGoPkgHasElem_zpasssequencestencil_opchoicegles_pipeline_settingsschema_Zpass_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZpass_                                                                                             func(*XsdGoPkgHasElem_zpasssequencestencil_opchoicegles_pipeline_settingsschema_Zpass_TxsdGlesPipelineSettingsChoiceStencilOpSequenceZpass_, bool) error
	TxsdLines                                                                                                                                                                                                                         func(*TxsdLines, bool) error
	XsdGoPkgHasElem_ProfileGlsl                                                                                                                                                                                                       func(*XsdGoPkgHasElem_ProfileGlsl, bool) error
	TxsdProfileGlesSequenceTechnique                                                                                                                                                                                                  func(*TxsdProfileGlesSequenceTechnique, bool) error
	XsdGoPkgHasElem_subjectsequenceassetschema_Subject_XsdtString_                                                                                                                                                                    func(*XsdGoPkgHasElem_subjectsequenceassetschema_Subject_XsdtString_, bool) error
	XsdGoPkgHasElems_Technique                                                                                                                                                                                                        func(*XsdGoPkgHasElems_Technique, bool) error
	XsdGoPkgHasElem_surfacesequencegles_texture_unitschema_Surface_XsdtNCName_                                                                                                                                                        func(*XsdGoPkgHasElem_surfacesequencegles_texture_unitschema_Surface_XsdtNCName_, bool) error
	XsdGoPkgHasElem_int1x4choicecg_param_typeschema_Int1X4_TcgInt1X4_                                                                                                                                                                 func(*XsdGoPkgHasElem_int1x4choicecg_param_typeschema_Int1X4_TcgInt1X4_, bool) error
	XsdGoPkgHasElems_shapesequencetechnique_commonsequencerigid_bodyschema_Shape_TxsdRigidBodySequenceTechniqueCommonSequenceShape_                                                                                                   func(*XsdGoPkgHasElems_shapesequencetechnique_commonsequencerigid_bodyschema_Shape_TxsdRigidBodySequenceTechniqueCommonSequenceShape_, bool) error
	TxsdCollada                                                                                                                                                                                                                       func(*TxsdCollada, bool) error
	XsdGoPkgHasElem_auto_normal_enablechoicegl_pipeline_settingsschema_AutoNormalEnable_TxsdGlPipelineSettingsChoiceAutoNormalEnable_                                                                                                 func(*XsdGoPkgHasElem_auto_normal_enablechoicegl_pipeline_settingsschema_AutoNormalEnable_TxsdGlPipelineSettingsChoiceAutoNormalEnable_, bool) error
	XsdGoPkgHasElem_float2x3choicecg_param_typeschema_Float2X3_TcgFloat2X3_                                                                                                                                                           func(*XsdGoPkgHasElem_float2x3choicecg_param_typeschema_Float2X3_TcgFloat2X3_, bool) error
	XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_DestAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestAlpha_                                                                   func(*XsdGoPkgHasElem_dest_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_DestAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceDestAlpha_, bool) error
	XsdGoPkgHasElem_lighting_enablechoicegles_pipeline_settingsschema_LightingEnable_TxsdGlesPipelineSettingsChoiceLightingEnable_                                                                                                    func(*XsdGoPkgHasElem_lighting_enablechoicegles_pipeline_settingsschema_LightingEnable_TxsdGlesPipelineSettingsChoiceLightingEnable_, bool) error
	XsdGoPkgHasElem_LibraryEffects                                                                                                                                                                                                    func(*XsdGoPkgHasElem_LibraryEffects, bool) error
	XsdGoPkgHasElem_alphasequencegles_texcombiner_command_typeschema_Alpha_TglesTexcombinerCommandAlphaType_                                                                                                                          func(*XsdGoPkgHasElem_alphasequencegles_texcombiner_command_typeschema_Alpha_TglesTexcombinerCommandAlphaType_, bool) error
	XsdGoPkgHasElem_half_extentssequenceboxschema_HalfExtents_Tfloat3_                                                                                                                                                                func(*XsdGoPkgHasElem_half_extentssequenceboxschema_HalfExtents_Tfloat3_, bool) error
	TcgSamplerRECT                                                                                                                                                                                                                    func(*TcgSamplerRECT, bool) error
	XsdGoPkgHasElem_material_diffusechoicegl_pipeline_settingsschema_MaterialDiffuse_TxsdGlPipelineSettingsChoiceMaterialDiffuse_                                                                                                     func(*XsdGoPkgHasElem_material_diffusechoicegl_pipeline_settingsschema_MaterialDiffuse_TxsdGlPipelineSettingsChoiceMaterialDiffuse_, bool) error
	XsdGoPkgHasElem_light_spot_cutoffchoicegl_pipeline_settingsschema_LightSpotCutoff_TxsdGlPipelineSettingsChoiceLightSpotCutoff_                                                                                                    func(*XsdGoPkgHasElem_light_spot_cutoffchoicegl_pipeline_settingsschema_LightSpotCutoff_TxsdGlPipelineSettingsChoiceLightSpotCutoff_, bool) error
	TxsdGlPipelineSettingsChoicePolygonModeSequenceMode                                                                                                                                                                               func(*TxsdGlPipelineSettingsChoicePolygonModeSequenceMode, bool) error
	XsdGoPkgHasGroup_FxAnnotateTypeCommon                                                                                                                                                                                             func(*XsdGoPkgHasGroup_FxAnnotateTypeCommon, bool) error
	XsdGoPkgHasElem_samplerRECTchoiceglsl_param_typeschema_SamplerRECT_TglSamplerRECT_                                                                                                                                                func(*XsdGoPkgHasElem_samplerRECTchoiceglsl_param_typeschema_SamplerRECT_TglSamplerRECT_, bool) error
	TcgSetparam                                                                                                                                                                                                                       func(*TcgSetparam, bool) error
	TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic                                                                                                                                                                       func(*TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic, bool) error
	XsdGoPkgHasElem_InstancePhysicsModel                                                                                                                                                                                              func(*XsdGoPkgHasElem_InstancePhysicsModel, bool) error
	XsdGoPkgHasElem_fixed4choicecg_param_typeschema_Fixed4_TcgFixed4_                                                                                                                                                                 func(*XsdGoPkgHasElem_fixed4choicecg_param_typeschema_Fixed4_TcgFixed4_, bool) error
	TcgSamplerDEPTH                                                                                                                                                                                                                   func(*TcgSamplerDEPTH, bool) error
	XsdGoPkgHasElem_clear_depthchoicegles_pipeline_settingsschema_ClearDepth_TxsdGlesPipelineSettingsChoiceClearDepth_                                                                                                                func(*XsdGoPkgHasElem_clear_depthchoicegles_pipeline_settingsschema_ClearDepth_TxsdGlesPipelineSettingsChoiceClearDepth_, bool) error
	XsdGoPkgHasElem_bool3choicefx_basic_type_commonschema_Bool3_Tbool3_                                                                                                                                                               func(*XsdGoPkgHasElem_bool3choicefx_basic_type_commonschema_Bool3_Tbool3_, bool) error
	XsdGoPkgHasElem_texture1D_enablechoicegl_pipeline_settingsschema_Texture1DEnable_TxsdGlPipelineSettingsChoiceTexture1DEnable_                                                                                                     func(*XsdGoPkgHasElem_texture1D_enablechoicegl_pipeline_settingsschema_Texture1DEnable_TxsdGlPipelineSettingsChoiceTexture1DEnable_, bool) error
	XsdGoPkgHasElems_init_fromchoicefx_surface_init_commonschema_InitFrom_TfxSurfaceInitFromCommon_                                                                                                                                   func(*XsdGoPkgHasElems_init_fromchoicefx_surface_init_commonschema_InitFrom_TfxSurfaceInitFromCommon_, bool) error
	TxsdChannel                                                                                                                                                                                                                       func(*TxsdChannel, bool) error
	TxsdGlPipelineSettingsChoiceBlendEquation                                                                                                                                                                                         func(*TxsdGlPipelineSettingsChoiceBlendEquation, bool) error
	XsdGoPkgHasElems_Plane                                                                                                                                                                                                            func(*XsdGoPkgHasElems_Plane, bool) error
	TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam                                                                                                                                           func(*TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam, bool) error
	XsdGoPkgHasElem_Geometry                                                                                                                                                                                                          func(*XsdGoPkgHasElem_Geometry, bool) error
	TxsdProfileCgSequenceTechnique                                                                                                                                                                                                    func(*TxsdProfileCgSequenceTechnique, bool) error
	TglSampler2D                                                                                                                                                                                                                      func(*TglSampler2D, bool) error
	XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10                                                                                         func(*XsdGoPkgHasElem_stiffnesssequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Stiffness_TargetableFloat_10, bool) error
	XsdGoPkgHasElem_magfiltersequencefx_samplerDEPTH_commonschema_Magfilter_TfxSamplerFilterCommon_None                                                                                                                               func(*XsdGoPkgHasElem_magfiltersequencefx_samplerDEPTH_commonschema_Magfilter_TfxSamplerFilterCommon_None, bool) error
	XsdGoPkgHasElem_refsequencestencil_funcchoicegles_pipeline_settingsschema_Ref_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef_                                                                                               func(*XsdGoPkgHasElem_refsequencestencil_funcchoicegles_pipeline_settingsschema_Ref_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef_, bool) error
	TfxSamplerRECTCommon                                                                                                                                                                                                              func(*TfxSamplerRECTCommon, bool) error
	TxsdInstanceRigidBodySequenceTechniqueCommon                                                                                                                                                                                      func(*TxsdInstanceRigidBodySequenceTechniqueCommon, bool) error
	XsdGoPkgHasElems_LibraryAnimationClips                                                                                                                                                                                            func(*XsdGoPkgHasElems_LibraryAnimationClips, bool) error
	XsdGoPkgHasElem_linear_attenuationsequencepointchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00                                                                                                     func(*XsdGoPkgHasElem_linear_attenuationsequencepointchoicetechnique_commonsequencelightschema_LinearAttenuation_TargetableFloat_00, bool) error
	XsdGoPkgHasElem_createdsequenceassetschema_Created_XsdtDateTime_                                                                                                                                                                  func(*XsdGoPkgHasElem_createdsequenceassetschema_Created_XsdtDateTime_, bool) error
	TfxSamplerDEPTHCommon                                                                                                                                                                                                             func(*TfxSamplerDEPTHCommon, bool) error
	XsdGoPkgHasElems_LibraryImages                                                                                                                                                                                                    func(*XsdGoPkgHasElems_LibraryImages, bool) error
	XsdGoPkgHasElem_modesequencecolor_materialchoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode_                                                                                            func(*XsdGoPkgHasElem_modesequencecolor_materialchoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode_, bool) error
	XsdGoPkgHasElem_int4choicecg_param_typeschema_Int4_TcgInt4_                                                                                                                                                                       func(*XsdGoPkgHasElem_int4choicecg_param_typeschema_Int4_TcgInt4_, bool) error
	TxsdGlesPipelineSettingsChoiceClearDepth                                                                                                                                                                                          func(*TxsdGlesPipelineSettingsChoiceClearDepth, bool) error
	TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear                                                                                                                                                            func(*TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceLinear, bool) error
	XsdGoPkgHasElems_Extra                                                                                                                                                                                                            func(*XsdGoPkgHasElems_Extra, bool) error
	XsdGoPkgHasElem_format_hintsequencefx_surface_commonschema_FormatHint_TfxSurfaceFormatHintCommon_                                                                                                                                 func(*XsdGoPkgHasElem_format_hintsequencefx_surface_commonschema_FormatHint_TfxSurfaceFormatHintCommon_, bool) error
	XsdGoPkgHasElem_imagersequencecameraschema_Imager_TxsdCameraSequenceImager_                                                                                                                                                       func(*XsdGoPkgHasElem_imagersequencecameraschema_Imager_TxsdCameraSequenceImager_, bool) error
	XsdGoPkgHasElem_LibraryPhysicsMaterials                                                                                                                                                                                           func(*XsdGoPkgHasElem_LibraryPhysicsMaterials, bool) error
	TxsdColladaSequenceScene                                                                                                                                                                                                          func(*TxsdColladaSequenceScene, bool) error
	XsdGoPkgHasElems_texenvchoicegles_texture_pipelineschema_Texenv_TglesTexenvCommandType_                                                                                                                                           func(*XsdGoPkgHasElems_texenvchoicegles_texture_pipelineschema_Texenv_TglesTexenvCommandType_, bool) error
	XsdGoPkgHasElem_masksequencestencil_funcchoicegles_pipeline_settingsschema_Mask_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask_                                                                                            func(*XsdGoPkgHasElem_masksequencestencil_funcchoicegles_pipeline_settingsschema_Mask_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceMask_, bool) error
	XsdGoPkgHasElem_light_model_ambientchoicegles_pipeline_settingsschema_LightModelAmbient_TxsdGlesPipelineSettingsChoiceLightModelAmbient_                                                                                          func(*XsdGoPkgHasElem_light_model_ambientchoicegles_pipeline_settingsschema_LightModelAmbient_TxsdGlesPipelineSettingsChoiceLightModelAmbient_, bool) error
	XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegl_pipeline_settingsschema_Alpha_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceAlpha_                                                                        func(*XsdGoPkgHasElem_alphasequenceblend_equation_separatechoicegl_pipeline_settingsschema_Alpha_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceAlpha_, bool) error
	XsdGoPkgHasElem_angularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Angular_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular_                                                      func(*XsdGoPkgHasElem_angularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Angular_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular_, bool) error
	XsdGoPkgHasElem_fog_endchoicegles_pipeline_settingsschema_FogEnd_TxsdGlesPipelineSettingsChoiceFogEnd_                                                                                                                            func(*XsdGoPkgHasElem_fog_endchoicegles_pipeline_settingsschema_FogEnd_TxsdGlesPipelineSettingsChoiceFogEnd_, bool) error
	XsdGoPkgHasElem_textureDEPTH_enablechoicegl_pipeline_settingsschema_TextureDEPTHEnable_TxsdGlPipelineSettingsChoiceTextureDEPTHEnable_                                                                                            func(*XsdGoPkgHasElem_textureDEPTH_enablechoicegl_pipeline_settingsschema_TextureDEPTHEnable_TxsdGlPipelineSettingsChoiceTextureDEPTHEnable_, bool) error
	XsdGoPkgHasElem_perspectivechoicetechnique_commonsequenceopticssequencecameraschema_Perspective_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective_                                                                 func(*XsdGoPkgHasElem_perspectivechoicetechnique_commonsequenceopticssequencecameraschema_Perspective_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective_, bool) error
	XsdGoPkgHasElems_Morph                                                                                                                                                                                                            func(*XsdGoPkgHasElems_Morph, bool) error
	XsdGoPkgHasElems_P                                                                                                                                                                                                                func(*XsdGoPkgHasElems_P, bool) error
	XsdGoPkgHasElems_rendersequenceevaluate_scenesequencevisual_sceneschema_Render_TxsdVisualSceneSequenceEvaluateSceneSequenceRender_                                                                                                func(*XsdGoPkgHasElems_rendersequenceevaluate_scenesequencevisual_sceneschema_Render_TxsdVisualSceneSequenceEvaluateSceneSequenceRender_, bool) error
	TxsdCommonColorOrTextureTypeChoiceParam                                                                                                                                                                                           func(*TxsdCommonColorOrTextureTypeChoiceParam, bool) error
	XsdGoPkgHasElem_clip_plane_enablechoicegl_pipeline_settingsschema_ClipPlaneEnable_TxsdGlPipelineSettingsChoiceClipPlaneEnable_                                                                                                    func(*XsdGoPkgHasElem_clip_plane_enablechoicegl_pipeline_settingsschema_ClipPlaneEnable_TxsdGlPipelineSettingsChoiceClipPlaneEnable_, bool) error
	XsdGoPkgHasElem_float4x1choicecg_param_typeschema_Float4X1_TcgFloat4X1_                                                                                                                                                           func(*XsdGoPkgHasElem_float4x1choicecg_param_typeschema_Float4X1_TcgFloat4X1_, bool) error
	XsdGoPkgHasElem_revisionsequenceassetschema_Revision_XsdtString_                                                                                                                                                                  func(*XsdGoPkgHasElem_revisionsequenceassetschema_Revision_XsdtString_, bool) error
	XsdGoPkgHasElems_Box                                                                                                                                                                                                              func(*XsdGoPkgHasElems_Box, bool) error
	XsdGoPkgHasElem_multisample_enablechoicegl_pipeline_settingsschema_MultisampleEnable_TxsdGlPipelineSettingsChoiceMultisampleEnable_                                                                                               func(*XsdGoPkgHasElem_multisample_enablechoicegl_pipeline_settingsschema_MultisampleEnable_TxsdGlPipelineSettingsChoiceMultisampleEnable_, bool) error
	TxsdProfileCommon                                                                                                                                                                                                                 func(*TxsdProfileCommon, bool) error
	TxsdSpline                                                                                                                                                                                                                        func(*TxsdSpline, bool) error
	XsdGoPkgHasElem_valuechoicetexture3Dchoicegl_pipeline_settingsschema_Value_TglSampler3D_                                                                                                                                          func(*XsdGoPkgHasElem_valuechoicetexture3Dchoicegl_pipeline_settingsschema_Value_TglSampler3D_, bool) error
	XsdGoPkgHasElem_technique_commonsequencephysics_sceneschema_TechniqueCommon_TxsdPhysicsSceneSequenceTechniqueCommon_                                                                                                              func(*XsdGoPkgHasElem_technique_commonsequencephysics_sceneschema_TechniqueCommon_TxsdPhysicsSceneSequenceTechniqueCommon_, bool) error
	XsdGoPkgHasElem_IdrefArray                                                                                                                                                                                                        func(*XsdGoPkgHasElem_IdrefArray, bool) error
	TxsdPolygons                                                                                                                                                                                                                      func(*TxsdPolygons, bool) error
	XsdGoPkgHasElem_technique_commonsequencerigid_constraintschema_TechniqueCommon_TxsdRigidConstraintSequenceTechniqueCommon_                                                                                                        func(*XsdGoPkgHasElem_technique_commonsequencerigid_constraintschema_TechniqueCommon_TxsdRigidConstraintSequenceTechniqueCommon_, bool) error
	XsdGoPkgHasElem_ProfileGles                                                                                                                                                                                                       func(*XsdGoPkgHasElem_ProfileGles, bool) error
	XsdGoPkgHasElem_Collada                                                                                                                                                                                                           func(*XsdGoPkgHasElem_Collada, bool) error
	XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_CompilerTarget_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_     func(*XsdGoPkgHasElem_compiler_targetsequencesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_CompilerTarget_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget_, bool) error
	XsdGoPkgHasElems_LibraryCameras                                                                                                                                                                                                   func(*XsdGoPkgHasElems_LibraryCameras, bool) error
	XsdGoPkgHasElem_float4choicecg_param_typeschema_Float4_TcgFloat4_                                                                                                                                                                 func(*XsdGoPkgHasElem_float4choicecg_param_typeschema_Float4_TcgFloat4_, bool) error
	TfxSurfaceInitVolumeCommon                                                                                                                                                                                                        func(*TfxSurfaceInitVolumeCommon, bool) error
	XsdGoPkgHasElem_bool4choicecg_param_typeschema_Bool4_TcgBool4_                                                                                                                                                                    func(*XsdGoPkgHasElem_bool4choicecg_param_typeschema_Bool4_TcgBool4_, bool) error
	TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant                                                                                                                                                                          func(*TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant, bool) error
	TxsdGlesPipelineSettingsChoiceScissor                                                                                                                                                                                             func(*TxsdGlesPipelineSettingsChoiceScissor, bool) error
	XsdGoPkgHasElems_bindsequenceinstance_materialschema_Bind_TxsdInstanceMaterialSequenceBind_                                                                                                                                       func(*XsdGoPkgHasElems_bindsequenceinstance_materialschema_Bind_TxsdInstanceMaterialSequenceBind_, bool) error
	XsdGoPkgHasElem_bool3x2choicecg_param_typeschema_Bool3X2_TcgBool3X2_                                                                                                                                                              func(*XsdGoPkgHasElem_bool3x2choicecg_param_typeschema_Bool3X2_TcgBool3X2_, bool) error
	TglesTexenvCommandType                                                                                                                                                                                                            func(*TglesTexenvCommandType, bool) error
	XsdGoPkgHasElem_technique_commonsequencelightschema_TechniqueCommon_TxsdLightSequenceTechniqueCommon_                                                                                                                             func(*XsdGoPkgHasElem_technique_commonsequencelightschema_TechniqueCommon_TxsdLightSequenceTechniqueCommon_, bool) error
	XsdGoPkgHasElem_int2x4choicecg_param_typeschema_Int2X4_TcgInt2X4_                                                                                                                                                                 func(*XsdGoPkgHasElem_int2x4choicecg_param_typeschema_Int2X4_TcgInt2X4_, bool) error
	XsdGoPkgHasElem_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_Velocity_Tfloat3_000000                                                                                                                         func(*XsdGoPkgHasElem_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_Velocity_Tfloat3_000000, bool) error
	XsdGoPkgHasElem_blend_func_separatechoicegl_pipeline_settingsschema_BlendFuncSeparate_TxsdGlPipelineSettingsChoiceBlendFuncSeparate_                                                                                              func(*XsdGoPkgHasElem_blend_func_separatechoicegl_pipeline_settingsschema_BlendFuncSeparate_TxsdGlPipelineSettingsChoiceBlendFuncSeparate_, bool) error
	XsdGoPkgHasElem_swing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_SwingConeAndTwist_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist_                     func(*XsdGoPkgHasElem_swing_cone_and_twistsequencelimitssequencetechnique_commonsequencerigid_constraintschema_SwingConeAndTwist_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimitsSequenceSwingConeAndTwist_, bool) error
	TxsdFxSurfaceInitCubeCommonChoiceFace                                                                                                                                                                                             func(*TxsdFxSurfaceInitCubeCommonChoiceFace, bool) error
	TxsdTriangles                                                                                                                                                                                                                     func(*TxsdTriangles, bool) error
	TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget                                                                                                                                    func(*TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceSequenceCompilerTarget, bool) error
	XsdGoPkgHasElem_usertypechoicecg_setparamschema_Usertype_TcgSetuserType_                                                                                                                                                          func(*XsdGoPkgHasElem_usertypechoicecg_setparamschema_Usertype_TcgSetuserType_, bool) error
	XsdGoPkgHasElem_ambientsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_                                                                                                        func(*XsdGoPkgHasElem_ambientsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Ambient_TcommonColorOrTextureType_, bool) error
	XsdGoPkgHasElems_FloatArray                                                                                                                                                                                                       func(*XsdGoPkgHasElems_FloatArray, bool) error
	TcgSetuserType                                                                                                                                                                                                                    func(*TcgSetuserType, bool) error
	TxsdGlesPipelineSettingsChoiceLightAmbient                                                                                                                                                                                        func(*TxsdGlesPipelineSettingsChoiceLightAmbient, bool) error
	TxsdIntArray                                                                                                                                                                                                                      func(*TxsdIntArray, bool) error
	XsdGoPkgHasElem_light_model_local_viewer_enablechoicegl_pipeline_settingsschema_LightModelLocalViewerEnable_TxsdGlPipelineSettingsChoiceLightModelLocalViewerEnable_                                                              func(*XsdGoPkgHasElem_light_model_local_viewer_enablechoicegl_pipeline_settingsschema_LightModelLocalViewerEnable_TxsdGlPipelineSettingsChoiceLightModelLocalViewerEnable_, bool) error
	XsdGoPkgHasElem_limitssequencetechnique_commonsequencerigid_constraintschema_Limits_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits_                                                                                     func(*XsdGoPkgHasElem_limitssequencetechnique_commonsequencerigid_constraintschema_Limits_TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits_, bool) error
	TglesTexcombinerCommandAlphaType                                                                                                                                                                                                  func(*TglesTexcombinerCommandAlphaType, bool) error
	XsdGoPkgHasElems_stencil_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilTarget_TfxStenciltargetCommon_                                                                                                      func(*XsdGoPkgHasElems_stencil_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilTarget_TfxStenciltargetCommon_, bool) error
	XsdGoPkgHasElem_fixed2x2choicecg_param_typeschema_Fixed2X2_TcgFixed2X2_                                                                                                                                                           func(*XsdGoPkgHasElem_fixed2x2choicecg_param_typeschema_Fixed2X2_TcgFixed2X2_, bool) error
	XsdGoPkgHasElem_light_spot_directionchoicegl_pipeline_settingsschema_LightSpotDirection_TxsdGlPipelineSettingsChoiceLightSpotDirection_                                                                                           func(*XsdGoPkgHasElem_light_spot_directionchoicegl_pipeline_settingsschema_LightSpotDirection_TxsdGlPipelineSettingsChoiceLightSpotDirection_, bool) error
	XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler1D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_0                                                                                                                                func(*XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler1D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_0, bool) error
	TxsdGlPipelineSettingsChoiceLightEnable                                                                                                                                                                                           func(*TxsdGlPipelineSettingsChoiceLightEnable, bool) error
	XsdGoPkgHasElem_init_planarchoicefx_surface_init_commonschema_InitPlanar_TfxSurfaceInitPlanarCommon_                                                                                                                              func(*XsdGoPkgHasElem_init_planarchoicefx_surface_init_commonschema_InitPlanar_TfxSurfaceInitPlanarCommon_, bool) error
	TxsdGlPipelineSettingsChoiceTextureEnvMode                                                                                                                                                                                        func(*TxsdGlPipelineSettingsChoiceTextureEnvMode, bool) error
	XsdGoPkgHasElem_half4x2choicecg_param_typeschema_Half4X2_TcgHalf4X2_                                                                                                                                                              func(*XsdGoPkgHasElem_half4x2choicecg_param_typeschema_Half4X2_TcgHalf4X2_, bool) error
	TxsdGlPipelineSettingsChoiceTextureRECT                                                                                                                                                                                           func(*TxsdGlPipelineSettingsChoiceTextureRECT, bool) error
	XsdGoPkgHasElems_Accessor                                                                                                                                                                                                         func(*XsdGoPkgHasElems_Accessor, bool) error
	XsdGoPkgHasElem_int2choiceglsl_param_typeschema_Int2_TglslInt2_                                                                                                                                                                   func(*XsdGoPkgHasElem_int2choiceglsl_param_typeschema_Int2_TglslInt2_, bool) error
	TxsdGlPipelineSettingsChoiceAlphaFunc                                                                                                                                                                                             func(*TxsdGlPipelineSettingsChoiceAlphaFunc, bool) error
	XsdGoPkgHasElem_rescale_normal_enablechoicegles_pipeline_settingsschema_RescaleNormalEnable_TxsdGlesPipelineSettingsChoiceRescaleNormalEnable_                                                                                    func(*XsdGoPkgHasElem_rescale_normal_enablechoicegles_pipeline_settingsschema_RescaleNormalEnable_TxsdGlesPipelineSettingsChoiceRescaleNormalEnable_, bool) error
	TxsdCommonColorOrTextureTypeChoiceTexture                                                                                                                                                                                         func(*TxsdCommonColorOrTextureTypeChoiceTexture, bool) error
	XsdGoPkgHasElems_usertypechoicecg_setarray_typeschema_Usertype_TcgSetuserType_                                                                                                                                                    func(*XsdGoPkgHasElems_usertypechoicecg_setarray_typeschema_Usertype_TcgSetuserType_, bool) error
	XsdGoPkgHasElem_sampler2Dchoiceglsl_param_typeschema_Sampler2D_TglSampler2D_                                                                                                                                                      func(*XsdGoPkgHasElem_sampler2Dchoiceglsl_param_typeschema_Sampler2D_TglSampler2D_, bool) error
	XsdGoPkgHasElem_angular_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_AngularVelocity_Tfloat3_000000                                                                                                          func(*XsdGoPkgHasElem_angular_velocitysequencetechnique_commonsequenceinstance_rigid_bodyschema_AngularVelocity_Tfloat3_000000, bool) error
	XsdGoPkgHasElem_bool2x3choicecg_param_typeschema_Bool2X3_TcgBool2X3_                                                                                                                                                              func(*XsdGoPkgHasElem_bool2x3choicecg_param_typeschema_Bool2X3_TcgBool2X3_, bool) error
	TxsdCameraSequenceOpticsSequenceTechniqueCommon                                                                                                                                                                                   func(*TxsdCameraSequenceOpticsSequenceTechniqueCommon, bool) error
	XsdGoPkgHasElems_usertypechoicechoicecg_setuser_typeschema_Usertype_TcgSetuserType_                                                                                                                                               func(*XsdGoPkgHasElems_usertypechoicechoicecg_setuser_typeschema_Usertype_TcgSetuserType_, bool) error
	XsdGoPkgHasElem_fixed2x1choicecg_param_typeschema_Fixed2X1_TcgFixed2X1_                                                                                                                                                           func(*XsdGoPkgHasElem_fixed2x1choicecg_param_typeschema_Fixed2X1_TcgFixed2X1_, bool) error
	XsdGoPkgHasElem_intchoicefx_basic_type_commonschema_Int_Tint_                                                                                                                                                                     func(*XsdGoPkgHasElem_intchoicefx_basic_type_commonschema_Int_Tint_, bool) error
	XsdGoPkgHasElem_blend_equation_separatechoicegl_pipeline_settingsschema_BlendEquationSeparate_TxsdGlPipelineSettingsChoiceBlendEquationSeparate_                                                                                  func(*XsdGoPkgHasElem_blend_equation_separatechoicegl_pipeline_settingsschema_BlendEquationSeparate_TxsdGlPipelineSettingsChoiceBlendEquationSeparate_, bool) error
	TxsdCylinder                                                                                                                                                                                                                      func(*TxsdCylinder, bool) error
	TxsdMorph                                                                                                                                                                                                                         func(*TxsdMorph, bool) error
	XsdGoPkgHasElem_light_enablechoicegles_pipeline_settingsschema_LightEnable_TxsdGlesPipelineSettingsChoiceLightEnable_                                                                                                             func(*XsdGoPkgHasElem_light_enablechoicegles_pipeline_settingsschema_LightEnable_TxsdGlesPipelineSettingsChoiceLightEnable_, bool) error
	XsdGoPkgHasElem_Tristrips                                                                                                                                                                                                         func(*XsdGoPkgHasElem_Tristrips, bool) error
	XsdGoPkgHasElem_Camera                                                                                                                                                                                                            func(*XsdGoPkgHasElem_Camera, bool) error
	TxsdIdrefArray                                                                                                                                                                                                                    func(*TxsdIdrefArray, bool) error
	XsdGoPkgHasElem_float4choicefx_basic_type_commonschema_Float4_Tfloat4_                                                                                                                                                            func(*XsdGoPkgHasElem_float4choicefx_basic_type_commonschema_Float4_Tfloat4_, bool) error
	XsdGoPkgHasElem_enumchoicefx_basic_type_commonschema_Enum_XsdtString_                                                                                                                                                             func(*XsdGoPkgHasElem_enumchoicefx_basic_type_commonschema_Enum_XsdtString_, bool) error
	TxsdImage                                                                                                                                                                                                                         func(*TxsdImage, bool) error
	XsdGoPkgHasElems_LibraryPhysicsScenes                                                                                                                                                                                             func(*XsdGoPkgHasElems_LibraryPhysicsScenes, bool) error
	XsdGoPkgHasElem_stencil_test_enablechoicegl_pipeline_settingsschema_StencilTestEnable_TxsdGlPipelineSettingsChoiceStencilTestEnable_                                                                                              func(*XsdGoPkgHasElem_stencil_test_enablechoicegl_pipeline_settingsschema_StencilTestEnable_TxsdGlPipelineSettingsChoiceStencilTestEnable_, bool) error
	TxsdCapsule                                                                                                                                                                                                                       func(*TxsdCapsule, bool) error
	XsdGoPkgHasElem_index_of_refractionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_                                                                                    func(*XsdGoPkgHasElem_index_of_refractionsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_IndexOfRefraction_TcommonFloatOrParamType_, bool) error
	XsdGoPkgHasElem_alpha_test_enablechoicegl_pipeline_settingsschema_AlphaTestEnable_TxsdGlPipelineSettingsChoiceAlphaTestEnable_                                                                                                    func(*XsdGoPkgHasElem_alpha_test_enablechoicegl_pipeline_settingsschema_AlphaTestEnable_TxsdGlPipelineSettingsChoiceAlphaTestEnable_, bool) error
	TfxCodeProfile                                                                                                                                                                                                                    func(*TfxCodeProfile, bool) error
	XsdGoPkgHasElem_light_enablechoicegl_pipeline_settingsschema_LightEnable_TxsdGlPipelineSettingsChoiceLightEnable_                                                                                                                 func(*XsdGoPkgHasElem_light_enablechoicegl_pipeline_settingsschema_LightEnable_TxsdGlPipelineSettingsChoiceLightEnable_, bool) error
	XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Include_TfxIncludeCommon_                                                                                                   func(*XsdGoPkgHasElems_includechoicesequencegeneratorsequenceextensioncomplexContentglsl_surface_typeschema_Include_TfxIncludeCommon_, bool) error
	XsdGoPkgHasElem_point_size_minchoicegles_pipeline_settingsschema_PointSizeMin_TxsdGlesPipelineSettingsChoicePointSizeMin_                                                                                                         func(*XsdGoPkgHasElem_point_size_minchoicegles_pipeline_settingsschema_PointSizeMin_TxsdGlesPipelineSettingsChoicePointSizeMin_, bool) error
	XsdGoPkgHasElem_alpha_funcchoicegl_pipeline_settingsschema_AlphaFunc_TxsdGlPipelineSettingsChoiceAlphaFunc_                                                                                                                       func(*XsdGoPkgHasElem_alpha_funcchoicegl_pipeline_settingsschema_AlphaFunc_TxsdGlPipelineSettingsChoiceAlphaFunc_, bool) error
	XsdGoPkgHasElem_half2x4choicecg_param_typeschema_Half2X4_TcgHalf2X4_                                                                                                                                                              func(*XsdGoPkgHasElem_half2x4choicecg_param_typeschema_Half2X4_TcgHalf2X4_, bool) error
	XsdGoPkgHasElem_fog_startchoicegles_pipeline_settingsschema_FogStart_TxsdGlesPipelineSettingsChoiceFogStart_                                                                                                                      func(*XsdGoPkgHasElem_fog_startchoicegles_pipeline_settingsschema_FogStart_TxsdGlesPipelineSettingsChoiceFogStart_, bool) error
	XsdGoPkgHasElem_scissor_test_enablechoicegl_pipeline_settingsschema_ScissorTestEnable_TxsdGlPipelineSettingsChoiceScissorTestEnable_                                                                                              func(*XsdGoPkgHasElem_scissor_test_enablechoicegl_pipeline_settingsschema_ScissorTestEnable_TxsdGlPipelineSettingsChoiceScissorTestEnable_, bool) error
	XsdGoPkgHasElems_newparamchoicesequenceprofile_COMMONschema_Newparam_TcommonNewparamType_                                                                                                                                         func(*XsdGoPkgHasElems_newparamchoicesequenceprofile_COMMONschema_Newparam_TcommonNewparamType_, bool) error
	XsdGoPkgHasElem_float3choiceglsl_param_typeschema_Float3_TglslFloat3_                                                                                                                                                             func(*XsdGoPkgHasElem_float3choiceglsl_param_typeschema_Float3_TglslFloat3_, bool) error
	XsdGoPkgHasElem_float1x4choicefx_basic_type_commonschema_Float1X4_Tfloat4_                                                                                                                                                        func(*XsdGoPkgHasElem_float1x4choicefx_basic_type_commonschema_Float1X4_Tfloat4_, bool) error
	XsdGoPkgHasElem_texture3Dchoicegl_pipeline_settingsschema_Texture3D_TxsdGlPipelineSettingsChoiceTexture3D_                                                                                                                        func(*XsdGoPkgHasElem_texture3Dchoicegl_pipeline_settingsschema_Texture3D_TxsdGlPipelineSettingsChoiceTexture3D_, bool) error
	XsdGoPkgHasElem_radius1sequencetapered_capsuleschema_Radius1_Tfloat2_                                                                                                                                                             func(*XsdGoPkgHasElem_radius1sequencetapered_capsuleschema_Radius1_Tfloat2_, bool) error
	XsdGoPkgHasElem_LibraryPhysicsModels                                                                                                                                                                                              func(*XsdGoPkgHasElem_LibraryPhysicsModels, bool) error
	XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler3D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255                                                                                                                              func(*XsdGoPkgHasElem_mipmap_maxlevelsequencefx_sampler3D_commonschema_MipmapMaxlevel_XsdtUnsignedByte_255, bool) error
	TxsdGlPipelineSettingsChoicePolygonModeSequenceFace                                                                                                                                                                               func(*TxsdGlPipelineSettingsChoicePolygonModeSequenceFace, bool) error
	XsdGoPkgHasElem_valuesequencealpha_funcchoicegl_pipeline_settingsschema_Value_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceValue_                                                                                                 func(*XsdGoPkgHasElem_valuesequencealpha_funcchoicegl_pipeline_settingsschema_Value_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceValue_, bool) error
	XsdGoPkgHasElem_techniquesequenceprofile_COMMONschema_Technique_TxsdProfileCommonSequenceTechnique_                                                                                                                               func(*XsdGoPkgHasElem_techniquesequenceprofile_COMMONschema_Technique_TxsdProfileCommonSequenceTechnique_, bool) error
	XsdGoPkgHasElem_normalize_enablechoicegl_pipeline_settingsschema_NormalizeEnable_TxsdGlPipelineSettingsChoiceNormalizeEnable_                                                                                                     func(*XsdGoPkgHasElem_normalize_enablechoicegl_pipeline_settingsschema_NormalizeEnable_TxsdGlPipelineSettingsChoiceNormalizeEnable_, bool) error
	XsdGoPkgHasElem_color_targetsequencepasssequencetechniquesequenceprofile_GLESschema_ColorTarget_TglesRendertargetCommon_                                                                                                          func(*XsdGoPkgHasElem_color_targetsequencepasssequencetechniquesequenceprofile_GLESschema_ColorTarget_TglesRendertargetCommon_, bool) error
	XsdGoPkgHasElem_formatsequencefx_surface_commonschema_Format_XsdtToken_                                                                                                                                                           func(*XsdGoPkgHasElem_formatsequencefx_surface_commonschema_Format_XsdtToken_, bool) error
	XsdGoPkgHasElem_half1x1choicecg_param_typeschema_Half1X1_TcgHalf1X1_                                                                                                                                                              func(*XsdGoPkgHasElem_half1x1choicecg_param_typeschema_Half1X1_TcgHalf1X1_, bool) error
	XsdGoPkgHasElem_float2x2choicefx_basic_type_commonschema_Float2X2_Tfloat2X2_                                                                                                                                                      func(*XsdGoPkgHasElem_float2x2choicefx_basic_type_commonschema_Float2X2_Tfloat2X2_, bool) error
	XsdGoPkgHasElem_technique_commonsequencesourceschema_TechniqueCommon_TxsdSourceSequenceTechniqueCommon_                                                                                                                           func(*XsdGoPkgHasElem_technique_commonsequencesourceschema_TechniqueCommon_TxsdSourceSequenceTechniqueCommon_, bool) error
	XsdGoPkgHasElem_arraychoicecg_setparamschema_Array_TcgSetarrayType_                                                                                                                                                               func(*XsdGoPkgHasElem_arraychoicecg_setparamschema_Array_TcgSetarrayType_, bool) error
	XsdGoPkgHasElem_normalize_enablechoicegles_pipeline_settingsschema_NormalizeEnable_TxsdGlesPipelineSettingsChoiceNormalizeEnable_                                                                                                 func(*XsdGoPkgHasElem_normalize_enablechoicegles_pipeline_settingsschema_NormalizeEnable_TxsdGlesPipelineSettingsChoiceNormalizeEnable_, bool) error
	XsdGoPkgHasElem_authoring_toolsequencecontributorsequenceassetschema_AuthoringTool_XsdtString_                                                                                                                                    func(*XsdGoPkgHasElem_authoring_toolsequencecontributorsequenceassetschema_AuthoringTool_XsdtString_, bool) error
	XsdGoPkgHasElem_unitsequenceassetschema_Unit_TxsdAssetSequenceUnit_                                                                                                                                                               func(*XsdGoPkgHasElem_unitsequenceassetschema_Unit_TxsdAssetSequenceUnit_, bool) error
	XsdGoPkgHasElem_InstanceRigidBody                                                                                                                                                                                                 func(*XsdGoPkgHasElem_InstanceRigidBody, bool) error
	TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame                                                                                                                                                                     func(*TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame, bool) error
	TxsdMesh                                                                                                                                                                                                                          func(*TxsdMesh, bool) error
	XsdGoPkgHasElem_bool2choicefx_basic_type_commonschema_Bool2_Tbool2_                                                                                                                                                               func(*XsdGoPkgHasElem_bool2choicefx_basic_type_commonschema_Bool2_Tbool2_, bool) error
	XsdGoPkgHasElem_wrap_ssequencegles_sampler_stateschema_WrapS_TglesSamplerWrap_Repeat                                                                                                                                              func(*XsdGoPkgHasElem_wrap_ssequencegles_sampler_stateschema_WrapS_TglesSamplerWrap_Repeat, bool) error
	XsdGoPkgHasElem_IntArray                                                                                                                                                                                                          func(*XsdGoPkgHasElem_IntArray, bool) error
	TxsdRigidConstraintSequenceAttachment                                                                                                                                                                                             func(*TxsdRigidConstraintSequenceAttachment, bool) error
	XsdGoPkgHasElem_bool4x1choicecg_param_typeschema_Bool4X1_TcgBool4X1_                                                                                                                                                              func(*XsdGoPkgHasElem_bool4x1choicecg_param_typeschema_Bool4X1_TcgBool4X1_, bool) error
	XsdGoPkgHasElem_samplerDEPTHchoicefx_basic_type_commonschema_SamplerDEPTH_TfxSamplerDEPTHCommon_                                                                                                                                  func(*XsdGoPkgHasElem_samplerDEPTHchoicefx_basic_type_commonschema_SamplerDEPTH_TfxSamplerDEPTHCommon_, bool) error
	XsdGoPkgHasElem_float2choicecg_param_typeschema_Float2_TcgFloat2_                                                                                                                                                                 func(*XsdGoPkgHasElem_float2choicecg_param_typeschema_Float2_TcgFloat2_, bool) error
	XsdGoPkgHasElem_half2x3choicecg_param_typeschema_Half2X3_TcgHalf2X3_                                                                                                                                                              func(*XsdGoPkgHasElem_half2x3choicecg_param_typeschema_Half2X3_TcgHalf2X3_, bool) error
	XsdGoPkgHasElem_float2x1choicefx_basic_type_commonschema_Float2X1_Tfloat2_                                                                                                                                                        func(*XsdGoPkgHasElem_float2x1choicefx_basic_type_commonschema_Float2X1_Tfloat2_, bool) error
	XsdGoPkgHasElem_depth_clearsequencepasssequencetechniquesequenceprofile_GLESschema_DepthClear_Tfloat_                                                                                                                             func(*XsdGoPkgHasElem_depth_clearsequencepasssequencetechniquesequenceprofile_GLESschema_DepthClear_Tfloat_, bool) error
	XsdGoPkgHasElems_depth_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthClear_TfxCleardepthCommon_                                                                                                               func(*XsdGoPkgHasElems_depth_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthClear_TfxCleardepthCommon_, bool) error
	XsdGoPkgHasElem_light_specularchoicegles_pipeline_settingsschema_LightSpecular_TxsdGlesPipelineSettingsChoiceLightSpecular_                                                                                                       func(*XsdGoPkgHasElem_light_specularchoicegles_pipeline_settingsschema_LightSpecular_TxsdGlesPipelineSettingsChoiceLightSpecular_, bool) error
	TxsdTechnique                                                                                                                                                                                                                     func(*TxsdTechnique, bool) error
	XsdGoPkgHasElem_sampler_statechoicegles_basic_type_commonschema_SamplerState_TglesSamplerState_                                                                                                                                   func(*XsdGoPkgHasElem_sampler_statechoicegles_basic_type_commonschema_SamplerState_TglesSamplerState_, bool) error
	TxsdInstanceRigidConstraint                                                                                                                                                                                                       func(*TxsdInstanceRigidConstraint, bool) error
	TxsdRigidBody                                                                                                                                                                                                                     func(*TxsdRigidBody, bool) error
	XsdGoPkgHasElem_mipmap_biassequencefx_sampler1D_commonschema_MipmapBias_XsdtFloat_00                                                                                                                                              func(*XsdGoPkgHasElem_mipmap_biassequencefx_sampler1D_commonschema_MipmapBias_XsdtFloat_00, bool) error
	XsdGoPkgHasElem_light_model_color_controlchoicegl_pipeline_settingsschema_LightModelColorControl_TxsdGlPipelineSettingsChoiceLightModelColorControl_                                                                              func(*XsdGoPkgHasElem_light_model_color_controlchoicegl_pipeline_settingsschema_LightModelColorControl_TxsdGlPipelineSettingsChoiceLightModelColorControl_, bool) error
	XsdGoPkgHasElems_Param                                                                                                                                                                                                            func(*XsdGoPkgHasElems_Param, bool) error
	XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequencerigid_bodyschema_Hollow_TxsdRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_                                                                       func(*XsdGoPkgHasElem_hollowsequenceshapesequencetechnique_commonsequencerigid_bodyschema_Hollow_TxsdRigidBodySequenceTechniqueCommonSequenceShapeSequenceHollow_, bool) error
	XsdGoPkgHasElem_light_quadratic_attenuationchoicegles_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlesPipelineSettingsChoiceLightQuadraticAttenuation_                                                                  func(*XsdGoPkgHasElem_light_quadratic_attenuationchoicegles_pipeline_settingsschema_LightQuadraticAttenuation_TxsdGlesPipelineSettingsChoiceLightQuadraticAttenuation_, bool) error
	TxsdInstanceMaterial                                                                                                                                                                                                              func(*TxsdInstanceMaterial, bool) error
	XsdGoPkgHasElem_int1x1choicecg_param_typeschema_Int1X1_TcgInt1X1_                                                                                                                                                                 func(*XsdGoPkgHasElem_int1x1choicecg_param_typeschema_Int1X1_TcgInt1X1_, bool) error
	XsdGoPkgHasElem_lighting_enablechoicegl_pipeline_settingsschema_LightingEnable_TxsdGlPipelineSettingsChoiceLightingEnable_                                                                                                        func(*XsdGoPkgHasElem_lighting_enablechoicegl_pipeline_settingsschema_LightingEnable_TxsdGlPipelineSettingsChoiceLightingEnable_, bool) error
	TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam                                                                                                                                                                            func(*TxsdProfileGlesSequenceTechniqueSequenceChoiceSetparam, bool) error
	TfxNewparamCommon                                                                                                                                                                                                                 func(*TfxNewparamCommon, bool) error
	XsdGoPkgHasElem_projection_matrixchoicegl_pipeline_settingsschema_ProjectionMatrix_TxsdGlPipelineSettingsChoiceProjectionMatrix_                                                                                                  func(*XsdGoPkgHasElem_projection_matrixchoicegl_pipeline_settingsschema_ProjectionMatrix_TxsdGlPipelineSettingsChoiceProjectionMatrix_, bool) error
	XsdGoPkgHasElem_float4x4choicefx_basic_type_commonschema_Float4X4_Tfloat4X4_                                                                                                                                                      func(*XsdGoPkgHasElem_float4x4choicefx_basic_type_commonschema_Float4X4_Tfloat4X4_, bool) error
	XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegl_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToCoverageEnable_                                                              func(*XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegl_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToCoverageEnable_, bool) error
	XsdGoPkgHasElem_textureCUBEchoicegl_pipeline_settingsschema_TextureCUBE_TxsdGlPipelineSettingsChoiceTextureCUBE_                                                                                                                  func(*XsdGoPkgHasElem_textureCUBEchoicegl_pipeline_settingsschema_TextureCUBE_TxsdGlPipelineSettingsChoiceTextureCUBE_, bool) error
	XsdGoPkgHasElem_rangesequencefx_surface_format_hint_commonschema_Range_TfxSurfaceFormatHintRangeEnum_                                                                                                                             func(*XsdGoPkgHasElem_rangesequencefx_surface_format_hint_commonschema_Range_TfxSurfaceFormatHintRangeEnum_, bool) error
	XsdGoPkgHasElem_lambertchoicesequencetechniquesequenceprofile_COMMONschema_Lambert_TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert_                                                                                       func(*XsdGoPkgHasElem_lambertchoicesequencetechniquesequenceprofile_COMMONschema_Lambert_TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert_, bool) error
	XsdGoPkgHasElems_Linestrips                                                                                                                                                                                                       func(*XsdGoPkgHasElems_Linestrips, bool) error
	XsdGoPkgHasElem_mass_framesequencetechnique_commonsequenceinstance_rigid_bodyschema_MassFrame_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame_                                                                      func(*XsdGoPkgHasElem_mass_framesequencetechnique_commonsequenceinstance_rigid_bodyschema_MassFrame_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceMassFrame_, bool) error
	XsdGoPkgHasElem_ProfileCommon                                                                                                                                                                                                     func(*XsdGoPkgHasElem_ProfileCommon, bool) error
	XsdGoPkgHasElem_float1choicecg_param_typeschema_Float1_TcgFloat1_                                                                                                                                                                 func(*XsdGoPkgHasElem_float1choicecg_param_typeschema_Float1_TcgFloat1_, bool) error
	XsdGoPkgHasElem_directionalchoicetechnique_commonsequencelightschema_Directional_TxsdLightSequenceTechniqueCommonChoiceDirectional_                                                                                               func(*XsdGoPkgHasElem_directionalchoicetechnique_commonsequencelightschema_Directional_TxsdLightSequenceTechniqueCommonChoiceDirectional_, bool) error
	XsdGoPkgHasElem_reflectivitysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_                                                                                                func(*XsdGoPkgHasElem_reflectivitysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflectivity_TcommonFloatOrParamType_, bool) error
	XsdGoPkgHasElem_modesequencepolygon_modechoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoicePolygonModeSequenceMode_                                                                                                func(*XsdGoPkgHasElem_modesequencepolygon_modechoicegl_pipeline_settingsschema_Mode_TxsdGlPipelineSettingsChoicePolygonModeSequenceMode_, bool) error
	XsdGoPkgHasElems_newparamchoicesequenceprofile_GLESschema_Newparam_TglesNewparam_                                                                                                                                                 func(*XsdGoPkgHasElems_newparamchoicesequenceprofile_GLESschema_Newparam_TglesNewparam_, bool) error
	XsdGoPkgHasElem_material_shininesschoicegles_pipeline_settingsschema_MaterialShininess_TxsdGlesPipelineSettingsChoiceMaterialShininess_                                                                                           func(*XsdGoPkgHasElem_material_shininesschoicegles_pipeline_settingsschema_MaterialShininess_TxsdGlesPipelineSettingsChoiceMaterialShininess_, bool) error
	XsdGoPkgHasElems_setparamchoicecg_setuser_typeschema_Setparam_TcgSetparam_                                                                                                                                                        func(*XsdGoPkgHasElems_setparamchoicecg_setuser_typeschema_Setparam_TcgSetparam_, bool) error
	XsdGoPkgHasElem_colorchoicecommon_color_or_texture_typeschema_Color_TxsdCommonColorOrTextureTypeChoiceColor_                                                                                                                      func(*XsdGoPkgHasElem_colorchoicecommon_color_or_texture_typeschema_Color_TxsdCommonColorOrTextureTypeChoiceColor_, bool) error
	XsdGoPkgHasElems_TaperedCapsule                                                                                                                                                                                                   func(*XsdGoPkgHasElems_TaperedCapsule, bool) error
	XsdGoPkgHasElems_InstancePhysicsMaterial                                                                                                                                                                                          func(*XsdGoPkgHasElems_InstancePhysicsMaterial, bool) error
	XsdGoPkgHasElem_border_colorsequencefx_sampler1D_commonschema_BorderColor_TfxColorCommon_                                                                                                                                         func(*XsdGoPkgHasElem_border_colorsequencefx_sampler1D_commonschema_BorderColor_TfxColorCommon_, bool) error
	TglslSurfaceType                                                                                                                                                                                                                  func(*TglslSurfaceType, bool) error
	XsdGoPkgHasElem_destsequenceblend_funcchoicegles_pipeline_settingsschema_Dest_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest_                                                                                                func(*XsdGoPkgHasElem_destsequenceblend_funcchoicegles_pipeline_settingsschema_Dest_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest_, bool) error
	XsdGoPkgHasElem_int2x2choicecg_param_typeschema_Int2X2_TcgInt2X2_                                                                                                                                                                 func(*XsdGoPkgHasElem_int2x2choicecg_param_typeschema_Int2X2_TcgInt2X2_, bool) error
	XsdGoPkgHasElem_light_ambientchoicegl_pipeline_settingsschema_LightAmbient_TxsdGlPipelineSettingsChoiceLightAmbient_                                                                                                              func(*XsdGoPkgHasElem_light_ambientchoicegl_pipeline_settingsschema_LightAmbient_TxsdGlPipelineSettingsChoiceLightAmbient_, bool) error
	XsdGoPkgHasElem_half2choicecg_param_typeschema_Half2_TcgHalf2_                                                                                                                                                                    func(*XsdGoPkgHasElem_half2choicecg_param_typeschema_Half2_TcgHalf2_, bool) error
	XsdGoPkgHasElem_InstanceLight                                                                                                                                                                                                     func(*XsdGoPkgHasElem_InstanceLight, bool) error
	TxsdVisualSceneSequenceEvaluateSceneSequenceRender                                                                                                                                                                                func(*TxsdVisualSceneSequenceEvaluateSceneSequenceRender, bool) error
	XsdGoPkgHasElems_instance_animationsequenceanimation_clipschema_InstanceAnimation_TInstanceWithExtra_                                                                                                                             func(*XsdGoPkgHasElems_instance_animationsequenceanimation_clipschema_InstanceAnimation_TInstanceWithExtra_, bool) error
	TxsdProfileCommonSequenceTechnique                                                                                                                                                                                                func(*TxsdProfileCommonSequenceTechnique, bool) error
	XsdGoPkgHasElem_shade_modelchoicegl_pipeline_settingsschema_ShadeModel_TxsdGlPipelineSettingsChoiceShadeModel_                                                                                                                    func(*XsdGoPkgHasElem_shade_modelchoicegl_pipeline_settingsschema_ShadeModel_TxsdGlPipelineSettingsChoiceShadeModel_, bool) error
	TxsdGlesTextureUnitSequenceTexcoord                                                                                                                                                                                               func(*TxsdGlesTextureUnitSequenceTexcoord, bool) error
	TxsdProfileGlesSequenceTechniqueSequencePass                                                                                                                                                                                      func(*TxsdProfileGlesSequenceTechniqueSequencePass, bool) error
	XsdGoPkgHasElem_float3x1choicecg_param_typeschema_Float3X1_TcgFloat3X1_                                                                                                                                                           func(*XsdGoPkgHasElem_float3x1choicecg_param_typeschema_Float3X1_TcgFloat3X1_, bool) error
	XsdGoPkgHasGroup_GlesPipelineSettings                                                                                                                                                                                             func(*XsdGoPkgHasGroup_GlesPipelineSettings, bool) error
	XsdGoPkgHasElem_zfailsequencestencil_opchoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSequenceZfail_                                                                                                 func(*XsdGoPkgHasElem_zfailsequencestencil_opchoicegl_pipeline_settingsschema_Zfail_TxsdGlPipelineSettingsChoiceStencilOpSequenceZfail_, bool) error
	XsdGoPkgHasElems_Matrix                                                                                                                                                                                                           func(*XsdGoPkgHasElems_Matrix, bool) error
	XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Name_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_                                                    func(*XsdGoPkgHasElem_namesequenceshaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Name_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceName_, bool) error
	XsdGoPkgHasElem_point_distance_attenuationchoicegles_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlesPipelineSettingsChoicePointDistanceAttenuation_                                                                     func(*XsdGoPkgHasElem_point_distance_attenuationchoicegles_pipeline_settingsschema_PointDistanceAttenuation_TxsdGlesPipelineSettingsChoicePointDistanceAttenuation_, bool) error
	TxsdRigidBodySequenceTechniqueCommonSequenceShape                                                                                                                                                                                 func(*TxsdRigidBodySequenceTechniqueCommonSequenceShape, bool) error
	TxsdGlesPipelineSettingsChoiceAlphaFunc                                                                                                                                                                                           func(*TxsdGlesPipelineSettingsChoiceAlphaFunc, bool) error
	TxsdGlPipelineSettingsChoiceBlendEquationSeparate                                                                                                                                                                                 func(*TxsdGlPipelineSettingsChoiceBlendEquationSeparate, bool) error
	XsdGoPkgHasElem_refsequencestencil_funcchoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSequenceRef_                                                                                                   func(*XsdGoPkgHasElem_refsequencestencil_funcchoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSequenceRef_, bool) error
	XsdGoPkgHasElem_fixed4x2choicecg_param_typeschema_Fixed4X2_TcgFixed4X2_                                                                                                                                                           func(*XsdGoPkgHasElem_fixed4x2choicecg_param_typeschema_Fixed4X2_TcgFixed4X2_, bool) error
	TxsdSkew                                                                                                                                                                                                                          func(*TxsdSkew, bool) error
	XsdGoPkgHasElem_float4x2choicefx_basic_type_commonschema_Float4X2_Tfloat4X2_                                                                                                                                                      func(*XsdGoPkgHasElem_float4x2choicefx_basic_type_commonschema_Float4X2_Tfloat4X2_, bool) error
	XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToCoverageEnable_                                                          func(*XsdGoPkgHasElem_sample_alpha_to_coverage_enablechoicegles_pipeline_settingsschema_SampleAlphaToCoverageEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToCoverageEnable_, bool) error
	XsdGoPkgHasElem_front_facechoicegl_pipeline_settingsschema_FrontFace_TxsdGlPipelineSettingsChoiceFrontFace_                                                                                                                       func(*XsdGoPkgHasElem_front_facechoicegl_pipeline_settingsschema_FrontFace_TxsdGlPipelineSettingsChoiceFrontFace_, bool) error
	XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegl_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToOneEnable_                                                                             func(*XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegl_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlPipelineSettingsChoiceSampleAlphaToOneEnable_, bool) error
	XsdGoPkgHasElem_depth_rangechoicegl_pipeline_settingsschema_DepthRange_TxsdGlPipelineSettingsChoiceDepthRange_                                                                                                                    func(*XsdGoPkgHasElem_depth_rangechoicegl_pipeline_settingsschema_DepthRange_TxsdGlPipelineSettingsChoiceDepthRange_, bool) error
	XsdGoPkgHasElem_light_constant_attenuationchoicegl_pipeline_settingsschema_LightConstantAttenuation_TxsdGlPipelineSettingsChoiceLightConstantAttenuation_                                                                         func(*XsdGoPkgHasElem_light_constant_attenuationchoicegl_pipeline_settingsschema_LightConstantAttenuation_TxsdGlPipelineSettingsChoiceLightConstantAttenuation_, bool) error
	XsdGoPkgHasElem_wrap_ssequencefx_samplerDEPTH_commonschema_WrapS_TfxSamplerWrapCommon_Wrap                                                                                                                                        func(*XsdGoPkgHasElem_wrap_ssequencefx_samplerDEPTH_commonschema_WrapS_TfxSamplerWrapCommon_Wrap, bool) error
	XsdGoPkgHasElem_LibraryNodes                                                                                                                                                                                                      func(*XsdGoPkgHasElem_LibraryNodes, bool) error
	XsdGoPkgHasElem_polygon_offset_line_enablechoicegl_pipeline_settingsschema_PolygonOffsetLineEnable_TxsdGlPipelineSettingsChoicePolygonOffsetLineEnable_                                                                           func(*XsdGoPkgHasElem_polygon_offset_line_enablechoicegl_pipeline_settingsschema_PolygonOffsetLineEnable_TxsdGlPipelineSettingsChoicePolygonOffsetLineEnable_, bool) error
	XsdGoPkgHasElem_wrap_psequencefx_sampler3D_commonschema_WrapP_TfxSamplerWrapCommon_Wrap                                                                                                                                           func(*XsdGoPkgHasElem_wrap_psequencefx_sampler3D_commonschema_WrapP_TfxSamplerWrapCommon_Wrap, bool) error
	XsdGoPkgHasElems_Camera                                                                                                                                                                                                           func(*XsdGoPkgHasElems_Camera, bool) error
	XsdGoPkgHasElem_BoolArray                                                                                                                                                                                                         func(*XsdGoPkgHasElem_BoolArray, bool) error
	XsdGoPkgHasElem_light_positionchoicegles_pipeline_settingsschema_LightPosition_TxsdGlesPipelineSettingsChoiceLightPosition_                                                                                                       func(*XsdGoPkgHasElem_light_positionchoicegles_pipeline_settingsschema_LightPosition_TxsdGlesPipelineSettingsChoiceLightPosition_, bool) error
	XsdGoPkgHasElem_float4x4choiceglsl_param_typeschema_Float4X4_TglslFloat4X4_                                                                                                                                                       func(*XsdGoPkgHasElem_float4x4choiceglsl_param_typeschema_Float4X4_TglslFloat4X4_, bool) error
	XsdGoPkgHasElem_Capsule                                                                                                                                                                                                           func(*XsdGoPkgHasElem_Capsule, bool) error
	XsdGoPkgHasElems_depth_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthTarget_TfxDepthtargetCommon_                                                                                                            func(*XsdGoPkgHasElems_depth_targetsequencepasssequencetechniquesequenceprofile_GLSLschema_DepthTarget_TfxDepthtargetCommon_, bool) error
	XsdGoPkgHasElem_LibraryAnimations                                                                                                                                                                                                 func(*XsdGoPkgHasElem_LibraryAnimations, bool) error
	XsdGoPkgHasElem_fixed3x3choicecg_param_typeschema_Fixed3X3_TcgFixed3X3_                                                                                                                                                           func(*XsdGoPkgHasElem_fixed3x3choicecg_param_typeschema_Fixed3X3_TcgFixed3X3_, bool) error
	XsdGoPkgHasElems_technique_hintsequenceinstance_effectschema_TechniqueHint_TxsdInstanceEffectSequenceTechniqueHint_                                                                                                               func(*XsdGoPkgHasElems_technique_hintsequenceinstance_effectschema_TechniqueHint_TxsdInstanceEffectSequenceTechniqueHint_, bool) error
	XsdGoPkgHasElem_sampler3Dchoiceglsl_param_typeschema_Sampler3D_TglSampler3D_                                                                                                                                                      func(*XsdGoPkgHasElem_sampler3Dchoiceglsl_param_typeschema_Sampler3D_TglSampler3D_, bool) error
	XsdGoPkgHasElem_projection_matrixchoicegles_pipeline_settingsschema_ProjectionMatrix_TxsdGlesPipelineSettingsChoiceProjectionMatrix_                                                                                              func(*XsdGoPkgHasElem_projection_matrixchoicegles_pipeline_settingsschema_ProjectionMatrix_TxsdGlesPipelineSettingsChoiceProjectionMatrix_, bool) error
	TxsdSkinSequenceJoints                                                                                                                                                                                                            func(*TxsdSkinSequenceJoints, bool) error
	XsdGoPkgHasElems_InstanceRigidBody                                                                                                                                                                                                func(*XsdGoPkgHasElems_InstanceRigidBody, bool) error
	XsdGoPkgHasElem_restitutionsequencetechnique_commonsequencephysics_materialschema_Restitution_TargetableFloat_                                                                                                                    func(*XsdGoPkgHasElem_restitutionsequencetechnique_commonsequencephysics_materialschema_Restitution_TargetableFloat_, bool) error
	XsdGoPkgHasElem_fog_modechoicegl_pipeline_settingsschema_FogMode_TxsdGlPipelineSettingsChoiceFogMode_                                                                                                                             func(*XsdGoPkgHasElem_fog_modechoicegl_pipeline_settingsschema_FogMode_TxsdGlPipelineSettingsChoiceFogMode_, bool) error
	XsdGoPkgHasElem_Technique                                                                                                                                                                                                         func(*XsdGoPkgHasElem_Technique, bool) error
	XsdGoPkgHasElems_Controller                                                                                                                                                                                                       func(*XsdGoPkgHasElems_Controller, bool) error
	XsdGoPkgHasElems_InstanceController                                                                                                                                                                                               func(*XsdGoPkgHasElems_InstanceController, bool) error
	TxsdGlesPipelineSettingsChoiceBlendFunc                                                                                                                                                                                           func(*TxsdGlesPipelineSettingsChoiceBlendFunc, bool) error
	TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert                                                                                                                                                                           func(*TxsdProfileCommonSequenceTechniqueSequenceChoiceLambert, bool) error
	XsdGoPkgHasElem_time_stepsequencetechnique_commonsequencephysics_sceneschema_TimeStep_TargetableFloat_                                                                                                                            func(*XsdGoPkgHasElem_time_stepsequencetechnique_commonsequencephysics_sceneschema_TimeStep_TargetableFloat_, bool) error
	XsdGoPkgHasElem_stencil_test_enablechoicegles_pipeline_settingsschema_StencilTestEnable_TxsdGlesPipelineSettingsChoiceStencilTestEnable_                                                                                          func(*XsdGoPkgHasElem_stencil_test_enablechoicegles_pipeline_settingsschema_StencilTestEnable_TxsdGlesPipelineSettingsChoiceStencilTestEnable_, bool) error
	TfxSampler3DCommon                                                                                                                                                                                                                func(*TfxSampler3DCommon, bool) error
	XsdGoPkgHasElem_texture_unitchoicegles_basic_type_commonschema_TextureUnit_TglesTextureUnit_                                                                                                                                      func(*XsdGoPkgHasElem_texture_unitchoicegles_basic_type_commonschema_TextureUnit_TglesTextureUnit_, bool) error
	XsdGoPkgHasElems_InstanceNode                                                                                                                                                                                                     func(*XsdGoPkgHasElems_InstanceNode, bool) error
	XsdGoPkgHasElem_LibraryGeometries                                                                                                                                                                                                 func(*XsdGoPkgHasElem_LibraryGeometries, bool) error
	XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcAlpha_                                                                      func(*XsdGoPkgHasElem_src_alphasequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcAlpha_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcAlpha_, bool) error
	XsdGoPkgHasElems_techniquesequenceprofile_GLESschema_Technique_TxsdProfileGlesSequenceTechnique_                                                                                                                                  func(*XsdGoPkgHasElems_techniquesequenceprofile_GLESschema_Technique_TxsdProfileGlesSequenceTechnique_, bool) error
	XsdGoPkgHasElem_Skin                                                                                                                                                                                                              func(*XsdGoPkgHasElem_Skin, bool) error
	XsdGoPkgHasElem_keywordssequenceassetschema_Keywords_XsdtString_                                                                                                                                                                  func(*XsdGoPkgHasElem_keywordssequenceassetschema_Keywords_XsdtString_, bool) error
	TxsdGlesPipelineSettingsChoicePointSizeMax                                                                                                                                                                                        func(*TxsdGlesPipelineSettingsChoicePointSizeMax, bool) error
	TxsdGlesPipelineSettingsChoiceMaterialAmbient                                                                                                                                                                                     func(*TxsdGlesPipelineSettingsChoiceMaterialAmbient, bool) error
	XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_CGschema_Setparam_TcgSetparam_                                                                                                                                    func(*XsdGoPkgHasElems_setparamchoicesequencetechniquesequenceprofile_CGschema_Setparam_TcgSetparam_, bool) error
	TxsdGlPipelineSettingsChoiceTextureCUBE                                                                                                                                                                                           func(*TxsdGlPipelineSettingsChoiceTextureCUBE, bool) error
	XsdGoPkgHasElem_Polylist                                                                                                                                                                                                          func(*XsdGoPkgHasElem_Polylist, bool) error
	XsdGoPkgHasElem_masksequencestencil_funcchoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSequenceMask_                                                                                                func(*XsdGoPkgHasElem_masksequencestencil_funcchoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSequenceMask_, bool) error
	XsdGoPkgHasElem_backsequencestencil_func_separatechoicegl_pipeline_settingsschema_Back_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceBack_                                                                               func(*XsdGoPkgHasElem_backsequencestencil_func_separatechoicegl_pipeline_settingsschema_Back_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceBack_, bool) error
	XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegles_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToOneEnable_                                                                         func(*XsdGoPkgHasElem_sample_alpha_to_one_enablechoicegles_pipeline_settingsschema_SampleAlphaToOneEnable_TxsdGlesPipelineSettingsChoiceSampleAlphaToOneEnable_, bool) error
	XsdGoPkgHasElem_point_smooth_enablechoicegl_pipeline_settingsschema_PointSmoothEnable_TxsdGlPipelineSettingsChoicePointSmoothEnable_                                                                                              func(*XsdGoPkgHasElem_point_smooth_enablechoicegl_pipeline_settingsschema_PointSmoothEnable_TxsdGlPipelineSettingsChoicePointSmoothEnable_, bool) error
	TxsdGlPipelineSettingsChoiceBlendFunc                                                                                                                                                                                             func(*TxsdGlPipelineSettingsChoiceBlendFunc, bool) error
	TxsdGlPipelineSettingsChoiceLightAmbient                                                                                                                                                                                          func(*TxsdGlPipelineSettingsChoiceLightAmbient, bool) error
	XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00                                                                                    func(*XsdGoPkgHasElem_target_valuesequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_TargetValue_TargetableFloat_00, bool) error
	TInputLocal                                                                                                                                                                                                                       func(*TInputLocal, bool) error
	XsdGoPkgHasElem_technique_commonsequenceopticssequencecameraschema_TechniqueCommon_TxsdCameraSequenceOpticsSequenceTechniqueCommon_                                                                                               func(*XsdGoPkgHasElem_technique_commonsequenceopticssequencecameraschema_TechniqueCommon_TxsdCameraSequenceOpticsSequenceTechniqueCommon_, bool) error
	XsdGoPkgHasElem_half3x1choicecg_param_typeschema_Half3X1_TcgHalf3X1_                                                                                                                                                              func(*XsdGoPkgHasElem_half3x1choicecg_param_typeschema_Half3X1_TcgHalf3X1_, bool) error
	XsdGoPkgHasElems_GlHookAbstract                                                                                                                                                                                                   func(*XsdGoPkgHasElems_GlHookAbstract, bool) error
	TxsdSphere                                                                                                                                                                                                                        func(*TxsdSphere, bool) error
	XsdGoPkgHasElem_facesequencestencil_op_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFace_                                                                                   func(*XsdGoPkgHasElem_facesequencestencil_op_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFace_, bool) error
	XsdGoPkgHasElem_spotchoicetechnique_commonsequencelightschema_Spot_TxsdLightSequenceTechniqueCommonChoiceSpot_                                                                                                                    func(*XsdGoPkgHasElem_spotchoicetechnique_commonsequencelightschema_Spot_TxsdLightSequenceTechniqueCommonChoiceSpot_, bool) error
	XsdGoPkgHasElem_stencil_maskchoicegl_pipeline_settingsschema_StencilMask_TxsdGlPipelineSettingsChoiceStencilMask_                                                                                                                 func(*XsdGoPkgHasElem_stencil_maskchoicegl_pipeline_settingsschema_StencilMask_TxsdGlPipelineSettingsChoiceStencilMask_, bool) error
	XsdGoPkgHasElem_technique_commonsequencebind_materialschema_TechniqueCommon_TxsdBindMaterialSequenceTechniqueCommon_                                                                                                              func(*XsdGoPkgHasElem_technique_commonsequencebind_materialschema_TechniqueCommon_TxsdBindMaterialSequenceTechniqueCommon_, bool) error
	TxsdGlesPipelineSettingsChoiceLogicOp                                                                                                                                                                                             func(*TxsdGlesPipelineSettingsChoiceLogicOp, bool) error
	XsdGoPkgHasElem_textureRECT_enablechoicegl_pipeline_settingsschema_TextureRECTEnable_TxsdGlPipelineSettingsChoiceTextureRECTEnable_                                                                                               func(*XsdGoPkgHasElem_textureRECT_enablechoicegl_pipeline_settingsschema_TextureRECTEnable_TxsdGlPipelineSettingsChoiceTextureRECTEnable_, bool) error
	XsdGoPkgHasElem_logic_opchoicegles_pipeline_settingsschema_LogicOp_TxsdGlesPipelineSettingsChoiceLogicOp_                                                                                                                         func(*XsdGoPkgHasElem_logic_opchoicegles_pipeline_settingsschema_LogicOp_TxsdGlesPipelineSettingsChoiceLogicOp_, bool) error
	XsdGoPkgHasElems_LibraryForceFields                                                                                                                                                                                               func(*XsdGoPkgHasElems_LibraryForceFields, bool) error
	XsdGoPkgHasElem_light_ambientchoicegles_pipeline_settingsschema_LightAmbient_TxsdGlesPipelineSettingsChoiceLightAmbient_                                                                                                          func(*XsdGoPkgHasElem_light_ambientchoicegles_pipeline_settingsschema_LightAmbient_TxsdGlesPipelineSettingsChoiceLightAmbient_, bool) error
	XsdGoPkgHasElem_light_diffusechoicegles_pipeline_settingsschema_LightDiffuse_TxsdGlesPipelineSettingsChoiceLightDiffuse_                                                                                                          func(*XsdGoPkgHasElem_light_diffusechoicegles_pipeline_settingsschema_LightDiffuse_TxsdGlesPipelineSettingsChoiceLightDiffuse_, bool) error
	TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear                                                                                                                                                            func(*TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear, bool) error
	TglesSamplerState                                                                                                                                                                                                                 func(*TglesSamplerState, bool) error
	XsdGoPkgHasElems_bind_vertex_inputsequenceinstance_materialschema_BindVertexInput_TxsdInstanceMaterialSequenceBindVertexInput_                                                                                                    func(*XsdGoPkgHasElems_bind_vertex_inputsequenceinstance_materialschema_BindVertexInput_TxsdInstanceMaterialSequenceBindVertexInput_, bool) error
	XsdGoPkgHasElem_material_diffusechoicegles_pipeline_settingsschema_MaterialDiffuse_TxsdGlesPipelineSettingsChoiceMaterialDiffuse_                                                                                                 func(*XsdGoPkgHasElem_material_diffusechoicegles_pipeline_settingsschema_MaterialDiffuse_TxsdGlesPipelineSettingsChoiceMaterialDiffuse_, bool) error
	XsdGoPkgHasElem_logic_opchoicegl_pipeline_settingsschema_LogicOp_TxsdGlPipelineSettingsChoiceLogicOp_                                                                                                                             func(*XsdGoPkgHasElem_logic_opchoicegl_pipeline_settingsschema_LogicOp_TxsdGlPipelineSettingsChoiceLogicOp_, bool) error
	TxsdTaperedCylinder                                                                                                                                                                                                               func(*TxsdTaperedCylinder, bool) error
	TxsdGlPipelineSettingsChoiceClearStencil                                                                                                                                                                                          func(*TxsdGlPipelineSettingsChoiceClearStencil, bool) error
	XsdGoPkgHasElems_Skin                                                                                                                                                                                                             func(*XsdGoPkgHasElems_Skin, bool) error
	XsdGoPkgHasElem_point_size_maxchoicegles_pipeline_settingsschema_PointSizeMax_TxsdGlesPipelineSettingsChoicePointSizeMax_                                                                                                         func(*XsdGoPkgHasElem_point_size_maxchoicegles_pipeline_settingsschema_PointSizeMax_TxsdGlesPipelineSettingsChoicePointSizeMax_, bool) error
	XsdGoPkgHasElem_orthographicchoicetechnique_commonsequenceopticssequencecameraschema_Orthographic_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic_                                                              func(*XsdGoPkgHasElem_orthographicchoicetechnique_commonsequenceopticssequencecameraschema_Orthographic_TxsdCameraSequenceOpticsSequenceTechniqueCommonChoiceOrthographic_, bool) error
	XsdGoPkgHasElem_primarychoicefx_surface_init_cube_commonschema_Primary_TxsdFxSurfaceInitCubeCommonChoicePrimary_                                                                                                                  func(*XsdGoPkgHasElem_primarychoicefx_surface_init_cube_commonschema_Primary_TxsdFxSurfaceInitCubeCommonChoicePrimary_, bool) error
	TglesTexcombinerCommandRGBType                                                                                                                                                                                                    func(*TglesTexcombinerCommandRGBType, bool) error
	XsdGoPkgHasElem_float2x2choicecg_param_typeschema_Float2X2_TcgFloat2X2_                                                                                                                                                           func(*XsdGoPkgHasElem_float2x2choicecg_param_typeschema_Float2X2_TcgFloat2X2_, bool) error
	TxsdGlPipelineSettingsChoiceDepthBounds                                                                                                                                                                                           func(*TxsdGlPipelineSettingsChoiceDepthBounds, bool) error
	TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind                                                                                                                                                      func(*TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind, bool) error
	XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZpass_                                                                                func(*XsdGoPkgHasElem_zpasssequencestencil_op_separatechoicegl_pipeline_settingsschema_Zpass_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceZpass_, bool) error
	XsdGoPkgHasElem_fog_densitychoicegl_pipeline_settingsschema_FogDensity_TxsdGlPipelineSettingsChoiceFogDensity_                                                                                                                    func(*XsdGoPkgHasElem_fog_densitychoicegl_pipeline_settingsschema_FogDensity_TxsdGlPipelineSettingsChoiceFogDensity_, bool) error
	XsdGoPkgHasElem_LibraryControllers                                                                                                                                                                                                func(*XsdGoPkgHasElem_LibraryControllers, bool) error
	XsdGoPkgHasElem_ymagchoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Ymag_TargetableFloat_                                                                                        func(*XsdGoPkgHasElem_ymagchoicesequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Ymag_TargetableFloat_, bool) error
	XsdGoPkgHasElem_instance_visual_scenesequencescenesequenceCOLLADAschema_InstanceVisualScene_TInstanceWithExtra_                                                                                                                   func(*XsdGoPkgHasElem_instance_visual_scenesequencescenesequenceCOLLADAschema_InstanceVisualScene_TInstanceWithExtra_, bool) error
	XsdGoPkgHasElem_material_emissionchoicegles_pipeline_settingsschema_MaterialEmission_TxsdGlesPipelineSettingsChoiceMaterialEmission_                                                                                              func(*XsdGoPkgHasElem_material_emissionchoicegles_pipeline_settingsschema_MaterialEmission_TxsdGlesPipelineSettingsChoiceMaterialEmission_, bool) error
	TxsdBindMaterialSequenceTechniqueCommon                                                                                                                                                                                           func(*TxsdBindMaterialSequenceTechniqueCommon, bool) error
	TfxStenciltargetCommon                                                                                                                                                                                                            func(*TfxStenciltargetCommon, bool) error
	XsdGoPkgHasElems_LibraryControllers                                                                                                                                                                                               func(*XsdGoPkgHasElems_LibraryControllers, bool) error
	XsdGoPkgHasElem_sampler2Dchoicecg_param_typeschema_Sampler2D_TcgSampler2D_                                                                                                                                                        func(*XsdGoPkgHasElem_sampler2Dchoicecg_param_typeschema_Sampler2D_TcgSampler2D_, bool) error
	XsdGoPkgHasElem_int1choicecg_param_typeschema_Int1_TcgInt1_                                                                                                                                                                       func(*XsdGoPkgHasElem_int1choicecg_param_typeschema_Int1_TcgInt1_, bool) error
	XsdGoPkgHasElem_Source                                                                                                                                                                                                            func(*XsdGoPkgHasElem_Source, bool) error
	XsdGoPkgHasElems_BindMaterial                                                                                                                                                                                                     func(*XsdGoPkgHasElems_BindMaterial, bool) error
	TglesTexcombinerArgumentAlphaType                                                                                                                                                                                                 func(*TglesTexcombinerArgumentAlphaType, bool) error
	TxsdGlPipelineSettingsChoiceClipPlane                                                                                                                                                                                             func(*TxsdGlPipelineSettingsChoiceClipPlane, bool) error
	XsdGoPkgHasGroup_GlesBasicTypeCommon                                                                                                                                                                                              func(*XsdGoPkgHasGroup_GlesBasicTypeCommon, bool) error
	XsdGoPkgHasElem_int1x2choicecg_param_typeschema_Int1X2_TcgInt1X2_                                                                                                                                                                 func(*XsdGoPkgHasElem_int1x2choicecg_param_typeschema_Int1X2_TcgInt1X2_, bool) error
	XsdGoPkgHasElem_depth_boundschoicegl_pipeline_settingsschema_DepthBounds_TxsdGlPipelineSettingsChoiceDepthBounds_                                                                                                                 func(*XsdGoPkgHasElem_depth_boundschoicegl_pipeline_settingsschema_DepthBounds_TxsdGlPipelineSettingsChoiceDepthBounds_, bool) error
	XsdGoPkgHasElem_srcsequenceblend_funcchoicegl_pipeline_settingsschema_Src_TxsdGlPipelineSettingsChoiceBlendFuncSequenceSrc_                                                                                                       func(*XsdGoPkgHasElem_srcsequenceblend_funcchoicegl_pipeline_settingsschema_Src_TxsdGlPipelineSettingsChoiceBlendFuncSequenceSrc_, bool) error
	XsdGoPkgHasElem_alpha_test_enablechoicegles_pipeline_settingsschema_AlphaTestEnable_TxsdGlesPipelineSettingsChoiceAlphaTestEnable_                                                                                                func(*XsdGoPkgHasElem_alpha_test_enablechoicegles_pipeline_settingsschema_AlphaTestEnable_TxsdGlesPipelineSettingsChoiceAlphaTestEnable_, bool) error
	XsdGoPkgHasElem_commentssequencecontributorsequenceassetschema_Comments_XsdtString_                                                                                                                                               func(*XsdGoPkgHasElem_commentssequencecontributorsequenceassetschema_Comments_XsdtString_, bool) error
	XsdGoPkgHasElem_float1x3choicecg_param_typeschema_Float1X3_TcgFloat1X3_                                                                                                                                                           func(*XsdGoPkgHasElem_float1x3choicecg_param_typeschema_Float1X3_TcgFloat1X3_, bool) error
	XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Shader_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader_                                                                     func(*XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Shader_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader_, bool) error
	XsdGoPkgHasElem_shade_modelchoicegles_pipeline_settingsschema_ShadeModel_TxsdGlesPipelineSettingsChoiceShadeModel_                                                                                                                func(*XsdGoPkgHasElem_shade_modelchoicegles_pipeline_settingsschema_ShadeModel_TxsdGlesPipelineSettingsChoiceShadeModel_, bool) error
	TglSamplerRECT                                                                                                                                                                                                                    func(*TglSamplerRECT, bool) error
	TxsdCameraSequenceImager                                                                                                                                                                                                          func(*TxsdCameraSequenceImager, bool) error
	TxsdGlPipelineSettingsChoiceClipPlaneEnable                                                                                                                                                                                       func(*TxsdGlPipelineSettingsChoiceClipPlaneEnable, bool) error
	XsdGoPkgHasElem_ForceField                                                                                                                                                                                                        func(*XsdGoPkgHasElem_ForceField, bool) error
	XsdGoPkgHasElem_int4choicefx_basic_type_commonschema_Int4_Tint4_                                                                                                                                                                  func(*XsdGoPkgHasElem_int4choicefx_basic_type_commonschema_Int4_Tint4_, bool) error
	XsdGoPkgHasElem_connect_paramchoicecg_setparamschema_ConnectParam_TcgConnectParam_                                                                                                                                                func(*XsdGoPkgHasElem_connect_paramchoicecg_setparamschema_ConnectParam_TcgConnectParam_, bool) error
	TxsdGlPipelineSettingsChoiceTextureEnvColor                                                                                                                                                                                       func(*TxsdGlPipelineSettingsChoiceTextureEnvColor, bool) error
	TxsdGlesPipelineSettingsChoiceDepthRange                                                                                                                                                                                          func(*TxsdGlesPipelineSettingsChoiceDepthRange, bool) error
	XsdGoPkgHasElem_ref_attachmentsequencerigid_constraintschema_RefAttachment_TxsdRigidConstraintSequenceRefAttachment_                                                                                                              func(*XsdGoPkgHasElem_ref_attachmentsequencerigid_constraintschema_RefAttachment_TxsdRigidConstraintSequenceRefAttachment_, bool) error
	XsdGoPkgHasElem_linearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear_                                                         func(*XsdGoPkgHasElem_linearsequencespringsequencetechnique_commonsequencerigid_constraintschema_Linear_TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceLinear_, bool) error
	TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn                                                                                                                                                                             func(*TxsdProfileCommonSequenceTechniqueSequenceChoiceBlinn, bool) error
	TxsdGlPipelineSettingsChoiceStencilMaskSeparate                                                                                                                                                                                   func(*TxsdGlPipelineSettingsChoiceStencilMaskSeparate, bool) error
	XsdGoPkgHasElem_light_spot_exponentchoicegl_pipeline_settingsschema_LightSpotExponent_TxsdGlPipelineSettingsChoiceLightSpotExponent_                                                                                              func(*XsdGoPkgHasElem_light_spot_exponentchoicegl_pipeline_settingsschema_LightSpotExponent_TxsdGlPipelineSettingsChoiceLightSpotExponent_, bool) error
	XsdGoPkgHasElems_Translate                                                                                                                                                                                                        func(*XsdGoPkgHasElems_Translate, bool) error
	XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegl_pipeline_settingsschema_Rgb_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceRgb_                                                                              func(*XsdGoPkgHasElem_rgbsequenceblend_equation_separatechoicegl_pipeline_settingsschema_Rgb_TxsdGlPipelineSettingsChoiceBlendEquationSeparateSequenceRgb_, bool) error
	XsdGoPkgHasElems_LibraryEffects                                                                                                                                                                                                   func(*XsdGoPkgHasElems_LibraryEffects, bool) error
	XsdGoPkgHasElem_LibraryVisualScenes                                                                                                                                                                                               func(*XsdGoPkgHasElem_LibraryVisualScenes, bool) error
	TxsdGlPipelineSettingsChoiceStencilFuncSeparate                                                                                                                                                                                   func(*TxsdGlPipelineSettingsChoiceStencilFuncSeparate, bool) error
	TfxClearcolorCommon                                                                                                                                                                                                               func(*TfxClearcolorCommon, bool) error
	XsdGoPkgHasElem_fixed1x3choicecg_param_typeschema_Fixed1X3_TcgFixed1X3_                                                                                                                                                           func(*XsdGoPkgHasElem_fixed1x3choicecg_param_typeschema_Fixed1X3_TcgFixed1X3_, bool) error
	XsdGoPkgHasElem_Channel                                                                                                                                                                                                           func(*XsdGoPkgHasElem_Channel, bool) error
	XsdGoPkgHasElem_bool4choicefx_basic_type_commonschema_Bool4_Tbool4_                                                                                                                                                               func(*XsdGoPkgHasElem_bool4choicefx_basic_type_commonschema_Bool4_Tbool4_, bool) error
	TxsdGlesPipelineSettingsChoiceLightEnable                                                                                                                                                                                         func(*TxsdGlesPipelineSettingsChoiceLightEnable, bool) error
	XsdGoPkgHasElem_minfiltersequencefx_samplerDEPTH_commonschema_Minfilter_TfxSamplerFilterCommon_None                                                                                                                               func(*XsdGoPkgHasElem_minfiltersequencefx_samplerDEPTH_commonschema_Minfilter_TfxSamplerFilterCommon_None, bool) error
	XsdGoPkgHasElems_LibraryAnimations                                                                                                                                                                                                func(*XsdGoPkgHasElems_LibraryAnimations, bool) error
	XsdGoPkgHasElem_fog_colorchoicegl_pipeline_settingsschema_FogColor_TxsdGlPipelineSettingsChoiceFogColor_                                                                                                                          func(*XsdGoPkgHasElem_fog_colorchoicegl_pipeline_settingsschema_FogColor_TxsdGlPipelineSettingsChoiceFogColor_, bool) error
	TglslNewarrayType                                                                                                                                                                                                                 func(*TglslNewarrayType, bool) error
	XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Shader_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader_                                                                         func(*XsdGoPkgHasElems_shaderchoicesequencepasssequencetechniquesequenceprofile_CGschema_Shader_TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader_, bool) error
	XsdGoPkgHasElem_init_cubechoicefx_surface_init_commonschema_InitCube_TfxSurfaceInitCubeCommon_                                                                                                                                    func(*XsdGoPkgHasElem_init_cubechoicefx_surface_init_commonschema_InitCube_TfxSurfaceInitCubeCommon_, bool) error
	XsdGoPkgHasElem_failsequencestencil_opchoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSequenceFail_                                                                                                    func(*XsdGoPkgHasElem_failsequencestencil_opchoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSequenceFail_, bool) error
	XsdGoPkgHasElem_point_fade_threshold_sizechoicegles_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlesPipelineSettingsChoicePointFadeThresholdSize_                                                                          func(*XsdGoPkgHasElem_point_fade_threshold_sizechoicegles_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlesPipelineSettingsChoicePointFadeThresholdSize_, bool) error
	TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader                                                                                                                                                                  func(*TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShader, bool) error
	TxsdInstanceMaterialSequenceBindVertexInput                                                                                                                                                                                       func(*TxsdInstanceMaterialSequenceBindVertexInput, bool) error
	XsdGoPkgHasElem_fixedchoicecg_param_typeschema_Fixed_TcgFixed_                                                                                                                                                                    func(*XsdGoPkgHasElem_fixedchoicecg_param_typeschema_Fixed_TcgFixed_, bool) error
	XsdGoPkgHasElem_dither_enablechoicegl_pipeline_settingsschema_DitherEnable_TxsdGlPipelineSettingsChoiceDitherEnable_                                                                                                              func(*XsdGoPkgHasElem_dither_enablechoicegl_pipeline_settingsschema_DitherEnable_TxsdGlPipelineSettingsChoiceDitherEnable_, bool) error
	XsdGoPkgHasElems_InstanceForceField                                                                                                                                                                                               func(*XsdGoPkgHasElems_InstanceForceField, bool) error
	XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegl_pipeline_settingsschema_Front_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceFront_                                                                            func(*XsdGoPkgHasElem_frontsequencestencil_func_separatechoicegl_pipeline_settingsschema_Front_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceFront_, bool) error
	XsdGoPkgHasElem_texture_pipeline_enablechoicegles_pipeline_settingsschema_TexturePipelineEnable_TxsdGlesPipelineSettingsChoiceTexturePipelineEnable_                                                                              func(*XsdGoPkgHasElem_texture_pipeline_enablechoicegles_pipeline_settingsschema_TexturePipelineEnable_TxsdGlesPipelineSettingsChoiceTexturePipelineEnable_, bool) error
	TxsdLibraryNodes                                                                                                                                                                                                                  func(*TxsdLibraryNodes, bool) error
	XsdGoPkgHasElem_floatchoicecg_param_typeschema_Float_TcgFloat_                                                                                                                                                                    func(*XsdGoPkgHasElem_floatchoicecg_param_typeschema_Float_TcgFloat_, bool) error
	TxsdGlesPipelineSettingsChoiceLightDiffuse                                                                                                                                                                                        func(*TxsdGlesPipelineSettingsChoiceLightDiffuse, bool) error
	XsdGoPkgHasElem_half2x1choicecg_param_typeschema_Half2X1_TcgHalf2X1_                                                                                                                                                              func(*XsdGoPkgHasElem_half2x1choicecg_param_typeschema_Half2X1_TcgHalf2X1_, bool) error
	TglSamplerCUBE                                                                                                                                                                                                                    func(*TglSamplerCUBE, bool) error
	TxsdGlPipelineSettingsChoiceTexture3D                                                                                                                                                                                             func(*TxsdGlPipelineSettingsChoiceTexture3D, bool) error
	TxsdBox                                                                                                                                                                                                                           func(*TxsdBox, bool) error
	TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest                                                                                                                                                                               func(*TxsdGlesPipelineSettingsChoiceBlendFuncSequenceDest, bool) error
	XsdGoPkgHasElem_light_constant_attenuationchoicegles_pipeline_settingsschema_LightConstantAttenuation_TxsdGlesPipelineSettingsChoiceLightConstantAttenuation_                                                                     func(*XsdGoPkgHasElem_light_constant_attenuationchoicegles_pipeline_settingsschema_LightConstantAttenuation_TxsdGlesPipelineSettingsChoiceLightConstantAttenuation_, bool) error
	XsdGoPkgHasElems_RigidBody                                                                                                                                                                                                        func(*XsdGoPkgHasElems_RigidBody, bool) error
	XsdGoPkgHasElem_float2x4choicecg_param_typeschema_Float2X4_TcgFloat2X4_                                                                                                                                                           func(*XsdGoPkgHasElem_float2x4choicecg_param_typeschema_Float2X4_TcgFloat2X4_, bool) error
	TxsdGlesPipelineSettingsChoiceFogMode                                                                                                                                                                                             func(*TxsdGlesPipelineSettingsChoiceFogMode, bool) error
	XsdGoPkgHasElem_int3choiceglsl_param_typeschema_Int3_TglslInt3_                                                                                                                                                                   func(*XsdGoPkgHasElem_int3choiceglsl_param_typeschema_Int3_TglslInt3_, bool) error
	XsdGoPkgHasElem_fixed4x1choicecg_param_typeschema_Fixed4X1_TcgFixed4X1_                                                                                                                                                           func(*XsdGoPkgHasElem_fixed4x1choicecg_param_typeschema_Fixed4X1_TcgFixed4X1_, bool) error
	XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandRGB_typeschema_Argument_TglesTexcombinerArgumentRGBType_                                                                                                                 func(*XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandRGB_typeschema_Argument_TglesTexcombinerArgumentRGBType_, bool) error
	XsdGoPkgHasElem_PhysicsScene                                                                                                                                                                                                      func(*XsdGoPkgHasElem_PhysicsScene, bool) error
	TfxColortargetCommon                                                                                                                                                                                                              func(*TfxColortargetCommon, bool) error
	XsdGoPkgHasElems_Animation                                                                                                                                                                                                        func(*XsdGoPkgHasElems_Animation, bool) error
	XsdGoPkgHasElem_TaperedCylinder                                                                                                                                                                                                   func(*XsdGoPkgHasElem_TaperedCylinder, bool) error
	TcgNewparam                                                                                                                                                                                                                       func(*TcgNewparam, bool) error
	XsdGoPkgHasElem_heightsequencetapered_capsuleschema_Height_Tfloat_                                                                                                                                                                func(*XsdGoPkgHasElem_heightsequencetapered_capsuleschema_Height_Tfloat_, bool) error
	TxsdAccessor                                                                                                                                                                                                                      func(*TxsdAccessor, bool) error
	XsdGoPkgHasElem_clip_planechoicegl_pipeline_settingsschema_ClipPlane_TxsdGlPipelineSettingsChoiceClipPlane_                                                                                                                       func(*XsdGoPkgHasElem_clip_planechoicegl_pipeline_settingsschema_ClipPlane_TxsdGlPipelineSettingsChoiceClipPlane_, bool) error
	XsdGoPkgHasElem_floatchoicecommon_float_or_param_typeschema_Float_TxsdCommonFloatOrParamTypeChoiceFloat_                                                                                                                          func(*XsdGoPkgHasElem_floatchoicecommon_float_or_param_typeschema_Float_TxsdCommonFloatOrParamTypeChoiceFloat_, bool) error
	XsdGoPkgHasElem_bool4choiceglsl_param_typeschema_Bool4_TglslBool4_                                                                                                                                                                func(*XsdGoPkgHasElem_bool4choiceglsl_param_typeschema_Bool4_TglslBool4_, bool) error
	TxsdGlesPipelineSettingsChoicePointDistanceAttenuation                                                                                                                                                                            func(*TxsdGlesPipelineSettingsChoicePointDistanceAttenuation, bool) error
	XsdGoPkgHasElem_int4x3choicecg_param_typeschema_Int4X3_TcgInt4X3_                                                                                                                                                                 func(*XsdGoPkgHasElem_int4x3choicecg_param_typeschema_Int4X3_TcgInt4X3_, bool) error
	XsdGoPkgHasElem_bool1x3choicecg_param_typeschema_Bool1X3_TcgBool1X3_                                                                                                                                                              func(*XsdGoPkgHasElem_bool1x3choicecg_param_typeschema_Bool1X3_TcgBool1X3_, bool) error
	XsdGoPkgHasElem_srcsequenceblend_funcchoicegles_pipeline_settingsschema_Src_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc_                                                                                                   func(*XsdGoPkgHasElem_srcsequenceblend_funcchoicegles_pipeline_settingsschema_Src_TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc_, bool) error
	TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape                                                                                                                                                                         func(*TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape, bool) error
	TxsdGlesPipelineSettingsChoicePolygonOffset                                                                                                                                                                                       func(*TxsdGlesPipelineSettingsChoicePolygonOffset, bool) error
	XsdGoPkgHasElems_Mesh                                                                                                                                                                                                             func(*XsdGoPkgHasElems_Mesh, bool) error
	XsdGoPkgHasElem_light_model_two_side_enablechoicegl_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlPipelineSettingsChoiceLightModelTwoSideEnable_                                                                          func(*XsdGoPkgHasElem_light_model_two_side_enablechoicegl_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlPipelineSettingsChoiceLightModelTwoSideEnable_, bool) error
	XsdGoPkgHasElem_fixed3x2choicecg_param_typeschema_Fixed3X2_TcgFixed3X2_                                                                                                                                                           func(*XsdGoPkgHasElem_fixed3x2choicecg_param_typeschema_Fixed3X2_TcgFixed3X2_, bool) error
	XsdGoPkgHasElem_Controller                                                                                                                                                                                                        func(*XsdGoPkgHasElem_Controller, bool) error
	TxsdGlesPipelineSettingsChoiceMaterialDiffuse                                                                                                                                                                                     func(*TxsdGlesPipelineSettingsChoiceMaterialDiffuse, bool) error
	XsdGoPkgHasElem_channelssequencefx_surface_format_hint_commonschema_Channels_TfxSurfaceFormatHintChannelsEnum_                                                                                                                    func(*XsdGoPkgHasElem_channelssequencefx_surface_format_hint_commonschema_Channels_TfxSurfaceFormatHintChannelsEnum_, bool) error
	TxsdRotate                                                                                                                                                                                                                        func(*TxsdRotate, bool) error
	XsdGoPkgHasElem_Scale                                                                                                                                                                                                             func(*XsdGoPkgHasElem_Scale, bool) error
	XsdGoPkgHasElem_dither_enablechoicegles_pipeline_settingsschema_DitherEnable_TxsdGlesPipelineSettingsChoiceDitherEnable_                                                                                                          func(*XsdGoPkgHasElem_dither_enablechoicegles_pipeline_settingsschema_DitherEnable_TxsdGlesPipelineSettingsChoiceDitherEnable_, bool) error
	XsdGoPkgHasElem_samplerCUBEchoicefx_basic_type_commonschema_SamplerCUBE_TfxSamplerCUBECommon_                                                                                                                                     func(*XsdGoPkgHasElem_samplerCUBEchoicefx_basic_type_commonschema_SamplerCUBE_TfxSamplerCUBECommon_, bool) error
	XsdGoPkgHasElem_refsequencestencil_func_separatechoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceRef_                                                                                  func(*XsdGoPkgHasElem_refsequencestencil_func_separatechoicegl_pipeline_settingsschema_Ref_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceRef_, bool) error
	TxsdRigidConstraintSequenceTechniqueCommon                                                                                                                                                                                        func(*TxsdRigidConstraintSequenceTechniqueCommon, bool) error
	TxsdNameArray                                                                                                                                                                                                                     func(*TxsdNameArray, bool) error
	TxsdVisualScene                                                                                                                                                                                                                   func(*TxsdVisualScene, bool) error
	TfxSurfaceInitFromCommon                                                                                                                                                                                                          func(*TfxSurfaceInitFromCommon, bool) error
	XsdGoPkgHasElem_NameArray                                                                                                                                                                                                         func(*XsdGoPkgHasElem_NameArray, bool) error
	XsdGoPkgHasElems_InstanceCamera                                                                                                                                                                                                   func(*XsdGoPkgHasElems_InstanceCamera, bool) error
	XsdGoPkgHasElem_polygon_stipple_enablechoicegl_pipeline_settingsschema_PolygonStippleEnable_TxsdGlPipelineSettingsChoicePolygonStippleEnable_                                                                                     func(*XsdGoPkgHasElem_polygon_stipple_enablechoicegl_pipeline_settingsschema_PolygonStippleEnable_TxsdGlPipelineSettingsChoicePolygonStippleEnable_, bool) error
	TxsdInstanceGeometry                                                                                                                                                                                                              func(*TxsdInstanceGeometry, bool) error
	TxsdGlPipelineSettingsChoiceLineStipple                                                                                                                                                                                           func(*TxsdGlPipelineSettingsChoiceLineStipple, bool) error
	XsdGoPkgHasElems_evaluate_scenesequencevisual_sceneschema_EvaluateScene_TxsdVisualSceneSequenceEvaluateScene_                                                                                                                     func(*XsdGoPkgHasElems_evaluate_scenesequencevisual_sceneschema_EvaluateScene_TxsdVisualSceneSequenceEvaluateScene_, bool) error
	XsdGoPkgHasElems_arraychoicechoicecg_setuser_typeschema_Array_TcgSetarrayType_                                                                                                                                                    func(*XsdGoPkgHasElems_arraychoicechoicecg_setuser_typeschema_Array_TcgSetarrayType_, bool) error
	XsdGoPkgHasElem_light_spot_cutoffchoicegles_pipeline_settingsschema_LightSpotCutoff_TxsdGlesPipelineSettingsChoiceLightSpotCutoff_                                                                                                func(*XsdGoPkgHasElem_light_spot_cutoffchoicegles_pipeline_settingsschema_LightSpotCutoff_TxsdGlesPipelineSettingsChoiceLightSpotCutoff_, bool) error
	TxsdGlesPipelineSettingsChoiceMaterialSpecular                                                                                                                                                                                    func(*TxsdGlesPipelineSettingsChoiceMaterialSpecular, bool) error
	XsdGoPkgHasElem_bool2x2choicecg_param_typeschema_Bool2X2_TcgBool2X2_                                                                                                                                                              func(*XsdGoPkgHasElem_bool2x2choicecg_param_typeschema_Bool2X2_TcgBool2X2_, bool) error
	XsdGoPkgHasElem_reflectivesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_                                                                                                  func(*XsdGoPkgHasElem_reflectivesequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Reflective_TcommonColorOrTextureType_, bool) error
	XsdGoPkgHasElem_bool2choicecg_param_typeschema_Bool2_TcgBool2_                                                                                                                                                                    func(*XsdGoPkgHasElem_bool2choicecg_param_typeschema_Bool2_TcgBool2_, bool) error
	XsdGoPkgHasElem_stencil_opchoicegles_pipeline_settingsschema_StencilOp_TxsdGlesPipelineSettingsChoiceStencilOp_                                                                                                                   func(*XsdGoPkgHasElem_stencil_opchoicegles_pipeline_settingsschema_StencilOp_TxsdGlesPipelineSettingsChoiceStencilOp_, bool) error
	XsdGoPkgHasElem_fixed3x1choicecg_param_typeschema_Fixed3X1_TcgFixed3X1_                                                                                                                                                           func(*XsdGoPkgHasElem_fixed3x1choicecg_param_typeschema_Fixed3X1_TcgFixed3X1_, bool) error
	TxsdPhysicsScene                                                                                                                                                                                                                  func(*TxsdPhysicsScene, bool) error
	XsdGoPkgHasElems_ProfileGles                                                                                                                                                                                                      func(*XsdGoPkgHasElems_ProfileGles, bool) error
	XsdGoPkgHasElem_fixed2x4choicecg_param_typeschema_Fixed2X4_TcgFixed2X4_                                                                                                                                                           func(*XsdGoPkgHasElem_fixed2x4choicecg_param_typeschema_Fixed2X4_TcgFixed2X4_, bool) error
	TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode                                                                                                                                                                             func(*TxsdGlPipelineSettingsChoiceColorMaterialSequenceMode, bool) error
	XsdGoPkgHasElems_Geometry                                                                                                                                                                                                         func(*XsdGoPkgHasElems_Geometry, bool) error
	XsdGoPkgHasElem_half4x3choicecg_param_typeschema_Half4X3_TcgHalf4X3_                                                                                                                                                              func(*XsdGoPkgHasElem_half4x3choicecg_param_typeschema_Half4X3_TcgHalf4X3_, bool) error
	XsdGoPkgHasElem_sourcesequencefx_samplerDEPTH_commonschema_Source_XsdtNCName_                                                                                                                                                     func(*XsdGoPkgHasElem_sourcesequencefx_samplerDEPTH_commonschema_Source_XsdtNCName_, bool) error
	XsdGoPkgHasElems_inputsequencesamplerschema_Input_TInputLocal_                                                                                                                                                                    func(*XsdGoPkgHasElems_inputsequencesamplerschema_Input_TInputLocal_, bool) error
	XsdGoPkgHasElem_rescale_normal_enablechoicegl_pipeline_settingsschema_RescaleNormalEnable_TxsdGlPipelineSettingsChoiceRescaleNormalEnable_                                                                                        func(*XsdGoPkgHasElem_rescale_normal_enablechoicegl_pipeline_settingsschema_RescaleNormalEnable_TxsdGlPipelineSettingsChoiceRescaleNormalEnable_, bool) error
	XsdGoPkgHasElem_falloff_exponentsequencespotchoicetechnique_commonsequencelightschema_FalloffExponent_TargetableFloat_00                                                                                                          func(*XsdGoPkgHasElem_falloff_exponentsequencespotchoicetechnique_commonsequencelightschema_FalloffExponent_TargetableFloat_00, bool) error
	TxsdGlesPipelineSettingsChoiceColorMaterialEnable                                                                                                                                                                                 func(*TxsdGlesPipelineSettingsChoiceColorMaterialEnable, bool) error
	XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandAlpha_typeschema_Argument_TglesTexcombinerArgumentAlphaType_                                                                                                             func(*XsdGoPkgHasElems_argumentsequencegles_texcombiner_commandAlpha_typeschema_Argument_TglesTexcombinerArgumentAlphaType_, bool) error
	XsdGoPkgHasElem_datachoicesequenceimageschema_Data_TListOfHexBinary_                                                                                                                                                              func(*XsdGoPkgHasElem_datachoicesequenceimageschema_Data_TListOfHexBinary_, bool) error
	XsdGoPkgHasElem_boolchoiceglsl_param_typeschema_Bool_TglslBool_                                                                                                                                                                   func(*XsdGoPkgHasElem_boolchoiceglsl_param_typeschema_Bool_TglslBool_, bool) error
	TxsdGlPipelineSettingsChoiceFogCoordSrc                                                                                                                                                                                           func(*TxsdGlPipelineSettingsChoiceFogCoordSrc, bool) error
	XsdGoPkgHasElem_specularsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Specular_TcommonColorOrTextureType_                                                                                                      func(*XsdGoPkgHasElem_specularsequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Specular_TcommonColorOrTextureType_, bool) error
	XsdGoPkgHasElem_Box                                                                                                                                                                                                               func(*XsdGoPkgHasElem_Box, bool) error
	TxsdGeometry                                                                                                                                                                                                                      func(*TxsdGeometry, bool) error
	XsdGoPkgHasElems_ConvexMesh                                                                                                                                                                                                       func(*XsdGoPkgHasElems_ConvexMesh, bool) error
	XsdGoPkgHasElems_Asset                                                                                                                                                                                                            func(*XsdGoPkgHasElems_Asset, bool) error
	XsdGoPkgHasGroup_FxSurfaceInitCommon                                                                                                                                                                                              func(*XsdGoPkgHasGroup_FxSurfaceInitCommon, bool) error
	XsdGoPkgHasElem_light_specularchoicegl_pipeline_settingsschema_LightSpecular_TxsdGlPipelineSettingsChoiceLightSpecular_                                                                                                           func(*XsdGoPkgHasElem_light_specularchoicegl_pipeline_settingsschema_LightSpecular_TxsdGlPipelineSettingsChoiceLightSpecular_, bool) error
	TglesTextureConstantType                                                                                                                                                                                                          func(*TglesTextureConstantType, bool) error
	XsdGoPkgHasElems_Effect                                                                                                                                                                                                           func(*XsdGoPkgHasElems_Effect, bool) error
	TxsdVertices                                                                                                                                                                                                                      func(*TxsdVertices, bool) error
	XsdGoPkgHasElem_half3x2choicecg_param_typeschema_Half3X2_TcgHalf3X2_                                                                                                                                                              func(*XsdGoPkgHasElem_half3x2choicecg_param_typeschema_Half3X2_TcgHalf3X2_, bool) error
	XsdGoPkgHasElem_bind_shape_matrixsequenceskinschema_BindShapeMatrix_Tfloat4X4_                                                                                                                                                    func(*XsdGoPkgHasElem_bind_shape_matrixsequenceskinschema_BindShapeMatrix_Tfloat4X4_, bool) error
	XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Density_TargetableFloat_                                                                                                            func(*XsdGoPkgHasElem_densitysequenceshapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Density_TargetableFloat_, bool) error
	XsdGoPkgHasElems_InstanceLight                                                                                                                                                                                                    func(*XsdGoPkgHasElems_InstanceLight, bool) error
	XsdGoPkgHasElem_scissorchoicegl_pipeline_settingsschema_Scissor_TxsdGlPipelineSettingsChoiceScissor_                                                                                                                              func(*XsdGoPkgHasElem_scissorchoicegl_pipeline_settingsschema_Scissor_TxsdGlPipelineSettingsChoiceScissor_, bool) error
	TxsdProfileCg                                                                                                                                                                                                                     func(*TxsdProfileCg, bool) error
	XsdGoPkgHasElem_samplerDEPTHchoicecg_param_typeschema_SamplerDEPTH_TcgSamplerDEPTH_                                                                                                                                               func(*XsdGoPkgHasElem_samplerDEPTHchoicecg_param_typeschema_SamplerDEPTH_TcgSamplerDEPTH_, bool) error
	TargetableFloat                                                                                                                                                                                                                   func(*TargetableFloat, bool) error
	TxsdGlesPipelineSettingsChoiceFrontFace                                                                                                                                                                                           func(*TxsdGlesPipelineSettingsChoiceFrontFace, bool) error
	XsdGoPkgHasElem_dynamicsequencetechnique_commonsequenceinstance_rigid_bodyschema_Dynamic_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic_                                                                             func(*XsdGoPkgHasElem_dynamicsequencetechnique_commonsequenceinstance_rigid_bodyschema_Dynamic_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceDynamic_, bool) error
	XsdGoPkgHasElem_bool2x4choicecg_param_typeschema_Bool2X4_TcgBool2X4_                                                                                                                                                              func(*XsdGoPkgHasElem_bool2x4choicecg_param_typeschema_Bool2X4_TcgBool2X4_, bool) error
	XsdGoPkgHasElem_Material                                                                                                                                                                                                          func(*XsdGoPkgHasElem_Material, bool) error
	XsdGoPkgHasElem_sizesequenceellipsoidschema_Size_Tfloat3_                                                                                                                                                                         func(*XsdGoPkgHasElem_sizesequenceellipsoidschema_Size_Tfloat3_, bool) error
	XsdGoPkgHasElems_FxProfileAbstract                                                                                                                                                                                                func(*XsdGoPkgHasElems_FxProfileAbstract, bool) error
	XsdGoPkgHasElems_skeletonsequenceinstance_controllerschema_Skeleton_XsdtAnyURI_                                                                                                                                                   func(*XsdGoPkgHasElems_skeletonsequenceinstance_controllerschema_Skeleton_XsdtAnyURI_, bool) error
	XsdGoPkgHasElem_depth_test_enablechoicegles_pipeline_settingsschema_DepthTestEnable_TxsdGlesPipelineSettingsChoiceDepthTestEnable_                                                                                                func(*XsdGoPkgHasElem_depth_test_enablechoicegles_pipeline_settingsschema_DepthTestEnable_TxsdGlesPipelineSettingsChoiceDepthTestEnable_, bool) error
	XsdGoPkgHasElem_Extra                                                                                                                                                                                                             func(*XsdGoPkgHasElem_Extra, bool) error
	XsdGoPkgHasElem_funcsequencestencil_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc_                                                                                            func(*XsdGoPkgHasElem_funcsequencestencil_funcchoicegles_pipeline_settingsschema_Func_TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc_, bool) error
	TxsdLibraryGeometries                                                                                                                                                                                                             func(*TxsdLibraryGeometries, bool) error
	XsdGoPkgHasElem_destsequenceblend_funcchoicegl_pipeline_settingsschema_Dest_TxsdGlPipelineSettingsChoiceBlendFuncSequenceDest_                                                                                                    func(*XsdGoPkgHasElem_destsequenceblend_funcchoicegl_pipeline_settingsschema_Dest_TxsdGlPipelineSettingsChoiceBlendFuncSequenceDest_, bool) error
	XsdGoPkgHasElem_line_smooth_enablechoicegles_pipeline_settingsschema_LineSmoothEnable_TxsdGlesPipelineSettingsChoiceLineSmoothEnable_                                                                                             func(*XsdGoPkgHasElem_line_smooth_enablechoicegles_pipeline_settingsschema_LineSmoothEnable_TxsdGlesPipelineSettingsChoiceLineSmoothEnable_, bool) error
	TfxSurfaceInitPlanarCommon                                                                                                                                                                                                        func(*TfxSurfaceInitPlanarCommon, bool) error
	XsdGoPkgHasElem_equationsequenceplaneschema_Equation_Tfloat4_                                                                                                                                                                     func(*XsdGoPkgHasElem_equationsequenceplaneschema_Equation_Tfloat4_, bool) error
	XsdGoPkgHasElems_color_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorClear_TfxClearcolorCommon_                                                                                                               func(*XsdGoPkgHasElems_color_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_ColorClear_TfxClearcolorCommon_, bool) error
	XsdGoPkgHasElem_failsequencestencil_opchoicegles_pipeline_settingsschema_Fail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceFail_                                                                                                func(*XsdGoPkgHasElem_failsequencestencil_opchoicegles_pipeline_settingsschema_Fail_TxsdGlesPipelineSettingsChoiceStencilOpSequenceFail_, bool) error
	XsdGoPkgHasElem_radiussequencecapsuleschema_Radius_Tfloat2_                                                                                                                                                                       func(*XsdGoPkgHasElem_radiussequencecapsuleschema_Radius_Tfloat2_, bool) error
	TxsdRigidConstraint                                                                                                                                                                                                               func(*TxsdRigidConstraint, bool) error
	XsdGoPkgHasElem_fixed2choicecg_param_typeschema_Fixed2_TcgFixed2_                                                                                                                                                                 func(*XsdGoPkgHasElem_fixed2choicecg_param_typeschema_Fixed2_TcgFixed2_, bool) error
	XsdGoPkgHasElem_bool2x1choicecg_param_typeschema_Bool2X1_TcgBool2X1_                                                                                                                                                              func(*XsdGoPkgHasElem_bool2x1choicecg_param_typeschema_Bool2X1_TcgBool2X1_, bool) error
	XsdGoPkgHasElems_ForceField                                                                                                                                                                                                       func(*XsdGoPkgHasElems_ForceField, bool) error
	XsdGoPkgHasElem_fog_enablechoicegl_pipeline_settingsschema_FogEnable_TxsdGlPipelineSettingsChoiceFogEnable_                                                                                                                       func(*XsdGoPkgHasElem_fog_enablechoicegl_pipeline_settingsschema_FogEnable_TxsdGlPipelineSettingsChoiceFogEnable_, bool) error
	TglslSetparamSimple                                                                                                                                                                                                               func(*TglslSetparamSimple, bool) error
	XsdGoPkgHasElem_LibraryImages                                                                                                                                                                                                     func(*XsdGoPkgHasElem_LibraryImages, bool) error
	XsdGoPkgHasElem_BindMaterial                                                                                                                                                                                                      func(*XsdGoPkgHasElem_BindMaterial, bool) error
	XsdGoPkgHasElem_gravitysequencetechnique_commonsequencephysics_sceneschema_Gravity_TargetableFloat3_                                                                                                                              func(*XsdGoPkgHasElem_gravitysequencetechnique_commonsequencephysics_sceneschema_Gravity_TargetableFloat3_, bool) error
	TxsdGlesPipelineSettingsChoicePointSizeMin                                                                                                                                                                                        func(*TxsdGlesPipelineSettingsChoicePointSizeMin, bool) error
	XsdGoPkgHasElem_int2choicecg_param_typeschema_Int2_TcgInt2_                                                                                                                                                                       func(*XsdGoPkgHasElem_int2choicecg_param_typeschema_Int2_TcgInt2_, bool) error
	TxsdLibraryVisualScenes                                                                                                                                                                                                           func(*TxsdLibraryVisualScenes, bool) error
	XsdGoPkgHasElems_Light                                                                                                                                                                                                            func(*XsdGoPkgHasElems_Light, bool) error
	XsdGoPkgHasElem_polygon_offset_point_enablechoicegl_pipeline_settingsschema_PolygonOffsetPointEnable_TxsdGlPipelineSettingsChoicePolygonOffsetPointEnable_                                                                        func(*XsdGoPkgHasElem_polygon_offset_point_enablechoicegl_pipeline_settingsschema_PolygonOffsetPointEnable_TxsdGlPipelineSettingsChoicePolygonOffsetPointEnable_, bool) error
	XsdGoPkgHasElem_Linestrips                                                                                                                                                                                                        func(*XsdGoPkgHasElem_Linestrips, bool) error
	XsdGoPkgHasElem_RGBsequencegles_texcombiner_command_typeschema_Rgb_TglesTexcombinerCommandRGBType_                                                                                                                                func(*XsdGoPkgHasElem_RGBsequencegles_texcombiner_command_typeschema_Rgb_TglesTexcombinerCommandRGBType_, bool) error
	TxsdFloatArray                                                                                                                                                                                                                    func(*TxsdFloatArray, bool) error
	XsdGoPkgHasElem_fixed2x3choicecg_param_typeschema_Fixed2X3_TcgFixed2X3_                                                                                                                                                           func(*XsdGoPkgHasElem_fixed2x3choicecg_param_typeschema_Fixed2X3_TcgFixed2X3_, bool) error
	XsdGoPkgHasElem_LibraryPhysicsScenes                                                                                                                                                                                              func(*XsdGoPkgHasElem_LibraryPhysicsScenes, bool) error
	TxsdCommonColorOrTextureTypeChoiceColor                                                                                                                                                                                           func(*TxsdCommonColorOrTextureTypeChoiceColor, bool) error
	XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlesPipelineSettingsChoicePolygonOffsetFillEnable_                                                                       func(*XsdGoPkgHasElem_polygon_offset_fill_enablechoicegles_pipeline_settingsschema_PolygonOffsetFillEnable_TxsdGlesPipelineSettingsChoicePolygonOffsetFillEnable_, bool) error
	XsdGoPkgHasElem_texture_pipelinechoicegles_pipeline_settingsschema_TexturePipeline_TxsdGlesPipelineSettingsChoiceTexturePipeline_                                                                                                 func(*XsdGoPkgHasElem_texture_pipelinechoicegles_pipeline_settingsschema_TexturePipeline_TxsdGlesPipelineSettingsChoiceTexturePipeline_, bool) error
	TxsdGlesPipelineSettingsChoiceModelViewMatrix                                                                                                                                                                                     func(*TxsdGlesPipelineSettingsChoiceModelViewMatrix, bool) error
	XsdGoPkgHasElems_ProfileGlsl                                                                                                                                                                                                      func(*XsdGoPkgHasElems_ProfileGlsl, bool) error
	XsdGoPkgHasElems_Channel                                                                                                                                                                                                          func(*XsdGoPkgHasElems_Channel, bool) error
	XsdGoPkgHasElem_attachmentsequencerigid_constraintschema_Attachment_TxsdRigidConstraintSequenceAttachment_                                                                                                                        func(*XsdGoPkgHasElem_attachmentsequencerigid_constraintschema_Attachment_TxsdRigidConstraintSequenceAttachment_, bool) error
	XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_                                                                                                                                             func(*XsdGoPkgHasElems_annotatesequencefx_newparam_commonschema_Annotate_TfxAnnotateCommon_, bool) error
	XsdGoPkgHasElem_int2x3choicecg_param_typeschema_Int2X3_TcgInt2X3_                                                                                                                                                                 func(*XsdGoPkgHasElem_int2x3choicecg_param_typeschema_Int2X3_TcgInt2X3_, bool) error
	TxsdInstanceEffect                                                                                                                                                                                                                func(*TxsdInstanceEffect, bool) error
	XsdGoPkgHasElems_ProfileCommon                                                                                                                                                                                                    func(*XsdGoPkgHasElems_ProfileCommon, bool) error
	TxsdGlPipelineSettingsChoiceColorMaterial                                                                                                                                                                                         func(*TxsdGlPipelineSettingsChoiceColorMaterial, bool) error
	XsdGoPkgHasElem_pointchoicetechnique_commonsequencelightschema_Point_TxsdLightSequenceTechniqueCommonChoicePoint_                                                                                                                 func(*XsdGoPkgHasElem_pointchoicetechnique_commonsequencelightschema_Point_TxsdLightSequenceTechniqueCommonChoicePoint_, bool) error
	XsdGoPkgHasElem_float3x1choicefx_basic_type_commonschema_Float3X1_Tfloat3_                                                                                                                                                        func(*XsdGoPkgHasElem_float3x1choicefx_basic_type_commonschema_Float3X1_Tfloat3_, bool) error
	XsdGoPkgHasElem_wrap_tsequencegles_sampler_stateschema_WrapT_TglesSamplerWrap_Repeat                                                                                                                                              func(*XsdGoPkgHasElem_wrap_tsequencegles_sampler_stateschema_WrapT_TglesSamplerWrap_Repeat, bool) error
	XsdGoPkgHasElem_masssequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_                                                                                                                               func(*XsdGoPkgHasElem_masssequencetechnique_commonsequenceinstance_rigid_bodyschema_Mass_TargetableFloat_, bool) error
	TfxSamplerCUBECommon                                                                                                                                                                                                              func(*TfxSamplerCUBECommon, bool) error
	XsdGoPkgHasElem_depth_funcchoicegles_pipeline_settingsschema_DepthFunc_TxsdGlesPipelineSettingsChoiceDepthFunc_                                                                                                                   func(*XsdGoPkgHasElem_depth_funcchoicegles_pipeline_settingsschema_DepthFunc_TxsdGlesPipelineSettingsChoiceDepthFunc_, bool) error
	TxsdLibraryImages                                                                                                                                                                                                                 func(*TxsdLibraryImages, bool) error
	TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader                                                                                                                                                                    func(*TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShader, bool) error
	XsdGoPkgHasElem_Sphere                                                                                                                                                                                                            func(*XsdGoPkgHasElem_Sphere, bool) error
	XsdGoPkgHasElem_mipfiltersequencefx_sampler1D_commonschema_Mipfilter_TfxSamplerFilterCommon_None                                                                                                                                  func(*XsdGoPkgHasElem_mipfiltersequencefx_sampler1D_commonschema_Mipfilter_TfxSamplerFilterCommon_None, bool) error
	TxsdGlesPipelineSettingsChoiceLightSpotDirection                                                                                                                                                                                  func(*TxsdGlesPipelineSettingsChoiceLightSpotDirection, bool) error
	XsdGoPkgHasElem_Vertices                                                                                                                                                                                                          func(*XsdGoPkgHasElem_Vertices, bool) error
	TxsdEllipsoid                                                                                                                                                                                                                     func(*TxsdEllipsoid, bool) error
	XsdGoPkgHasElem_znearsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Znear_TargetableFloat_                                                                                                           func(*XsdGoPkgHasElem_znearsequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Znear_TargetableFloat_, bool) error
	TglesTexturePipeline                                                                                                                                                                                                              func(*TglesTexturePipeline, bool) error
	XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskinschema_Vcount_TListOfUInts_                                                                                                                                               func(*XsdGoPkgHasElem_vcountsequencevertex_weightssequenceskinschema_Vcount_TListOfUInts_, bool) error
	TglesTexcombinerCommandType                                                                                                                                                                                                       func(*TglesTexcombinerCommandType, bool) error
	TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring                                                                                                                                                                          func(*TxsdRigidConstraintSequenceTechniqueCommonSequenceSpring, bool) error
	XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Bind_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_                                               func(*XsdGoPkgHasElems_bindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Bind_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind_, bool) error
	TcgSurfaceType                                                                                                                                                                                                                    func(*TcgSurfaceType, bool) error
	TfxDepthtargetCommon                                                                                                                                                                                                              func(*TfxDepthtargetCommon, bool) error
	TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular                                                                                                                                                           func(*TxsdRigidConstraintSequenceTechniqueCommonSequenceSpringSequenceAngular, bool) error
	XsdGoPkgHasElem_init_volumechoicefx_surface_init_commonschema_InitVolume_TfxSurfaceInitVolumeCommon_                                                                                                                              func(*XsdGoPkgHasElem_init_volumechoicefx_surface_init_commonschema_InitVolume_TfxSurfaceInitVolumeCommon_, bool) error
	XsdGoPkgHasElem_color_logic_op_enablechoicegles_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlesPipelineSettingsChoiceColorLogicOpEnable_                                                                                      func(*XsdGoPkgHasElem_color_logic_op_enablechoicegles_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlesPipelineSettingsChoiceColorLogicOpEnable_, bool) error
	XsdGoPkgHasElem_fog_startchoicegl_pipeline_settingsschema_FogStart_TxsdGlPipelineSettingsChoiceFogStart_                                                                                                                          func(*XsdGoPkgHasElem_fog_startchoicegl_pipeline_settingsschema_FogStart_TxsdGlPipelineSettingsChoiceFogStart_, bool) error
	XsdGoPkgHasElems_Triangles                                                                                                                                                                                                        func(*XsdGoPkgHasElems_Triangles, bool) error
	TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits                                                                                                                                                                          func(*TxsdRigidConstraintSequenceTechniqueCommonSequenceLimits, bool) error
	TxsdCamera                                                                                                                                                                                                                        func(*TxsdCamera, bool) error
	XsdGoPkgHasElem_fog_colorchoicegles_pipeline_settingsschema_FogColor_TxsdGlesPipelineSettingsChoiceFogColor_                                                                                                                      func(*XsdGoPkgHasElem_fog_colorchoicegles_pipeline_settingsschema_FogColor_TxsdGlesPipelineSettingsChoiceFogColor_, bool) error
	XsdGoPkgHasElems_phchoicesequencepolygonsschema_Ph_TxsdPolygonsSequenceChoicePh_                                                                                                                                                  func(*XsdGoPkgHasElems_phchoicesequencepolygonsschema_Ph_TxsdPolygonsSequenceChoicePh_, bool) error
	XsdGoPkgHasElem_blend_enablechoicegles_pipeline_settingsschema_BlendEnable_TxsdGlesPipelineSettingsChoiceBlendEnable_                                                                                                             func(*XsdGoPkgHasElem_blend_enablechoicegles_pipeline_settingsschema_BlendEnable_TxsdGlesPipelineSettingsChoiceBlendEnable_, bool) error
	TfxCleardepthCommon                                                                                                                                                                                                               func(*TfxCleardepthCommon, bool) error
	TcgConnectParam                                                                                                                                                                                                                   func(*TcgConnectParam, bool) error
	XsdGoPkgHasElem_viewport_ratiochoicesequencefx_surface_commonschema_ViewportRatio_Tfloat2_11                                                                                                                                      func(*XsdGoPkgHasElem_viewport_ratiochoicesequencefx_surface_commonschema_ViewportRatio_Tfloat2_11, bool) error
	XsdGoPkgHasElems_inputsequencevertex_weightssequenceskinschema_Input_TInputLocalOffset_                                                                                                                                           func(*XsdGoPkgHasElems_inputsequencevertex_weightssequenceskinschema_Input_TInputLocalOffset_, bool) error
	XsdGoPkgHasElem_modifiedsequenceassetschema_Modified_XsdtDateTime_                                                                                                                                                                func(*XsdGoPkgHasElem_modifiedsequenceassetschema_Modified_XsdtDateTime_, bool) error
	XsdGoPkgHasElem_primarychoicefx_surface_init_volume_commonschema_Primary_TxsdFxSurfaceInitVolumeCommonChoicePrimary_                                                                                                              func(*XsdGoPkgHasElem_primarychoicefx_surface_init_volume_commonschema_Primary_TxsdFxSurfaceInitVolumeCommonChoicePrimary_, bool) error
	TxsdLibraryPhysicsScenes                                                                                                                                                                                                          func(*TxsdLibraryPhysicsScenes, bool) error
	XsdGoPkgHasElem_xfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Xfov_TargetableFloat_                                                                                               func(*XsdGoPkgHasElem_xfovsequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Xfov_TargetableFloat_, bool) error
	XsdGoPkgHasElem_sampler1Dchoicefx_basic_type_commonschema_Sampler1D_TfxSampler1DCommon_                                                                                                                                           func(*XsdGoPkgHasElem_sampler1Dchoicefx_basic_type_commonschema_Sampler1D_TfxSampler1DCommon_, bool) error
	XsdGoPkgHasElem_int2choicefx_basic_type_commonschema_Int2_Tint2_                                                                                                                                                                  func(*XsdGoPkgHasElem_int2choicefx_basic_type_commonschema_Int2_Tint2_, bool) error
	XsdGoPkgHasElem_failsequencestencil_op_separatechoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFail_                                                                                   func(*XsdGoPkgHasElem_failsequencestencil_op_separatechoicegl_pipeline_settingsschema_Fail_TxsdGlPipelineSettingsChoiceStencilOpSeparateSequenceFail_, bool) error
	TxsdLibraryMaterials                                                                                                                                                                                                              func(*TxsdLibraryMaterials, bool) error
	XsdGoPkgHasElem_blend_funcchoicegles_pipeline_settingsschema_BlendFunc_TxsdGlesPipelineSettingsChoiceBlendFunc_                                                                                                                   func(*XsdGoPkgHasElem_blend_funcchoicegles_pipeline_settingsschema_BlendFunc_TxsdGlesPipelineSettingsChoiceBlendFunc_, bool) error
	XsdGoPkgHasElem_Translate                                                                                                                                                                                                         func(*XsdGoPkgHasElem_Translate, bool) error
	XsdGoPkgHasElem_model_view_matrixchoicegles_pipeline_settingsschema_ModelViewMatrix_TxsdGlesPipelineSettingsChoiceModelViewMatrix_                                                                                                func(*XsdGoPkgHasElem_model_view_matrixchoicegles_pipeline_settingsschema_ModelViewMatrix_TxsdGlesPipelineSettingsChoiceModelViewMatrix_, bool) error
	XsdGoPkgHasElem_half1x4choicecg_param_typeschema_Half1X4_TcgHalf1X4_                                                                                                                                                              func(*XsdGoPkgHasElem_half1x4choicecg_param_typeschema_Half1X4_TcgHalf1X4_, bool) error
	TxsdCameraSequenceOptics                                                                                                                                                                                                          func(*TxsdCameraSequenceOptics, bool) error
	TglslSetarrayType                                                                                                                                                                                                                 func(*TglslSetarrayType, bool) error
	XsdGoPkgHasElem_cull_face_enablechoicegles_pipeline_settingsschema_CullFaceEnable_TxsdGlesPipelineSettingsChoiceCullFaceEnable_                                                                                                   func(*XsdGoPkgHasElem_cull_face_enablechoicegles_pipeline_settingsschema_CullFaceEnable_TxsdGlesPipelineSettingsChoiceCullFaceEnable_, bool) error
	TxsdGlesPipelineSettingsChoiceLightSpotCutoff                                                                                                                                                                                     func(*TxsdGlesPipelineSettingsChoiceLightSpotCutoff, bool) error
	XsdGoPkgHasElem_targetssequencemorphschema_Targets_TxsdMorphSequenceTargets_                                                                                                                                                      func(*XsdGoPkgHasElem_targetssequencemorphschema_Targets_TxsdMorphSequenceTargets_, bool) error
	XsdGoPkgHasElem_fixed1x2choicecg_param_typeschema_Fixed1X2_TcgFixed1X2_                                                                                                                                                           func(*XsdGoPkgHasElem_fixed1x2choicecg_param_typeschema_Fixed1X2_TcgFixed1X2_, bool) error
	XsdGoPkgHasElem_textureRECTchoicegl_pipeline_settingsschema_TextureRECT_TxsdGlPipelineSettingsChoiceTextureRECT_                                                                                                                  func(*XsdGoPkgHasElem_textureRECTchoicegl_pipeline_settingsschema_TextureRECT_TxsdGlPipelineSettingsChoiceTextureRECT_, bool) error
	XsdGoPkgHasElem_point_size_maxchoicegl_pipeline_settingsschema_PointSizeMax_TxsdGlPipelineSettingsChoicePointSizeMax_                                                                                                             func(*XsdGoPkgHasElem_point_size_maxchoicegl_pipeline_settingsschema_PointSizeMax_TxsdGlPipelineSettingsChoicePointSizeMax_, bool) error
	XsdGoPkgHasElems_contributorsequenceassetschema_Contributor_TxsdAssetSequenceContributor_                                                                                                                                         func(*XsdGoPkgHasElems_contributorsequenceassetschema_Contributor_TxsdAssetSequenceContributor_, bool) error
	TxsdInstanceController                                                                                                                                                                                                            func(*TxsdInstanceController, bool) error
	XsdGoPkgHasElem_line_widthchoicegles_pipeline_settingsschema_LineWidth_TxsdGlesPipelineSettingsChoiceLineWidth_                                                                                                                   func(*XsdGoPkgHasElem_line_widthchoicegles_pipeline_settingsschema_LineWidth_TxsdGlesPipelineSettingsChoiceLineWidth_, bool) error
	TxsdGlesPipelineSettingsChoiceLightPosition                                                                                                                                                                                       func(*TxsdGlesPipelineSettingsChoiceLightPosition, bool) error
	XsdGoPkgHasElem_cull_facechoicegl_pipeline_settingsschema_CullFace_TxsdGlPipelineSettingsChoiceCullFace_                                                                                                                          func(*XsdGoPkgHasElem_cull_facechoicegl_pipeline_settingsschema_CullFace_TxsdGlPipelineSettingsChoiceCullFace_, bool) error
	XsdGoPkgHasElems_Sampler                                                                                                                                                                                                          func(*XsdGoPkgHasElems_Sampler, bool) error
	XsdGoPkgHasElem_clear_stencilchoicegl_pipeline_settingsschema_ClearStencil_TxsdGlPipelineSettingsChoiceClearStencil_                                                                                                              func(*XsdGoPkgHasElem_clear_stencilchoicegl_pipeline_settingsschema_ClearStencil_TxsdGlPipelineSettingsChoiceClearStencil_, bool) error
	XsdGoPkgHasElem_half1choicecg_param_typeschema_Half1_TcgHalf1_                                                                                                                                                                    func(*XsdGoPkgHasElem_half1choicecg_param_typeschema_Half1_TcgHalf1_, bool) error
	TxsdController                                                                                                                                                                                                                    func(*TxsdController, bool) error
	XsdGoPkgHasElem_blend_colorchoicegl_pipeline_settingsschema_BlendColor_TxsdGlPipelineSettingsChoiceBlendColor_                                                                                                                    func(*XsdGoPkgHasElem_blend_colorchoicegl_pipeline_settingsschema_BlendColor_TxsdGlPipelineSettingsChoiceBlendColor_, bool) error
	XsdGoPkgHasElems_PhysicsMaterial                                                                                                                                                                                                  func(*XsdGoPkgHasElems_PhysicsMaterial, bool) error
	TfxSampler2DCommon                                                                                                                                                                                                                func(*TfxSampler2DCommon, bool) error
	XsdGoPkgHasElem_up_axissequenceassetschema_UpAxis_TUpAxisType_YUp                                                                                                                                                                 func(*XsdGoPkgHasElem_up_axissequenceassetschema_UpAxis_TUpAxisType_YUp, bool) error
	XsdGoPkgHasElem_facesequencecolor_materialchoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceColorMaterialSequenceFace_                                                                                            func(*XsdGoPkgHasElem_facesequencecolor_materialchoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceColorMaterialSequenceFace_, bool) error
	XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceFace_                                                                               func(*XsdGoPkgHasElem_facesequencestencil_mask_separatechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoiceStencilMaskSeparateSequenceFace_, bool) error
	XsdGoPkgHasElem_InstancePhysicsMaterial                                                                                                                                                                                           func(*XsdGoPkgHasElem_InstancePhysicsMaterial, bool) error
	XsdGoPkgHasElem_copyrightsequencecontributorsequenceassetschema_Copyright_XsdtString_                                                                                                                                             func(*XsdGoPkgHasElem_copyrightsequencecontributorsequenceassetschema_Copyright_XsdtString_, bool) error
	XsdGoPkgHasElem_constantchoicesequencetechniquesequenceprofile_COMMONschema_Constant_TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant_                                                                                    func(*XsdGoPkgHasElem_constantchoicesequencetechniquesequenceprofile_COMMONschema_Constant_TxsdProfileCommonSequenceTechniqueSequenceChoiceConstant_, bool) error
	XsdGoPkgHasElem_clear_colorchoicegles_pipeline_settingsschema_ClearColor_TxsdGlesPipelineSettingsChoiceClearColor_                                                                                                                func(*XsdGoPkgHasElem_clear_colorchoicegles_pipeline_settingsschema_ClearColor_TxsdGlesPipelineSettingsChoiceClearColor_, bool) error
	XsdGoPkgHasElem_arraychoicesequenceglsl_newparamschema_Array_TglslNewarrayType_                                                                                                                                                   func(*XsdGoPkgHasElem_arraychoicesequenceglsl_newparamschema_Array_TglslNewarrayType_, bool) error
	TxsdGlPipelineSettingsChoicePolygonMode                                                                                                                                                                                           func(*TxsdGlPipelineSettingsChoicePolygonMode, bool) error
	XsdGoPkgHasElem_float4x1choicefx_basic_type_commonschema_Float4X1_Tfloat4_                                                                                                                                                        func(*XsdGoPkgHasElem_float4x1choicefx_basic_type_commonschema_Float4X1_Tfloat4_, bool) error
	TxsdPhysicsMaterialSequenceTechniqueCommon                                                                                                                                                                                        func(*TxsdPhysicsMaterialSequenceTechniqueCommon, bool) error
	XsdGoPkgHasElem_stencil_maskchoicegles_pipeline_settingsschema_StencilMask_TxsdGlesPipelineSettingsChoiceStencilMask_                                                                                                             func(*XsdGoPkgHasElem_stencil_maskchoicegles_pipeline_settingsschema_StencilMask_TxsdGlesPipelineSettingsChoiceStencilMask_, bool) error
	XsdGoPkgHasElems_BoolArray                                                                                                                                                                                                        func(*XsdGoPkgHasElems_BoolArray, bool) error
	XsdGoPkgHasElem_point_fade_threshold_sizechoicegl_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlPipelineSettingsChoicePointFadeThresholdSize_                                                                              func(*XsdGoPkgHasElem_point_fade_threshold_sizechoicegl_pipeline_settingsschema_PointFadeThresholdSize_TxsdGlPipelineSettingsChoicePointFadeThresholdSize_, bool) error
	TxsdLightSequenceTechniqueCommonChoiceSpot                                                                                                                                                                                        func(*TxsdLightSequenceTechniqueCommonChoiceSpot, bool) error
	XsdGoPkgHasElem_line_widthchoicegl_pipeline_settingsschema_LineWidth_TxsdGlPipelineSettingsChoiceLineWidth_                                                                                                                       func(*XsdGoPkgHasElem_line_widthchoicegl_pipeline_settingsschema_LineWidth_TxsdGlPipelineSettingsChoiceLineWidth_, bool) error
	XsdGoPkgHasElem_Image                                                                                                                                                                                                             func(*XsdGoPkgHasElem_Image, bool) error
	TxsdGlesPipelineSettingsChoiceStencilOp                                                                                                                                                                                           func(*TxsdGlesPipelineSettingsChoiceStencilOp, bool) error
	XsdGoPkgHasElem_bool3x4choicecg_param_typeschema_Bool3X4_TcgBool3X4_                                                                                                                                                              func(*XsdGoPkgHasElem_bool3x4choicecg_param_typeschema_Bool3X4_TcgBool3X4_, bool) error
	TxsdGlesPipelineSettingsChoiceCullFace                                                                                                                                                                                            func(*TxsdGlesPipelineSettingsChoiceCullFace, bool) error
	XsdGoPkgHasElem_fog_coord_srcchoicegl_pipeline_settingsschema_FogCoordSrc_TxsdGlPipelineSettingsChoiceFogCoordSrc_                                                                                                                func(*XsdGoPkgHasElem_fog_coord_srcchoicegl_pipeline_settingsschema_FogCoordSrc_TxsdGlPipelineSettingsChoiceFogCoordSrc_, bool) error
	XsdGoPkgHasElem_bool1x4choicecg_param_typeschema_Bool1X4_TcgBool1X4_                                                                                                                                                              func(*XsdGoPkgHasElem_bool1x4choicecg_param_typeschema_Bool1X4_TcgBool1X4_, bool) error
	XsdGoPkgHasElem_Trifans                                                                                                                                                                                                           func(*XsdGoPkgHasElem_Trifans, bool) error
	XsdGoPkgHasElem_constantsequencegles_texenv_command_typeschema_Constant_TglesTextureConstantType_                                                                                                                                 func(*XsdGoPkgHasElem_constantsequencegles_texenv_command_typeschema_Constant_TglesTextureConstantType_, bool) error
	TxsdLibraryLights                                                                                                                                                                                                                 func(*TxsdLibraryLights, bool) error
	XsdGoPkgHasElem_float3x4choicecg_param_typeschema_Float3X4_TcgFloat3X4_                                                                                                                                                           func(*XsdGoPkgHasElem_float3x4choicecg_param_typeschema_Float3X4_TcgFloat3X4_, bool) error
	XsdGoPkgHasElem_xmagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Xmag_TargetableFloat_                                                                                              func(*XsdGoPkgHasElem_xmagsequencechoicesequenceorthographicchoicetechnique_commonsequenceopticssequencecameraschema_Xmag_TargetableFloat_, bool) error
	XsdGoPkgHasElem_samplerRECTchoicecg_param_typeschema_SamplerRECT_TcgSamplerRECT_                                                                                                                                                  func(*XsdGoPkgHasElem_samplerRECTchoicecg_param_typeschema_SamplerRECT_TcgSamplerRECT_, bool) error
	TxsdGlPipelineSettingsChoiceTexture1D                                                                                                                                                                                             func(*TxsdGlPipelineSettingsChoiceTexture1D, bool) error
	TglslSetparam                                                                                                                                                                                                                     func(*TglslSetparam, bool) error
	XsdGoPkgHasElems_shapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Shape_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape_                                                                                  func(*XsdGoPkgHasElems_shapesequencetechnique_commonsequenceinstance_rigid_bodyschema_Shape_TxsdInstanceRigidBodySequenceTechniqueCommonSequenceShape_, bool) error
	TxsdPhysicsSceneSequenceTechniqueCommon                                                                                                                                                                                           func(*TxsdPhysicsSceneSequenceTechniqueCommon, bool) error
	XsdGoPkgHasElem_Skew                                                                                                                                                                                                              func(*XsdGoPkgHasElem_Skew, bool) error
	XsdGoPkgHasElem_int4x4choicecg_param_typeschema_Int4X4_TcgInt4X4_                                                                                                                                                                 func(*XsdGoPkgHasElem_int4x4choicecg_param_typeschema_Int4X4_TcgInt4X4_, bool) error
	XsdGoPkgHasElem_bool4x2choicecg_param_typeschema_Bool4X2_TcgBool4X2_                                                                                                                                                              func(*XsdGoPkgHasElem_bool4x2choicecg_param_typeschema_Bool4X2_TcgBool4X2_, bool) error
	XsdGoPkgHasElem_depth_rangechoicegles_pipeline_settingsschema_DepthRange_TxsdGlesPipelineSettingsChoiceDepthRange_                                                                                                                func(*XsdGoPkgHasElem_depth_rangechoicegles_pipeline_settingsschema_DepthRange_TxsdGlesPipelineSettingsChoiceDepthRange_, bool) error
	XsdGoPkgHasElem_allchoicefx_surface_init_cube_commonschema_All_TxsdFxSurfaceInitCubeCommonChoiceAll_                                                                                                                              func(*XsdGoPkgHasElem_allchoicefx_surface_init_cube_commonschema_All_TxsdFxSurfaceInitCubeCommonChoiceAll_, bool) error
	XsdGoPkgHasElem_LibraryCameras                                                                                                                                                                                                    func(*XsdGoPkgHasElem_LibraryCameras, bool) error
	XsdGoPkgHasElem_authorsequencecontributorsequenceassetschema_Author_XsdtString_                                                                                                                                                   func(*XsdGoPkgHasElem_authorsequencecontributorsequenceassetschema_Author_XsdtString_, bool) error
	TxsdRigidBodySequenceTechniqueCommon                                                                                                                                                                                              func(*TxsdRigidBodySequenceTechniqueCommon, bool) error
	XsdGoPkgHasElem_front_facechoicegles_pipeline_settingsschema_FrontFace_TxsdGlesPipelineSettingsChoiceFrontFace_                                                                                                                   func(*XsdGoPkgHasElem_front_facechoicegles_pipeline_settingsschema_FrontFace_TxsdGlesPipelineSettingsChoiceFrontFace_, bool) error
	TxsdPolygonsSequenceChoicePh                                                                                                                                                                                                      func(*TxsdPolygonsSequenceChoicePh, bool) error
	XsdGoPkgHasElem_valuechoicetextureRECTchoicegl_pipeline_settingsschema_Value_TglSamplerRECT_                                                                                                                                      func(*XsdGoPkgHasElem_valuechoicetextureRECTchoicegl_pipeline_settingsschema_Value_TglSamplerRECT_, bool) error
	XsdGoPkgHasElems_LibraryLights                                                                                                                                                                                                    func(*XsdGoPkgHasElems_LibraryLights, bool) error
	XsdGoPkgHasElem_Light                                                                                                                                                                                                             func(*XsdGoPkgHasElem_Light, bool) error
	TxsdGlesPipelineSettingsChoiceClipPlaneEnable                                                                                                                                                                                     func(*TxsdGlesPipelineSettingsChoiceClipPlaneEnable, bool) error
	TInputLocalOffset                                                                                                                                                                                                                 func(*TInputLocalOffset, bool) error
	XsdGoPkgHasElem_light_linear_attenuationchoicegl_pipeline_settingsschema_LightLinearAttenuation_TxsdGlPipelineSettingsChoiceLightLinearAttenuation_                                                                               func(*XsdGoPkgHasElem_light_linear_attenuationchoicegl_pipeline_settingsschema_LightLinearAttenuation_TxsdGlPipelineSettingsChoiceLightLinearAttenuation_, bool) error
	TxsdTaperedCapsule                                                                                                                                                                                                                func(*TxsdTaperedCapsule, bool) error
	TcgSampler3D                                                                                                                                                                                                                      func(*TcgSampler3D, bool) error
	XsdGoPkgHasElem_texcoordsequencegles_texture_unitschema_Texcoord_TxsdGlesTextureUnitSequenceTexcoord_                                                                                                                             func(*XsdGoPkgHasElem_texcoordsequencegles_texture_unitschema_Texcoord_TxsdGlesTextureUnitSequenceTexcoord_, bool) error
	XsdGoPkgHasElem_Ellipsoid                                                                                                                                                                                                         func(*XsdGoPkgHasElem_Ellipsoid, bool) error
	XsdGoPkgHasElems_InstanceEffect                                                                                                                                                                                                   func(*XsdGoPkgHasElems_InstanceEffect, bool) error
	TxsdGlPipelineSettingsChoiceStencilFunc                                                                                                                                                                                           func(*TxsdGlPipelineSettingsChoiceStencilFunc, bool) error
	XsdGoPkgHasElem_float1x3choicefx_basic_type_commonschema_Float1X3_Tfloat3_                                                                                                                                                        func(*XsdGoPkgHasElem_float1x3choicefx_basic_type_commonschema_Float1X3_Tfloat3_, bool) error
	XsdGoPkgHasElem_enumchoiceglsl_param_typeschema_Enum_TglEnumeration_                                                                                                                                                              func(*XsdGoPkgHasElem_enumchoiceglsl_param_typeschema_Enum_TglEnumeration_, bool) error
	XsdGoPkgHasElem_texture1Dchoicegl_pipeline_settingsschema_Texture1D_TxsdGlPipelineSettingsChoiceTexture1D_                                                                                                                        func(*XsdGoPkgHasElem_texture1Dchoicegl_pipeline_settingsschema_Texture1D_TxsdGlPipelineSettingsChoiceTexture1D_, bool) error
	XsdGoPkgHasElems_LibraryNodes                                                                                                                                                                                                     func(*XsdGoPkgHasElems_LibraryNodes, bool) error
	XsdGoPkgHasElems_Image                                                                                                                                                                                                            func(*XsdGoPkgHasElems_Image, bool) error
	XsdGoPkgHasElems_ordersequenceprimarychoicefx_surface_init_cube_commonschema_Order_TfxSurfaceFaceEnum_                                                                                                                            func(*XsdGoPkgHasElems_ordersequenceprimarychoicefx_surface_init_cube_commonschema_Order_TfxSurfaceFaceEnum_, bool) error
	XsdGoPkgHasElem_int3x2choicecg_param_typeschema_Int3X2_TcgInt3X2_                                                                                                                                                                 func(*XsdGoPkgHasElem_int3x2choicecg_param_typeschema_Int3X2_TcgInt3X2_, bool) error
	TxsdLibraryAnimationClips                                                                                                                                                                                                         func(*TxsdLibraryAnimationClips, bool) error
	XsdGoPkgHasElems_LibraryPhysicsMaterials                                                                                                                                                                                          func(*XsdGoPkgHasElems_LibraryPhysicsMaterials, bool) error
	XsdGoPkgHasElem_LibraryAnimationClips                                                                                                                                                                                             func(*XsdGoPkgHasElem_LibraryAnimationClips, bool) error
	XsdGoPkgHasElem_enabledsequencetechnique_commonsequencerigid_constraintschema_Enabled_TxsdRigidConstraintSequenceTechniqueCommonSequenceEnabled_True                                                                              func(*XsdGoPkgHasElem_enabledsequencetechnique_commonsequencerigid_constraintschema_Enabled_TxsdRigidConstraintSequenceTechniqueCommonSequenceEnabled_True, bool) error
	XsdGoPkgHasElem_Accessor                                                                                                                                                                                                          func(*XsdGoPkgHasElem_Accessor, bool) error
	TxsdProfileGlsl                                                                                                                                                                                                                   func(*TxsdProfileGlsl, bool) error
	TxsdGlPipelineSettingsChoiceTextureDEPTH                                                                                                                                                                                          func(*TxsdGlPipelineSettingsChoiceTextureDEPTH, bool) error
	XsdGoPkgHasElem_material_emissionchoicegl_pipeline_settingsschema_MaterialEmission_TxsdGlPipelineSettingsChoiceMaterialEmission_                                                                                                  func(*XsdGoPkgHasElem_material_emissionchoicegl_pipeline_settingsschema_MaterialEmission_TxsdGlPipelineSettingsChoiceMaterialEmission_, bool) error
	XsdGoPkgHasElem_logic_op_enablechoicegl_pipeline_settingsschema_LogicOpEnable_TxsdGlPipelineSettingsChoiceLogicOpEnable_                                                                                                          func(*XsdGoPkgHasElem_logic_op_enablechoicegl_pipeline_settingsschema_LogicOpEnable_TxsdGlPipelineSettingsChoiceLogicOpEnable_, bool) error
	XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_                                                                          func(*XsdGoPkgHasElem_aspect_ratiochoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_AspectRatio_TargetableFloat_, bool) error
	TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc                                                                                                                                                                                func(*TxsdGlesPipelineSettingsChoiceBlendFuncSequenceSrc, bool) error
	XsdGoPkgHasElem_color_logic_op_enablechoicegl_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlPipelineSettingsChoiceColorLogicOpEnable_                                                                                          func(*XsdGoPkgHasElem_color_logic_op_enablechoicegl_pipeline_settingsschema_ColorLogicOpEnable_TxsdGlPipelineSettingsChoiceColorLogicOpEnable_, bool) error
	XsdGoPkgHasElem_funcsequencealpha_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceFunc_                                                                                                    func(*XsdGoPkgHasElem_funcsequencealpha_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceAlphaFuncSequenceFunc_, bool) error
	XsdGoPkgHasElem_bool1x2choicecg_param_typeschema_Bool1X2_TcgBool1X2_                                                                                                                                                              func(*XsdGoPkgHasElem_bool1x2choicecg_param_typeschema_Bool1X2_TcgBool1X2_, bool) error
	XsdGoPkgHasElem_light_model_ambientchoicegl_pipeline_settingsschema_LightModelAmbient_TxsdGlPipelineSettingsChoiceLightModelAmbient_                                                                                              func(*XsdGoPkgHasElem_light_model_ambientchoicegl_pipeline_settingsschema_LightModelAmbient_TxsdGlPipelineSettingsChoiceLightModelAmbient_, bool) error
	XsdGoPkgHasElem_depth_maskchoicegl_pipeline_settingsschema_DepthMask_TxsdGlPipelineSettingsChoiceDepthMask_                                                                                                                       func(*XsdGoPkgHasElem_depth_maskchoicegl_pipeline_settingsschema_DepthMask_TxsdGlPipelineSettingsChoiceDepthMask_, bool) error
	XsdGoPkgHasElem_samplerCUBEchoiceglsl_param_typeschema_SamplerCUBE_TglSamplerCUBE_                                                                                                                                                func(*XsdGoPkgHasElem_samplerCUBEchoiceglsl_param_typeschema_SamplerCUBE_TglSamplerCUBE_, bool) error
	XsdGoPkgHasElems_Polylist                                                                                                                                                                                                         func(*XsdGoPkgHasElems_Polylist, bool) error
	XsdGoPkgHasElems_instance_physics_scenesequencescenesequenceCOLLADAschema_InstancePhysicsScene_TInstanceWithExtra_                                                                                                                func(*XsdGoPkgHasElems_instance_physics_scenesequencescenesequenceCOLLADAschema_InstancePhysicsScene_TInstanceWithExtra_, bool) error
	TxsdGlPipelineSettingsChoiceTexture2DEnable                                                                                                                                                                                       func(*TxsdGlPipelineSettingsChoiceTexture2DEnable, bool) error
	XsdGoPkgHasElem_sampler1Dchoiceglsl_param_typeschema_Sampler1D_TglSampler1D_                                                                                                                                                      func(*XsdGoPkgHasElem_sampler1Dchoiceglsl_param_typeschema_Sampler1D_TglSampler1D_, bool) error
	XsdGoPkgHasElem_clear_depthchoicegl_pipeline_settingsschema_ClearDepth_TxsdGlPipelineSettingsChoiceClearDepth_                                                                                                                    func(*XsdGoPkgHasElem_clear_depthchoicegl_pipeline_settingsschema_ClearDepth_TxsdGlPipelineSettingsChoiceClearDepth_, bool) error
	XsdGoPkgHasElems_Lines                                                                                                                                                                                                            func(*XsdGoPkgHasElems_Lines, bool) error
	XsdGoPkgHasElem_light_model_two_side_enablechoicegles_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlesPipelineSettingsChoiceLightModelTwoSideEnable_                                                                      func(*XsdGoPkgHasElem_light_model_two_side_enablechoicegles_pipeline_settingsschema_LightModelTwoSideEnable_TxsdGlesPipelineSettingsChoiceLightModelTwoSideEnable_, bool) error
	TxsdInstancePhysicsModel                                                                                                                                                                                                          func(*TxsdInstancePhysicsModel, bool) error
	XsdGoPkgHasElem_float1x1choicefx_basic_type_commonschema_Float1X1_Tfloat_                                                                                                                                                         func(*XsdGoPkgHasElem_float1x1choicefx_basic_type_commonschema_Float1X1_Tfloat_, bool) error
	XsdGoPkgHasElems_Capsule                                                                                                                                                                                                          func(*XsdGoPkgHasElems_Capsule, bool) error
	TfxIncludeCommon                                                                                                                                                                                                                  func(*TfxIncludeCommon, bool) error
	TxsdPlane                                                                                                                                                                                                                         func(*TxsdPlane, bool) error
	XsdGoPkgHasElem_scissorchoicegles_pipeline_settingsschema_Scissor_TxsdGlesPipelineSettingsChoiceScissor_                                                                                                                          func(*XsdGoPkgHasElem_scissorchoicegles_pipeline_settingsschema_Scissor_TxsdGlesPipelineSettingsChoiceScissor_, bool) error
	XsdGoPkgHasElem_color_material_enablechoicegles_pipeline_settingsschema_ColorMaterialEnable_TxsdGlesPipelineSettingsChoiceColorMaterialEnable_                                                                                    func(*XsdGoPkgHasElem_color_material_enablechoicegles_pipeline_settingsschema_ColorMaterialEnable_TxsdGlesPipelineSettingsChoiceColorMaterialEnable_, bool) error
	XsdGoPkgHasElems_InstanceGeometry                                                                                                                                                                                                 func(*XsdGoPkgHasElems_InstanceGeometry, bool) error
	XsdGoPkgHasElem_texturechoicecommon_color_or_texture_typeschema_Texture_TxsdCommonColorOrTextureTypeChoiceTexture_                                                                                                                func(*XsdGoPkgHasElem_texturechoicecommon_color_or_texture_typeschema_Texture_TxsdCommonColorOrTextureTypeChoiceTexture_, bool) error
	XsdGoPkgHasElem_RigidConstraint                                                                                                                                                                                                   func(*XsdGoPkgHasElem_RigidConstraint, bool) error
	XsdGoPkgHasElem_float2x4choicefx_basic_type_commonschema_Float2X4_Tfloat2X4_                                                                                                                                                      func(*XsdGoPkgHasElem_float2x4choicefx_basic_type_commonschema_Float2X4_Tfloat2X4_, bool) error
	XsdGoPkgHasElem_valuechoicetextureDEPTHchoicegl_pipeline_settingsschema_Value_TglSamplerDEPTH_                                                                                                                                    func(*XsdGoPkgHasElem_valuechoicetextureDEPTHchoicegl_pipeline_settingsschema_Value_TglSamplerDEPTH_, bool) error
	TcgSetparamSimple                                                                                                                                                                                                                 func(*TcgSetparamSimple, bool) error
	XsdGoPkgHasElem_depth_targetsequencepasssequencetechniquesequenceprofile_GLESschema_DepthTarget_TglesRendertargetCommon_                                                                                                          func(*XsdGoPkgHasElem_depth_targetsequencepasssequencetechniquesequenceprofile_GLESschema_DepthTarget_TglesRendertargetCommon_, bool) error
	TxsdGlesPipelineSettingsChoiceStencilMask                                                                                                                                                                                         func(*TxsdGlesPipelineSettingsChoiceStencilMask, bool) error
	XsdGoPkgHasElem_sampler3Dchoicecg_param_typeschema_Sampler3D_TcgSampler3D_                                                                                                                                                        func(*XsdGoPkgHasElem_sampler3Dchoicecg_param_typeschema_Sampler3D_TcgSampler3D_, bool) error
	XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcRgb_                                                                            func(*XsdGoPkgHasElem_src_rgbsequenceblend_func_separatechoicegl_pipeline_settingsschema_SrcRgb_TxsdGlPipelineSettingsChoiceBlendFuncSeparateSequenceSrcRgb_, bool) error
	XsdGoPkgHasElems_newparamsequenceeffectschema_Newparam_TfxNewparamCommon_                                                                                                                                                         func(*XsdGoPkgHasElems_newparamsequenceeffectschema_Newparam_TfxNewparamCommon_, bool) error
	XsdGoPkgHasElem_facesequencepolygon_modechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoicePolygonModeSequenceFace_                                                                                                func(*XsdGoPkgHasElem_facesequencepolygon_modechoicegl_pipeline_settingsschema_Face_TxsdGlPipelineSettingsChoicePolygonModeSequenceFace_, bool) error
	XsdGoPkgHasElem_modifiersequencefx_newparam_commonschema_Modifier_TfxModifierEnumCommon_                                                                                                                                          func(*XsdGoPkgHasElem_modifiersequencefx_newparam_commonschema_Modifier_TfxModifierEnumCommon_, bool) error
	XsdGoPkgHasElem_ambientchoicetechnique_commonsequencelightschema_Ambient_TxsdLightSequenceTechniqueCommonChoiceAmbient_                                                                                                           func(*XsdGoPkgHasElem_ambientchoicetechnique_commonsequencelightschema_Ambient_TxsdLightSequenceTechniqueCommonChoiceAmbient_, bool) error
	XsdGoPkgHasElem_transparencysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_                                                                                                func(*XsdGoPkgHasElem_transparencysequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Transparency_TcommonFloatOrParamType_, bool) error
	XsdGoPkgHasElem_fog_modechoicegles_pipeline_settingsschema_FogMode_TxsdGlesPipelineSettingsChoiceFogMode_                                                                                                                         func(*XsdGoPkgHasElem_fog_modechoicegles_pipeline_settingsschema_FogMode_TxsdGlesPipelineSettingsChoiceFogMode_, bool) error
	TxsdInstanceRigidBody                                                                                                                                                                                                             func(*TxsdInstanceRigidBody, bool) error
	XsdGoPkgHasElem_mass_framesequencetechnique_commonsequencerigid_bodyschema_MassFrame_TxsdRigidBodySequenceTechniqueCommonSequenceMassFrame_                                                                                       func(*XsdGoPkgHasElem_mass_framesequencetechnique_commonsequencerigid_bodyschema_MassFrame_TxsdRigidBodySequenceTechniqueCommonSequenceMassFrame_, bool) error
	TxsdGlPipelineSettingsChoiceStencilOpSeparate                                                                                                                                                                                     func(*TxsdGlPipelineSettingsChoiceStencilOpSeparate, bool) error
	XsdGoPkgHasElem_textureDEPTHchoicegl_pipeline_settingsschema_TextureDEPTH_TxsdGlPipelineSettingsChoiceTextureDEPTH_                                                                                                               func(*XsdGoPkgHasElem_textureDEPTHchoicegl_pipeline_settingsschema_TextureDEPTH_TxsdGlPipelineSettingsChoiceTextureDEPTH_, bool) error
	TxsdLightSequenceTechniqueCommonChoiceAmbient                                                                                                                                                                                     func(*TxsdLightSequenceTechniqueCommonChoiceAmbient, bool) error
	XsdGoPkgHasElem_masksequencestencil_func_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceMask_                                                                               func(*XsdGoPkgHasElem_masksequencestencil_func_separatechoicegl_pipeline_settingsschema_Mask_TxsdGlPipelineSettingsChoiceStencilFuncSeparateSequenceMask_, bool) error
	XsdGoPkgHasElem_point_sizechoicegl_pipeline_settingsschema_PointSize_TxsdGlPipelineSettingsChoicePointSize_                                                                                                                       func(*XsdGoPkgHasElem_point_sizechoicegl_pipeline_settingsschema_PointSize_TxsdGlPipelineSettingsChoicePointSize_, bool) error
	TxsdForceField                                                                                                                                                                                                                    func(*TxsdForceField, bool) error
	TxsdLightSequenceTechniqueCommonChoicePoint                                                                                                                                                                                       func(*TxsdLightSequenceTechniqueCommonChoicePoint, bool) error
	XsdGoPkgHasElem_Spline                                                                                                                                                                                                            func(*XsdGoPkgHasElem_Spline, bool) error
	XsdGoPkgHasElem_depth_test_enablechoicegl_pipeline_settingsschema_DepthTestEnable_TxsdGlPipelineSettingsChoiceDepthTestEnable_                                                                                                    func(*XsdGoPkgHasElem_depth_test_enablechoicegl_pipeline_settingsschema_DepthTestEnable_TxsdGlPipelineSettingsChoiceDepthTestEnable_, bool) error
	TxsdLookat                                                                                                                                                                                                                        func(*TxsdLookat, bool) error
	XsdGoPkgHasElem_paramchoicecommon_color_or_texture_typeschema_Param_TxsdCommonColorOrTextureTypeChoiceParam_                                                                                                                      func(*XsdGoPkgHasElem_paramchoicecommon_color_or_texture_typeschema_Param_TxsdCommonColorOrTextureTypeChoiceParam_, bool) error
	XsdGoPkgHasElem_cull_face_enablechoicegl_pipeline_settingsschema_CullFaceEnable_TxsdGlPipelineSettingsChoiceCullFaceEnable_                                                                                                       func(*XsdGoPkgHasElem_cull_face_enablechoicegl_pipeline_settingsschema_CullFaceEnable_TxsdGlPipelineSettingsChoiceCullFaceEnable_, bool) error
	TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective                                                                                                                                                                  func(*TxsdCameraSequenceOpticsSequenceTechniqueCommonChoicePerspective, bool) error
	XsdGoPkgHasElem_sampler_statesequencegles_texture_unitschema_SamplerState_XsdtNCName_                                                                                                                                             func(*XsdGoPkgHasElem_sampler_statesequencegles_texture_unitschema_SamplerState_XsdtNCName_, bool) error
	XsdGoPkgHasElem_stencil_func_separatechoicegl_pipeline_settingsschema_StencilFuncSeparate_TxsdGlPipelineSettingsChoiceStencilFuncSeparate_                                                                                        func(*XsdGoPkgHasElem_stencil_func_separatechoicegl_pipeline_settingsschema_StencilFuncSeparate_TxsdGlPipelineSettingsChoiceStencilFuncSeparate_, bool) error
	XsdGoPkgHasElem_color_materialchoicegl_pipeline_settingsschema_ColorMaterial_TxsdGlPipelineSettingsChoiceColorMaterial_                                                                                                           func(*XsdGoPkgHasElem_color_materialchoicegl_pipeline_settingsschema_ColorMaterial_TxsdGlPipelineSettingsChoiceColorMaterial_, bool) error
	TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef                                                                                                                                                                              func(*TxsdGlesPipelineSettingsChoiceStencilFuncSequenceRef, bool) error
	TxsdGlesPipelineSettingsChoiceColorMask                                                                                                                                                                                           func(*TxsdGlesPipelineSettingsChoiceColorMask, bool) error
	XsdGoPkgHasElem_texture_env_colorchoicegl_pipeline_settingsschema_TextureEnvColor_TxsdGlPipelineSettingsChoiceTextureEnvColor_                                                                                                    func(*XsdGoPkgHasElem_texture_env_colorchoicegl_pipeline_settingsschema_TextureEnvColor_TxsdGlPipelineSettingsChoiceTextureEnvColor_, bool) error
	XsdGoPkgHasElem_polygon_smooth_enablechoicegl_pipeline_settingsschema_PolygonSmoothEnable_TxsdGlPipelineSettingsChoicePolygonSmoothEnable_                                                                                        func(*XsdGoPkgHasElem_polygon_smooth_enablechoicegl_pipeline_settingsschema_PolygonSmoothEnable_TxsdGlPipelineSettingsChoicePolygonSmoothEnable_, bool) error
	XsdGoPkgHasElem_cull_facechoicegles_pipeline_settingsschema_CullFace_TxsdGlesPipelineSettingsChoiceCullFace_                                                                                                                      func(*XsdGoPkgHasElem_cull_facechoicegles_pipeline_settingsschema_CullFace_TxsdGlesPipelineSettingsChoiceCullFace_, bool) error
	TfxAnnotateCommon                                                                                                                                                                                                                 func(*TfxAnnotateCommon, bool) error
	TxsdProfileGles                                                                                                                                                                                                                   func(*TxsdProfileGles, bool) error
	XsdGoPkgHasElem_float4x4choicecg_param_typeschema_Float4X4_TcgFloat4X4_                                                                                                                                                           func(*XsdGoPkgHasElem_float4x4choicecg_param_typeschema_Float4X4_TcgFloat4X4_, bool) error
	XsdGoPkgHasElem_depth_funcchoicegl_pipeline_settingsschema_DepthFunc_TxsdGlPipelineSettingsChoiceDepthFunc_                                                                                                                       func(*XsdGoPkgHasElem_depth_funcchoicegl_pipeline_settingsschema_DepthFunc_TxsdGlPipelineSettingsChoiceDepthFunc_, bool) error
	XsdGoPkgHasElem_stencil_clearsequencepasssequencetechniquesequenceprofile_GLESschema_StencilClear_XsdtByte_                                                                                                                       func(*XsdGoPkgHasElem_stencil_clearsequencepasssequencetechniquesequenceprofile_GLESschema_StencilClear_XsdtByte_, bool) error
	TfxSurfaceInitCubeCommon                                                                                                                                                                                                          func(*TfxSurfaceInitCubeCommon, bool) error
	XsdGoPkgHasElem_interpenetratesequencetechnique_commonsequencerigid_constraintschema_Interpenetrate_TxsdRigidConstraintSequenceTechniqueCommonSequenceInterpenetrate_False                                                        func(*XsdGoPkgHasElem_interpenetratesequencetechnique_commonsequencerigid_constraintschema_Interpenetrate_TxsdRigidConstraintSequenceTechniqueCommonSequenceInterpenetrate_False, bool) error
	XsdGoPkgHasElem_AnimationClip                                                                                                                                                                                                     func(*XsdGoPkgHasElem_AnimationClip, bool) error
	TxsdGlPipelineSettingsChoiceLightConstantAttenuation                                                                                                                                                                              func(*TxsdGlPipelineSettingsChoiceLightConstantAttenuation, bool) error
	XsdGoPkgHasElems_arraychoiceglsl_newarray_typeschema_Array_TglslNewarrayType_                                                                                                                                                     func(*XsdGoPkgHasElems_arraychoiceglsl_newarray_typeschema_Array_TglslNewarrayType_, bool) error
	TxsdGlesPipelineSettingsChoiceShadeModel                                                                                                                                                                                          func(*TxsdGlesPipelineSettingsChoiceShadeModel, bool) error
	XsdGoPkgHasElems_LibraryMaterials                                                                                                                                                                                                 func(*XsdGoPkgHasElems_LibraryMaterials, bool) error
	XsdGoPkgHasElem_color_clearsequencepasssequencetechniquesequenceprofile_GLESschema_ColorClear_TfxColorCommon_                                                                                                                     func(*XsdGoPkgHasElem_color_clearsequencepasssequencetechniquesequenceprofile_GLESschema_ColorClear_TfxColorCommon_, bool) error
	XsdGoPkgHasElem_polygon_modechoicegl_pipeline_settingsschema_PolygonMode_TxsdGlPipelineSettingsChoicePolygonMode_                                                                                                                 func(*XsdGoPkgHasElem_polygon_modechoicegl_pipeline_settingsschema_PolygonMode_TxsdGlPipelineSettingsChoicePolygonMode_, bool) error
	XsdGoPkgHasElem_Morph                                                                                                                                                                                                             func(*XsdGoPkgHasElem_Morph, bool) error
	XsdGoPkgHasElem_line_stipple_enablechoicegl_pipeline_settingsschema_LineStippleEnable_TxsdGlPipelineSettingsChoiceLineStippleEnable_                                                                                              func(*XsdGoPkgHasElem_line_stipple_enablechoicegl_pipeline_settingsschema_LineStippleEnable_TxsdGlPipelineSettingsChoiceLineStippleEnable_, bool) error
	XsdGoPkgHasElem_samplerRECTchoicefx_basic_type_commonschema_SamplerRECT_TfxSamplerRECTCommon_                                                                                                                                     func(*XsdGoPkgHasElem_samplerRECTchoicefx_basic_type_commonschema_SamplerRECT_TfxSamplerRECTCommon_, bool) error
	XsdGoPkgHasElems_Lookat                                                                                                                                                                                                           func(*XsdGoPkgHasElems_Lookat, bool) error
	TxsdGlPipelineSettingsChoiceLightModelColorControl                                                                                                                                                                                func(*TxsdGlPipelineSettingsChoiceLightModelColorControl, bool) error
	XsdGoPkgHasElem_int4x2choicecg_param_typeschema_Int4X2_TcgInt4X2_                                                                                                                                                                 func(*XsdGoPkgHasElem_int4x2choicecg_param_typeschema_Int4X2_TcgInt4X2_, bool) error
	XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Setparam_TcgSetparamSimple_                                                                                                        func(*XsdGoPkgHasElems_setparamsequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Setparam_TcgSetparamSimple_, bool) error
	XsdGoPkgHasElem_wrap_tsequencefx_samplerDEPTH_commonschema_WrapT_TfxSamplerWrapCommon_Wrap                                                                                                                                        func(*XsdGoPkgHasElem_wrap_tsequencefx_samplerDEPTH_commonschema_WrapT_TfxSamplerWrapCommon_Wrap, bool) error
	XsdGoPkgHasElem_bool1choicecg_param_typeschema_Bool1_TcgBool1_                                                                                                                                                                    func(*XsdGoPkgHasElem_bool1choicecg_param_typeschema_Bool1_TcgBool1_, bool) error
	XsdGoPkgHasElem_Mesh                                                                                                                                                                                                              func(*XsdGoPkgHasElem_Mesh, bool) error
	XsdGoPkgHasElems_NameArray                                                                                                                                                                                                        func(*XsdGoPkgHasElems_NameArray, bool) error
	XsdGoPkgHasElem_Animation                                                                                                                                                                                                         func(*XsdGoPkgHasElem_Animation, bool) error
	TcgSampler2D                                                                                                                                                                                                                      func(*TcgSampler2D, bool) error
	TxsdTrifans                                                                                                                                                                                                                       func(*TxsdTrifans, bool) error
	XsdGoPkgHasElem_jointssequenceskinschema_Joints_TxsdSkinSequenceJoints_                                                                                                                                                           func(*XsdGoPkgHasElem_jointssequenceskinschema_Joints_TxsdSkinSequenceJoints_, bool) error
	XsdGoPkgHasElem_float4x2choicecg_param_typeschema_Float4X2_TcgFloat4X2_                                                                                                                                                           func(*XsdGoPkgHasElem_float4x2choicecg_param_typeschema_Float4X2_TcgFloat4X2_, bool) error
	XsdGoPkgHasElem_int4choiceglsl_param_typeschema_Int4_TglslInt4_                                                                                                                                                                   func(*XsdGoPkgHasElem_int4choiceglsl_param_typeschema_Int4_TglslInt4_, bool) error
	TxsdSkin                                                                                                                                                                                                                          func(*TxsdSkin, bool) error
	XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00                                                                                             func(*XsdGoPkgHasElem_dampingsequenceangularsequencespringsequencetechnique_commonsequencerigid_constraintschema_Damping_TargetableFloat_00, bool) error
	TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc                                                                                                                                                                             func(*TxsdGlesPipelineSettingsChoiceStencilFuncSequenceFunc, bool) error
	XsdGoPkgHasElem_float3x3choiceglsl_param_typeschema_Float3X3_TglslFloat3X3_                                                                                                                                                       func(*XsdGoPkgHasElem_float3x3choiceglsl_param_typeschema_Float3X3_TglslFloat3X3_, bool) error
	TxsdGlesPipelineSettingsChoiceTexturePipelineEnable                                                                                                                                                                               func(*TxsdGlesPipelineSettingsChoiceTexturePipelineEnable, bool) error
	XsdGoPkgHasElem_shininesssequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Shininess_TcommonFloatOrParamType_                                                                                                      func(*XsdGoPkgHasElem_shininesssequenceblinnchoicesequencetechniquesequenceprofile_COMMONschema_Shininess_TcommonFloatOrParamType_, bool) error
	TxsdLight                                                                                                                                                                                                                         func(*TxsdLight, bool) error
	XsdGoPkgHasElem_funcsequencestencil_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceStencilFuncSequenceFunc_                                                                                                func(*XsdGoPkgHasElem_funcsequencestencil_funcchoicegl_pipeline_settingsschema_Func_TxsdGlPipelineSettingsChoiceStencilFuncSequenceFunc_, bool) error
	XsdGoPkgHasElems_AnimationClip                                                                                                                                                                                                    func(*XsdGoPkgHasElems_AnimationClip, bool) error
	XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Param_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_                         func(*XsdGoPkgHasElem_paramchoicebindsequenceshaderchoicesequencepasssequencetechniquesequenceprofile_GLSLschema_Param_TxsdProfileGlslSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBindChoiceParam_, bool) error
	XsdGoPkgHasElem_technique_commonsequencephysics_materialschema_TechniqueCommon_TxsdPhysicsMaterialSequenceTechniqueCommon_                                                                                                        func(*XsdGoPkgHasElem_technique_commonsequencephysics_materialschema_TechniqueCommon_TxsdPhysicsMaterialSequenceTechniqueCommon_, bool) error
	XsdGoPkgHasElem_valuechoicetexture1Dchoicegl_pipeline_settingsschema_Value_TglSampler1D_                                                                                                                                          func(*XsdGoPkgHasElem_valuechoicetexture1Dchoicegl_pipeline_settingsschema_Value_TglSampler1D_, bool) error
	TxsdGlPipelineSettingsChoiceBlendFuncSeparate                                                                                                                                                                                     func(*TxsdGlPipelineSettingsChoiceBlendFuncSeparate, bool) error
	XsdGoPkgHasElem_fixed3choicecg_param_typeschema_Fixed3_TcgFixed3_                                                                                                                                                                 func(*XsdGoPkgHasElem_fixed3choicecg_param_typeschema_Fixed3_TcgFixed3_, bool) error
	XsdGoPkgHasElem_sizechoicesequencefx_surface_commonschema_Size_Tint3_000                                                                                                                                                          func(*XsdGoPkgHasElem_sizechoicesequencefx_surface_commonschema_Size_Tint3_000, bool) error
	XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLESschema_Pass_TxsdProfileGlesSequenceTechniqueSequencePass_                                                                                                               func(*XsdGoPkgHasElems_passsequencetechniquesequenceprofile_GLESschema_Pass_TxsdProfileGlesSequenceTechniqueSequencePass_, bool) error
	XsdGoPkgHasElem_float3x4choicefx_basic_type_commonschema_Float3X4_Tfloat3X4_                                                                                                                                                      func(*XsdGoPkgHasElem_float3x4choicefx_basic_type_commonschema_Float3X4_Tfloat3X4_, bool) error
	TxsdAssetSequenceContributor                                                                                                                                                                                                      func(*TxsdAssetSequenceContributor, bool) error
	TcgNewarrayType                                                                                                                                                                                                                   func(*TcgNewarrayType, bool) error
	XsdGoPkgHasElems_InstanceMaterial                                                                                                                                                                                                 func(*XsdGoPkgHasElems_InstanceMaterial, bool) error
	XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TxsdCommonFloatOrParamTypeChoiceParam_                                                                                                                          func(*XsdGoPkgHasElem_paramchoicecommon_float_or_param_typeschema_Param_TxsdCommonFloatOrParamTypeChoiceParam_, bool) error
	XsdGoPkgHasElem_InstanceRigidConstraint                                                                                                                                                                                           func(*XsdGoPkgHasElem_InstanceRigidConstraint, bool) error
	XsdGoPkgHasElems_Cylinder                                                                                                                                                                                                         func(*XsdGoPkgHasElems_Cylinder, bool) error
	XsdGoPkgHasElem_light_diffusechoicegl_pipeline_settingsschema_LightDiffuse_TxsdGlPipelineSettingsChoiceLightDiffuse_                                                                                                              func(*XsdGoPkgHasElem_light_diffusechoicegl_pipeline_settingsschema_LightDiffuse_TxsdGlPipelineSettingsChoiceLightDiffuse_, bool) error
	XsdGoPkgHasElem_line_stipplechoicegl_pipeline_settingsschema_LineStipple_TxsdGlPipelineSettingsChoiceLineStipple_                                                                                                                 func(*XsdGoPkgHasElem_line_stipplechoicegl_pipeline_settingsschema_LineStipple_TxsdGlPipelineSettingsChoiceLineStipple_, bool) error
	TxsdLibraryPhysicsMaterials                                                                                                                                                                                                       func(*TxsdLibraryPhysicsMaterials, bool) error
	XsdGoPkgHasElem_init_as_nullchoicefx_surface_init_commonschema_InitAsNull_XsdtString_                                                                                                                                             func(*XsdGoPkgHasElem_init_as_nullchoicefx_surface_init_commonschema_InitAsNull_XsdtString_, bool) error
	XsdGoPkgHasElem_clear_colorchoicegl_pipeline_settingsschema_ClearColor_TxsdGlPipelineSettingsChoiceClearColor_                                                                                                                    func(*XsdGoPkgHasElem_clear_colorchoicegl_pipeline_settingsschema_ClearColor_TxsdGlPipelineSettingsChoiceClearColor_, bool) error
	XsdGoPkgHasElem_light_spot_exponentchoicegles_pipeline_settingsschema_LightSpotExponent_TxsdGlesPipelineSettingsChoiceLightSpotExponent_                                                                                          func(*XsdGoPkgHasElem_light_spot_exponentchoicegles_pipeline_settingsschema_LightSpotExponent_TxsdGlesPipelineSettingsChoiceLightSpotExponent_, bool) error
	XsdGoPkgHasElems_InstancePhysicsModel                                                                                                                                                                                             func(*XsdGoPkgHasElems_InstancePhysicsModel, bool) error
	XsdGoPkgHasElem_fixed1choicecg_param_typeschema_Fixed1_TcgFixed1_                                                                                                                                                                 func(*XsdGoPkgHasElem_fixed1choicecg_param_typeschema_Fixed1_TcgFixed1_, bool) error
	XsdGoPkgHasGroup_GlPipelineSettings                                                                                                                                                                                               func(*XsdGoPkgHasGroup_GlPipelineSettings, bool) error
	XsdGoPkgHasElem_float1x1choicecg_param_typeschema_Float1X1_TcgFloat1X1_                                                                                                                                                           func(*XsdGoPkgHasElem_float1x1choicecg_param_typeschema_Float1X1_TcgFloat1X1_, bool) error
	XsdGoPkgHasElems_newparamchoicesequenceprofile_GLSLschema_Newparam_TglslNewparam_                                                                                                                                                 func(*XsdGoPkgHasElems_newparamchoicesequenceprofile_GLSLschema_Newparam_TglslNewparam_, bool) error
	XsdGoPkgHasElem_samplerCUBEchoicecg_param_typeschema_SamplerCUBE_TcgSamplerCUBE_                                                                                                                                                  func(*XsdGoPkgHasElem_samplerCUBEchoicecg_param_typeschema_SamplerCUBE_TcgSamplerCUBE_, bool) error
	XsdGoPkgHasElem_blend_enablechoicegl_pipeline_settingsschema_BlendEnable_TxsdGlPipelineSettingsChoiceBlendEnable_                                                                                                                 func(*XsdGoPkgHasElem_blend_enablechoicegl_pipeline_settingsschema_BlendEnable_TxsdGlPipelineSettingsChoiceBlendEnable_, bool) error
	XsdGoPkgHasElem_polygon_offsetchoicegles_pipeline_settingsschema_PolygonOffset_TxsdGlesPipelineSettingsChoicePolygonOffset_                                                                                                       func(*XsdGoPkgHasElem_polygon_offsetchoicegles_pipeline_settingsschema_PolygonOffset_TxsdGlesPipelineSettingsChoicePolygonOffset_, bool) error
	XsdGoPkgHasElems_LibraryGeometries                                                                                                                                                                                                func(*XsdGoPkgHasElems_LibraryGeometries, bool) error
	XsdGoPkgHasElem_bool3x1choicecg_param_typeschema_Bool3X1_TcgBool3X1_                                                                                                                                                              func(*XsdGoPkgHasElem_bool3x1choicecg_param_typeschema_Bool3X1_TcgBool3X1_, bool) error
	TxsdLibraryControllers                                                                                                                                                                                                            func(*TxsdLibraryControllers, bool) error
	XsdGoPkgHasGroup_GlslParamType                                                                                                                                                                                                    func(*XsdGoPkgHasGroup_GlslParamType, bool) error
	XsdGoPkgHasElem_RigidBody                                                                                                                                                                                                         func(*XsdGoPkgHasElem_RigidBody, bool) error
	XsdGoPkgHasElem_clear_stencilchoicegles_pipeline_settingsschema_ClearStencil_TxsdGlesPipelineSettingsChoiceClearStencil_                                                                                                          func(*XsdGoPkgHasElem_clear_stencilchoicegles_pipeline_settingsschema_ClearStencil_TxsdGlesPipelineSettingsChoiceClearStencil_, bool) error
	XsdGoPkgHasElem_allchoicefx_surface_init_volume_commonschema_All_TxsdFxSurfaceInitVolumeCommonChoiceAll_                                                                                                                          func(*XsdGoPkgHasElem_allchoicefx_surface_init_volume_commonschema_All_TxsdFxSurfaceInitVolumeCommonChoiceAll_, bool) error
	TxsdFxSurfaceInitCubeCommonChoicePrimary                                                                                                                                                                                          func(*TxsdFxSurfaceInitCubeCommonChoicePrimary, bool) error
	TxsdGlPipelineSettingsChoiceStencilOpSequenceFail                                                                                                                                                                                 func(*TxsdGlPipelineSettingsChoiceStencilOpSequenceFail, bool) error
	XsdGoPkgHasElem_TaperedCapsule                                                                                                                                                                                                    func(*XsdGoPkgHasElem_TaperedCapsule, bool) error
	XsdGoPkgHasElem_init_as_targetchoicefx_surface_init_commonschema_InitAsTarget_XsdtString_                                                                                                                                         func(*XsdGoPkgHasElem_init_as_targetchoicefx_surface_init_commonschema_InitAsTarget_XsdtString_, bool) error
	XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLESschema_Draw_TfxDrawCommon_                                                                                                                                   func(*XsdGoPkgHasElem_drawsequencepasssequencetechniquesequenceprofile_GLESschema_Draw_TfxDrawCommon_, bool) error
	TxsdGlesPipelineSettingsChoiceClipPlane                                                                                                                                                                                           func(*TxsdGlesPipelineSettingsChoiceClipPlane, bool) error
	TxsdParam                                                                                                                                                                                                                         func(*TxsdParam, bool) error
	XsdGoPkgHasElem_generatorsequenceextensioncomplexContentcg_surface_typeschema_Generator_TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator_                                                                                func(*XsdGoPkgHasElem_generatorsequenceextensioncomplexContentcg_surface_typeschema_Generator_TxsdCgSurfaceTypeComplexContentExtensionSequenceGenerator_, bool) error
	XsdGoPkgHasElem_texture_pipelinechoicegles_basic_type_commonschema_TexturePipeline_TglesTexturePipeline_                                                                                                                          func(*XsdGoPkgHasElem_texture_pipelinechoicegles_basic_type_commonschema_TexturePipeline_TglesTexturePipeline_, bool) error
	TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind                                                                                                                                                        func(*TxsdProfileCgSequenceTechniqueSequencePassSequenceChoiceShaderSequenceBind, bool) error
	TxsdAssetSequenceUnit                                                                                                                                                                                                             func(*TxsdAssetSequenceUnit, bool) error
	XsdGoPkgHasElem_texture_env_modechoicegl_pipeline_settingsschema_TextureEnvMode_TxsdGlPipelineSettingsChoiceTextureEnvMode_                                                                                                       func(*XsdGoPkgHasElem_texture_env_modechoicegl_pipeline_settingsschema_TextureEnvMode_TxsdGlPipelineSettingsChoiceTextureEnvMode_, bool) error
	XsdGoPkgHasElem_FloatArray                                                                                                                                                                                                        func(*XsdGoPkgHasElem_FloatArray, bool) error
	XsdGoPkgHasElem_boolchoicefx_basic_type_commonschema_Bool_Tbool_                                                                                                                                                                  func(*XsdGoPkgHasElem_boolchoicefx_basic_type_commonschema_Bool_Tbool_, bool) error
	XsdGoPkgHasElem_yfovchoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Yfov_TargetableFloat_                                                                                         func(*XsdGoPkgHasElem_yfovchoicesequencechoicesequenceperspectivechoicetechnique_commonsequenceopticssequencecameraschema_Yfov_TargetableFloat_, bool) error
	XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_CGschema_Newparam_TcgNewparam_                                                                                                                                    func(*XsdGoPkgHasElems_newparamchoicesequencetechniquesequenceprofile_CGschema_Newparam_TcgNewparam_, bool) error
	XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Name_TxsdCgSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_                                                             func(*XsdGoPkgHasElem_namesequencegeneratorsequenceextensioncomplexContentcg_surface_typeschema_Name_TxsdCgSurfaceTypeComplexContentExtensionSequenceGeneratorSequenceName_, bool) error
	XsdGoPkgHasElems_stencil_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilClear_TfxClearstencilCommon_                                                                                                         func(*XsdGoPkgHasElems_stencil_clearsequencepasssequencetechniquesequenceprofile_GLSLschema_StencilClear_TfxClearstencilCommon_, bool) error
	XsdGoPkgHasElem_point_smooth_enablechoicegles_pipeline_settingsschema_PointSmoothEnable_TxsdGlesPipelineSettingsChoicePointSmoothEnable_                                                                                          func(*XsdGoPkgHasElem_point_smooth_enablechoicegles_pipeline_settingsschema_PointSmoothEnable_TxsdGlesPipelineSettingsChoicePointSmoothEnable_, bool) error
	XsdGoPkgHasElems_Sphere                                                                                                                                                                                                           func(*XsdGoPkgHasElems_Sphere, bool) error
	XsdGoPkgHasElems_Source                                                                                                                                                                                                           func(*XsdGoPkgHasElems_Source, bool) error
	XsdGoPkgHasElem_arraychoicesequenceglsl_setparamschema_Array_TglslSetarrayType_                                                                                                                                                   func(*XsdGoPkgHasElem_arraychoicesequenceglsl_setparamschema_Array_TglslSetarrayType_, bool) error
	TxsdMorphSequenceTargets                                                                                                                                                                                                          func(*TxsdMorphSequenceTargets, bool) error
	TglesNewparam                                                                                                                                                                                                                     func(*TglesNewparam, bool) error
	XsdGoPkgHasElem_inertiasequencetechnique_commonsequenceinstance_rigid_bodyschema_Inertia_TargetableFloat3_                                                                                                                        func(*XsdGoPkgHasElem_inertiasequencetechnique_commonsequenceinstance_rigid_bodyschema_Inertia_TargetableFloat3_, bool) error
	XsdGoPkgHasElem_bool2choiceglsl_param_typeschema_Bool2_TglslBool2_                                                                                                                                                                func(*XsdGoPkgHasElem_bool2choiceglsl_param_typeschema_Bool2_TglslBool2_, bool) error
	TxsdBindMaterial                                                                                                                                                                                                                  func(*TxsdBindMaterial, bool) error
	XsdGoPkgHasElem_ProfileCg                                                                                                                                                                                                         func(*XsdGoPkgHasElem_ProfileCg, bool) error
	XsdGoPkgHasElem_InstanceEffect                                                                                                                                                                                                    func(*XsdGoPkgHasElem_InstanceEffect, bool) error
	XsdGoPkgHasElem_valuesequencealpha_funcchoicegles_pipeline_settingsschema_Value_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue_                                                                                             func(*XsdGoPkgHasElem_valuesequencealpha_funcchoicegles_pipeline_settingsschema_Value_TxsdGlesPipelineSettingsChoiceAlphaFuncSequenceValue_, bool) error
	TxsdGlesPipelineSettingsChoiceTexturePipeline                                                                                                                                                                                     func(*TxsdGlesPipelineSettingsChoiceTexturePipeline, bool) error
	XsdGoPkgHasElem_float3x2choicecg_param_typeschema_Float3X2_TcgFloat3X2_                                                                                                                                                           func(*XsdGoPkgHasElem_float3x2choicecg_param_typeschema_Float3X2_TcgFloat3X2_, bool) error
	XsdGoPkgHasElem_technique_commonsequenceinstance_rigid_bodyschema_TechniqueCommon_TxsdInstanceRigidBodySequenceTechniqueCommon_                                                                                                   func(*XsdGoPkgHasElem_technique_commonsequenceinstance_rigid_bodyschema_TechniqueCommon_TxsdInstanceRigidBodySequenceTechniqueCommon_, bool) error
	TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation                                                                                                                                                                             func(*TxsdGlPipelineSettingsChoiceLightQuadraticAttenuation, bool) error
	XsdGoPkgHasElem_float1x4choicecg_param_typeschema_Float1X4_TcgFloat1X4_                                                                                                                                                           func(*XsdGoPkgHasElem_float1x4choicecg_param_typeschema_Float1X4_TcgFloat1X4_, bool) error
}

//	A convenience interface that declares a type conversion to Tfloat3X3.
type ToTfloat3X3 interface {
	ToTfloat3X3() Tfloat3X3
}

//	A convenience interface that declares a type conversion to TListOfFloats.
type ToTListOfFloats interface {
	ToTListOfFloats() TListOfFloats
}

//	A convenience interface that declares a type conversion to TListOfInts.
type ToTListOfInts interface {
	ToTListOfInts() TListOfInts
}

//	A convenience interface that declares a type conversion to Tfloat4X4.
type ToTfloat4X4 interface {
	ToTfloat4X4() Tfloat4X4
}

//	A convenience interface that declares a type conversion to TfxColorCommon.
type ToTfxColorCommon interface {
	ToTfxColorCommon() TfxColorCommon
}

//	A convenience interface that declares a type conversion to Tfloat4.
type ToTfloat4 interface {
	ToTfloat4() Tfloat4
}

//	A convenience interface that declares a type conversion to Tfloat3.
type ToTfloat3 interface {
	ToTfloat3() Tfloat3
}

//	A convenience interface that declares a type conversion to Tfloat.
type ToTfloat interface {
	ToTfloat() Tfloat
}

//	A convenience interface that declares a type conversion to Tbool.
type ToTbool interface {
	ToTbool() Tbool
}

//	A convenience interface that declares a type conversion to Tfloat7.
type ToTfloat7 interface {
	ToTfloat7() Tfloat7
}

//	A convenience interface that declares a type conversion to TListOfNames.
type ToTListOfNames interface {
	ToTListOfNames() TListOfNames
}

//	A convenience interface that declares a type conversion to TListOfBools.
type ToTListOfBools interface {
	ToTListOfBools() TListOfBools
}
