//	Auto-generated by the "go-xsd" package located at:
//		github.com/wagner-aos/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		kbcafe.com/rss/atom.xsd.xml
package go_AtomXml

//	This version of the Atom schema is based on version 1.0 of the format specifications,
//	found here http://www.atomenabled.org/developers/syndication/atom-format-spec.php.
//	An Atom document may have two root elements, feed and entry, as defined in section 2.

import (
	xml "github.com/wagner-aos/go-xsd-pkg/www.w3.org/2001/03/xml.xsd_go"
	xsdt "github.com/wagner-aos/go-xsd/types"
)

type XsdGoPkgHasAtts_CommonAttributes struct {
	xml.XsdGoPkgHasAttr_Base

	xml.XsdGoPkgHasAttr_Lang
}

//	The Atom feed construct is defined in section 4.1.1 of the format spec.
//	The Atom text construct is defined in section 3.1 of the format spec.
type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdTextTypeType xsdt.Token

//	Returns true if the value of this enumerated TxsdTextTypeType is "text".
func (me TxsdTextTypeType) IsText() bool { return me == "text" }

//	Since TxsdTextTypeType is just a simple String type, this merely returns the current string value.
func (me TxsdTextTypeType) String() string { return xsdt.Token(me).String() }

//	Since TxsdTextTypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdTextTypeType) Set(s string) { (*xsdt.Token)(me).Set(s) }

//	Returns true if the value of this enumerated TxsdTextTypeType is "xhtml".
func (me TxsdTextTypeType) IsXhtml() bool { return me == "xhtml" }

//	This convenience method just performs a simple type conversion to TxsdTextTypeType's alias type xsdt.Token.
func (me TxsdTextTypeType) ToXsdtToken() xsdt.Token { return xsdt.Token(me) }

//	Returns true if the value of this enumerated TxsdTextTypeType is "html".
func (me TxsdTextTypeType) IsHtml() bool { return me == "html" }

type XsdGoPkgHasAttr_Type_TxsdTextTypeType_ struct {
	Type TxsdTextTypeType `xml:"http://www.w3.org/2005/Atom type,attr"`
}

type TtextType struct {
	XsdGoPkgHasAttr_Type_TxsdTextTypeType_

	XsdGoPkgHasAtts_CommonAttributes

	XsdGoPkgHasCdata
}

//	If the WalkHandlers.TtextType function is not nil (ie. was set by outside code), calls it with this TtextType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TtextType instance.
func (me *TtextType) Walk() (err error) {
	if fn := WalkHandlers.TtextType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_rightschoicefeedTypeschema_Rights_TtextType_ struct {
	Rightses []*TtextType `xml:"http://www.w3.org/2005/Atom rights"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_rightschoicefeedTypeschema_Rights_TtextType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_rightschoicefeedTypeschema_Rights_TtextType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_rightschoicefeedTypeschema_Rights_TtextType_ instance.
func (me *XsdGoPkgHasElems_rightschoicefeedTypeschema_Rights_TtextType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_rightschoicefeedTypeschema_Rights_TtextType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Rightses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The Atom generator element is defined in section 4.2.4 of the format spec.
type XsdGoPkgHasAttr_Version_XsdtString_ struct {
	Version xsdt.String `xml:"http://www.w3.org/2005/Atom version,attr"`
}

type XsdGoPkgHasAttr_Uri_XsdtAnyURI_ struct {
	Uri xsdt.AnyURI `xml:"http://www.w3.org/2005/Atom uri,attr"`
}

type TgeneratorType struct {
	XsdGoPkgValue xsdt.String `xml:",chardata"`

	XsdGoPkgHasAttr_Version_XsdtString_

	XsdGoPkgHasAttr_Uri_XsdtAnyURI_

	XsdGoPkgHasAtts_CommonAttributes
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TgeneratorType) ToXsdtString() xsdt.String { return me.XsdGoPkgValue }

//	If the WalkHandlers.TgeneratorType function is not nil (ie. was set by outside code), calls it with this TgeneratorType instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/1 field(s) belonging to this TgeneratorType instance.
func (me *TgeneratorType) Walk() (err error) {
	if fn := WalkHandlers.TgeneratorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_generatorchoicefeedTypeschema_Generator_TgeneratorType_ struct {
	Generators []*TgeneratorType `xml:"http://www.w3.org/2005/Atom generator"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_generatorchoicefeedTypeschema_Generator_TgeneratorType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_generatorchoicefeedTypeschema_Generator_TgeneratorType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_generatorchoicefeedTypeschema_Generator_TgeneratorType_ instance.
func (me *XsdGoPkgHasElems_generatorchoicefeedTypeschema_Generator_TgeneratorType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_generatorchoicefeedTypeschema_Generator_TgeneratorType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Generators {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The Atom cagegory construct is defined in section 4.2.2 of the format spec.
type XsdGoPkgHasAttr_Label_XsdtString_ struct {
	Label xsdt.String `xml:"http://www.w3.org/2005/Atom label,attr"`
}

type XsdGoPkgHasAttr_Scheme_XsdtAnyURI_ struct {
	Scheme xsdt.AnyURI `xml:"http://www.w3.org/2005/Atom scheme,attr"`
}

type XsdGoPkgHasAttr_Term_XsdtString_ struct {
	Term xsdt.String `xml:"http://www.w3.org/2005/Atom term,attr"`
}

type TcategoryType struct {
	XsdGoPkgHasAttr_Term_XsdtString_

	XsdGoPkgHasAttr_Label_XsdtString_

	XsdGoPkgHasAttr_Scheme_XsdtAnyURI_

	XsdGoPkgHasAtts_CommonAttributes
}

//	If the WalkHandlers.TcategoryType function is not nil (ie. was set by outside code), calls it with this TcategoryType instance as the single argument. Then calls the Walk() method on 0/4 embed(s) and 0/0 field(s) belonging to this TcategoryType instance.
func (me *TcategoryType) Walk() (err error) {
	if fn := WalkHandlers.TcategoryType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_categorychoicefeedTypeschema_Category_TcategoryType_ struct {
	Categories []*TcategoryType `xml:"http://www.w3.org/2005/Atom category"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_categorychoicefeedTypeschema_Category_TcategoryType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_categorychoicefeedTypeschema_Category_TcategoryType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_categorychoicefeedTypeschema_Category_TcategoryType_ instance.
func (me *XsdGoPkgHasElems_categorychoicefeedTypeschema_Category_TcategoryType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_categorychoicefeedTypeschema_Category_TcategoryType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Categories {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_subtitlechoicefeedTypeschema_Subtitle_TtextType_ struct {
	Subtitles []*TtextType `xml:"http://www.w3.org/2005/Atom subtitle"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_subtitlechoicefeedTypeschema_Subtitle_TtextType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_subtitlechoicefeedTypeschema_Subtitle_TtextType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_subtitlechoicefeedTypeschema_Subtitle_TtextType_ instance.
func (me *XsdGoPkgHasElems_subtitlechoicefeedTypeschema_Subtitle_TtextType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_subtitlechoicefeedTypeschema_Subtitle_TtextType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Subtitles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The Atom id construct is defined in section 4.2.6 of the format spec.
type TidType struct {
	XsdGoPkgValue xsdt.AnyURI `xml:",chardata"`

	XsdGoPkgHasAtts_CommonAttributes
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TidType) ToXsdtAnyURI() xsdt.AnyURI { return me.XsdGoPkgValue }

//	If the WalkHandlers.TidType function is not nil (ie. was set by outside code), calls it with this TidType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TidType instance.
func (me *TidType) Walk() (err error) {
	if fn := WalkHandlers.TidType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_idchoicefeedTypeschema_Id_TidType_ struct {
	Ids []*TidType `xml:"http://www.w3.org/2005/Atom id"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_idchoicefeedTypeschema_Id_TidType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_idchoicefeedTypeschema_Id_TidType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_idchoicefeedTypeschema_Id_TidType_ instance.
func (me *XsdGoPkgHasElems_idchoicefeedTypeschema_Id_TidType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_idchoicefeedTypeschema_Id_TidType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Ids {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The Atom logo construct is defined in section 4.2.8 of the format spec.
type TlogoType struct {
	XsdGoPkgValue xsdt.AnyURI `xml:",chardata"`

	XsdGoPkgHasAtts_CommonAttributes
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TlogoType) ToXsdtAnyURI() xsdt.AnyURI { return me.XsdGoPkgValue }

//	If the WalkHandlers.TlogoType function is not nil (ie. was set by outside code), calls it with this TlogoType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TlogoType instance.
func (me *TlogoType) Walk() (err error) {
	if fn := WalkHandlers.TlogoType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_logochoicefeedTypeschema_Logo_TlogoType_ struct {
	Logos []*TlogoType `xml:"http://www.w3.org/2005/Atom logo"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_logochoicefeedTypeschema_Logo_TlogoType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_logochoicefeedTypeschema_Logo_TlogoType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_logochoicefeedTypeschema_Logo_TlogoType_ instance.
func (me *XsdGoPkgHasElems_logochoicefeedTypeschema_Logo_TlogoType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_logochoicefeedTypeschema_Logo_TlogoType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Logos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The Atom person construct is defined in section 3.2 of the format spec.
type TuriType struct {
	XsdGoPkgValue xsdt.AnyURI `xml:",chardata"`

	XsdGoPkgHasAtts_CommonAttributes
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TuriType) ToXsdtAnyURI() xsdt.AnyURI { return me.XsdGoPkgValue }

//	If the WalkHandlers.TuriType function is not nil (ie. was set by outside code), calls it with this TuriType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TuriType instance.
func (me *TuriType) Walk() (err error) {
	if fn := WalkHandlers.TuriType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_urichoicepersonTypeschema_Uri_TuriType_ struct {
	Uris []*TuriType `xml:"http://www.w3.org/2005/Atom uri"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_urichoicepersonTypeschema_Uri_TuriType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_urichoicepersonTypeschema_Uri_TuriType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_urichoicepersonTypeschema_Uri_TuriType_ instance.
func (me *XsdGoPkgHasElems_urichoicepersonTypeschema_Uri_TuriType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_urichoicepersonTypeschema_Uri_TuriType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Uris {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_namechoicepersonTypeschema_Name_XsdtString_ struct {
	Names []xsdt.String `xml:"http://www.w3.org/2005/Atom name"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_namechoicepersonTypeschema_Name_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_namechoicepersonTypeschema_Name_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_namechoicepersonTypeschema_Name_XsdtString_ instance.
func (me *XsdGoPkgHasElems_namechoicepersonTypeschema_Name_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_namechoicepersonTypeschema_Name_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Schema definition for an email address.
type TemailType xsdt.NormalizedString

//	This convenience method just performs a simple type conversion to TemailType's alias type xsdt.NormalizedString.
func (me TemailType) ToXsdtNormalizedString() xsdt.NormalizedString { return xsdt.NormalizedString(me) }

//	Since TemailType is just a simple String type, this merely returns the current string value.
func (me TemailType) String() string { return xsdt.NormalizedString(me).String() }

//	Since TemailType is just a simple String type, this merely sets the current value from the specified string.
func (me *TemailType) Set(s string) { (*xsdt.NormalizedString)(me).Set(s) }

type XsdGoPkgHasElems_emailchoicepersonTypeschema_Email_TemailType_ struct {
	Emails []TemailType `xml:"http://www.w3.org/2005/Atom email"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_emailchoicepersonTypeschema_Email_TemailType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_emailchoicepersonTypeschema_Email_TemailType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_emailchoicepersonTypeschema_Email_TemailType_ instance.
func (me *XsdGoPkgHasElems_emailchoicepersonTypeschema_Email_TemailType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_emailchoicepersonTypeschema_Email_TemailType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TpersonType struct {
	XsdGoPkgHasElems_urichoicepersonTypeschema_Uri_TuriType_

	XsdGoPkgHasElems_namechoicepersonTypeschema_Name_XsdtString_

	XsdGoPkgHasAtts_CommonAttributes

	XsdGoPkgHasElems_emailchoicepersonTypeschema_Email_TemailType_
}

//	If the WalkHandlers.TpersonType function is not nil (ie. was set by outside code), calls it with this TpersonType instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TpersonType instance.
func (me *TpersonType) Walk() (err error) {
	if fn := WalkHandlers.TpersonType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_urichoicepersonTypeschema_Uri_TuriType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_namechoicepersonTypeschema_Name_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_emailchoicepersonTypeschema_Email_TemailType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_contributorchoicefeedTypeschema_Contributor_TpersonType_ struct {
	Contributors []*TpersonType `xml:"http://www.w3.org/2005/Atom contributor"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_contributorchoicefeedTypeschema_Contributor_TpersonType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_contributorchoicefeedTypeschema_Contributor_TpersonType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_contributorchoicefeedTypeschema_Contributor_TpersonType_ instance.
func (me *XsdGoPkgHasElems_contributorchoicefeedTypeschema_Contributor_TpersonType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_contributorchoicefeedTypeschema_Contributor_TpersonType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Contributors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_titlechoicefeedTypeschema_Title_TtextType_ struct {
	Titles []*TtextType `xml:"http://www.w3.org/2005/Atom title"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_titlechoicefeedTypeschema_Title_TtextType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_titlechoicefeedTypeschema_Title_TtextType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_titlechoicefeedTypeschema_Title_TtextType_ instance.
func (me *XsdGoPkgHasElems_titlechoicefeedTypeschema_Title_TtextType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_titlechoicefeedTypeschema_Title_TtextType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Titles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_authorchoicefeedTypeschema_Author_TpersonType_ struct {
	Authors []*TpersonType `xml:"http://www.w3.org/2005/Atom author"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_authorchoicefeedTypeschema_Author_TpersonType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_authorchoicefeedTypeschema_Author_TpersonType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_authorchoicefeedTypeschema_Author_TpersonType_ instance.
func (me *XsdGoPkgHasElems_authorchoicefeedTypeschema_Author_TpersonType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_authorchoicefeedTypeschema_Author_TpersonType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Authors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The Atom icon construct is defined in section 4.2.5 of the format spec.
type TiconType struct {
	XsdGoPkgValue xsdt.AnyURI `xml:",chardata"`

	XsdGoPkgHasAtts_CommonAttributes
}

//	If the WalkHandlers.TiconType function is not nil (ie. was set by outside code), calls it with this TiconType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TiconType instance.
func (me *TiconType) Walk() (err error) {
	if fn := WalkHandlers.TiconType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TiconType) ToXsdtAnyURI() xsdt.AnyURI { return me.XsdGoPkgValue }

type XsdGoPkgHasElems_iconchoicefeedTypeschema_Icon_TiconType_ struct {
	Icons []*TiconType `xml:"http://www.w3.org/2005/Atom icon"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_iconchoicefeedTypeschema_Icon_TiconType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_iconchoicefeedTypeschema_Icon_TiconType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_iconchoicefeedTypeschema_Icon_TiconType_ instance.
func (me *XsdGoPkgHasElems_iconchoicefeedTypeschema_Icon_TiconType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_iconchoicefeedTypeschema_Icon_TiconType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Icons {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TdateTimeType struct {
	XsdGoPkgValue xsdt.DateTime `xml:",chardata"`

	XsdGoPkgHasAtts_CommonAttributes
}

//	Simply returns the value of its XsdGoPkgValue field.
func (me *TdateTimeType) ToXsdtDateTime() xsdt.DateTime { return me.XsdGoPkgValue }

//	If the WalkHandlers.TdateTimeType function is not nil (ie. was set by outside code), calls it with this TdateTimeType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/1 field(s) belonging to this TdateTimeType instance.
func (me *TdateTimeType) Walk() (err error) {
	if fn := WalkHandlers.TdateTimeType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_updatedchoicefeedTypeschema_Updated_TdateTimeType_ struct {
	Updateds []*TdateTimeType `xml:"http://www.w3.org/2005/Atom updated"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_updatedchoicefeedTypeschema_Updated_TdateTimeType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_updatedchoicefeedTypeschema_Updated_TdateTimeType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_updatedchoicefeedTypeschema_Updated_TdateTimeType_ instance.
func (me *XsdGoPkgHasElems_updatedchoicefeedTypeschema_Updated_TdateTimeType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_updatedchoicefeedTypeschema_Updated_TdateTimeType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Updateds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The Atom link construct is defined in section 3.4 of the format spec.
type XsdGoPkgHasAttr_Title_XsdtString_ struct {
	Title xsdt.String `xml:"http://www.w3.org/2005/Atom title,attr"`
}

type XsdGoPkgHasAttr_Href_XsdtAnyURI_ struct {
	Href xsdt.AnyURI `xml:"http://www.w3.org/2005/Atom href,attr"`
}

type XsdGoPkgHasAttr_Type_XsdtString_ struct {
	Type xsdt.String `xml:"http://www.w3.org/2005/Atom type,attr"`
}

type XsdGoPkgHasAttr_Length_XsdtPositiveInteger_ struct {
	Length xsdt.PositiveInteger `xml:"http://www.w3.org/2005/Atom length,attr"`
}

type XsdGoPkgHasAttr_Hreflang_XsdtNmtoken_ struct {
	Hreflang xsdt.Nmtoken `xml:"http://www.w3.org/2005/Atom hreflang,attr"`
}

type XsdGoPkgHasAttr_Rel_XsdtString_ struct {
	Rel xsdt.String `xml:"http://www.w3.org/2005/Atom rel,attr"`
}

type TlinkType struct {
	XsdGoPkgHasAttr_Title_XsdtString_

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Href_XsdtAnyURI_

	XsdGoPkgHasAttr_Type_XsdtString_

	XsdGoPkgHasAttr_Length_XsdtPositiveInteger_

	XsdGoPkgHasAtts_CommonAttributes

	XsdGoPkgHasAttr_Hreflang_XsdtNmtoken_

	XsdGoPkgHasAttr_Rel_XsdtString_
}

//	If the WalkHandlers.TlinkType function is not nil (ie. was set by outside code), calls it with this TlinkType instance as the single argument. Then calls the Walk() method on 1/8 embed(s) and 0/0 field(s) belonging to this TlinkType instance.
func (me *TlinkType) Walk() (err error) {
	if fn := WalkHandlers.TlinkType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_linkchoicefeedTypeschema_Link_TlinkType_ struct {
	Links []*TlinkType `xml:"http://www.w3.org/2005/Atom link"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_linkchoicefeedTypeschema_Link_TlinkType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_linkchoicefeedTypeschema_Link_TlinkType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_linkchoicefeedTypeschema_Link_TlinkType_ instance.
func (me *XsdGoPkgHasElems_linkchoicefeedTypeschema_Link_TlinkType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_linkchoicefeedTypeschema_Link_TlinkType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Links {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The Atom entry construct is defined in section 4.1.2 of the format spec.
type XsdGoPkgHasElems_publishedchoiceentryTypeschema_Published_TdateTimeType_ struct {
	Publisheds []*TdateTimeType `xml:"http://www.w3.org/2005/Atom published"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_publishedchoiceentryTypeschema_Published_TdateTimeType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_publishedchoiceentryTypeschema_Published_TdateTimeType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_publishedchoiceentryTypeschema_Published_TdateTimeType_ instance.
func (me *XsdGoPkgHasElems_publishedchoiceentryTypeschema_Published_TdateTimeType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_publishedchoiceentryTypeschema_Published_TdateTimeType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Publisheds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_sourcechoiceentryTypeschema_Source_TtextType_ struct {
	Sources []*TtextType `xml:"http://www.w3.org/2005/Atom source"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_sourcechoiceentryTypeschema_Source_TtextType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_sourcechoiceentryTypeschema_Source_TtextType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_sourcechoiceentryTypeschema_Source_TtextType_ instance.
func (me *XsdGoPkgHasElems_sourcechoiceentryTypeschema_Source_TtextType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_sourcechoiceentryTypeschema_Source_TtextType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Sources {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_summarychoiceentryTypeschema_Summary_TtextType_ struct {
	Summaries []*TtextType `xml:"http://www.w3.org/2005/Atom summary"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_summarychoiceentryTypeschema_Summary_TtextType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_summarychoiceentryTypeschema_Summary_TtextType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_summarychoiceentryTypeschema_Summary_TtextType_ instance.
func (me *XsdGoPkgHasElems_summarychoiceentryTypeschema_Summary_TtextType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_summarychoiceentryTypeschema_Summary_TtextType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Summaries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

//	The Atom content construct is defined in section 4.1.3 of the format spec.
type XsdGoPkgHasAttr_Src_XsdtAnyURI_ struct {
	Src xsdt.AnyURI `xml:"http://www.w3.org/2005/Atom src,attr"`
}

type TcontentType struct {
	XsdGoPkgHasAtts_CommonAttributes

	XsdGoPkgHasAttr_Src_XsdtAnyURI_

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Type_XsdtString_
}

//	If the WalkHandlers.TcontentType function is not nil (ie. was set by outside code), calls it with this TcontentType instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TcontentType instance.
func (me *TcontentType) Walk() (err error) {
	if fn := WalkHandlers.TcontentType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_contentchoiceentryTypeschema_Content_TcontentType_ struct {
	Contents []*TcontentType `xml:"http://www.w3.org/2005/Atom content"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_contentchoiceentryTypeschema_Content_TcontentType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_contentchoiceentryTypeschema_Content_TcontentType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_contentchoiceentryTypeschema_Content_TcontentType_ instance.
func (me *XsdGoPkgHasElems_contentchoiceentryTypeschema_Content_TcontentType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_contentchoiceentryTypeschema_Content_TcontentType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Contents {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TentryType struct {
	XsdGoPkgHasElems_contentchoiceentryTypeschema_Content_TcontentType_

	XsdGoPkgHasElems_categorychoicefeedTypeschema_Category_TcategoryType_

	XsdGoPkgHasElems_publishedchoiceentryTypeschema_Published_TdateTimeType_

	XsdGoPkgHasElems_authorchoicefeedTypeschema_Author_TpersonType_

	XsdGoPkgHasAtts_CommonAttributes

	XsdGoPkgHasElems_contributorchoicefeedTypeschema_Contributor_TpersonType_

	XsdGoPkgHasElems_titlechoicefeedTypeschema_Title_TtextType_

	XsdGoPkgHasElems_sourcechoiceentryTypeschema_Source_TtextType_

	XsdGoPkgHasElems_linkchoicefeedTypeschema_Link_TlinkType_

	XsdGoPkgHasElems_updatedchoicefeedTypeschema_Updated_TdateTimeType_

	XsdGoPkgHasElems_summarychoiceentryTypeschema_Summary_TtextType_

	XsdGoPkgHasElems_idchoicefeedTypeschema_Id_TidType_

	XsdGoPkgHasElems_rightschoicefeedTypeschema_Rights_TtextType_
}

//	If the WalkHandlers.TentryType function is not nil (ie. was set by outside code), calls it with this TentryType instance as the single argument. Then calls the Walk() method on 12/13 embed(s) and 0/0 field(s) belonging to this TentryType instance.
func (me *TentryType) Walk() (err error) {
	if fn := WalkHandlers.TentryType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_contentchoiceentryTypeschema_Content_TcontentType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_categorychoicefeedTypeschema_Category_TcategoryType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_publishedchoiceentryTypeschema_Published_TdateTimeType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_authorchoicefeedTypeschema_Author_TpersonType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_contributorchoicefeedTypeschema_Contributor_TpersonType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_titlechoicefeedTypeschema_Title_TtextType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_sourcechoiceentryTypeschema_Source_TtextType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_linkchoicefeedTypeschema_Link_TlinkType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_updatedchoicefeedTypeschema_Updated_TdateTimeType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_summarychoiceentryTypeschema_Summary_TtextType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_idchoicefeedTypeschema_Id_TidType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_rightschoicefeedTypeschema_Rights_TtextType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_entrychoicefeedTypeschema_Entry_TentryType_ struct {
	Entries []*TentryType `xml:"http://www.w3.org/2005/Atom entry"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_entrychoicefeedTypeschema_Entry_TentryType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_entrychoicefeedTypeschema_Entry_TentryType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_entrychoicefeedTypeschema_Entry_TentryType_ instance.
func (me *XsdGoPkgHasElems_entrychoicefeedTypeschema_Entry_TentryType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_entrychoicefeedTypeschema_Entry_TentryType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Entries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TfeedType struct {
	XsdGoPkgHasElems_contributorchoicefeedTypeschema_Contributor_TpersonType_

	XsdGoPkgHasAtts_CommonAttributes

	XsdGoPkgHasElems_titlechoicefeedTypeschema_Title_TtextType_

	XsdGoPkgHasElems_authorchoicefeedTypeschema_Author_TpersonType_

	XsdGoPkgHasElems_iconchoicefeedTypeschema_Icon_TiconType_

	XsdGoPkgHasElems_updatedchoicefeedTypeschema_Updated_TdateTimeType_

	XsdGoPkgHasElems_linkchoicefeedTypeschema_Link_TlinkType_

	XsdGoPkgHasElems_entrychoicefeedTypeschema_Entry_TentryType_

	XsdGoPkgHasElems_rightschoicefeedTypeschema_Rights_TtextType_

	XsdGoPkgHasElems_generatorchoicefeedTypeschema_Generator_TgeneratorType_

	XsdGoPkgHasElems_categorychoicefeedTypeschema_Category_TcategoryType_

	XsdGoPkgHasElems_subtitlechoicefeedTypeschema_Subtitle_TtextType_

	XsdGoPkgHasElems_idchoicefeedTypeschema_Id_TidType_

	XsdGoPkgHasElems_logochoicefeedTypeschema_Logo_TlogoType_
}

//	If the WalkHandlers.TfeedType function is not nil (ie. was set by outside code), calls it with this TfeedType instance as the single argument. Then calls the Walk() method on 13/14 embed(s) and 0/0 field(s) belonging to this TfeedType instance.
func (me *TfeedType) Walk() (err error) {
	if fn := WalkHandlers.TfeedType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_subtitlechoicefeedTypeschema_Subtitle_TtextType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_idchoicefeedTypeschema_Id_TidType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_logochoicefeedTypeschema_Logo_TlogoType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_contributorchoicefeedTypeschema_Contributor_TpersonType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_titlechoicefeedTypeschema_Title_TtextType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_authorchoicefeedTypeschema_Author_TpersonType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_iconchoicefeedTypeschema_Icon_TiconType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_updatedchoicefeedTypeschema_Updated_TdateTimeType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_linkchoicefeedTypeschema_Link_TlinkType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_entrychoicefeedTypeschema_Entry_TentryType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_rightschoicefeedTypeschema_Rights_TtextType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_generatorchoicefeedTypeschema_Generator_TgeneratorType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_categorychoicefeedTypeschema_Category_TcategoryType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Feed struct {
	Feeds []*TfeedType `xml:"http://www.w3.org/2005/Atom feed"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Feed function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Feed instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Feed instance.
func (me *XsdGoPkgHasElems_Feed) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Feed; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Feeds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Feed struct {
	Feed *TfeedType `xml:"http://www.w3.org/2005/Atom feed"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Feed function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Feed instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Feed instance.
func (me *XsdGoPkgHasElem_Feed) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Feed; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Feed.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Entry struct {
	Entry *TentryType `xml:"http://www.w3.org/2005/Atom entry"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Entry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Entry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Entry instance.
func (me *XsdGoPkgHasElem_Entry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Entry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Entry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 37 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

//	Provides 37 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	XsdGoPkgHasElems_generatorchoicefeedTypeschema_Generator_TgeneratorType_  func(*XsdGoPkgHasElems_generatorchoicefeedTypeschema_Generator_TgeneratorType_, bool) error
	TuriType                                                                  func(*TuriType, bool) error
	XsdGoPkgHasElems_authorchoicefeedTypeschema_Author_TpersonType_           func(*XsdGoPkgHasElems_authorchoicefeedTypeschema_Author_TpersonType_, bool) error
	XsdGoPkgHasElems_contributorchoicefeedTypeschema_Contributor_TpersonType_ func(*XsdGoPkgHasElems_contributorchoicefeedTypeschema_Contributor_TpersonType_, bool) error
	XsdGoPkgHasElems_updatedchoicefeedTypeschema_Updated_TdateTimeType_       func(*XsdGoPkgHasElems_updatedchoicefeedTypeschema_Updated_TdateTimeType_, bool) error
	XsdGoPkgHasElem_Entry                                                     func(*XsdGoPkgHasElem_Entry, bool) error
	XsdGoPkgHasElem_Feed                                                      func(*XsdGoPkgHasElem_Feed, bool) error
	XsdGoPkgHasElems_categorychoicefeedTypeschema_Category_TcategoryType_     func(*XsdGoPkgHasElems_categorychoicefeedTypeschema_Category_TcategoryType_, bool) error
	XsdGoPkgHasElems_Feed                                                     func(*XsdGoPkgHasElems_Feed, bool) error
	XsdGoPkgHasElems_namechoicepersonTypeschema_Name_XsdtString_              func(*XsdGoPkgHasElems_namechoicepersonTypeschema_Name_XsdtString_, bool) error
	XsdGoPkgHasCdata                                                          func(*XsdGoPkgHasCdata, bool) error
	XsdGoPkgHasElems_contentchoiceentryTypeschema_Content_TcontentType_       func(*XsdGoPkgHasElems_contentchoiceentryTypeschema_Content_TcontentType_, bool) error
	TtextType                                                                 func(*TtextType, bool) error
	TdateTimeType                                                             func(*TdateTimeType, bool) error
	XsdGoPkgHasElems_iconchoicefeedTypeschema_Icon_TiconType_                 func(*XsdGoPkgHasElems_iconchoicefeedTypeschema_Icon_TiconType_, bool) error
	XsdGoPkgHasElems_emailchoicepersonTypeschema_Email_TemailType_            func(*XsdGoPkgHasElems_emailchoicepersonTypeschema_Email_TemailType_, bool) error
	XsdGoPkgHasElems_urichoicepersonTypeschema_Uri_TuriType_                  func(*XsdGoPkgHasElems_urichoicepersonTypeschema_Uri_TuriType_, bool) error
	TlinkType                                                                 func(*TlinkType, bool) error
	XsdGoPkgHasElems_logochoicefeedTypeschema_Logo_TlogoType_                 func(*XsdGoPkgHasElems_logochoicefeedTypeschema_Logo_TlogoType_, bool) error
	XsdGoPkgHasElems_publishedchoiceentryTypeschema_Published_TdateTimeType_  func(*XsdGoPkgHasElems_publishedchoiceentryTypeschema_Published_TdateTimeType_, bool) error
	XsdGoPkgHasElems_idchoicefeedTypeschema_Id_TidType_                       func(*XsdGoPkgHasElems_idchoicefeedTypeschema_Id_TidType_, bool) error
	TiconType                                                                 func(*TiconType, bool) error
	TcontentType                                                              func(*TcontentType, bool) error
	XsdGoPkgHasElems_rightschoicefeedTypeschema_Rights_TtextType_             func(*XsdGoPkgHasElems_rightschoicefeedTypeschema_Rights_TtextType_, bool) error
	TlogoType                                                                 func(*TlogoType, bool) error
	XsdGoPkgHasElems_summarychoiceentryTypeschema_Summary_TtextType_          func(*XsdGoPkgHasElems_summarychoiceentryTypeschema_Summary_TtextType_, bool) error
	TentryType                                                                func(*TentryType, bool) error
	XsdGoPkgHasElems_titlechoicefeedTypeschema_Title_TtextType_               func(*XsdGoPkgHasElems_titlechoicefeedTypeschema_Title_TtextType_, bool) error
	TfeedType                                                                 func(*TfeedType, bool) error
	TpersonType                                                               func(*TpersonType, bool) error
	XsdGoPkgHasElems_sourcechoiceentryTypeschema_Source_TtextType_            func(*XsdGoPkgHasElems_sourcechoiceentryTypeschema_Source_TtextType_, bool) error
	TgeneratorType                                                            func(*TgeneratorType, bool) error
	XsdGoPkgHasElems_subtitlechoicefeedTypeschema_Subtitle_TtextType_         func(*XsdGoPkgHasElems_subtitlechoicefeedTypeschema_Subtitle_TtextType_, bool) error
	XsdGoPkgHasElems_linkchoicefeedTypeschema_Link_TlinkType_                 func(*XsdGoPkgHasElems_linkchoicefeedTypeschema_Link_TlinkType_, bool) error
	TidType                                                                   func(*TidType, bool) error
	XsdGoPkgHasElems_entrychoicefeedTypeschema_Entry_TentryType_              func(*XsdGoPkgHasElems_entrychoicefeedTypeschema_Entry_TentryType_, bool) error
	TcategoryType                                                             func(*TcategoryType, bool) error
}
